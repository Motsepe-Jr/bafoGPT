; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = shl i32 %7, 1, !dbg !8
  %9 = and i32 %8, 510, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %11 = shl i32 %10, 9, !dbg !10
  %12 = or i32 %11, %9, !dbg !11
  %13 = or i32 %12, 1, !dbg !11
  %.frozen = freeze i32 %12
  %14 = sdiv i32 %.frozen, 256, !dbg !12
  %15 = mul i32 %14, 256
  %.decomposed = sub i32 %.frozen, %15
  %16 = srem i32 %13, 256, !dbg !13
  %17 = srem i32 %14, 2048, !dbg !14
  %.frozen1 = freeze i32 %12
  %18 = sdiv i32 %.frozen1, 524288, !dbg !15
  %19 = mul i32 %18, 524288
  %.decomposed2 = sub i32 %.frozen1, %19
  %20 = srem i32 %13, 524288, !dbg !16
  %.lhs.trunc = trunc i32 %18 to i16, !dbg !17
  %21 = srem i16 %.lhs.trunc, 2, !dbg !17
  %.sext = sext i16 %21 to i32, !dbg !17
  %22 = shl nsw i32 %.sext, 8, !dbg !18
  %23 = sdiv i32 %12, 1048576, !dbg !19
  %24 = shl nsw i32 %23, 10, !dbg !20
  %25 = shl nsw i32 %17, 12, !dbg !21
  %26 = add nsw i32 %25, %24, !dbg !22
  %27 = add nsw i32 %26, %.decomposed, !dbg !23
  %28 = add nsw i32 %27, %22, !dbg !24
  %29 = add nsw i32 %26, %16, !dbg !23
  %30 = add nsw i32 %29, %22, !dbg !24
  %31 = sext i32 %28 to i64, !dbg !25
  %32 = getelementptr i16, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = sext i32 %30 to i64, !dbg !25
  %34 = getelementptr i16, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %32, i1 true, i16 0, i1 true) #1, !dbg !26
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %34, i1 true, i16 0, i1 true) #1, !dbg !26
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #1, !dbg !27
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #1, !dbg !27
  %39 = sext i32 %.decomposed2 to i64, !dbg !28
  %40 = getelementptr i16, ptr addrspace(1) %1, i64 %39, !dbg !28
  %41 = sext i32 %20 to i64, !dbg !28
  %42 = getelementptr i16, ptr addrspace(1) %1, i64 %41, !dbg !28
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %40, i1 true, i16 0, i1 true) #1, !dbg !29
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %42, i1 true, i16 0, i1 true) #1, !dbg !29
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #1, !dbg !30
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #1, !dbg !30
  %47 = fmul float %37, %45, !dbg !31
  %48 = fmul float %38, %46, !dbg !31
  %49 = icmp slt i32 %.decomposed, 128, !dbg !32
  %50 = icmp slt i32 %16, 128, !dbg !32
  %51 = or i32 %26, 128, !dbg !33
  %52 = add nsw i32 %51, %.decomposed, !dbg !34
  %53 = add nsw i32 %52, %22, !dbg !35
  %54 = add nsw i32 %51, %16, !dbg !34
  %55 = add nsw i32 %54, %22, !dbg !35
  %56 = sext i32 %53 to i64, !dbg !36
  %57 = getelementptr i16, ptr addrspace(1) %0, i64 %56, !dbg !36
  %58 = sext i32 %55 to i64, !dbg !36
  %59 = getelementptr i16, ptr addrspace(1) %0, i64 %58, !dbg !36
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %57, i1 %49, i16 0, i1 %49) #1, !dbg !37
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %59, i1 %50, i16 0, i1 %50) #1, !dbg !37
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #1, !dbg !38
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #1, !dbg !38
  %64 = fsub float 0.000000e+00, %62, !dbg !39
  %65 = fsub float 0.000000e+00, %63, !dbg !39
  %66 = icmp sgt i32 %.decomposed, 127, !dbg !40
  %67 = icmp sgt i32 %16, 127, !dbg !40
  %68 = add nsw i32 %26, -128, !dbg !41
  %69 = add nsw i32 %68, %.decomposed, !dbg !42
  %70 = add nsw i32 %69, %22, !dbg !43
  %71 = add nsw i32 %68, %16, !dbg !42
  %72 = add nsw i32 %71, %22, !dbg !43
  %73 = sext i32 %70 to i64, !dbg !44
  %74 = getelementptr i16, ptr addrspace(1) %0, i64 %73, !dbg !44
  %75 = sext i32 %72 to i64, !dbg !44
  %76 = getelementptr i16, ptr addrspace(1) %0, i64 %75, !dbg !44
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %74, i1 %66, i16 0, i1 %66) #1, !dbg !45
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %76, i1 %67, i16 0, i1 %67) #1, !dbg !45
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #1, !dbg !46
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #1, !dbg !46
  %81 = select i1 %66, float %79, float 0.000000e+00, !dbg !47
  %82 = select i1 %67, float %80, float 0.000000e+00, !dbg !47
  %83 = select i1 %49, float %64, float %81, !dbg !48
  %84 = select i1 %50, float %65, float %82, !dbg !48
  %85 = getelementptr i16, ptr addrspace(1) %2, i64 %39, !dbg !49
  %86 = getelementptr i16, ptr addrspace(1) %2, i64 %41, !dbg !49
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %85, i1 true, i16 0, i1 true) #1, !dbg !50
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %86, i1 true, i16 0, i1 true) #1, !dbg !50
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #1, !dbg !51
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #1, !dbg !51
  %91 = fmul float %83, %89, !dbg !52
  %92 = fmul float %84, %90, !dbg !52
  %93 = fadd float %47, %91, !dbg !53
  %94 = fadd float %48, %92, !dbg !53
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %32, i1 false, i16 0, i1 false) #1, !dbg !54
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %34, i1 false, i16 0, i1 false) #1, !dbg !54
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #1, !dbg !55
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #1, !dbg !55
  %99 = or i32 %26, 512, !dbg !56
  %100 = add nsw i32 %99, %.decomposed, !dbg !57
  %101 = add nsw i32 %99, %16, !dbg !57
  %102 = sext i32 %100 to i64, !dbg !58
  %103 = getelementptr i16, ptr addrspace(1) %0, i64 %102, !dbg !58
  %104 = sext i32 %101 to i64, !dbg !58
  %105 = getelementptr i16, ptr addrspace(1) %0, i64 %104, !dbg !58
  %106 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %103, i1 true, i16 0, i1 true) #1, !dbg !59
  %107 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %105, i1 true, i16 0, i1 true) #1, !dbg !59
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #1, !dbg !60
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #1, !dbg !60
  %110 = fmul float %45, %108, !dbg !61
  %111 = fmul float %46, %109, !dbg !61
  %112 = or i32 %26, 640, !dbg !62
  %113 = add nsw i32 %112, %.decomposed, !dbg !63
  %114 = add nsw i32 %112, %16, !dbg !63
  %115 = sext i32 %113 to i64, !dbg !64
  %116 = getelementptr i16, ptr addrspace(1) %0, i64 %115, !dbg !64
  %117 = sext i32 %114 to i64, !dbg !64
  %118 = getelementptr i16, ptr addrspace(1) %0, i64 %117, !dbg !64
  %119 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %116, i1 %49, i16 0, i1 %49) #1, !dbg !65
  %120 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %118, i1 %50, i16 0, i1 %50) #1, !dbg !65
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #1, !dbg !66
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #1, !dbg !66
  %123 = fsub float 0.000000e+00, %121, !dbg !67
  %124 = fsub float 0.000000e+00, %122, !dbg !67
  %125 = or i32 %26, 384, !dbg !68
  %126 = add nsw i32 %125, %.decomposed, !dbg !69
  %127 = add nsw i32 %125, %16, !dbg !69
  %128 = sext i32 %126 to i64, !dbg !70
  %129 = getelementptr i16, ptr addrspace(1) %0, i64 %128, !dbg !70
  %130 = sext i32 %127 to i64, !dbg !70
  %131 = getelementptr i16, ptr addrspace(1) %0, i64 %130, !dbg !70
  %132 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %129, i1 %66, i16 0, i1 %66) #1, !dbg !71
  %133 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %131, i1 %67, i16 0, i1 %67) #1, !dbg !71
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %132) #1, !dbg !72
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %133) #1, !dbg !72
  %136 = select i1 %66, float %134, float 0.000000e+00, !dbg !73
  %137 = select i1 %67, float %135, float 0.000000e+00, !dbg !73
  %138 = select i1 %49, float %123, float %136, !dbg !74
  %139 = select i1 %50, float %124, float %137, !dbg !74
  %140 = fmul float %89, %138, !dbg !75
  %141 = fmul float %90, %139, !dbg !75
  %142 = fadd float %110, %140, !dbg !76
  %143 = fadd float %111, %141, !dbg !76
  %144 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %103, i1 false, i16 0, i1 false) #1, !dbg !77
  %145 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %105, i1 false, i16 0, i1 false) #1, !dbg !77
  %146 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #1, !dbg !78
  %147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #1, !dbg !78
  %148 = sext i32 %12 to i64, !dbg !79
  %149 = getelementptr i16, ptr addrspace(1) %3, i64 %148, !dbg !79
  %150 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %93) #1, !dbg !80
  %151 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %94) #1, !dbg !80
  %152 = insertelement <2 x i16> undef, i16 %150, i64 0, !dbg !80
  %153 = insertelement <2 x i16> %152, i16 %151, i64 1, !dbg !80
  %154 = bitcast <2 x i16> %153 to i32, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %149, i1 true) #1, !dbg !80
  %155 = getelementptr i16, ptr addrspace(1) %4, i64 %148, !dbg !81
  %156 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %142) #1, !dbg !82
  %157 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %143) #1, !dbg !82
  %158 = insertelement <2 x i16> undef, i16 %156, i64 0, !dbg !82
  %159 = insertelement <2 x i16> %158, i16 %157, i64 1, !dbg !82
  %160 = bitcast <2 x i16> %159 to i32, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %155, i1 true) #1, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "crap6n3vaf4bkjxnhp6idihfg3dfc7e6l6updbyn2rrnjadj7mm3.py", directory: "/tmp/torchinductor_zeus/ra")
!3 = !{ptr @triton__0d1d2d3d4d5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de", linkageName: "triton__0d1d2d3d4d5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 20, scope: !5)
!13 = !DILocation(line: 23, column: 18, scope: !5)
!14 = !DILocation(line: 24, column: 27, scope: !5)
!15 = !DILocation(line: 25, column: 20, scope: !5)
!16 = !DILocation(line: 26, column: 18, scope: !5)
!17 = !DILocation(line: 33, column: 46, scope: !5)
!18 = !DILocation(line: 33, column: 41, scope: !5)
!19 = !DILocation(line: 33, column: 65, scope: !5)
!20 = !DILocation(line: 33, column: 59, scope: !5)
!21 = !DILocation(line: 33, column: 77, scope: !5)
!22 = !DILocation(line: 33, column: 36, scope: !5)
!23 = !DILocation(line: 33, column: 53, scope: !5)
!24 = !DILocation(line: 33, column: 72, scope: !5)
!25 = !DILocation(line: 33, column: 30, scope: !5)
!26 = !DILocation(line: 33, column: 83, scope: !5)
!27 = !DILocation(line: 33, column: 103, scope: !5)
!28 = !DILocation(line: 34, column: 30, scope: !5)
!29 = !DILocation(line: 34, column: 35, scope: !5)
!30 = !DILocation(line: 34, column: 85, scope: !5)
!31 = !DILocation(line: 35, column: 18, scope: !5)
!32 = !DILocation(line: 37, column: 18, scope: !5)
!33 = !DILocation(line: 39, column: 43, scope: !5)
!34 = !DILocation(line: 39, column: 60, scope: !5)
!35 = !DILocation(line: 39, column: 79, scope: !5)
!36 = !DILocation(line: 39, column: 31, scope: !5)
!37 = !DILocation(line: 39, column: 90, scope: !5)
!38 = !DILocation(line: 39, column: 111, scope: !5)
!39 = !DILocation(line: 40, column: 13, scope: !5)
!40 = !DILocation(line: 43, column: 20, scope: !5)
!41 = !DILocation(line: 45, column: 46, scope: !5)
!42 = !DILocation(line: 45, column: 63, scope: !5)
!43 = !DILocation(line: 45, column: 82, scope: !5)
!44 = !DILocation(line: 45, column: 31, scope: !5)
!45 = !DILocation(line: 45, column: 93, scope: !5)
!46 = !DILocation(line: 45, column: 114, scope: !5)
!47 = !DILocation(line: 47, column: 35, scope: !5)
!48 = !DILocation(line: 48, column: 34, scope: !5)
!49 = !DILocation(line: 49, column: 31, scope: !5)
!50 = !DILocation(line: 49, column: 36, scope: !5)
!51 = !DILocation(line: 49, column: 86, scope: !5)
!52 = !DILocation(line: 50, column: 20, scope: !5)
!53 = !DILocation(line: 51, column: 19, scope: !5)
!54 = !DILocation(line: 55, column: 84, scope: !5)
!55 = !DILocation(line: 55, column: 105, scope: !5)
!56 = !DILocation(line: 59, column: 43, scope: !5)
!57 = !DILocation(line: 59, column: 62, scope: !5)
!58 = !DILocation(line: 59, column: 31, scope: !5)
!59 = !DILocation(line: 59, column: 73, scope: !5)
!60 = !DILocation(line: 59, column: 93, scope: !5)
!61 = !DILocation(line: 60, column: 20, scope: !5)
!62 = !DILocation(line: 61, column: 43, scope: !5)
!63 = !DILocation(line: 61, column: 62, scope: !5)
!64 = !DILocation(line: 61, column: 31, scope: !5)
!65 = !DILocation(line: 61, column: 73, scope: !5)
!66 = !DILocation(line: 61, column: 94, scope: !5)
!67 = !DILocation(line: 62, column: 13, scope: !5)
!68 = !DILocation(line: 65, column: 43, scope: !5)
!69 = !DILocation(line: 65, column: 62, scope: !5)
!70 = !DILocation(line: 65, column: 31, scope: !5)
!71 = !DILocation(line: 65, column: 73, scope: !5)
!72 = !DILocation(line: 65, column: 94, scope: !5)
!73 = !DILocation(line: 67, column: 35, scope: !5)
!74 = !DILocation(line: 68, column: 34, scope: !5)
!75 = !DILocation(line: 69, column: 20, scope: !5)
!76 = !DILocation(line: 70, column: 20, scope: !5)
!77 = !DILocation(line: 73, column: 73, scope: !5)
!78 = !DILocation(line: 73, column: 94, scope: !5)
!79 = !DILocation(line: 77, column: 25, scope: !5)
!80 = !DILocation(line: 77, column: 37, scope: !5)
!81 = !DILocation(line: 78, column: 25, scope: !5)
!82 = !DILocation(line: 78, column: 37, scope: !5)
!83 = !DILocation(line: 78, column: 4, scope: !5)
