; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = shl i32 %7, 1, !dbg !8
  %9 = and i32 %8, 510, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %11 = shl i32 %10, 9, !dbg !10
  %12 = or i32 %11, %9, !dbg !11
  %13 = or i32 %12, 1, !dbg !11
  %.frozen = freeze i32 %12
  %14 = sdiv i32 %.frozen, 256, !dbg !12
  %15 = mul i32 %14, 256
  %.decomposed = sub i32 %.frozen, %15
  %16 = srem i32 %13, 256, !dbg !13
  %17 = srem i32 %14, 2048, !dbg !14
  %.frozen1 = freeze i32 %12
  %18 = sdiv i32 %.frozen1, 524288, !dbg !15
  %19 = mul i32 %18, 524288
  %.decomposed2 = sub i32 %.frozen1, %19
  %20 = srem i32 %13, 524288, !dbg !16
  %21 = sdiv i32 %12, 1048576, !dbg !17
  %22 = shl nsw i32 %21, 10, !dbg !18
  %23 = shl nsw i32 %17, 12, !dbg !19
  %24 = add nsw i32 %23, %22, !dbg !20
  %25 = or i32 %24, 512, !dbg !21
  %26 = add nsw i32 %25, %.decomposed, !dbg !22
  %27 = add nsw i32 %25, %16, !dbg !22
  %28 = sext i32 %26 to i64, !dbg !23
  %29 = getelementptr i16, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = sext i32 %27 to i64, !dbg !23
  %31 = getelementptr i16, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %29, i1 true, i16 0, i1 true) #1, !dbg !24
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %31, i1 true, i16 0, i1 true) #1, !dbg !24
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #1, !dbg !25
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #1, !dbg !25
  %36 = sext i32 %.decomposed2 to i64, !dbg !26
  %37 = getelementptr i16, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = sext i32 %20 to i64, !dbg !26
  %39 = getelementptr i16, ptr addrspace(1) %1, i64 %38, !dbg !26
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %37, i1 true, i16 0, i1 true) #1, !dbg !27
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %39, i1 true, i16 0, i1 true) #1, !dbg !27
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #1, !dbg !28
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #1, !dbg !28
  %44 = fmul float %34, %42, !dbg !29
  %45 = fmul float %35, %43, !dbg !29
  %46 = icmp slt i32 %.decomposed, 128, !dbg !30
  %47 = icmp slt i32 %16, 128, !dbg !30
  %48 = or i32 %24, 640, !dbg !31
  %49 = add nsw i32 %48, %.decomposed, !dbg !32
  %50 = add nsw i32 %48, %16, !dbg !32
  %51 = sext i32 %49 to i64, !dbg !33
  %52 = getelementptr i16, ptr addrspace(1) %0, i64 %51, !dbg !33
  %53 = sext i32 %50 to i64, !dbg !33
  %54 = getelementptr i16, ptr addrspace(1) %0, i64 %53, !dbg !33
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %52, i1 %46, i16 0, i1 %46) #1, !dbg !34
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %54, i1 %47, i16 0, i1 %47) #1, !dbg !34
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #1, !dbg !35
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #1, !dbg !35
  %59 = fsub float 0.000000e+00, %57, !dbg !36
  %60 = fsub float 0.000000e+00, %58, !dbg !36
  %61 = icmp sgt i32 %.decomposed, 127, !dbg !37
  %62 = icmp sgt i32 %16, 127, !dbg !37
  %63 = or i32 %24, 384, !dbg !38
  %64 = add nsw i32 %63, %.decomposed, !dbg !39
  %65 = add nsw i32 %63, %16, !dbg !39
  %66 = sext i32 %64 to i64, !dbg !40
  %67 = getelementptr i16, ptr addrspace(1) %0, i64 %66, !dbg !40
  %68 = sext i32 %65 to i64, !dbg !40
  %69 = getelementptr i16, ptr addrspace(1) %0, i64 %68, !dbg !40
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %67, i1 %61, i16 0, i1 %61) #1, !dbg !41
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %69, i1 %62, i16 0, i1 %62) #1, !dbg !41
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #1, !dbg !42
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #1, !dbg !42
  %74 = select i1 %61, float %72, float 0.000000e+00, !dbg !43
  %75 = select i1 %62, float %73, float 0.000000e+00, !dbg !43
  %76 = select i1 %46, float %59, float %74, !dbg !44
  %77 = select i1 %47, float %60, float %75, !dbg !44
  %78 = getelementptr i16, ptr addrspace(1) %2, i64 %36, !dbg !45
  %79 = getelementptr i16, ptr addrspace(1) %2, i64 %38, !dbg !45
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %78, i1 true, i16 0, i1 true) #1, !dbg !46
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %79, i1 true, i16 0, i1 true) #1, !dbg !46
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #1, !dbg !47
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #1, !dbg !47
  %84 = fmul float %76, %82, !dbg !48
  %85 = fmul float %77, %83, !dbg !48
  %86 = fadd float %44, %84, !dbg !49
  %87 = fadd float %45, %85, !dbg !49
  %.lhs.trunc = trunc i32 %18 to i16, !dbg !50
  %88 = srem i16 %.lhs.trunc, 2, !dbg !50
  %.sext = sext i16 %88 to i32, !dbg !50
  %89 = shl nsw i32 %.sext, 8, !dbg !51
  %90 = add nsw i32 %24, %.decomposed, !dbg !52
  %91 = add nsw i32 %90, %89, !dbg !53
  %92 = add nsw i32 %24, %16, !dbg !52
  %93 = add nsw i32 %92, %89, !dbg !53
  %94 = sext i32 %91 to i64, !dbg !54
  %95 = getelementptr i16, ptr addrspace(1) %0, i64 %94, !dbg !54
  %96 = sext i32 %93 to i64, !dbg !54
  %97 = getelementptr i16, ptr addrspace(1) %0, i64 %96, !dbg !54
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %95, i1 true, i16 0, i1 true) #1, !dbg !55
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %97, i1 true, i16 0, i1 true) #1, !dbg !55
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #1, !dbg !56
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #1, !dbg !56
  %102 = fmul float %42, %100, !dbg !57
  %103 = fmul float %43, %101, !dbg !57
  %104 = or i32 %24, 128, !dbg !58
  %105 = add nsw i32 %104, %.decomposed, !dbg !59
  %106 = add nsw i32 %105, %89, !dbg !60
  %107 = add nsw i32 %104, %16, !dbg !59
  %108 = add nsw i32 %107, %89, !dbg !60
  %109 = sext i32 %106 to i64, !dbg !61
  %110 = getelementptr i16, ptr addrspace(1) %0, i64 %109, !dbg !61
  %111 = sext i32 %108 to i64, !dbg !61
  %112 = getelementptr i16, ptr addrspace(1) %0, i64 %111, !dbg !61
  %113 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %110, i1 %46, i16 0, i1 %46) #1, !dbg !62
  %114 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %112, i1 %47, i16 0, i1 %47) #1, !dbg !62
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #1, !dbg !63
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #1, !dbg !63
  %117 = fsub float 0.000000e+00, %115, !dbg !64
  %118 = fsub float 0.000000e+00, %116, !dbg !64
  %119 = add nsw i32 %24, -128, !dbg !65
  %120 = add nsw i32 %119, %.decomposed, !dbg !66
  %121 = add nsw i32 %120, %89, !dbg !67
  %122 = add nsw i32 %119, %16, !dbg !66
  %123 = add nsw i32 %122, %89, !dbg !67
  %124 = sext i32 %121 to i64, !dbg !68
  %125 = getelementptr i16, ptr addrspace(1) %0, i64 %124, !dbg !68
  %126 = sext i32 %123 to i64, !dbg !68
  %127 = getelementptr i16, ptr addrspace(1) %0, i64 %126, !dbg !68
  %128 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %125, i1 %61, i16 0, i1 %61) #1, !dbg !69
  %129 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %127, i1 %62, i16 0, i1 %62) #1, !dbg !69
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %128) #1, !dbg !70
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %129) #1, !dbg !70
  %132 = select i1 %61, float %130, float 0.000000e+00, !dbg !71
  %133 = select i1 %62, float %131, float 0.000000e+00, !dbg !71
  %134 = select i1 %46, float %117, float %132, !dbg !72
  %135 = select i1 %47, float %118, float %133, !dbg !72
  %136 = fmul float %82, %134, !dbg !73
  %137 = fmul float %83, %135, !dbg !73
  %138 = fadd float %102, %136, !dbg !74
  %139 = fadd float %103, %137, !dbg !74
  %140 = sext i32 %12 to i64, !dbg !75
  %141 = getelementptr i16, ptr addrspace(1) %3, i64 %140, !dbg !75
  %142 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %86) #1, !dbg !76
  %143 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %87) #1, !dbg !76
  %144 = insertelement <2 x i16> undef, i16 %142, i64 0, !dbg !76
  %145 = insertelement <2 x i16> %144, i16 %143, i64 1, !dbg !76
  %146 = bitcast <2 x i16> %145 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %141, i1 true) #1, !dbg !76
  %147 = getelementptr i16, ptr addrspace(1) %4, i64 %140, !dbg !77
  %148 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %138) #1, !dbg !78
  %149 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %139) #1, !dbg !78
  %150 = insertelement <2 x i16> undef, i16 %148, i64 0, !dbg !78
  %151 = insertelement <2 x i16> %150, i16 %149, i64 1, !dbg !78
  %152 = bitcast <2 x i16> %151 to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %147, i1 true) #1, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "ciuklcrjqvlpplmbepd4tk5t4aizyl3iu52w4vrzk2yab5gsfych.py", directory: "/tmp/torchinductor_zeus/iu")
!3 = !{ptr @triton__0d1d2d3d4d5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de", linkageName: "triton__0d1d2d3d4d5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 20, scope: !5)
!13 = !DILocation(line: 23, column: 18, scope: !5)
!14 = !DILocation(line: 24, column: 27, scope: !5)
!15 = !DILocation(line: 25, column: 20, scope: !5)
!16 = !DILocation(line: 26, column: 18, scope: !5)
!17 = !DILocation(line: 33, column: 54, scope: !5)
!18 = !DILocation(line: 33, column: 48, scope: !5)
!19 = !DILocation(line: 33, column: 66, scope: !5)
!20 = !DILocation(line: 33, column: 36, scope: !5)
!21 = !DILocation(line: 33, column: 42, scope: !5)
!22 = !DILocation(line: 33, column: 61, scope: !5)
!23 = !DILocation(line: 33, column: 30, scope: !5)
!24 = !DILocation(line: 33, column: 72, scope: !5)
!25 = !DILocation(line: 33, column: 92, scope: !5)
!26 = !DILocation(line: 34, column: 30, scope: !5)
!27 = !DILocation(line: 34, column: 35, scope: !5)
!28 = !DILocation(line: 34, column: 85, scope: !5)
!29 = !DILocation(line: 35, column: 18, scope: !5)
!30 = !DILocation(line: 37, column: 18, scope: !5)
!31 = !DILocation(line: 39, column: 43, scope: !5)
!32 = !DILocation(line: 39, column: 62, scope: !5)
!33 = !DILocation(line: 39, column: 31, scope: !5)
!34 = !DILocation(line: 39, column: 73, scope: !5)
!35 = !DILocation(line: 39, column: 94, scope: !5)
!36 = !DILocation(line: 40, column: 13, scope: !5)
!37 = !DILocation(line: 43, column: 20, scope: !5)
!38 = !DILocation(line: 45, column: 43, scope: !5)
!39 = !DILocation(line: 45, column: 62, scope: !5)
!40 = !DILocation(line: 45, column: 31, scope: !5)
!41 = !DILocation(line: 45, column: 73, scope: !5)
!42 = !DILocation(line: 45, column: 94, scope: !5)
!43 = !DILocation(line: 47, column: 35, scope: !5)
!44 = !DILocation(line: 48, column: 34, scope: !5)
!45 = !DILocation(line: 49, column: 31, scope: !5)
!46 = !DILocation(line: 49, column: 36, scope: !5)
!47 = !DILocation(line: 49, column: 86, scope: !5)
!48 = !DILocation(line: 50, column: 20, scope: !5)
!49 = !DILocation(line: 51, column: 19, scope: !5)
!50 = !DILocation(line: 59, column: 47, scope: !5)
!51 = !DILocation(line: 59, column: 42, scope: !5)
!52 = !DILocation(line: 59, column: 54, scope: !5)
!53 = !DILocation(line: 59, column: 73, scope: !5)
!54 = !DILocation(line: 59, column: 31, scope: !5)
!55 = !DILocation(line: 59, column: 84, scope: !5)
!56 = !DILocation(line: 59, column: 104, scope: !5)
!57 = !DILocation(line: 60, column: 20, scope: !5)
!58 = !DILocation(line: 61, column: 43, scope: !5)
!59 = !DILocation(line: 61, column: 60, scope: !5)
!60 = !DILocation(line: 61, column: 79, scope: !5)
!61 = !DILocation(line: 61, column: 31, scope: !5)
!62 = !DILocation(line: 61, column: 90, scope: !5)
!63 = !DILocation(line: 61, column: 111, scope: !5)
!64 = !DILocation(line: 62, column: 13, scope: !5)
!65 = !DILocation(line: 65, column: 46, scope: !5)
!66 = !DILocation(line: 65, column: 63, scope: !5)
!67 = !DILocation(line: 65, column: 82, scope: !5)
!68 = !DILocation(line: 65, column: 31, scope: !5)
!69 = !DILocation(line: 65, column: 93, scope: !5)
!70 = !DILocation(line: 65, column: 114, scope: !5)
!71 = !DILocation(line: 67, column: 35, scope: !5)
!72 = !DILocation(line: 68, column: 34, scope: !5)
!73 = !DILocation(line: 69, column: 20, scope: !5)
!74 = !DILocation(line: 70, column: 20, scope: !5)
!75 = !DILocation(line: 74, column: 25, scope: !5)
!76 = !DILocation(line: 74, column: 37, scope: !5)
!77 = !DILocation(line: 75, column: 25, scope: !5)
!78 = !DILocation(line: 75, column: 37, scope: !5)
!79 = !DILocation(line: 75, column: 4, scope: !5)
