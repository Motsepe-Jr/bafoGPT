; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 127, !dbg !8
  %9 = shl nuw nsw i32 %8, 3, !dbg !8
  %10 = or i32 %8, 128, !dbg !8
  %11 = or i32 %8, 256, !dbg !8
  %12 = or i32 %8, 384, !dbg !8
  %13 = or i32 %8, 512, !dbg !8
  %14 = or i32 %8, 640, !dbg !8
  %15 = or i32 %8, 768, !dbg !8
  %16 = or i32 %8, 896, !dbg !8
  %17 = shl nuw nsw i32 %8, 2, !dbg !8
  %18 = or i32 %17, 512, !dbg !8
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %20 = shl i32 %19, 10, !dbg !10
  %21 = or i32 %20, %9, !dbg !11
  %22 = or i32 %20, %8, !dbg !11
  %23 = or i32 %20, %10, !dbg !11
  %24 = or i32 %20, %11, !dbg !11
  %25 = or i32 %20, %12, !dbg !11
  %26 = or i32 %20, %13, !dbg !11
  %27 = or i32 %20, %14, !dbg !11
  %28 = or i32 %20, %15, !dbg !11
  %29 = or i32 %20, %16, !dbg !11
  %30 = or i32 %20, %17, !dbg !11
  %31 = or i32 %20, %18, !dbg !11
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %33 = icmp slt i32 %32, 256, !dbg !13
  %.frozen = freeze i32 %21
  %34 = sdiv i32 %.frozen, 2048, !dbg !14
  %35 = mul i32 %34, 2048
  %.decomposed = sub i32 %.frozen, %35
  %36 = srem i32 %22, 2048, !dbg !15
  %37 = srem i32 %23, 2048, !dbg !15
  %38 = srem i32 %24, 2048, !dbg !15
  %39 = srem i32 %25, 2048, !dbg !15
  %40 = srem i32 %26, 2048, !dbg !15
  %41 = srem i32 %27, 2048, !dbg !15
  %42 = srem i32 %28, 2048, !dbg !15
  %43 = srem i32 %29, 2048, !dbg !15
  %.frozen46 = freeze i32 %30
  %44 = sdiv i32 %.frozen46, 2048, !dbg !14
  %45 = mul i32 %44, 2048
  %.decomposed47 = sub i32 %.frozen46, %45
  %.frozen48 = freeze i32 %31
  %46 = sdiv i32 %.frozen48, 2048, !dbg !14
  %47 = mul i32 %46, 2048
  %.decomposed49 = sub i32 %.frozen48, %47
  %48 = shl i32 %32, 11, !dbg !16
  %49 = add i32 %.decomposed, %48, !dbg !17
  %50 = add i32 %.decomposed47, %48, !dbg !17
  %51 = add i32 %.decomposed49, %48, !dbg !17
  %52 = shl i32 %34, 20, !dbg !18
  %53 = add i32 %49, %52, !dbg !19
  %54 = sext i32 %53 to i64, !dbg !20
  %55 = getelementptr i16, ptr addrspace(1) %0, i64 %54, !dbg !20
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %33) #2, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !21
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !21
  %61 = trunc i32 %57 to i16, !dbg !21
  %extelt.offset = lshr i32 %57, 16, !dbg !21
  %62 = trunc i32 %extelt.offset to i16, !dbg !21
  %63 = trunc i32 %58 to i16, !dbg !21
  %extelt.offset1 = lshr i32 %58, 16, !dbg !21
  %64 = trunc i32 %extelt.offset1 to i16, !dbg !21
  %65 = trunc i32 %59 to i16, !dbg !21
  %extelt.offset2 = lshr i32 %59, 16, !dbg !21
  %66 = trunc i32 %extelt.offset2 to i16, !dbg !21
  %67 = trunc i32 %60 to i16, !dbg !21
  %extelt.offset3 = lshr i32 %60, 16, !dbg !21
  %68 = trunc i32 %extelt.offset3 to i16, !dbg !21
  %69 = shl nuw nsw i32 %8, 4, !dbg !22
  %70 = zext nneg i32 %69 to i64, !dbg !22
  %71 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %70, !dbg !22
  %72 = insertelement <1 x i16> undef, i16 %61, i64 0, !dbg !22
  store <1 x i16> %72, ptr addrspace(3) %71, align 2, !dbg !22
  %73 = or i32 %69, 2, !dbg !22
  %74 = zext nneg i32 %73 to i64, !dbg !22
  %75 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %74, !dbg !22
  %76 = insertelement <1 x i16> undef, i16 %62, i64 0, !dbg !22
  store <1 x i16> %76, ptr addrspace(3) %75, align 2, !dbg !22
  %77 = or i32 %69, 4, !dbg !22
  %78 = zext nneg i32 %77 to i64, !dbg !22
  %79 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %78, !dbg !22
  %80 = insertelement <1 x i16> undef, i16 %63, i64 0, !dbg !22
  store <1 x i16> %80, ptr addrspace(3) %79, align 2, !dbg !22
  %81 = or i32 %69, 6, !dbg !22
  %82 = zext nneg i32 %81 to i64, !dbg !22
  %83 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %82, !dbg !22
  %84 = insertelement <1 x i16> undef, i16 %64, i64 0, !dbg !22
  store <1 x i16> %84, ptr addrspace(3) %83, align 2, !dbg !22
  %85 = or i32 %69, 8, !dbg !22
  %86 = zext nneg i32 %85 to i64, !dbg !22
  %87 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %86, !dbg !22
  %88 = insertelement <1 x i16> undef, i16 %65, i64 0, !dbg !22
  store <1 x i16> %88, ptr addrspace(3) %87, align 2, !dbg !22
  %89 = or i32 %69, 10, !dbg !22
  %90 = zext nneg i32 %89 to i64, !dbg !22
  %91 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %90, !dbg !22
  %92 = insertelement <1 x i16> undef, i16 %66, i64 0, !dbg !22
  store <1 x i16> %92, ptr addrspace(3) %91, align 2, !dbg !22
  %93 = or i32 %69, 12, !dbg !22
  %94 = zext nneg i32 %93 to i64, !dbg !22
  %95 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %94, !dbg !22
  %96 = insertelement <1 x i16> undef, i16 %67, i64 0, !dbg !22
  store <1 x i16> %96, ptr addrspace(3) %95, align 2, !dbg !22
  %97 = or i32 %69, 14, !dbg !22
  %98 = zext nneg i32 %97 to i64, !dbg !22
  %99 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %98, !dbg !22
  %100 = insertelement <1 x i16> undef, i16 %68, i64 0, !dbg !22
  store <1 x i16> %100, ptr addrspace(3) %99, align 2, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %101 = shl nuw nsw i32 %8, 1, !dbg !22
  %102 = zext nneg i32 %101 to i64, !dbg !22
  %103 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %102, !dbg !22
  %104 = load i16, ptr addrspace(3) %103, align 2, !dbg !22
  %105 = shl nuw nsw i32 %10, 1, !dbg !22
  %106 = zext nneg i32 %105 to i64, !dbg !22
  %107 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %106, !dbg !22
  %108 = load i16, ptr addrspace(3) %107, align 2, !dbg !22
  %109 = shl nuw nsw i32 %11, 1, !dbg !22
  %110 = zext nneg i32 %109 to i64, !dbg !22
  %111 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %110, !dbg !22
  %112 = load i16, ptr addrspace(3) %111, align 2, !dbg !22
  %113 = shl nuw nsw i32 %12, 1, !dbg !22
  %114 = zext nneg i32 %113 to i64, !dbg !22
  %115 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %114, !dbg !22
  %116 = load i16, ptr addrspace(3) %115, align 2, !dbg !22
  %117 = shl nuw nsw i32 %13, 1, !dbg !22
  %118 = zext nneg i32 %117 to i64, !dbg !22
  %119 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %118, !dbg !22
  %120 = load i16, ptr addrspace(3) %119, align 2, !dbg !22
  %121 = shl nuw nsw i32 %14, 1, !dbg !22
  %122 = zext nneg i32 %121 to i64, !dbg !22
  %123 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %122, !dbg !22
  %124 = load i16, ptr addrspace(3) %123, align 2, !dbg !22
  %125 = shl nuw nsw i32 %15, 1, !dbg !22
  %126 = zext nneg i32 %125 to i64, !dbg !22
  %127 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %126, !dbg !22
  %128 = load i16, ptr addrspace(3) %127, align 2, !dbg !22
  %129 = shl nuw nsw i32 %16, 1, !dbg !22
  %130 = zext nneg i32 %129 to i64, !dbg !22
  %131 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %130, !dbg !22
  %132 = load i16, ptr addrspace(3) %131, align 2, !dbg !22
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #2, !dbg !22
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #2, !dbg !22
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #2, !dbg !22
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #2, !dbg !22
  %137 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #2, !dbg !22
  %138 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #2, !dbg !22
  %139 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %128) #2, !dbg !22
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %132) #2, !dbg !22
  %141 = shl nsw i32 %36, 8, !dbg !23
  %142 = shl nsw i32 %37, 8, !dbg !23
  %143 = shl nsw i32 %38, 8, !dbg !23
  %144 = shl nsw i32 %39, 8, !dbg !23
  %145 = shl nsw i32 %40, 8, !dbg !23
  %146 = shl nsw i32 %41, 8, !dbg !23
  %147 = shl nsw i32 %42, 8, !dbg !23
  %148 = shl nsw i32 %43, 8, !dbg !23
  %149 = add i32 %141, %32, !dbg !24
  %150 = add i32 %142, %32, !dbg !24
  %151 = add i32 %143, %32, !dbg !24
  %152 = add i32 %144, %32, !dbg !24
  %153 = add i32 %145, %32, !dbg !24
  %154 = add i32 %146, %32, !dbg !24
  %155 = add i32 %147, %32, !dbg !24
  %156 = add i32 %148, %32, !dbg !24
  %157 = sext i32 %149 to i64, !dbg !25
  %158 = getelementptr i16, ptr addrspace(1) %1, i64 %157, !dbg !25
  %159 = sext i32 %150 to i64, !dbg !25
  %160 = getelementptr i16, ptr addrspace(1) %1, i64 %159, !dbg !25
  %161 = sext i32 %151 to i64, !dbg !25
  %162 = getelementptr i16, ptr addrspace(1) %1, i64 %161, !dbg !25
  %163 = sext i32 %152 to i64, !dbg !25
  %164 = getelementptr i16, ptr addrspace(1) %1, i64 %163, !dbg !25
  %165 = sext i32 %153 to i64, !dbg !25
  %166 = getelementptr i16, ptr addrspace(1) %1, i64 %165, !dbg !25
  %167 = sext i32 %154 to i64, !dbg !25
  %168 = getelementptr i16, ptr addrspace(1) %1, i64 %167, !dbg !25
  %169 = sext i32 %155 to i64, !dbg !25
  %170 = getelementptr i16, ptr addrspace(1) %1, i64 %169, !dbg !25
  %171 = sext i32 %156 to i64, !dbg !25
  %172 = getelementptr i16, ptr addrspace(1) %1, i64 %171, !dbg !25
  %173 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %158, i1 %33) #2, !dbg !26
  %174 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %160, i1 %33) #2, !dbg !26
  %175 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %162, i1 %33) #2, !dbg !26
  %176 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %164, i1 %33) #2, !dbg !26
  %177 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %166, i1 %33) #2, !dbg !26
  %178 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %168, i1 %33) #2, !dbg !26
  %179 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %170, i1 %33) #2, !dbg !26
  %180 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %172, i1 %33) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %181 = zext nneg i32 %8 to i64, !dbg !27
  %182 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %181, !dbg !27
  %183 = insertelement <1 x i16> undef, i16 %173, i64 0, !dbg !27
  store <1 x i16> %183, ptr addrspace(3) %182, align 2, !dbg !27
  %184 = zext nneg i32 %10 to i64, !dbg !27
  %185 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %184, !dbg !27
  %186 = insertelement <1 x i16> undef, i16 %174, i64 0, !dbg !27
  store <1 x i16> %186, ptr addrspace(3) %185, align 2, !dbg !27
  %187 = zext nneg i32 %11 to i64, !dbg !27
  %188 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %187, !dbg !27
  %189 = insertelement <1 x i16> undef, i16 %175, i64 0, !dbg !27
  store <1 x i16> %189, ptr addrspace(3) %188, align 2, !dbg !27
  %190 = zext nneg i32 %12 to i64, !dbg !27
  %191 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %190, !dbg !27
  %192 = insertelement <1 x i16> undef, i16 %176, i64 0, !dbg !27
  store <1 x i16> %192, ptr addrspace(3) %191, align 2, !dbg !27
  %193 = zext nneg i32 %13 to i64, !dbg !27
  %194 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %193, !dbg !27
  %195 = insertelement <1 x i16> undef, i16 %177, i64 0, !dbg !27
  store <1 x i16> %195, ptr addrspace(3) %194, align 2, !dbg !27
  %196 = zext nneg i32 %14 to i64, !dbg !27
  %197 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %196, !dbg !27
  %198 = insertelement <1 x i16> undef, i16 %178, i64 0, !dbg !27
  store <1 x i16> %198, ptr addrspace(3) %197, align 2, !dbg !27
  %199 = zext nneg i32 %15 to i64, !dbg !27
  %200 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %199, !dbg !27
  %201 = insertelement <1 x i16> undef, i16 %179, i64 0, !dbg !27
  store <1 x i16> %201, ptr addrspace(3) %200, align 2, !dbg !27
  %202 = zext nneg i32 %16 to i64, !dbg !27
  %203 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %202, !dbg !27
  %204 = insertelement <1 x i16> undef, i16 %180, i64 0, !dbg !27
  store <1 x i16> %204, ptr addrspace(3) %203, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %205 = zext nneg i32 %9 to i64, !dbg !27
  %206 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %205, !dbg !27
  %207 = load i16, ptr addrspace(3) %206, align 16, !dbg !27
  %208 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %206, i64 0, i64 1, !dbg !27
  %209 = load i16, ptr addrspace(3) %208, align 2, !dbg !27
  %210 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %206, i64 0, i64 2, !dbg !27
  %211 = load i16, ptr addrspace(3) %210, align 4, !dbg !27
  %212 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %206, i64 0, i64 3, !dbg !27
  %213 = load i16, ptr addrspace(3) %212, align 2, !dbg !27
  %214 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %206, i64 0, i64 4, !dbg !27
  %215 = load i16, ptr addrspace(3) %214, align 8, !dbg !27
  %216 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %206, i64 0, i64 5, !dbg !27
  %217 = load i16, ptr addrspace(3) %216, align 2, !dbg !27
  %218 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %206, i64 0, i64 6, !dbg !27
  %219 = load i16, ptr addrspace(3) %218, align 4, !dbg !27
  %220 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %206, i64 0, i64 7, !dbg !27
  %221 = load i16, ptr addrspace(3) %220, align 2, !dbg !27
  %222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %207) #2, !dbg !27
  %223 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %209) #2, !dbg !27
  %224 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %211) #2, !dbg !27
  %225 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %213) #2, !dbg !27
  %226 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %215) #2, !dbg !27
  %227 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %217) #2, !dbg !27
  %228 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %219) #2, !dbg !27
  %229 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %221) #2, !dbg !27
  %230 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %173) #2, !dbg !27
  %231 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %174) #2, !dbg !27
  %232 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %175) #2, !dbg !27
  %233 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %176) #2, !dbg !27
  %234 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %177) #2, !dbg !27
  %235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %178) #2, !dbg !27
  %236 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %179) #2, !dbg !27
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %180) #2, !dbg !27
  %238 = add i32 %49, 524288, !dbg !28
  %239 = add i32 %238, %52, !dbg !29
  %240 = sext i32 %239 to i64, !dbg !30
  %241 = getelementptr i16, ptr addrspace(1) %0, i64 %240, !dbg !30
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %241, i1 %33) #2, !dbg !31
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !31
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !31
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !31
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !31
  %247 = trunc i32 %243 to i16, !dbg !31
  %extelt.offset4 = lshr i32 %243, 16, !dbg !31
  %248 = trunc i32 %extelt.offset4 to i16, !dbg !31
  %249 = trunc i32 %244 to i16, !dbg !31
  %extelt.offset5 = lshr i32 %244, 16, !dbg !31
  %250 = trunc i32 %extelt.offset5 to i16, !dbg !31
  %251 = trunc i32 %245 to i16, !dbg !31
  %extelt.offset6 = lshr i32 %245, 16, !dbg !31
  %252 = trunc i32 %extelt.offset6 to i16, !dbg !31
  %253 = trunc i32 %246 to i16, !dbg !31
  %extelt.offset7 = lshr i32 %246, 16, !dbg !31
  %254 = trunc i32 %extelt.offset7 to i16, !dbg !31
  %255 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %247) #2, !dbg !32
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %248) #2, !dbg !32
  %257 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %249) #2, !dbg !32
  %258 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %250) #2, !dbg !32
  %259 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %251) #2, !dbg !32
  %260 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %252) #2, !dbg !32
  %261 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %253) #2, !dbg !32
  %262 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %254) #2, !dbg !32
  %263 = icmp sgt i32 %32, 255, !dbg !33
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !34
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !34
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !34
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !34
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !34
  %269 = trunc i32 %265 to i16, !dbg !34
  %extelt.offset8 = lshr i32 %265, 16, !dbg !34
  %270 = trunc i32 %extelt.offset8 to i16, !dbg !34
  %271 = trunc i32 %266 to i16, !dbg !34
  %extelt.offset9 = lshr i32 %266, 16, !dbg !34
  %272 = trunc i32 %extelt.offset9 to i16, !dbg !34
  %273 = trunc i32 %267 to i16, !dbg !34
  %extelt.offset10 = lshr i32 %267, 16, !dbg !34
  %274 = trunc i32 %extelt.offset10 to i16, !dbg !34
  %275 = trunc i32 %268 to i16, !dbg !34
  %extelt.offset11 = lshr i32 %268, 16, !dbg !34
  %276 = trunc i32 %extelt.offset11 to i16, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %277 = insertelement <1 x i16> undef, i16 %269, i64 0, !dbg !35
  store <1 x i16> %277, ptr addrspace(3) %71, align 2, !dbg !35
  %278 = insertelement <1 x i16> undef, i16 %270, i64 0, !dbg !35
  store <1 x i16> %278, ptr addrspace(3) %75, align 2, !dbg !35
  %279 = insertelement <1 x i16> undef, i16 %271, i64 0, !dbg !35
  store <1 x i16> %279, ptr addrspace(3) %79, align 2, !dbg !35
  %280 = insertelement <1 x i16> undef, i16 %272, i64 0, !dbg !35
  store <1 x i16> %280, ptr addrspace(3) %83, align 2, !dbg !35
  %281 = insertelement <1 x i16> undef, i16 %273, i64 0, !dbg !35
  store <1 x i16> %281, ptr addrspace(3) %87, align 2, !dbg !35
  %282 = insertelement <1 x i16> undef, i16 %274, i64 0, !dbg !35
  store <1 x i16> %282, ptr addrspace(3) %91, align 2, !dbg !35
  %283 = insertelement <1 x i16> undef, i16 %275, i64 0, !dbg !35
  store <1 x i16> %283, ptr addrspace(3) %95, align 2, !dbg !35
  %284 = insertelement <1 x i16> undef, i16 %276, i64 0, !dbg !35
  store <1 x i16> %284, ptr addrspace(3) %99, align 2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %285 = load i16, ptr addrspace(3) %103, align 2, !dbg !35
  %286 = load i16, ptr addrspace(3) %107, align 2, !dbg !35
  %287 = load i16, ptr addrspace(3) %111, align 2, !dbg !35
  %288 = load i16, ptr addrspace(3) %115, align 2, !dbg !35
  %289 = load i16, ptr addrspace(3) %119, align 2, !dbg !35
  %290 = load i16, ptr addrspace(3) %123, align 2, !dbg !35
  %291 = load i16, ptr addrspace(3) %127, align 2, !dbg !35
  %292 = load i16, ptr addrspace(3) %131, align 2, !dbg !35
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #2, !dbg !36
  %294 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #2, !dbg !36
  %295 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %287) #2, !dbg !36
  %296 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %288) #2, !dbg !36
  %297 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %289) #2, !dbg !36
  %298 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %290) #2, !dbg !36
  %299 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %291) #2, !dbg !36
  %300 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %292) #2, !dbg !36
  %301 = select i1 %263, float %293, float 0.000000e+00, !dbg !35
  %302 = select i1 %263, float %294, float 0.000000e+00, !dbg !35
  %303 = select i1 %263, float %295, float 0.000000e+00, !dbg !35
  %304 = select i1 %263, float %296, float 0.000000e+00, !dbg !35
  %305 = select i1 %263, float %297, float 0.000000e+00, !dbg !35
  %306 = select i1 %263, float %298, float 0.000000e+00, !dbg !35
  %307 = select i1 %263, float %299, float 0.000000e+00, !dbg !35
  %308 = select i1 %263, float %300, float 0.000000e+00, !dbg !35
  %309 = fmul float %133, %230, !dbg !37
  %310 = fmul float %134, %231, !dbg !37
  %311 = fmul float %135, %232, !dbg !37
  %312 = fmul float %136, %233, !dbg !37
  %313 = fmul float %137, %234, !dbg !37
  %314 = fmul float %138, %235, !dbg !37
  %315 = fmul float %139, %236, !dbg !37
  %316 = fmul float %140, %237, !dbg !37
  %317 = icmp sgt i32 %32, 127, !dbg !38
  %318 = add i32 %49, -262144, !dbg !39
  %319 = add i32 %318, %52, !dbg !40
  %320 = sext i32 %319 to i64, !dbg !41
  %321 = getelementptr i16, ptr addrspace(1) %0, i64 %320, !dbg !41
  %322 = and i32 %32, -128, !dbg !42
  %323 = icmp eq i32 %322, 128, !dbg !42
  %324 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %321, i1 %323, i32 0, i1 %323, i32 0, i1 %323, i32 0, i1 %323, i32 0, i1 %323) #2, !dbg !43
  %325 = extractvalue { i32, i32, i32, i32 } %324, 0, !dbg !43
  %326 = extractvalue { i32, i32, i32, i32 } %324, 1, !dbg !43
  %327 = extractvalue { i32, i32, i32, i32 } %324, 2, !dbg !43
  %328 = extractvalue { i32, i32, i32, i32 } %324, 3, !dbg !43
  %329 = trunc i32 %325 to i16, !dbg !43
  %extelt.offset12 = lshr i32 %325, 16, !dbg !43
  %330 = trunc i32 %extelt.offset12 to i16, !dbg !43
  %331 = trunc i32 %326 to i16, !dbg !43
  %extelt.offset13 = lshr i32 %326, 16, !dbg !43
  %332 = trunc i32 %extelt.offset13 to i16, !dbg !43
  %333 = trunc i32 %327 to i16, !dbg !43
  %extelt.offset14 = lshr i32 %327, 16, !dbg !43
  %334 = trunc i32 %extelt.offset14 to i16, !dbg !43
  %335 = trunc i32 %328 to i16, !dbg !43
  %extelt.offset15 = lshr i32 %328, 16, !dbg !43
  %336 = trunc i32 %extelt.offset15 to i16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %337 = insertelement <1 x i16> undef, i16 %329, i64 0, !dbg !44
  store <1 x i16> %337, ptr addrspace(3) %71, align 2, !dbg !44
  %338 = insertelement <1 x i16> undef, i16 %330, i64 0, !dbg !44
  store <1 x i16> %338, ptr addrspace(3) %75, align 2, !dbg !44
  %339 = insertelement <1 x i16> undef, i16 %331, i64 0, !dbg !44
  store <1 x i16> %339, ptr addrspace(3) %79, align 2, !dbg !44
  %340 = insertelement <1 x i16> undef, i16 %332, i64 0, !dbg !44
  store <1 x i16> %340, ptr addrspace(3) %83, align 2, !dbg !44
  %341 = insertelement <1 x i16> undef, i16 %333, i64 0, !dbg !44
  store <1 x i16> %341, ptr addrspace(3) %87, align 2, !dbg !44
  %342 = insertelement <1 x i16> undef, i16 %334, i64 0, !dbg !44
  store <1 x i16> %342, ptr addrspace(3) %91, align 2, !dbg !44
  %343 = insertelement <1 x i16> undef, i16 %335, i64 0, !dbg !44
  store <1 x i16> %343, ptr addrspace(3) %95, align 2, !dbg !44
  %344 = insertelement <1 x i16> undef, i16 %336, i64 0, !dbg !44
  store <1 x i16> %344, ptr addrspace(3) %99, align 2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %345 = load i16, ptr addrspace(3) %103, align 2, !dbg !44
  %346 = load i16, ptr addrspace(3) %107, align 2, !dbg !44
  %347 = load i16, ptr addrspace(3) %111, align 2, !dbg !44
  %348 = load i16, ptr addrspace(3) %115, align 2, !dbg !44
  %349 = load i16, ptr addrspace(3) %119, align 2, !dbg !44
  %350 = load i16, ptr addrspace(3) %123, align 2, !dbg !44
  %351 = load i16, ptr addrspace(3) %127, align 2, !dbg !44
  %352 = load i16, ptr addrspace(3) %131, align 2, !dbg !44
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #2, !dbg !44
  %354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #2, !dbg !44
  %355 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %347) #2, !dbg !44
  %356 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %348) #2, !dbg !44
  %357 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %349) #2, !dbg !44
  %358 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %350) #2, !dbg !44
  %359 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %351) #2, !dbg !44
  %360 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %352) #2, !dbg !44
  %361 = add i32 %32, -128, !dbg !45
  %362 = add i32 %141, %361, !dbg !46
  %363 = add i32 %142, %361, !dbg !46
  %364 = add i32 %143, %361, !dbg !46
  %365 = add i32 %144, %361, !dbg !46
  %366 = add i32 %145, %361, !dbg !46
  %367 = add i32 %146, %361, !dbg !46
  %368 = add i32 %147, %361, !dbg !46
  %369 = add i32 %148, %361, !dbg !46
  %370 = sext i32 %362 to i64, !dbg !47
  %371 = getelementptr i16, ptr addrspace(1) %2, i64 %370, !dbg !47
  %372 = sext i32 %363 to i64, !dbg !47
  %373 = getelementptr i16, ptr addrspace(1) %2, i64 %372, !dbg !47
  %374 = sext i32 %364 to i64, !dbg !47
  %375 = getelementptr i16, ptr addrspace(1) %2, i64 %374, !dbg !47
  %376 = sext i32 %365 to i64, !dbg !47
  %377 = getelementptr i16, ptr addrspace(1) %2, i64 %376, !dbg !47
  %378 = sext i32 %366 to i64, !dbg !47
  %379 = getelementptr i16, ptr addrspace(1) %2, i64 %378, !dbg !47
  %380 = sext i32 %367 to i64, !dbg !47
  %381 = getelementptr i16, ptr addrspace(1) %2, i64 %380, !dbg !47
  %382 = sext i32 %368 to i64, !dbg !47
  %383 = getelementptr i16, ptr addrspace(1) %2, i64 %382, !dbg !47
  %384 = sext i32 %369 to i64, !dbg !47
  %385 = getelementptr i16, ptr addrspace(1) %2, i64 %384, !dbg !47
  %386 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %371, i1 %323, i16 0, i1 %323) #2, !dbg !48
  %387 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %373, i1 %323, i16 0, i1 %323) #2, !dbg !48
  %388 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %375, i1 %323, i16 0, i1 %323) #2, !dbg !48
  %389 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %377, i1 %323, i16 0, i1 %323) #2, !dbg !48
  %390 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %379, i1 %323, i16 0, i1 %323) #2, !dbg !48
  %391 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %381, i1 %323, i16 0, i1 %323) #2, !dbg !48
  %392 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %383, i1 %323, i16 0, i1 %323) #2, !dbg !48
  %393 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %385, i1 %323, i16 0, i1 %323) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %394 = insertelement <1 x i16> undef, i16 %386, i64 0, !dbg !49
  store <1 x i16> %394, ptr addrspace(3) %182, align 2, !dbg !49
  %395 = insertelement <1 x i16> undef, i16 %387, i64 0, !dbg !49
  store <1 x i16> %395, ptr addrspace(3) %185, align 2, !dbg !49
  %396 = insertelement <1 x i16> undef, i16 %388, i64 0, !dbg !49
  store <1 x i16> %396, ptr addrspace(3) %188, align 2, !dbg !49
  %397 = insertelement <1 x i16> undef, i16 %389, i64 0, !dbg !49
  store <1 x i16> %397, ptr addrspace(3) %191, align 2, !dbg !49
  %398 = insertelement <1 x i16> undef, i16 %390, i64 0, !dbg !49
  store <1 x i16> %398, ptr addrspace(3) %194, align 2, !dbg !49
  %399 = insertelement <1 x i16> undef, i16 %391, i64 0, !dbg !49
  store <1 x i16> %399, ptr addrspace(3) %197, align 2, !dbg !49
  %400 = insertelement <1 x i16> undef, i16 %392, i64 0, !dbg !49
  store <1 x i16> %400, ptr addrspace(3) %200, align 2, !dbg !49
  %401 = insertelement <1 x i16> undef, i16 %393, i64 0, !dbg !49
  store <1 x i16> %401, ptr addrspace(3) %203, align 2, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %402 = load i16, ptr addrspace(3) %206, align 16, !dbg !49
  %403 = load i16, ptr addrspace(3) %208, align 2, !dbg !49
  %404 = load i16, ptr addrspace(3) %210, align 4, !dbg !49
  %405 = load i16, ptr addrspace(3) %212, align 2, !dbg !49
  %406 = load i16, ptr addrspace(3) %214, align 8, !dbg !49
  %407 = load i16, ptr addrspace(3) %216, align 2, !dbg !49
  %408 = load i16, ptr addrspace(3) %218, align 4, !dbg !49
  %409 = load i16, ptr addrspace(3) %220, align 2, !dbg !49
  %410 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %402) #2, !dbg !49
  %411 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %403) #2, !dbg !49
  %412 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %404) #2, !dbg !49
  %413 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %405) #2, !dbg !49
  %414 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %406) #2, !dbg !49
  %415 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %407) #2, !dbg !49
  %416 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %408) #2, !dbg !49
  %417 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %409) #2, !dbg !49
  %418 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %386) #2, !dbg !49
  %419 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %387) #2, !dbg !49
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %388) #2, !dbg !49
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %389) #2, !dbg !49
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %390) #2, !dbg !49
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %391) #2, !dbg !49
  %424 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %392) #2, !dbg !49
  %425 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %393) #2, !dbg !49
  %426 = fmul float %353, %418, !dbg !50
  %427 = fmul float %354, %419, !dbg !50
  %428 = fmul float %355, %420, !dbg !50
  %429 = fmul float %356, %421, !dbg !50
  %430 = fmul float %357, %422, !dbg !50
  %431 = fmul float %358, %423, !dbg !50
  %432 = fmul float %359, %424, !dbg !50
  %433 = fmul float %360, %425, !dbg !50
  %434 = fsub float 0.000000e+00, %426, !dbg !51
  %435 = fsub float 0.000000e+00, %427, !dbg !51
  %436 = fsub float 0.000000e+00, %428, !dbg !51
  %437 = fsub float 0.000000e+00, %429, !dbg !51
  %438 = fsub float 0.000000e+00, %430, !dbg !51
  %439 = fsub float 0.000000e+00, %431, !dbg !51
  %440 = fsub float 0.000000e+00, %432, !dbg !51
  %441 = fsub float 0.000000e+00, %433, !dbg !51
  %442 = select i1 %317, float %434, float 0.000000e+00, !dbg !35
  %443 = select i1 %317, float %435, float 0.000000e+00, !dbg !35
  %444 = select i1 %317, float %436, float 0.000000e+00, !dbg !35
  %445 = select i1 %317, float %437, float 0.000000e+00, !dbg !35
  %446 = select i1 %317, float %438, float 0.000000e+00, !dbg !35
  %447 = select i1 %317, float %439, float 0.000000e+00, !dbg !35
  %448 = select i1 %317, float %440, float 0.000000e+00, !dbg !35
  %449 = select i1 %317, float %441, float 0.000000e+00, !dbg !35
  %450 = fadd float %309, %442, !dbg !52
  %451 = fadd float %310, %443, !dbg !52
  %452 = fadd float %311, %444, !dbg !52
  %453 = fadd float %312, %445, !dbg !52
  %454 = fadd float %313, %446, !dbg !52
  %455 = fadd float %314, %447, !dbg !52
  %456 = fadd float %315, %448, !dbg !52
  %457 = fadd float %316, %449, !dbg !52
  %458 = icmp slt i32 %32, 128, !dbg !53
  %459 = add i32 %49, 262144, !dbg !54
  %460 = add i32 %459, %52, !dbg !55
  %461 = sext i32 %460 to i64, !dbg !56
  %462 = getelementptr i16, ptr addrspace(1) %0, i64 %461, !dbg !56
  %463 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %462, i1 %458, i32 0, i1 %458, i32 0, i1 %458, i32 0, i1 %458, i32 0, i1 %458) #2, !dbg !57
  %464 = extractvalue { i32, i32, i32, i32 } %463, 0, !dbg !57
  %465 = extractvalue { i32, i32, i32, i32 } %463, 1, !dbg !57
  %466 = extractvalue { i32, i32, i32, i32 } %463, 2, !dbg !57
  %467 = extractvalue { i32, i32, i32, i32 } %463, 3, !dbg !57
  %468 = trunc i32 %464 to i16, !dbg !57
  %extelt.offset16 = lshr i32 %464, 16, !dbg !57
  %469 = trunc i32 %extelt.offset16 to i16, !dbg !57
  %470 = trunc i32 %465 to i16, !dbg !57
  %extelt.offset17 = lshr i32 %465, 16, !dbg !57
  %471 = trunc i32 %extelt.offset17 to i16, !dbg !57
  %472 = trunc i32 %466 to i16, !dbg !57
  %extelt.offset18 = lshr i32 %466, 16, !dbg !57
  %473 = trunc i32 %extelt.offset18 to i16, !dbg !57
  %474 = trunc i32 %467 to i16, !dbg !57
  %extelt.offset19 = lshr i32 %467, 16, !dbg !57
  %475 = trunc i32 %extelt.offset19 to i16, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %476 = insertelement <1 x i16> undef, i16 %468, i64 0, !dbg !58
  store <1 x i16> %476, ptr addrspace(3) %71, align 2, !dbg !58
  %477 = insertelement <1 x i16> undef, i16 %469, i64 0, !dbg !58
  store <1 x i16> %477, ptr addrspace(3) %75, align 2, !dbg !58
  %478 = insertelement <1 x i16> undef, i16 %470, i64 0, !dbg !58
  store <1 x i16> %478, ptr addrspace(3) %79, align 2, !dbg !58
  %479 = insertelement <1 x i16> undef, i16 %471, i64 0, !dbg !58
  store <1 x i16> %479, ptr addrspace(3) %83, align 2, !dbg !58
  %480 = insertelement <1 x i16> undef, i16 %472, i64 0, !dbg !58
  store <1 x i16> %480, ptr addrspace(3) %87, align 2, !dbg !58
  %481 = insertelement <1 x i16> undef, i16 %473, i64 0, !dbg !58
  store <1 x i16> %481, ptr addrspace(3) %91, align 2, !dbg !58
  %482 = insertelement <1 x i16> undef, i16 %474, i64 0, !dbg !58
  store <1 x i16> %482, ptr addrspace(3) %95, align 2, !dbg !58
  %483 = insertelement <1 x i16> undef, i16 %475, i64 0, !dbg !58
  store <1 x i16> %483, ptr addrspace(3) %99, align 2, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %484 = load i16, ptr addrspace(3) %103, align 2, !dbg !58
  %485 = load i16, ptr addrspace(3) %107, align 2, !dbg !58
  %486 = load i16, ptr addrspace(3) %111, align 2, !dbg !58
  %487 = load i16, ptr addrspace(3) %115, align 2, !dbg !58
  %488 = load i16, ptr addrspace(3) %119, align 2, !dbg !58
  %489 = load i16, ptr addrspace(3) %123, align 2, !dbg !58
  %490 = load i16, ptr addrspace(3) %127, align 2, !dbg !58
  %491 = load i16, ptr addrspace(3) %131, align 2, !dbg !58
  %492 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #2, !dbg !58
  %493 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #2, !dbg !58
  %494 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #2, !dbg !58
  %495 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #2, !dbg !58
  %496 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %488) #2, !dbg !58
  %497 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %489) #2, !dbg !58
  %498 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %490) #2, !dbg !58
  %499 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %491) #2, !dbg !58
  %500 = add i32 %32, 128, !dbg !59
  %501 = add i32 %141, %500, !dbg !60
  %502 = add i32 %142, %500, !dbg !60
  %503 = add i32 %143, %500, !dbg !60
  %504 = add i32 %144, %500, !dbg !60
  %505 = add i32 %145, %500, !dbg !60
  %506 = add i32 %146, %500, !dbg !60
  %507 = add i32 %147, %500, !dbg !60
  %508 = add i32 %148, %500, !dbg !60
  %509 = sext i32 %501 to i64, !dbg !61
  %510 = getelementptr i16, ptr addrspace(1) %2, i64 %509, !dbg !61
  %511 = sext i32 %502 to i64, !dbg !61
  %512 = getelementptr i16, ptr addrspace(1) %2, i64 %511, !dbg !61
  %513 = sext i32 %503 to i64, !dbg !61
  %514 = getelementptr i16, ptr addrspace(1) %2, i64 %513, !dbg !61
  %515 = sext i32 %504 to i64, !dbg !61
  %516 = getelementptr i16, ptr addrspace(1) %2, i64 %515, !dbg !61
  %517 = sext i32 %505 to i64, !dbg !61
  %518 = getelementptr i16, ptr addrspace(1) %2, i64 %517, !dbg !61
  %519 = sext i32 %506 to i64, !dbg !61
  %520 = getelementptr i16, ptr addrspace(1) %2, i64 %519, !dbg !61
  %521 = sext i32 %507 to i64, !dbg !61
  %522 = getelementptr i16, ptr addrspace(1) %2, i64 %521, !dbg !61
  %523 = sext i32 %508 to i64, !dbg !61
  %524 = getelementptr i16, ptr addrspace(1) %2, i64 %523, !dbg !61
  %525 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %510, i1 %458, i16 0, i1 %458) #2, !dbg !62
  %526 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %512, i1 %458, i16 0, i1 %458) #2, !dbg !62
  %527 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %514, i1 %458, i16 0, i1 %458) #2, !dbg !62
  %528 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %516, i1 %458, i16 0, i1 %458) #2, !dbg !62
  %529 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %518, i1 %458, i16 0, i1 %458) #2, !dbg !62
  %530 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %520, i1 %458, i16 0, i1 %458) #2, !dbg !62
  %531 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %522, i1 %458, i16 0, i1 %458) #2, !dbg !62
  %532 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %524, i1 %458, i16 0, i1 %458) #2, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %533 = insertelement <1 x i16> undef, i16 %525, i64 0, !dbg !63
  store <1 x i16> %533, ptr addrspace(3) %182, align 2, !dbg !63
  %534 = insertelement <1 x i16> undef, i16 %526, i64 0, !dbg !63
  store <1 x i16> %534, ptr addrspace(3) %185, align 2, !dbg !63
  %535 = insertelement <1 x i16> undef, i16 %527, i64 0, !dbg !63
  store <1 x i16> %535, ptr addrspace(3) %188, align 2, !dbg !63
  %536 = insertelement <1 x i16> undef, i16 %528, i64 0, !dbg !63
  store <1 x i16> %536, ptr addrspace(3) %191, align 2, !dbg !63
  %537 = insertelement <1 x i16> undef, i16 %529, i64 0, !dbg !63
  store <1 x i16> %537, ptr addrspace(3) %194, align 2, !dbg !63
  %538 = insertelement <1 x i16> undef, i16 %530, i64 0, !dbg !63
  store <1 x i16> %538, ptr addrspace(3) %197, align 2, !dbg !63
  %539 = insertelement <1 x i16> undef, i16 %531, i64 0, !dbg !63
  store <1 x i16> %539, ptr addrspace(3) %200, align 2, !dbg !63
  %540 = insertelement <1 x i16> undef, i16 %532, i64 0, !dbg !63
  store <1 x i16> %540, ptr addrspace(3) %203, align 2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %541 = load i16, ptr addrspace(3) %206, align 16, !dbg !63
  %542 = load i16, ptr addrspace(3) %208, align 2, !dbg !63
  %543 = load i16, ptr addrspace(3) %210, align 4, !dbg !63
  %544 = load i16, ptr addrspace(3) %212, align 2, !dbg !63
  %545 = load i16, ptr addrspace(3) %214, align 8, !dbg !63
  %546 = load i16, ptr addrspace(3) %216, align 2, !dbg !63
  %547 = load i16, ptr addrspace(3) %218, align 4, !dbg !63
  %548 = load i16, ptr addrspace(3) %220, align 2, !dbg !63
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %541) #2, !dbg !63
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %542) #2, !dbg !63
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %543) #2, !dbg !63
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %544) #2, !dbg !63
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %545) #2, !dbg !63
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %546) #2, !dbg !63
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %547) #2, !dbg !63
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %548) #2, !dbg !63
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %525) #2, !dbg !63
  %558 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %526) #2, !dbg !63
  %559 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %527) #2, !dbg !63
  %560 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %528) #2, !dbg !63
  %561 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %529) #2, !dbg !63
  %562 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %530) #2, !dbg !63
  %563 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %531) #2, !dbg !63
  %564 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %532) #2, !dbg !63
  %565 = fmul float %492, %557, !dbg !64
  %566 = fmul float %493, %558, !dbg !64
  %567 = fmul float %494, %559, !dbg !64
  %568 = fmul float %495, %560, !dbg !64
  %569 = fmul float %496, %561, !dbg !64
  %570 = fmul float %497, %562, !dbg !64
  %571 = fmul float %498, %563, !dbg !64
  %572 = fmul float %499, %564, !dbg !64
  %573 = select i1 %458, float %565, float 0.000000e+00, !dbg !35
  %574 = select i1 %458, float %566, float 0.000000e+00, !dbg !35
  %575 = select i1 %458, float %567, float 0.000000e+00, !dbg !35
  %576 = select i1 %458, float %568, float 0.000000e+00, !dbg !35
  %577 = select i1 %458, float %569, float 0.000000e+00, !dbg !35
  %578 = select i1 %458, float %570, float 0.000000e+00, !dbg !35
  %579 = select i1 %458, float %571, float 0.000000e+00, !dbg !35
  %580 = select i1 %458, float %572, float 0.000000e+00, !dbg !35
  %581 = fadd float %450, %573, !dbg !65
  %582 = fadd float %451, %574, !dbg !65
  %583 = fadd float %452, %575, !dbg !65
  %584 = fadd float %453, %576, !dbg !65
  %585 = fadd float %454, %577, !dbg !65
  %586 = fadd float %455, %578, !dbg !65
  %587 = fadd float %456, %579, !dbg !65
  %588 = fadd float %457, %580, !dbg !65
  %589 = fadd float %301, %581, !dbg !66
  %590 = fadd float %302, %582, !dbg !66
  %591 = fadd float %303, %583, !dbg !66
  %592 = fadd float %304, %584, !dbg !66
  %593 = fadd float %305, %585, !dbg !66
  %594 = fadd float %306, %586, !dbg !66
  %595 = fadd float %307, %587, !dbg !66
  %596 = fadd float %308, %588, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %597 = getelementptr float, ptr addrspace(3) @global_smem, i64 %181, !dbg !66
  %598 = insertelement <1 x float> undef, float %589, i64 0, !dbg !66
  store <1 x float> %598, ptr addrspace(3) %597, align 4, !dbg !66
  %599 = getelementptr float, ptr addrspace(3) @global_smem, i64 %184, !dbg !66
  %600 = insertelement <1 x float> undef, float %590, i64 0, !dbg !66
  store <1 x float> %600, ptr addrspace(3) %599, align 4, !dbg !66
  %601 = getelementptr float, ptr addrspace(3) @global_smem, i64 %187, !dbg !66
  %602 = insertelement <1 x float> undef, float %591, i64 0, !dbg !66
  store <1 x float> %602, ptr addrspace(3) %601, align 4, !dbg !66
  %603 = getelementptr float, ptr addrspace(3) @global_smem, i64 %190, !dbg !66
  %604 = insertelement <1 x float> undef, float %592, i64 0, !dbg !66
  store <1 x float> %604, ptr addrspace(3) %603, align 4, !dbg !66
  %605 = getelementptr float, ptr addrspace(3) @global_smem, i64 %193, !dbg !66
  %606 = insertelement <1 x float> undef, float %593, i64 0, !dbg !66
  store <1 x float> %606, ptr addrspace(3) %605, align 4, !dbg !66
  %607 = getelementptr float, ptr addrspace(3) @global_smem, i64 %196, !dbg !66
  %608 = insertelement <1 x float> undef, float %594, i64 0, !dbg !66
  store <1 x float> %608, ptr addrspace(3) %607, align 4, !dbg !66
  %609 = getelementptr float, ptr addrspace(3) @global_smem, i64 %199, !dbg !66
  %610 = insertelement <1 x float> undef, float %595, i64 0, !dbg !66
  store <1 x float> %610, ptr addrspace(3) %609, align 4, !dbg !66
  %611 = getelementptr float, ptr addrspace(3) @global_smem, i64 %202, !dbg !66
  %612 = insertelement <1 x float> undef, float %596, i64 0, !dbg !66
  store <1 x float> %612, ptr addrspace(3) %611, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %613 = getelementptr float, ptr addrspace(3) @global_smem, i64 %205, !dbg !66
  %614 = add i32 %49, 786432, !dbg !67
  %615 = add i32 %614, %52, !dbg !68
  %616 = sext i32 %615 to i64, !dbg !69
  %617 = getelementptr i16, ptr addrspace(1) %0, i64 %616, !dbg !69
  %618 = load <8 x float>, ptr addrspace(3) %613, align 32, !dbg !66
  %619 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %241, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !70
  %620 = extractvalue { i32, i32, i32, i32 } %619, 0, !dbg !70
  %621 = extractvalue { i32, i32, i32, i32 } %619, 1, !dbg !70
  %622 = extractvalue { i32, i32, i32, i32 } %619, 2, !dbg !70
  %623 = extractvalue { i32, i32, i32, i32 } %619, 3, !dbg !70
  %624 = trunc i32 %620 to i16, !dbg !70
  %extelt.offset20 = lshr i32 %620, 16, !dbg !70
  %625 = trunc i32 %extelt.offset20 to i16, !dbg !70
  %626 = trunc i32 %621 to i16, !dbg !70
  %extelt.offset21 = lshr i32 %621, 16, !dbg !70
  %627 = trunc i32 %extelt.offset21 to i16, !dbg !70
  %628 = trunc i32 %622 to i16, !dbg !70
  %extelt.offset22 = lshr i32 %622, 16, !dbg !70
  %629 = trunc i32 %extelt.offset22 to i16, !dbg !70
  %630 = trunc i32 %623 to i16, !dbg !70
  %extelt.offset23 = lshr i32 %623, 16, !dbg !70
  %631 = trunc i32 %extelt.offset23 to i16, !dbg !70
  %632 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %624) #2, !dbg !71
  %633 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %625) #2, !dbg !71
  %634 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %626) #2, !dbg !71
  %635 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %627) #2, !dbg !71
  %636 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %628) #2, !dbg !71
  %637 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %629) #2, !dbg !71
  %638 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %630) #2, !dbg !71
  %639 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %631) #2, !dbg !71
  %640 = insertelement <8 x i1> poison, i1 %263, i64 0, !dbg !35
  %641 = shufflevector <8 x i1> %640, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !35
  %642 = insertelement <8 x float> poison, float %632, i64 0, !dbg !35
  %643 = insertelement <8 x float> %642, float %633, i64 1, !dbg !35
  %644 = insertelement <8 x float> %643, float %634, i64 2, !dbg !35
  %645 = insertelement <8 x float> %644, float %635, i64 3, !dbg !35
  %646 = insertelement <8 x float> %645, float %636, i64 4, !dbg !35
  %647 = insertelement <8 x float> %646, float %637, i64 5, !dbg !35
  %648 = insertelement <8 x float> %647, float %638, i64 6, !dbg !35
  %649 = insertelement <8 x float> %648, float %639, i64 7, !dbg !35
  %650 = select <8 x i1> %641, <8 x float> %649, <8 x float> zeroinitializer, !dbg !35
  %651 = insertelement <8 x float> poison, float %222, i64 0, !dbg !72
  %652 = insertelement <8 x float> %651, float %223, i64 1, !dbg !72
  %653 = insertelement <8 x float> %652, float %224, i64 2, !dbg !72
  %654 = insertelement <8 x float> %653, float %225, i64 3, !dbg !72
  %655 = insertelement <8 x float> %654, float %226, i64 4, !dbg !72
  %656 = insertelement <8 x float> %655, float %227, i64 5, !dbg !72
  %657 = insertelement <8 x float> %656, float %228, i64 6, !dbg !72
  %658 = insertelement <8 x float> %657, float %229, i64 7, !dbg !72
  %659 = insertelement <8 x float> poison, float %255, i64 0, !dbg !72
  %660 = insertelement <8 x float> %659, float %256, i64 1, !dbg !72
  %661 = insertelement <8 x float> %660, float %257, i64 2, !dbg !72
  %662 = insertelement <8 x float> %661, float %258, i64 3, !dbg !72
  %663 = insertelement <8 x float> %662, float %259, i64 4, !dbg !72
  %664 = insertelement <8 x float> %663, float %260, i64 5, !dbg !72
  %665 = insertelement <8 x float> %664, float %261, i64 6, !dbg !72
  %666 = insertelement <8 x float> %665, float %262, i64 7, !dbg !72
  %667 = fmul <8 x float> %658, %666, !dbg !72
  %668 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %462, i1 %323, i32 0, i1 %323, i32 0, i1 %323, i32 0, i1 %323, i32 0, i1 %323) #2, !dbg !73
  %669 = extractvalue { i32, i32, i32, i32 } %668, 0, !dbg !73
  %670 = extractvalue { i32, i32, i32, i32 } %668, 1, !dbg !73
  %671 = extractvalue { i32, i32, i32, i32 } %668, 2, !dbg !73
  %672 = extractvalue { i32, i32, i32, i32 } %668, 3, !dbg !73
  %673 = trunc i32 %669 to i16, !dbg !73
  %extelt.offset24 = lshr i32 %669, 16, !dbg !73
  %674 = trunc i32 %extelt.offset24 to i16, !dbg !73
  %675 = trunc i32 %670 to i16, !dbg !73
  %extelt.offset25 = lshr i32 %670, 16, !dbg !73
  %676 = trunc i32 %extelt.offset25 to i16, !dbg !73
  %677 = trunc i32 %671 to i16, !dbg !73
  %extelt.offset26 = lshr i32 %671, 16, !dbg !73
  %678 = trunc i32 %extelt.offset26 to i16, !dbg !73
  %679 = trunc i32 %672 to i16, !dbg !73
  %extelt.offset27 = lshr i32 %672, 16, !dbg !73
  %680 = trunc i32 %extelt.offset27 to i16, !dbg !73
  %681 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %673) #2, !dbg !74
  %682 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %674) #2, !dbg !74
  %683 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %675) #2, !dbg !74
  %684 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %676) #2, !dbg !74
  %685 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %677) #2, !dbg !74
  %686 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %678) #2, !dbg !74
  %687 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %679) #2, !dbg !74
  %688 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %680) #2, !dbg !74
  %689 = insertelement <8 x float> poison, float %410, i64 0, !dbg !75
  %690 = insertelement <8 x float> %689, float %411, i64 1, !dbg !75
  %691 = insertelement <8 x float> %690, float %412, i64 2, !dbg !75
  %692 = insertelement <8 x float> %691, float %413, i64 3, !dbg !75
  %693 = insertelement <8 x float> %692, float %414, i64 4, !dbg !75
  %694 = insertelement <8 x float> %693, float %415, i64 5, !dbg !75
  %695 = insertelement <8 x float> %694, float %416, i64 6, !dbg !75
  %696 = insertelement <8 x float> %695, float %417, i64 7, !dbg !75
  %697 = insertelement <8 x float> poison, float %681, i64 0, !dbg !75
  %698 = insertelement <8 x float> %697, float %682, i64 1, !dbg !75
  %699 = insertelement <8 x float> %698, float %683, i64 2, !dbg !75
  %700 = insertelement <8 x float> %699, float %684, i64 3, !dbg !75
  %701 = insertelement <8 x float> %700, float %685, i64 4, !dbg !75
  %702 = insertelement <8 x float> %701, float %686, i64 5, !dbg !75
  %703 = insertelement <8 x float> %702, float %687, i64 6, !dbg !75
  %704 = insertelement <8 x float> %703, float %688, i64 7, !dbg !75
  %705 = fmul <8 x float> %696, %704, !dbg !75
  %706 = fsub <8 x float> zeroinitializer, %705, !dbg !76
  %707 = insertelement <8 x i1> poison, i1 %317, i64 0, !dbg !35
  %708 = shufflevector <8 x i1> %707, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !35
  %709 = select <8 x i1> %708, <8 x float> %706, <8 x float> zeroinitializer, !dbg !35
  %710 = fadd <8 x float> %667, %709, !dbg !77
  %711 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %617, i1 %458, i32 0, i1 %458, i32 0, i1 %458, i32 0, i1 %458, i32 0, i1 %458) #2, !dbg !78
  %712 = extractvalue { i32, i32, i32, i32 } %711, 0, !dbg !78
  %713 = extractvalue { i32, i32, i32, i32 } %711, 1, !dbg !78
  %714 = extractvalue { i32, i32, i32, i32 } %711, 2, !dbg !78
  %715 = extractvalue { i32, i32, i32, i32 } %711, 3, !dbg !78
  %716 = trunc i32 %712 to i16, !dbg !78
  %extelt.offset28 = lshr i32 %712, 16, !dbg !78
  %717 = trunc i32 %extelt.offset28 to i16, !dbg !78
  %718 = trunc i32 %713 to i16, !dbg !78
  %extelt.offset29 = lshr i32 %713, 16, !dbg !78
  %719 = trunc i32 %extelt.offset29 to i16, !dbg !78
  %720 = trunc i32 %714 to i16, !dbg !78
  %extelt.offset30 = lshr i32 %714, 16, !dbg !78
  %721 = trunc i32 %extelt.offset30 to i16, !dbg !78
  %722 = trunc i32 %715 to i16, !dbg !78
  %extelt.offset31 = lshr i32 %715, 16, !dbg !78
  %723 = trunc i32 %extelt.offset31 to i16, !dbg !78
  %724 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %716) #2, !dbg !79
  %725 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %717) #2, !dbg !79
  %726 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %718) #2, !dbg !79
  %727 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %719) #2, !dbg !79
  %728 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %720) #2, !dbg !79
  %729 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %721) #2, !dbg !79
  %730 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %722) #2, !dbg !79
  %731 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %723) #2, !dbg !79
  %732 = insertelement <8 x float> poison, float %549, i64 0, !dbg !80
  %733 = insertelement <8 x float> %732, float %550, i64 1, !dbg !80
  %734 = insertelement <8 x float> %733, float %551, i64 2, !dbg !80
  %735 = insertelement <8 x float> %734, float %552, i64 3, !dbg !80
  %736 = insertelement <8 x float> %735, float %553, i64 4, !dbg !80
  %737 = insertelement <8 x float> %736, float %554, i64 5, !dbg !80
  %738 = insertelement <8 x float> %737, float %555, i64 6, !dbg !80
  %739 = insertelement <8 x float> %738, float %556, i64 7, !dbg !80
  %740 = insertelement <8 x float> poison, float %724, i64 0, !dbg !80
  %741 = insertelement <8 x float> %740, float %725, i64 1, !dbg !80
  %742 = insertelement <8 x float> %741, float %726, i64 2, !dbg !80
  %743 = insertelement <8 x float> %742, float %727, i64 3, !dbg !80
  %744 = insertelement <8 x float> %743, float %728, i64 4, !dbg !80
  %745 = insertelement <8 x float> %744, float %729, i64 5, !dbg !80
  %746 = insertelement <8 x float> %745, float %730, i64 6, !dbg !80
  %747 = insertelement <8 x float> %746, float %731, i64 7, !dbg !80
  %748 = fmul <8 x float> %739, %747, !dbg !80
  %749 = insertelement <8 x i1> poison, i1 %458, i64 0, !dbg !35
  %750 = shufflevector <8 x i1> %749, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !35
  %751 = select <8 x i1> %750, <8 x float> %748, <8 x float> zeroinitializer, !dbg !35
  %752 = fadd <8 x float> %710, %751, !dbg !81
  %753 = fadd <8 x float> %650, %752, !dbg !82
  %754 = fadd <8 x float> %618, %753, !dbg !83
  %755 = shl i32 %44, 19, !dbg !84
  %756 = shl i32 %46, 19, !dbg !84
  %757 = add i32 %50, %755, !dbg !85
  %758 = add i32 %51, %756, !dbg !85
  %759 = sext i32 %757 to i64, !dbg !86
  %760 = getelementptr float, ptr addrspace(1) %3, i64 %759, !dbg !86
  %761 = sext i32 %758 to i64, !dbg !86
  %762 = getelementptr float, ptr addrspace(1) %3, i64 %761, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  store <8 x float> %754, ptr addrspace(3) %613, align 32, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %763 = zext nneg i32 %17 to i64, !dbg !87
  %764 = getelementptr float, ptr addrspace(3) @global_smem, i64 %763, !dbg !87
  %765 = zext nneg i32 %18 to i64, !dbg !87
  %766 = getelementptr float, ptr addrspace(3) @global_smem, i64 %765, !dbg !87
  %767 = load <4 x i32>, ptr addrspace(3) %766, align 16, !dbg !87
  %.extract = load i32, ptr addrspace(3) %764, align 16, !dbg !87
  %768 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %764, i64 0, i64 1, !dbg !87
  %.extract33 = load i32, ptr addrspace(3) %768, align 4, !dbg !87
  %769 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %764, i64 0, i64 2, !dbg !87
  %.extract35 = load i32, ptr addrspace(3) %769, align 8, !dbg !87
  %770 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %764, i64 0, i64 3, !dbg !87
  %.extract37 = load i32, ptr addrspace(3) %770, align 4, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract33, i32 %.extract35, i32 %.extract37, ptr addrspace(1) %760, i1 %33) #2, !dbg !87
  %.extract39 = extractelement <4 x i32> %767, i64 0, !dbg !87
  %.extract41 = extractelement <4 x i32> %767, i64 1, !dbg !87
  %.extract43 = extractelement <4 x i32> %767, i64 2, !dbg !87
  %.extract45 = extractelement <4 x i32> %767, i64 3, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract41, i32 %.extract43, i32 %.extract45, ptr addrspace(1) %762, i1 %33) #2, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cfvbe7lddts67ya222b7u7fqo64gtye4nhhnwp4mr3xoexqwwswt.py", directory: "/tmp/torchinductor_zeus/fv")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 28, scope: !5)
!13 = !DILocation(line: 26, column: 21, scope: !5)
!14 = !DILocation(line: 29, column: 20, scope: !5)
!15 = !DILocation(line: 28, column: 18, scope: !5)
!16 = !DILocation(line: 30, column: 41, scope: !5)
!17 = !DILocation(line: 30, column: 36, scope: !5)
!18 = !DILocation(line: 30, column: 56, scope: !5)
!19 = !DILocation(line: 30, column: 48, scope: !5)
!20 = !DILocation(line: 30, column: 30, scope: !5)
!21 = !DILocation(line: 30, column: 62, scope: !5)
!22 = !DILocation(line: 30, column: 102, scope: !5)
!23 = !DILocation(line: 31, column: 40, scope: !5)
!24 = !DILocation(line: 31, column: 36, scope: !5)
!25 = !DILocation(line: 31, column: 30, scope: !5)
!26 = !DILocation(line: 31, column: 46, scope: !5)
!27 = !DILocation(line: 31, column: 86, scope: !5)
!28 = !DILocation(line: 32, column: 46, scope: !5)
!29 = !DILocation(line: 32, column: 58, scope: !5)
!30 = !DILocation(line: 32, column: 31, scope: !5)
!31 = !DILocation(line: 32, column: 72, scope: !5)
!32 = !DILocation(line: 32, column: 112, scope: !5)
!33 = !DILocation(line: 35, column: 19, scope: !5)
!34 = !DILocation(line: 36, column: 62, scope: !5)
!35 = !DILocation(line: 0, scope: !5)
!36 = !DILocation(line: 36, column: 120, scope: !5)
!37 = !DILocation(line: 41, column: 19, scope: !5)
!38 = !DILocation(line: 43, column: 20, scope: !5)
!39 = !DILocation(line: 44, column: 49, scope: !5)
!40 = !DILocation(line: 44, column: 61, scope: !5)
!41 = !DILocation(line: 44, column: 31, scope: !5)
!42 = !DILocation(line: 44, column: 83, scope: !5)
!43 = !DILocation(line: 44, column: 75, scope: !5)
!44 = !DILocation(line: 44, column: 134, scope: !5)
!45 = !DILocation(line: 45, column: 40, scope: !5)
!46 = !DILocation(line: 45, column: 46, scope: !5)
!47 = !DILocation(line: 45, column: 31, scope: !5)
!48 = !DILocation(line: 45, column: 56, scope: !5)
!49 = !DILocation(line: 45, column: 115, scope: !5)
!50 = !DILocation(line: 46, column: 20, scope: !5)
!51 = !DILocation(line: 47, column: 13, scope: !5)
!52 = !DILocation(line: 51, column: 20, scope: !5)
!53 = !DILocation(line: 52, column: 19, scope: !5)
!54 = !DILocation(line: 53, column: 46, scope: !5)
!55 = !DILocation(line: 53, column: 58, scope: !5)
!56 = !DILocation(line: 53, column: 31, scope: !5)
!57 = !DILocation(line: 53, column: 72, scope: !5)
!58 = !DILocation(line: 53, column: 131, scope: !5)
!59 = !DILocation(line: 54, column: 37, scope: !5)
!60 = !DILocation(line: 54, column: 43, scope: !5)
!61 = !DILocation(line: 54, column: 31, scope: !5)
!62 = !DILocation(line: 54, column: 53, scope: !5)
!63 = !DILocation(line: 54, column: 112, scope: !5)
!64 = !DILocation(line: 55, column: 20, scope: !5)
!65 = !DILocation(line: 59, column: 20, scope: !5)
!66 = !DILocation(line: 60, column: 19, scope: !5)
!67 = !DILocation(line: 74, column: 46, scope: !5)
!68 = !DILocation(line: 74, column: 58, scope: !5)
!69 = !DILocation(line: 74, column: 31, scope: !5)
!70 = !DILocation(line: 62, column: 72, scope: !5)
!71 = !DILocation(line: 62, column: 130, scope: !5)
!72 = !DILocation(line: 66, column: 20, scope: !5)
!73 = !DILocation(line: 67, column: 72, scope: !5)
!74 = !DILocation(line: 67, column: 131, scope: !5)
!75 = !DILocation(line: 68, column: 20, scope: !5)
!76 = !DILocation(line: 69, column: 13, scope: !5)
!77 = !DILocation(line: 73, column: 20, scope: !5)
!78 = !DILocation(line: 74, column: 72, scope: !5)
!79 = !DILocation(line: 74, column: 131, scope: !5)
!80 = !DILocation(line: 75, column: 20, scope: !5)
!81 = !DILocation(line: 79, column: 20, scope: !5)
!82 = !DILocation(line: 80, column: 20, scope: !5)
!83 = !DILocation(line: 82, column: 20, scope: !5)
!84 = !DILocation(line: 83, column: 50, scope: !5)
!85 = !DILocation(line: 83, column: 43, scope: !5)
!86 = !DILocation(line: 83, column: 25, scope: !5)
!87 = !DILocation(line: 83, column: 63, scope: !5)
!88 = !DILocation(line: 83, column: 4, scope: !5)
