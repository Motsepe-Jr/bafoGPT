module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c3584_i32 = arith.constant 3584 : i32
    %c64_i32 = arith.constant 64 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<3584> : tensor<64x1xi64>
    %cst_0 = arith.constant dense<0> : tensor<64x1xi64>
    %cst_1 = arith.constant dense<288256> : tensor<64x1xi64>
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x64xf32>
    %cst_3 = arith.constant dense<9.99999974E-6> : tensor<64x1xf32>
    %cst_4 = arith.constant dense<3.584000e+03> : tensor<64x1xf32>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x64xf32>
    %cst_6 = arith.constant dense<59.8665199> : tensor<64x64xf32>
    %cst_7 = arith.constant dense<3584> : tensor<64x1xi32>
    %cst_8 = arith.constant dense<3584> : tensor<1x64xi32>
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<64x64xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c64_i32 : i32
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %3 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32>
    %4 = tt.splat %1 : (i32) -> tensor<64x1xi32>
    %5 = arith.addi %4, %3 : tensor<64x1xi32>
    %6 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<i64, 1>) -> tensor<64x1x!tt.ptr<i64, 1>>
    %8 = tt.addptr %7, %5 : tensor<64x1x!tt.ptr<i64, 1>>, tensor<64x1xi32>
    %9 = tt.load %8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x1xi64>
    %10 = arith.addi %9, %cst_1 : tensor<64x1xi64>
    %11 = arith.cmpi slt, %9, %cst_0 : tensor<64x1xi64>
    %12 = arith.select %11, %10, %9 : tensor<64x1xi1>, tensor<64x1xi64>
    %13 = arith.cmpi sge, %12, %cst_0 : tensor<64x1xi64>
    %14 = arith.cmpi slt, %12, %cst_1 : tensor<64x1xi64>
    %15 = arith.andi %13, %14 : tensor<64x1xi1>
    %16 = arith.muli %12, %cst : tensor<64x1xi64>
    %17 = tt.broadcast %16 : (tensor<64x1xi64>) -> tensor<64x64xi64>
    %18 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<64x64x!tt.ptr<f32, 1>>
    %19 = scf.for %arg6 = %c0_i32 to %c3584_i32 step %c64_i32 iter_args(%arg7 = %cst_9) -> (tensor<64x64xf32>)  : i32 {
      %37 = tt.splat %arg6 : (i32) -> tensor<1x64xi32>
      %38 = arith.addi %37, %6 : tensor<1x64xi32>
      %39 = arith.cmpi slt, %38, %cst_8 : tensor<1x64xi32>
      tt.assert %15, "index out of bounds: 0 <= tmp3 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<64x1xi1>
      %40 = arith.extsi %38 : tensor<1x64xi32> to tensor<1x64xi64>
      %41 = tt.broadcast %40 : (tensor<1x64xi64>) -> tensor<64x64xi64>
      %42 = arith.addi %41, %17 : tensor<64x64xi64>
      %43 = tt.addptr %18, %42 : tensor<64x64x!tt.ptr<f32, 1>>, tensor<64x64xi64>
      %44 = tt.broadcast %39 : (tensor<1x64xi1>) -> tensor<64x64xi1>
      %45 = tt.load %43, %44, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xf32>
      %46 = arith.mulf %45, %cst_6 : tensor<64x64xf32>
      %47 = arith.mulf %46, %46 : tensor<64x64xf32>
      %48 = arith.addf %arg7, %47 : tensor<64x64xf32>
      %49 = arith.select %44, %48, %arg7 : tensor<64x64xi1>, tensor<64x64xf32>
      scf.yield %49 : tensor<64x64xf32>
    }
    %20 = "tt.reduce"(%19) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %37 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %37 : f32
    }) : (tensor<64x64xf32>) -> tensor<64xf32>
    %21 = tt.expand_dims %20 {axis = 1 : i32} : (tensor<64xf32>) -> tensor<64x1xf32>
    %22 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x64x!tt.ptr<f32, 1>>
    %23 = arith.addi %9, %cst_1 : tensor<64x1xi64>
    %24 = arith.cmpi slt, %9, %cst_0 : tensor<64x1xi64>
    %25 = arith.select %24, %23, %9 : tensor<64x1xi1>, tensor<64x1xi64>
    %26 = arith.cmpi sge, %25, %cst_0 : tensor<64x1xi64>
    %27 = arith.cmpi slt, %25, %cst_1 : tensor<64x1xi64>
    %28 = arith.andi %26, %27 : tensor<64x1xi1>
    %29 = arith.muli %25, %cst : tensor<64x1xi64>
    %30 = tt.broadcast %29 : (tensor<64x1xi64>) -> tensor<64x64xi64>
    %31 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<64x64x!tt.ptr<f32, 1>>
    %32 = arith.divf %21, %cst_4 : tensor<64x1xf32>
    %33 = arith.addf %32, %cst_3 : tensor<64x1xf32>
    %34 = arith.muli %5, %cst_7 : tensor<64x1xi32>
    %35 = tt.broadcast %34 : (tensor<64x1xi32>) -> tensor<64x64xi32>
    %36 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<64x64x!tt.ptr<bf16, 1>>
    scf.for %arg6 = %c0_i32 to %c3584_i32 step %c64_i32  : i32 {
      %37 = tt.splat %arg6 : (i32) -> tensor<1x64xi32>
      %38 = arith.addi %37, %6 : tensor<1x64xi32>
      %39 = arith.cmpi slt, %38, %cst_8 : tensor<1x64xi32>
      %40 = tt.addptr %22, %38 : tensor<1x64x!tt.ptr<f32, 1>>, tensor<1x64xi32>
      %41 = tt.load %40, %39, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x64xf32>
      tt.assert %28, "index out of bounds: 0 <= tmp13 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<64x1xi1>
      %42 = arith.extsi %38 : tensor<1x64xi32> to tensor<1x64xi64>
      %43 = tt.broadcast %42 : (tensor<1x64xi64>) -> tensor<64x64xi64>
      %44 = arith.addi %43, %30 : tensor<64x64xi64>
      %45 = tt.addptr %31, %44 : tensor<64x64x!tt.ptr<f32, 1>>, tensor<64x64xi64>
      %46 = tt.broadcast %39 : (tensor<1x64xi1>) -> tensor<64x64xi1>
      %47 = tt.load %45, %46, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<64x64xf32>
      %48 = arith.mulf %47, %cst_6 : tensor<64x64xf32>
      %49 = tt.extern_elementwise %33 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32>) -> tensor<64x1xf32>
      %50 = tt.broadcast %49 : (tensor<64x1xf32>) -> tensor<64x64xf32>
      %51 = arith.mulf %48, %50 : tensor<64x64xf32>
      %52 = arith.addf %41, %cst_2 : tensor<1x64xf32>
      %53 = tt.broadcast %52 : (tensor<1x64xf32>) -> tensor<64x64xf32>
      %54 = arith.mulf %51, %53 : tensor<64x64xf32>
      %55 = tt.broadcast %38 : (tensor<1x64xi32>) -> tensor<64x64xi32>
      %56 = arith.addi %55, %35 : tensor<64x64xi32>
      %57 = tt.addptr %36, %56 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
      %58 = arith.truncf %54 : tensor<64x64xf32> to tensor<64x64xbf16>
      tt.store %57, %58, %46 {cache = 1 : i32, evict = 1 : i32} : tensor<64x64xbf16>
    }
    tt.return
  }
}
