#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2048> : tensor<1x2048xi32, #blocked>
    %c2048_i32 = arith.constant 2048 : i32
    %cst_0 = arith.constant dense<6.250000e-02> : tensor<1x2048xf32, #blocked>
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_2 = arith.constant dense<5.000000e+01> : tensor<1x2048xf32, #blocked>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %3 = arith.cmpi slt, %2, %cst : tensor<1x2048xi32, #blocked>
    %4 = arith.muli %0, %c2048_i32 : i32
    %5 = tt.splat %4 : (i32) -> tensor<1x2048xi32, #blocked>
    %6 = arith.addi %2, %5 : tensor<1x2048xi32, #blocked>
    %7 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %8 = tt.addptr %7, %6 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %9 = tt.load %8, %3, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
    %10 = arith.extf %9 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
    %11 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %12 = tt.addptr %11, %6 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %13 = tt.load %12, %3, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
    %14 = arith.mulf %10, %13 : tensor<1x2048xf32, #blocked>
    %15 = arith.addf %14, %cst_3 : tensor<1x2048xf32, #blocked>
    %16 = arith.select %3, %15, %cst_3 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %39 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %39 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %18 = tt.expand_dims %17 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %19 = tt.load %8, %3, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
    %20 = arith.extf %19 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
    %21 = tt.load %12, %3, %cst_3 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
    %22 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %23 = tt.addptr %22, %6 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %24 = tt.load %23, %3, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
    %25 = arith.extf %24 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
    %26 = arith.mulf %20, %21 : tensor<1x2048xf32, #blocked>
    %27 = tt.broadcast %18 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %28 = arith.mulf %21, %27 : tensor<1x2048xf32, #blocked>
    %29 = arith.subf %26, %28 : tensor<1x2048xf32, #blocked>
    %30 = arith.mulf %29, %cst_2 : tensor<1x2048xf32, #blocked>
    %31 = arith.mulf %25, %25 : tensor<1x2048xf32, #blocked>
    %32 = arith.subf %cst_1, %31 : tensor<1x2048xf32, #blocked>
    %33 = arith.mulf %30, %32 : tensor<1x2048xf32, #blocked>
    %34 = arith.divf %33, %cst_2 : tensor<1x2048xf32, #blocked>
    %35 = arith.mulf %34, %cst_0 : tensor<1x2048xf32, #blocked>
    %36 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %37 = tt.addptr %36, %6 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %38 = arith.truncf %35 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
    tt.store %37, %38, %3 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    tt.return
  }
}
