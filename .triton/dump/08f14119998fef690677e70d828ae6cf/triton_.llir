; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_1 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_1 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_1 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp13 < 288256"
@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 5, !dbg !10
  %urem = shl i32 %7, 3, !dbg !10
  %9 = and i32 %urem, 2040, !dbg !10
  %10 = or i32 %9, 4, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %12 = sext i32 %11 to i64, !dbg !12
  %13 = getelementptr i64, ptr addrspace(1) %0, i64 %12, !dbg !12
  %14 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 true) #6, !dbg !13
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 true) #6, !dbg !13
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 true) #6, !dbg !13
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 true) #6, !dbg !13
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 true) #6, !dbg !13
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 true) #6, !dbg !13
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 true) #6, !dbg !13
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 true) #6, !dbg !13
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 true) #6, !dbg !13
  %23 = add i64 %14, 288256, !dbg !14
  %24 = add i64 %22, 288256, !dbg !14
  %25 = icmp slt i64 %14, 0, !dbg !15
  %26 = icmp slt i64 %22, 0, !dbg !15
  %27 = select i1 %25, i64 %23, i64 %14, !dbg !16
  %28 = select i1 %26, i64 %24, i64 %22, !dbg !16
  %29 = icmp ugt i64 %28, 288255, !dbg !17
  %30 = mul i64 %27, 3584, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30
  br i1 %29, label %32, label %33, !dbg !19

32:                                               ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  br label %33, !dbg !19

33:                                               ; preds = %32, %6
  %34 = zext nneg i32 %9 to i64, !dbg !20
  %35 = zext nneg i32 %10 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %31, i64 %34, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %31, i64 %35, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %48 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !22
  %49 = insertelement <2 x i32> %48, i32 %40, i64 1, !dbg !22
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !22
  %51 = fmul <2 x float> %50, <float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !23
  %52 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !22
  %53 = insertelement <2 x i32> %52, i32 %41, i64 1, !dbg !22
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !22
  %55 = fmul <2 x float> %54, <float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !23
  %56 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !22
  %57 = insertelement <2 x i32> %56, i32 %44, i64 1, !dbg !22
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !22
  %59 = fmul <2 x float> %58, <float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !23
  %60 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !22
  %61 = insertelement <2 x i32> %60, i32 %46, i64 1, !dbg !22
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !22
  %63 = fmul <2 x float> %62, <float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !23
  %64 = fmul <2 x float> %51, %51, !dbg !24
  %65 = fmul <2 x float> %55, %55, !dbg !24
  %66 = fmul <2 x float> %59, %59, !dbg !24
  %67 = fmul <2 x float> %63, %63, !dbg !24
  %68 = or i32 %9, 2048, !dbg !25
  %69 = or i32 %9, 2052, !dbg !25
  %70 = icmp ult i32 %68, 3584, !dbg !26
  br i1 %29, label %71, label %72, !dbg !19

71:                                               ; preds = %33
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  br label %72, !dbg !19

72:                                               ; preds = %71, %33
  %73 = zext nneg i32 %68 to i64, !dbg !20
  %74 = zext nneg i32 %69 to i64, !dbg !20
  %75 = getelementptr float, ptr addrspace(1) %31, i64 %73, !dbg !21
  %76 = getelementptr float, ptr addrspace(1) %31, i64 %74, !dbg !21
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #6, !dbg !22
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !22
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !22
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !22
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !22
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #6, !dbg !22
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !22
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !22
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !22
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !22
  %87 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !22
  %88 = insertelement <2 x i32> %87, i32 %79, i64 1, !dbg !22
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !22
  %90 = fmul <2 x float> %89, <float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !23
  %91 = fmul <2 x float> %90, %90, !dbg !24
  %92 = insertelement <2 x i1> poison, i1 %70, i64 0, !dbg !27
  %93 = shufflevector <2 x i1> %92, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !27
  %94 = select <2 x i1> %93, <2 x float> %91, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !27
  %95 = fadd <2 x float> %64, %94, !dbg !27
  %96 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !22
  %97 = insertelement <2 x i32> %96, i32 %80, i64 1, !dbg !22
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !22
  %99 = fmul <2 x float> %98, <float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !23
  %100 = fmul <2 x float> %99, %99, !dbg !24
  %101 = select <2 x i1> %93, <2 x float> %100, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !27
  %102 = fadd <2 x float> %65, %101, !dbg !27
  %103 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !22
  %104 = insertelement <2 x i32> %103, i32 %83, i64 1, !dbg !22
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !22
  %106 = fmul <2 x float> %105, <float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !23
  %107 = fmul <2 x float> %106, %106, !dbg !24
  %108 = select <2 x i1> %93, <2 x float> %107, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !27
  %109 = fadd <2 x float> %66, %108, !dbg !27
  %110 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !22
  %111 = insertelement <2 x i32> %110, i32 %85, i64 1, !dbg !22
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !22
  %113 = fmul <2 x float> %112, <float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !23
  %114 = fmul <2 x float> %113, %113, !dbg !24
  %115 = select <2 x i1> %93, <2 x float> %114, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !27
  %116 = fadd <2 x float> %67, %115, !dbg !27
  %117 = and i32 %7, 31, !dbg !10
  %118 = and i32 %8, 7, !dbg !10
  %shift = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %119 = fadd <2 x float> %95, %shift, !dbg !28
  %shift30 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %120 = fadd <2 x float> %shift30, %119, !dbg !28
  %121 = fadd <2 x float> %102, %120, !dbg !28
  %shift31 = shufflevector <2 x float> %109, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %122 = fadd <2 x float> %shift31, %121, !dbg !28
  %123 = fadd <2 x float> %109, %122, !dbg !28
  %shift32 = shufflevector <2 x float> %116, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %124 = fadd <2 x float> %shift32, %123, !dbg !28
  %125 = fadd <2 x float> %116, %124, !dbg !28
  %126 = extractelement <2 x float> %125, i64 0, !dbg !28
  %127 = bitcast float %126 to i32, !dbg !34
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !34
  %129 = bitcast i32 %128 to float, !dbg !34
  %130 = fadd float %126, %129, !dbg !28
  %131 = bitcast float %130 to i32, !dbg !34
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = fadd float %130, %133, !dbg !28
  %135 = bitcast float %134 to i32, !dbg !34
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !34
  %137 = bitcast i32 %136 to float, !dbg !34
  %138 = fadd float %134, %137, !dbg !28
  %139 = bitcast float %138 to i32, !dbg !34
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !34
  %141 = bitcast i32 %140 to float, !dbg !34
  %142 = fadd float %138, %141, !dbg !28
  %143 = bitcast float %142 to i32, !dbg !34
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !34
  %145 = bitcast i32 %144 to float, !dbg !34
  %146 = fadd float %142, %145, !dbg !28
  %147 = icmp eq i32 %117, 0, !dbg !34
  %148 = zext nneg i32 %118 to i64, !dbg !34
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i64 %148, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, float %146, i1 %147) #6, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %150 = icmp slt i32 %7, 8, !dbg !34
  %151 = sext i32 %7 to i64, !dbg !34
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i64 %151, !dbg !34
  %153 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %152, i1 %150) #6, !dbg !34
  %154 = bitcast float %153 to i32, !dbg !34
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !34
  %156 = bitcast i32 %155 to float, !dbg !34
  %157 = fadd float %153, %156, !dbg !28
  %158 = bitcast float %157 to i32, !dbg !34
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 2, i32 31), !dbg !34
  %160 = bitcast i32 %159 to float, !dbg !34
  %161 = fadd float %157, %160, !dbg !28
  %162 = bitcast float %161 to i32, !dbg !34
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !34
  %164 = bitcast i32 %163 to float, !dbg !34
  %165 = fadd float %161, %164, !dbg !28
  %166 = and i32 %7, 7, !dbg !34
  %167 = icmp eq i32 %166, 0, !dbg !34
  %168 = and i1 %150, %167, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, float %165, i1 %168) #6, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %169 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !34
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 3.584000e+03) #6, !dbg !36
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 3.584000e+03) #6, !dbg !36
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 3.584000e+03) #6, !dbg !36
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 3.584000e+03) #6, !dbg !36
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 3.584000e+03) #6, !dbg !36
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 3.584000e+03) #6, !dbg !36
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 3.584000e+03) #6, !dbg !36
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 3.584000e+03) #6, !dbg !36
  %178 = fadd float %170, 0x3EE4F8B580000000, !dbg !37
  %179 = mul i32 %11, 3584, !dbg !38
  br label %180, !dbg !39

180:                                              ; preds = %72, %__nv_rsqrtf.exit
  %181 = phi i1 [ true, %72 ], [ false, %__nv_rsqrtf.exit ]
  %182 = phi i32 [ 0, %72 ], [ 2048, %__nv_rsqrtf.exit ]
  %183 = or i32 %182, %9, !dbg !40
  %184 = or i32 %182, %10, !dbg !40
  %185 = icmp ult i32 %183, 3584, !dbg !41
  %186 = zext nneg i32 %183 to i64, !dbg !42
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !42
  %188 = zext nneg i32 %184 to i64, !dbg !42
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !42
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %187, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #6, !dbg !43
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !43
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !43
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !43
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !43
  %195 = bitcast i32 %191 to float, !dbg !43
  %196 = bitcast i32 %192 to float, !dbg !43
  %197 = bitcast i32 %193 to float, !dbg !43
  %198 = bitcast i32 %194 to float, !dbg !43
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %189, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #6, !dbg !43
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !43
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !43
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !43
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !43
  %204 = bitcast i32 %200 to float, !dbg !43
  %205 = bitcast i32 %201 to float, !dbg !43
  %206 = bitcast i32 %202 to float, !dbg !43
  %207 = bitcast i32 %203 to float, !dbg !43
  br i1 %29, label %208, label %209, !dbg !44

208:                                              ; preds = %180
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 883, ptr nonnull @assertFunc_1, i64 1), !dbg !44
  br label %209, !dbg !44

209:                                              ; preds = %208, %180
  %210 = getelementptr float, ptr addrspace(1) %31, i64 %186, !dbg !45
  %211 = getelementptr float, ptr addrspace(1) %31, i64 %188, !dbg !45
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %210, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #6, !dbg !46
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !46
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !46
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !46
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !46
  %217 = bitcast i32 %213 to float, !dbg !46
  %218 = bitcast i32 %214 to float, !dbg !46
  %219 = bitcast i32 %215 to float, !dbg !46
  %220 = bitcast i32 %216 to float, !dbg !46
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %211, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #6, !dbg !46
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !46
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !46
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !46
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !46
  %226 = bitcast i32 %222 to float, !dbg !46
  %227 = bitcast i32 %223 to float, !dbg !46
  %228 = bitcast i32 %224 to float, !dbg !46
  %229 = bitcast i32 %225 to float, !dbg !46
  %230 = fmul float %217, 0x404DEEEA20000000, !dbg !47
  %231 = fmul float %218, 0x404DEEEA20000000, !dbg !47
  %232 = fmul float %219, 0x404DEEEA20000000, !dbg !47
  %233 = fmul float %220, 0x404DEEEA20000000, !dbg !47
  %234 = fmul float %226, 0x404DEEEA20000000, !dbg !47
  %235 = fmul float %227, 0x404DEEEA20000000, !dbg !47
  %236 = fmul float %228, 0x404DEEEA20000000, !dbg !47
  %237 = fmul float %229, 0x404DEEEA20000000, !dbg !47
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %.not.i = icmp eq i32 %238, 0, !dbg !48
  br i1 %.not.i, label %241, label %239, !dbg !48

239:                                              ; preds = %209
  %240 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %178), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

241:                                              ; preds = %209
  %242 = tail call float @llvm.nvvm.rsqrt.approx.f(float %178), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

__nv_rsqrtf.exit:                                 ; preds = %239, %241
  %.0.i = phi float [ %240, %239 ], [ %242, %241 ], !dbg !48
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %250 = fmul float %230, %.0.i, !dbg !49
  %251 = fmul float %231, %.0.i, !dbg !49
  %252 = fmul float %232, %.0.i, !dbg !49
  %253 = fmul float %233, %.0.i, !dbg !49
  %254 = fmul float %234, %.0.i, !dbg !49
  %255 = fmul float %235, %.0.i, !dbg !49
  %256 = fmul float %236, %.0.i, !dbg !49
  %257 = fmul float %237, %.0.i, !dbg !49
  %258 = fadd float %195, 1.000000e+00, !dbg !50
  %259 = fadd float %196, 1.000000e+00, !dbg !50
  %260 = fadd float %197, 1.000000e+00, !dbg !50
  %261 = fadd float %198, 1.000000e+00, !dbg !50
  %262 = fadd float %204, 1.000000e+00, !dbg !50
  %263 = fadd float %205, 1.000000e+00, !dbg !50
  %264 = fadd float %206, 1.000000e+00, !dbg !50
  %265 = fadd float %207, 1.000000e+00, !dbg !50
  %266 = fmul float %258, %250, !dbg !51
  %267 = fmul float %259, %251, !dbg !51
  %268 = fmul float %260, %252, !dbg !51
  %269 = fmul float %261, %253, !dbg !51
  %270 = fmul float %262, %254, !dbg !51
  %271 = fmul float %263, %255, !dbg !51
  %272 = fmul float %264, %256, !dbg !51
  %273 = fmul float %265, %257, !dbg !51
  %274 = add i32 %183, %179, !dbg !52
  %275 = sext i32 %274 to i64, !dbg !53
  %276 = getelementptr i16, ptr addrspace(1) %3, i64 %275, !dbg !53
  %277 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %266) #6, !dbg !54
  %278 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %267) #6, !dbg !54
  %279 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %268) #6, !dbg !54
  %280 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %269) #6, !dbg !54
  %281 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %270) #6, !dbg !54
  %282 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %271) #6, !dbg !54
  %283 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %272) #6, !dbg !54
  %284 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %273) #6, !dbg !54
  %285 = insertelement <2 x i16> undef, i16 %277, i64 0, !dbg !54
  %286 = insertelement <2 x i16> %285, i16 %278, i64 1, !dbg !54
  %287 = bitcast <2 x i16> %286 to i32, !dbg !54
  %288 = insertelement <2 x i16> undef, i16 %279, i64 0, !dbg !54
  %289 = insertelement <2 x i16> %288, i16 %280, i64 1, !dbg !54
  %290 = bitcast <2 x i16> %289 to i32, !dbg !54
  %291 = insertelement <2 x i16> undef, i16 %281, i64 0, !dbg !54
  %292 = insertelement <2 x i16> %291, i16 %282, i64 1, !dbg !54
  %293 = bitcast <2 x i16> %292 to i32, !dbg !54
  %294 = insertelement <2 x i16> undef, i16 %283, i64 0, !dbg !54
  %295 = insertelement <2 x i16> %294, i16 %284, i64 1, !dbg !54
  %296 = bitcast <2 x i16> %295 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %287, i32 %290, i32 %293, i32 %296, ptr addrspace(1) %276, i1 %185) #6, !dbg !54
  br i1 %181, label %180, label %297, !dbg !39

297:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cbj5hmxjansir2wpuuuryahn23mbv5deviec4ha43e5m7asacgnh.py", directory: "/tmp/torchinductor_zeus/bj")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 26, column: 30, scope: !7)
!13 = !DILocation(line: 26, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 22, scope: !7)
!15 = !DILocation(line: 33, column: 22, scope: !7)
!16 = !DILocation(line: 34, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 40, scope: !7)
!18 = !DILocation(line: 36, column: 45, scope: !7)
!19 = !DILocation(line: 35, column: 56, scope: !7)
!20 = !DILocation(line: 36, column: 40, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 53, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 39, column: 22, scope: !7)
!25 = !DILocation(line: 29, column: 27, scope: !7)
!26 = !DILocation(line: 30, column: 25, scope: !7)
!27 = !DILocation(line: 42, column: 39, scope: !7)
!28 = !DILocation(line: 233, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 243, column: 36, scope: !29, inlinedAt: !33)
!33 = !DILocation(line: 43, column: 25, scope: !29)
!34 = !DILocation(line: 243, column: 36, scope: !31, inlinedAt: !35)
!35 = !DILocation(line: 43, column: 25, scope: !31)
!36 = !DILocation(line: 57, column: 23, scope: !7)
!37 = !DILocation(line: 59, column: 24, scope: !7)
!38 = !DILocation(line: 66, column: 40, scope: !7)
!39 = !DILocation(line: 44, column: 36, scope: !7)
!40 = !DILocation(line: 45, column: 27, scope: !7)
!41 = !DILocation(line: 46, column: 25, scope: !7)
!42 = !DILocation(line: 48, column: 35, scope: !7)
!43 = !DILocation(line: 48, column: 40, scope: !7)
!44 = !DILocation(line: 52, column: 58, scope: !7)
!45 = !DILocation(line: 53, column: 35, scope: !7)
!46 = !DILocation(line: 53, column: 55, scope: !7)
!47 = !DILocation(line: 55, column: 24, scope: !7)
!48 = !DILocation(line: 60, column: 30, scope: !7)
!49 = !DILocation(line: 61, column: 24, scope: !7)
!50 = !DILocation(line: 63, column: 24, scope: !7)
!51 = !DILocation(line: 64, column: 24, scope: !7)
!52 = !DILocation(line: 66, column: 35, scope: !7)
!53 = !DILocation(line: 66, column: 29, scope: !7)
!54 = !DILocation(line: 66, column: 53, scope: !7)
!55 = !DILocation(line: 44, column: 4, scope: !7)
