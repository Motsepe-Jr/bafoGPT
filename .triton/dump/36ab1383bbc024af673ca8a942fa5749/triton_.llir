; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6de7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = and i32 %9, 31, !dbg !8
  %11 = lshr i32 %9, 5, !dbg !8
  %12 = and i32 %11, 7, !dbg !8
  %13 = lshr i32 %10, 3, !dbg !8
  %14 = shl nuw nsw i32 %12, 2, !dbg !8
  %15 = or i32 %14, %13, !dbg !8
  %16 = or i32 %15, 32, !dbg !8
  %17 = shl i32 %9, 2, !dbg !8
  %18 = and i32 %17, 60, !dbg !8
  %19 = shl i32 %9, 3, !dbg !9
  %20 = and i32 %19, 56, !dbg !9
  %21 = lshr i32 %10, 4, !dbg !9
  %22 = shl nuw nsw i32 %12, 1, !dbg !9
  %23 = or i32 %22, %21, !dbg !9
  %24 = or i32 %23, 16, !dbg !9
  %25 = or i32 %23, 32, !dbg !9
  %26 = or i32 %23, 48, !dbg !9
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %28 = shl i32 %27, 6, !dbg !11
  %29 = or i32 %28, %15, !dbg !12
  %30 = or i32 %28, %16, !dbg !12
  %31 = or i32 %28, %18, !dbg !12
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %33 = shl i32 %32, 6, !dbg !14
  %34 = or i32 %33, %20, !dbg !15
  %35 = or i32 %33, %23, !dbg !15
  %36 = or i32 %33, %24, !dbg !15
  %37 = or i32 %33, %25, !dbg !15
  %38 = or i32 %33, %26, !dbg !15
  %39 = icmp slt i32 %34, 256, !dbg !16
  %40 = icmp slt i32 %35, 256, !dbg !16
  %41 = icmp slt i32 %36, 256, !dbg !16
  %42 = icmp slt i32 %37, 256, !dbg !16
  %43 = icmp slt i32 %38, 256, !dbg !16
  %.frozen74 = freeze i32 %29
  %44 = sdiv i32 %.frozen74, 512, !dbg !17
  %.frozen76 = freeze i32 %30
  %45 = sdiv i32 %.frozen76, 512, !dbg !17
  %.frozen78 = freeze i32 %31
  %46 = sdiv i32 %.frozen78, 512, !dbg !17
  %47 = srem i32 %44, 4, !dbg !18
  %48 = srem i32 %45, 4, !dbg !18
  %.frozen = freeze i32 %29
  %49 = sdiv i32 %.frozen, 2048, !dbg !19
  %.frozen72 = freeze i32 %30
  %50 = sdiv i32 %.frozen72, 2048, !dbg !19
  %51 = sdiv i32 %31, 2048, !dbg !19
  %52 = mul i32 %49, 2048
  %.decomposed = sub i32 %.frozen, %52
  %53 = mul i32 %50, 2048
  %.decomposed73 = sub i32 %.frozen72, %53
  %54 = mul i32 %44, 512
  %.decomposed75 = sub i32 %.frozen74, %54
  %55 = mul i32 %45, 512
  %.decomposed77 = sub i32 %.frozen76, %55
  %56 = mul i32 %46, 512
  %.decomposed79 = sub i32 %.frozen78, %56
  %57 = icmp slt i32 %47, 2, !dbg !20
  %58 = icmp slt i32 %48, 2, !dbg !20
  %59 = icmp sgt i32 %34, 255, !dbg !21
  %60 = and i1 %59, %57, !dbg !22
  %61 = and i1 %59, %58, !dbg !22
  %62 = shl nsw i32 %.decomposed, 8, !dbg !23
  %63 = shl nsw i32 %.decomposed73, 8, !dbg !23
  %64 = shl i32 %49, 18, !dbg !24
  %65 = shl i32 %50, 18, !dbg !24
  %66 = add i32 %64, %62, !dbg !25
  %67 = add i32 %66, %34, !dbg !26
  %68 = add i32 %65, %63, !dbg !25
  %69 = add i32 %68, %34, !dbg !26
  %70 = sext i32 %67 to i64, !dbg !27
  %71 = getelementptr i16, ptr addrspace(1) %0, i64 %70, !dbg !27
  %72 = sext i32 %69 to i64, !dbg !27
  %73 = getelementptr i16, ptr addrspace(1) %0, i64 %72, !dbg !27
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !28
  %79 = trunc i32 %75 to i16, !dbg !28
  %extelt.offset = lshr i32 %75, 16, !dbg !28
  %80 = trunc i32 %extelt.offset to i16, !dbg !28
  %81 = trunc i32 %76 to i16, !dbg !28
  %extelt.offset1 = lshr i32 %76, 16, !dbg !28
  %82 = trunc i32 %extelt.offset1 to i16, !dbg !28
  %83 = trunc i32 %77 to i16, !dbg !28
  %extelt.offset2 = lshr i32 %77, 16, !dbg !28
  %84 = trunc i32 %extelt.offset2 to i16, !dbg !28
  %85 = trunc i32 %78 to i16, !dbg !28
  %extelt.offset3 = lshr i32 %78, 16, !dbg !28
  %86 = trunc i32 %extelt.offset3 to i16, !dbg !28
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !28
  %92 = trunc i32 %88 to i16, !dbg !28
  %extelt.offset4 = lshr i32 %88, 16, !dbg !28
  %93 = trunc i32 %extelt.offset4 to i16, !dbg !28
  %94 = trunc i32 %89 to i16, !dbg !28
  %extelt.offset5 = lshr i32 %89, 16, !dbg !28
  %95 = trunc i32 %extelt.offset5 to i16, !dbg !28
  %96 = trunc i32 %90 to i16, !dbg !28
  %extelt.offset6 = lshr i32 %90, 16, !dbg !28
  %97 = trunc i32 %extelt.offset6 to i16, !dbg !28
  %98 = trunc i32 %91 to i16, !dbg !28
  %extelt.offset7 = lshr i32 %91, 16, !dbg !28
  %99 = trunc i32 %extelt.offset7 to i16, !dbg !28
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #2, !dbg !29
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #2, !dbg !29
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #2, !dbg !29
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #2, !dbg !29
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #2, !dbg !29
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #2, !dbg !29
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #2, !dbg !29
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #2, !dbg !29
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #2, !dbg !29
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #2, !dbg !29
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #2, !dbg !29
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #2, !dbg !29
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #2, !dbg !29
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #2, !dbg !29
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #2, !dbg !29
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #2, !dbg !29
  %116 = select i1 %60, float %100, float 0.000000e+00, !dbg !30
  %117 = select i1 %60, float %101, float 0.000000e+00, !dbg !30
  %118 = select i1 %60, float %102, float 0.000000e+00, !dbg !30
  %119 = select i1 %60, float %103, float 0.000000e+00, !dbg !30
  %120 = select i1 %60, float %104, float 0.000000e+00, !dbg !30
  %121 = select i1 %60, float %105, float 0.000000e+00, !dbg !30
  %122 = select i1 %60, float %106, float 0.000000e+00, !dbg !30
  %123 = select i1 %60, float %107, float 0.000000e+00, !dbg !30
  %124 = select i1 %61, float %108, float 0.000000e+00, !dbg !30
  %125 = select i1 %61, float %109, float 0.000000e+00, !dbg !30
  %126 = select i1 %61, float %110, float 0.000000e+00, !dbg !30
  %127 = select i1 %61, float %111, float 0.000000e+00, !dbg !30
  %128 = select i1 %61, float %112, float 0.000000e+00, !dbg !30
  %129 = select i1 %61, float %113, float 0.000000e+00, !dbg !30
  %130 = select i1 %61, float %114, float 0.000000e+00, !dbg !30
  %131 = select i1 %61, float %115, float 0.000000e+00, !dbg !30
  %132 = and i1 %39, %57, !dbg !31
  %133 = and i1 %39, %58, !dbg !31
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #2, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !32
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !32
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !32
  %139 = trunc i32 %135 to i16, !dbg !32
  %extelt.offset8 = lshr i32 %135, 16, !dbg !32
  %140 = trunc i32 %extelt.offset8 to i16, !dbg !32
  %141 = trunc i32 %136 to i16, !dbg !32
  %extelt.offset9 = lshr i32 %136, 16, !dbg !32
  %142 = trunc i32 %extelt.offset9 to i16, !dbg !32
  %143 = trunc i32 %137 to i16, !dbg !32
  %extelt.offset10 = lshr i32 %137, 16, !dbg !32
  %144 = trunc i32 %extelt.offset10 to i16, !dbg !32
  %145 = trunc i32 %138 to i16, !dbg !32
  %extelt.offset11 = lshr i32 %138, 16, !dbg !32
  %146 = trunc i32 %extelt.offset11 to i16, !dbg !32
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #2, !dbg !32
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !32
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !32
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !32
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !32
  %152 = trunc i32 %148 to i16, !dbg !32
  %extelt.offset12 = lshr i32 %148, 16, !dbg !32
  %153 = trunc i32 %extelt.offset12 to i16, !dbg !32
  %154 = trunc i32 %149 to i16, !dbg !32
  %extelt.offset13 = lshr i32 %149, 16, !dbg !32
  %155 = trunc i32 %extelt.offset13 to i16, !dbg !32
  %156 = trunc i32 %150 to i16, !dbg !32
  %extelt.offset14 = lshr i32 %150, 16, !dbg !32
  %157 = trunc i32 %extelt.offset14 to i16, !dbg !32
  %158 = trunc i32 %151 to i16, !dbg !32
  %extelt.offset15 = lshr i32 %151, 16, !dbg !32
  %159 = trunc i32 %extelt.offset15 to i16, !dbg !32
  %160 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #2, !dbg !33
  %161 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %140) #2, !dbg !33
  %162 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %141) #2, !dbg !33
  %163 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %142) #2, !dbg !33
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %143) #2, !dbg !33
  %165 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #2, !dbg !33
  %166 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #2, !dbg !33
  %167 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #2, !dbg !33
  %168 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %152) #2, !dbg !33
  %169 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %153) #2, !dbg !33
  %170 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %154) #2, !dbg !33
  %171 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #2, !dbg !33
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %156) #2, !dbg !33
  %173 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %157) #2, !dbg !33
  %174 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %158) #2, !dbg !33
  %175 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %159) #2, !dbg !33
  %176 = shl nsw i32 %.decomposed75, 8, !dbg !34
  %177 = shl nsw i32 %.decomposed77, 8, !dbg !34
  %178 = add i32 %176, %34, !dbg !35
  %179 = add i32 %177, %34, !dbg !35
  %180 = sext i32 %178 to i64, !dbg !36
  %181 = getelementptr i16, ptr addrspace(1) %1, i64 %180, !dbg !36
  %182 = sext i32 %179 to i64, !dbg !36
  %183 = getelementptr i16, ptr addrspace(1) %1, i64 %182, !dbg !36
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #2, !dbg !37
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !37
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !37
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !37
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !37
  %189 = trunc i32 %185 to i16, !dbg !37
  %extelt.offset16 = lshr i32 %185, 16, !dbg !37
  %190 = trunc i32 %extelt.offset16 to i16, !dbg !37
  %191 = trunc i32 %186 to i16, !dbg !37
  %extelt.offset17 = lshr i32 %186, 16, !dbg !37
  %192 = trunc i32 %extelt.offset17 to i16, !dbg !37
  %193 = trunc i32 %187 to i16, !dbg !37
  %extelt.offset18 = lshr i32 %187, 16, !dbg !37
  %194 = trunc i32 %extelt.offset18 to i16, !dbg !37
  %195 = trunc i32 %188 to i16, !dbg !37
  %extelt.offset19 = lshr i32 %188, 16, !dbg !37
  %196 = trunc i32 %extelt.offset19 to i16, !dbg !37
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %183, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #2, !dbg !37
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !37
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !37
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !37
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !37
  %202 = trunc i32 %198 to i16, !dbg !37
  %extelt.offset20 = lshr i32 %198, 16, !dbg !37
  %203 = trunc i32 %extelt.offset20 to i16, !dbg !37
  %204 = trunc i32 %199 to i16, !dbg !37
  %extelt.offset21 = lshr i32 %199, 16, !dbg !37
  %205 = trunc i32 %extelt.offset21 to i16, !dbg !37
  %206 = trunc i32 %200 to i16, !dbg !37
  %extelt.offset22 = lshr i32 %200, 16, !dbg !37
  %207 = trunc i32 %extelt.offset22 to i16, !dbg !37
  %208 = trunc i32 %201 to i16, !dbg !37
  %extelt.offset23 = lshr i32 %201, 16, !dbg !37
  %209 = trunc i32 %extelt.offset23 to i16, !dbg !37
  %210 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #2, !dbg !38
  %211 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %190) #2, !dbg !38
  %212 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %191) #2, !dbg !38
  %213 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %192) #2, !dbg !38
  %214 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %193) #2, !dbg !38
  %215 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %194) #2, !dbg !38
  %216 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %195) #2, !dbg !38
  %217 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %196) #2, !dbg !38
  %218 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %202) #2, !dbg !38
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %203) #2, !dbg !38
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %204) #2, !dbg !38
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %205) #2, !dbg !38
  %222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #2, !dbg !38
  %223 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %207) #2, !dbg !38
  %224 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %208) #2, !dbg !38
  %225 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %209) #2, !dbg !38
  %226 = fmul float %160, %210, !dbg !39
  %227 = fmul float %161, %211, !dbg !39
  %228 = fmul float %162, %212, !dbg !39
  %229 = fmul float %163, %213, !dbg !39
  %230 = fmul float %164, %214, !dbg !39
  %231 = fmul float %165, %215, !dbg !39
  %232 = fmul float %166, %216, !dbg !39
  %233 = fmul float %167, %217, !dbg !39
  %234 = fmul float %168, %218, !dbg !39
  %235 = fmul float %169, %219, !dbg !39
  %236 = fmul float %170, %220, !dbg !39
  %237 = fmul float %171, %221, !dbg !39
  %238 = fmul float %172, %222, !dbg !39
  %239 = fmul float %173, %223, !dbg !39
  %240 = fmul float %174, %224, !dbg !39
  %241 = fmul float %175, %225, !dbg !39
  %242 = icmp sgt i32 %34, 127, !dbg !40
  %243 = and i1 %242, %57, !dbg !41
  %244 = and i1 %242, %58, !dbg !41
  %245 = add i32 %34, -128, !dbg !42
  %246 = add i32 %66, %245, !dbg !43
  %247 = add i32 %68, %245, !dbg !43
  %248 = sext i32 %246 to i64, !dbg !44
  %249 = getelementptr i16, ptr addrspace(1) %0, i64 %248, !dbg !44
  %250 = sext i32 %247 to i64, !dbg !44
  %251 = getelementptr i16, ptr addrspace(1) %0, i64 %250, !dbg !44
  %252 = and i1 %39, %243, !dbg !45
  %253 = and i1 %39, %244, !dbg !45
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %249, i1 %252, i32 0, i1 %252, i32 0, i1 %252, i32 0, i1 %252, i32 0, i1 %252) #2, !dbg !46
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !46
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !46
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !46
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !46
  %259 = trunc i32 %255 to i16, !dbg !46
  %extelt.offset24 = lshr i32 %255, 16, !dbg !46
  %260 = trunc i32 %extelt.offset24 to i16, !dbg !46
  %261 = trunc i32 %256 to i16, !dbg !46
  %extelt.offset25 = lshr i32 %256, 16, !dbg !46
  %262 = trunc i32 %extelt.offset25 to i16, !dbg !46
  %263 = trunc i32 %257 to i16, !dbg !46
  %extelt.offset26 = lshr i32 %257, 16, !dbg !46
  %264 = trunc i32 %extelt.offset26 to i16, !dbg !46
  %265 = trunc i32 %258 to i16, !dbg !46
  %extelt.offset27 = lshr i32 %258, 16, !dbg !46
  %266 = trunc i32 %extelt.offset27 to i16, !dbg !46
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %251, i1 %253, i32 0, i1 %253, i32 0, i1 %253, i32 0, i1 %253, i32 0, i1 %253) #2, !dbg !46
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !46
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !46
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !46
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !46
  %272 = trunc i32 %268 to i16, !dbg !46
  %extelt.offset28 = lshr i32 %268, 16, !dbg !46
  %273 = trunc i32 %extelt.offset28 to i16, !dbg !46
  %274 = trunc i32 %269 to i16, !dbg !46
  %extelt.offset29 = lshr i32 %269, 16, !dbg !46
  %275 = trunc i32 %extelt.offset29 to i16, !dbg !46
  %276 = trunc i32 %270 to i16, !dbg !46
  %extelt.offset30 = lshr i32 %270, 16, !dbg !46
  %277 = trunc i32 %extelt.offset30 to i16, !dbg !46
  %278 = trunc i32 %271 to i16, !dbg !46
  %extelt.offset31 = lshr i32 %271, 16, !dbg !46
  %279 = trunc i32 %extelt.offset31 to i16, !dbg !46
  %280 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %259) #2, !dbg !47
  %281 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %260) #2, !dbg !47
  %282 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %261) #2, !dbg !47
  %283 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %262) #2, !dbg !47
  %284 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %263) #2, !dbg !47
  %285 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %264) #2, !dbg !47
  %286 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #2, !dbg !47
  %287 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #2, !dbg !47
  %288 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %272) #2, !dbg !47
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %273) #2, !dbg !47
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %274) #2, !dbg !47
  %291 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %275) #2, !dbg !47
  %292 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %276) #2, !dbg !47
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %277) #2, !dbg !47
  %294 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %278) #2, !dbg !47
  %295 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %279) #2, !dbg !47
  %296 = add i32 %245, %176, !dbg !48
  %297 = add i32 %245, %177, !dbg !48
  %298 = sext i32 %296 to i64, !dbg !49
  %299 = getelementptr i16, ptr addrspace(1) %2, i64 %298, !dbg !49
  %300 = sext i32 %297 to i64, !dbg !49
  %301 = getelementptr i16, ptr addrspace(1) %2, i64 %300, !dbg !49
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %299, i1 %252, i32 0, i1 %252, i32 0, i1 %252, i32 0, i1 %252, i32 0, i1 %252) #2, !dbg !50
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !50
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !50
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !50
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !50
  %307 = trunc i32 %303 to i16, !dbg !50
  %extelt.offset32 = lshr i32 %303, 16, !dbg !50
  %308 = trunc i32 %extelt.offset32 to i16, !dbg !50
  %309 = trunc i32 %304 to i16, !dbg !50
  %extelt.offset33 = lshr i32 %304, 16, !dbg !50
  %310 = trunc i32 %extelt.offset33 to i16, !dbg !50
  %311 = trunc i32 %305 to i16, !dbg !50
  %extelt.offset34 = lshr i32 %305, 16, !dbg !50
  %312 = trunc i32 %extelt.offset34 to i16, !dbg !50
  %313 = trunc i32 %306 to i16, !dbg !50
  %extelt.offset35 = lshr i32 %306, 16, !dbg !50
  %314 = trunc i32 %extelt.offset35 to i16, !dbg !50
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %301, i1 %253, i32 0, i1 %253, i32 0, i1 %253, i32 0, i1 %253, i32 0, i1 %253) #2, !dbg !50
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !50
  %317 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !50
  %318 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !50
  %319 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !50
  %320 = trunc i32 %316 to i16, !dbg !50
  %extelt.offset36 = lshr i32 %316, 16, !dbg !50
  %321 = trunc i32 %extelt.offset36 to i16, !dbg !50
  %322 = trunc i32 %317 to i16, !dbg !50
  %extelt.offset37 = lshr i32 %317, 16, !dbg !50
  %323 = trunc i32 %extelt.offset37 to i16, !dbg !50
  %324 = trunc i32 %318 to i16, !dbg !50
  %extelt.offset38 = lshr i32 %318, 16, !dbg !50
  %325 = trunc i32 %extelt.offset38 to i16, !dbg !50
  %326 = trunc i32 %319 to i16, !dbg !50
  %extelt.offset39 = lshr i32 %319, 16, !dbg !50
  %327 = trunc i32 %extelt.offset39 to i16, !dbg !50
  %328 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %307) #2, !dbg !51
  %329 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %308) #2, !dbg !51
  %330 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %309) #2, !dbg !51
  %331 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %310) #2, !dbg !51
  %332 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %311) #2, !dbg !51
  %333 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %312) #2, !dbg !51
  %334 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %313) #2, !dbg !51
  %335 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %314) #2, !dbg !51
  %336 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %320) #2, !dbg !51
  %337 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %321) #2, !dbg !51
  %338 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %322) #2, !dbg !51
  %339 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %323) #2, !dbg !51
  %340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %324) #2, !dbg !51
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %325) #2, !dbg !51
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %326) #2, !dbg !51
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %327) #2, !dbg !51
  %344 = fmul float %280, %328, !dbg !52
  %345 = fmul float %281, %329, !dbg !52
  %346 = fmul float %282, %330, !dbg !52
  %347 = fmul float %283, %331, !dbg !52
  %348 = fmul float %284, %332, !dbg !52
  %349 = fmul float %285, %333, !dbg !52
  %350 = fmul float %286, %334, !dbg !52
  %351 = fmul float %287, %335, !dbg !52
  %352 = fmul float %288, %336, !dbg !52
  %353 = fmul float %289, %337, !dbg !52
  %354 = fmul float %290, %338, !dbg !52
  %355 = fmul float %291, %339, !dbg !52
  %356 = fmul float %292, %340, !dbg !52
  %357 = fmul float %293, %341, !dbg !52
  %358 = fmul float %294, %342, !dbg !52
  %359 = fmul float %295, %343, !dbg !52
  %360 = fsub float 0.000000e+00, %344, !dbg !53
  %361 = fsub float 0.000000e+00, %345, !dbg !53
  %362 = fsub float 0.000000e+00, %346, !dbg !53
  %363 = fsub float 0.000000e+00, %347, !dbg !53
  %364 = fsub float 0.000000e+00, %348, !dbg !53
  %365 = fsub float 0.000000e+00, %349, !dbg !53
  %366 = fsub float 0.000000e+00, %350, !dbg !53
  %367 = fsub float 0.000000e+00, %351, !dbg !53
  %368 = fsub float 0.000000e+00, %352, !dbg !53
  %369 = fsub float 0.000000e+00, %353, !dbg !53
  %370 = fsub float 0.000000e+00, %354, !dbg !53
  %371 = fsub float 0.000000e+00, %355, !dbg !53
  %372 = fsub float 0.000000e+00, %356, !dbg !53
  %373 = fsub float 0.000000e+00, %357, !dbg !53
  %374 = fsub float 0.000000e+00, %358, !dbg !53
  %375 = fsub float 0.000000e+00, %359, !dbg !53
  %376 = select i1 %243, float %360, float 0.000000e+00, !dbg !30
  %377 = select i1 %243, float %361, float 0.000000e+00, !dbg !30
  %378 = select i1 %243, float %362, float 0.000000e+00, !dbg !30
  %379 = select i1 %243, float %363, float 0.000000e+00, !dbg !30
  %380 = select i1 %243, float %364, float 0.000000e+00, !dbg !30
  %381 = select i1 %243, float %365, float 0.000000e+00, !dbg !30
  %382 = select i1 %243, float %366, float 0.000000e+00, !dbg !30
  %383 = select i1 %243, float %367, float 0.000000e+00, !dbg !30
  %384 = select i1 %244, float %368, float 0.000000e+00, !dbg !30
  %385 = select i1 %244, float %369, float 0.000000e+00, !dbg !30
  %386 = select i1 %244, float %370, float 0.000000e+00, !dbg !30
  %387 = select i1 %244, float %371, float 0.000000e+00, !dbg !30
  %388 = select i1 %244, float %372, float 0.000000e+00, !dbg !30
  %389 = select i1 %244, float %373, float 0.000000e+00, !dbg !30
  %390 = select i1 %244, float %374, float 0.000000e+00, !dbg !30
  %391 = select i1 %244, float %375, float 0.000000e+00, !dbg !30
  %392 = fadd float %226, %376, !dbg !54
  %393 = fadd float %227, %377, !dbg !54
  %394 = fadd float %228, %378, !dbg !54
  %395 = fadd float %229, %379, !dbg !54
  %396 = fadd float %230, %380, !dbg !54
  %397 = fadd float %231, %381, !dbg !54
  %398 = fadd float %232, %382, !dbg !54
  %399 = fadd float %233, %383, !dbg !54
  %400 = fadd float %234, %384, !dbg !54
  %401 = fadd float %235, %385, !dbg !54
  %402 = fadd float %236, %386, !dbg !54
  %403 = fadd float %237, %387, !dbg !54
  %404 = fadd float %238, %388, !dbg !54
  %405 = fadd float %239, %389, !dbg !54
  %406 = fadd float %240, %390, !dbg !54
  %407 = fadd float %241, %391, !dbg !54
  %408 = icmp slt i32 %34, 128, !dbg !55
  %409 = and i1 %408, %57, !dbg !56
  %410 = and i1 %408, %58, !dbg !56
  %411 = add i32 %34, 128, !dbg !57
  %412 = add i32 %66, %411, !dbg !58
  %413 = add i32 %68, %411, !dbg !58
  %414 = sext i32 %412 to i64, !dbg !59
  %415 = getelementptr i16, ptr addrspace(1) %0, i64 %414, !dbg !59
  %416 = sext i32 %413 to i64, !dbg !59
  %417 = getelementptr i16, ptr addrspace(1) %0, i64 %416, !dbg !59
  %418 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %415, i1 %409, i32 0, i1 %409, i32 0, i1 %409, i32 0, i1 %409, i32 0, i1 %409) #2, !dbg !60
  %419 = extractvalue { i32, i32, i32, i32 } %418, 0, !dbg !60
  %420 = extractvalue { i32, i32, i32, i32 } %418, 1, !dbg !60
  %421 = extractvalue { i32, i32, i32, i32 } %418, 2, !dbg !60
  %422 = extractvalue { i32, i32, i32, i32 } %418, 3, !dbg !60
  %423 = trunc i32 %419 to i16, !dbg !60
  %extelt.offset40 = lshr i32 %419, 16, !dbg !60
  %424 = trunc i32 %extelt.offset40 to i16, !dbg !60
  %425 = trunc i32 %420 to i16, !dbg !60
  %extelt.offset41 = lshr i32 %420, 16, !dbg !60
  %426 = trunc i32 %extelt.offset41 to i16, !dbg !60
  %427 = trunc i32 %421 to i16, !dbg !60
  %extelt.offset42 = lshr i32 %421, 16, !dbg !60
  %428 = trunc i32 %extelt.offset42 to i16, !dbg !60
  %429 = trunc i32 %422 to i16, !dbg !60
  %extelt.offset43 = lshr i32 %422, 16, !dbg !60
  %430 = trunc i32 %extelt.offset43 to i16, !dbg !60
  %431 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %417, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410) #2, !dbg !60
  %432 = extractvalue { i32, i32, i32, i32 } %431, 0, !dbg !60
  %433 = extractvalue { i32, i32, i32, i32 } %431, 1, !dbg !60
  %434 = extractvalue { i32, i32, i32, i32 } %431, 2, !dbg !60
  %435 = extractvalue { i32, i32, i32, i32 } %431, 3, !dbg !60
  %436 = trunc i32 %432 to i16, !dbg !60
  %extelt.offset44 = lshr i32 %432, 16, !dbg !60
  %437 = trunc i32 %extelt.offset44 to i16, !dbg !60
  %438 = trunc i32 %433 to i16, !dbg !60
  %extelt.offset45 = lshr i32 %433, 16, !dbg !60
  %439 = trunc i32 %extelt.offset45 to i16, !dbg !60
  %440 = trunc i32 %434 to i16, !dbg !60
  %extelt.offset46 = lshr i32 %434, 16, !dbg !60
  %441 = trunc i32 %extelt.offset46 to i16, !dbg !60
  %442 = trunc i32 %435 to i16, !dbg !60
  %extelt.offset47 = lshr i32 %435, 16, !dbg !60
  %443 = trunc i32 %extelt.offset47 to i16, !dbg !60
  %444 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #2, !dbg !61
  %445 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #2, !dbg !61
  %446 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #2, !dbg !61
  %447 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #2, !dbg !61
  %448 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %427) #2, !dbg !61
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %428) #2, !dbg !61
  %450 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %429) #2, !dbg !61
  %451 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #2, !dbg !61
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #2, !dbg !61
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #2, !dbg !61
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #2, !dbg !61
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %439) #2, !dbg !61
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %440) #2, !dbg !61
  %457 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %441) #2, !dbg !61
  %458 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #2, !dbg !61
  %459 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #2, !dbg !61
  %460 = add i32 %411, %176, !dbg !62
  %461 = add i32 %411, %177, !dbg !62
  %462 = sext i32 %460 to i64, !dbg !63
  %463 = getelementptr i16, ptr addrspace(1) %2, i64 %462, !dbg !63
  %464 = sext i32 %461 to i64, !dbg !63
  %465 = getelementptr i16, ptr addrspace(1) %2, i64 %464, !dbg !63
  %466 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %463, i1 %409, i32 0, i1 %409, i32 0, i1 %409, i32 0, i1 %409, i32 0, i1 %409) #2, !dbg !64
  %467 = extractvalue { i32, i32, i32, i32 } %466, 0, !dbg !64
  %468 = extractvalue { i32, i32, i32, i32 } %466, 1, !dbg !64
  %469 = extractvalue { i32, i32, i32, i32 } %466, 2, !dbg !64
  %470 = extractvalue { i32, i32, i32, i32 } %466, 3, !dbg !64
  %471 = trunc i32 %467 to i16, !dbg !64
  %extelt.offset48 = lshr i32 %467, 16, !dbg !64
  %472 = trunc i32 %extelt.offset48 to i16, !dbg !64
  %473 = trunc i32 %468 to i16, !dbg !64
  %extelt.offset49 = lshr i32 %468, 16, !dbg !64
  %474 = trunc i32 %extelt.offset49 to i16, !dbg !64
  %475 = trunc i32 %469 to i16, !dbg !64
  %extelt.offset50 = lshr i32 %469, 16, !dbg !64
  %476 = trunc i32 %extelt.offset50 to i16, !dbg !64
  %477 = trunc i32 %470 to i16, !dbg !64
  %extelt.offset51 = lshr i32 %470, 16, !dbg !64
  %478 = trunc i32 %extelt.offset51 to i16, !dbg !64
  %479 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %465, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410) #2, !dbg !64
  %480 = extractvalue { i32, i32, i32, i32 } %479, 0, !dbg !64
  %481 = extractvalue { i32, i32, i32, i32 } %479, 1, !dbg !64
  %482 = extractvalue { i32, i32, i32, i32 } %479, 2, !dbg !64
  %483 = extractvalue { i32, i32, i32, i32 } %479, 3, !dbg !64
  %484 = trunc i32 %480 to i16, !dbg !64
  %extelt.offset52 = lshr i32 %480, 16, !dbg !64
  %485 = trunc i32 %extelt.offset52 to i16, !dbg !64
  %486 = trunc i32 %481 to i16, !dbg !64
  %extelt.offset53 = lshr i32 %481, 16, !dbg !64
  %487 = trunc i32 %extelt.offset53 to i16, !dbg !64
  %488 = trunc i32 %482 to i16, !dbg !64
  %extelt.offset54 = lshr i32 %482, 16, !dbg !64
  %489 = trunc i32 %extelt.offset54 to i16, !dbg !64
  %490 = trunc i32 %483 to i16, !dbg !64
  %extelt.offset55 = lshr i32 %483, 16, !dbg !64
  %491 = trunc i32 %extelt.offset55 to i16, !dbg !64
  %492 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %471) #2, !dbg !65
  %493 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %472) #2, !dbg !65
  %494 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %473) #2, !dbg !65
  %495 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %474) #2, !dbg !65
  %496 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %475) #2, !dbg !65
  %497 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %476) #2, !dbg !65
  %498 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %477) #2, !dbg !65
  %499 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %478) #2, !dbg !65
  %500 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #2, !dbg !65
  %501 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #2, !dbg !65
  %502 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #2, !dbg !65
  %503 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #2, !dbg !65
  %504 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %488) #2, !dbg !65
  %505 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %489) #2, !dbg !65
  %506 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %490) #2, !dbg !65
  %507 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %491) #2, !dbg !65
  %508 = fmul float %444, %492, !dbg !66
  %509 = fmul float %445, %493, !dbg !66
  %510 = fmul float %446, %494, !dbg !66
  %511 = fmul float %447, %495, !dbg !66
  %512 = fmul float %448, %496, !dbg !66
  %513 = fmul float %449, %497, !dbg !66
  %514 = fmul float %450, %498, !dbg !66
  %515 = fmul float %451, %499, !dbg !66
  %516 = fmul float %452, %500, !dbg !66
  %517 = fmul float %453, %501, !dbg !66
  %518 = fmul float %454, %502, !dbg !66
  %519 = fmul float %455, %503, !dbg !66
  %520 = fmul float %456, %504, !dbg !66
  %521 = fmul float %457, %505, !dbg !66
  %522 = fmul float %458, %506, !dbg !66
  %523 = fmul float %459, %507, !dbg !66
  %524 = select i1 %409, float %508, float 0.000000e+00, !dbg !30
  %525 = select i1 %409, float %509, float 0.000000e+00, !dbg !30
  %526 = select i1 %409, float %510, float 0.000000e+00, !dbg !30
  %527 = select i1 %409, float %511, float 0.000000e+00, !dbg !30
  %528 = select i1 %409, float %512, float 0.000000e+00, !dbg !30
  %529 = select i1 %409, float %513, float 0.000000e+00, !dbg !30
  %530 = select i1 %409, float %514, float 0.000000e+00, !dbg !30
  %531 = select i1 %409, float %515, float 0.000000e+00, !dbg !30
  %532 = select i1 %410, float %516, float 0.000000e+00, !dbg !30
  %533 = select i1 %410, float %517, float 0.000000e+00, !dbg !30
  %534 = select i1 %410, float %518, float 0.000000e+00, !dbg !30
  %535 = select i1 %410, float %519, float 0.000000e+00, !dbg !30
  %536 = select i1 %410, float %520, float 0.000000e+00, !dbg !30
  %537 = select i1 %410, float %521, float 0.000000e+00, !dbg !30
  %538 = select i1 %410, float %522, float 0.000000e+00, !dbg !30
  %539 = select i1 %410, float %523, float 0.000000e+00, !dbg !30
  %540 = fadd float %392, %524, !dbg !67
  %541 = fadd float %393, %525, !dbg !67
  %542 = fadd float %394, %526, !dbg !67
  %543 = fadd float %395, %527, !dbg !67
  %544 = fadd float %396, %528, !dbg !67
  %545 = fadd float %397, %529, !dbg !67
  %546 = fadd float %398, %530, !dbg !67
  %547 = fadd float %399, %531, !dbg !67
  %548 = fadd float %400, %532, !dbg !67
  %549 = fadd float %401, %533, !dbg !67
  %550 = fadd float %402, %534, !dbg !67
  %551 = fadd float %403, %535, !dbg !67
  %552 = fadd float %404, %536, !dbg !67
  %553 = fadd float %405, %537, !dbg !67
  %554 = fadd float %406, %538, !dbg !67
  %555 = fadd float %407, %539, !dbg !67
  %556 = fadd float %116, %540, !dbg !68
  %557 = fadd float %117, %541, !dbg !68
  %558 = fadd float %118, %542, !dbg !68
  %559 = fadd float %119, %543, !dbg !68
  %560 = fadd float %120, %544, !dbg !68
  %561 = fadd float %121, %545, !dbg !68
  %562 = fadd float %122, %546, !dbg !68
  %563 = fadd float %123, %547, !dbg !68
  %564 = fadd float %124, %548, !dbg !68
  %565 = fadd float %125, %549, !dbg !68
  %566 = fadd float %126, %550, !dbg !68
  %567 = fadd float %127, %551, !dbg !68
  %568 = fadd float %128, %552, !dbg !68
  %569 = fadd float %129, %553, !dbg !68
  %570 = fadd float %130, %554, !dbg !68
  %571 = fadd float %131, %555, !dbg !68
  %572 = icmp eq i32 %47, 2, !dbg !69
  %573 = icmp eq i32 %48, 2, !dbg !69
  %574 = and i32 %46, -2147483645, !dbg !69
  %575 = icmp eq i32 %574, 2, !dbg !69
  %576 = shl i32 %35, 9, !dbg !70
  %577 = shl i32 %36, 9, !dbg !70
  %578 = shl i32 %37, 9, !dbg !70
  %579 = shl i32 %38, 9, !dbg !70
  %580 = shl i32 %51, 17, !dbg !71
  %581 = add i32 %580, %.decomposed79, !dbg !72
  %582 = add i32 %581, %576, !dbg !73
  %583 = add i32 %581, %577, !dbg !73
  %584 = add i32 %581, %578, !dbg !73
  %585 = add i32 %581, %579, !dbg !73
  %586 = sext i32 %582 to i64, !dbg !74
  %587 = getelementptr float, ptr addrspace(1) %3, i64 %586, !dbg !74
  %588 = sext i32 %583 to i64, !dbg !74
  %589 = getelementptr float, ptr addrspace(1) %3, i64 %588, !dbg !74
  %590 = sext i32 %584 to i64, !dbg !74
  %591 = getelementptr float, ptr addrspace(1) %3, i64 %590, !dbg !74
  %592 = sext i32 %585 to i64, !dbg !74
  %593 = getelementptr float, ptr addrspace(1) %3, i64 %592, !dbg !74
  %594 = and i1 %40, %575, !dbg !75
  %595 = and i1 %41, %575, !dbg !75
  %596 = and i1 %42, %575, !dbg !75
  %597 = and i1 %43, %575, !dbg !75
  %598 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %587, i1 %594, i32 0, i1 %594, i32 0, i1 %594, i32 0, i1 %594, i32 0, i1 %594) #2, !dbg !76
  %599 = extractvalue { i32, i32, i32, i32 } %598, 0, !dbg !76
  %600 = extractvalue { i32, i32, i32, i32 } %598, 1, !dbg !76
  %601 = extractvalue { i32, i32, i32, i32 } %598, 2, !dbg !76
  %602 = extractvalue { i32, i32, i32, i32 } %598, 3, !dbg !76
  %603 = bitcast i32 %599 to float, !dbg !76
  %604 = bitcast i32 %600 to float, !dbg !76
  %605 = bitcast i32 %601 to float, !dbg !76
  %606 = bitcast i32 %602 to float, !dbg !76
  %607 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %589, i1 %595, i32 0, i1 %595, i32 0, i1 %595, i32 0, i1 %595, i32 0, i1 %595) #2, !dbg !76
  %608 = extractvalue { i32, i32, i32, i32 } %607, 0, !dbg !76
  %609 = extractvalue { i32, i32, i32, i32 } %607, 1, !dbg !76
  %610 = extractvalue { i32, i32, i32, i32 } %607, 2, !dbg !76
  %611 = extractvalue { i32, i32, i32, i32 } %607, 3, !dbg !76
  %612 = bitcast i32 %608 to float, !dbg !76
  %613 = bitcast i32 %609 to float, !dbg !76
  %614 = bitcast i32 %610 to float, !dbg !76
  %615 = bitcast i32 %611 to float, !dbg !76
  %616 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %591, i1 %596, i32 0, i1 %596, i32 0, i1 %596, i32 0, i1 %596, i32 0, i1 %596) #2, !dbg !76
  %617 = extractvalue { i32, i32, i32, i32 } %616, 0, !dbg !76
  %618 = extractvalue { i32, i32, i32, i32 } %616, 1, !dbg !76
  %619 = extractvalue { i32, i32, i32, i32 } %616, 2, !dbg !76
  %620 = extractvalue { i32, i32, i32, i32 } %616, 3, !dbg !76
  %621 = bitcast i32 %617 to float, !dbg !76
  %622 = bitcast i32 %618 to float, !dbg !76
  %623 = bitcast i32 %619 to float, !dbg !76
  %624 = bitcast i32 %620 to float, !dbg !76
  %625 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %593, i1 %597, i32 0, i1 %597, i32 0, i1 %597, i32 0, i1 %597, i32 0, i1 %597) #2, !dbg !76
  %626 = extractvalue { i32, i32, i32, i32 } %625, 0, !dbg !76
  %627 = extractvalue { i32, i32, i32, i32 } %625, 1, !dbg !76
  %628 = extractvalue { i32, i32, i32, i32 } %625, 2, !dbg !76
  %629 = extractvalue { i32, i32, i32, i32 } %625, 3, !dbg !76
  %630 = bitcast i32 %626 to float, !dbg !76
  %631 = bitcast i32 %627 to float, !dbg !76
  %632 = bitcast i32 %628 to float, !dbg !76
  %633 = bitcast i32 %629 to float, !dbg !76
  %634 = select i1 %575, float %603, float 0.000000e+00, !dbg !77
  %635 = select i1 %575, float %604, float 0.000000e+00, !dbg !77
  %636 = select i1 %575, float %605, float 0.000000e+00, !dbg !77
  %637 = select i1 %575, float %606, float 0.000000e+00, !dbg !77
  %638 = select i1 %575, float %612, float 0.000000e+00, !dbg !77
  %639 = select i1 %575, float %613, float 0.000000e+00, !dbg !77
  %640 = select i1 %575, float %614, float 0.000000e+00, !dbg !77
  %641 = select i1 %575, float %615, float 0.000000e+00, !dbg !77
  %642 = select i1 %575, float %621, float 0.000000e+00, !dbg !77
  %643 = select i1 %575, float %622, float 0.000000e+00, !dbg !77
  %644 = select i1 %575, float %623, float 0.000000e+00, !dbg !77
  %645 = select i1 %575, float %624, float 0.000000e+00, !dbg !77
  %646 = select i1 %575, float %630, float 0.000000e+00, !dbg !77
  %647 = select i1 %575, float %631, float 0.000000e+00, !dbg !77
  %648 = select i1 %575, float %632, float 0.000000e+00, !dbg !77
  %649 = select i1 %575, float %633, float 0.000000e+00, !dbg !77
  %650 = mul nuw nsw i32 %18, 65, !dbg !77
  %651 = add nuw nsw i32 %23, %650, !dbg !77
  %652 = zext nneg i32 %651 to i64, !dbg !77
  %653 = getelementptr float, ptr addrspace(3) @global_smem, i64 %652, !dbg !77
  %654 = insertelement <1 x float> undef, float %634, i64 0, !dbg !77
  store <1 x float> %654, ptr addrspace(3) %653, align 4, !dbg !77
  %655 = add nuw nsw i32 %650, 65, !dbg !77
  %656 = add nuw nsw i32 %655, %23, !dbg !77
  %657 = zext nneg i32 %656 to i64, !dbg !77
  %658 = getelementptr float, ptr addrspace(3) @global_smem, i64 %657, !dbg !77
  %659 = insertelement <1 x float> undef, float %635, i64 0, !dbg !77
  store <1 x float> %659, ptr addrspace(3) %658, align 4, !dbg !77
  %660 = add nuw nsw i32 %650, 130, !dbg !77
  %661 = add nuw nsw i32 %660, %23, !dbg !77
  %662 = zext nneg i32 %661 to i64, !dbg !77
  %663 = getelementptr float, ptr addrspace(3) @global_smem, i64 %662, !dbg !77
  %664 = insertelement <1 x float> undef, float %636, i64 0, !dbg !77
  store <1 x float> %664, ptr addrspace(3) %663, align 4, !dbg !77
  %665 = add nuw nsw i32 %650, 195, !dbg !77
  %666 = add nuw nsw i32 %665, %23, !dbg !77
  %667 = zext nneg i32 %666 to i64, !dbg !77
  %668 = getelementptr float, ptr addrspace(3) @global_smem, i64 %667, !dbg !77
  %669 = insertelement <1 x float> undef, float %637, i64 0, !dbg !77
  store <1 x float> %669, ptr addrspace(3) %668, align 4, !dbg !77
  %670 = add nuw nsw i32 %24, %650, !dbg !77
  %671 = zext nneg i32 %670 to i64, !dbg !77
  %672 = getelementptr float, ptr addrspace(3) @global_smem, i64 %671, !dbg !77
  %673 = insertelement <1 x float> undef, float %638, i64 0, !dbg !77
  store <1 x float> %673, ptr addrspace(3) %672, align 4, !dbg !77
  %674 = add nuw nsw i32 %24, %655, !dbg !77
  %675 = zext nneg i32 %674 to i64, !dbg !77
  %676 = getelementptr float, ptr addrspace(3) @global_smem, i64 %675, !dbg !77
  %677 = insertelement <1 x float> undef, float %639, i64 0, !dbg !77
  store <1 x float> %677, ptr addrspace(3) %676, align 4, !dbg !77
  %678 = add nuw nsw i32 %24, %660, !dbg !77
  %679 = zext nneg i32 %678 to i64, !dbg !77
  %680 = getelementptr float, ptr addrspace(3) @global_smem, i64 %679, !dbg !77
  %681 = insertelement <1 x float> undef, float %640, i64 0, !dbg !77
  store <1 x float> %681, ptr addrspace(3) %680, align 4, !dbg !77
  %682 = add nuw nsw i32 %24, %665, !dbg !77
  %683 = zext nneg i32 %682 to i64, !dbg !77
  %684 = getelementptr float, ptr addrspace(3) @global_smem, i64 %683, !dbg !77
  %685 = insertelement <1 x float> undef, float %641, i64 0, !dbg !77
  store <1 x float> %685, ptr addrspace(3) %684, align 4, !dbg !77
  %686 = add nuw nsw i32 %25, %650, !dbg !77
  %687 = zext nneg i32 %686 to i64, !dbg !77
  %688 = getelementptr float, ptr addrspace(3) @global_smem, i64 %687, !dbg !77
  %689 = insertelement <1 x float> undef, float %642, i64 0, !dbg !77
  store <1 x float> %689, ptr addrspace(3) %688, align 4, !dbg !77
  %690 = add nuw nsw i32 %25, %655, !dbg !77
  %691 = zext nneg i32 %690 to i64, !dbg !77
  %692 = getelementptr float, ptr addrspace(3) @global_smem, i64 %691, !dbg !77
  %693 = insertelement <1 x float> undef, float %643, i64 0, !dbg !77
  store <1 x float> %693, ptr addrspace(3) %692, align 4, !dbg !77
  %694 = add nuw nsw i32 %25, %660, !dbg !77
  %695 = zext nneg i32 %694 to i64, !dbg !77
  %696 = getelementptr float, ptr addrspace(3) @global_smem, i64 %695, !dbg !77
  %697 = insertelement <1 x float> undef, float %644, i64 0, !dbg !77
  store <1 x float> %697, ptr addrspace(3) %696, align 4, !dbg !77
  %698 = add nuw nsw i32 %25, %665, !dbg !77
  %699 = zext nneg i32 %698 to i64, !dbg !77
  %700 = getelementptr float, ptr addrspace(3) @global_smem, i64 %699, !dbg !77
  %701 = insertelement <1 x float> undef, float %645, i64 0, !dbg !77
  store <1 x float> %701, ptr addrspace(3) %700, align 4, !dbg !77
  %702 = add nuw nsw i32 %26, %650, !dbg !77
  %703 = zext nneg i32 %702 to i64, !dbg !77
  %704 = getelementptr float, ptr addrspace(3) @global_smem, i64 %703, !dbg !77
  %705 = insertelement <1 x float> undef, float %646, i64 0, !dbg !77
  store <1 x float> %705, ptr addrspace(3) %704, align 4, !dbg !77
  %706 = add nuw nsw i32 %26, %655, !dbg !77
  %707 = zext nneg i32 %706 to i64, !dbg !77
  %708 = getelementptr float, ptr addrspace(3) @global_smem, i64 %707, !dbg !77
  %709 = insertelement <1 x float> undef, float %647, i64 0, !dbg !77
  store <1 x float> %709, ptr addrspace(3) %708, align 4, !dbg !77
  %710 = add nuw nsw i32 %26, %660, !dbg !77
  %711 = zext nneg i32 %710 to i64, !dbg !77
  %712 = getelementptr float, ptr addrspace(3) @global_smem, i64 %711, !dbg !77
  %713 = insertelement <1 x float> undef, float %648, i64 0, !dbg !77
  store <1 x float> %713, ptr addrspace(3) %712, align 4, !dbg !77
  %714 = add nuw nsw i32 %26, %665, !dbg !77
  %715 = zext nneg i32 %714 to i64, !dbg !77
  %716 = getelementptr float, ptr addrspace(3) @global_smem, i64 %715, !dbg !77
  %717 = insertelement <1 x float> undef, float %649, i64 0, !dbg !77
  store <1 x float> %717, ptr addrspace(3) %716, align 4, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %718 = mul nuw nsw i32 %15, 65, !dbg !77
  %719 = add nuw nsw i32 %718, %20, !dbg !77
  %720 = zext nneg i32 %719 to i64, !dbg !77
  %721 = getelementptr float, ptr addrspace(3) @global_smem, i64 %720, !dbg !77
  %722 = load float, ptr addrspace(3) %721, align 4, !dbg !77
  %723 = or i32 %20, 1, !dbg !77
  %724 = add nuw nsw i32 %718, %723, !dbg !77
  %725 = zext nneg i32 %724 to i64, !dbg !77
  %726 = getelementptr float, ptr addrspace(3) @global_smem, i64 %725, !dbg !77
  %727 = load float, ptr addrspace(3) %726, align 4, !dbg !77
  %728 = or i32 %20, 2, !dbg !77
  %729 = add nuw nsw i32 %718, %728, !dbg !77
  %730 = zext nneg i32 %729 to i64, !dbg !77
  %731 = getelementptr float, ptr addrspace(3) @global_smem, i64 %730, !dbg !77
  %732 = load float, ptr addrspace(3) %731, align 4, !dbg !77
  %733 = or i32 %20, 3, !dbg !77
  %734 = add nuw nsw i32 %718, %733, !dbg !77
  %735 = zext nneg i32 %734 to i64, !dbg !77
  %736 = getelementptr float, ptr addrspace(3) @global_smem, i64 %735, !dbg !77
  %737 = load float, ptr addrspace(3) %736, align 4, !dbg !77
  %738 = or i32 %20, 4, !dbg !77
  %739 = add nuw nsw i32 %718, %738, !dbg !77
  %740 = zext nneg i32 %739 to i64, !dbg !77
  %741 = getelementptr float, ptr addrspace(3) @global_smem, i64 %740, !dbg !77
  %742 = load float, ptr addrspace(3) %741, align 4, !dbg !77
  %743 = or i32 %20, 5, !dbg !77
  %744 = add nuw nsw i32 %718, %743, !dbg !77
  %745 = zext nneg i32 %744 to i64, !dbg !77
  %746 = getelementptr float, ptr addrspace(3) @global_smem, i64 %745, !dbg !77
  %747 = load float, ptr addrspace(3) %746, align 4, !dbg !77
  %748 = or i32 %20, 6, !dbg !77
  %749 = add nuw nsw i32 %718, %748, !dbg !77
  %750 = zext nneg i32 %749 to i64, !dbg !77
  %751 = getelementptr float, ptr addrspace(3) @global_smem, i64 %750, !dbg !77
  %752 = load float, ptr addrspace(3) %751, align 4, !dbg !77
  %753 = or i32 %20, 7, !dbg !77
  %754 = add nuw nsw i32 %718, %753, !dbg !77
  %755 = zext nneg i32 %754 to i64, !dbg !77
  %756 = getelementptr float, ptr addrspace(3) @global_smem, i64 %755, !dbg !77
  %757 = load float, ptr addrspace(3) %756, align 4, !dbg !77
  %758 = mul nuw nsw i32 %16, 65, !dbg !77
  %759 = add nuw nsw i32 %758, %20, !dbg !77
  %760 = zext nneg i32 %759 to i64, !dbg !77
  %761 = getelementptr float, ptr addrspace(3) @global_smem, i64 %760, !dbg !77
  %762 = load float, ptr addrspace(3) %761, align 4, !dbg !77
  %763 = add nuw nsw i32 %758, %723, !dbg !77
  %764 = zext nneg i32 %763 to i64, !dbg !77
  %765 = getelementptr float, ptr addrspace(3) @global_smem, i64 %764, !dbg !77
  %766 = load float, ptr addrspace(3) %765, align 4, !dbg !77
  %767 = add nuw nsw i32 %758, %728, !dbg !77
  %768 = zext nneg i32 %767 to i64, !dbg !77
  %769 = getelementptr float, ptr addrspace(3) @global_smem, i64 %768, !dbg !77
  %770 = load float, ptr addrspace(3) %769, align 4, !dbg !77
  %771 = add nuw nsw i32 %758, %733, !dbg !77
  %772 = zext nneg i32 %771 to i64, !dbg !77
  %773 = getelementptr float, ptr addrspace(3) @global_smem, i64 %772, !dbg !77
  %774 = load float, ptr addrspace(3) %773, align 4, !dbg !77
  %775 = add nuw nsw i32 %758, %738, !dbg !77
  %776 = zext nneg i32 %775 to i64, !dbg !77
  %777 = getelementptr float, ptr addrspace(3) @global_smem, i64 %776, !dbg !77
  %778 = load float, ptr addrspace(3) %777, align 4, !dbg !77
  %779 = add nuw nsw i32 %758, %743, !dbg !77
  %780 = zext nneg i32 %779 to i64, !dbg !77
  %781 = getelementptr float, ptr addrspace(3) @global_smem, i64 %780, !dbg !77
  %782 = load float, ptr addrspace(3) %781, align 4, !dbg !77
  %783 = add nuw nsw i32 %758, %748, !dbg !77
  %784 = zext nneg i32 %783 to i64, !dbg !77
  %785 = getelementptr float, ptr addrspace(3) @global_smem, i64 %784, !dbg !77
  %786 = load float, ptr addrspace(3) %785, align 4, !dbg !77
  %787 = add nuw nsw i32 %758, %753, !dbg !77
  %788 = zext nneg i32 %787 to i64, !dbg !77
  %789 = getelementptr float, ptr addrspace(3) @global_smem, i64 %788, !dbg !77
  %790 = load float, ptr addrspace(3) %789, align 4, !dbg !77
  %791 = icmp sgt i32 %47, 2, !dbg !78
  %792 = icmp sgt i32 %48, 2, !dbg !78
  %793 = add i32 %178, %64, !dbg !79
  %794 = add i32 %179, %65, !dbg !79
  %795 = sext i32 %793 to i64, !dbg !80
  %796 = getelementptr i16, ptr addrspace(1) %4, i64 %795, !dbg !80
  %797 = sext i32 %794 to i64, !dbg !80
  %798 = getelementptr i16, ptr addrspace(1) %4, i64 %797, !dbg !80
  %799 = and i1 %39, %791, !dbg !81
  %800 = and i1 %39, %792, !dbg !81
  %801 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %796, i1 %799, i32 0, i1 %799, i32 0, i1 %799, i32 0, i1 %799, i32 0, i1 %799) #2, !dbg !82
  %802 = extractvalue { i32, i32, i32, i32 } %801, 0, !dbg !82
  %803 = extractvalue { i32, i32, i32, i32 } %801, 1, !dbg !82
  %804 = extractvalue { i32, i32, i32, i32 } %801, 2, !dbg !82
  %805 = extractvalue { i32, i32, i32, i32 } %801, 3, !dbg !82
  %806 = trunc i32 %802 to i16, !dbg !82
  %extelt.offset56 = lshr i32 %802, 16, !dbg !82
  %807 = trunc i32 %extelt.offset56 to i16, !dbg !82
  %808 = trunc i32 %803 to i16, !dbg !82
  %extelt.offset57 = lshr i32 %803, 16, !dbg !82
  %809 = trunc i32 %extelt.offset57 to i16, !dbg !82
  %810 = trunc i32 %804 to i16, !dbg !82
  %extelt.offset58 = lshr i32 %804, 16, !dbg !82
  %811 = trunc i32 %extelt.offset58 to i16, !dbg !82
  %812 = trunc i32 %805 to i16, !dbg !82
  %extelt.offset59 = lshr i32 %805, 16, !dbg !82
  %813 = trunc i32 %extelt.offset59 to i16, !dbg !82
  %814 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %798, i1 %800, i32 0, i1 %800, i32 0, i1 %800, i32 0, i1 %800, i32 0, i1 %800) #2, !dbg !82
  %815 = extractvalue { i32, i32, i32, i32 } %814, 0, !dbg !82
  %816 = extractvalue { i32, i32, i32, i32 } %814, 1, !dbg !82
  %817 = extractvalue { i32, i32, i32, i32 } %814, 2, !dbg !82
  %818 = extractvalue { i32, i32, i32, i32 } %814, 3, !dbg !82
  %819 = trunc i32 %815 to i16, !dbg !82
  %extelt.offset60 = lshr i32 %815, 16, !dbg !82
  %820 = trunc i32 %extelt.offset60 to i16, !dbg !82
  %821 = trunc i32 %816 to i16, !dbg !82
  %extelt.offset61 = lshr i32 %816, 16, !dbg !82
  %822 = trunc i32 %extelt.offset61 to i16, !dbg !82
  %823 = trunc i32 %817 to i16, !dbg !82
  %extelt.offset62 = lshr i32 %817, 16, !dbg !82
  %824 = trunc i32 %extelt.offset62 to i16, !dbg !82
  %825 = trunc i32 %818 to i16, !dbg !82
  %extelt.offset63 = lshr i32 %818, 16, !dbg !82
  %826 = trunc i32 %extelt.offset63 to i16, !dbg !82
  %827 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %806) #2, !dbg !83
  %828 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %807) #2, !dbg !83
  %829 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %808) #2, !dbg !83
  %830 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %809) #2, !dbg !83
  %831 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %810) #2, !dbg !83
  %832 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %811) #2, !dbg !83
  %833 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %812) #2, !dbg !83
  %834 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %813) #2, !dbg !83
  %835 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %819) #2, !dbg !83
  %836 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %820) #2, !dbg !83
  %837 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %821) #2, !dbg !83
  %838 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %822) #2, !dbg !83
  %839 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %823) #2, !dbg !83
  %840 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %824) #2, !dbg !83
  %841 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %825) #2, !dbg !83
  %842 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %826) #2, !dbg !83
  %843 = add i32 %34, 131072, !dbg !84
  %844 = add i32 %843, %176, !dbg !85
  %845 = add i32 %843, %177, !dbg !85
  %846 = add i32 %844, %64, !dbg !86
  %847 = add i32 %845, %65, !dbg !86
  %848 = sext i32 %846 to i64, !dbg !87
  %849 = getelementptr i16, ptr addrspace(1) %4, i64 %848, !dbg !87
  %850 = sext i32 %847 to i64, !dbg !87
  %851 = getelementptr i16, ptr addrspace(1) %4, i64 %850, !dbg !87
  %852 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %849, i1 %799, i32 0, i1 %799, i32 0, i1 %799, i32 0, i1 %799, i32 0, i1 %799) #2, !dbg !88
  %853 = extractvalue { i32, i32, i32, i32 } %852, 0, !dbg !88
  %854 = extractvalue { i32, i32, i32, i32 } %852, 1, !dbg !88
  %855 = extractvalue { i32, i32, i32, i32 } %852, 2, !dbg !88
  %856 = extractvalue { i32, i32, i32, i32 } %852, 3, !dbg !88
  %857 = trunc i32 %853 to i16, !dbg !88
  %extelt.offset64 = lshr i32 %853, 16, !dbg !88
  %858 = trunc i32 %extelt.offset64 to i16, !dbg !88
  %859 = trunc i32 %854 to i16, !dbg !88
  %extelt.offset65 = lshr i32 %854, 16, !dbg !88
  %860 = trunc i32 %extelt.offset65 to i16, !dbg !88
  %861 = trunc i32 %855 to i16, !dbg !88
  %extelt.offset66 = lshr i32 %855, 16, !dbg !88
  %862 = trunc i32 %extelt.offset66 to i16, !dbg !88
  %863 = trunc i32 %856 to i16, !dbg !88
  %extelt.offset67 = lshr i32 %856, 16, !dbg !88
  %864 = trunc i32 %extelt.offset67 to i16, !dbg !88
  %865 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %851, i1 %800, i32 0, i1 %800, i32 0, i1 %800, i32 0, i1 %800, i32 0, i1 %800) #2, !dbg !88
  %866 = extractvalue { i32, i32, i32, i32 } %865, 0, !dbg !88
  %867 = extractvalue { i32, i32, i32, i32 } %865, 1, !dbg !88
  %868 = extractvalue { i32, i32, i32, i32 } %865, 2, !dbg !88
  %869 = extractvalue { i32, i32, i32, i32 } %865, 3, !dbg !88
  %870 = trunc i32 %866 to i16, !dbg !88
  %extelt.offset68 = lshr i32 %866, 16, !dbg !88
  %871 = trunc i32 %extelt.offset68 to i16, !dbg !88
  %872 = trunc i32 %867 to i16, !dbg !88
  %extelt.offset69 = lshr i32 %867, 16, !dbg !88
  %873 = trunc i32 %extelt.offset69 to i16, !dbg !88
  %874 = trunc i32 %868 to i16, !dbg !88
  %extelt.offset70 = lshr i32 %868, 16, !dbg !88
  %875 = trunc i32 %extelt.offset70 to i16, !dbg !88
  %876 = trunc i32 %869 to i16, !dbg !88
  %extelt.offset71 = lshr i32 %869, 16, !dbg !88
  %877 = trunc i32 %extelt.offset71 to i16, !dbg !88
  %878 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %857) #2, !dbg !89
  %879 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %858) #2, !dbg !89
  %880 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %859) #2, !dbg !89
  %881 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %860) #2, !dbg !89
  %882 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %861) #2, !dbg !89
  %883 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %862) #2, !dbg !89
  %884 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %863) #2, !dbg !89
  %885 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %864) #2, !dbg !89
  %886 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %870) #2, !dbg !89
  %887 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %871) #2, !dbg !89
  %888 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %872) #2, !dbg !89
  %889 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %873) #2, !dbg !89
  %890 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %874) #2, !dbg !89
  %891 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %875) #2, !dbg !89
  %892 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %876) #2, !dbg !89
  %893 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %877) #2, !dbg !89
  %894 = fadd float %827, %878, !dbg !90
  %895 = fadd float %828, %879, !dbg !90
  %896 = fadd float %829, %880, !dbg !90
  %897 = fadd float %830, %881, !dbg !90
  %898 = fadd float %831, %882, !dbg !90
  %899 = fadd float %832, %883, !dbg !90
  %900 = fadd float %833, %884, !dbg !90
  %901 = fadd float %834, %885, !dbg !90
  %902 = fadd float %835, %886, !dbg !90
  %903 = fadd float %836, %887, !dbg !90
  %904 = fadd float %837, %888, !dbg !90
  %905 = fadd float %838, %889, !dbg !90
  %906 = fadd float %839, %890, !dbg !90
  %907 = fadd float %840, %891, !dbg !90
  %908 = fadd float %841, %892, !dbg !90
  %909 = fadd float %842, %893, !dbg !90
  %910 = select i1 %791, float %894, float 0.000000e+00, !dbg !91
  %911 = select i1 %791, float %895, float 0.000000e+00, !dbg !91
  %912 = select i1 %791, float %896, float 0.000000e+00, !dbg !91
  %913 = select i1 %791, float %897, float 0.000000e+00, !dbg !91
  %914 = select i1 %791, float %898, float 0.000000e+00, !dbg !91
  %915 = select i1 %791, float %899, float 0.000000e+00, !dbg !91
  %916 = select i1 %791, float %900, float 0.000000e+00, !dbg !91
  %917 = select i1 %791, float %901, float 0.000000e+00, !dbg !91
  %918 = select i1 %792, float %902, float 0.000000e+00, !dbg !91
  %919 = select i1 %792, float %903, float 0.000000e+00, !dbg !91
  %920 = select i1 %792, float %904, float 0.000000e+00, !dbg !91
  %921 = select i1 %792, float %905, float 0.000000e+00, !dbg !91
  %922 = select i1 %792, float %906, float 0.000000e+00, !dbg !91
  %923 = select i1 %792, float %907, float 0.000000e+00, !dbg !91
  %924 = select i1 %792, float %908, float 0.000000e+00, !dbg !91
  %925 = select i1 %792, float %909, float 0.000000e+00, !dbg !91
  %926 = select i1 %572, float %722, float %910, !dbg !92
  %927 = select i1 %572, float %727, float %911, !dbg !92
  %928 = select i1 %572, float %732, float %912, !dbg !92
  %929 = select i1 %572, float %737, float %913, !dbg !92
  %930 = select i1 %572, float %742, float %914, !dbg !92
  %931 = select i1 %572, float %747, float %915, !dbg !92
  %932 = select i1 %572, float %752, float %916, !dbg !92
  %933 = select i1 %572, float %757, float %917, !dbg !92
  %934 = select i1 %573, float %762, float %918, !dbg !92
  %935 = select i1 %573, float %766, float %919, !dbg !92
  %936 = select i1 %573, float %770, float %920, !dbg !92
  %937 = select i1 %573, float %774, float %921, !dbg !92
  %938 = select i1 %573, float %778, float %922, !dbg !92
  %939 = select i1 %573, float %782, float %923, !dbg !92
  %940 = select i1 %573, float %786, float %924, !dbg !92
  %941 = select i1 %573, float %790, float %925, !dbg !92
  %942 = select i1 %57, float %556, float %926, !dbg !30
  %943 = select i1 %57, float %557, float %927, !dbg !30
  %944 = select i1 %57, float %558, float %928, !dbg !30
  %945 = select i1 %57, float %559, float %929, !dbg !30
  %946 = select i1 %57, float %560, float %930, !dbg !30
  %947 = select i1 %57, float %561, float %931, !dbg !30
  %948 = select i1 %57, float %562, float %932, !dbg !30
  %949 = select i1 %57, float %563, float %933, !dbg !30
  %950 = select i1 %58, float %564, float %934, !dbg !30
  %951 = select i1 %58, float %565, float %935, !dbg !30
  %952 = select i1 %58, float %566, float %936, !dbg !30
  %953 = select i1 %58, float %567, float %937, !dbg !30
  %954 = select i1 %58, float %568, float %938, !dbg !30
  %955 = select i1 %58, float %569, float %939, !dbg !30
  %956 = select i1 %58, float %570, float %940, !dbg !30
  %957 = select i1 %58, float %571, float %941, !dbg !30
  %958 = shl i32 %29, 8, !dbg !93
  %959 = shl i32 %30, 8, !dbg !93
  %960 = add i32 %34, %958, !dbg !94
  %961 = add i32 %34, %959, !dbg !94
  %962 = sext i32 %960 to i64, !dbg !95
  %963 = getelementptr i16, ptr addrspace(1) %5, i64 %962, !dbg !95
  %964 = sext i32 %961 to i64, !dbg !95
  %965 = getelementptr i16, ptr addrspace(1) %5, i64 %964, !dbg !95
  %966 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %942) #2, !dbg !96
  %967 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %943) #2, !dbg !96
  %968 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %944) #2, !dbg !96
  %969 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %945) #2, !dbg !96
  %970 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %946) #2, !dbg !96
  %971 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %947) #2, !dbg !96
  %972 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %948) #2, !dbg !96
  %973 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %949) #2, !dbg !96
  %974 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %950) #2, !dbg !96
  %975 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %951) #2, !dbg !96
  %976 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %952) #2, !dbg !96
  %977 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %953) #2, !dbg !96
  %978 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %954) #2, !dbg !96
  %979 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %955) #2, !dbg !96
  %980 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %956) #2, !dbg !96
  %981 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %957) #2, !dbg !96
  %982 = insertelement <2 x i16> undef, i16 %966, i64 0, !dbg !96
  %983 = insertelement <2 x i16> %982, i16 %967, i64 1, !dbg !96
  %984 = bitcast <2 x i16> %983 to i32, !dbg !96
  %985 = insertelement <2 x i16> undef, i16 %968, i64 0, !dbg !96
  %986 = insertelement <2 x i16> %985, i16 %969, i64 1, !dbg !96
  %987 = bitcast <2 x i16> %986 to i32, !dbg !96
  %988 = insertelement <2 x i16> undef, i16 %970, i64 0, !dbg !96
  %989 = insertelement <2 x i16> %988, i16 %971, i64 1, !dbg !96
  %990 = bitcast <2 x i16> %989 to i32, !dbg !96
  %991 = insertelement <2 x i16> undef, i16 %972, i64 0, !dbg !96
  %992 = insertelement <2 x i16> %991, i16 %973, i64 1, !dbg !96
  %993 = bitcast <2 x i16> %992 to i32, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %984, i32 %987, i32 %990, i32 %993, ptr addrspace(1) %963, i1 %39) #2, !dbg !96
  %994 = insertelement <2 x i16> undef, i16 %974, i64 0, !dbg !96
  %995 = insertelement <2 x i16> %994, i16 %975, i64 1, !dbg !96
  %996 = bitcast <2 x i16> %995 to i32, !dbg !96
  %997 = insertelement <2 x i16> undef, i16 %976, i64 0, !dbg !96
  %998 = insertelement <2 x i16> %997, i16 %977, i64 1, !dbg !96
  %999 = bitcast <2 x i16> %998 to i32, !dbg !96
  %1000 = insertelement <2 x i16> undef, i16 %978, i64 0, !dbg !96
  %1001 = insertelement <2 x i16> %1000, i16 %979, i64 1, !dbg !96
  %1002 = bitcast <2 x i16> %1001 to i32, !dbg !96
  %1003 = insertelement <2 x i16> undef, i16 %980, i64 0, !dbg !96
  %1004 = insertelement <2 x i16> %1003, i16 %981, i64 1, !dbg !96
  %1005 = bitcast <2 x i16> %1004 to i32, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %996, i32 %999, i32 %1002, i32 %1005, ptr addrspace(1) %965, i1 %39) #2, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cozke3dtxrsn2m7hausatak5oxtznxob4sx7gwlnfuvufzdwwdvk.py", directory: "/tmp/torchinductor_zeus/oz")
!3 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7de", linkageName: "triton__0d1d2d3d4d5d6de7de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 24, column: 28, scope: !5)
!14 = !DILocation(line: 24, column: 33, scope: !5)
!15 = !DILocation(line: 25, column: 23, scope: !5)
!16 = !DILocation(line: 26, column: 21, scope: !5)
!17 = !DILocation(line: 27, column: 20, scope: !5)
!18 = !DILocation(line: 27, column: 27, scope: !5)
!19 = !DILocation(line: 29, column: 20, scope: !5)
!20 = !DILocation(line: 37, column: 18, scope: !5)
!21 = !DILocation(line: 40, column: 19, scope: !5)
!22 = !DILocation(line: 41, column: 18, scope: !5)
!23 = !DILocation(line: 42, column: 40, scope: !5)
!24 = !DILocation(line: 42, column: 54, scope: !5)
!25 = !DILocation(line: 42, column: 36, scope: !5)
!26 = !DILocation(line: 42, column: 47, scope: !5)
!27 = !DILocation(line: 42, column: 30, scope: !5)
!28 = !DILocation(line: 42, column: 60, scope: !5)
!29 = !DILocation(line: 42, column: 118, scope: !5)
!30 = !DILocation(line: 0, scope: !5)
!31 = !DILocation(line: 47, column: 68, scope: !5)
!32 = !DILocation(line: 47, column: 61, scope: !5)
!33 = !DILocation(line: 47, column: 119, scope: !5)
!34 = !DILocation(line: 48, column: 41, scope: !5)
!35 = !DILocation(line: 48, column: 37, scope: !5)
!36 = !DILocation(line: 48, column: 31, scope: !5)
!37 = !DILocation(line: 48, column: 47, scope: !5)
!38 = !DILocation(line: 48, column: 105, scope: !5)
!39 = !DILocation(line: 49, column: 20, scope: !5)
!40 = !DILocation(line: 51, column: 20, scope: !5)
!41 = !DILocation(line: 52, column: 20, scope: !5)
!42 = !DILocation(line: 53, column: 40, scope: !5)
!43 = !DILocation(line: 53, column: 57, scope: !5)
!44 = !DILocation(line: 53, column: 31, scope: !5)
!45 = !DILocation(line: 53, column: 78, scope: !5)
!46 = !DILocation(line: 53, column: 70, scope: !5)
!47 = !DILocation(line: 53, column: 129, scope: !5)
!48 = !DILocation(line: 54, column: 46, scope: !5)
!49 = !DILocation(line: 54, column: 31, scope: !5)
!50 = !DILocation(line: 54, column: 56, scope: !5)
!51 = !DILocation(line: 54, column: 115, scope: !5)
!52 = !DILocation(line: 55, column: 20, scope: !5)
!53 = !DILocation(line: 56, column: 13, scope: !5)
!54 = !DILocation(line: 60, column: 20, scope: !5)
!55 = !DILocation(line: 61, column: 19, scope: !5)
!56 = !DILocation(line: 62, column: 20, scope: !5)
!57 = !DILocation(line: 63, column: 37, scope: !5)
!58 = !DILocation(line: 63, column: 54, scope: !5)
!59 = !DILocation(line: 63, column: 31, scope: !5)
!60 = !DILocation(line: 63, column: 67, scope: !5)
!61 = !DILocation(line: 63, column: 126, scope: !5)
!62 = !DILocation(line: 64, column: 43, scope: !5)
!63 = !DILocation(line: 64, column: 31, scope: !5)
!64 = !DILocation(line: 64, column: 53, scope: !5)
!65 = !DILocation(line: 64, column: 112, scope: !5)
!66 = !DILocation(line: 65, column: 20, scope: !5)
!67 = !DILocation(line: 69, column: 20, scope: !5)
!68 = !DILocation(line: 70, column: 20, scope: !5)
!69 = !DILocation(line: 76, column: 20, scope: !5)
!70 = !DILocation(line: 77, column: 41, scope: !5)
!71 = !DILocation(line: 77, column: 55, scope: !5)
!72 = !DILocation(line: 77, column: 37, scope: !5)
!73 = !DILocation(line: 77, column: 48, scope: !5)
!74 = !DILocation(line: 77, column: 31, scope: !5)
!75 = !DILocation(line: 77, column: 69, scope: !5)
!76 = !DILocation(line: 77, column: 61, scope: !5)
!77 = !DILocation(line: 80, column: 35, scope: !5)
!78 = !DILocation(line: 81, column: 20, scope: !5)
!79 = !DILocation(line: 84, column: 48, scope: !5)
!80 = !DILocation(line: 84, column: 31, scope: !5)
!81 = !DILocation(line: 84, column: 69, scope: !5)
!82 = !DILocation(line: 84, column: 61, scope: !5)
!83 = !DILocation(line: 84, column: 120, scope: !5)
!84 = !DILocation(line: 86, column: 40, scope: !5)
!85 = !DILocation(line: 86, column: 46, scope: !5)
!86 = !DILocation(line: 86, column: 57, scope: !5)
!87 = !DILocation(line: 86, column: 31, scope: !5)
!88 = !DILocation(line: 86, column: 70, scope: !5)
!89 = !DILocation(line: 86, column: 129, scope: !5)
!90 = !DILocation(line: 88, column: 20, scope: !5)
!91 = !DILocation(line: 91, column: 35, scope: !5)
!92 = !DILocation(line: 92, column: 35, scope: !5)
!93 = !DILocation(line: 94, column: 35, scope: !5)
!94 = !DILocation(line: 94, column: 31, scope: !5)
!95 = !DILocation(line: 94, column: 25, scope: !5)
!96 = !DILocation(line: 94, column: 48, scope: !5)
!97 = !DILocation(line: 94, column: 4, scope: !5)
