; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d10de11de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !5 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %14 = lshr i32 %13, 5, !dbg !8
  %urem = and i32 %13, 255, !dbg !8
  %15 = shl nuw nsw i32 %urem, 3, !dbg !8
  %16 = or i32 %15, 4, !dbg !8
  %17 = shl nuw nsw i32 %urem, 2, !dbg !8
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %19 = sext i32 %18 to i64, !dbg !10
  %20 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !10
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %22 = bitcast i32 %21 to float, !dbg !11
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %30 = mul i32 %18, 2304, !dbg !12
  %31 = insertelement <8 x float> poison, float %22, i64 0, !dbg !13
  %32 = shufflevector <8 x float> %31, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !13
  br label %33, !dbg !14

33:                                               ; preds = %12, %33
  %34 = phi i1 [ true, %12 ], [ false, %33 ]
  %35 = phi i32 [ 0, %12 ], [ 2048, %33 ]
  %36 = phi <8 x float> [ zeroinitializer, %12 ], [ %210, %33 ]
  %37 = or i32 %35, %15, !dbg !15
  %38 = or i32 %35, %16, !dbg !15
  %39 = icmp ult i32 %37, 2304, !dbg !16
  %40 = add i32 %37, %30, !dbg !17
  %41 = add i32 %38, %30, !dbg !17
  %42 = sext i32 %40 to i64, !dbg !18
  %43 = getelementptr i16, ptr addrspace(1) %1, i64 %42, !dbg !18
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !19
  %49 = trunc i32 %45 to i16, !dbg !19
  %extelt.offset32 = lshr i32 %45, 16, !dbg !19
  %50 = trunc i32 %extelt.offset32 to i16, !dbg !19
  %51 = trunc i32 %46 to i16, !dbg !19
  %extelt.offset33 = lshr i32 %46, 16, !dbg !19
  %52 = trunc i32 %extelt.offset33 to i16, !dbg !19
  %53 = trunc i32 %47 to i16, !dbg !19
  %extelt.offset34 = lshr i32 %47, 16, !dbg !19
  %54 = trunc i32 %extelt.offset34 to i16, !dbg !19
  %55 = trunc i32 %48 to i16, !dbg !19
  %extelt.offset35 = lshr i32 %48, 16, !dbg !19
  %56 = trunc i32 %extelt.offset35 to i16, !dbg !19
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #3, !dbg !20
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #3, !dbg !20
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !20
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #3, !dbg !20
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #3, !dbg !20
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #3, !dbg !20
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #3, !dbg !20
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #3, !dbg !20
  %65 = getelementptr i16, ptr addrspace(1) %2, i64 %42, !dbg !21
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !22
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !22
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !22
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !22
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !22
  %71 = trunc i32 %67 to i16, !dbg !22
  %extelt.offset36 = lshr i32 %67, 16, !dbg !22
  %72 = trunc i32 %extelt.offset36 to i16, !dbg !22
  %73 = trunc i32 %68 to i16, !dbg !22
  %extelt.offset37 = lshr i32 %68, 16, !dbg !22
  %74 = trunc i32 %extelt.offset37 to i16, !dbg !22
  %75 = trunc i32 %69 to i16, !dbg !22
  %extelt.offset38 = lshr i32 %69, 16, !dbg !22
  %76 = trunc i32 %extelt.offset38 to i16, !dbg !22
  %77 = trunc i32 %70 to i16, !dbg !22
  %extelt.offset39 = lshr i32 %70, 16, !dbg !22
  %78 = trunc i32 %extelt.offset39 to i16, !dbg !22
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #3, !dbg !23
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #3, !dbg !23
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #3, !dbg !23
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #3, !dbg !23
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #3, !dbg !23
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #3, !dbg !23
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #3, !dbg !23
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #3, !dbg !23
  %87 = zext nneg i32 %37 to i64, !dbg !24
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !24
  %89 = zext nneg i32 %38 to i64, !dbg !24
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !24
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !25
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !25
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !25
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !25
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !25
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !25
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !25
  %101 = getelementptr i16, ptr addrspace(1) %4, i64 %42, !dbg !26
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !27
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !27
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !27
  %107 = trunc i32 %103 to i16, !dbg !27
  %extelt.offset40 = lshr i32 %103, 16, !dbg !27
  %108 = trunc i32 %extelt.offset40 to i16, !dbg !27
  %109 = trunc i32 %104 to i16, !dbg !27
  %extelt.offset41 = lshr i32 %104, 16, !dbg !27
  %110 = trunc i32 %extelt.offset41 to i16, !dbg !27
  %111 = trunc i32 %105 to i16, !dbg !27
  %extelt.offset42 = lshr i32 %105, 16, !dbg !27
  %112 = trunc i32 %extelt.offset42 to i16, !dbg !27
  %113 = trunc i32 %106 to i16, !dbg !27
  %extelt.offset43 = lshr i32 %106, 16, !dbg !27
  %114 = trunc i32 %extelt.offset43 to i16, !dbg !27
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #3, !dbg !28
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #3, !dbg !28
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %109) #3, !dbg !28
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #3, !dbg !28
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %111) #3, !dbg !28
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #3, !dbg !28
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #3, !dbg !28
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #3, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %6, i64 %87, !dbg !29
  %124 = getelementptr float, ptr addrspace(1) %6, i64 %89, !dbg !29
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %123, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !30
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !30
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !30
  %135 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !31
  %136 = sext i32 %41 to i64, !dbg !31
  %137 = getelementptr float, ptr addrspace(1) %7, i64 %136, !dbg !31
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !32
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !32
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !32
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !32
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !32
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !32
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !32
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !32
  %148 = insertelement <8 x i32> poison, i32 %92, i64 0, !dbg !25
  %149 = insertelement <8 x i32> %148, i32 %93, i64 1, !dbg !25
  %150 = insertelement <8 x i32> %149, i32 %94, i64 2, !dbg !25
  %151 = insertelement <8 x i32> %150, i32 %95, i64 3, !dbg !25
  %152 = insertelement <8 x i32> %151, i32 %97, i64 4, !dbg !25
  %153 = insertelement <8 x i32> %152, i32 %98, i64 5, !dbg !25
  %154 = insertelement <8 x i32> %153, i32 %99, i64 6, !dbg !25
  %155 = insertelement <8 x i32> %154, i32 %100, i64 7, !dbg !25
  %156 = bitcast <8 x i32> %155 to <8 x float>, !dbg !25
  %157 = insertelement <8 x i32> poison, i32 %126, i64 0, !dbg !30
  %158 = insertelement <8 x i32> %157, i32 %127, i64 1, !dbg !30
  %159 = insertelement <8 x i32> %158, i32 %128, i64 2, !dbg !30
  %160 = insertelement <8 x i32> %159, i32 %129, i64 3, !dbg !30
  %161 = insertelement <8 x i32> %160, i32 %131, i64 4, !dbg !30
  %162 = insertelement <8 x i32> %161, i32 %132, i64 5, !dbg !30
  %163 = insertelement <8 x i32> %162, i32 %133, i64 6, !dbg !30
  %164 = insertelement <8 x i32> %163, i32 %134, i64 7, !dbg !30
  %165 = bitcast <8 x i32> %164 to <8 x float>, !dbg !30
  %166 = insertelement <8 x i32> poison, i32 %139, i64 0, !dbg !32
  %167 = insertelement <8 x i32> %166, i32 %140, i64 1, !dbg !32
  %168 = insertelement <8 x i32> %167, i32 %141, i64 2, !dbg !32
  %169 = insertelement <8 x i32> %168, i32 %142, i64 3, !dbg !32
  %170 = insertelement <8 x i32> %169, i32 %144, i64 4, !dbg !32
  %171 = insertelement <8 x i32> %170, i32 %145, i64 5, !dbg !32
  %172 = insertelement <8 x i32> %171, i32 %146, i64 6, !dbg !32
  %173 = insertelement <8 x i32> %172, i32 %147, i64 7, !dbg !32
  %174 = bitcast <8 x i32> %173 to <8 x float>, !dbg !32
  %175 = insertelement <8 x float> poison, float %57, i64 0, !dbg !33
  %176 = insertelement <8 x float> %175, float %58, i64 1, !dbg !33
  %177 = insertelement <8 x float> %176, float %59, i64 2, !dbg !33
  %178 = insertelement <8 x float> %177, float %60, i64 3, !dbg !33
  %179 = insertelement <8 x float> %178, float %61, i64 4, !dbg !33
  %180 = insertelement <8 x float> %179, float %62, i64 5, !dbg !33
  %181 = insertelement <8 x float> %180, float %63, i64 6, !dbg !33
  %182 = insertelement <8 x float> %181, float %64, i64 7, !dbg !33
  %183 = insertelement <8 x float> poison, float %79, i64 0, !dbg !33
  %184 = insertelement <8 x float> %183, float %80, i64 1, !dbg !33
  %185 = insertelement <8 x float> %184, float %81, i64 2, !dbg !33
  %186 = insertelement <8 x float> %185, float %82, i64 3, !dbg !33
  %187 = insertelement <8 x float> %186, float %83, i64 4, !dbg !33
  %188 = insertelement <8 x float> %187, float %84, i64 5, !dbg !33
  %189 = insertelement <8 x float> %188, float %85, i64 6, !dbg !33
  %190 = insertelement <8 x float> %189, float %86, i64 7, !dbg !33
  %191 = fadd <8 x float> %182, %190, !dbg !33
  %192 = fadd <8 x float> %156, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !34
  %193 = fmul <8 x float> %191, %192, !dbg !35
  %194 = insertelement <8 x float> poison, float %115, i64 0, !dbg !13
  %195 = insertelement <8 x float> %194, float %116, i64 1, !dbg !13
  %196 = insertelement <8 x float> %195, float %117, i64 2, !dbg !13
  %197 = insertelement <8 x float> %196, float %118, i64 3, !dbg !13
  %198 = insertelement <8 x float> %197, float %119, i64 4, !dbg !13
  %199 = insertelement <8 x float> %198, float %120, i64 5, !dbg !13
  %200 = insertelement <8 x float> %199, float %121, i64 6, !dbg !13
  %201 = insertelement <8 x float> %200, float %122, i64 7, !dbg !13
  %202 = fmul <8 x float> %201, %32, !dbg !13
  %203 = fadd <8 x float> %165, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !36
  %204 = fmul <8 x float> %202, %203, !dbg !37
  %205 = fadd <8 x float> %204, %174, !dbg !38
  %206 = fmul <8 x float> %193, %205, !dbg !39
  %207 = insertelement <8 x i1> poison, i1 %39, i64 0, !dbg !40
  %208 = shufflevector <8 x i1> %207, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !40
  %209 = select <8 x i1> %208, <8 x float> %206, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !40
  %210 = fadd <8 x float> %36, %209, !dbg !40
  br i1 %34, label %33, label %211, !dbg !14

211:                                              ; preds = %33
  %212 = and i32 %13, 31, !dbg !8
  %213 = and i32 %14, 7, !dbg !8
  %214 = or i32 %17, 1024, !dbg !8
  %215 = bitcast i32 %24 to float, !dbg !11
  %216 = bitcast i32 %26 to float, !dbg !11
  %217 = bitcast i32 %28 to float, !dbg !11
  %shift = shufflevector <8 x float> %210, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %218 = fadd <8 x float> %210, %shift, !dbg !41
  %shift90 = shufflevector <8 x float> %210, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %219 = fadd <8 x float> %shift90, %218, !dbg !41
  %shift91 = shufflevector <8 x float> %210, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %220 = fadd <8 x float> %shift91, %219, !dbg !41
  %shift92 = shufflevector <8 x float> %210, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %221 = fadd <8 x float> %shift92, %220, !dbg !41
  %shift93 = shufflevector <8 x float> %210, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %222 = fadd <8 x float> %shift93, %221, !dbg !41
  %shift94 = shufflevector <8 x float> %210, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %223 = fadd <8 x float> %shift94, %222, !dbg !41
  %shift95 = shufflevector <8 x float> %210, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %224 = fadd <8 x float> %shift95, %223, !dbg !41
  %225 = extractelement <8 x float> %224, i64 0, !dbg !41
  %226 = bitcast float %225 to i32, !dbg !47
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 16, i32 31), !dbg !47
  %228 = bitcast i32 %227 to float, !dbg !47
  %229 = fadd float %225, %228, !dbg !41
  %230 = bitcast float %229 to i32, !dbg !47
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !47
  %232 = bitcast i32 %231 to float, !dbg !47
  %233 = fadd float %229, %232, !dbg !41
  %234 = bitcast float %233 to i32, !dbg !47
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !47
  %236 = bitcast i32 %235 to float, !dbg !47
  %237 = fadd float %233, %236, !dbg !41
  %238 = bitcast float %237 to i32, !dbg !47
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !47
  %240 = bitcast i32 %239 to float, !dbg !47
  %241 = fadd float %237, %240, !dbg !41
  %242 = bitcast float %241 to i32, !dbg !47
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !47
  %244 = bitcast i32 %243 to float, !dbg !47
  %245 = fadd float %241, %244, !dbg !41
  %246 = icmp eq i32 %212, 0, !dbg !47
  %247 = zext nneg i32 %213 to i64, !dbg !47
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i64 %247, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, float %245, i1 %246) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %249 = icmp slt i32 %13, 8, !dbg !47
  %250 = sext i32 %13 to i64, !dbg !47
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i64 %250, !dbg !47
  %252 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %251, i1 %249) #3, !dbg !47
  %253 = bitcast float %252 to i32, !dbg !47
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 4, i32 31), !dbg !47
  %255 = bitcast i32 %254 to float, !dbg !47
  %256 = fadd float %252, %255, !dbg !41
  %257 = bitcast float %256 to i32, !dbg !47
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 2, i32 31), !dbg !47
  %259 = bitcast i32 %258 to float, !dbg !47
  %260 = fadd float %256, %259, !dbg !41
  %261 = bitcast float %260 to i32, !dbg !47
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 1, i32 31), !dbg !47
  %263 = bitcast i32 %262 to float, !dbg !47
  %264 = fadd float %260, %263, !dbg !41
  %265 = and i32 %13, 7, !dbg !47
  %266 = icmp eq i32 %265, 0, !dbg !47
  %267 = and i1 %249, %266, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, float %264, i1 %267) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %268 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !47
  %269 = getelementptr float, ptr addrspace(1) %8, i64 %19, !dbg !49
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #3, !dbg !50
  %271 = bitcast i32 %270 to float, !dbg !50
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #3, !dbg !50
  %273 = bitcast i32 %272 to float, !dbg !50
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #3, !dbg !50
  %275 = bitcast i32 %274 to float, !dbg !50
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #3, !dbg !50
  %277 = bitcast i32 %276 to float, !dbg !50
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #3, !dbg !50
  %279 = bitcast i32 %278 to float, !dbg !50
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #3, !dbg !50
  %281 = bitcast i32 %280 to float, !dbg !50
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #3, !dbg !50
  %283 = bitcast i32 %282 to float, !dbg !50
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #3, !dbg !50
  %285 = bitcast i32 %284 to float, !dbg !50
  %286 = fmul float %268, -5.000000e-01, !dbg !51
  %287 = fmul float %271, %271, !dbg !52
  %288 = fmul float %273, %273, !dbg !52
  %289 = fmul float %275, %275, !dbg !52
  %290 = fmul float %277, %277, !dbg !52
  %291 = fmul float %279, %279, !dbg !52
  %292 = fmul float %281, %281, !dbg !52
  %293 = fmul float %283, %283, !dbg !52
  %294 = fmul float %285, %285, !dbg !52
  %295 = fmul float %287, %271, !dbg !53
  %296 = fmul float %288, %273, !dbg !53
  %297 = fmul float %289, %275, !dbg !53
  %298 = fmul float %290, %277, !dbg !53
  %299 = fmul float %291, %279, !dbg !53
  %300 = fmul float %292, %281, !dbg !53
  %301 = fmul float %293, %283, !dbg !53
  %302 = fmul float %294, %285, !dbg !53
  %303 = fmul float %286, %295, !dbg !54
  %304 = fmul float %286, %296, !dbg !54
  %305 = fmul float %286, %297, !dbg !54
  %306 = fmul float %286, %298, !dbg !54
  %307 = fmul float %286, %299, !dbg !54
  %308 = fmul float %286, %300, !dbg !54
  %309 = fmul float %286, %301, !dbg !54
  %310 = fmul float %286, %302, !dbg !54
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float 2.304000e+03) #3, !dbg !55
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float 2.304000e+03) #3, !dbg !55
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %305, float 2.304000e+03) #3, !dbg !55
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float 2.304000e+03) #3, !dbg !55
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #3, !dbg !55
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float 2.304000e+03) #3, !dbg !55
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float 2.304000e+03) #3, !dbg !55
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float 2.304000e+03) #3, !dbg !55
  %319 = zext nneg i32 %15 to i64
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i64 %319
  %321 = zext nneg i32 %17 to i64
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i64 %321
  %323 = zext nneg i32 %214 to i64
  %324 = getelementptr float, ptr addrspace(3) @global_smem, i64 %323
  %325 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %322, i64 0, i64 1
  %326 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %322, i64 0, i64 2
  %327 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %322, i64 0, i64 3
  %328 = insertelement <8 x float> poison, float %311, i64 0, !dbg !56
  %329 = shufflevector <8 x float> %328, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !56
  %330 = insertelement <8 x float> poison, float %271, i64 0, !dbg !57
  %331 = shufflevector <8 x float> %330, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !57
  br label %332, !dbg !58

332:                                              ; preds = %211, %332
  %333 = phi i1 [ true, %211 ], [ false, %332 ]
  %334 = phi i32 [ 0, %211 ], [ 2048, %332 ]
  %335 = phi <8 x float> [ zeroinitializer, %211 ], [ %546, %332 ]
  %336 = or i32 %334, %15, !dbg !59
  %337 = or i32 %334, %16, !dbg !59
  %338 = or i32 %334, %17, !dbg !59
  %339 = or i32 %334, %214, !dbg !59
  %340 = icmp ult i32 %336, 2304, !dbg !60
  %341 = icmp ult i32 %338, 2304, !dbg !60
  %342 = icmp ult i32 %339, 2304, !dbg !60
  %343 = add i32 %336, %30, !dbg !61
  %344 = add i32 %337, %30, !dbg !61
  %345 = add i32 %338, %30, !dbg !61
  %346 = add i32 %339, %30, !dbg !61
  %347 = sext i32 %343 to i64, !dbg !62
  %348 = getelementptr i16, ptr addrspace(1) %4, i64 %347, !dbg !62
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %348, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #3, !dbg !63
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !63
  %351 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !63
  %352 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !63
  %353 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !63
  %354 = trunc i32 %350 to i16, !dbg !63
  %extelt.offset6 = lshr i32 %350, 16, !dbg !63
  %355 = trunc i32 %extelt.offset6 to i16, !dbg !63
  %356 = trunc i32 %351 to i16, !dbg !63
  %extelt.offset7 = lshr i32 %351, 16, !dbg !63
  %357 = trunc i32 %extelt.offset7 to i16, !dbg !63
  %358 = trunc i32 %352 to i16, !dbg !63
  %extelt.offset8 = lshr i32 %352, 16, !dbg !63
  %359 = trunc i32 %extelt.offset8 to i16, !dbg !63
  %360 = trunc i32 %353 to i16, !dbg !63
  %extelt.offset9 = lshr i32 %353, 16, !dbg !63
  %361 = trunc i32 %extelt.offset9 to i16, !dbg !63
  %362 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %354) #3, !dbg !64
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #3, !dbg !64
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #3, !dbg !64
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #3, !dbg !64
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #3, !dbg !64
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #3, !dbg !64
  %368 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #3, !dbg !64
  %369 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #3, !dbg !64
  %370 = zext nneg i32 %336 to i64, !dbg !65
  %371 = getelementptr float, ptr addrspace(1) %6, i64 %370, !dbg !65
  %372 = zext nneg i32 %337 to i64, !dbg !65
  %373 = getelementptr float, ptr addrspace(1) %6, i64 %372, !dbg !65
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %371, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #3, !dbg !66
  %375 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !66
  %376 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !66
  %377 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !66
  %378 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !66
  %379 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %373, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #3, !dbg !66
  %380 = extractvalue { i32, i32, i32, i32 } %379, 0, !dbg !66
  %381 = extractvalue { i32, i32, i32, i32 } %379, 1, !dbg !66
  %382 = extractvalue { i32, i32, i32, i32 } %379, 2, !dbg !66
  %383 = extractvalue { i32, i32, i32, i32 } %379, 3, !dbg !66
  %384 = getelementptr float, ptr addrspace(1) %7, i64 %347, !dbg !67
  %385 = sext i32 %344 to i64, !dbg !67
  %386 = getelementptr float, ptr addrspace(1) %7, i64 %385, !dbg !67
  %387 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %384, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #3, !dbg !68
  %388 = extractvalue { i32, i32, i32, i32 } %387, 0, !dbg !68
  %389 = extractvalue { i32, i32, i32, i32 } %387, 1, !dbg !68
  %390 = extractvalue { i32, i32, i32, i32 } %387, 2, !dbg !68
  %391 = extractvalue { i32, i32, i32, i32 } %387, 3, !dbg !68
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %386, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #3, !dbg !68
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !68
  %394 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !68
  %395 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !68
  %396 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !68
  %397 = getelementptr float, ptr addrspace(1) %0, i64 %347, !dbg !69
  %398 = getelementptr float, ptr addrspace(1) %0, i64 %385, !dbg !69
  %399 = sext i32 %345 to i64, !dbg !69
  %400 = getelementptr float, ptr addrspace(1) %0, i64 %399, !dbg !69
  %401 = sext i32 %346 to i64, !dbg !69
  %402 = getelementptr float, ptr addrspace(1) %0, i64 %401, !dbg !69
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %397, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #3, !dbg !70
  %404 = extractvalue { i32, i32, i32, i32 } %403, 0, !dbg !70
  %405 = extractvalue { i32, i32, i32, i32 } %403, 1, !dbg !70
  %406 = extractvalue { i32, i32, i32, i32 } %403, 2, !dbg !70
  %407 = extractvalue { i32, i32, i32, i32 } %403, 3, !dbg !70
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %398, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #3, !dbg !70
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !70
  %410 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !70
  %411 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !70
  %412 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !70
  %413 = getelementptr i16, ptr addrspace(1) %1, i64 %347, !dbg !71
  %414 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %413, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #3, !dbg !72
  %415 = extractvalue { i32, i32, i32, i32 } %414, 0, !dbg !72
  %416 = extractvalue { i32, i32, i32, i32 } %414, 1, !dbg !72
  %417 = extractvalue { i32, i32, i32, i32 } %414, 2, !dbg !72
  %418 = extractvalue { i32, i32, i32, i32 } %414, 3, !dbg !72
  %419 = trunc i32 %415 to i16, !dbg !72
  %extelt.offset10 = lshr i32 %415, 16, !dbg !72
  %420 = trunc i32 %extelt.offset10 to i16, !dbg !72
  %421 = trunc i32 %416 to i16, !dbg !72
  %extelt.offset11 = lshr i32 %416, 16, !dbg !72
  %422 = trunc i32 %extelt.offset11 to i16, !dbg !72
  %423 = trunc i32 %417 to i16, !dbg !72
  %extelt.offset12 = lshr i32 %417, 16, !dbg !72
  %424 = trunc i32 %extelt.offset12 to i16, !dbg !72
  %425 = trunc i32 %418 to i16, !dbg !72
  %extelt.offset13 = lshr i32 %418, 16, !dbg !72
  %426 = trunc i32 %extelt.offset13 to i16, !dbg !72
  %427 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #3, !dbg !73
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #3, !dbg !73
  %429 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #3, !dbg !73
  %430 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %422) #3, !dbg !73
  %431 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #3, !dbg !73
  %432 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #3, !dbg !73
  %433 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #3, !dbg !73
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #3, !dbg !73
  %435 = getelementptr i16, ptr addrspace(1) %2, i64 %347, !dbg !74
  %436 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %435, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #3, !dbg !75
  %437 = extractvalue { i32, i32, i32, i32 } %436, 0, !dbg !75
  %438 = extractvalue { i32, i32, i32, i32 } %436, 1, !dbg !75
  %439 = extractvalue { i32, i32, i32, i32 } %436, 2, !dbg !75
  %440 = extractvalue { i32, i32, i32, i32 } %436, 3, !dbg !75
  %441 = trunc i32 %437 to i16, !dbg !75
  %extelt.offset14 = lshr i32 %437, 16, !dbg !75
  %442 = trunc i32 %extelt.offset14 to i16, !dbg !75
  %443 = trunc i32 %438 to i16, !dbg !75
  %extelt.offset15 = lshr i32 %438, 16, !dbg !75
  %444 = trunc i32 %extelt.offset15 to i16, !dbg !75
  %445 = trunc i32 %439 to i16, !dbg !75
  %extelt.offset16 = lshr i32 %439, 16, !dbg !75
  %446 = trunc i32 %extelt.offset16 to i16, !dbg !75
  %447 = trunc i32 %440 to i16, !dbg !75
  %extelt.offset17 = lshr i32 %440, 16, !dbg !75
  %448 = trunc i32 %extelt.offset17 to i16, !dbg !75
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %441) #3, !dbg !76
  %450 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #3, !dbg !76
  %451 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #3, !dbg !76
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #3, !dbg !76
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #3, !dbg !76
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #3, !dbg !76
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #3, !dbg !76
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #3, !dbg !76
  %457 = getelementptr float, ptr addrspace(1) %3, i64 %370, !dbg !77
  %458 = getelementptr float, ptr addrspace(1) %3, i64 %372, !dbg !77
  %459 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %457, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #3, !dbg !78
  %460 = extractvalue { i32, i32, i32, i32 } %459, 0, !dbg !78
  %461 = extractvalue { i32, i32, i32, i32 } %459, 1, !dbg !78
  %462 = extractvalue { i32, i32, i32, i32 } %459, 2, !dbg !78
  %463 = extractvalue { i32, i32, i32, i32 } %459, 3, !dbg !78
  %464 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %458, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #3, !dbg !78
  %465 = extractvalue { i32, i32, i32, i32 } %464, 0, !dbg !78
  %466 = extractvalue { i32, i32, i32, i32 } %464, 1, !dbg !78
  %467 = extractvalue { i32, i32, i32, i32 } %464, 2, !dbg !78
  %468 = extractvalue { i32, i32, i32, i32 } %464, 3, !dbg !78
  %469 = insertelement <8 x i32> poison, i32 %375, i64 0, !dbg !66
  %470 = insertelement <8 x i32> %469, i32 %376, i64 1, !dbg !66
  %471 = insertelement <8 x i32> %470, i32 %377, i64 2, !dbg !66
  %472 = insertelement <8 x i32> %471, i32 %378, i64 3, !dbg !66
  %473 = insertelement <8 x i32> %472, i32 %380, i64 4, !dbg !66
  %474 = insertelement <8 x i32> %473, i32 %381, i64 5, !dbg !66
  %475 = insertelement <8 x i32> %474, i32 %382, i64 6, !dbg !66
  %476 = insertelement <8 x i32> %475, i32 %383, i64 7, !dbg !66
  %477 = bitcast <8 x i32> %476 to <8 x float>, !dbg !66
  %478 = insertelement <8 x i32> poison, i32 %388, i64 0, !dbg !68
  %479 = insertelement <8 x i32> %478, i32 %389, i64 1, !dbg !68
  %480 = insertelement <8 x i32> %479, i32 %390, i64 2, !dbg !68
  %481 = insertelement <8 x i32> %480, i32 %391, i64 3, !dbg !68
  %482 = insertelement <8 x i32> %481, i32 %393, i64 4, !dbg !68
  %483 = insertelement <8 x i32> %482, i32 %394, i64 5, !dbg !68
  %484 = insertelement <8 x i32> %483, i32 %395, i64 6, !dbg !68
  %485 = insertelement <8 x i32> %484, i32 %396, i64 7, !dbg !68
  %486 = bitcast <8 x i32> %485 to <8 x float>, !dbg !68
  %487 = insertelement <8 x i32> poison, i32 %404, i64 0, !dbg !70
  %488 = insertelement <8 x i32> %487, i32 %405, i64 1, !dbg !70
  %489 = insertelement <8 x i32> %488, i32 %406, i64 2, !dbg !70
  %490 = insertelement <8 x i32> %489, i32 %407, i64 3, !dbg !70
  %491 = insertelement <8 x i32> %490, i32 %409, i64 4, !dbg !70
  %492 = insertelement <8 x i32> %491, i32 %410, i64 5, !dbg !70
  %493 = insertelement <8 x i32> %492, i32 %411, i64 6, !dbg !70
  %494 = insertelement <8 x i32> %493, i32 %412, i64 7, !dbg !70
  %495 = bitcast <8 x i32> %494 to <8 x float>, !dbg !70
  %496 = insertelement <8 x i32> poison, i32 %460, i64 0, !dbg !78
  %497 = insertelement <8 x i32> %496, i32 %461, i64 1, !dbg !78
  %498 = insertelement <8 x i32> %497, i32 %462, i64 2, !dbg !78
  %499 = insertelement <8 x i32> %498, i32 %463, i64 3, !dbg !78
  %500 = insertelement <8 x i32> %499, i32 %465, i64 4, !dbg !78
  %501 = insertelement <8 x i32> %500, i32 %466, i64 5, !dbg !78
  %502 = insertelement <8 x i32> %501, i32 %467, i64 6, !dbg !78
  %503 = insertelement <8 x i32> %502, i32 %468, i64 7, !dbg !78
  %504 = bitcast <8 x i32> %503 to <8 x float>, !dbg !78
  %505 = insertelement <8 x float> poison, float %362, i64 0, !dbg !79
  %506 = insertelement <8 x float> %505, float %363, i64 1, !dbg !79
  %507 = insertelement <8 x float> %506, float %364, i64 2, !dbg !79
  %508 = insertelement <8 x float> %507, float %365, i64 3, !dbg !79
  %509 = insertelement <8 x float> %508, float %366, i64 4, !dbg !79
  %510 = insertelement <8 x float> %509, float %367, i64 5, !dbg !79
  %511 = insertelement <8 x float> %510, float %368, i64 6, !dbg !79
  %512 = insertelement <8 x float> %511, float %369, i64 7, !dbg !79
  %513 = fmul <8 x float> %512, %32, !dbg !79
  %514 = fadd <8 x float> %477, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !80
  %515 = fmul <8 x float> %513, %514, !dbg !81
  %516 = fadd <8 x float> %515, %486, !dbg !82
  %517 = fmul <8 x float> %329, %516, !dbg !56
  %518 = insertelement <8 x float> poison, float %427, i64 0, !dbg !83
  %519 = insertelement <8 x float> %518, float %428, i64 1, !dbg !83
  %520 = insertelement <8 x float> %519, float %429, i64 2, !dbg !83
  %521 = insertelement <8 x float> %520, float %430, i64 3, !dbg !83
  %522 = insertelement <8 x float> %521, float %431, i64 4, !dbg !83
  %523 = insertelement <8 x float> %522, float %432, i64 5, !dbg !83
  %524 = insertelement <8 x float> %523, float %433, i64 6, !dbg !83
  %525 = insertelement <8 x float> %524, float %434, i64 7, !dbg !83
  %526 = insertelement <8 x float> poison, float %449, i64 0, !dbg !83
  %527 = insertelement <8 x float> %526, float %450, i64 1, !dbg !83
  %528 = insertelement <8 x float> %527, float %451, i64 2, !dbg !83
  %529 = insertelement <8 x float> %528, float %452, i64 3, !dbg !83
  %530 = insertelement <8 x float> %529, float %453, i64 4, !dbg !83
  %531 = insertelement <8 x float> %530, float %454, i64 5, !dbg !83
  %532 = insertelement <8 x float> %531, float %455, i64 6, !dbg !83
  %533 = insertelement <8 x float> %532, float %456, i64 7, !dbg !83
  %534 = fadd <8 x float> %525, %533, !dbg !83
  %535 = fadd <8 x float> %504, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !84
  %536 = fmul <8 x float> %534, %535, !dbg !85
  %537 = fmul <8 x float> %536, %331, !dbg !57
  %538 = fadd <8 x float> %537, %495, !dbg !86
  %539 = fadd <8 x float> %517, %538, !dbg !87
  %540 = fadd <8 x float> %517, %539, !dbg !88
  %541 = fmul <8 x float> %514, %540, !dbg !89
  %542 = fmul <8 x float> %512, %541, !dbg !90
  %543 = insertelement <8 x i1> poison, i1 %340, i64 0, !dbg !91
  %544 = shufflevector <8 x i1> %543, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !91
  %545 = select <8 x i1> %544, <8 x float> %542, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !91
  %546 = fadd <8 x float> %335, %545, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  store <8 x float> %540, ptr addrspace(3) %320, align 32, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %547 = load <4 x i32>, ptr addrspace(3) %324, align 16, !dbg !92
  %.extract = load i32, ptr addrspace(3) %322, align 16, !dbg !92
  %.extract19 = load i32, ptr addrspace(3) %325, align 4, !dbg !92
  %.extract21 = load i32, ptr addrspace(3) %326, align 8, !dbg !92
  %.extract23 = load i32, ptr addrspace(3) %327, align 4, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract21, i32 %.extract23, ptr addrspace(1) %400, i1 %341) #3, !dbg !92
  %.extract25 = extractelement <4 x i32> %547, i64 0, !dbg !92
  %.extract27 = extractelement <4 x i32> %547, i64 1, !dbg !92
  %.extract29 = extractelement <4 x i32> %547, i64 2, !dbg !92
  %.extract31 = extractelement <4 x i32> %547, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract27, i32 %.extract29, i32 %.extract31, ptr addrspace(1) %402, i1 %342) #3, !dbg !92
  br i1 %333, label %332, label %548, !dbg !58

548:                                              ; preds = %332
  %549 = bitcast i32 %23 to float, !dbg !11
  %550 = bitcast i32 %25 to float, !dbg !11
  %551 = bitcast i32 %27 to float, !dbg !11
  %552 = bitcast i32 %29 to float, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %shift96 = shufflevector <8 x float> %546, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !95
  %553 = fadd <8 x float> %546, %shift96, !dbg !95
  %shift97 = shufflevector <8 x float> %546, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !95
  %554 = fadd <8 x float> %shift97, %553, !dbg !95
  %shift98 = shufflevector <8 x float> %546, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !95
  %555 = fadd <8 x float> %shift98, %554, !dbg !95
  %shift99 = shufflevector <8 x float> %546, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !95
  %556 = fadd <8 x float> %shift99, %555, !dbg !95
  %shift100 = shufflevector <8 x float> %546, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !95
  %557 = fadd <8 x float> %shift100, %556, !dbg !95
  %shift101 = shufflevector <8 x float> %546, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !95
  %558 = fadd <8 x float> %shift101, %557, !dbg !95
  %shift102 = shufflevector <8 x float> %546, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !95
  %559 = fadd <8 x float> %shift102, %558, !dbg !95
  %560 = extractelement <8 x float> %559, i64 0, !dbg !95
  %561 = bitcast float %560 to i32, !dbg !93
  %562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %561, i32 16, i32 31), !dbg !93
  %563 = bitcast i32 %562 to float, !dbg !93
  %564 = fadd float %560, %563, !dbg !95
  %565 = bitcast float %564 to i32, !dbg !93
  %566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %565, i32 8, i32 31), !dbg !93
  %567 = bitcast i32 %566 to float, !dbg !93
  %568 = fadd float %564, %567, !dbg !95
  %569 = bitcast float %568 to i32, !dbg !93
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 4, i32 31), !dbg !93
  %571 = bitcast i32 %570 to float, !dbg !93
  %572 = fadd float %568, %571, !dbg !95
  %573 = bitcast float %572 to i32, !dbg !93
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 2, i32 31), !dbg !93
  %575 = bitcast i32 %574 to float, !dbg !93
  %576 = fadd float %572, %575, !dbg !95
  %577 = bitcast float %576 to i32, !dbg !93
  %578 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %577, i32 1, i32 31), !dbg !93
  %579 = bitcast i32 %578 to float, !dbg !93
  %580 = fadd float %576, %579, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, float %580, i1 %246) #3, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %581 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %251, i1 %249) #3, !dbg !93
  %582 = bitcast float %581 to i32, !dbg !93
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 4, i32 31), !dbg !93
  %584 = bitcast i32 %583 to float, !dbg !93
  %585 = fadd float %581, %584, !dbg !95
  %586 = bitcast float %585 to i32, !dbg !93
  %587 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %586, i32 2, i32 31), !dbg !93
  %588 = bitcast i32 %587 to float, !dbg !93
  %589 = fadd float %585, %588, !dbg !95
  %590 = bitcast float %589 to i32, !dbg !93
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 1, i32 31), !dbg !93
  %592 = bitcast i32 %591 to float, !dbg !93
  %593 = fadd float %589, %592, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, float %593, i1 %267) #3, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %594 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !93
  %595 = fmul float %594, -5.000000e-01, !dbg !98
  %596 = fmul float %22, %22, !dbg !99
  %597 = fmul float %549, %549, !dbg !99
  %598 = fmul float %215, %215, !dbg !99
  %599 = fmul float %550, %550, !dbg !99
  %600 = fmul float %216, %216, !dbg !99
  %601 = fmul float %551, %551, !dbg !99
  %602 = fmul float %217, %217, !dbg !99
  %603 = fmul float %552, %552, !dbg !99
  %604 = fmul float %596, %22, !dbg !100
  %605 = fmul float %597, %549, !dbg !100
  %606 = fmul float %598, %215, !dbg !100
  %607 = fmul float %599, %550, !dbg !100
  %608 = fmul float %600, %216, !dbg !100
  %609 = fmul float %601, %551, !dbg !100
  %610 = fmul float %602, %217, !dbg !100
  %611 = fmul float %603, %552, !dbg !100
  %612 = fmul float %604, %595, !dbg !101
  %613 = fmul float %605, %595, !dbg !101
  %614 = fmul float %606, %595, !dbg !101
  %615 = fmul float %607, %595, !dbg !101
  %616 = fmul float %608, %595, !dbg !101
  %617 = fmul float %609, %595, !dbg !101
  %618 = fmul float %610, %595, !dbg !101
  %619 = fmul float %611, %595, !dbg !101
  %620 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %612, float 2.304000e+03) #3, !dbg !102
  %621 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %613, float 2.304000e+03) #3, !dbg !102
  %622 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %614, float 2.304000e+03) #3, !dbg !102
  %623 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %615, float 2.304000e+03) #3, !dbg !102
  %624 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %616, float 2.304000e+03) #3, !dbg !102
  %625 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %617, float 2.304000e+03) #3, !dbg !102
  %626 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %618, float 2.304000e+03) #3, !dbg !102
  %627 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %619, float 2.304000e+03) #3, !dbg !102
  br label %628, !dbg !103

628:                                              ; preds = %548, %628
  %629 = phi i1 [ true, %548 ], [ false, %628 ]
  %630 = phi i32 [ 0, %548 ], [ 2048, %628 ]
  %631 = or i32 %630, %15, !dbg !104
  %632 = or i32 %630, %16, !dbg !104
  %633 = icmp ult i32 %631, 2304, !dbg !105
  %634 = add i32 %631, %30, !dbg !106
  %635 = add i32 %632, %30, !dbg !106
  %636 = sext i32 %634 to i64, !dbg !107
  %637 = getelementptr float, ptr addrspace(1) %0, i64 %636, !dbg !107
  %638 = sext i32 %635 to i64, !dbg !107
  %639 = getelementptr float, ptr addrspace(1) %0, i64 %638, !dbg !107
  %640 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %637, i1 %633, i32 0, i1 %633, i32 0, i1 %633, i32 0, i1 %633, i32 0, i1 %633) #3, !dbg !108
  %641 = extractvalue { i32, i32, i32, i32 } %640, 0, !dbg !108
  %642 = extractvalue { i32, i32, i32, i32 } %640, 1, !dbg !108
  %643 = extractvalue { i32, i32, i32, i32 } %640, 2, !dbg !108
  %644 = extractvalue { i32, i32, i32, i32 } %640, 3, !dbg !108
  %645 = bitcast i32 %641 to float, !dbg !108
  %646 = bitcast i32 %642 to float, !dbg !108
  %647 = bitcast i32 %643 to float, !dbg !108
  %648 = bitcast i32 %644 to float, !dbg !108
  %649 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %639, i1 %633, i32 0, i1 %633, i32 0, i1 %633, i32 0, i1 %633, i32 0, i1 %633) #3, !dbg !108
  %650 = extractvalue { i32, i32, i32, i32 } %649, 0, !dbg !108
  %651 = extractvalue { i32, i32, i32, i32 } %649, 1, !dbg !108
  %652 = extractvalue { i32, i32, i32, i32 } %649, 2, !dbg !108
  %653 = extractvalue { i32, i32, i32, i32 } %649, 3, !dbg !108
  %654 = bitcast i32 %650 to float, !dbg !108
  %655 = bitcast i32 %651 to float, !dbg !108
  %656 = bitcast i32 %652 to float, !dbg !108
  %657 = bitcast i32 %653 to float, !dbg !108
  %658 = zext nneg i32 %631 to i64, !dbg !109
  %659 = getelementptr float, ptr addrspace(1) %6, i64 %658, !dbg !109
  %660 = zext nneg i32 %632 to i64, !dbg !109
  %661 = getelementptr float, ptr addrspace(1) %6, i64 %660, !dbg !109
  %662 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %659, i1 %633, i32 0, i1 %633, i32 0, i1 %633, i32 0, i1 %633, i32 0, i1 %633) #3, !dbg !110
  %663 = extractvalue { i32, i32, i32, i32 } %662, 0, !dbg !110
  %664 = extractvalue { i32, i32, i32, i32 } %662, 1, !dbg !110
  %665 = extractvalue { i32, i32, i32, i32 } %662, 2, !dbg !110
  %666 = extractvalue { i32, i32, i32, i32 } %662, 3, !dbg !110
  %667 = bitcast i32 %663 to float, !dbg !110
  %668 = bitcast i32 %664 to float, !dbg !110
  %669 = bitcast i32 %665 to float, !dbg !110
  %670 = bitcast i32 %666 to float, !dbg !110
  %671 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %661, i1 %633, i32 0, i1 %633, i32 0, i1 %633, i32 0, i1 %633, i32 0, i1 %633) #3, !dbg !110
  %672 = extractvalue { i32, i32, i32, i32 } %671, 0, !dbg !110
  %673 = extractvalue { i32, i32, i32, i32 } %671, 1, !dbg !110
  %674 = extractvalue { i32, i32, i32, i32 } %671, 2, !dbg !110
  %675 = extractvalue { i32, i32, i32, i32 } %671, 3, !dbg !110
  %676 = bitcast i32 %672 to float, !dbg !110
  %677 = bitcast i32 %673 to float, !dbg !110
  %678 = bitcast i32 %674 to float, !dbg !110
  %679 = bitcast i32 %675 to float, !dbg !110
  %680 = getelementptr i16, ptr addrspace(1) %4, i64 %636, !dbg !111
  %681 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %680, i1 %633, i32 0, i1 %633, i32 0, i1 %633, i32 0, i1 %633, i32 0, i1 %633) #3, !dbg !112
  %682 = extractvalue { i32, i32, i32, i32 } %681, 0, !dbg !112
  %683 = extractvalue { i32, i32, i32, i32 } %681, 1, !dbg !112
  %684 = extractvalue { i32, i32, i32, i32 } %681, 2, !dbg !112
  %685 = extractvalue { i32, i32, i32, i32 } %681, 3, !dbg !112
  %686 = trunc i32 %682 to i16, !dbg !112
  %extelt.offset = lshr i32 %682, 16, !dbg !112
  %687 = trunc i32 %extelt.offset to i16, !dbg !112
  %688 = trunc i32 %683 to i16, !dbg !112
  %extelt.offset3 = lshr i32 %683, 16, !dbg !112
  %689 = trunc i32 %extelt.offset3 to i16, !dbg !112
  %690 = trunc i32 %684 to i16, !dbg !112
  %extelt.offset4 = lshr i32 %684, 16, !dbg !112
  %691 = trunc i32 %extelt.offset4 to i16, !dbg !112
  %692 = trunc i32 %685 to i16, !dbg !112
  %extelt.offset5 = lshr i32 %685, 16, !dbg !112
  %693 = trunc i32 %extelt.offset5 to i16, !dbg !112
  %694 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %686) #3, !dbg !113
  %695 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %687) #3, !dbg !113
  %696 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %688) #3, !dbg !113
  %697 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %689) #3, !dbg !113
  %698 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %690) #3, !dbg !113
  %699 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %691) #3, !dbg !113
  %700 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %692) #3, !dbg !113
  %701 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %693) #3, !dbg !113
  %702 = fadd float %667, 1.000000e+00, !dbg !114
  %703 = fadd float %668, 1.000000e+00, !dbg !114
  %704 = fadd float %669, 1.000000e+00, !dbg !114
  %705 = fadd float %670, 1.000000e+00, !dbg !114
  %706 = fadd float %676, 1.000000e+00, !dbg !114
  %707 = fadd float %677, 1.000000e+00, !dbg !114
  %708 = fadd float %678, 1.000000e+00, !dbg !114
  %709 = fadd float %679, 1.000000e+00, !dbg !114
  %710 = fmul float %702, %645, !dbg !115
  %711 = fmul float %703, %646, !dbg !115
  %712 = fmul float %704, %647, !dbg !115
  %713 = fmul float %705, %648, !dbg !115
  %714 = fmul float %706, %654, !dbg !115
  %715 = fmul float %707, %655, !dbg !115
  %716 = fmul float %708, %656, !dbg !115
  %717 = fmul float %709, %657, !dbg !115
  %718 = fmul float %710, %22, !dbg !116
  %719 = fmul float %711, %22, !dbg !116
  %720 = fmul float %712, %22, !dbg !116
  %721 = fmul float %713, %22, !dbg !116
  %722 = fmul float %714, %22, !dbg !116
  %723 = fmul float %715, %22, !dbg !116
  %724 = fmul float %716, %22, !dbg !116
  %725 = fmul float %717, %22, !dbg !116
  %726 = fmul float %620, %694, !dbg !117
  %727 = fmul float %620, %695, !dbg !117
  %728 = fmul float %620, %696, !dbg !117
  %729 = fmul float %620, %697, !dbg !117
  %730 = fmul float %620, %698, !dbg !117
  %731 = fmul float %620, %699, !dbg !117
  %732 = fmul float %620, %700, !dbg !117
  %733 = fmul float %620, %701, !dbg !117
  %734 = fadd float %726, %718, !dbg !118
  %735 = fadd float %719, %727, !dbg !118
  %736 = fadd float %720, %728, !dbg !118
  %737 = fadd float %721, %729, !dbg !118
  %738 = fadd float %722, %730, !dbg !118
  %739 = fadd float %723, %731, !dbg !118
  %740 = fadd float %724, %732, !dbg !118
  %741 = fadd float %725, %733, !dbg !118
  %742 = fadd float %726, %734, !dbg !119
  %743 = fadd float %727, %735, !dbg !119
  %744 = fadd float %728, %736, !dbg !119
  %745 = fadd float %729, %737, !dbg !119
  %746 = fadd float %730, %738, !dbg !119
  %747 = fadd float %731, %739, !dbg !119
  %748 = fadd float %732, %740, !dbg !119
  %749 = fadd float %733, %741, !dbg !119
  %750 = getelementptr i16, ptr addrspace(1) %9, i64 %636, !dbg !120
  %751 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %742) #3, !dbg !121
  %752 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %743) #3, !dbg !121
  %753 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %744) #3, !dbg !121
  %754 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %745) #3, !dbg !121
  %755 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %746) #3, !dbg !121
  %756 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %747) #3, !dbg !121
  %757 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %748) #3, !dbg !121
  %758 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %749) #3, !dbg !121
  %759 = insertelement <2 x i16> undef, i16 %751, i64 0, !dbg !121
  %760 = insertelement <2 x i16> %759, i16 %752, i64 1, !dbg !121
  %761 = bitcast <2 x i16> %760 to i32, !dbg !121
  %762 = insertelement <2 x i16> undef, i16 %753, i64 0, !dbg !121
  %763 = insertelement <2 x i16> %762, i16 %754, i64 1, !dbg !121
  %764 = bitcast <2 x i16> %763 to i32, !dbg !121
  %765 = insertelement <2 x i16> undef, i16 %755, i64 0, !dbg !121
  %766 = insertelement <2 x i16> %765, i16 %756, i64 1, !dbg !121
  %767 = bitcast <2 x i16> %766 to i32, !dbg !121
  %768 = insertelement <2 x i16> undef, i16 %757, i64 0, !dbg !121
  %769 = insertelement <2 x i16> %768, i16 %758, i64 1, !dbg !121
  %770 = bitcast <2 x i16> %769 to i32, !dbg !121
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %761, i32 %764, i32 %767, i32 %770, ptr addrspace(1) %750, i1 %633) #3, !dbg !121
  br i1 %629, label %628, label %771, !dbg !103

771:                                              ; preds = %628
  ret void, !dbg !122
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "chusqupbcfbh7abdsrjb732wtjkkcgqytg25zwh45ebtlerrb6w2.py", directory: "/tmp/torchinductor_zeus/hu")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 26, column: 31, scope: !5)
!11 = !DILocation(line: 26, column: 36, scope: !5)
!12 = !DILocation(line: 32, column: 45, scope: !5)
!13 = !DILocation(line: 45, column: 24, scope: !5)
!14 = !DILocation(line: 28, column: 36, scope: !5)
!15 = !DILocation(line: 29, column: 27, scope: !5)
!16 = !DILocation(line: 30, column: 25, scope: !5)
!17 = !DILocation(line: 32, column: 40, scope: !5)
!18 = !DILocation(line: 32, column: 34, scope: !5)
!19 = !DILocation(line: 32, column: 51, scope: !5)
!20 = !DILocation(line: 32, column: 102, scope: !5)
!21 = !DILocation(line: 33, column: 34, scope: !5)
!22 = !DILocation(line: 33, column: 51, scope: !5)
!23 = !DILocation(line: 33, column: 102, scope: !5)
!24 = !DILocation(line: 34, column: 34, scope: !5)
!25 = !DILocation(line: 34, column: 39, scope: !5)
!26 = !DILocation(line: 35, column: 34, scope: !5)
!27 = !DILocation(line: 35, column: 51, scope: !5)
!28 = !DILocation(line: 35, column: 102, scope: !5)
!29 = !DILocation(line: 36, column: 35, scope: !5)
!30 = !DILocation(line: 36, column: 40, scope: !5)
!31 = !DILocation(line: 37, column: 35, scope: !5)
!32 = !DILocation(line: 37, column: 52, scope: !5)
!33 = !DILocation(line: 40, column: 22, scope: !5)
!34 = !DILocation(line: 42, column: 22, scope: !5)
!35 = !DILocation(line: 43, column: 22, scope: !5)
!36 = !DILocation(line: 46, column: 24, scope: !5)
!37 = !DILocation(line: 47, column: 24, scope: !5)
!38 = !DILocation(line: 50, column: 24, scope: !5)
!39 = !DILocation(line: 51, column: 23, scope: !5)
!40 = !DILocation(line: 54, column: 40, scope: !5)
!41 = !DILocation(line: 233, column: 15, scope: !42, inlinedAt: !45)
!42 = distinct !DILexicalBlockFile(scope: !44, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!44 = distinct !DILexicalBlockFile(scope: !5, file: !43, discriminator: 0)
!45 = !DILocation(line: 243, column: 36, scope: !42, inlinedAt: !46)
!46 = !DILocation(line: 55, column: 27, scope: !42)
!47 = !DILocation(line: 243, column: 36, scope: !44, inlinedAt: !48)
!48 = !DILocation(line: 55, column: 27, scope: !44)
!49 = !DILocation(line: 56, column: 31, scope: !5)
!50 = !DILocation(line: 56, column: 36, scope: !5)
!51 = !DILocation(line: 70, column: 24, scope: !5)
!52 = !DILocation(line: 71, column: 24, scope: !5)
!53 = !DILocation(line: 72, column: 24, scope: !5)
!54 = !DILocation(line: 73, column: 24, scope: !5)
!55 = !DILocation(line: 75, column: 24, scope: !5)
!56 = !DILocation(line: 84, column: 24, scope: !5)
!57 = !DILocation(line: 90, column: 24, scope: !5)
!58 = !DILocation(line: 58, column: 36, scope: !5)
!59 = !DILocation(line: 59, column: 27, scope: !5)
!60 = !DILocation(line: 60, column: 25, scope: !5)
!61 = !DILocation(line: 62, column: 41, scope: !5)
!62 = !DILocation(line: 62, column: 35, scope: !5)
!63 = !DILocation(line: 62, column: 52, scope: !5)
!64 = !DILocation(line: 62, column: 103, scope: !5)
!65 = !DILocation(line: 63, column: 35, scope: !5)
!66 = !DILocation(line: 63, column: 40, scope: !5)
!67 = !DILocation(line: 64, column: 35, scope: !5)
!68 = !DILocation(line: 64, column: 52, scope: !5)
!69 = !DILocation(line: 65, column: 39, scope: !5)
!70 = !DILocation(line: 65, column: 56, scope: !5)
!71 = !DILocation(line: 66, column: 35, scope: !5)
!72 = !DILocation(line: 66, column: 52, scope: !5)
!73 = !DILocation(line: 66, column: 104, scope: !5)
!74 = !DILocation(line: 67, column: 35, scope: !5)
!75 = !DILocation(line: 67, column: 52, scope: !5)
!76 = !DILocation(line: 67, column: 104, scope: !5)
!77 = !DILocation(line: 68, column: 35, scope: !5)
!78 = !DILocation(line: 68, column: 40, scope: !5)
!79 = !DILocation(line: 77, column: 24, scope: !5)
!80 = !DILocation(line: 79, column: 24, scope: !5)
!81 = !DILocation(line: 80, column: 24, scope: !5)
!82 = !DILocation(line: 83, column: 24, scope: !5)
!83 = !DILocation(line: 87, column: 24, scope: !5)
!84 = !DILocation(line: 88, column: 24, scope: !5)
!85 = !DILocation(line: 89, column: 24, scope: !5)
!86 = !DILocation(line: 91, column: 24, scope: !5)
!87 = !DILocation(line: 92, column: 24, scope: !5)
!88 = !DILocation(line: 93, column: 24, scope: !5)
!89 = !DILocation(line: 94, column: 24, scope: !5)
!90 = !DILocation(line: 95, column: 24, scope: !5)
!91 = !DILocation(line: 98, column: 40, scope: !5)
!92 = !DILocation(line: 99, column: 56, scope: !5)
!93 = !DILocation(line: 243, column: 36, scope: !44, inlinedAt: !94)
!94 = !DILocation(line: 100, column: 27, scope: !44)
!95 = !DILocation(line: 233, column: 15, scope: !42, inlinedAt: !96)
!96 = !DILocation(line: 243, column: 36, scope: !42, inlinedAt: !97)
!97 = !DILocation(line: 100, column: 27, scope: !42)
!98 = !DILocation(line: 113, column: 24, scope: !5)
!99 = !DILocation(line: 114, column: 24, scope: !5)
!100 = !DILocation(line: 115, column: 24, scope: !5)
!101 = !DILocation(line: 116, column: 24, scope: !5)
!102 = !DILocation(line: 118, column: 24, scope: !5)
!103 = !DILocation(line: 101, column: 36, scope: !5)
!104 = !DILocation(line: 102, column: 27, scope: !5)
!105 = !DILocation(line: 103, column: 25, scope: !5)
!106 = !DILocation(line: 105, column: 45, scope: !5)
!107 = !DILocation(line: 105, column: 39, scope: !5)
!108 = !DILocation(line: 105, column: 56, scope: !5)
!109 = !DILocation(line: 106, column: 35, scope: !5)
!110 = !DILocation(line: 106, column: 40, scope: !5)
!111 = !DILocation(line: 107, column: 35, scope: !5)
!112 = !DILocation(line: 107, column: 52, scope: !5)
!113 = !DILocation(line: 107, column: 104, scope: !5)
!114 = !DILocation(line: 109, column: 24, scope: !5)
!115 = !DILocation(line: 110, column: 24, scope: !5)
!116 = !DILocation(line: 111, column: 24, scope: !5)
!117 = !DILocation(line: 120, column: 24, scope: !5)
!118 = !DILocation(line: 121, column: 24, scope: !5)
!119 = !DILocation(line: 122, column: 24, scope: !5)
!120 = !DILocation(line: 124, column: 29, scope: !5)
!121 = !DILocation(line: 124, column: 53, scope: !5)
!122 = !DILocation(line: 101, column: 4, scope: !5)
