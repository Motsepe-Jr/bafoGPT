; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = shl i32 %5, 1, !dbg !10
  %7 = and i32 %6, 510, !dbg !10
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %9 = shl i32 %8, 9, !dbg !12
  %10 = or i32 %9, %7, !dbg !13
  %11 = sext i32 %10 to i64, !dbg !14
  %12 = getelementptr i16, ptr addrspace(1) %0, i64 %11, !dbg !14
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #4, !dbg !15
  %14 = trunc i32 %13 to i16, !dbg !15
  %extelt.offset = lshr i32 %13, 16, !dbg !15
  %15 = trunc i32 %extelt.offset to i16, !dbg !15
  %16 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %14) #4, !dbg !16
  %17 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %15) #4, !dbg !16
  %18 = getelementptr i16, ptr addrspace(1) %1, i64 %11, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #4, !dbg !18
  %20 = trunc i32 %19 to i16, !dbg !18
  %extelt.offset1 = lshr i32 %19, 16, !dbg !18
  %21 = trunc i32 %extelt.offset1 to i16, !dbg !18
  %22 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #4, !dbg !19
  %23 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #4, !dbg !19
  %24 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %22, float 3.000000e+01) #4, !dbg !20
  %25 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %23, float 3.000000e+01) #4, !dbg !20
  %26 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not.i = icmp eq i32 %26, 0, !dbg !21
  %27 = tail call float @llvm.nvvm.fabs.ftz.f(float %24) #4, !dbg !21
  %28 = tail call float @llvm.nvvm.fabs.f(float %24) #4, !dbg !21
  %.01.i = select i1 %.not.i, float %28, float %27, !dbg !21
  %29 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !21
  br i1 %29, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !21

__internal_fmad.exit1.i:                          ; preds = %4
  %30 = fmul float %.01.i, 0x4007154760000000, !dbg !21
  %31 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %30) #4, !dbg !21
  %32 = fadd float %31, 1.000000e+00, !dbg !21
  %33 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %32) #5, !dbg !21, !srcloc !22
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not6.i = icmp eq i32 %34, 0, !dbg !21
  %35 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %33, float -2.000000e+00, float 1.000000e+00) #4, !dbg !21
  %36 = tail call float @llvm.nvvm.fma.rn.f(float %33, float -2.000000e+00, float 1.000000e+00) #4, !dbg !21
  %.03.i = select i1 %.not6.i, float %36, float %35, !dbg !21
  %37 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !21
  %s.0.i = select i1 %37, float 1.000000e+00, float %.03.i, !dbg !21
  %38 = bitcast float %s.0.i to i32, !dbg !21
  %39 = bitcast float %24 to i32, !dbg !21
  %40 = and i32 %39, -2147483648, !dbg !21
  %41 = or i32 %40, %38, !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  br label %__nv_tanhf.exit, !dbg !21

__internal_fmad.exit3.i:                          ; preds = %4
  %43 = fmul float %24, %24, !dbg !21
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not1.i = icmp eq i32 %44, 0, !dbg !21
  %45 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %43, float 0xBFAAC795C0000000) #4, !dbg !21
  %46 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %43, float 0xBFAAC795C0000000) #4, !dbg !21
  %.06.i = select i1 %.not1.i, float %46, float %45, !dbg !21
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not2.i = icmp eq i32 %47, 0, !dbg !21
  %48 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %43, float 0x3FC10B2820000000) #4, !dbg !21
  %49 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %43, float 0x3FC10B2820000000) #4, !dbg !21
  %.05.i = select i1 %.not2.i, float %49, float %48, !dbg !21
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not3.i = icmp eq i32 %50, 0, !dbg !21
  %51 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %43, float 0xBFD5553DA0000000) #4, !dbg !21
  %52 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %43, float 0xBFD5553DA0000000) #4, !dbg !21
  %.0.i = select i1 %.not3.i, float %52, float %51, !dbg !21
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not4.i = icmp eq i32 %53, 0, !dbg !21
  %54 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %43, float 0.000000e+00) #4, !dbg !21
  %55 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %43, float 0.000000e+00) #4, !dbg !21
  %.04.i = select i1 %.not4.i, float %55, float %54, !dbg !21
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not5.i = icmp eq i32 %56, 0, !dbg !21
  %57 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %24, float %24) #4, !dbg !21
  %58 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %24, float %24) #4, !dbg !21
  %.02.i = select i1 %.not5.i, float %58, float %57, !dbg !21
  br label %__nv_tanhf.exit, !dbg !21

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %42, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !21
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not.i2 = icmp eq i32 %59, 0, !dbg !21
  %60 = tail call float @llvm.nvvm.fabs.ftz.f(float %25) #4, !dbg !21
  %61 = tail call float @llvm.nvvm.fabs.f(float %25) #4, !dbg !21
  %.01.i3 = select i1 %.not.i2, float %61, float %60, !dbg !21
  %62 = fcmp ult float %.01.i3, 0x3FE3333340000000, !dbg !21
  br i1 %62, label %__internal_fmad.exit3.i9, label %__internal_fmad.exit1.i4, !dbg !21

__internal_fmad.exit1.i4:                         ; preds = %__nv_tanhf.exit
  %63 = fmul float %.01.i3, 0x4007154760000000, !dbg !21
  %64 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %63) #4, !dbg !21
  %65 = fadd float %64, 1.000000e+00, !dbg !21
  %66 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %65) #5, !dbg !21, !srcloc !22
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not6.i5 = icmp eq i32 %67, 0, !dbg !21
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %66, float -2.000000e+00, float 1.000000e+00) #4, !dbg !21
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %66, float -2.000000e+00, float 1.000000e+00) #4, !dbg !21
  %.03.i6 = select i1 %.not6.i5, float %69, float %68, !dbg !21
  %70 = fcmp oge float %.01.i3, 0x4022059680000000, !dbg !21
  %s.0.i7 = select i1 %70, float 1.000000e+00, float %.03.i6, !dbg !21
  %71 = bitcast float %s.0.i7 to i32, !dbg !21
  %72 = bitcast float %25 to i32, !dbg !21
  %73 = and i32 %72, -2147483648, !dbg !21
  %74 = or i32 %73, %71, !dbg !21
  %75 = bitcast i32 %74 to float, !dbg !21
  br label %__nv_tanhf.exit20, !dbg !21

__internal_fmad.exit3.i9:                         ; preds = %__nv_tanhf.exit
  %76 = fmul float %25, %25, !dbg !21
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not1.i10 = icmp eq i32 %77, 0, !dbg !21
  %78 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %76, float 0xBFAAC795C0000000) #4, !dbg !21
  %79 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %76, float 0xBFAAC795C0000000) #4, !dbg !21
  %.06.i11 = select i1 %.not1.i10, float %79, float %78, !dbg !21
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not2.i12 = icmp eq i32 %80, 0, !dbg !21
  %81 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i11, float %76, float 0x3FC10B2820000000) #4, !dbg !21
  %82 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i11, float %76, float 0x3FC10B2820000000) #4, !dbg !21
  %.05.i13 = select i1 %.not2.i12, float %82, float %81, !dbg !21
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not3.i14 = icmp eq i32 %83, 0, !dbg !21
  %84 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i13, float %76, float 0xBFD5553DA0000000) #4, !dbg !21
  %85 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i13, float %76, float 0xBFD5553DA0000000) #4, !dbg !21
  %.0.i15 = select i1 %.not3.i14, float %85, float %84, !dbg !21
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not4.i16 = icmp eq i32 %86, 0, !dbg !21
  %87 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i15, float %76, float 0.000000e+00) #4, !dbg !21
  %88 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i15, float %76, float 0.000000e+00) #4, !dbg !21
  %.04.i17 = select i1 %.not4.i16, float %88, float %87, !dbg !21
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !21
  %.not5.i18 = icmp eq i32 %89, 0, !dbg !21
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i17, float %25, float %25) #4, !dbg !21
  %91 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i17, float %25, float %25) #4, !dbg !21
  %.02.i19 = select i1 %.not5.i18, float %91, float %90, !dbg !21
  br label %__nv_tanhf.exit20, !dbg !21

__nv_tanhf.exit20:                                ; preds = %__internal_fmad.exit1.i4, %__internal_fmad.exit3.i9
  %s.1.i8 = phi float [ %75, %__internal_fmad.exit1.i4 ], [ %.02.i19, %__internal_fmad.exit3.i9 ], !dbg !21
  %92 = fmul float %17, 3.000000e+01, !dbg !23
  %93 = fmul float %16, 3.000000e+01, !dbg !23
  %94 = fmul float %s.1.i, %s.1.i, !dbg !24
  %95 = fmul float %s.1.i8, %s.1.i8, !dbg !24
  %96 = fsub float 1.000000e+00, %94, !dbg !25
  %97 = fsub float 1.000000e+00, %95, !dbg !25
  %98 = fmul float %93, %96, !dbg !26
  %99 = fmul float %92, %97, !dbg !26
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 3.000000e+01) #4, !dbg !27
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 3.000000e+01) #4, !dbg !27
  %102 = getelementptr i16, ptr addrspace(1) %2, i64 %11, !dbg !28
  %103 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %100) #4, !dbg !29
  %104 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %101) #4, !dbg !29
  %105 = insertelement <2 x i16> undef, i16 %103, i64 0, !dbg !29
  %106 = insertelement <2 x i16> %105, i16 %104, i64 1, !dbg !29
  %107 = bitcast <2 x i16> %106 to i32, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %102, i1 true) #4, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: alwaysinline nounwind
define float @__nv_tanhf(float %a) local_unnamed_addr #1 {
__nv_fabsf.exit:
  %0 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not = icmp eq i32 %0, 0
  %1 = tail call float @llvm.nvvm.fabs.ftz.f(float %a) #4
  %2 = tail call float @llvm.nvvm.fabs.f(float %a) #4
  %.01 = select i1 %.not, float %2, float %1
  %3 = fcmp ult float %.01, 0x3FE3333340000000
  br i1 %3, label %__internal_fmad.exit3, label %__internal_fmad.exit1

__internal_fmad.exit1:                            ; preds = %__nv_fabsf.exit
  %4 = fmul float %.01, 0x4007154760000000
  %5 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %4) #4
  %6 = fadd float %5, 1.000000e+00
  %7 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %6) #5, !srcloc !22
  %8 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not6 = icmp eq i32 %8, 0
  %9 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %7, float -2.000000e+00, float 1.000000e+00) #4
  %10 = tail call float @llvm.nvvm.fma.rn.f(float %7, float -2.000000e+00, float 1.000000e+00) #4
  %.03 = select i1 %.not6, float %10, float %9
  %11 = fcmp oge float %.01, 0x4022059680000000
  %s.0 = select i1 %11, float 1.000000e+00, float %.03
  %12 = bitcast float %s.0 to i32
  %13 = bitcast float %a to i32
  %14 = and i32 %13, -2147483648
  %15 = or i32 %14, %12
  %16 = bitcast i32 %15 to float
  br label %33

__internal_fmad.exit3:                            ; preds = %__nv_fabsf.exit
  %17 = fmul float %a, %a
  %18 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not1 = icmp eq i32 %18, 0
  %19 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #4
  %20 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #4
  %.06 = select i1 %.not1, float %20, float %19
  %21 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not2 = icmp eq i32 %21, 0
  %22 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06, float %17, float 0x3FC10B2820000000) #4
  %23 = tail call float @llvm.nvvm.fma.rn.f(float %.06, float %17, float 0x3FC10B2820000000) #4
  %.05 = select i1 %.not2, float %23, float %22
  %24 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not3 = icmp eq i32 %24, 0
  %25 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05, float %17, float 0xBFD5553DA0000000) #4
  %26 = tail call float @llvm.nvvm.fma.rn.f(float %.05, float %17, float 0xBFD5553DA0000000) #4
  %.0 = select i1 %.not3, float %26, float %25
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not4 = icmp eq i32 %27, 0
  %28 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0, float %17, float 0.000000e+00) #4
  %29 = tail call float @llvm.nvvm.fma.rn.f(float %.0, float %17, float 0.000000e+00) #4
  %.04 = select i1 %.not4, float %29, float %28
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not5 = icmp eq i32 %30, 0
  %31 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04, float %a, float %a) #4
  %32 = tail call float @llvm.nvvm.fma.rn.f(float %.04, float %a, float %a) #4
  %.02 = select i1 %.not5, float %32, float %31
  br label %33

33:                                               ; preds = %__internal_fmad.exit3, %__internal_fmad.exit1
  %s.1 = phi float [ %16, %__internal_fmad.exit1 ], [ %.02, %__internal_fmad.exit3 ]
  ret float %s.1
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c6uod6n4syi7zk52k5hiylbi7nnwlvcglz4bbdscgkj7fqqkyxrf.py", directory: "/tmp/torchinductor_zeus/6u")
!4 = !{ptr @triton__0d1d2d3de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3de", linkageName: "triton__0d1d2d3de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 36, scope: !7)
!11 = !DILocation(line: 20, column: 28, scope: !7)
!12 = !DILocation(line: 20, column: 33, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 30, scope: !7)
!15 = !DILocation(line: 24, column: 35, scope: !7)
!16 = !DILocation(line: 24, column: 44, scope: !7)
!17 = !DILocation(line: 25, column: 30, scope: !7)
!18 = !DILocation(line: 25, column: 35, scope: !7)
!19 = !DILocation(line: 25, column: 44, scope: !7)
!20 = !DILocation(line: 29, column: 18, scope: !7)
!21 = !DILocation(line: 30, column: 24, scope: !7)
!22 = !{i32 21046}
!23 = !DILocation(line: 27, column: 18, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 34, column: 19, scope: !7)
!26 = !DILocation(line: 35, column: 19, scope: !7)
!27 = !DILocation(line: 37, column: 20, scope: !7)
!28 = !DILocation(line: 38, column: 25, scope: !7)
!29 = !DILocation(line: 38, column: 37, scope: !7)
!30 = !DILocation(line: 38, column: 4, scope: !7)
