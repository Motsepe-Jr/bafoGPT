; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_1 = internal constant [8 x i8] c"<module>"
@assertFile_1 = internal constant [95 x i8] c"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor/codecache.py"
@assertMessage_1 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp13 < 288256"
@assertFunc_0 = internal constant [8 x i8] c"<module>"
@assertFile_0 = internal constant [95 x i8] c"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor/codecache.py"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = and i32 %9, 7, !dbg !10
  %urem = shl i32 %7, 2, !dbg !10
  %11 = and i32 %urem, 1020, !dbg !10
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %13 = sext i32 %12 to i64, !dbg !12
  %14 = getelementptr i64, ptr addrspace(1) %0, i64 %13, !dbg !12
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 true) #6, !dbg !13
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 true) #6, !dbg !13
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 true) #6, !dbg !13
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 true) #6, !dbg !13
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 true) #6, !dbg !13
  %20 = add i64 %15, 288256, !dbg !14
  %21 = add i64 %19, 288256, !dbg !14
  %22 = icmp slt i64 %15, 0, !dbg !15
  %23 = icmp slt i64 %19, 0, !dbg !15
  %24 = select i1 %22, i64 %20, i64 %15, !dbg !16
  %25 = select i1 %23, i64 %21, i64 %19, !dbg !16
  %26 = icmp ugt i64 %25, 288255, !dbg !17
  %27 = mul i64 %24, 3584, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27
  br i1 %26, label %.split.us.preheader, label %.split.preheader, !dbg !19

.split.preheader:                                 ; preds = %6
  %29 = zext nneg i32 %11 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %28, i64 %29, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %36 = or i32 %11, 1024, !dbg !23
  %37 = zext nneg i32 %36 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %28, i64 %37, !dbg !21
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %44 = or i32 %11, 2048, !dbg !23
  %45 = zext nneg i32 %44 to i64, !dbg !20
  %46 = getelementptr float, ptr addrspace(1) %28, i64 %45, !dbg !21
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !22
  %52 = or i32 %11, 3072, !dbg !23
  %53 = icmp ult i32 %52, 3584, !dbg !24
  %54 = zext nneg i32 %52 to i64, !dbg !20
  %55 = getelementptr float, ptr addrspace(1) %28, i64 %54, !dbg !21
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #6, !dbg !22
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !22
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !22
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !22
  %61 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !22
  %62 = insertelement <4 x i32> %61, i32 %33, i64 1, !dbg !22
  %63 = insertelement <4 x i32> %62, i32 %34, i64 2, !dbg !22
  %64 = insertelement <4 x i32> %63, i32 %35, i64 3, !dbg !22
  %65 = bitcast <4 x i32> %64 to <4 x float>, !dbg !22
  %66 = fmul <4 x float> %65, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !25
  %67 = fmul <4 x float> %66, %66, !dbg !26
  %68 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !22
  %69 = insertelement <4 x i32> %68, i32 %41, i64 1, !dbg !22
  %70 = insertelement <4 x i32> %69, i32 %42, i64 2, !dbg !22
  %71 = insertelement <4 x i32> %70, i32 %43, i64 3, !dbg !22
  %72 = bitcast <4 x i32> %71 to <4 x float>, !dbg !22
  %73 = fmul <4 x float> %72, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !25
  %74 = fmul <4 x float> %73, %73, !dbg !26
  %75 = fadd <4 x float> %67, %74, !dbg !27
  %76 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !22
  %77 = insertelement <4 x i32> %76, i32 %49, i64 1, !dbg !22
  %78 = insertelement <4 x i32> %77, i32 %50, i64 2, !dbg !22
  %79 = insertelement <4 x i32> %78, i32 %51, i64 3, !dbg !22
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !22
  %81 = fmul <4 x float> %80, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !25
  %82 = fmul <4 x float> %81, %81, !dbg !26
  %83 = fadd <4 x float> %75, %82, !dbg !27
  %84 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !22
  %85 = insertelement <4 x i32> %84, i32 %58, i64 1, !dbg !22
  %86 = insertelement <4 x i32> %85, i32 %59, i64 2, !dbg !22
  %87 = insertelement <4 x i32> %86, i32 %60, i64 3, !dbg !22
  %88 = bitcast <4 x i32> %87 to <4 x float>, !dbg !22
  %89 = fmul <4 x float> %88, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !25
  %90 = fmul <4 x float> %89, %89, !dbg !26
  %91 = insertelement <4 x i1> poison, i1 %53, i64 0, !dbg !27
  %92 = shufflevector <4 x i1> %91, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !27
  %93 = select <4 x i1> %92, <4 x float> %90, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !27
  %94 = fadd <4 x float> %83, %93, !dbg !27
  br label %.split12.us, !dbg !28

.split.us.preheader:                              ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 1892, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  %95 = zext nneg i32 %11 to i64, !dbg !20
  %96 = getelementptr float, ptr addrspace(1) %28, i64 %95, !dbg !21
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !22
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !22
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !22
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !22
  %102 = or i32 %11, 1024, !dbg !23
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 1892, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  %103 = zext nneg i32 %102 to i64, !dbg !20
  %104 = getelementptr float, ptr addrspace(1) %28, i64 %103, !dbg !21
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %104, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !22
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !22
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !22
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !22
  %110 = or i32 %11, 2048, !dbg !23
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 1892, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  %111 = zext nneg i32 %110 to i64, !dbg !20
  %112 = getelementptr float, ptr addrspace(1) %28, i64 %111, !dbg !21
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !22
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !22
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !22
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !22
  %118 = or i32 %11, 3072, !dbg !23
  %119 = icmp ult i32 %118, 3584, !dbg !24
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 1892, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  %120 = zext nneg i32 %118 to i64, !dbg !20
  %121 = getelementptr float, ptr addrspace(1) %28, i64 %120, !dbg !21
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #6, !dbg !22
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !22
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !22
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !22
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !22
  %127 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !22
  %128 = insertelement <4 x i32> %127, i32 %99, i64 1, !dbg !22
  %129 = insertelement <4 x i32> %128, i32 %100, i64 2, !dbg !22
  %130 = insertelement <4 x i32> %129, i32 %101, i64 3, !dbg !22
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !22
  %132 = fmul <4 x float> %131, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !25
  %133 = fmul <4 x float> %132, %132, !dbg !26
  %134 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !22
  %135 = insertelement <4 x i32> %134, i32 %107, i64 1, !dbg !22
  %136 = insertelement <4 x i32> %135, i32 %108, i64 2, !dbg !22
  %137 = insertelement <4 x i32> %136, i32 %109, i64 3, !dbg !22
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !22
  %139 = fmul <4 x float> %138, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !25
  %140 = fmul <4 x float> %139, %139, !dbg !26
  %141 = fadd <4 x float> %133, %140, !dbg !27
  %142 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !22
  %143 = insertelement <4 x i32> %142, i32 %115, i64 1, !dbg !22
  %144 = insertelement <4 x i32> %143, i32 %116, i64 2, !dbg !22
  %145 = insertelement <4 x i32> %144, i32 %117, i64 3, !dbg !22
  %146 = bitcast <4 x i32> %145 to <4 x float>, !dbg !22
  %147 = fmul <4 x float> %146, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !25
  %148 = fmul <4 x float> %147, %147, !dbg !26
  %149 = fadd <4 x float> %141, %148, !dbg !27
  %150 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !22
  %151 = insertelement <4 x i32> %150, i32 %124, i64 1, !dbg !22
  %152 = insertelement <4 x i32> %151, i32 %125, i64 2, !dbg !22
  %153 = insertelement <4 x i32> %152, i32 %126, i64 3, !dbg !22
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !22
  %155 = fmul <4 x float> %154, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !25
  %156 = fmul <4 x float> %155, %155, !dbg !26
  %157 = insertelement <4 x i1> poison, i1 %119, i64 0, !dbg !27
  %158 = shufflevector <4 x i1> %157, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !27
  %159 = select <4 x i1> %158, <4 x float> %156, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !27
  %160 = fadd <4 x float> %149, %159, !dbg !27
  br label %.split12.us, !dbg !28

.split12.us:                                      ; preds = %.split.preheader, %.split.us.preheader
  %161 = phi <4 x float> [ %160, %.split.us.preheader ], [ %94, %.split.preheader ]
  %shift = shufflevector <4 x float> %161, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !32
  %162 = fadd <4 x float> %161, %shift, !dbg !32
  %shift22 = shufflevector <4 x float> %161, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !32
  %163 = fadd <4 x float> %shift22, %162, !dbg !32
  %shift23 = shufflevector <4 x float> %161, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !32
  %164 = fadd <4 x float> %shift23, %163, !dbg !32
  %165 = extractelement <4 x float> %164, i64 0, !dbg !32
  %166 = bitcast float %165 to i32, !dbg !28
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 16, i32 31), !dbg !28
  %168 = bitcast i32 %167 to float, !dbg !28
  %169 = fadd float %165, %168, !dbg !32
  %170 = bitcast float %169 to i32, !dbg !28
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 8, i32 31), !dbg !28
  %172 = bitcast i32 %171 to float, !dbg !28
  %173 = fadd float %169, %172, !dbg !32
  %174 = bitcast float %173 to i32, !dbg !28
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 4, i32 31), !dbg !28
  %176 = bitcast i32 %175 to float, !dbg !28
  %177 = fadd float %173, %176, !dbg !32
  %178 = bitcast float %177 to i32, !dbg !28
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !28
  %180 = bitcast i32 %179 to float, !dbg !28
  %181 = fadd float %177, %180, !dbg !32
  %182 = bitcast float %181 to i32, !dbg !28
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !28
  %184 = bitcast i32 %183 to float, !dbg !28
  %185 = fadd float %181, %184, !dbg !32
  %186 = icmp eq i32 %8, 0, !dbg !28
  %187 = zext nneg i32 %10 to i64, !dbg !28
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i64 %187, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, float %185, i1 %186) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %189 = icmp slt i32 %7, 8, !dbg !28
  %190 = sext i32 %7 to i64, !dbg !28
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i64 %190, !dbg !28
  %192 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %191, i1 %189) #6, !dbg !28
  %193 = bitcast float %192 to i32, !dbg !28
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 4, i32 31), !dbg !28
  %195 = bitcast i32 %194 to float, !dbg !28
  %196 = fadd float %192, %195, !dbg !32
  %197 = bitcast float %196 to i32, !dbg !28
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 2, i32 31), !dbg !28
  %199 = bitcast i32 %198 to float, !dbg !28
  %200 = fadd float %196, %199, !dbg !32
  %201 = bitcast float %200 to i32, !dbg !28
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !28
  %203 = bitcast i32 %202 to float, !dbg !28
  %204 = fadd float %200, %203, !dbg !32
  %205 = and i32 %7, 7, !dbg !28
  %206 = icmp eq i32 %205, 0, !dbg !28
  %207 = and i1 %189, %206, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, float %204, i1 %207) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %208 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !28
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float 3.584000e+03) #6, !dbg !36
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float 3.584000e+03) #6, !dbg !36
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float 3.584000e+03) #6, !dbg !36
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float 3.584000e+03) #6, !dbg !36
  %213 = fadd float %209, 0x3EE4F8B580000000, !dbg !37
  %214 = mul i32 %12, 3584, !dbg !38
  br label %215, !dbg !39

215:                                              ; preds = %.split12.us, %__nv_rsqrtf.exit
  %216 = phi i32 [ 0, %.split12.us ], [ %279, %__nv_rsqrtf.exit ]
  %217 = or i32 %216, %11, !dbg !40
  %218 = icmp ult i32 %217, 3584, !dbg !41
  %219 = zext nneg i32 %217 to i64, !dbg !42
  %220 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !42
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %220, i1 %218, i32 0, i1 %218, i32 0, i1 %218, i32 0, i1 %218, i32 0, i1 %218) #6, !dbg !43
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !43
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !43
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !43
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !43
  %226 = bitcast i32 %222 to float, !dbg !43
  %227 = bitcast i32 %223 to float, !dbg !43
  %228 = bitcast i32 %224 to float, !dbg !43
  %229 = bitcast i32 %225 to float, !dbg !43
  br i1 %26, label %230, label %231, !dbg !44

230:                                              ; preds = %215
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 1892, ptr nonnull @assertFunc_1, i64 1), !dbg !44
  br label %231, !dbg !44

231:                                              ; preds = %230, %215
  %232 = getelementptr float, ptr addrspace(1) %28, i64 %219, !dbg !45
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %232, i1 %218, i32 0, i1 %218, i32 0, i1 %218, i32 0, i1 %218, i32 0, i1 %218) #6, !dbg !46
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !46
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !46
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !46
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !46
  %238 = bitcast i32 %234 to float, !dbg !46
  %239 = bitcast i32 %235 to float, !dbg !46
  %240 = bitcast i32 %236 to float, !dbg !46
  %241 = bitcast i32 %237 to float, !dbg !46
  %242 = fmul float %238, 0x404DEEEA20000000, !dbg !47
  %243 = fmul float %239, 0x404DEEEA20000000, !dbg !47
  %244 = fmul float %240, 0x404DEEEA20000000, !dbg !47
  %245 = fmul float %241, 0x404DEEEA20000000, !dbg !47
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %.not.i = icmp eq i32 %246, 0, !dbg !48
  br i1 %.not.i, label %249, label %247, !dbg !48

247:                                              ; preds = %231
  %248 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %213), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

249:                                              ; preds = %231
  %250 = tail call float @llvm.nvvm.rsqrt.approx.f(float %213), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

__nv_rsqrtf.exit:                                 ; preds = %247, %249
  %.0.i = phi float [ %248, %247 ], [ %250, %249 ], !dbg !48
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %254 = fmul float %242, %.0.i, !dbg !49
  %255 = fmul float %243, %.0.i, !dbg !49
  %256 = fmul float %244, %.0.i, !dbg !49
  %257 = fmul float %245, %.0.i, !dbg !49
  %258 = fadd float %226, 1.000000e+00, !dbg !50
  %259 = fadd float %227, 1.000000e+00, !dbg !50
  %260 = fadd float %228, 1.000000e+00, !dbg !50
  %261 = fadd float %229, 1.000000e+00, !dbg !50
  %262 = fmul float %258, %254, !dbg !51
  %263 = fmul float %259, %255, !dbg !51
  %264 = fmul float %260, %256, !dbg !51
  %265 = fmul float %261, %257, !dbg !51
  %266 = add i32 %217, %214, !dbg !52
  %267 = sext i32 %266 to i64, !dbg !53
  %268 = getelementptr i16, ptr addrspace(1) %3, i64 %267, !dbg !53
  %269 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %262) #6, !dbg !54
  %270 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %263) #6, !dbg !54
  %271 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %264) #6, !dbg !54
  %272 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %265) #6, !dbg !54
  %273 = insertelement <2 x i16> undef, i16 %269, i64 0, !dbg !54
  %274 = insertelement <2 x i16> %273, i16 %270, i64 1, !dbg !54
  %275 = bitcast <2 x i16> %274 to i32, !dbg !54
  %276 = insertelement <2 x i16> undef, i16 %271, i64 0, !dbg !54
  %277 = insertelement <2 x i16> %276, i16 %272, i64 1, !dbg !54
  %278 = bitcast <2 x i16> %277 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %275, i32 %278, ptr addrspace(1) %268, i1 %218) #6, !dbg !54
  %279 = add nuw nsw i32 %216, 1024, !dbg !39
  %280 = icmp ult i32 %216, 2560, !dbg !39
  br i1 %280, label %215, label %281, !dbg !39

281:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cumpuhquvpop75y2akhr6lpul5sosmsqycsz36lbhje3533k3abl.py", directory: "/tmp/torchinductor_zeus/um")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 26, column: 30, scope: !7)
!13 = !DILocation(line: 26, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 22, scope: !7)
!15 = !DILocation(line: 33, column: 22, scope: !7)
!16 = !DILocation(line: 34, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 40, scope: !7)
!18 = !DILocation(line: 36, column: 45, scope: !7)
!19 = !DILocation(line: 35, column: 56, scope: !7)
!20 = !DILocation(line: 36, column: 40, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 53, scope: !7)
!23 = !DILocation(line: 29, column: 27, scope: !7)
!24 = !DILocation(line: 30, column: 25, scope: !7)
!25 = !DILocation(line: 38, column: 22, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 42, column: 39, scope: !7)
!28 = !DILocation(line: 243, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!31 = !DILocation(line: 43, column: 25, scope: !29)
!32 = !DILocation(line: 233, column: 15, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 243, column: 36, scope: !33, inlinedAt: !35)
!35 = !DILocation(line: 43, column: 25, scope: !33)
!36 = !DILocation(line: 57, column: 23, scope: !7)
!37 = !DILocation(line: 59, column: 24, scope: !7)
!38 = !DILocation(line: 66, column: 40, scope: !7)
!39 = !DILocation(line: 44, column: 36, scope: !7)
!40 = !DILocation(line: 45, column: 27, scope: !7)
!41 = !DILocation(line: 46, column: 25, scope: !7)
!42 = !DILocation(line: 48, column: 35, scope: !7)
!43 = !DILocation(line: 48, column: 40, scope: !7)
!44 = !DILocation(line: 52, column: 58, scope: !7)
!45 = !DILocation(line: 53, column: 35, scope: !7)
!46 = !DILocation(line: 53, column: 55, scope: !7)
!47 = !DILocation(line: 55, column: 24, scope: !7)
!48 = !DILocation(line: 60, column: 30, scope: !7)
!49 = !DILocation(line: 61, column: 24, scope: !7)
!50 = !DILocation(line: 63, column: 24, scope: !7)
!51 = !DILocation(line: 64, column: 24, scope: !7)
!52 = !DILocation(line: 66, column: 35, scope: !7)
!53 = !DILocation(line: 66, column: 29, scope: !7)
!54 = !DILocation(line: 66, column: 53, scope: !7)
!55 = !DILocation(line: 44, column: 4, scope: !7)
