; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 127, !dbg !8
  %9 = shl nuw nsw i32 %8, 3, !dbg !8
  %10 = or i32 %8, 128, !dbg !8
  %11 = or i32 %8, 256, !dbg !8
  %12 = or i32 %8, 384, !dbg !8
  %13 = or i32 %8, 512, !dbg !8
  %14 = or i32 %8, 640, !dbg !8
  %15 = or i32 %8, 768, !dbg !8
  %16 = or i32 %8, 896, !dbg !8
  %17 = shl nuw nsw i32 %8, 2, !dbg !8
  %18 = or i32 %17, 512, !dbg !8
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %20 = shl i32 %19, 10, !dbg !10
  %21 = or i32 %20, %9, !dbg !11
  %22 = or i32 %20, %8, !dbg !11
  %23 = or i32 %20, %10, !dbg !11
  %24 = or i32 %20, %11, !dbg !11
  %25 = or i32 %20, %12, !dbg !11
  %26 = or i32 %20, %14, !dbg !11
  %27 = or i32 %20, %15, !dbg !11
  %28 = or i32 %20, %16, !dbg !11
  %29 = or i32 %20, %17, !dbg !11
  %30 = or i32 %20, %18, !dbg !11
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %32 = icmp slt i32 %31, 256, !dbg !13
  %.frozen = freeze i32 %21
  %33 = sdiv i32 %.frozen, 512, !dbg !14
  %34 = mul i32 %33, 512
  %.decomposed = sub i32 %.frozen, %34
  %35 = srem i32 %22, 512, !dbg !15
  %36 = srem i32 %23, 512, !dbg !15
  %37 = srem i32 %24, 512, !dbg !15
  %38 = srem i32 %25, 512, !dbg !15
  %39 = srem i32 %26, 512, !dbg !15
  %40 = srem i32 %27, 512, !dbg !15
  %41 = srem i32 %28, 512, !dbg !15
  %.frozen46 = freeze i32 %29
  %42 = sdiv i32 %.frozen46, 512, !dbg !14
  %43 = mul i32 %42, 512
  %.decomposed47 = sub i32 %.frozen46, %43
  %.frozen48 = freeze i32 %30
  %44 = sdiv i32 %.frozen48, 512, !dbg !14
  %45 = mul i32 %44, 512
  %.decomposed49 = sub i32 %.frozen48, %45
  %46 = shl i32 %31, 9, !dbg !16
  %47 = add i32 %.decomposed, %46, !dbg !17
  %48 = add i32 %.decomposed47, %46, !dbg !17
  %49 = add i32 %.decomposed49, %46, !dbg !17
  %50 = shl i32 %33, 18, !dbg !18
  %51 = add i32 %47, %50, !dbg !19
  %52 = sext i32 %51 to i64, !dbg !20
  %53 = getelementptr i16, ptr addrspace(1) %0, i64 %52, !dbg !20
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %32) #2, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !21
  %59 = trunc i32 %55 to i16, !dbg !21
  %extelt.offset = lshr i32 %55, 16, !dbg !21
  %60 = trunc i32 %extelt.offset to i16, !dbg !21
  %61 = trunc i32 %56 to i16, !dbg !21
  %extelt.offset1 = lshr i32 %56, 16, !dbg !21
  %62 = trunc i32 %extelt.offset1 to i16, !dbg !21
  %63 = trunc i32 %57 to i16, !dbg !21
  %extelt.offset2 = lshr i32 %57, 16, !dbg !21
  %64 = trunc i32 %extelt.offset2 to i16, !dbg !21
  %65 = trunc i32 %58 to i16, !dbg !21
  %extelt.offset3 = lshr i32 %58, 16, !dbg !21
  %66 = trunc i32 %extelt.offset3 to i16, !dbg !21
  %67 = shl nuw nsw i32 %8, 4, !dbg !22
  %68 = zext nneg i32 %67 to i64, !dbg !22
  %69 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %68, !dbg !22
  %70 = insertelement <1 x i16> undef, i16 %59, i64 0, !dbg !22
  store <1 x i16> %70, ptr addrspace(3) %69, align 2, !dbg !22
  %71 = or i32 %67, 2, !dbg !22
  %72 = zext nneg i32 %71 to i64, !dbg !22
  %73 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %72, !dbg !22
  %74 = insertelement <1 x i16> undef, i16 %60, i64 0, !dbg !22
  store <1 x i16> %74, ptr addrspace(3) %73, align 2, !dbg !22
  %75 = or i32 %67, 4, !dbg !22
  %76 = zext nneg i32 %75 to i64, !dbg !22
  %77 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %76, !dbg !22
  %78 = insertelement <1 x i16> undef, i16 %61, i64 0, !dbg !22
  store <1 x i16> %78, ptr addrspace(3) %77, align 2, !dbg !22
  %79 = or i32 %67, 6, !dbg !22
  %80 = zext nneg i32 %79 to i64, !dbg !22
  %81 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %80, !dbg !22
  %82 = insertelement <1 x i16> undef, i16 %62, i64 0, !dbg !22
  store <1 x i16> %82, ptr addrspace(3) %81, align 2, !dbg !22
  %83 = or i32 %67, 8, !dbg !22
  %84 = zext nneg i32 %83 to i64, !dbg !22
  %85 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %84, !dbg !22
  %86 = insertelement <1 x i16> undef, i16 %63, i64 0, !dbg !22
  store <1 x i16> %86, ptr addrspace(3) %85, align 2, !dbg !22
  %87 = or i32 %67, 10, !dbg !22
  %88 = zext nneg i32 %87 to i64, !dbg !22
  %89 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %88, !dbg !22
  %90 = insertelement <1 x i16> undef, i16 %64, i64 0, !dbg !22
  store <1 x i16> %90, ptr addrspace(3) %89, align 2, !dbg !22
  %91 = or i32 %67, 12, !dbg !22
  %92 = zext nneg i32 %91 to i64, !dbg !22
  %93 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %92, !dbg !22
  %94 = insertelement <1 x i16> undef, i16 %65, i64 0, !dbg !22
  store <1 x i16> %94, ptr addrspace(3) %93, align 2, !dbg !22
  %95 = or i32 %67, 14, !dbg !22
  %96 = zext nneg i32 %95 to i64, !dbg !22
  %97 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %96, !dbg !22
  %98 = insertelement <1 x i16> undef, i16 %66, i64 0, !dbg !22
  store <1 x i16> %98, ptr addrspace(3) %97, align 2, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %99 = shl nuw nsw i32 %8, 1, !dbg !22
  %100 = zext nneg i32 %99 to i64, !dbg !22
  %101 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %100, !dbg !22
  %102 = load i16, ptr addrspace(3) %101, align 2, !dbg !22
  %103 = shl nuw nsw i32 %10, 1, !dbg !22
  %104 = zext nneg i32 %103 to i64, !dbg !22
  %105 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %104, !dbg !22
  %106 = load i16, ptr addrspace(3) %105, align 2, !dbg !22
  %107 = shl nuw nsw i32 %11, 1, !dbg !22
  %108 = zext nneg i32 %107 to i64, !dbg !22
  %109 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %108, !dbg !22
  %110 = load i16, ptr addrspace(3) %109, align 2, !dbg !22
  %111 = shl nuw nsw i32 %12, 1, !dbg !22
  %112 = zext nneg i32 %111 to i64, !dbg !22
  %113 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %112, !dbg !22
  %114 = load i16, ptr addrspace(3) %113, align 2, !dbg !22
  %115 = shl nuw nsw i32 %13, 1, !dbg !22
  %116 = zext nneg i32 %115 to i64, !dbg !22
  %117 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %116, !dbg !22
  %118 = load i16, ptr addrspace(3) %117, align 2, !dbg !22
  %119 = shl nuw nsw i32 %14, 1, !dbg !22
  %120 = zext nneg i32 %119 to i64, !dbg !22
  %121 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %120, !dbg !22
  %122 = load i16, ptr addrspace(3) %121, align 2, !dbg !22
  %123 = shl nuw nsw i32 %15, 1, !dbg !22
  %124 = zext nneg i32 %123 to i64, !dbg !22
  %125 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %124, !dbg !22
  %126 = load i16, ptr addrspace(3) %125, align 2, !dbg !22
  %127 = shl nuw nsw i32 %16, 1, !dbg !22
  %128 = zext nneg i32 %127 to i64, !dbg !22
  %129 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %128, !dbg !22
  %130 = load i16, ptr addrspace(3) %129, align 2, !dbg !22
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #2, !dbg !22
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #2, !dbg !22
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #2, !dbg !22
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #2, !dbg !22
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #2, !dbg !22
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #2, !dbg !22
  %137 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #2, !dbg !22
  %138 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %130) #2, !dbg !22
  %139 = shl nsw i32 %35, 8, !dbg !23
  %140 = shl nsw i32 %36, 8, !dbg !23
  %141 = shl nsw i32 %37, 8, !dbg !23
  %142 = shl nsw i32 %38, 8, !dbg !23
  %143 = shl nsw i32 %39, 8, !dbg !23
  %144 = shl nsw i32 %40, 8, !dbg !23
  %145 = shl nsw i32 %41, 8, !dbg !23
  %146 = add i32 %139, %31, !dbg !24
  %147 = add i32 %140, %31, !dbg !24
  %148 = add i32 %141, %31, !dbg !24
  %149 = add i32 %142, %31, !dbg !24
  %150 = add i32 %143, %31, !dbg !24
  %151 = add i32 %144, %31, !dbg !24
  %152 = add i32 %145, %31, !dbg !24
  %153 = sext i32 %146 to i64, !dbg !25
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !25
  %155 = sext i32 %147 to i64, !dbg !25
  %156 = getelementptr float, ptr addrspace(1) %1, i64 %155, !dbg !25
  %157 = sext i32 %148 to i64, !dbg !25
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %157, !dbg !25
  %159 = sext i32 %149 to i64, !dbg !25
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %159, !dbg !25
  %161 = sext i32 %150 to i64, !dbg !25
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !25
  %163 = sext i32 %151 to i64, !dbg !25
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !25
  %165 = sext i32 %152 to i64, !dbg !25
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !25
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %32) #2, !dbg !26
  %168 = bitcast i32 %167 to float, !dbg !26
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %32) #2, !dbg !26
  %170 = bitcast i32 %169 to float, !dbg !26
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %32) #2, !dbg !26
  %172 = bitcast i32 %171 to float, !dbg !26
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %32) #2, !dbg !26
  %174 = bitcast i32 %173 to float, !dbg !26
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %32) #2, !dbg !26
  %176 = bitcast i32 %175 to float, !dbg !26
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %32) #2, !dbg !26
  %178 = bitcast i32 %177 to float, !dbg !26
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %32) #2, !dbg !26
  %180 = bitcast i32 %179 to float, !dbg !26
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %32) #2, !dbg !26
  %182 = bitcast i32 %181 to float, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %183 = zext nneg i32 %8 to i64, !dbg !26
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i64 %183, !dbg !26
  %185 = insertelement <1 x float> undef, float %168, i64 0, !dbg !26
  store <1 x float> %185, ptr addrspace(3) %184, align 4, !dbg !26
  %186 = zext nneg i32 %10 to i64, !dbg !26
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !26
  %188 = insertelement <1 x float> undef, float %170, i64 0, !dbg !26
  store <1 x float> %188, ptr addrspace(3) %187, align 4, !dbg !26
  %189 = zext nneg i32 %11 to i64, !dbg !26
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i64 %189, !dbg !26
  %191 = insertelement <1 x float> undef, float %172, i64 0, !dbg !26
  store <1 x float> %191, ptr addrspace(3) %190, align 4, !dbg !26
  %192 = zext nneg i32 %12 to i64, !dbg !26
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i64 %192, !dbg !26
  %194 = insertelement <1 x float> undef, float %174, i64 0, !dbg !26
  store <1 x float> %194, ptr addrspace(3) %193, align 4, !dbg !26
  %195 = zext nneg i32 %13 to i64, !dbg !26
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i64 %195, !dbg !26
  %197 = insertelement <1 x float> undef, float %176, i64 0, !dbg !26
  store <1 x float> %197, ptr addrspace(3) %196, align 4, !dbg !26
  %198 = zext nneg i32 %14 to i64, !dbg !26
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i64 %198, !dbg !26
  %200 = insertelement <1 x float> undef, float %178, i64 0, !dbg !26
  store <1 x float> %200, ptr addrspace(3) %199, align 4, !dbg !26
  %201 = zext nneg i32 %15 to i64, !dbg !26
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i64 %201, !dbg !26
  %203 = insertelement <1 x float> undef, float %180, i64 0, !dbg !26
  store <1 x float> %203, ptr addrspace(3) %202, align 4, !dbg !26
  %204 = zext nneg i32 %16 to i64, !dbg !26
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i64 %204, !dbg !26
  %206 = insertelement <1 x float> undef, float %182, i64 0, !dbg !26
  store <1 x float> %206, ptr addrspace(3) %205, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %207 = zext nneg i32 %9 to i64, !dbg !26
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i64 %207, !dbg !26
  %209 = add i32 %47, 131072, !dbg !27
  %210 = add i32 %209, %50, !dbg !28
  %211 = sext i32 %210 to i64, !dbg !29
  %212 = getelementptr i16, ptr addrspace(1) %0, i64 %211, !dbg !29
  %213 = icmp sgt i32 %31, 255, !dbg !30
  %214 = fmul float %131, %168, !dbg !31
  %215 = fmul float %132, %170, !dbg !31
  %216 = fmul float %133, %172, !dbg !31
  %217 = fmul float %134, %174, !dbg !31
  %218 = fmul float %135, %176, !dbg !31
  %219 = fmul float %136, %178, !dbg !31
  %220 = fmul float %137, %180, !dbg !31
  %221 = fmul float %138, %182, !dbg !31
  %222 = icmp sgt i32 %31, 127, !dbg !32
  %223 = add i32 %47, -65536, !dbg !33
  %224 = add i32 %223, %50, !dbg !34
  %225 = sext i32 %224 to i64, !dbg !35
  %226 = getelementptr i16, ptr addrspace(1) %0, i64 %225, !dbg !35
  %227 = and i32 %31, -128, !dbg !36
  %228 = icmp eq i32 %227, 128, !dbg !36
  %229 = add i32 %31, -128, !dbg !37
  %230 = add i32 %139, %229, !dbg !38
  %231 = add i32 %140, %229, !dbg !38
  %232 = add i32 %141, %229, !dbg !38
  %233 = add i32 %142, %229, !dbg !38
  %234 = add i32 %143, %229, !dbg !38
  %235 = add i32 %144, %229, !dbg !38
  %236 = add i32 %145, %229, !dbg !38
  %237 = sext i32 %230 to i64, !dbg !39
  %238 = getelementptr float, ptr addrspace(1) %2, i64 %237, !dbg !39
  %239 = sext i32 %231 to i64, !dbg !39
  %240 = getelementptr float, ptr addrspace(1) %2, i64 %239, !dbg !39
  %241 = sext i32 %232 to i64, !dbg !39
  %242 = getelementptr float, ptr addrspace(1) %2, i64 %241, !dbg !39
  %243 = sext i32 %233 to i64, !dbg !39
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !39
  %245 = sext i32 %234 to i64, !dbg !39
  %246 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !39
  %247 = sext i32 %235 to i64, !dbg !39
  %248 = getelementptr float, ptr addrspace(1) %2, i64 %247, !dbg !39
  %249 = sext i32 %236 to i64, !dbg !39
  %250 = getelementptr float, ptr addrspace(1) %2, i64 %249, !dbg !39
  %251 = icmp slt i32 %31, 128, !dbg !40
  %252 = add i32 %47, 65536, !dbg !41
  %253 = add i32 %252, %50, !dbg !42
  %254 = sext i32 %253 to i64, !dbg !43
  %255 = getelementptr i16, ptr addrspace(1) %0, i64 %254, !dbg !43
  %256 = add i32 %31, 128, !dbg !44
  %257 = add i32 %139, %256, !dbg !45
  %258 = add i32 %140, %256, !dbg !45
  %259 = add i32 %141, %256, !dbg !45
  %260 = add i32 %142, %256, !dbg !45
  %261 = add i32 %143, %256, !dbg !45
  %262 = add i32 %144, %256, !dbg !45
  %263 = add i32 %145, %256, !dbg !45
  %264 = sext i32 %257 to i64, !dbg !46
  %265 = getelementptr float, ptr addrspace(1) %2, i64 %264, !dbg !46
  %266 = sext i32 %258 to i64, !dbg !46
  %267 = getelementptr float, ptr addrspace(1) %2, i64 %266, !dbg !46
  %268 = sext i32 %259 to i64, !dbg !46
  %269 = getelementptr float, ptr addrspace(1) %2, i64 %268, !dbg !46
  %270 = sext i32 %260 to i64, !dbg !46
  %271 = getelementptr float, ptr addrspace(1) %2, i64 %270, !dbg !46
  %272 = sext i32 %261 to i64, !dbg !46
  %273 = getelementptr float, ptr addrspace(1) %2, i64 %272, !dbg !46
  %274 = sext i32 %262 to i64, !dbg !46
  %275 = getelementptr float, ptr addrspace(1) %2, i64 %274, !dbg !46
  %276 = sext i32 %263 to i64, !dbg !46
  %277 = getelementptr float, ptr addrspace(1) %2, i64 %276, !dbg !46
  %278 = add i32 %47, 196608, !dbg !47
  %279 = add i32 %278, %50, !dbg !48
  %280 = sext i32 %279 to i64, !dbg !49
  %281 = getelementptr i16, ptr addrspace(1) %0, i64 %280, !dbg !49
  %282 = load <8 x float>, ptr addrspace(3) %208, align 32, !dbg !26
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %212, i1 %32) #2, !dbg !50
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !50
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !50
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !50
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !50
  %288 = trunc i32 %284 to i16, !dbg !50
  %extelt.offset4 = lshr i32 %284, 16, !dbg !50
  %289 = trunc i32 %extelt.offset4 to i16, !dbg !50
  %290 = trunc i32 %285 to i16, !dbg !50
  %extelt.offset5 = lshr i32 %285, 16, !dbg !50
  %291 = trunc i32 %extelt.offset5 to i16, !dbg !50
  %292 = trunc i32 %286 to i16, !dbg !50
  %extelt.offset6 = lshr i32 %286, 16, !dbg !50
  %293 = trunc i32 %extelt.offset6 to i16, !dbg !50
  %294 = trunc i32 %287 to i16, !dbg !50
  %extelt.offset7 = lshr i32 %287, 16, !dbg !50
  %295 = trunc i32 %extelt.offset7 to i16, !dbg !50
  %296 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %288) #2, !dbg !51
  %297 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %289) #2, !dbg !51
  %298 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %290) #2, !dbg !51
  %299 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %291) #2, !dbg !51
  %300 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %292) #2, !dbg !51
  %301 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %293) #2, !dbg !51
  %302 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %294) #2, !dbg !51
  %303 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %295) #2, !dbg !51
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !52
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !52
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !52
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !52
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !52
  %309 = trunc i32 %305 to i16, !dbg !52
  %extelt.offset8 = lshr i32 %305, 16, !dbg !52
  %310 = trunc i32 %extelt.offset8 to i16, !dbg !52
  %311 = trunc i32 %306 to i16, !dbg !52
  %extelt.offset9 = lshr i32 %306, 16, !dbg !52
  %312 = trunc i32 %extelt.offset9 to i16, !dbg !52
  %313 = trunc i32 %307 to i16, !dbg !52
  %extelt.offset10 = lshr i32 %307, 16, !dbg !52
  %314 = trunc i32 %extelt.offset10 to i16, !dbg !52
  %315 = trunc i32 %308 to i16, !dbg !52
  %extelt.offset11 = lshr i32 %308, 16, !dbg !52
  %316 = trunc i32 %extelt.offset11 to i16, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %317 = insertelement <1 x i16> undef, i16 %309, i64 0, !dbg !53
  store <1 x i16> %317, ptr addrspace(3) %69, align 2, !dbg !53
  %318 = insertelement <1 x i16> undef, i16 %310, i64 0, !dbg !53
  store <1 x i16> %318, ptr addrspace(3) %73, align 2, !dbg !53
  %319 = insertelement <1 x i16> undef, i16 %311, i64 0, !dbg !53
  store <1 x i16> %319, ptr addrspace(3) %77, align 2, !dbg !53
  %320 = insertelement <1 x i16> undef, i16 %312, i64 0, !dbg !53
  store <1 x i16> %320, ptr addrspace(3) %81, align 2, !dbg !53
  %321 = insertelement <1 x i16> undef, i16 %313, i64 0, !dbg !53
  store <1 x i16> %321, ptr addrspace(3) %85, align 2, !dbg !53
  %322 = insertelement <1 x i16> undef, i16 %314, i64 0, !dbg !53
  store <1 x i16> %322, ptr addrspace(3) %89, align 2, !dbg !53
  %323 = insertelement <1 x i16> undef, i16 %315, i64 0, !dbg !53
  store <1 x i16> %323, ptr addrspace(3) %93, align 2, !dbg !53
  %324 = insertelement <1 x i16> undef, i16 %316, i64 0, !dbg !53
  store <1 x i16> %324, ptr addrspace(3) %97, align 2, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %325 = load i16, ptr addrspace(3) %101, align 2, !dbg !53
  %326 = load i16, ptr addrspace(3) %105, align 2, !dbg !53
  %327 = load i16, ptr addrspace(3) %109, align 2, !dbg !53
  %328 = load i16, ptr addrspace(3) %113, align 2, !dbg !53
  %329 = load i16, ptr addrspace(3) %117, align 2, !dbg !53
  %330 = load i16, ptr addrspace(3) %121, align 2, !dbg !53
  %331 = load i16, ptr addrspace(3) %125, align 2, !dbg !53
  %332 = load i16, ptr addrspace(3) %129, align 2, !dbg !53
  %333 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %325) #2, !dbg !54
  %334 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %326) #2, !dbg !54
  %335 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %327) #2, !dbg !54
  %336 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %328) #2, !dbg !54
  %337 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %329) #2, !dbg !54
  %338 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %330) #2, !dbg !54
  %339 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %331) #2, !dbg !54
  %340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %332) #2, !dbg !54
  %341 = select i1 %213, float %333, float 0.000000e+00, !dbg !53
  %342 = select i1 %213, float %334, float 0.000000e+00, !dbg !53
  %343 = select i1 %213, float %335, float 0.000000e+00, !dbg !53
  %344 = select i1 %213, float %336, float 0.000000e+00, !dbg !53
  %345 = select i1 %213, float %337, float 0.000000e+00, !dbg !53
  %346 = select i1 %213, float %338, float 0.000000e+00, !dbg !53
  %347 = select i1 %213, float %339, float 0.000000e+00, !dbg !53
  %348 = select i1 %213, float %340, float 0.000000e+00, !dbg !53
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %226, i1 %228, i32 0, i1 %228, i32 0, i1 %228, i32 0, i1 %228, i32 0, i1 %228) #2, !dbg !55
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !55
  %351 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !55
  %352 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !55
  %353 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !55
  %354 = trunc i32 %350 to i16, !dbg !55
  %extelt.offset12 = lshr i32 %350, 16, !dbg !55
  %355 = trunc i32 %extelt.offset12 to i16, !dbg !55
  %356 = trunc i32 %351 to i16, !dbg !55
  %extelt.offset13 = lshr i32 %351, 16, !dbg !55
  %357 = trunc i32 %extelt.offset13 to i16, !dbg !55
  %358 = trunc i32 %352 to i16, !dbg !55
  %extelt.offset14 = lshr i32 %352, 16, !dbg !55
  %359 = trunc i32 %extelt.offset14 to i16, !dbg !55
  %360 = trunc i32 %353 to i16, !dbg !55
  %extelt.offset15 = lshr i32 %353, 16, !dbg !55
  %361 = trunc i32 %extelt.offset15 to i16, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %362 = insertelement <1 x i16> undef, i16 %354, i64 0, !dbg !56
  store <1 x i16> %362, ptr addrspace(3) %69, align 2, !dbg !56
  %363 = insertelement <1 x i16> undef, i16 %355, i64 0, !dbg !56
  store <1 x i16> %363, ptr addrspace(3) %73, align 2, !dbg !56
  %364 = insertelement <1 x i16> undef, i16 %356, i64 0, !dbg !56
  store <1 x i16> %364, ptr addrspace(3) %77, align 2, !dbg !56
  %365 = insertelement <1 x i16> undef, i16 %357, i64 0, !dbg !56
  store <1 x i16> %365, ptr addrspace(3) %81, align 2, !dbg !56
  %366 = insertelement <1 x i16> undef, i16 %358, i64 0, !dbg !56
  store <1 x i16> %366, ptr addrspace(3) %85, align 2, !dbg !56
  %367 = insertelement <1 x i16> undef, i16 %359, i64 0, !dbg !56
  store <1 x i16> %367, ptr addrspace(3) %89, align 2, !dbg !56
  %368 = insertelement <1 x i16> undef, i16 %360, i64 0, !dbg !56
  store <1 x i16> %368, ptr addrspace(3) %93, align 2, !dbg !56
  %369 = insertelement <1 x i16> undef, i16 %361, i64 0, !dbg !56
  store <1 x i16> %369, ptr addrspace(3) %97, align 2, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %370 = load i16, ptr addrspace(3) %101, align 2, !dbg !56
  %371 = load i16, ptr addrspace(3) %105, align 2, !dbg !56
  %372 = load i16, ptr addrspace(3) %109, align 2, !dbg !56
  %373 = load i16, ptr addrspace(3) %113, align 2, !dbg !56
  %374 = load i16, ptr addrspace(3) %117, align 2, !dbg !56
  %375 = load i16, ptr addrspace(3) %121, align 2, !dbg !56
  %376 = load i16, ptr addrspace(3) %125, align 2, !dbg !56
  %377 = load i16, ptr addrspace(3) %129, align 2, !dbg !56
  %378 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %370) #2, !dbg !56
  %379 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %371) #2, !dbg !56
  %380 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %372) #2, !dbg !56
  %381 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %373) #2, !dbg !56
  %382 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %374) #2, !dbg !56
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #2, !dbg !56
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %376) #2, !dbg !56
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #2, !dbg !56
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %228, i32 0, i1 %228) #2, !dbg !57
  %387 = bitcast i32 %386 to float, !dbg !57
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %228, i32 0, i1 %228) #2, !dbg !57
  %389 = bitcast i32 %388 to float, !dbg !57
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %228, i32 0, i1 %228) #2, !dbg !57
  %391 = bitcast i32 %390 to float, !dbg !57
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %228, i32 0, i1 %228) #2, !dbg !57
  %393 = bitcast i32 %392 to float, !dbg !57
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %228, i32 0, i1 %228) #2, !dbg !57
  %395 = bitcast i32 %394 to float, !dbg !57
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %228, i32 0, i1 %228) #2, !dbg !57
  %397 = bitcast i32 %396 to float, !dbg !57
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %228, i32 0, i1 %228) #2, !dbg !57
  %399 = bitcast i32 %398 to float, !dbg !57
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %228, i32 0, i1 %228) #2, !dbg !57
  %401 = bitcast i32 %400 to float, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %402 = insertelement <1 x float> undef, float %387, i64 0, !dbg !57
  store <1 x float> %402, ptr addrspace(3) %184, align 4, !dbg !57
  %403 = insertelement <1 x float> undef, float %389, i64 0, !dbg !57
  store <1 x float> %403, ptr addrspace(3) %187, align 4, !dbg !57
  %404 = insertelement <1 x float> undef, float %391, i64 0, !dbg !57
  store <1 x float> %404, ptr addrspace(3) %190, align 4, !dbg !57
  %405 = insertelement <1 x float> undef, float %393, i64 0, !dbg !57
  store <1 x float> %405, ptr addrspace(3) %193, align 4, !dbg !57
  %406 = insertelement <1 x float> undef, float %395, i64 0, !dbg !57
  store <1 x float> %406, ptr addrspace(3) %196, align 4, !dbg !57
  %407 = insertelement <1 x float> undef, float %397, i64 0, !dbg !57
  store <1 x float> %407, ptr addrspace(3) %199, align 4, !dbg !57
  %408 = insertelement <1 x float> undef, float %399, i64 0, !dbg !57
  store <1 x float> %408, ptr addrspace(3) %202, align 4, !dbg !57
  %409 = insertelement <1 x float> undef, float %401, i64 0, !dbg !57
  store <1 x float> %409, ptr addrspace(3) %205, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %410 = load <8 x float>, ptr addrspace(3) %208, align 32, !dbg !57
  %411 = fmul float %378, %387, !dbg !58
  %412 = fmul float %379, %389, !dbg !58
  %413 = fmul float %380, %391, !dbg !58
  %414 = fmul float %381, %393, !dbg !58
  %415 = fmul float %382, %395, !dbg !58
  %416 = fmul float %383, %397, !dbg !58
  %417 = fmul float %384, %399, !dbg !58
  %418 = fmul float %385, %401, !dbg !58
  %419 = fsub float 0.000000e+00, %411, !dbg !59
  %420 = fsub float 0.000000e+00, %412, !dbg !59
  %421 = fsub float 0.000000e+00, %413, !dbg !59
  %422 = fsub float 0.000000e+00, %414, !dbg !59
  %423 = fsub float 0.000000e+00, %415, !dbg !59
  %424 = fsub float 0.000000e+00, %416, !dbg !59
  %425 = fsub float 0.000000e+00, %417, !dbg !59
  %426 = fsub float 0.000000e+00, %418, !dbg !59
  %427 = select i1 %222, float %419, float 0.000000e+00, !dbg !53
  %428 = select i1 %222, float %420, float 0.000000e+00, !dbg !53
  %429 = select i1 %222, float %421, float 0.000000e+00, !dbg !53
  %430 = select i1 %222, float %422, float 0.000000e+00, !dbg !53
  %431 = select i1 %222, float %423, float 0.000000e+00, !dbg !53
  %432 = select i1 %222, float %424, float 0.000000e+00, !dbg !53
  %433 = select i1 %222, float %425, float 0.000000e+00, !dbg !53
  %434 = select i1 %222, float %426, float 0.000000e+00, !dbg !53
  %435 = fadd float %214, %427, !dbg !60
  %436 = fadd float %215, %428, !dbg !60
  %437 = fadd float %216, %429, !dbg !60
  %438 = fadd float %217, %430, !dbg !60
  %439 = fadd float %218, %431, !dbg !60
  %440 = fadd float %219, %432, !dbg !60
  %441 = fadd float %220, %433, !dbg !60
  %442 = fadd float %221, %434, !dbg !60
  %443 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %255, i1 %251, i32 0, i1 %251, i32 0, i1 %251, i32 0, i1 %251, i32 0, i1 %251) #2, !dbg !61
  %444 = extractvalue { i32, i32, i32, i32 } %443, 0, !dbg !61
  %445 = extractvalue { i32, i32, i32, i32 } %443, 1, !dbg !61
  %446 = extractvalue { i32, i32, i32, i32 } %443, 2, !dbg !61
  %447 = extractvalue { i32, i32, i32, i32 } %443, 3, !dbg !61
  %448 = trunc i32 %444 to i16, !dbg !61
  %extelt.offset16 = lshr i32 %444, 16, !dbg !61
  %449 = trunc i32 %extelt.offset16 to i16, !dbg !61
  %450 = trunc i32 %445 to i16, !dbg !61
  %extelt.offset17 = lshr i32 %445, 16, !dbg !61
  %451 = trunc i32 %extelt.offset17 to i16, !dbg !61
  %452 = trunc i32 %446 to i16, !dbg !61
  %extelt.offset18 = lshr i32 %446, 16, !dbg !61
  %453 = trunc i32 %extelt.offset18 to i16, !dbg !61
  %454 = trunc i32 %447 to i16, !dbg !61
  %extelt.offset19 = lshr i32 %447, 16, !dbg !61
  %455 = trunc i32 %extelt.offset19 to i16, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %456 = insertelement <1 x i16> undef, i16 %448, i64 0, !dbg !62
  store <1 x i16> %456, ptr addrspace(3) %69, align 2, !dbg !62
  %457 = insertelement <1 x i16> undef, i16 %449, i64 0, !dbg !62
  store <1 x i16> %457, ptr addrspace(3) %73, align 2, !dbg !62
  %458 = insertelement <1 x i16> undef, i16 %450, i64 0, !dbg !62
  store <1 x i16> %458, ptr addrspace(3) %77, align 2, !dbg !62
  %459 = insertelement <1 x i16> undef, i16 %451, i64 0, !dbg !62
  store <1 x i16> %459, ptr addrspace(3) %81, align 2, !dbg !62
  %460 = insertelement <1 x i16> undef, i16 %452, i64 0, !dbg !62
  store <1 x i16> %460, ptr addrspace(3) %85, align 2, !dbg !62
  %461 = insertelement <1 x i16> undef, i16 %453, i64 0, !dbg !62
  store <1 x i16> %461, ptr addrspace(3) %89, align 2, !dbg !62
  %462 = insertelement <1 x i16> undef, i16 %454, i64 0, !dbg !62
  store <1 x i16> %462, ptr addrspace(3) %93, align 2, !dbg !62
  %463 = insertelement <1 x i16> undef, i16 %455, i64 0, !dbg !62
  store <1 x i16> %463, ptr addrspace(3) %97, align 2, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %464 = load i16, ptr addrspace(3) %101, align 2, !dbg !62
  %465 = load i16, ptr addrspace(3) %105, align 2, !dbg !62
  %466 = load i16, ptr addrspace(3) %109, align 2, !dbg !62
  %467 = load i16, ptr addrspace(3) %113, align 2, !dbg !62
  %468 = load i16, ptr addrspace(3) %117, align 2, !dbg !62
  %469 = load i16, ptr addrspace(3) %121, align 2, !dbg !62
  %470 = load i16, ptr addrspace(3) %125, align 2, !dbg !62
  %471 = load i16, ptr addrspace(3) %129, align 2, !dbg !62
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #2, !dbg !62
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %465) #2, !dbg !62
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %466) #2, !dbg !62
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %467) #2, !dbg !62
  %476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %468) #2, !dbg !62
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %469) #2, !dbg !62
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %470) #2, !dbg !62
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %471) #2, !dbg !62
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %265, i1 %251, i32 0, i1 %251) #2, !dbg !63
  %481 = bitcast i32 %480 to float, !dbg !63
  %482 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %251, i32 0, i1 %251) #2, !dbg !63
  %483 = bitcast i32 %482 to float, !dbg !63
  %484 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %251, i32 0, i1 %251) #2, !dbg !63
  %485 = bitcast i32 %484 to float, !dbg !63
  %486 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %251, i32 0, i1 %251) #2, !dbg !63
  %487 = bitcast i32 %486 to float, !dbg !63
  %488 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %265, i1 %251, i32 0, i1 %251) #2, !dbg !63
  %489 = bitcast i32 %488 to float, !dbg !63
  %490 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %273, i1 %251, i32 0, i1 %251) #2, !dbg !63
  %491 = bitcast i32 %490 to float, !dbg !63
  %492 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %275, i1 %251, i32 0, i1 %251) #2, !dbg !63
  %493 = bitcast i32 %492 to float, !dbg !63
  %494 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %251, i32 0, i1 %251) #2, !dbg !63
  %495 = bitcast i32 %494 to float, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %496 = insertelement <1 x float> undef, float %481, i64 0, !dbg !63
  store <1 x float> %496, ptr addrspace(3) %184, align 4, !dbg !63
  %497 = insertelement <1 x float> undef, float %483, i64 0, !dbg !63
  store <1 x float> %497, ptr addrspace(3) %187, align 4, !dbg !63
  %498 = insertelement <1 x float> undef, float %485, i64 0, !dbg !63
  store <1 x float> %498, ptr addrspace(3) %190, align 4, !dbg !63
  %499 = insertelement <1 x float> undef, float %487, i64 0, !dbg !63
  store <1 x float> %499, ptr addrspace(3) %193, align 4, !dbg !63
  %500 = insertelement <1 x float> undef, float %489, i64 0, !dbg !63
  store <1 x float> %500, ptr addrspace(3) %196, align 4, !dbg !63
  %501 = insertelement <1 x float> undef, float %491, i64 0, !dbg !63
  store <1 x float> %501, ptr addrspace(3) %199, align 4, !dbg !63
  %502 = insertelement <1 x float> undef, float %493, i64 0, !dbg !63
  store <1 x float> %502, ptr addrspace(3) %202, align 4, !dbg !63
  %503 = insertelement <1 x float> undef, float %495, i64 0, !dbg !63
  store <1 x float> %503, ptr addrspace(3) %205, align 4, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %504 = load <8 x float>, ptr addrspace(3) %208, align 32, !dbg !63
  %505 = fmul float %472, %481, !dbg !64
  %506 = fmul float %473, %483, !dbg !64
  %507 = fmul float %474, %485, !dbg !64
  %508 = fmul float %475, %487, !dbg !64
  %509 = fmul float %476, %489, !dbg !64
  %510 = fmul float %477, %491, !dbg !64
  %511 = fmul float %478, %493, !dbg !64
  %512 = fmul float %479, %495, !dbg !64
  %513 = select i1 %251, float %505, float 0.000000e+00, !dbg !53
  %514 = select i1 %251, float %506, float 0.000000e+00, !dbg !53
  %515 = select i1 %251, float %507, float 0.000000e+00, !dbg !53
  %516 = select i1 %251, float %508, float 0.000000e+00, !dbg !53
  %517 = select i1 %251, float %509, float 0.000000e+00, !dbg !53
  %518 = select i1 %251, float %510, float 0.000000e+00, !dbg !53
  %519 = select i1 %251, float %511, float 0.000000e+00, !dbg !53
  %520 = select i1 %251, float %512, float 0.000000e+00, !dbg !53
  %521 = fadd float %435, %513, !dbg !65
  %522 = fadd float %436, %514, !dbg !65
  %523 = fadd float %437, %515, !dbg !65
  %524 = fadd float %438, %516, !dbg !65
  %525 = fadd float %439, %517, !dbg !65
  %526 = fadd float %440, %518, !dbg !65
  %527 = fadd float %441, %519, !dbg !65
  %528 = fadd float %442, %520, !dbg !65
  %529 = fadd float %341, %521, !dbg !66
  %530 = fadd float %342, %522, !dbg !66
  %531 = fadd float %343, %523, !dbg !66
  %532 = fadd float %344, %524, !dbg !66
  %533 = fadd float %345, %525, !dbg !66
  %534 = fadd float %346, %526, !dbg !66
  %535 = fadd float %347, %527, !dbg !66
  %536 = fadd float %348, %528, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %537 = insertelement <1 x float> undef, float %529, i64 0, !dbg !66
  store <1 x float> %537, ptr addrspace(3) %184, align 4, !dbg !66
  %538 = insertelement <1 x float> undef, float %530, i64 0, !dbg !66
  store <1 x float> %538, ptr addrspace(3) %187, align 4, !dbg !66
  %539 = insertelement <1 x float> undef, float %531, i64 0, !dbg !66
  store <1 x float> %539, ptr addrspace(3) %190, align 4, !dbg !66
  %540 = insertelement <1 x float> undef, float %532, i64 0, !dbg !66
  store <1 x float> %540, ptr addrspace(3) %193, align 4, !dbg !66
  %541 = insertelement <1 x float> undef, float %533, i64 0, !dbg !66
  store <1 x float> %541, ptr addrspace(3) %196, align 4, !dbg !66
  %542 = insertelement <1 x float> undef, float %534, i64 0, !dbg !66
  store <1 x float> %542, ptr addrspace(3) %199, align 4, !dbg !66
  %543 = insertelement <1 x float> undef, float %535, i64 0, !dbg !66
  store <1 x float> %543, ptr addrspace(3) %202, align 4, !dbg !66
  %544 = insertelement <1 x float> undef, float %536, i64 0, !dbg !66
  store <1 x float> %544, ptr addrspace(3) %205, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %545 = load <8 x float>, ptr addrspace(3) %208, align 32, !dbg !66
  %546 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %212, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !67
  %547 = extractvalue { i32, i32, i32, i32 } %546, 0, !dbg !67
  %548 = extractvalue { i32, i32, i32, i32 } %546, 1, !dbg !67
  %549 = extractvalue { i32, i32, i32, i32 } %546, 2, !dbg !67
  %550 = extractvalue { i32, i32, i32, i32 } %546, 3, !dbg !67
  %551 = trunc i32 %547 to i16, !dbg !67
  %extelt.offset20 = lshr i32 %547, 16, !dbg !67
  %552 = trunc i32 %extelt.offset20 to i16, !dbg !67
  %553 = trunc i32 %548 to i16, !dbg !67
  %extelt.offset21 = lshr i32 %548, 16, !dbg !67
  %554 = trunc i32 %extelt.offset21 to i16, !dbg !67
  %555 = trunc i32 %549 to i16, !dbg !67
  %extelt.offset22 = lshr i32 %549, 16, !dbg !67
  %556 = trunc i32 %extelt.offset22 to i16, !dbg !67
  %557 = trunc i32 %550 to i16, !dbg !67
  %extelt.offset23 = lshr i32 %550, 16, !dbg !67
  %558 = trunc i32 %extelt.offset23 to i16, !dbg !67
  %559 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %551) #2, !dbg !68
  %560 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %552) #2, !dbg !68
  %561 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %553) #2, !dbg !68
  %562 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %554) #2, !dbg !68
  %563 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %555) #2, !dbg !68
  %564 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %556) #2, !dbg !68
  %565 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %557) #2, !dbg !68
  %566 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %558) #2, !dbg !68
  %567 = insertelement <8 x i1> poison, i1 %213, i64 0, !dbg !53
  %568 = shufflevector <8 x i1> %567, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %569 = insertelement <8 x float> poison, float %559, i64 0, !dbg !53
  %570 = insertelement <8 x float> %569, float %560, i64 1, !dbg !53
  %571 = insertelement <8 x float> %570, float %561, i64 2, !dbg !53
  %572 = insertelement <8 x float> %571, float %562, i64 3, !dbg !53
  %573 = insertelement <8 x float> %572, float %563, i64 4, !dbg !53
  %574 = insertelement <8 x float> %573, float %564, i64 5, !dbg !53
  %575 = insertelement <8 x float> %574, float %565, i64 6, !dbg !53
  %576 = insertelement <8 x float> %575, float %566, i64 7, !dbg !53
  %577 = select <8 x i1> %568, <8 x float> %576, <8 x float> zeroinitializer, !dbg !53
  %578 = insertelement <8 x float> poison, float %296, i64 0, !dbg !69
  %579 = insertelement <8 x float> %578, float %297, i64 1, !dbg !69
  %580 = insertelement <8 x float> %579, float %298, i64 2, !dbg !69
  %581 = insertelement <8 x float> %580, float %299, i64 3, !dbg !69
  %582 = insertelement <8 x float> %581, float %300, i64 4, !dbg !69
  %583 = insertelement <8 x float> %582, float %301, i64 5, !dbg !69
  %584 = insertelement <8 x float> %583, float %302, i64 6, !dbg !69
  %585 = insertelement <8 x float> %584, float %303, i64 7, !dbg !69
  %586 = fmul <8 x float> %282, %585, !dbg !69
  %587 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %255, i1 %228, i32 0, i1 %228, i32 0, i1 %228, i32 0, i1 %228, i32 0, i1 %228) #2, !dbg !70
  %588 = extractvalue { i32, i32, i32, i32 } %587, 0, !dbg !70
  %589 = extractvalue { i32, i32, i32, i32 } %587, 1, !dbg !70
  %590 = extractvalue { i32, i32, i32, i32 } %587, 2, !dbg !70
  %591 = extractvalue { i32, i32, i32, i32 } %587, 3, !dbg !70
  %592 = trunc i32 %588 to i16, !dbg !70
  %extelt.offset24 = lshr i32 %588, 16, !dbg !70
  %593 = trunc i32 %extelt.offset24 to i16, !dbg !70
  %594 = trunc i32 %589 to i16, !dbg !70
  %extelt.offset25 = lshr i32 %589, 16, !dbg !70
  %595 = trunc i32 %extelt.offset25 to i16, !dbg !70
  %596 = trunc i32 %590 to i16, !dbg !70
  %extelt.offset26 = lshr i32 %590, 16, !dbg !70
  %597 = trunc i32 %extelt.offset26 to i16, !dbg !70
  %598 = trunc i32 %591 to i16, !dbg !70
  %extelt.offset27 = lshr i32 %591, 16, !dbg !70
  %599 = trunc i32 %extelt.offset27 to i16, !dbg !70
  %600 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %592) #2, !dbg !71
  %601 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %593) #2, !dbg !71
  %602 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %594) #2, !dbg !71
  %603 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %595) #2, !dbg !71
  %604 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %596) #2, !dbg !71
  %605 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %597) #2, !dbg !71
  %606 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %598) #2, !dbg !71
  %607 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %599) #2, !dbg !71
  %608 = insertelement <8 x float> poison, float %600, i64 0, !dbg !72
  %609 = insertelement <8 x float> %608, float %601, i64 1, !dbg !72
  %610 = insertelement <8 x float> %609, float %602, i64 2, !dbg !72
  %611 = insertelement <8 x float> %610, float %603, i64 3, !dbg !72
  %612 = insertelement <8 x float> %611, float %604, i64 4, !dbg !72
  %613 = insertelement <8 x float> %612, float %605, i64 5, !dbg !72
  %614 = insertelement <8 x float> %613, float %606, i64 6, !dbg !72
  %615 = insertelement <8 x float> %614, float %607, i64 7, !dbg !72
  %616 = fmul <8 x float> %410, %615, !dbg !72
  %617 = fsub <8 x float> zeroinitializer, %616, !dbg !73
  %618 = insertelement <8 x i1> poison, i1 %222, i64 0, !dbg !53
  %619 = shufflevector <8 x i1> %618, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %620 = select <8 x i1> %619, <8 x float> %617, <8 x float> zeroinitializer, !dbg !53
  %621 = fadd <8 x float> %586, %620, !dbg !74
  %622 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %281, i1 %251, i32 0, i1 %251, i32 0, i1 %251, i32 0, i1 %251, i32 0, i1 %251) #2, !dbg !75
  %623 = extractvalue { i32, i32, i32, i32 } %622, 0, !dbg !75
  %624 = extractvalue { i32, i32, i32, i32 } %622, 1, !dbg !75
  %625 = extractvalue { i32, i32, i32, i32 } %622, 2, !dbg !75
  %626 = extractvalue { i32, i32, i32, i32 } %622, 3, !dbg !75
  %627 = trunc i32 %623 to i16, !dbg !75
  %extelt.offset28 = lshr i32 %623, 16, !dbg !75
  %628 = trunc i32 %extelt.offset28 to i16, !dbg !75
  %629 = trunc i32 %624 to i16, !dbg !75
  %extelt.offset29 = lshr i32 %624, 16, !dbg !75
  %630 = trunc i32 %extelt.offset29 to i16, !dbg !75
  %631 = trunc i32 %625 to i16, !dbg !75
  %extelt.offset30 = lshr i32 %625, 16, !dbg !75
  %632 = trunc i32 %extelt.offset30 to i16, !dbg !75
  %633 = trunc i32 %626 to i16, !dbg !75
  %extelt.offset31 = lshr i32 %626, 16, !dbg !75
  %634 = trunc i32 %extelt.offset31 to i16, !dbg !75
  %635 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %627) #2, !dbg !76
  %636 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %628) #2, !dbg !76
  %637 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %629) #2, !dbg !76
  %638 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %630) #2, !dbg !76
  %639 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %631) #2, !dbg !76
  %640 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %632) #2, !dbg !76
  %641 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %633) #2, !dbg !76
  %642 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %634) #2, !dbg !76
  %643 = insertelement <8 x float> poison, float %635, i64 0, !dbg !77
  %644 = insertelement <8 x float> %643, float %636, i64 1, !dbg !77
  %645 = insertelement <8 x float> %644, float %637, i64 2, !dbg !77
  %646 = insertelement <8 x float> %645, float %638, i64 3, !dbg !77
  %647 = insertelement <8 x float> %646, float %639, i64 4, !dbg !77
  %648 = insertelement <8 x float> %647, float %640, i64 5, !dbg !77
  %649 = insertelement <8 x float> %648, float %641, i64 6, !dbg !77
  %650 = insertelement <8 x float> %649, float %642, i64 7, !dbg !77
  %651 = fmul <8 x float> %504, %650, !dbg !77
  %652 = insertelement <8 x i1> poison, i1 %251, i64 0, !dbg !53
  %653 = shufflevector <8 x i1> %652, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %654 = select <8 x i1> %653, <8 x float> %651, <8 x float> zeroinitializer, !dbg !53
  %655 = fadd <8 x float> %621, %654, !dbg !78
  %656 = fadd <8 x float> %577, %655, !dbg !79
  %657 = fadd <8 x float> %545, %656, !dbg !80
  %658 = shl i32 %42, 17, !dbg !81
  %659 = shl i32 %44, 17, !dbg !81
  %660 = add i32 %48, %658, !dbg !82
  %661 = add i32 %49, %659, !dbg !82
  %662 = sext i32 %660 to i64, !dbg !83
  %663 = getelementptr float, ptr addrspace(1) %3, i64 %662, !dbg !83
  %664 = sext i32 %661 to i64, !dbg !83
  %665 = getelementptr float, ptr addrspace(1) %3, i64 %664, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  store <8 x float> %657, ptr addrspace(3) %208, align 32, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %666 = zext nneg i32 %17 to i64, !dbg !84
  %667 = getelementptr float, ptr addrspace(3) @global_smem, i64 %666, !dbg !84
  %668 = zext nneg i32 %18 to i64, !dbg !84
  %669 = getelementptr float, ptr addrspace(3) @global_smem, i64 %668, !dbg !84
  %670 = load <4 x i32>, ptr addrspace(3) %669, align 16, !dbg !84
  %.extract = load i32, ptr addrspace(3) %667, align 16, !dbg !84
  %671 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %667, i64 0, i64 1, !dbg !84
  %.extract33 = load i32, ptr addrspace(3) %671, align 4, !dbg !84
  %672 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %667, i64 0, i64 2, !dbg !84
  %.extract35 = load i32, ptr addrspace(3) %672, align 8, !dbg !84
  %673 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %667, i64 0, i64 3, !dbg !84
  %.extract37 = load i32, ptr addrspace(3) %673, align 4, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract33, i32 %.extract35, i32 %.extract37, ptr addrspace(1) %663, i1 %32) #2, !dbg !84
  %.extract39 = extractelement <4 x i32> %670, i64 0, !dbg !84
  %.extract41 = extractelement <4 x i32> %670, i64 1, !dbg !84
  %.extract43 = extractelement <4 x i32> %670, i64 2, !dbg !84
  %.extract45 = extractelement <4 x i32> %670, i64 3, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract41, i32 %.extract43, i32 %.extract45, ptr addrspace(1) %665, i1 %32) #2, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "crrdsfk77bdln63d7tpusb7zw3nj6ood2d466j625pinrh64lbkt.py", directory: "/tmp/torchinductor_zeus/rr")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 28, scope: !5)
!13 = !DILocation(line: 26, column: 21, scope: !5)
!14 = !DILocation(line: 29, column: 20, scope: !5)
!15 = !DILocation(line: 28, column: 18, scope: !5)
!16 = !DILocation(line: 30, column: 40, scope: !5)
!17 = !DILocation(line: 30, column: 36, scope: !5)
!18 = !DILocation(line: 30, column: 54, scope: !5)
!19 = !DILocation(line: 30, column: 47, scope: !5)
!20 = !DILocation(line: 30, column: 30, scope: !5)
!21 = !DILocation(line: 30, column: 60, scope: !5)
!22 = !DILocation(line: 30, column: 100, scope: !5)
!23 = !DILocation(line: 31, column: 41, scope: !5)
!24 = !DILocation(line: 31, column: 37, scope: !5)
!25 = !DILocation(line: 31, column: 31, scope: !5)
!26 = !DILocation(line: 31, column: 47, scope: !5)
!27 = !DILocation(line: 32, column: 46, scope: !5)
!28 = !DILocation(line: 32, column: 57, scope: !5)
!29 = !DILocation(line: 32, column: 31, scope: !5)
!30 = !DILocation(line: 35, column: 19, scope: !5)
!31 = !DILocation(line: 42, column: 19, scope: !5)
!32 = !DILocation(line: 45, column: 20, scope: !5)
!33 = !DILocation(line: 46, column: 48, scope: !5)
!34 = !DILocation(line: 46, column: 59, scope: !5)
!35 = !DILocation(line: 46, column: 31, scope: !5)
!36 = !DILocation(line: 46, column: 80, scope: !5)
!37 = !DILocation(line: 48, column: 40, scope: !5)
!38 = !DILocation(line: 48, column: 46, scope: !5)
!39 = !DILocation(line: 48, column: 31, scope: !5)
!40 = !DILocation(line: 56, column: 19, scope: !5)
!41 = !DILocation(line: 57, column: 45, scope: !5)
!42 = !DILocation(line: 57, column: 56, scope: !5)
!43 = !DILocation(line: 57, column: 31, scope: !5)
!44 = !DILocation(line: 59, column: 37, scope: !5)
!45 = !DILocation(line: 59, column: 43, scope: !5)
!46 = !DILocation(line: 59, column: 31, scope: !5)
!47 = !DILocation(line: 84, column: 46, scope: !5)
!48 = !DILocation(line: 84, column: 57, scope: !5)
!49 = !DILocation(line: 84, column: 31, scope: !5)
!50 = !DILocation(line: 32, column: 70, scope: !5)
!51 = !DILocation(line: 32, column: 110, scope: !5)
!52 = !DILocation(line: 36, column: 60, scope: !5)
!53 = !DILocation(line: 0, scope: !5)
!54 = !DILocation(line: 36, column: 118, scope: !5)
!55 = !DILocation(line: 46, column: 72, scope: !5)
!56 = !DILocation(line: 46, column: 131, scope: !5)
!57 = !DILocation(line: 48, column: 56, scope: !5)
!58 = !DILocation(line: 49, column: 20, scope: !5)
!59 = !DILocation(line: 51, column: 13, scope: !5)
!60 = !DILocation(line: 55, column: 20, scope: !5)
!61 = !DILocation(line: 57, column: 69, scope: !5)
!62 = !DILocation(line: 57, column: 128, scope: !5)
!63 = !DILocation(line: 59, column: 53, scope: !5)
!64 = !DILocation(line: 60, column: 20, scope: !5)
!65 = !DILocation(line: 65, column: 20, scope: !5)
!66 = !DILocation(line: 66, column: 19, scope: !5)
!67 = !DILocation(line: 68, column: 70, scope: !5)
!68 = !DILocation(line: 68, column: 128, scope: !5)
!69 = !DILocation(line: 73, column: 20, scope: !5)
!70 = !DILocation(line: 75, column: 69, scope: !5)
!71 = !DILocation(line: 75, column: 128, scope: !5)
!72 = !DILocation(line: 77, column: 20, scope: !5)
!73 = !DILocation(line: 79, column: 13, scope: !5)
!74 = !DILocation(line: 83, column: 20, scope: !5)
!75 = !DILocation(line: 84, column: 70, scope: !5)
!76 = !DILocation(line: 84, column: 129, scope: !5)
!77 = !DILocation(line: 86, column: 20, scope: !5)
!78 = !DILocation(line: 91, column: 20, scope: !5)
!79 = !DILocation(line: 92, column: 20, scope: !5)
!80 = !DILocation(line: 94, column: 20, scope: !5)
!81 = !DILocation(line: 95, column: 49, scope: !5)
!82 = !DILocation(line: 95, column: 42, scope: !5)
!83 = !DILocation(line: 95, column: 25, scope: !5)
!84 = !DILocation(line: 95, column: 62, scope: !5)
!85 = !DILocation(line: 95, column: 4, scope: !5)
