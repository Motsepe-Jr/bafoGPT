#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x1024xf32, #blocked>
    %cst_0 = arith.constant dense<512> : tensor<1x1024xi32, #blocked1>
    %cst_1 = arith.constant dense<512> : tensor<1x1024xi32, #blocked>
    %cst_2 = arith.constant dense<512> : tensor<1x1024xi32, #blocked2>
    %cst_3 = arith.constant dense<262144> : tensor<1x1024xi32, #blocked1>
    %cst_4 = arith.constant dense<256> : tensor<1x1024xi32, #blocked>
    %cst_5 = arith.constant dense<131072> : tensor<1x1024xi32, #blocked1>
    %cst_6 = arith.constant dense<131072> : tensor<1x1024xi32, #blocked2>
    %cst_7 = arith.constant dense<196608> : tensor<1x1024xi32, #blocked1>
    %cst_8 = arith.constant dense<65536> : tensor<1x1024xi32, #blocked1>
    %cst_9 = arith.constant dense<-65536> : tensor<1x1024xi32, #blocked1>
    %c128_i32 = arith.constant 128 : i32
    %c-128_i32 = arith.constant -128 : i32
    %c128_i64 = arith.constant 128 : i64
    %c256_i64 = arith.constant 256 : i64
    %c512_i32 = arith.constant 512 : i32
    %c256_i32 = arith.constant 256 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<1x1024xbf16, #blocked1>
    %cst_11 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32, #blocked1>
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %4 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>
    %5 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x1024xi32, #blocked1>
    %6 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x1024xi32, #blocked>
    %7 = tt.expand_dims %4 {axis = 0 : i32} : (tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x1024xi32, #blocked2>
    %8 = tt.splat %1 : (i32) -> tensor<1x1024xi32, #blocked1>
    %9 = tt.splat %1 : (i32) -> tensor<1x1024xi32, #blocked>
    %10 = tt.splat %1 : (i32) -> tensor<1x1024xi32, #blocked2>
    %11 = arith.addi %8, %5 : tensor<1x1024xi32, #blocked1>
    %12 = arith.addi %9, %6 : tensor<1x1024xi32, #blocked>
    %13 = arith.addi %10, %7 : tensor<1x1024xi32, #blocked2>
    %14 = tt.get_program_id x : i32
    %15 = arith.cmpi slt, %14, %c256_i32 : i32
    %16 = arith.remsi %11, %cst_0 : tensor<1x1024xi32, #blocked1>
    %17 = arith.remsi %12, %cst_1 : tensor<1x1024xi32, #blocked>
    %18 = arith.remsi %13, %cst_2 : tensor<1x1024xi32, #blocked2>
    %19 = arith.divsi %11, %cst_0 : tensor<1x1024xi32, #blocked1>
    %20 = arith.divsi %13, %cst_2 : tensor<1x1024xi32, #blocked2>
    %21 = arith.muli %14, %c512_i32 : i32
    %22 = tt.splat %21 : (i32) -> tensor<1x1024xi32, #blocked1>
    %23 = tt.splat %21 : (i32) -> tensor<1x1024xi32, #blocked2>
    %24 = arith.addi %16, %22 : tensor<1x1024xi32, #blocked1>
    %25 = arith.addi %18, %23 : tensor<1x1024xi32, #blocked2>
    %26 = arith.muli %19, %cst_3 : tensor<1x1024xi32, #blocked1>
    %27 = arith.addi %24, %26 : tensor<1x1024xi32, #blocked1>
    %28 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>
    %29 = tt.addptr %28, %27 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
    %30 = tt.splat %15 : (i1) -> tensor<1x1024xi1, #blocked1>
    %31 = tt.load %29, %30 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked1>
    %32 = triton_gpu.convert_layout %31 : (tensor<1x1024xbf16, #blocked1>) -> tensor<1x1024xbf16, #blocked>
    %33 = arith.extf %32 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %34 = arith.muli %17, %cst_4 : tensor<1x1024xi32, #blocked>
    %35 = tt.splat %14 : (i32) -> tensor<1x1024xi32, #blocked>
    %36 = arith.addi %35, %34 : tensor<1x1024xi32, #blocked>
    %37 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %38 = tt.addptr %37, %36 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %39 = tt.splat %15 : (i1) -> tensor<1x1024xi1, #blocked>
    %40 = tt.load %38, %39 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
    %41 = triton_gpu.convert_layout %40 : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked1>
    %42 = arith.addi %16, %cst_5 : tensor<1x1024xi32, #blocked1>
    %43 = arith.addi %42, %22 : tensor<1x1024xi32, #blocked1>
    %44 = arith.addi %43, %26 : tensor<1x1024xi32, #blocked1>
    %45 = tt.addptr %28, %44 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
    %46 = tt.load %45, %30 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked1>
    %47 = arith.extf %46 : tensor<1x1024xbf16, #blocked1> to tensor<1x1024xf32, #blocked1>
    %48 = arith.extsi %14 : i32 to i64
    %49 = arith.cmpi sge, %48, %c256_i64 : i64
    %50 = arith.andi %49, %15 : i1
    %51 = tt.splat %50 : (i1) -> tensor<1x1024xi1, #blocked1>
    %52 = tt.load %29, %51, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked1>
    %53 = triton_gpu.convert_layout %52 : (tensor<1x1024xbf16, #blocked1>) -> tensor<1x1024xbf16, #blocked>
    %54 = arith.extf %53 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %55 = tt.splat %49 : (i1) -> tensor<1x1024xi1, #blocked1>
    %56 = tt.splat %49 : (i1) -> tensor<1x1024xi1, #blocked>
    %57 = arith.select %56, %54, %cst : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
    %58 = arith.mulf %33, %40 : tensor<1x1024xf32, #blocked>
    %59 = arith.cmpi sge, %48, %c128_i64 : i64
    %60 = arith.addi %16, %cst_9 : tensor<1x1024xi32, #blocked1>
    %61 = arith.addi %60, %22 : tensor<1x1024xi32, #blocked1>
    %62 = arith.addi %61, %26 : tensor<1x1024xi32, #blocked1>
    %63 = tt.addptr %28, %62 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
    %64 = arith.andi %59, %15 : i1
    %65 = tt.splat %64 : (i1) -> tensor<1x1024xi1, #blocked1>
    %66 = tt.load %63, %65, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked1>
    %67 = triton_gpu.convert_layout %66 : (tensor<1x1024xbf16, #blocked1>) -> tensor<1x1024xbf16, #blocked>
    %68 = arith.extf %67 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %69 = arith.addi %14, %c-128_i32 : i32
    %70 = tt.splat %69 : (i32) -> tensor<1x1024xi32, #blocked>
    %71 = arith.addi %70, %34 : tensor<1x1024xi32, #blocked>
    %72 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %73 = tt.addptr %72, %71 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %74 = tt.splat %64 : (i1) -> tensor<1x1024xi1, #blocked>
    %75 = tt.load %73, %74, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
    %76 = triton_gpu.convert_layout %75 : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked1>
    %77 = arith.mulf %68, %75 : tensor<1x1024xf32, #blocked>
    %78 = arith.subf %cst, %77 : tensor<1x1024xf32, #blocked>
    %79 = tt.splat %59 : (i1) -> tensor<1x1024xi1, #blocked1>
    %80 = tt.splat %59 : (i1) -> tensor<1x1024xi1, #blocked>
    %81 = arith.select %80, %78, %cst : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
    %82 = arith.addf %58, %81 : tensor<1x1024xf32, #blocked>
    %83 = arith.cmpi slt, %48, %c128_i64 : i64
    %84 = arith.addi %16, %cst_8 : tensor<1x1024xi32, #blocked1>
    %85 = arith.addi %84, %22 : tensor<1x1024xi32, #blocked1>
    %86 = arith.addi %85, %26 : tensor<1x1024xi32, #blocked1>
    %87 = tt.addptr %28, %86 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
    %88 = arith.andi %83, %15 : i1
    %89 = tt.splat %88 : (i1) -> tensor<1x1024xi1, #blocked1>
    %90 = tt.load %87, %89, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked1>
    %91 = triton_gpu.convert_layout %90 : (tensor<1x1024xbf16, #blocked1>) -> tensor<1x1024xbf16, #blocked>
    %92 = arith.extf %91 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %93 = arith.addi %14, %c128_i32 : i32
    %94 = tt.splat %93 : (i32) -> tensor<1x1024xi32, #blocked>
    %95 = arith.addi %94, %34 : tensor<1x1024xi32, #blocked>
    %96 = tt.addptr %72, %95 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %97 = tt.splat %88 : (i1) -> tensor<1x1024xi1, #blocked>
    %98 = tt.load %96, %97, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
    %99 = triton_gpu.convert_layout %98 : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked1>
    %100 = arith.mulf %92, %98 : tensor<1x1024xf32, #blocked>
    %101 = tt.splat %83 : (i1) -> tensor<1x1024xi1, #blocked1>
    %102 = tt.splat %83 : (i1) -> tensor<1x1024xi1, #blocked>
    %103 = arith.select %102, %100, %cst : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
    %104 = arith.addf %82, %103 : tensor<1x1024xf32, #blocked>
    %105 = arith.addf %57, %104 : tensor<1x1024xf32, #blocked>
    %106 = triton_gpu.convert_layout %105 : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked1>
    %107 = tt.load %45, %51, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked1>
    %108 = arith.extf %107 : tensor<1x1024xbf16, #blocked1> to tensor<1x1024xf32, #blocked1>
    %109 = arith.select %55, %108, %cst_11 : tensor<1x1024xi1, #blocked1>, tensor<1x1024xf32, #blocked1>
    %110 = arith.mulf %47, %41 : tensor<1x1024xf32, #blocked1>
    %111 = tt.load %87, %65, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked1>
    %112 = arith.extf %111 : tensor<1x1024xbf16, #blocked1> to tensor<1x1024xf32, #blocked1>
    %113 = arith.mulf %112, %76 : tensor<1x1024xf32, #blocked1>
    %114 = arith.subf %cst_11, %113 : tensor<1x1024xf32, #blocked1>
    %115 = arith.select %79, %114, %cst_11 : tensor<1x1024xi1, #blocked1>, tensor<1x1024xf32, #blocked1>
    %116 = arith.addf %110, %115 : tensor<1x1024xf32, #blocked1>
    %117 = arith.addi %16, %cst_7 : tensor<1x1024xi32, #blocked1>
    %118 = arith.addi %117, %22 : tensor<1x1024xi32, #blocked1>
    %119 = arith.addi %118, %26 : tensor<1x1024xi32, #blocked1>
    %120 = tt.addptr %28, %119 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
    %121 = tt.load %120, %89, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked1>
    %122 = arith.extf %121 : tensor<1x1024xbf16, #blocked1> to tensor<1x1024xf32, #blocked1>
    %123 = arith.mulf %122, %99 : tensor<1x1024xf32, #blocked1>
    %124 = arith.select %101, %123, %cst_11 : tensor<1x1024xi1, #blocked1>, tensor<1x1024xf32, #blocked1>
    %125 = arith.addf %116, %124 : tensor<1x1024xf32, #blocked1>
    %126 = arith.addf %109, %125 : tensor<1x1024xf32, #blocked1>
    %127 = arith.addf %106, %126 : tensor<1x1024xf32, #blocked1>
    %128 = arith.muli %20, %cst_6 : tensor<1x1024xi32, #blocked2>
    %129 = arith.addi %25, %128 : tensor<1x1024xi32, #blocked2>
    %130 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked2>
    %131 = tt.addptr %130, %129 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked2>, tensor<1x1024xi32, #blocked2>
    %132 = triton_gpu.convert_layout %127 : (tensor<1x1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked2>
    %133 = tt.splat %15 : (i1) -> tensor<1x1024xi1, #blocked2>
    tt.store %131, %132, %133 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xf32, #blocked2>
    tt.return
  }
}
