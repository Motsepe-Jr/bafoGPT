module {
  tt.func public @triton__0d1d2d3d4d5d6de7de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<256> : tensor<64x1xi64>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xbf16>
    %cst_1 = arith.constant dense<128> : tensor<64x1xi64>
    %cst_2 = arith.constant dense<1024> : tensor<64x1xi32>
    %cst_3 = arith.constant dense<1024> : tensor<1x64xi32>
    %cst_4 = arith.constant dense<4> : tensor<64x1xi32>
    %cst_5 = arith.constant dense<3> : tensor<1x64xi64>
    %cst_6 = arith.constant dense<128> : tensor<64x1xi32>
    %cst_7 = arith.constant dense<-128> : tensor<64x1xi32>
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<64x64xf32>
    %cst_9 = arith.constant dense<2048> : tensor<1x64xi32>
    %cst_10 = arith.constant dense<256> : tensor<1x64xi32>
    %cst_11 = arith.constant dense<2> : tensor<1x64xi64>
    %cst_12 = arith.constant dense<16> : tensor<1x64xi32>
    %cst_13 = arith.constant dense<4> : tensor<1x64xi32>
    %cst_14 = arith.constant dense<256> : tensor<64x1xi32>
    %cst_15 = arith.constant dense<64> : tensor<1x64xi32>
    %c64_i32 = arith.constant 64 : i32
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c64_i32 : i32
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32>
    %4 = tt.splat %1 : (i32) -> tensor<1x64xi32>
    %5 = arith.addi %4, %3 : tensor<1x64xi32>
    %6 = arith.cmpi slt, %5, %cst_15 : tensor<1x64xi32>
    %7 = tt.get_program_id x : i32
    %8 = arith.muli %7, %c64_i32 : i32
    %9 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32>
    %10 = tt.splat %8 : (i32) -> tensor<64x1xi32>
    %11 = arith.addi %10, %9 : tensor<64x1xi32>
    %12 = arith.cmpi slt, %11, %cst_14 : tensor<64x1xi32>
    %13 = arith.divsi %5, %cst_13 : tensor<1x64xi32>
    %14 = arith.remsi %13, %cst_13 : tensor<1x64xi32>
    %15 = arith.divsi %5, %cst_12 : tensor<1x64xi32>
    %16 = arith.remsi %5, %cst_12 : tensor<1x64xi32>
    %17 = arith.remsi %5, %cst_13 : tensor<1x64xi32>
    %18 = arith.extsi %14 : tensor<1x64xi32> to tensor<1x64xi64>
    %19 = arith.cmpi slt, %18, %cst_11 : tensor<1x64xi64>
    %20 = arith.extsi %11 : tensor<64x1xi32> to tensor<64x1xi64>
    %21 = arith.cmpi sge, %20, %cst : tensor<64x1xi64>
    %22 = tt.broadcast %21 : (tensor<64x1xi1>) -> tensor<64x64xi1>
    %23 = tt.broadcast %19 : (tensor<1x64xi1>) -> tensor<64x64xi1>
    %24 = arith.andi %22, %23 : tensor<64x64xi1>
    %25 = arith.muli %16, %cst_10 : tensor<1x64xi32>
    %26 = tt.broadcast %11 : (tensor<64x1xi32>) -> tensor<64x64xi32>
    %27 = tt.broadcast %25 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %28 = arith.addi %26, %27 : tensor<64x64xi32>
    %29 = arith.muli %15, %cst_9 : tensor<1x64xi32>
    %30 = tt.broadcast %29 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %31 = arith.addi %28, %30 : tensor<64x64xi32>
    %32 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<64x64x!tt.ptr<bf16, 1>>
    %33 = tt.addptr %32, %31 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %34 = tt.broadcast %12 : (tensor<64x1xi1>) -> tensor<64x64xi1>
    %35 = arith.andi %24, %34 : tensor<64x64xi1>
    %36 = tt.broadcast %6 : (tensor<1x64xi1>) -> tensor<64x64xi1>
    %37 = arith.andi %35, %36 : tensor<64x64xi1>
    %38 = tt.load %33, %37, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %39 = arith.extf %38 : tensor<64x64xbf16> to tensor<64x64xf32>
    %40 = arith.select %24, %39, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %41 = arith.andi %23, %34 : tensor<64x64xi1>
    %42 = arith.andi %41, %36 : tensor<64x64xi1>
    %43 = tt.load %33, %42, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %44 = arith.extf %43 : tensor<64x64xbf16> to tensor<64x64xf32>
    %45 = arith.muli %17, %cst_10 : tensor<1x64xi32>
    %46 = tt.broadcast %45 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %47 = arith.addi %26, %46 : tensor<64x64xi32>
    %48 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<64x64x!tt.ptr<f32, 1>>
    %49 = tt.addptr %48, %47 : tensor<64x64x!tt.ptr<f32, 1>>, tensor<64x64xi32>
    %50 = tt.load %49, %42, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xf32>
    %51 = arith.mulf %44, %50 : tensor<64x64xf32>
    %52 = arith.cmpi sge, %20, %cst_1 : tensor<64x1xi64>
    %53 = tt.broadcast %52 : (tensor<64x1xi1>) -> tensor<64x64xi1>
    %54 = arith.andi %53, %23 : tensor<64x64xi1>
    %55 = arith.addi %11, %cst_7 : tensor<64x1xi32>
    %56 = tt.broadcast %55 : (tensor<64x1xi32>) -> tensor<64x64xi32>
    %57 = arith.addi %56, %27 : tensor<64x64xi32>
    %58 = arith.addi %57, %30 : tensor<64x64xi32>
    %59 = tt.addptr %32, %58 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %60 = arith.andi %54, %34 : tensor<64x64xi1>
    %61 = arith.andi %60, %36 : tensor<64x64xi1>
    %62 = tt.load %59, %61, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %63 = arith.extf %62 : tensor<64x64xbf16> to tensor<64x64xf32>
    %64 = arith.addi %56, %46 : tensor<64x64xi32>
    %65 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x64x!tt.ptr<f32, 1>>
    %66 = tt.addptr %65, %64 : tensor<64x64x!tt.ptr<f32, 1>>, tensor<64x64xi32>
    %67 = tt.load %66, %61, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xf32>
    %68 = arith.mulf %63, %67 : tensor<64x64xf32>
    %69 = arith.subf %cst_8, %68 : tensor<64x64xf32>
    %70 = arith.select %54, %69, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %71 = arith.addf %51, %70 : tensor<64x64xf32>
    %72 = arith.cmpi slt, %20, %cst_1 : tensor<64x1xi64>
    %73 = tt.broadcast %72 : (tensor<64x1xi1>) -> tensor<64x64xi1>
    %74 = arith.andi %73, %23 : tensor<64x64xi1>
    %75 = arith.addi %11, %cst_6 : tensor<64x1xi32>
    %76 = tt.broadcast %75 : (tensor<64x1xi32>) -> tensor<64x64xi32>
    %77 = arith.addi %76, %27 : tensor<64x64xi32>
    %78 = arith.addi %77, %30 : tensor<64x64xi32>
    %79 = tt.addptr %32, %78 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %80 = arith.andi %74, %34 : tensor<64x64xi1>
    %81 = arith.andi %80, %36 : tensor<64x64xi1>
    %82 = tt.load %79, %81, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %83 = arith.extf %82 : tensor<64x64xbf16> to tensor<64x64xf32>
    %84 = arith.addi %76, %46 : tensor<64x64xi32>
    %85 = tt.addptr %65, %84 : tensor<64x64x!tt.ptr<f32, 1>>, tensor<64x64xi32>
    %86 = tt.load %85, %81, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xf32>
    %87 = arith.mulf %83, %86 : tensor<64x64xf32>
    %88 = arith.select %74, %87, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %89 = arith.addf %71, %88 : tensor<64x64xf32>
    %90 = arith.addf %40, %89 : tensor<64x64xf32>
    %91 = arith.select %23, %90, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %92 = arith.cmpi sge, %18, %cst_11 : tensor<1x64xi64>
    %93 = arith.cmpi slt, %18, %cst_5 : tensor<1x64xi64>
    %94 = arith.andi %92, %93 : tensor<1x64xi1>
    %95 = arith.muli %11, %cst_4 : tensor<64x1xi32>
    %96 = tt.broadcast %17 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %97 = tt.broadcast %95 : (tensor<64x1xi32>) -> tensor<64x64xi32>
    %98 = arith.addi %96, %97 : tensor<64x64xi32>
    %99 = arith.muli %15, %cst_3 : tensor<1x64xi32>
    %100 = tt.broadcast %99 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %101 = arith.addi %98, %100 : tensor<64x64xi32>
    %102 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<64x64x!tt.ptr<f32, 1>>
    %103 = tt.addptr %102, %101 : tensor<64x64x!tt.ptr<f32, 1>>, tensor<64x64xi32>
    %104 = tt.broadcast %94 : (tensor<1x64xi1>) -> tensor<64x64xi1>
    %105 = arith.andi %104, %34 : tensor<64x64xi1>
    %106 = arith.andi %105, %36 : tensor<64x64xi1>
    %107 = tt.load %103, %106, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xf32>
    %108 = arith.select %104, %107, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %109 = arith.cmpi sge, %18, %cst_5 : tensor<1x64xi64>
    %110 = arith.addi %47, %30 : tensor<64x64xi32>
    %111 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<64x64x!tt.ptr<bf16, 1>>
    %112 = tt.addptr %111, %110 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %113 = tt.broadcast %109 : (tensor<1x64xi1>) -> tensor<64x64xi1>
    %114 = arith.andi %113, %34 : tensor<64x64xi1>
    %115 = arith.andi %114, %36 : tensor<64x64xi1>
    %116 = tt.load %112, %115, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %117 = arith.extf %116 : tensor<64x64xbf16> to tensor<64x64xf32>
    %118 = arith.addi %11, %cst_2 : tensor<64x1xi32>
    %119 = tt.broadcast %118 : (tensor<64x1xi32>) -> tensor<64x64xi32>
    %120 = arith.addi %119, %46 : tensor<64x64xi32>
    %121 = arith.addi %120, %30 : tensor<64x64xi32>
    %122 = tt.addptr %111, %121 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %123 = tt.load %122, %115, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %124 = arith.extf %123 : tensor<64x64xbf16> to tensor<64x64xf32>
    %125 = arith.addf %117, %124 : tensor<64x64xf32>
    %126 = arith.select %113, %125, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %127 = arith.select %104, %108, %126 : tensor<64x64xi1>, tensor<64x64xf32>
    %128 = arith.select %23, %91, %127 : tensor<64x64xi1>, tensor<64x64xf32>
    %129 = arith.muli %5, %cst_10 : tensor<1x64xi32>
    %130 = tt.broadcast %129 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %131 = arith.addi %26, %130 : tensor<64x64xi32>
    %132 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<64x64x!tt.ptr<bf16, 1>>
    %133 = tt.addptr %132, %131 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %134 = arith.andi %34, %36 : tensor<64x64xi1>
    %135 = arith.truncf %128 : tensor<64x64xf32> to tensor<64x64xbf16>
    tt.store %133, %135, %134 {cache = 1 : i32, evict = 1 : i32} : tensor<64x64xbf16>
    tt.return
  }
}
