module {
  tt.func public @triton__0d1d2d3de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<32xi32>
    %cst_0 = arith.constant dense<2> : tensor<32xi32>
    %cst_1 = arith.constant dense<1> : tensor<32xi32>
    %cst_2 = arith.constant dense<4> : tensor<32xi32>
    %cst_3 = arith.constant dense<32> : tensor<32xi32>
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c32_i32 : i32
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %3 = tt.splat %1 : (i32) -> tensor<32xi32>
    %4 = arith.addi %3, %2 : tensor<32xi32>
    %5 = arith.cmpi slt, %4, %cst_3 : tensor<32xi32>
    %6 = arith.muli %4, %cst_2 : tensor<32xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<32x!tt.ptr<bf16, 1>>
    %8 = tt.addptr %7, %6 : tensor<32x!tt.ptr<bf16, 1>>, tensor<32xi32>
    %9 = tt.load %8, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xbf16>
    %10 = arith.extf %9 : tensor<32xbf16> to tensor<32xf32>
    %11 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<32x!tt.ptr<f32, 1>>
    %12 = tt.addptr %11, %6 : tensor<32x!tt.ptr<f32, 1>>, tensor<32xi32>
    %13 = tt.load %12, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xf32>
    %14 = arith.addi %6, %cst_1 : tensor<32xi32>
    %15 = tt.addptr %7, %14 : tensor<32x!tt.ptr<bf16, 1>>, tensor<32xi32>
    %16 = tt.load %15, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xbf16>
    %17 = arith.extf %16 : tensor<32xbf16> to tensor<32xf32>
    %18 = tt.addptr %11, %14 : tensor<32x!tt.ptr<f32, 1>>, tensor<32xi32>
    %19 = tt.load %18, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xf32>
    %20 = arith.addi %6, %cst_0 : tensor<32xi32>
    %21 = tt.addptr %7, %20 : tensor<32x!tt.ptr<bf16, 1>>, tensor<32xi32>
    %22 = tt.load %21, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xbf16>
    %23 = arith.extf %22 : tensor<32xbf16> to tensor<32xf32>
    %24 = tt.addptr %11, %20 : tensor<32x!tt.ptr<f32, 1>>, tensor<32xi32>
    %25 = tt.load %24, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xf32>
    %26 = arith.addi %6, %cst : tensor<32xi32>
    %27 = tt.addptr %7, %26 : tensor<32x!tt.ptr<bf16, 1>>, tensor<32xi32>
    %28 = tt.load %27, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xbf16>
    %29 = arith.extf %28 : tensor<32xbf16> to tensor<32xf32>
    %30 = tt.addptr %11, %26 : tensor<32x!tt.ptr<f32, 1>>, tensor<32xi32>
    %31 = tt.load %30, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xf32>
    %32 = arith.mulf %10, %13 : tensor<32xf32>
    %33 = arith.mulf %17, %19 : tensor<32xf32>
    %34 = arith.addf %32, %33 : tensor<32xf32>
    %35 = arith.mulf %23, %25 : tensor<32xf32>
    %36 = arith.addf %34, %35 : tensor<32xf32>
    %37 = arith.mulf %29, %31 : tensor<32xf32>
    %38 = arith.addf %36, %37 : tensor<32xf32>
    %39 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<32x!tt.ptr<f32, 1>>
    %40 = tt.addptr %39, %4 : tensor<32x!tt.ptr<f32, 1>>, tensor<32xi32>
    tt.store %40, %38, %5 {cache = 1 : i32, evict = 1 : i32} : tensor<32xf32>
    tt.return
  }
}
