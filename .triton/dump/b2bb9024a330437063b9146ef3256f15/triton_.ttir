module {
  tt.func public @triton__0d1d2de3de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: i64 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg3: i64 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c8192_i64 = arith.constant 8192 : i64
    %c-1_i64 = arith.constant -1 : i64
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %cst_0 = arith.constant dense<true> : tensor<1x2048xi1>
    %c8192_i32 = arith.constant 8192 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_1 = arith.constant dense<8192> : tensor<1x2048xi64>
    %cst_2 = arith.constant dense<-4096> : tensor<1x2048xi64>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_4 = arith.constant dense<1> : tensor<1x2048xi64>
    %cst_5 = arith.constant dense<5.000000e+01> : tensor<1x2048xf32>
    %cst_6 = arith.constant dense<6.250000e-02> : tensor<1x2048xf32>
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %cst_8 = arith.constant dense<0xFF800000> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %4 = arith.extsi %3 : tensor<1x2048xi32> to tensor<1x2048xi64>
    %5 = arith.remsi %1, %c8192_i64 : i64
    %6 = arith.muli %1, %c8192_i64 : i64
    %7 = tt.splat %6 : (i64) -> tensor<1x2048xi64>
    %8 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %9 = arith.muli %5, %c-1_i64 : i64
    %10 = tt.splat %9 : (i64) -> tensor<1x2048xi64>
    %11 = scf.for %arg4 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg5 = %cst_8) -> (tensor<1x2048xf32>)  : i32 {
      %27 = arith.extsi %arg4 : i32 to i64
      %28 = tt.splat %27 : (i64) -> tensor<1x2048xi64>
      %29 = arith.addi %28, %4 : tensor<1x2048xi64>
      %30 = arith.cmpi slt, %29, %cst_1 : tensor<1x2048xi64>
      %31 = arith.addi %29, %7 : tensor<1x2048xi64>
      %32 = tt.addptr %8, %31 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi64>
      %33 = tt.load %32, %30, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %34 = arith.extf %33 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %35 = arith.mulf %34, %cst_6 : tensor<1x2048xf32>
      %36 = arith.divf %35, %cst_5 : tensor<1x2048xf32>
      %37 = tt.extern_elementwise %36 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32>) -> tensor<1x2048xf32>
      %38 = arith.mulf %37, %cst_5 : tensor<1x2048xf32>
      %39 = arith.addi %29, %10 : tensor<1x2048xi64>
      %40 = arith.cmpi sge, %39, %cst_4 : tensor<1x2048xi64>
      %41 = arith.select %40, %cst_3, %cst_7 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %42 = arith.cmpf une, %41, %cst_7 : tensor<1x2048xf32>
      %43 = arith.select %42, %cst_8, %41 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %44 = arith.cmpi sle, %39, %cst_2 : tensor<1x2048xi64>
      %45 = arith.select %44, %cst_3, %cst_7 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %46 = arith.cmpf une, %45, %cst_7 : tensor<1x2048xf32>
      %47 = arith.select %46, %cst_8, %45 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %48 = arith.addf %43, %47 : tensor<1x2048xf32>
      %49 = arith.addf %38, %48 : tensor<1x2048xf32>
      %50 = arith.cmpf ogt, %arg5, %49 : tensor<1x2048xf32>
      %51 = arith.cmpf une, %arg5, %arg5 : tensor<1x2048xf32>
      %52 = arith.ori %50, %51 : tensor<1x2048xi1>
      %53 = arith.xori %52, %cst_0 : tensor<1x2048xi1>
      %54 = arith.andi %30, %53 : tensor<1x2048xi1>
      %55 = arith.select %54, %49, %arg5 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %56 = arith.truncf %49 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %32, %56, %30 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
      scf.yield %55 : tensor<1x2048xf32>
    }
    %12 = "tt.reduce"(%11) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %27 = arith.cmpf ogt, %arg4, %arg5 : f32
      %28 = arith.cmpf une, %arg4, %arg4 : f32
      %29 = arith.ori %27, %28 : i1
      %30 = arith.select %29, %arg4, %arg5 : f32
      tt.reduce.return %30 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %13 = tt.expand_dims %12 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %14 = arith.muli %1, %c8192_i64 : i64
    %15 = tt.splat %14 : (i64) -> tensor<1x2048xi64>
    %16 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %17 = tt.broadcast %13 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %18 = scf.for %arg4 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg5 = %cst_7) -> (tensor<1x2048xf32>)  : i32 {
      %27 = arith.extsi %arg4 : i32 to i64
      %28 = tt.splat %27 : (i64) -> tensor<1x2048xi64>
      %29 = arith.addi %28, %4 : tensor<1x2048xi64>
      %30 = arith.cmpi slt, %29, %cst_1 : tensor<1x2048xi64>
      %31 = arith.addi %29, %15 : tensor<1x2048xi64>
      %32 = tt.addptr %16, %31 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi64>
      %33 = tt.load %32, %30, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %34 = arith.extf %33 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %35 = arith.subf %34, %17 : tensor<1x2048xf32>
      %36 = math.exp %35 : tensor<1x2048xf32>
      %37 = arith.addf %arg5, %36 : tensor<1x2048xf32>
      %38 = arith.select %30, %37, %arg5 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %38 : tensor<1x2048xf32>
    }
    %19 = "tt.reduce"(%18) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %27 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %27 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %20 = tt.expand_dims %19 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %21 = arith.muli %1, %c8192_i64 : i64
    %22 = tt.splat %21 : (i64) -> tensor<1x2048xi64>
    %23 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %24 = tt.broadcast %13 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %25 = tt.broadcast %20 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %26 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg4 = %c0_i32 to %c8192_i32 step %c2048_i32  : i32 {
      %27 = arith.extsi %arg4 : i32 to i64
      %28 = tt.splat %27 : (i64) -> tensor<1x2048xi64>
      %29 = arith.addi %28, %4 : tensor<1x2048xi64>
      %30 = arith.cmpi slt, %29, %cst_1 : tensor<1x2048xi64>
      %31 = arith.addi %29, %22 : tensor<1x2048xi64>
      %32 = tt.addptr %23, %31 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi64>
      %33 = tt.load %32, %30, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %34 = arith.extf %33 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %35 = arith.subf %34, %24 : tensor<1x2048xf32>
      %36 = math.exp %35 : tensor<1x2048xf32>
      %37 = arith.divf %36, %25 : tensor<1x2048xf32>
      %38 = tt.addptr %26, %31 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi64>
      %39 = arith.truncf %37 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %38, %39, %30 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
