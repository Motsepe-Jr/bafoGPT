; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = shl i32 %7, 3, !dbg !8
  %11 = and i32 %10, 56, !dbg !8
  %12 = and i32 %9, 7, !dbg !8
  %13 = lshr i32 %8, 4, !dbg !8
  %14 = shl nuw nsw i32 %12, 1, !dbg !8
  %15 = or i32 %14, %13, !dbg !8
  %16 = or i32 %15, 16, !dbg !8
  %17 = or i32 %15, 32, !dbg !8
  %18 = or i32 %15, 48, !dbg !8
  %19 = shl i32 %7, 2, !dbg !8
  %20 = and i32 %19, 60, !dbg !8
  %21 = lshr i32 %8, 3, !dbg !9
  %22 = shl nuw nsw i32 %12, 2, !dbg !9
  %23 = or i32 %22, %21, !dbg !9
  %24 = or i32 %23, 32, !dbg !9
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %26 = shl i32 %25, 6, !dbg !11
  %27 = or i32 %26, %11, !dbg !12
  %28 = or i32 %26, %15, !dbg !12
  %29 = or i32 %26, %16, !dbg !12
  %30 = or i32 %26, %17, !dbg !12
  %31 = or i32 %26, %18, !dbg !12
  %32 = or i32 %26, %20, !dbg !12
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %34 = shl i32 %33, 6, !dbg !14
  %35 = or i32 %34, %23, !dbg !15
  %36 = or i32 %34, %24, !dbg !15
  %37 = or i32 %34, %15, !dbg !15
  %38 = or i32 %34, %16, !dbg !15
  %39 = or i32 %34, %17, !dbg !15
  %40 = or i32 %34, %18, !dbg !15
  %41 = or i32 %34, %20, !dbg !15
  %42 = icmp slt i32 %35, 256, !dbg !16
  %43 = icmp slt i32 %36, 256, !dbg !16
  %44 = icmp slt i32 %41, 256, !dbg !16
  %45 = icmp slt i32 %37, 256, !dbg !16
  %46 = icmp slt i32 %38, 256, !dbg !16
  %47 = icmp slt i32 %39, 256, !dbg !16
  %48 = icmp slt i32 %40, 256, !dbg !16
  %.frozen = freeze i32 %27
  %49 = sdiv i32 %.frozen, 512, !dbg !17
  %50 = mul i32 %49, 512
  %.decomposed = sub i32 %.frozen, %50
  %51 = srem i32 %28, 512, !dbg !18
  %52 = srem i32 %29, 512, !dbg !18
  %53 = srem i32 %30, 512, !dbg !18
  %54 = srem i32 %31, 512, !dbg !18
  %.frozen94 = freeze i32 %32
  %55 = sdiv i32 %.frozen94, 512, !dbg !17
  %56 = mul i32 %55, 512
  %.decomposed95 = sub i32 %.frozen94, %56
  %57 = shl i32 %35, 9, !dbg !19
  %58 = shl i32 %36, 9, !dbg !19
  %59 = shl i32 %37, 9, !dbg !19
  %60 = shl i32 %38, 9, !dbg !19
  %61 = shl i32 %39, 9, !dbg !19
  %62 = shl i32 %40, 9, !dbg !19
  %63 = shl i32 %49, 18, !dbg !20
  %64 = add i32 %63, %57, !dbg !21
  %65 = add i32 %64, %.decomposed, !dbg !22
  %66 = add i32 %63, %58, !dbg !21
  %67 = add nsw i32 %66, %.decomposed, !dbg !22
  %68 = sext i32 %65 to i64, !dbg !23
  %69 = getelementptr i16, ptr addrspace(1) %0, i64 %68, !dbg !23
  %70 = sext i32 %67 to i64, !dbg !23
  %71 = getelementptr i16, ptr addrspace(1) %0, i64 %70, !dbg !23
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %42) #2, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !24
  %77 = trunc i32 %73 to i16, !dbg !24
  %extelt.offset = lshr i32 %73, 16, !dbg !24
  %78 = trunc i32 %extelt.offset to i16, !dbg !24
  %79 = trunc i32 %74 to i16, !dbg !24
  %extelt.offset1 = lshr i32 %74, 16, !dbg !24
  %80 = trunc i32 %extelt.offset1 to i16, !dbg !24
  %81 = trunc i32 %75 to i16, !dbg !24
  %extelt.offset2 = lshr i32 %75, 16, !dbg !24
  %82 = trunc i32 %extelt.offset2 to i16, !dbg !24
  %83 = trunc i32 %76 to i16, !dbg !24
  %extelt.offset3 = lshr i32 %76, 16, !dbg !24
  %84 = trunc i32 %extelt.offset3 to i16, !dbg !24
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %43) #2, !dbg !24
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !24
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !24
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !24
  %90 = trunc i32 %86 to i16, !dbg !24
  %extelt.offset4 = lshr i32 %86, 16, !dbg !24
  %91 = trunc i32 %extelt.offset4 to i16, !dbg !24
  %92 = trunc i32 %87 to i16, !dbg !24
  %extelt.offset5 = lshr i32 %87, 16, !dbg !24
  %93 = trunc i32 %extelt.offset5 to i16, !dbg !24
  %94 = trunc i32 %88 to i16, !dbg !24
  %extelt.offset6 = lshr i32 %88, 16, !dbg !24
  %95 = trunc i32 %extelt.offset6 to i16, !dbg !24
  %96 = trunc i32 %89 to i16, !dbg !24
  %extelt.offset7 = lshr i32 %89, 16, !dbg !24
  %97 = trunc i32 %extelt.offset7 to i16, !dbg !24
  %98 = mul nuw nsw i32 %11, 65, !dbg !25
  %99 = add nuw nsw i32 %23, %98, !dbg !25
  %100 = zext nneg i32 %99 to i64, !dbg !25
  %101 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %100, !dbg !25
  %102 = insertelement <1 x i16> undef, i16 %77, i64 0, !dbg !25
  store <1 x i16> %102, ptr addrspace(3) %101, align 2, !dbg !25
  %103 = add nuw nsw i32 %98, 65, !dbg !25
  %104 = add nuw nsw i32 %103, %23, !dbg !25
  %105 = zext nneg i32 %104 to i64, !dbg !25
  %106 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %105, !dbg !25
  %107 = insertelement <1 x i16> undef, i16 %78, i64 0, !dbg !25
  store <1 x i16> %107, ptr addrspace(3) %106, align 2, !dbg !25
  %108 = add nuw nsw i32 %98, 130, !dbg !25
  %109 = add nuw nsw i32 %108, %23, !dbg !25
  %110 = zext nneg i32 %109 to i64, !dbg !25
  %111 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %110, !dbg !25
  %112 = insertelement <1 x i16> undef, i16 %79, i64 0, !dbg !25
  store <1 x i16> %112, ptr addrspace(3) %111, align 2, !dbg !25
  %113 = add nuw nsw i32 %98, 195, !dbg !25
  %114 = add nuw nsw i32 %113, %23, !dbg !25
  %115 = zext nneg i32 %114 to i64, !dbg !25
  %116 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %115, !dbg !25
  %117 = insertelement <1 x i16> undef, i16 %80, i64 0, !dbg !25
  store <1 x i16> %117, ptr addrspace(3) %116, align 2, !dbg !25
  %118 = add nuw nsw i32 %98, 260, !dbg !25
  %119 = add nuw nsw i32 %118, %23, !dbg !25
  %120 = zext nneg i32 %119 to i64, !dbg !25
  %121 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %120, !dbg !25
  %122 = insertelement <1 x i16> undef, i16 %81, i64 0, !dbg !25
  store <1 x i16> %122, ptr addrspace(3) %121, align 2, !dbg !25
  %123 = add nuw nsw i32 %98, 325, !dbg !25
  %124 = add nuw nsw i32 %123, %23, !dbg !25
  %125 = zext nneg i32 %124 to i64, !dbg !25
  %126 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %125, !dbg !25
  %127 = insertelement <1 x i16> undef, i16 %82, i64 0, !dbg !25
  store <1 x i16> %127, ptr addrspace(3) %126, align 2, !dbg !25
  %128 = add nuw nsw i32 %98, 390, !dbg !25
  %129 = add nuw nsw i32 %128, %23, !dbg !25
  %130 = zext nneg i32 %129 to i64, !dbg !25
  %131 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %130, !dbg !25
  %132 = insertelement <1 x i16> undef, i16 %83, i64 0, !dbg !25
  store <1 x i16> %132, ptr addrspace(3) %131, align 2, !dbg !25
  %133 = add nuw nsw i32 %98, 455, !dbg !25
  %134 = add nuw nsw i32 %133, %23, !dbg !25
  %135 = zext nneg i32 %134 to i64, !dbg !25
  %136 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %135, !dbg !25
  %137 = insertelement <1 x i16> undef, i16 %84, i64 0, !dbg !25
  store <1 x i16> %137, ptr addrspace(3) %136, align 2, !dbg !25
  %138 = add nuw nsw i32 %24, %98, !dbg !25
  %139 = zext nneg i32 %138 to i64, !dbg !25
  %140 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %139, !dbg !25
  %141 = insertelement <1 x i16> undef, i16 %90, i64 0, !dbg !25
  store <1 x i16> %141, ptr addrspace(3) %140, align 2, !dbg !25
  %142 = add nuw nsw i32 %24, %103, !dbg !25
  %143 = zext nneg i32 %142 to i64, !dbg !25
  %144 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %143, !dbg !25
  %145 = insertelement <1 x i16> undef, i16 %91, i64 0, !dbg !25
  store <1 x i16> %145, ptr addrspace(3) %144, align 2, !dbg !25
  %146 = add nuw nsw i32 %24, %108, !dbg !25
  %147 = zext nneg i32 %146 to i64, !dbg !25
  %148 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %147, !dbg !25
  %149 = insertelement <1 x i16> undef, i16 %92, i64 0, !dbg !25
  store <1 x i16> %149, ptr addrspace(3) %148, align 2, !dbg !25
  %150 = add nuw nsw i32 %24, %113, !dbg !25
  %151 = zext nneg i32 %150 to i64, !dbg !25
  %152 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %151, !dbg !25
  %153 = insertelement <1 x i16> undef, i16 %93, i64 0, !dbg !25
  store <1 x i16> %153, ptr addrspace(3) %152, align 2, !dbg !25
  %154 = add nuw nsw i32 %24, %118, !dbg !25
  %155 = zext nneg i32 %154 to i64, !dbg !25
  %156 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %155, !dbg !25
  %157 = insertelement <1 x i16> undef, i16 %94, i64 0, !dbg !25
  store <1 x i16> %157, ptr addrspace(3) %156, align 2, !dbg !25
  %158 = add nuw nsw i32 %24, %123, !dbg !25
  %159 = zext nneg i32 %158 to i64, !dbg !25
  %160 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %159, !dbg !25
  %161 = insertelement <1 x i16> undef, i16 %95, i64 0, !dbg !25
  store <1 x i16> %161, ptr addrspace(3) %160, align 2, !dbg !25
  %162 = add nuw nsw i32 %24, %128, !dbg !25
  %163 = zext nneg i32 %162 to i64, !dbg !25
  %164 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %163, !dbg !25
  %165 = insertelement <1 x i16> undef, i16 %96, i64 0, !dbg !25
  store <1 x i16> %165, ptr addrspace(3) %164, align 2, !dbg !25
  %166 = add nuw nsw i32 %24, %133, !dbg !25
  %167 = zext nneg i32 %166 to i64, !dbg !25
  %168 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %167, !dbg !25
  %169 = insertelement <1 x i16> undef, i16 %97, i64 0, !dbg !25
  store <1 x i16> %169, ptr addrspace(3) %168, align 2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %170 = mul nuw nsw i32 %15, 65, !dbg !25
  %171 = add nuw nsw i32 %170, %20, !dbg !25
  %172 = zext nneg i32 %171 to i64, !dbg !25
  %173 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %172, !dbg !25
  %174 = load i16, ptr addrspace(3) %173, align 2, !dbg !25
  %175 = or i32 %20, 1, !dbg !25
  %176 = add nuw nsw i32 %170, %175, !dbg !25
  %177 = zext nneg i32 %176 to i64, !dbg !25
  %178 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %177, !dbg !25
  %179 = load i16, ptr addrspace(3) %178, align 2, !dbg !25
  %180 = or i32 %20, 2, !dbg !25
  %181 = add nuw nsw i32 %170, %180, !dbg !25
  %182 = zext nneg i32 %181 to i64, !dbg !25
  %183 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %182, !dbg !25
  %184 = load i16, ptr addrspace(3) %183, align 2, !dbg !25
  %185 = or i32 %20, 3, !dbg !25
  %186 = add nuw nsw i32 %170, %185, !dbg !25
  %187 = zext nneg i32 %186 to i64, !dbg !25
  %188 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %187, !dbg !25
  %189 = load i16, ptr addrspace(3) %188, align 2, !dbg !25
  %190 = mul nuw nsw i32 %16, 65, !dbg !25
  %191 = add nuw nsw i32 %190, %20, !dbg !25
  %192 = zext nneg i32 %191 to i64, !dbg !25
  %193 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %192, !dbg !25
  %194 = load i16, ptr addrspace(3) %193, align 2, !dbg !25
  %195 = add nuw nsw i32 %190, %175, !dbg !25
  %196 = zext nneg i32 %195 to i64, !dbg !25
  %197 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %196, !dbg !25
  %198 = load i16, ptr addrspace(3) %197, align 2, !dbg !25
  %199 = add nuw nsw i32 %190, %180, !dbg !25
  %200 = zext nneg i32 %199 to i64, !dbg !25
  %201 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %200, !dbg !25
  %202 = load i16, ptr addrspace(3) %201, align 2, !dbg !25
  %203 = add nuw nsw i32 %190, %185, !dbg !25
  %204 = zext nneg i32 %203 to i64, !dbg !25
  %205 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %204, !dbg !25
  %206 = load i16, ptr addrspace(3) %205, align 2, !dbg !25
  %207 = mul nuw nsw i32 %17, 65, !dbg !25
  %208 = add nuw nsw i32 %207, %20, !dbg !25
  %209 = zext nneg i32 %208 to i64, !dbg !25
  %210 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %209, !dbg !25
  %211 = load i16, ptr addrspace(3) %210, align 2, !dbg !25
  %212 = add nuw nsw i32 %207, %175, !dbg !25
  %213 = zext nneg i32 %212 to i64, !dbg !25
  %214 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %213, !dbg !25
  %215 = load i16, ptr addrspace(3) %214, align 2, !dbg !25
  %216 = add nuw nsw i32 %207, %180, !dbg !25
  %217 = zext nneg i32 %216 to i64, !dbg !25
  %218 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %217, !dbg !25
  %219 = load i16, ptr addrspace(3) %218, align 2, !dbg !25
  %220 = add nuw nsw i32 %207, %185, !dbg !25
  %221 = zext nneg i32 %220 to i64, !dbg !25
  %222 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %221, !dbg !25
  %223 = load i16, ptr addrspace(3) %222, align 2, !dbg !25
  %224 = mul nuw nsw i32 %18, 65, !dbg !25
  %225 = add nuw nsw i32 %224, %20, !dbg !25
  %226 = zext nneg i32 %225 to i64, !dbg !25
  %227 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %226, !dbg !25
  %228 = load i16, ptr addrspace(3) %227, align 2, !dbg !25
  %229 = add nuw nsw i32 %224, %175, !dbg !25
  %230 = zext nneg i32 %229 to i64, !dbg !25
  %231 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %230, !dbg !25
  %232 = load i16, ptr addrspace(3) %231, align 2, !dbg !25
  %233 = add nuw nsw i32 %224, %180, !dbg !25
  %234 = zext nneg i32 %233 to i64, !dbg !25
  %235 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %234, !dbg !25
  %236 = load i16, ptr addrspace(3) %235, align 2, !dbg !25
  %237 = add nuw nsw i32 %224, %185, !dbg !25
  %238 = zext nneg i32 %237 to i64, !dbg !25
  %239 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %238, !dbg !25
  %240 = load i16, ptr addrspace(3) %239, align 2, !dbg !25
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %174) #2, !dbg !25
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %179) #2, !dbg !25
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %184) #2, !dbg !25
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #2, !dbg !25
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %194) #2, !dbg !25
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %198) #2, !dbg !25
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %202) #2, !dbg !25
  %248 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #2, !dbg !25
  %249 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %211) #2, !dbg !25
  %250 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %215) #2, !dbg !25
  %251 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %219) #2, !dbg !25
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %223) #2, !dbg !25
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #2, !dbg !25
  %254 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #2, !dbg !25
  %255 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #2, !dbg !25
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %240) #2, !dbg !25
  %257 = shl nsw i32 %51, 8, !dbg !26
  %258 = shl nsw i32 %52, 8, !dbg !26
  %259 = shl nsw i32 %53, 8, !dbg !26
  %260 = shl nsw i32 %54, 8, !dbg !26
  %261 = add i32 %257, %41, !dbg !27
  %262 = add i32 %258, %41, !dbg !27
  %263 = add i32 %259, %41, !dbg !27
  %264 = add i32 %260, %41, !dbg !27
  %265 = sext i32 %261 to i64, !dbg !28
  %266 = getelementptr float, ptr addrspace(1) %1, i64 %265, !dbg !28
  %267 = sext i32 %262 to i64, !dbg !28
  %268 = getelementptr float, ptr addrspace(1) %1, i64 %267, !dbg !28
  %269 = sext i32 %263 to i64, !dbg !28
  %270 = getelementptr float, ptr addrspace(1) %1, i64 %269, !dbg !28
  %271 = sext i32 %264 to i64, !dbg !28
  %272 = getelementptr float, ptr addrspace(1) %1, i64 %271, !dbg !28
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %266, i1 %44) #2, !dbg !29
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !29
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !29
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !29
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !29
  %278 = bitcast i32 %274 to float, !dbg !29
  %279 = bitcast i32 %275 to float, !dbg !29
  %280 = bitcast i32 %276 to float, !dbg !29
  %281 = bitcast i32 %277 to float, !dbg !29
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %268, i1 %44) #2, !dbg !29
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !29
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !29
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !29
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !29
  %287 = bitcast i32 %283 to float, !dbg !29
  %288 = bitcast i32 %284 to float, !dbg !29
  %289 = bitcast i32 %285 to float, !dbg !29
  %290 = bitcast i32 %286 to float, !dbg !29
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %270, i1 %44) #2, !dbg !29
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !29
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !29
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !29
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !29
  %296 = bitcast i32 %292 to float, !dbg !29
  %297 = bitcast i32 %293 to float, !dbg !29
  %298 = bitcast i32 %294 to float, !dbg !29
  %299 = bitcast i32 %295 to float, !dbg !29
  %300 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %272, i1 %44) #2, !dbg !29
  %301 = extractvalue { i32, i32, i32, i32 } %300, 0, !dbg !29
  %302 = extractvalue { i32, i32, i32, i32 } %300, 1, !dbg !29
  %303 = extractvalue { i32, i32, i32, i32 } %300, 2, !dbg !29
  %304 = extractvalue { i32, i32, i32, i32 } %300, 3, !dbg !29
  %305 = bitcast i32 %301 to float, !dbg !29
  %306 = bitcast i32 %302 to float, !dbg !29
  %307 = bitcast i32 %303 to float, !dbg !29
  %308 = bitcast i32 %304 to float, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %309 = mul nuw nsw i32 %20, 72, !dbg !29
  %310 = or i32 %15, %309, !dbg !29
  %311 = zext nneg i32 %310 to i64, !dbg !29
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i64 %311, !dbg !29
  %313 = insertelement <1 x float> undef, float %278, i64 0, !dbg !29
  store <1 x float> %313, ptr addrspace(3) %312, align 4, !dbg !29
  %314 = mul nuw nsw i32 %175, 72, !dbg !29
  %315 = add nuw nsw i32 %314, %15, !dbg !29
  %316 = zext nneg i32 %315 to i64, !dbg !29
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i64 %316, !dbg !29
  %318 = insertelement <1 x float> undef, float %279, i64 0, !dbg !29
  store <1 x float> %318, ptr addrspace(3) %317, align 4, !dbg !29
  %319 = mul nuw nsw i32 %180, 72, !dbg !29
  %320 = or i32 %319, %15, !dbg !29
  %321 = zext nneg i32 %320 to i64, !dbg !29
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i64 %321, !dbg !29
  %323 = insertelement <1 x float> undef, float %280, i64 0, !dbg !29
  store <1 x float> %323, ptr addrspace(3) %322, align 4, !dbg !29
  %324 = mul nuw nsw i32 %185, 72, !dbg !29
  %325 = add nuw nsw i32 %324, %15, !dbg !29
  %326 = zext nneg i32 %325 to i64, !dbg !29
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i64 %326, !dbg !29
  %328 = insertelement <1 x float> undef, float %281, i64 0, !dbg !29
  store <1 x float> %328, ptr addrspace(3) %327, align 4, !dbg !29
  %329 = or i32 %16, %309, !dbg !29
  %330 = zext nneg i32 %329 to i64, !dbg !29
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i64 %330, !dbg !29
  %332 = insertelement <1 x float> undef, float %287, i64 0, !dbg !29
  store <1 x float> %332, ptr addrspace(3) %331, align 4, !dbg !29
  %333 = add nuw nsw i32 %16, %314, !dbg !29
  %334 = zext nneg i32 %333 to i64, !dbg !29
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i64 %334, !dbg !29
  %336 = insertelement <1 x float> undef, float %288, i64 0, !dbg !29
  store <1 x float> %336, ptr addrspace(3) %335, align 4, !dbg !29
  %337 = add nuw nsw i32 %16, %319, !dbg !29
  %338 = zext nneg i32 %337 to i64, !dbg !29
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i64 %338, !dbg !29
  %340 = insertelement <1 x float> undef, float %289, i64 0, !dbg !29
  store <1 x float> %340, ptr addrspace(3) %339, align 4, !dbg !29
  %341 = add nuw nsw i32 %16, %324, !dbg !29
  %342 = zext nneg i32 %341 to i64, !dbg !29
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i64 %342, !dbg !29
  %344 = insertelement <1 x float> undef, float %290, i64 0, !dbg !29
  store <1 x float> %344, ptr addrspace(3) %343, align 4, !dbg !29
  %345 = add nuw nsw i32 %17, %309, !dbg !29
  %346 = zext nneg i32 %345 to i64, !dbg !29
  %347 = getelementptr float, ptr addrspace(3) @global_smem, i64 %346, !dbg !29
  %348 = insertelement <1 x float> undef, float %296, i64 0, !dbg !29
  store <1 x float> %348, ptr addrspace(3) %347, align 4, !dbg !29
  %349 = add nuw nsw i32 %17, %314, !dbg !29
  %350 = zext nneg i32 %349 to i64, !dbg !29
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i64 %350, !dbg !29
  %352 = insertelement <1 x float> undef, float %297, i64 0, !dbg !29
  store <1 x float> %352, ptr addrspace(3) %351, align 4, !dbg !29
  %353 = add nuw nsw i32 %17, %319, !dbg !29
  %354 = zext nneg i32 %353 to i64, !dbg !29
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i64 %354, !dbg !29
  %356 = insertelement <1 x float> undef, float %298, i64 0, !dbg !29
  store <1 x float> %356, ptr addrspace(3) %355, align 4, !dbg !29
  %357 = add nuw nsw i32 %17, %324, !dbg !29
  %358 = zext nneg i32 %357 to i64, !dbg !29
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i64 %358, !dbg !29
  %360 = insertelement <1 x float> undef, float %299, i64 0, !dbg !29
  store <1 x float> %360, ptr addrspace(3) %359, align 4, !dbg !29
  %361 = add nuw nsw i32 %18, %309, !dbg !29
  %362 = zext nneg i32 %361 to i64, !dbg !29
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i64 %362, !dbg !29
  %364 = insertelement <1 x float> undef, float %305, i64 0, !dbg !29
  store <1 x float> %364, ptr addrspace(3) %363, align 4, !dbg !29
  %365 = add nuw nsw i32 %18, %314, !dbg !29
  %366 = zext nneg i32 %365 to i64, !dbg !29
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i64 %366, !dbg !29
  %368 = insertelement <1 x float> undef, float %306, i64 0, !dbg !29
  store <1 x float> %368, ptr addrspace(3) %367, align 4, !dbg !29
  %369 = add nuw nsw i32 %18, %319, !dbg !29
  %370 = zext nneg i32 %369 to i64, !dbg !29
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i64 %370, !dbg !29
  %372 = insertelement <1 x float> undef, float %307, i64 0, !dbg !29
  store <1 x float> %372, ptr addrspace(3) %371, align 4, !dbg !29
  %373 = add nuw nsw i32 %18, %324, !dbg !29
  %374 = zext nneg i32 %373 to i64, !dbg !29
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i64 %374, !dbg !29
  %376 = insertelement <1 x float> undef, float %308, i64 0, !dbg !29
  store <1 x float> %376, ptr addrspace(3) %375, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %377 = mul nuw nsw i32 %23, 72, !dbg !29
  %378 = add nuw nsw i32 %377, %11, !dbg !29
  %379 = zext nneg i32 %378 to i64, !dbg !29
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i64 %379, !dbg !29
  %381 = mul nuw nsw i32 %24, 72, !dbg !29
  %382 = add nuw nsw i32 %381, %11, !dbg !29
  %383 = zext nneg i32 %382 to i64, !dbg !29
  %384 = getelementptr float, ptr addrspace(3) @global_smem, i64 %383, !dbg !29
  %385 = add nsw i32 %.decomposed, 131072, !dbg !30
  %386 = add i32 %64, %385, !dbg !31
  %387 = add i32 %66, %385, !dbg !31
  %388 = sext i32 %386 to i64, !dbg !32
  %389 = getelementptr i16, ptr addrspace(1) %0, i64 %388, !dbg !32
  %390 = sext i32 %387 to i64, !dbg !32
  %391 = getelementptr i16, ptr addrspace(1) %0, i64 %390, !dbg !32
  %392 = icmp sgt i32 %35, 255, !dbg !33
  %393 = icmp sgt i32 %36, 255, !dbg !33
  %394 = icmp sgt i32 %41, 255, !dbg !33
  %395 = fmul float %241, %278, !dbg !34
  %396 = fmul float %242, %279, !dbg !34
  %397 = fmul float %243, %280, !dbg !34
  %398 = fmul float %244, %281, !dbg !34
  %399 = fmul float %245, %287, !dbg !34
  %400 = fmul float %246, %288, !dbg !34
  %401 = fmul float %247, %289, !dbg !34
  %402 = fmul float %248, %290, !dbg !34
  %403 = fmul float %249, %296, !dbg !34
  %404 = fmul float %250, %297, !dbg !34
  %405 = fmul float %251, %298, !dbg !34
  %406 = fmul float %252, %299, !dbg !34
  %407 = fmul float %253, %305, !dbg !34
  %408 = fmul float %254, %306, !dbg !34
  %409 = fmul float %255, %307, !dbg !34
  %410 = fmul float %256, %308, !dbg !34
  %411 = icmp sgt i32 %35, 127, !dbg !35
  %412 = icmp sgt i32 %36, 127, !dbg !35
  %413 = icmp sgt i32 %41, 127, !dbg !35
  %414 = add nsw i32 %.decomposed, -65536, !dbg !36
  %415 = add i32 %64, %414, !dbg !37
  %416 = add i32 %66, %414, !dbg !37
  %417 = sext i32 %415 to i64, !dbg !38
  %418 = getelementptr i16, ptr addrspace(1) %0, i64 %417, !dbg !38
  %419 = sext i32 %416 to i64, !dbg !38
  %420 = getelementptr i16, ptr addrspace(1) %0, i64 %419, !dbg !38
  %421 = and i32 %33, 67108862, !dbg !39
  %422 = icmp eq i32 %421, 2, !dbg !39
  %423 = add i32 %41, -128, !dbg !40
  %424 = add i32 %423, %257, !dbg !41
  %425 = add i32 %423, %258, !dbg !41
  %426 = add i32 %423, %259, !dbg !41
  %427 = add i32 %423, %260, !dbg !41
  %428 = sext i32 %424 to i64, !dbg !42
  %429 = getelementptr float, ptr addrspace(1) %2, i64 %428, !dbg !42
  %430 = sext i32 %425 to i64, !dbg !42
  %431 = getelementptr float, ptr addrspace(1) %2, i64 %430, !dbg !42
  %432 = sext i32 %426 to i64, !dbg !42
  %433 = getelementptr float, ptr addrspace(1) %2, i64 %432, !dbg !42
  %434 = sext i32 %427 to i64, !dbg !42
  %435 = getelementptr float, ptr addrspace(1) %2, i64 %434, !dbg !42
  %436 = icmp slt i32 %35, 128, !dbg !43
  %437 = icmp slt i32 %36, 128, !dbg !43
  %438 = icmp slt i32 %41, 128, !dbg !43
  %439 = add nsw i32 %.decomposed, 65536, !dbg !44
  %440 = add i32 %64, %439, !dbg !45
  %441 = add i32 %66, %439, !dbg !45
  %442 = sext i32 %440 to i64, !dbg !46
  %443 = getelementptr i16, ptr addrspace(1) %0, i64 %442, !dbg !46
  %444 = sext i32 %441 to i64, !dbg !46
  %445 = getelementptr i16, ptr addrspace(1) %0, i64 %444, !dbg !46
  %446 = add i32 %41, 128, !dbg !47
  %447 = add i32 %446, %257, !dbg !48
  %448 = add i32 %446, %258, !dbg !48
  %449 = add i32 %446, %259, !dbg !48
  %450 = add i32 %446, %260, !dbg !48
  %451 = sext i32 %447 to i64, !dbg !49
  %452 = getelementptr float, ptr addrspace(1) %2, i64 %451, !dbg !49
  %453 = sext i32 %448 to i64, !dbg !49
  %454 = getelementptr float, ptr addrspace(1) %2, i64 %453, !dbg !49
  %455 = sext i32 %449 to i64, !dbg !49
  %456 = getelementptr float, ptr addrspace(1) %2, i64 %455, !dbg !49
  %457 = sext i32 %450 to i64, !dbg !49
  %458 = getelementptr float, ptr addrspace(1) %2, i64 %457, !dbg !49
  %459 = add nsw i32 %.decomposed, 196608, !dbg !50
  %460 = add i32 %64, %459, !dbg !51
  %461 = add i32 %66, %459, !dbg !51
  %462 = sext i32 %460 to i64, !dbg !52
  %463 = getelementptr i16, ptr addrspace(1) %0, i64 %462, !dbg !52
  %464 = sext i32 %461 to i64, !dbg !52
  %465 = getelementptr i16, ptr addrspace(1) %0, i64 %464, !dbg !52
  %466 = load <8 x float>, ptr addrspace(3) %380, align 32, !dbg !29
  %467 = insertelement <8 x i1> poison, i1 %392, i64 0, !dbg !53
  %468 = shufflevector <8 x i1> %467, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %469 = insertelement <8 x i1> poison, i1 %411, i64 0, !dbg !53
  %470 = shufflevector <8 x i1> %469, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %471 = insertelement <8 x i1> poison, i1 %436, i64 0, !dbg !53
  %472 = shufflevector <8 x i1> %471, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %473 = load <8 x float>, ptr addrspace(3) %384, align 32, !dbg !29
  %474 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %389, i1 %42) #2, !dbg !54
  %475 = extractvalue { i32, i32, i32, i32 } %474, 0, !dbg !54
  %476 = extractvalue { i32, i32, i32, i32 } %474, 1, !dbg !54
  %477 = extractvalue { i32, i32, i32, i32 } %474, 2, !dbg !54
  %478 = extractvalue { i32, i32, i32, i32 } %474, 3, !dbg !54
  %479 = trunc i32 %475 to i16, !dbg !54
  %extelt.offset8 = lshr i32 %475, 16, !dbg !54
  %480 = trunc i32 %extelt.offset8 to i16, !dbg !54
  %481 = trunc i32 %476 to i16, !dbg !54
  %extelt.offset9 = lshr i32 %476, 16, !dbg !54
  %482 = trunc i32 %extelt.offset9 to i16, !dbg !54
  %483 = trunc i32 %477 to i16, !dbg !54
  %extelt.offset10 = lshr i32 %477, 16, !dbg !54
  %484 = trunc i32 %extelt.offset10 to i16, !dbg !54
  %485 = trunc i32 %478 to i16, !dbg !54
  %extelt.offset11 = lshr i32 %478, 16, !dbg !54
  %486 = trunc i32 %extelt.offset11 to i16, !dbg !54
  %487 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %391, i1 %43) #2, !dbg !54
  %488 = extractvalue { i32, i32, i32, i32 } %487, 0, !dbg !54
  %489 = extractvalue { i32, i32, i32, i32 } %487, 1, !dbg !54
  %490 = extractvalue { i32, i32, i32, i32 } %487, 2, !dbg !54
  %491 = extractvalue { i32, i32, i32, i32 } %487, 3, !dbg !54
  %492 = trunc i32 %488 to i16, !dbg !54
  %extelt.offset12 = lshr i32 %488, 16, !dbg !54
  %493 = trunc i32 %extelt.offset12 to i16, !dbg !54
  %494 = trunc i32 %489 to i16, !dbg !54
  %extelt.offset13 = lshr i32 %489, 16, !dbg !54
  %495 = trunc i32 %extelt.offset13 to i16, !dbg !54
  %496 = trunc i32 %490 to i16, !dbg !54
  %extelt.offset14 = lshr i32 %490, 16, !dbg !54
  %497 = trunc i32 %extelt.offset14 to i16, !dbg !54
  %498 = trunc i32 %491 to i16, !dbg !54
  %extelt.offset15 = lshr i32 %491, 16, !dbg !54
  %499 = trunc i32 %extelt.offset15 to i16, !dbg !54
  %500 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %479) #2, !dbg !55
  %501 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #2, !dbg !55
  %502 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #2, !dbg !55
  %503 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #2, !dbg !55
  %504 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #2, !dbg !55
  %505 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #2, !dbg !55
  %506 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #2, !dbg !55
  %507 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #2, !dbg !55
  %508 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %492) #2, !dbg !55
  %509 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %493) #2, !dbg !55
  %510 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %494) #2, !dbg !55
  %511 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %495) #2, !dbg !55
  %512 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %496) #2, !dbg !55
  %513 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %497) #2, !dbg !55
  %514 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %498) #2, !dbg !55
  %515 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %499) #2, !dbg !55
  %516 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !56
  %517 = extractvalue { i32, i32, i32, i32 } %516, 0, !dbg !56
  %518 = extractvalue { i32, i32, i32, i32 } %516, 1, !dbg !56
  %519 = extractvalue { i32, i32, i32, i32 } %516, 2, !dbg !56
  %520 = extractvalue { i32, i32, i32, i32 } %516, 3, !dbg !56
  %521 = trunc i32 %517 to i16, !dbg !56
  %extelt.offset16 = lshr i32 %517, 16, !dbg !56
  %522 = trunc i32 %extelt.offset16 to i16, !dbg !56
  %523 = trunc i32 %518 to i16, !dbg !56
  %extelt.offset17 = lshr i32 %518, 16, !dbg !56
  %524 = trunc i32 %extelt.offset17 to i16, !dbg !56
  %525 = trunc i32 %519 to i16, !dbg !56
  %extelt.offset18 = lshr i32 %519, 16, !dbg !56
  %526 = trunc i32 %extelt.offset18 to i16, !dbg !56
  %527 = trunc i32 %520 to i16, !dbg !56
  %extelt.offset19 = lshr i32 %520, 16, !dbg !56
  %528 = trunc i32 %extelt.offset19 to i16, !dbg !56
  %529 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !56
  %530 = extractvalue { i32, i32, i32, i32 } %529, 0, !dbg !56
  %531 = extractvalue { i32, i32, i32, i32 } %529, 1, !dbg !56
  %532 = extractvalue { i32, i32, i32, i32 } %529, 2, !dbg !56
  %533 = extractvalue { i32, i32, i32, i32 } %529, 3, !dbg !56
  %534 = trunc i32 %530 to i16, !dbg !56
  %extelt.offset20 = lshr i32 %530, 16, !dbg !56
  %535 = trunc i32 %extelt.offset20 to i16, !dbg !56
  %536 = trunc i32 %531 to i16, !dbg !56
  %extelt.offset21 = lshr i32 %531, 16, !dbg !56
  %537 = trunc i32 %extelt.offset21 to i16, !dbg !56
  %538 = trunc i32 %532 to i16, !dbg !56
  %extelt.offset22 = lshr i32 %532, 16, !dbg !56
  %539 = trunc i32 %extelt.offset22 to i16, !dbg !56
  %540 = trunc i32 %533 to i16, !dbg !56
  %extelt.offset23 = lshr i32 %533, 16, !dbg !56
  %541 = trunc i32 %extelt.offset23 to i16, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %542 = insertelement <1 x i16> undef, i16 %521, i64 0, !dbg !53
  store <1 x i16> %542, ptr addrspace(3) %101, align 2, !dbg !53
  %543 = insertelement <1 x i16> undef, i16 %522, i64 0, !dbg !53
  store <1 x i16> %543, ptr addrspace(3) %106, align 2, !dbg !53
  %544 = insertelement <1 x i16> undef, i16 %523, i64 0, !dbg !53
  store <1 x i16> %544, ptr addrspace(3) %111, align 2, !dbg !53
  %545 = insertelement <1 x i16> undef, i16 %524, i64 0, !dbg !53
  store <1 x i16> %545, ptr addrspace(3) %116, align 2, !dbg !53
  %546 = insertelement <1 x i16> undef, i16 %525, i64 0, !dbg !53
  store <1 x i16> %546, ptr addrspace(3) %121, align 2, !dbg !53
  %547 = insertelement <1 x i16> undef, i16 %526, i64 0, !dbg !53
  store <1 x i16> %547, ptr addrspace(3) %126, align 2, !dbg !53
  %548 = insertelement <1 x i16> undef, i16 %527, i64 0, !dbg !53
  store <1 x i16> %548, ptr addrspace(3) %131, align 2, !dbg !53
  %549 = insertelement <1 x i16> undef, i16 %528, i64 0, !dbg !53
  store <1 x i16> %549, ptr addrspace(3) %136, align 2, !dbg !53
  %550 = insertelement <1 x i16> undef, i16 %534, i64 0, !dbg !53
  store <1 x i16> %550, ptr addrspace(3) %140, align 2, !dbg !53
  %551 = insertelement <1 x i16> undef, i16 %535, i64 0, !dbg !53
  store <1 x i16> %551, ptr addrspace(3) %144, align 2, !dbg !53
  %552 = insertelement <1 x i16> undef, i16 %536, i64 0, !dbg !53
  store <1 x i16> %552, ptr addrspace(3) %148, align 2, !dbg !53
  %553 = insertelement <1 x i16> undef, i16 %537, i64 0, !dbg !53
  store <1 x i16> %553, ptr addrspace(3) %152, align 2, !dbg !53
  %554 = insertelement <1 x i16> undef, i16 %538, i64 0, !dbg !53
  store <1 x i16> %554, ptr addrspace(3) %156, align 2, !dbg !53
  %555 = insertelement <1 x i16> undef, i16 %539, i64 0, !dbg !53
  store <1 x i16> %555, ptr addrspace(3) %160, align 2, !dbg !53
  %556 = insertelement <1 x i16> undef, i16 %540, i64 0, !dbg !53
  store <1 x i16> %556, ptr addrspace(3) %164, align 2, !dbg !53
  %557 = insertelement <1 x i16> undef, i16 %541, i64 0, !dbg !53
  store <1 x i16> %557, ptr addrspace(3) %168, align 2, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %558 = load i16, ptr addrspace(3) %173, align 2, !dbg !53
  %559 = load i16, ptr addrspace(3) %178, align 2, !dbg !53
  %560 = load i16, ptr addrspace(3) %183, align 2, !dbg !53
  %561 = load i16, ptr addrspace(3) %188, align 2, !dbg !53
  %562 = load i16, ptr addrspace(3) %193, align 2, !dbg !53
  %563 = load i16, ptr addrspace(3) %197, align 2, !dbg !53
  %564 = load i16, ptr addrspace(3) %201, align 2, !dbg !53
  %565 = load i16, ptr addrspace(3) %205, align 2, !dbg !53
  %566 = load i16, ptr addrspace(3) %210, align 2, !dbg !53
  %567 = load i16, ptr addrspace(3) %214, align 2, !dbg !53
  %568 = load i16, ptr addrspace(3) %218, align 2, !dbg !53
  %569 = load i16, ptr addrspace(3) %222, align 2, !dbg !53
  %570 = load i16, ptr addrspace(3) %227, align 2, !dbg !53
  %571 = load i16, ptr addrspace(3) %231, align 2, !dbg !53
  %572 = load i16, ptr addrspace(3) %235, align 2, !dbg !53
  %573 = load i16, ptr addrspace(3) %239, align 2, !dbg !53
  %574 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %558) #2, !dbg !57
  %575 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %559) #2, !dbg !57
  %576 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %560) #2, !dbg !57
  %577 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %561) #2, !dbg !57
  %578 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %562) #2, !dbg !57
  %579 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %563) #2, !dbg !57
  %580 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %564) #2, !dbg !57
  %581 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %565) #2, !dbg !57
  %582 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %566) #2, !dbg !57
  %583 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %567) #2, !dbg !57
  %584 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %568) #2, !dbg !57
  %585 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %569) #2, !dbg !57
  %586 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %570) #2, !dbg !57
  %587 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %571) #2, !dbg !57
  %588 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %572) #2, !dbg !57
  %589 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %573) #2, !dbg !57
  %590 = select i1 %394, float %574, float 0.000000e+00, !dbg !53
  %591 = select i1 %394, float %575, float 0.000000e+00, !dbg !53
  %592 = select i1 %394, float %576, float 0.000000e+00, !dbg !53
  %593 = select i1 %394, float %577, float 0.000000e+00, !dbg !53
  %594 = select i1 %394, float %578, float 0.000000e+00, !dbg !53
  %595 = select i1 %394, float %579, float 0.000000e+00, !dbg !53
  %596 = select i1 %394, float %580, float 0.000000e+00, !dbg !53
  %597 = select i1 %394, float %581, float 0.000000e+00, !dbg !53
  %598 = select i1 %394, float %582, float 0.000000e+00, !dbg !53
  %599 = select i1 %394, float %583, float 0.000000e+00, !dbg !53
  %600 = select i1 %394, float %584, float 0.000000e+00, !dbg !53
  %601 = select i1 %394, float %585, float 0.000000e+00, !dbg !53
  %602 = select i1 %394, float %586, float 0.000000e+00, !dbg !53
  %603 = select i1 %394, float %587, float 0.000000e+00, !dbg !53
  %604 = select i1 %394, float %588, float 0.000000e+00, !dbg !53
  %605 = select i1 %394, float %589, float 0.000000e+00, !dbg !53
  %606 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %418, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422) #2, !dbg !58
  %607 = extractvalue { i32, i32, i32, i32 } %606, 0, !dbg !58
  %608 = extractvalue { i32, i32, i32, i32 } %606, 1, !dbg !58
  %609 = extractvalue { i32, i32, i32, i32 } %606, 2, !dbg !58
  %610 = extractvalue { i32, i32, i32, i32 } %606, 3, !dbg !58
  %611 = trunc i32 %607 to i16, !dbg !58
  %extelt.offset24 = lshr i32 %607, 16, !dbg !58
  %612 = trunc i32 %extelt.offset24 to i16, !dbg !58
  %613 = trunc i32 %608 to i16, !dbg !58
  %extelt.offset25 = lshr i32 %608, 16, !dbg !58
  %614 = trunc i32 %extelt.offset25 to i16, !dbg !58
  %615 = trunc i32 %609 to i16, !dbg !58
  %extelt.offset26 = lshr i32 %609, 16, !dbg !58
  %616 = trunc i32 %extelt.offset26 to i16, !dbg !58
  %617 = trunc i32 %610 to i16, !dbg !58
  %extelt.offset27 = lshr i32 %610, 16, !dbg !58
  %618 = trunc i32 %extelt.offset27 to i16, !dbg !58
  %619 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %420, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422) #2, !dbg !58
  %620 = extractvalue { i32, i32, i32, i32 } %619, 0, !dbg !58
  %621 = extractvalue { i32, i32, i32, i32 } %619, 1, !dbg !58
  %622 = extractvalue { i32, i32, i32, i32 } %619, 2, !dbg !58
  %623 = extractvalue { i32, i32, i32, i32 } %619, 3, !dbg !58
  %624 = trunc i32 %620 to i16, !dbg !58
  %extelt.offset28 = lshr i32 %620, 16, !dbg !58
  %625 = trunc i32 %extelt.offset28 to i16, !dbg !58
  %626 = trunc i32 %621 to i16, !dbg !58
  %extelt.offset29 = lshr i32 %621, 16, !dbg !58
  %627 = trunc i32 %extelt.offset29 to i16, !dbg !58
  %628 = trunc i32 %622 to i16, !dbg !58
  %extelt.offset30 = lshr i32 %622, 16, !dbg !58
  %629 = trunc i32 %extelt.offset30 to i16, !dbg !58
  %630 = trunc i32 %623 to i16, !dbg !58
  %extelt.offset31 = lshr i32 %623, 16, !dbg !58
  %631 = trunc i32 %extelt.offset31 to i16, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %632 = insertelement <1 x i16> undef, i16 %611, i64 0, !dbg !59
  store <1 x i16> %632, ptr addrspace(3) %101, align 2, !dbg !59
  %633 = insertelement <1 x i16> undef, i16 %612, i64 0, !dbg !59
  store <1 x i16> %633, ptr addrspace(3) %106, align 2, !dbg !59
  %634 = insertelement <1 x i16> undef, i16 %613, i64 0, !dbg !59
  store <1 x i16> %634, ptr addrspace(3) %111, align 2, !dbg !59
  %635 = insertelement <1 x i16> undef, i16 %614, i64 0, !dbg !59
  store <1 x i16> %635, ptr addrspace(3) %116, align 2, !dbg !59
  %636 = insertelement <1 x i16> undef, i16 %615, i64 0, !dbg !59
  store <1 x i16> %636, ptr addrspace(3) %121, align 2, !dbg !59
  %637 = insertelement <1 x i16> undef, i16 %616, i64 0, !dbg !59
  store <1 x i16> %637, ptr addrspace(3) %126, align 2, !dbg !59
  %638 = insertelement <1 x i16> undef, i16 %617, i64 0, !dbg !59
  store <1 x i16> %638, ptr addrspace(3) %131, align 2, !dbg !59
  %639 = insertelement <1 x i16> undef, i16 %618, i64 0, !dbg !59
  store <1 x i16> %639, ptr addrspace(3) %136, align 2, !dbg !59
  %640 = insertelement <1 x i16> undef, i16 %624, i64 0, !dbg !59
  store <1 x i16> %640, ptr addrspace(3) %140, align 2, !dbg !59
  %641 = insertelement <1 x i16> undef, i16 %625, i64 0, !dbg !59
  store <1 x i16> %641, ptr addrspace(3) %144, align 2, !dbg !59
  %642 = insertelement <1 x i16> undef, i16 %626, i64 0, !dbg !59
  store <1 x i16> %642, ptr addrspace(3) %148, align 2, !dbg !59
  %643 = insertelement <1 x i16> undef, i16 %627, i64 0, !dbg !59
  store <1 x i16> %643, ptr addrspace(3) %152, align 2, !dbg !59
  %644 = insertelement <1 x i16> undef, i16 %628, i64 0, !dbg !59
  store <1 x i16> %644, ptr addrspace(3) %156, align 2, !dbg !59
  %645 = insertelement <1 x i16> undef, i16 %629, i64 0, !dbg !59
  store <1 x i16> %645, ptr addrspace(3) %160, align 2, !dbg !59
  %646 = insertelement <1 x i16> undef, i16 %630, i64 0, !dbg !59
  store <1 x i16> %646, ptr addrspace(3) %164, align 2, !dbg !59
  %647 = insertelement <1 x i16> undef, i16 %631, i64 0, !dbg !59
  store <1 x i16> %647, ptr addrspace(3) %168, align 2, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %648 = load i16, ptr addrspace(3) %173, align 2, !dbg !59
  %649 = load i16, ptr addrspace(3) %178, align 2, !dbg !59
  %650 = load i16, ptr addrspace(3) %183, align 2, !dbg !59
  %651 = load i16, ptr addrspace(3) %188, align 2, !dbg !59
  %652 = load i16, ptr addrspace(3) %193, align 2, !dbg !59
  %653 = load i16, ptr addrspace(3) %197, align 2, !dbg !59
  %654 = load i16, ptr addrspace(3) %201, align 2, !dbg !59
  %655 = load i16, ptr addrspace(3) %205, align 2, !dbg !59
  %656 = load i16, ptr addrspace(3) %210, align 2, !dbg !59
  %657 = load i16, ptr addrspace(3) %214, align 2, !dbg !59
  %658 = load i16, ptr addrspace(3) %218, align 2, !dbg !59
  %659 = load i16, ptr addrspace(3) %222, align 2, !dbg !59
  %660 = load i16, ptr addrspace(3) %227, align 2, !dbg !59
  %661 = load i16, ptr addrspace(3) %231, align 2, !dbg !59
  %662 = load i16, ptr addrspace(3) %235, align 2, !dbg !59
  %663 = load i16, ptr addrspace(3) %239, align 2, !dbg !59
  %664 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %648) #2, !dbg !59
  %665 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %649) #2, !dbg !59
  %666 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %650) #2, !dbg !59
  %667 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %651) #2, !dbg !59
  %668 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %652) #2, !dbg !59
  %669 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %653) #2, !dbg !59
  %670 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %654) #2, !dbg !59
  %671 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %655) #2, !dbg !59
  %672 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %656) #2, !dbg !59
  %673 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %657) #2, !dbg !59
  %674 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %658) #2, !dbg !59
  %675 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %659) #2, !dbg !59
  %676 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %660) #2, !dbg !59
  %677 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %661) #2, !dbg !59
  %678 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %662) #2, !dbg !59
  %679 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %663) #2, !dbg !59
  %680 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %429, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422) #2, !dbg !60
  %681 = extractvalue { i32, i32, i32, i32 } %680, 0, !dbg !60
  %682 = extractvalue { i32, i32, i32, i32 } %680, 1, !dbg !60
  %683 = extractvalue { i32, i32, i32, i32 } %680, 2, !dbg !60
  %684 = extractvalue { i32, i32, i32, i32 } %680, 3, !dbg !60
  %685 = bitcast i32 %681 to float, !dbg !60
  %686 = bitcast i32 %682 to float, !dbg !60
  %687 = bitcast i32 %683 to float, !dbg !60
  %688 = bitcast i32 %684 to float, !dbg !60
  %689 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %431, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422) #2, !dbg !60
  %690 = extractvalue { i32, i32, i32, i32 } %689, 0, !dbg !60
  %691 = extractvalue { i32, i32, i32, i32 } %689, 1, !dbg !60
  %692 = extractvalue { i32, i32, i32, i32 } %689, 2, !dbg !60
  %693 = extractvalue { i32, i32, i32, i32 } %689, 3, !dbg !60
  %694 = bitcast i32 %690 to float, !dbg !60
  %695 = bitcast i32 %691 to float, !dbg !60
  %696 = bitcast i32 %692 to float, !dbg !60
  %697 = bitcast i32 %693 to float, !dbg !60
  %698 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %433, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422) #2, !dbg !60
  %699 = extractvalue { i32, i32, i32, i32 } %698, 0, !dbg !60
  %700 = extractvalue { i32, i32, i32, i32 } %698, 1, !dbg !60
  %701 = extractvalue { i32, i32, i32, i32 } %698, 2, !dbg !60
  %702 = extractvalue { i32, i32, i32, i32 } %698, 3, !dbg !60
  %703 = bitcast i32 %699 to float, !dbg !60
  %704 = bitcast i32 %700 to float, !dbg !60
  %705 = bitcast i32 %701 to float, !dbg !60
  %706 = bitcast i32 %702 to float, !dbg !60
  %707 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %435, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422) #2, !dbg !60
  %708 = extractvalue { i32, i32, i32, i32 } %707, 0, !dbg !60
  %709 = extractvalue { i32, i32, i32, i32 } %707, 1, !dbg !60
  %710 = extractvalue { i32, i32, i32, i32 } %707, 2, !dbg !60
  %711 = extractvalue { i32, i32, i32, i32 } %707, 3, !dbg !60
  %712 = bitcast i32 %708 to float, !dbg !60
  %713 = bitcast i32 %709 to float, !dbg !60
  %714 = bitcast i32 %710 to float, !dbg !60
  %715 = bitcast i32 %711 to float, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %716 = insertelement <1 x float> undef, float %685, i64 0, !dbg !60
  store <1 x float> %716, ptr addrspace(3) %312, align 4, !dbg !60
  %717 = insertelement <1 x float> undef, float %686, i64 0, !dbg !60
  store <1 x float> %717, ptr addrspace(3) %317, align 4, !dbg !60
  %718 = insertelement <1 x float> undef, float %687, i64 0, !dbg !60
  store <1 x float> %718, ptr addrspace(3) %322, align 4, !dbg !60
  %719 = insertelement <1 x float> undef, float %688, i64 0, !dbg !60
  store <1 x float> %719, ptr addrspace(3) %327, align 4, !dbg !60
  %720 = insertelement <1 x float> undef, float %694, i64 0, !dbg !60
  store <1 x float> %720, ptr addrspace(3) %331, align 4, !dbg !60
  %721 = insertelement <1 x float> undef, float %695, i64 0, !dbg !60
  store <1 x float> %721, ptr addrspace(3) %335, align 4, !dbg !60
  %722 = insertelement <1 x float> undef, float %696, i64 0, !dbg !60
  store <1 x float> %722, ptr addrspace(3) %339, align 4, !dbg !60
  %723 = insertelement <1 x float> undef, float %697, i64 0, !dbg !60
  store <1 x float> %723, ptr addrspace(3) %343, align 4, !dbg !60
  %724 = insertelement <1 x float> undef, float %703, i64 0, !dbg !60
  store <1 x float> %724, ptr addrspace(3) %347, align 4, !dbg !60
  %725 = insertelement <1 x float> undef, float %704, i64 0, !dbg !60
  store <1 x float> %725, ptr addrspace(3) %351, align 4, !dbg !60
  %726 = insertelement <1 x float> undef, float %705, i64 0, !dbg !60
  store <1 x float> %726, ptr addrspace(3) %355, align 4, !dbg !60
  %727 = insertelement <1 x float> undef, float %706, i64 0, !dbg !60
  store <1 x float> %727, ptr addrspace(3) %359, align 4, !dbg !60
  %728 = insertelement <1 x float> undef, float %712, i64 0, !dbg !60
  store <1 x float> %728, ptr addrspace(3) %363, align 4, !dbg !60
  %729 = insertelement <1 x float> undef, float %713, i64 0, !dbg !60
  store <1 x float> %729, ptr addrspace(3) %367, align 4, !dbg !60
  %730 = insertelement <1 x float> undef, float %714, i64 0, !dbg !60
  store <1 x float> %730, ptr addrspace(3) %371, align 4, !dbg !60
  %731 = insertelement <1 x float> undef, float %715, i64 0, !dbg !60
  store <1 x float> %731, ptr addrspace(3) %375, align 4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %732 = load <8 x float>, ptr addrspace(3) %380, align 32, !dbg !60
  %733 = load <8 x float>, ptr addrspace(3) %384, align 32, !dbg !60
  %734 = fmul float %664, %685, !dbg !61
  %735 = fmul float %665, %686, !dbg !61
  %736 = fmul float %666, %687, !dbg !61
  %737 = fmul float %667, %688, !dbg !61
  %738 = fmul float %668, %694, !dbg !61
  %739 = fmul float %669, %695, !dbg !61
  %740 = fmul float %670, %696, !dbg !61
  %741 = fmul float %671, %697, !dbg !61
  %742 = fmul float %672, %703, !dbg !61
  %743 = fmul float %673, %704, !dbg !61
  %744 = fmul float %674, %705, !dbg !61
  %745 = fmul float %675, %706, !dbg !61
  %746 = fmul float %676, %712, !dbg !61
  %747 = fmul float %677, %713, !dbg !61
  %748 = fmul float %678, %714, !dbg !61
  %749 = fmul float %679, %715, !dbg !61
  %750 = fsub float 0.000000e+00, %734, !dbg !62
  %751 = fsub float 0.000000e+00, %735, !dbg !62
  %752 = fsub float 0.000000e+00, %736, !dbg !62
  %753 = fsub float 0.000000e+00, %737, !dbg !62
  %754 = fsub float 0.000000e+00, %738, !dbg !62
  %755 = fsub float 0.000000e+00, %739, !dbg !62
  %756 = fsub float 0.000000e+00, %740, !dbg !62
  %757 = fsub float 0.000000e+00, %741, !dbg !62
  %758 = fsub float 0.000000e+00, %742, !dbg !62
  %759 = fsub float 0.000000e+00, %743, !dbg !62
  %760 = fsub float 0.000000e+00, %744, !dbg !62
  %761 = fsub float 0.000000e+00, %745, !dbg !62
  %762 = fsub float 0.000000e+00, %746, !dbg !62
  %763 = fsub float 0.000000e+00, %747, !dbg !62
  %764 = fsub float 0.000000e+00, %748, !dbg !62
  %765 = fsub float 0.000000e+00, %749, !dbg !62
  %766 = select i1 %413, float %750, float 0.000000e+00, !dbg !53
  %767 = select i1 %413, float %751, float 0.000000e+00, !dbg !53
  %768 = select i1 %413, float %752, float 0.000000e+00, !dbg !53
  %769 = select i1 %413, float %753, float 0.000000e+00, !dbg !53
  %770 = select i1 %413, float %754, float 0.000000e+00, !dbg !53
  %771 = select i1 %413, float %755, float 0.000000e+00, !dbg !53
  %772 = select i1 %413, float %756, float 0.000000e+00, !dbg !53
  %773 = select i1 %413, float %757, float 0.000000e+00, !dbg !53
  %774 = select i1 %413, float %758, float 0.000000e+00, !dbg !53
  %775 = select i1 %413, float %759, float 0.000000e+00, !dbg !53
  %776 = select i1 %413, float %760, float 0.000000e+00, !dbg !53
  %777 = select i1 %413, float %761, float 0.000000e+00, !dbg !53
  %778 = select i1 %413, float %762, float 0.000000e+00, !dbg !53
  %779 = select i1 %413, float %763, float 0.000000e+00, !dbg !53
  %780 = select i1 %413, float %764, float 0.000000e+00, !dbg !53
  %781 = select i1 %413, float %765, float 0.000000e+00, !dbg !53
  %782 = fadd float %395, %766, !dbg !63
  %783 = fadd float %396, %767, !dbg !63
  %784 = fadd float %397, %768, !dbg !63
  %785 = fadd float %398, %769, !dbg !63
  %786 = fadd float %399, %770, !dbg !63
  %787 = fadd float %400, %771, !dbg !63
  %788 = fadd float %401, %772, !dbg !63
  %789 = fadd float %402, %773, !dbg !63
  %790 = fadd float %403, %774, !dbg !63
  %791 = fadd float %404, %775, !dbg !63
  %792 = fadd float %405, %776, !dbg !63
  %793 = fadd float %406, %777, !dbg !63
  %794 = fadd float %407, %778, !dbg !63
  %795 = fadd float %408, %779, !dbg !63
  %796 = fadd float %409, %780, !dbg !63
  %797 = fadd float %410, %781, !dbg !63
  %798 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %443, i1 %436, i32 0, i1 %436, i32 0, i1 %436, i32 0, i1 %436, i32 0, i1 %436) #2, !dbg !64
  %799 = extractvalue { i32, i32, i32, i32 } %798, 0, !dbg !64
  %800 = extractvalue { i32, i32, i32, i32 } %798, 1, !dbg !64
  %801 = extractvalue { i32, i32, i32, i32 } %798, 2, !dbg !64
  %802 = extractvalue { i32, i32, i32, i32 } %798, 3, !dbg !64
  %803 = trunc i32 %799 to i16, !dbg !64
  %extelt.offset32 = lshr i32 %799, 16, !dbg !64
  %804 = trunc i32 %extelt.offset32 to i16, !dbg !64
  %805 = trunc i32 %800 to i16, !dbg !64
  %extelt.offset33 = lshr i32 %800, 16, !dbg !64
  %806 = trunc i32 %extelt.offset33 to i16, !dbg !64
  %807 = trunc i32 %801 to i16, !dbg !64
  %extelt.offset34 = lshr i32 %801, 16, !dbg !64
  %808 = trunc i32 %extelt.offset34 to i16, !dbg !64
  %809 = trunc i32 %802 to i16, !dbg !64
  %extelt.offset35 = lshr i32 %802, 16, !dbg !64
  %810 = trunc i32 %extelt.offset35 to i16, !dbg !64
  %811 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %445, i1 %437, i32 0, i1 %437, i32 0, i1 %437, i32 0, i1 %437, i32 0, i1 %437) #2, !dbg !64
  %812 = extractvalue { i32, i32, i32, i32 } %811, 0, !dbg !64
  %813 = extractvalue { i32, i32, i32, i32 } %811, 1, !dbg !64
  %814 = extractvalue { i32, i32, i32, i32 } %811, 2, !dbg !64
  %815 = extractvalue { i32, i32, i32, i32 } %811, 3, !dbg !64
  %816 = trunc i32 %812 to i16, !dbg !64
  %extelt.offset36 = lshr i32 %812, 16, !dbg !64
  %817 = trunc i32 %extelt.offset36 to i16, !dbg !64
  %818 = trunc i32 %813 to i16, !dbg !64
  %extelt.offset37 = lshr i32 %813, 16, !dbg !64
  %819 = trunc i32 %extelt.offset37 to i16, !dbg !64
  %820 = trunc i32 %814 to i16, !dbg !64
  %extelt.offset38 = lshr i32 %814, 16, !dbg !64
  %821 = trunc i32 %extelt.offset38 to i16, !dbg !64
  %822 = trunc i32 %815 to i16, !dbg !64
  %extelt.offset39 = lshr i32 %815, 16, !dbg !64
  %823 = trunc i32 %extelt.offset39 to i16, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %824 = insertelement <1 x i16> undef, i16 %803, i64 0, !dbg !65
  store <1 x i16> %824, ptr addrspace(3) %101, align 2, !dbg !65
  %825 = insertelement <1 x i16> undef, i16 %804, i64 0, !dbg !65
  store <1 x i16> %825, ptr addrspace(3) %106, align 2, !dbg !65
  %826 = insertelement <1 x i16> undef, i16 %805, i64 0, !dbg !65
  store <1 x i16> %826, ptr addrspace(3) %111, align 2, !dbg !65
  %827 = insertelement <1 x i16> undef, i16 %806, i64 0, !dbg !65
  store <1 x i16> %827, ptr addrspace(3) %116, align 2, !dbg !65
  %828 = insertelement <1 x i16> undef, i16 %807, i64 0, !dbg !65
  store <1 x i16> %828, ptr addrspace(3) %121, align 2, !dbg !65
  %829 = insertelement <1 x i16> undef, i16 %808, i64 0, !dbg !65
  store <1 x i16> %829, ptr addrspace(3) %126, align 2, !dbg !65
  %830 = insertelement <1 x i16> undef, i16 %809, i64 0, !dbg !65
  store <1 x i16> %830, ptr addrspace(3) %131, align 2, !dbg !65
  %831 = insertelement <1 x i16> undef, i16 %810, i64 0, !dbg !65
  store <1 x i16> %831, ptr addrspace(3) %136, align 2, !dbg !65
  %832 = insertelement <1 x i16> undef, i16 %816, i64 0, !dbg !65
  store <1 x i16> %832, ptr addrspace(3) %140, align 2, !dbg !65
  %833 = insertelement <1 x i16> undef, i16 %817, i64 0, !dbg !65
  store <1 x i16> %833, ptr addrspace(3) %144, align 2, !dbg !65
  %834 = insertelement <1 x i16> undef, i16 %818, i64 0, !dbg !65
  store <1 x i16> %834, ptr addrspace(3) %148, align 2, !dbg !65
  %835 = insertelement <1 x i16> undef, i16 %819, i64 0, !dbg !65
  store <1 x i16> %835, ptr addrspace(3) %152, align 2, !dbg !65
  %836 = insertelement <1 x i16> undef, i16 %820, i64 0, !dbg !65
  store <1 x i16> %836, ptr addrspace(3) %156, align 2, !dbg !65
  %837 = insertelement <1 x i16> undef, i16 %821, i64 0, !dbg !65
  store <1 x i16> %837, ptr addrspace(3) %160, align 2, !dbg !65
  %838 = insertelement <1 x i16> undef, i16 %822, i64 0, !dbg !65
  store <1 x i16> %838, ptr addrspace(3) %164, align 2, !dbg !65
  %839 = insertelement <1 x i16> undef, i16 %823, i64 0, !dbg !65
  store <1 x i16> %839, ptr addrspace(3) %168, align 2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %840 = load i16, ptr addrspace(3) %173, align 2, !dbg !65
  %841 = load i16, ptr addrspace(3) %178, align 2, !dbg !65
  %842 = load i16, ptr addrspace(3) %183, align 2, !dbg !65
  %843 = load i16, ptr addrspace(3) %188, align 2, !dbg !65
  %844 = load i16, ptr addrspace(3) %193, align 2, !dbg !65
  %845 = load i16, ptr addrspace(3) %197, align 2, !dbg !65
  %846 = load i16, ptr addrspace(3) %201, align 2, !dbg !65
  %847 = load i16, ptr addrspace(3) %205, align 2, !dbg !65
  %848 = load i16, ptr addrspace(3) %210, align 2, !dbg !65
  %849 = load i16, ptr addrspace(3) %214, align 2, !dbg !65
  %850 = load i16, ptr addrspace(3) %218, align 2, !dbg !65
  %851 = load i16, ptr addrspace(3) %222, align 2, !dbg !65
  %852 = load i16, ptr addrspace(3) %227, align 2, !dbg !65
  %853 = load i16, ptr addrspace(3) %231, align 2, !dbg !65
  %854 = load i16, ptr addrspace(3) %235, align 2, !dbg !65
  %855 = load i16, ptr addrspace(3) %239, align 2, !dbg !65
  %856 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %840) #2, !dbg !65
  %857 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %841) #2, !dbg !65
  %858 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %842) #2, !dbg !65
  %859 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %843) #2, !dbg !65
  %860 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %844) #2, !dbg !65
  %861 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %845) #2, !dbg !65
  %862 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %846) #2, !dbg !65
  %863 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %847) #2, !dbg !65
  %864 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %848) #2, !dbg !65
  %865 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %849) #2, !dbg !65
  %866 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %850) #2, !dbg !65
  %867 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %851) #2, !dbg !65
  %868 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %852) #2, !dbg !65
  %869 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %853) #2, !dbg !65
  %870 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %854) #2, !dbg !65
  %871 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %855) #2, !dbg !65
  %872 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %452, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438) #2, !dbg !66
  %873 = extractvalue { i32, i32, i32, i32 } %872, 0, !dbg !66
  %874 = extractvalue { i32, i32, i32, i32 } %872, 1, !dbg !66
  %875 = extractvalue { i32, i32, i32, i32 } %872, 2, !dbg !66
  %876 = extractvalue { i32, i32, i32, i32 } %872, 3, !dbg !66
  %877 = bitcast i32 %873 to float, !dbg !66
  %878 = bitcast i32 %874 to float, !dbg !66
  %879 = bitcast i32 %875 to float, !dbg !66
  %880 = bitcast i32 %876 to float, !dbg !66
  %881 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %454, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438) #2, !dbg !66
  %882 = extractvalue { i32, i32, i32, i32 } %881, 0, !dbg !66
  %883 = extractvalue { i32, i32, i32, i32 } %881, 1, !dbg !66
  %884 = extractvalue { i32, i32, i32, i32 } %881, 2, !dbg !66
  %885 = extractvalue { i32, i32, i32, i32 } %881, 3, !dbg !66
  %886 = bitcast i32 %882 to float, !dbg !66
  %887 = bitcast i32 %883 to float, !dbg !66
  %888 = bitcast i32 %884 to float, !dbg !66
  %889 = bitcast i32 %885 to float, !dbg !66
  %890 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %456, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438) #2, !dbg !66
  %891 = extractvalue { i32, i32, i32, i32 } %890, 0, !dbg !66
  %892 = extractvalue { i32, i32, i32, i32 } %890, 1, !dbg !66
  %893 = extractvalue { i32, i32, i32, i32 } %890, 2, !dbg !66
  %894 = extractvalue { i32, i32, i32, i32 } %890, 3, !dbg !66
  %895 = bitcast i32 %891 to float, !dbg !66
  %896 = bitcast i32 %892 to float, !dbg !66
  %897 = bitcast i32 %893 to float, !dbg !66
  %898 = bitcast i32 %894 to float, !dbg !66
  %899 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %458, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438) #2, !dbg !66
  %900 = extractvalue { i32, i32, i32, i32 } %899, 0, !dbg !66
  %901 = extractvalue { i32, i32, i32, i32 } %899, 1, !dbg !66
  %902 = extractvalue { i32, i32, i32, i32 } %899, 2, !dbg !66
  %903 = extractvalue { i32, i32, i32, i32 } %899, 3, !dbg !66
  %904 = bitcast i32 %900 to float, !dbg !66
  %905 = bitcast i32 %901 to float, !dbg !66
  %906 = bitcast i32 %902 to float, !dbg !66
  %907 = bitcast i32 %903 to float, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %908 = insertelement <1 x float> undef, float %877, i64 0, !dbg !66
  store <1 x float> %908, ptr addrspace(3) %312, align 4, !dbg !66
  %909 = insertelement <1 x float> undef, float %878, i64 0, !dbg !66
  store <1 x float> %909, ptr addrspace(3) %317, align 4, !dbg !66
  %910 = insertelement <1 x float> undef, float %879, i64 0, !dbg !66
  store <1 x float> %910, ptr addrspace(3) %322, align 4, !dbg !66
  %911 = insertelement <1 x float> undef, float %880, i64 0, !dbg !66
  store <1 x float> %911, ptr addrspace(3) %327, align 4, !dbg !66
  %912 = insertelement <1 x float> undef, float %886, i64 0, !dbg !66
  store <1 x float> %912, ptr addrspace(3) %331, align 4, !dbg !66
  %913 = insertelement <1 x float> undef, float %887, i64 0, !dbg !66
  store <1 x float> %913, ptr addrspace(3) %335, align 4, !dbg !66
  %914 = insertelement <1 x float> undef, float %888, i64 0, !dbg !66
  store <1 x float> %914, ptr addrspace(3) %339, align 4, !dbg !66
  %915 = insertelement <1 x float> undef, float %889, i64 0, !dbg !66
  store <1 x float> %915, ptr addrspace(3) %343, align 4, !dbg !66
  %916 = insertelement <1 x float> undef, float %895, i64 0, !dbg !66
  store <1 x float> %916, ptr addrspace(3) %347, align 4, !dbg !66
  %917 = insertelement <1 x float> undef, float %896, i64 0, !dbg !66
  store <1 x float> %917, ptr addrspace(3) %351, align 4, !dbg !66
  %918 = insertelement <1 x float> undef, float %897, i64 0, !dbg !66
  store <1 x float> %918, ptr addrspace(3) %355, align 4, !dbg !66
  %919 = insertelement <1 x float> undef, float %898, i64 0, !dbg !66
  store <1 x float> %919, ptr addrspace(3) %359, align 4, !dbg !66
  %920 = insertelement <1 x float> undef, float %904, i64 0, !dbg !66
  store <1 x float> %920, ptr addrspace(3) %363, align 4, !dbg !66
  %921 = insertelement <1 x float> undef, float %905, i64 0, !dbg !66
  store <1 x float> %921, ptr addrspace(3) %367, align 4, !dbg !66
  %922 = insertelement <1 x float> undef, float %906, i64 0, !dbg !66
  store <1 x float> %922, ptr addrspace(3) %371, align 4, !dbg !66
  %923 = insertelement <1 x float> undef, float %907, i64 0, !dbg !66
  store <1 x float> %923, ptr addrspace(3) %375, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %924 = load <8 x float>, ptr addrspace(3) %380, align 32, !dbg !66
  %925 = load <8 x float>, ptr addrspace(3) %384, align 32, !dbg !66
  %926 = fmul float %856, %877, !dbg !67
  %927 = fmul float %857, %878, !dbg !67
  %928 = fmul float %858, %879, !dbg !67
  %929 = fmul float %859, %880, !dbg !67
  %930 = fmul float %860, %886, !dbg !67
  %931 = fmul float %861, %887, !dbg !67
  %932 = fmul float %862, %888, !dbg !67
  %933 = fmul float %863, %889, !dbg !67
  %934 = fmul float %864, %895, !dbg !67
  %935 = fmul float %865, %896, !dbg !67
  %936 = fmul float %866, %897, !dbg !67
  %937 = fmul float %867, %898, !dbg !67
  %938 = fmul float %868, %904, !dbg !67
  %939 = fmul float %869, %905, !dbg !67
  %940 = fmul float %870, %906, !dbg !67
  %941 = fmul float %871, %907, !dbg !67
  %942 = select i1 %438, float %926, float 0.000000e+00, !dbg !53
  %943 = select i1 %438, float %927, float 0.000000e+00, !dbg !53
  %944 = select i1 %438, float %928, float 0.000000e+00, !dbg !53
  %945 = select i1 %438, float %929, float 0.000000e+00, !dbg !53
  %946 = select i1 %438, float %930, float 0.000000e+00, !dbg !53
  %947 = select i1 %438, float %931, float 0.000000e+00, !dbg !53
  %948 = select i1 %438, float %932, float 0.000000e+00, !dbg !53
  %949 = select i1 %438, float %933, float 0.000000e+00, !dbg !53
  %950 = select i1 %438, float %934, float 0.000000e+00, !dbg !53
  %951 = select i1 %438, float %935, float 0.000000e+00, !dbg !53
  %952 = select i1 %438, float %936, float 0.000000e+00, !dbg !53
  %953 = select i1 %438, float %937, float 0.000000e+00, !dbg !53
  %954 = select i1 %438, float %938, float 0.000000e+00, !dbg !53
  %955 = select i1 %438, float %939, float 0.000000e+00, !dbg !53
  %956 = select i1 %438, float %940, float 0.000000e+00, !dbg !53
  %957 = select i1 %438, float %941, float 0.000000e+00, !dbg !53
  %958 = fadd float %782, %942, !dbg !68
  %959 = fadd float %783, %943, !dbg !68
  %960 = fadd float %784, %944, !dbg !68
  %961 = fadd float %785, %945, !dbg !68
  %962 = fadd float %786, %946, !dbg !68
  %963 = fadd float %787, %947, !dbg !68
  %964 = fadd float %788, %948, !dbg !68
  %965 = fadd float %789, %949, !dbg !68
  %966 = fadd float %790, %950, !dbg !68
  %967 = fadd float %791, %951, !dbg !68
  %968 = fadd float %792, %952, !dbg !68
  %969 = fadd float %793, %953, !dbg !68
  %970 = fadd float %794, %954, !dbg !68
  %971 = fadd float %795, %955, !dbg !68
  %972 = fadd float %796, %956, !dbg !68
  %973 = fadd float %797, %957, !dbg !68
  %974 = fadd float %590, %958, !dbg !69
  %975 = fadd float %591, %959, !dbg !69
  %976 = fadd float %592, %960, !dbg !69
  %977 = fadd float %593, %961, !dbg !69
  %978 = fadd float %594, %962, !dbg !69
  %979 = fadd float %595, %963, !dbg !69
  %980 = fadd float %596, %964, !dbg !69
  %981 = fadd float %597, %965, !dbg !69
  %982 = fadd float %598, %966, !dbg !69
  %983 = fadd float %599, %967, !dbg !69
  %984 = fadd float %600, %968, !dbg !69
  %985 = fadd float %601, %969, !dbg !69
  %986 = fadd float %602, %970, !dbg !69
  %987 = fadd float %603, %971, !dbg !69
  %988 = fadd float %604, %972, !dbg !69
  %989 = fadd float %605, %973, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %990 = insertelement <1 x float> undef, float %974, i64 0, !dbg !69
  store <1 x float> %990, ptr addrspace(3) %312, align 4, !dbg !69
  %991 = insertelement <1 x float> undef, float %975, i64 0, !dbg !69
  store <1 x float> %991, ptr addrspace(3) %317, align 4, !dbg !69
  %992 = insertelement <1 x float> undef, float %976, i64 0, !dbg !69
  store <1 x float> %992, ptr addrspace(3) %322, align 4, !dbg !69
  %993 = insertelement <1 x float> undef, float %977, i64 0, !dbg !69
  store <1 x float> %993, ptr addrspace(3) %327, align 4, !dbg !69
  %994 = insertelement <1 x float> undef, float %978, i64 0, !dbg !69
  store <1 x float> %994, ptr addrspace(3) %331, align 4, !dbg !69
  %995 = insertelement <1 x float> undef, float %979, i64 0, !dbg !69
  store <1 x float> %995, ptr addrspace(3) %335, align 4, !dbg !69
  %996 = insertelement <1 x float> undef, float %980, i64 0, !dbg !69
  store <1 x float> %996, ptr addrspace(3) %339, align 4, !dbg !69
  %997 = insertelement <1 x float> undef, float %981, i64 0, !dbg !69
  store <1 x float> %997, ptr addrspace(3) %343, align 4, !dbg !69
  %998 = insertelement <1 x float> undef, float %982, i64 0, !dbg !69
  store <1 x float> %998, ptr addrspace(3) %347, align 4, !dbg !69
  %999 = insertelement <1 x float> undef, float %983, i64 0, !dbg !69
  store <1 x float> %999, ptr addrspace(3) %351, align 4, !dbg !69
  %1000 = insertelement <1 x float> undef, float %984, i64 0, !dbg !69
  store <1 x float> %1000, ptr addrspace(3) %355, align 4, !dbg !69
  %1001 = insertelement <1 x float> undef, float %985, i64 0, !dbg !69
  store <1 x float> %1001, ptr addrspace(3) %359, align 4, !dbg !69
  %1002 = insertelement <1 x float> undef, float %986, i64 0, !dbg !69
  store <1 x float> %1002, ptr addrspace(3) %363, align 4, !dbg !69
  %1003 = insertelement <1 x float> undef, float %987, i64 0, !dbg !69
  store <1 x float> %1003, ptr addrspace(3) %367, align 4, !dbg !69
  %1004 = insertelement <1 x float> undef, float %988, i64 0, !dbg !69
  store <1 x float> %1004, ptr addrspace(3) %371, align 4, !dbg !69
  %1005 = insertelement <1 x float> undef, float %989, i64 0, !dbg !69
  store <1 x float> %1005, ptr addrspace(3) %375, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %1006 = load <8 x float>, ptr addrspace(3) %380, align 32, !dbg !69
  %1007 = load <8 x float>, ptr addrspace(3) %384, align 32, !dbg !69
  %1008 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %389, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !70
  %1009 = extractvalue { i32, i32, i32, i32 } %1008, 0, !dbg !70
  %1010 = extractvalue { i32, i32, i32, i32 } %1008, 1, !dbg !70
  %1011 = extractvalue { i32, i32, i32, i32 } %1008, 2, !dbg !70
  %1012 = extractvalue { i32, i32, i32, i32 } %1008, 3, !dbg !70
  %1013 = trunc i32 %1009 to i16, !dbg !70
  %extelt.offset40 = lshr i32 %1009, 16, !dbg !70
  %1014 = trunc i32 %extelt.offset40 to i16, !dbg !70
  %1015 = trunc i32 %1010 to i16, !dbg !70
  %extelt.offset41 = lshr i32 %1010, 16, !dbg !70
  %1016 = trunc i32 %extelt.offset41 to i16, !dbg !70
  %1017 = trunc i32 %1011 to i16, !dbg !70
  %extelt.offset42 = lshr i32 %1011, 16, !dbg !70
  %1018 = trunc i32 %extelt.offset42 to i16, !dbg !70
  %1019 = trunc i32 %1012 to i16, !dbg !70
  %extelt.offset43 = lshr i32 %1012, 16, !dbg !70
  %1020 = trunc i32 %extelt.offset43 to i16, !dbg !70
  %1021 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %391, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !70
  %1022 = extractvalue { i32, i32, i32, i32 } %1021, 0, !dbg !70
  %1023 = extractvalue { i32, i32, i32, i32 } %1021, 1, !dbg !70
  %1024 = extractvalue { i32, i32, i32, i32 } %1021, 2, !dbg !70
  %1025 = extractvalue { i32, i32, i32, i32 } %1021, 3, !dbg !70
  %1026 = trunc i32 %1022 to i16, !dbg !70
  %extelt.offset44 = lshr i32 %1022, 16, !dbg !70
  %1027 = trunc i32 %extelt.offset44 to i16, !dbg !70
  %1028 = trunc i32 %1023 to i16, !dbg !70
  %extelt.offset45 = lshr i32 %1023, 16, !dbg !70
  %1029 = trunc i32 %extelt.offset45 to i16, !dbg !70
  %1030 = trunc i32 %1024 to i16, !dbg !70
  %extelt.offset46 = lshr i32 %1024, 16, !dbg !70
  %1031 = trunc i32 %extelt.offset46 to i16, !dbg !70
  %1032 = trunc i32 %1025 to i16, !dbg !70
  %extelt.offset47 = lshr i32 %1025, 16, !dbg !70
  %1033 = trunc i32 %extelt.offset47 to i16, !dbg !70
  %1034 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1013) #2, !dbg !71
  %1035 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1014) #2, !dbg !71
  %1036 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1015) #2, !dbg !71
  %1037 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1016) #2, !dbg !71
  %1038 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1017) #2, !dbg !71
  %1039 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1018) #2, !dbg !71
  %1040 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1019) #2, !dbg !71
  %1041 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1020) #2, !dbg !71
  %1042 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1026) #2, !dbg !71
  %1043 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1027) #2, !dbg !71
  %1044 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1028) #2, !dbg !71
  %1045 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1029) #2, !dbg !71
  %1046 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1030) #2, !dbg !71
  %1047 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1031) #2, !dbg !71
  %1048 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1032) #2, !dbg !71
  %1049 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1033) #2, !dbg !71
  %1050 = insertelement <8 x float> poison, float %1034, i64 0, !dbg !53
  %1051 = insertelement <8 x float> %1050, float %1035, i64 1, !dbg !53
  %1052 = insertelement <8 x float> %1051, float %1036, i64 2, !dbg !53
  %1053 = insertelement <8 x float> %1052, float %1037, i64 3, !dbg !53
  %1054 = insertelement <8 x float> %1053, float %1038, i64 4, !dbg !53
  %1055 = insertelement <8 x float> %1054, float %1039, i64 5, !dbg !53
  %1056 = insertelement <8 x float> %1055, float %1040, i64 6, !dbg !53
  %1057 = insertelement <8 x float> %1056, float %1041, i64 7, !dbg !53
  %1058 = select <8 x i1> %468, <8 x float> %1057, <8 x float> zeroinitializer, !dbg !53
  %1059 = insertelement <8 x i1> poison, i1 %393, i64 0, !dbg !53
  %1060 = shufflevector <8 x i1> %1059, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %1061 = insertelement <8 x float> poison, float %1042, i64 0, !dbg !53
  %1062 = insertelement <8 x float> %1061, float %1043, i64 1, !dbg !53
  %1063 = insertelement <8 x float> %1062, float %1044, i64 2, !dbg !53
  %1064 = insertelement <8 x float> %1063, float %1045, i64 3, !dbg !53
  %1065 = insertelement <8 x float> %1064, float %1046, i64 4, !dbg !53
  %1066 = insertelement <8 x float> %1065, float %1047, i64 5, !dbg !53
  %1067 = insertelement <8 x float> %1066, float %1048, i64 6, !dbg !53
  %1068 = insertelement <8 x float> %1067, float %1049, i64 7, !dbg !53
  %1069 = select <8 x i1> %1060, <8 x float> %1068, <8 x float> zeroinitializer, !dbg !53
  %1070 = insertelement <8 x float> poison, float %500, i64 0, !dbg !72
  %1071 = insertelement <8 x float> %1070, float %501, i64 1, !dbg !72
  %1072 = insertelement <8 x float> %1071, float %502, i64 2, !dbg !72
  %1073 = insertelement <8 x float> %1072, float %503, i64 3, !dbg !72
  %1074 = insertelement <8 x float> %1073, float %504, i64 4, !dbg !72
  %1075 = insertelement <8 x float> %1074, float %505, i64 5, !dbg !72
  %1076 = insertelement <8 x float> %1075, float %506, i64 6, !dbg !72
  %1077 = insertelement <8 x float> %1076, float %507, i64 7, !dbg !72
  %1078 = fmul <8 x float> %466, %1077, !dbg !72
  %1079 = insertelement <8 x float> poison, float %508, i64 0, !dbg !72
  %1080 = insertelement <8 x float> %1079, float %509, i64 1, !dbg !72
  %1081 = insertelement <8 x float> %1080, float %510, i64 2, !dbg !72
  %1082 = insertelement <8 x float> %1081, float %511, i64 3, !dbg !72
  %1083 = insertelement <8 x float> %1082, float %512, i64 4, !dbg !72
  %1084 = insertelement <8 x float> %1083, float %513, i64 5, !dbg !72
  %1085 = insertelement <8 x float> %1084, float %514, i64 6, !dbg !72
  %1086 = insertelement <8 x float> %1085, float %515, i64 7, !dbg !72
  %1087 = fmul <8 x float> %473, %1086, !dbg !72
  %1088 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %443, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422) #2, !dbg !73
  %1089 = extractvalue { i32, i32, i32, i32 } %1088, 0, !dbg !73
  %1090 = extractvalue { i32, i32, i32, i32 } %1088, 1, !dbg !73
  %1091 = extractvalue { i32, i32, i32, i32 } %1088, 2, !dbg !73
  %1092 = extractvalue { i32, i32, i32, i32 } %1088, 3, !dbg !73
  %1093 = trunc i32 %1089 to i16, !dbg !73
  %extelt.offset48 = lshr i32 %1089, 16, !dbg !73
  %1094 = trunc i32 %extelt.offset48 to i16, !dbg !73
  %1095 = trunc i32 %1090 to i16, !dbg !73
  %extelt.offset49 = lshr i32 %1090, 16, !dbg !73
  %1096 = trunc i32 %extelt.offset49 to i16, !dbg !73
  %1097 = trunc i32 %1091 to i16, !dbg !73
  %extelt.offset50 = lshr i32 %1091, 16, !dbg !73
  %1098 = trunc i32 %extelt.offset50 to i16, !dbg !73
  %1099 = trunc i32 %1092 to i16, !dbg !73
  %extelt.offset51 = lshr i32 %1092, 16, !dbg !73
  %1100 = trunc i32 %extelt.offset51 to i16, !dbg !73
  %1101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %445, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422, i32 0, i1 %422) #2, !dbg !73
  %1102 = extractvalue { i32, i32, i32, i32 } %1101, 0, !dbg !73
  %1103 = extractvalue { i32, i32, i32, i32 } %1101, 1, !dbg !73
  %1104 = extractvalue { i32, i32, i32, i32 } %1101, 2, !dbg !73
  %1105 = extractvalue { i32, i32, i32, i32 } %1101, 3, !dbg !73
  %1106 = trunc i32 %1102 to i16, !dbg !73
  %extelt.offset52 = lshr i32 %1102, 16, !dbg !73
  %1107 = trunc i32 %extelt.offset52 to i16, !dbg !73
  %1108 = trunc i32 %1103 to i16, !dbg !73
  %extelt.offset53 = lshr i32 %1103, 16, !dbg !73
  %1109 = trunc i32 %extelt.offset53 to i16, !dbg !73
  %1110 = trunc i32 %1104 to i16, !dbg !73
  %extelt.offset54 = lshr i32 %1104, 16, !dbg !73
  %1111 = trunc i32 %extelt.offset54 to i16, !dbg !73
  %1112 = trunc i32 %1105 to i16, !dbg !73
  %extelt.offset55 = lshr i32 %1105, 16, !dbg !73
  %1113 = trunc i32 %extelt.offset55 to i16, !dbg !73
  %1114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1093) #2, !dbg !74
  %1115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1094) #2, !dbg !74
  %1116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1095) #2, !dbg !74
  %1117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1096) #2, !dbg !74
  %1118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1097) #2, !dbg !74
  %1119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1098) #2, !dbg !74
  %1120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1099) #2, !dbg !74
  %1121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1100) #2, !dbg !74
  %1122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1106) #2, !dbg !74
  %1123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1107) #2, !dbg !74
  %1124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1108) #2, !dbg !74
  %1125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1109) #2, !dbg !74
  %1126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1110) #2, !dbg !74
  %1127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1111) #2, !dbg !74
  %1128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1112) #2, !dbg !74
  %1129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1113) #2, !dbg !74
  %1130 = insertelement <8 x float> poison, float %1114, i64 0, !dbg !75
  %1131 = insertelement <8 x float> %1130, float %1115, i64 1, !dbg !75
  %1132 = insertelement <8 x float> %1131, float %1116, i64 2, !dbg !75
  %1133 = insertelement <8 x float> %1132, float %1117, i64 3, !dbg !75
  %1134 = insertelement <8 x float> %1133, float %1118, i64 4, !dbg !75
  %1135 = insertelement <8 x float> %1134, float %1119, i64 5, !dbg !75
  %1136 = insertelement <8 x float> %1135, float %1120, i64 6, !dbg !75
  %1137 = insertelement <8 x float> %1136, float %1121, i64 7, !dbg !75
  %1138 = fmul <8 x float> %732, %1137, !dbg !75
  %1139 = insertelement <8 x float> poison, float %1122, i64 0, !dbg !75
  %1140 = insertelement <8 x float> %1139, float %1123, i64 1, !dbg !75
  %1141 = insertelement <8 x float> %1140, float %1124, i64 2, !dbg !75
  %1142 = insertelement <8 x float> %1141, float %1125, i64 3, !dbg !75
  %1143 = insertelement <8 x float> %1142, float %1126, i64 4, !dbg !75
  %1144 = insertelement <8 x float> %1143, float %1127, i64 5, !dbg !75
  %1145 = insertelement <8 x float> %1144, float %1128, i64 6, !dbg !75
  %1146 = insertelement <8 x float> %1145, float %1129, i64 7, !dbg !75
  %1147 = fmul <8 x float> %733, %1146, !dbg !75
  %1148 = fsub <8 x float> zeroinitializer, %1138, !dbg !76
  %1149 = fsub <8 x float> zeroinitializer, %1147, !dbg !76
  %1150 = select <8 x i1> %470, <8 x float> %1148, <8 x float> zeroinitializer, !dbg !53
  %1151 = insertelement <8 x i1> poison, i1 %412, i64 0, !dbg !53
  %1152 = shufflevector <8 x i1> %1151, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %1153 = select <8 x i1> %1152, <8 x float> %1149, <8 x float> zeroinitializer, !dbg !53
  %1154 = fadd <8 x float> %1078, %1150, !dbg !77
  %1155 = fadd <8 x float> %1087, %1153, !dbg !77
  %1156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %463, i1 %436, i32 0, i1 %436, i32 0, i1 %436, i32 0, i1 %436, i32 0, i1 %436) #2, !dbg !78
  %1157 = extractvalue { i32, i32, i32, i32 } %1156, 0, !dbg !78
  %1158 = extractvalue { i32, i32, i32, i32 } %1156, 1, !dbg !78
  %1159 = extractvalue { i32, i32, i32, i32 } %1156, 2, !dbg !78
  %1160 = extractvalue { i32, i32, i32, i32 } %1156, 3, !dbg !78
  %1161 = trunc i32 %1157 to i16, !dbg !78
  %extelt.offset56 = lshr i32 %1157, 16, !dbg !78
  %1162 = trunc i32 %extelt.offset56 to i16, !dbg !78
  %1163 = trunc i32 %1158 to i16, !dbg !78
  %extelt.offset57 = lshr i32 %1158, 16, !dbg !78
  %1164 = trunc i32 %extelt.offset57 to i16, !dbg !78
  %1165 = trunc i32 %1159 to i16, !dbg !78
  %extelt.offset58 = lshr i32 %1159, 16, !dbg !78
  %1166 = trunc i32 %extelt.offset58 to i16, !dbg !78
  %1167 = trunc i32 %1160 to i16, !dbg !78
  %extelt.offset59 = lshr i32 %1160, 16, !dbg !78
  %1168 = trunc i32 %extelt.offset59 to i16, !dbg !78
  %1169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %465, i1 %437, i32 0, i1 %437, i32 0, i1 %437, i32 0, i1 %437, i32 0, i1 %437) #2, !dbg !78
  %1170 = extractvalue { i32, i32, i32, i32 } %1169, 0, !dbg !78
  %1171 = extractvalue { i32, i32, i32, i32 } %1169, 1, !dbg !78
  %1172 = extractvalue { i32, i32, i32, i32 } %1169, 2, !dbg !78
  %1173 = extractvalue { i32, i32, i32, i32 } %1169, 3, !dbg !78
  %1174 = trunc i32 %1170 to i16, !dbg !78
  %extelt.offset60 = lshr i32 %1170, 16, !dbg !78
  %1175 = trunc i32 %extelt.offset60 to i16, !dbg !78
  %1176 = trunc i32 %1171 to i16, !dbg !78
  %extelt.offset61 = lshr i32 %1171, 16, !dbg !78
  %1177 = trunc i32 %extelt.offset61 to i16, !dbg !78
  %1178 = trunc i32 %1172 to i16, !dbg !78
  %extelt.offset62 = lshr i32 %1172, 16, !dbg !78
  %1179 = trunc i32 %extelt.offset62 to i16, !dbg !78
  %1180 = trunc i32 %1173 to i16, !dbg !78
  %extelt.offset63 = lshr i32 %1173, 16, !dbg !78
  %1181 = trunc i32 %extelt.offset63 to i16, !dbg !78
  %1182 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1161) #2, !dbg !79
  %1183 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1162) #2, !dbg !79
  %1184 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1163) #2, !dbg !79
  %1185 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1164) #2, !dbg !79
  %1186 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1165) #2, !dbg !79
  %1187 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1166) #2, !dbg !79
  %1188 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1167) #2, !dbg !79
  %1189 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1168) #2, !dbg !79
  %1190 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1174) #2, !dbg !79
  %1191 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1175) #2, !dbg !79
  %1192 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1176) #2, !dbg !79
  %1193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1177) #2, !dbg !79
  %1194 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1178) #2, !dbg !79
  %1195 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1179) #2, !dbg !79
  %1196 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1180) #2, !dbg !79
  %1197 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1181) #2, !dbg !79
  %1198 = insertelement <8 x float> poison, float %1182, i64 0, !dbg !80
  %1199 = insertelement <8 x float> %1198, float %1183, i64 1, !dbg !80
  %1200 = insertelement <8 x float> %1199, float %1184, i64 2, !dbg !80
  %1201 = insertelement <8 x float> %1200, float %1185, i64 3, !dbg !80
  %1202 = insertelement <8 x float> %1201, float %1186, i64 4, !dbg !80
  %1203 = insertelement <8 x float> %1202, float %1187, i64 5, !dbg !80
  %1204 = insertelement <8 x float> %1203, float %1188, i64 6, !dbg !80
  %1205 = insertelement <8 x float> %1204, float %1189, i64 7, !dbg !80
  %1206 = fmul <8 x float> %924, %1205, !dbg !80
  %1207 = insertelement <8 x float> poison, float %1190, i64 0, !dbg !80
  %1208 = insertelement <8 x float> %1207, float %1191, i64 1, !dbg !80
  %1209 = insertelement <8 x float> %1208, float %1192, i64 2, !dbg !80
  %1210 = insertelement <8 x float> %1209, float %1193, i64 3, !dbg !80
  %1211 = insertelement <8 x float> %1210, float %1194, i64 4, !dbg !80
  %1212 = insertelement <8 x float> %1211, float %1195, i64 5, !dbg !80
  %1213 = insertelement <8 x float> %1212, float %1196, i64 6, !dbg !80
  %1214 = insertelement <8 x float> %1213, float %1197, i64 7, !dbg !80
  %1215 = fmul <8 x float> %925, %1214, !dbg !80
  %1216 = select <8 x i1> %472, <8 x float> %1206, <8 x float> zeroinitializer, !dbg !53
  %1217 = insertelement <8 x i1> poison, i1 %437, i64 0, !dbg !53
  %1218 = shufflevector <8 x i1> %1217, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %1219 = select <8 x i1> %1218, <8 x float> %1215, <8 x float> zeroinitializer, !dbg !53
  %1220 = fadd <8 x float> %1154, %1216, !dbg !81
  %1221 = fadd <8 x float> %1155, %1219, !dbg !81
  %1222 = fadd <8 x float> %1058, %1220, !dbg !82
  %1223 = fadd <8 x float> %1069, %1221, !dbg !82
  %1224 = fadd <8 x float> %1006, %1222, !dbg !83
  %1225 = fadd <8 x float> %1007, %1223, !dbg !83
  %1226 = shl i32 %55, 17, !dbg !84
  %1227 = add i32 %1226, %.decomposed95, !dbg !21
  %1228 = add i32 %1227, %59, !dbg !85
  %1229 = add i32 %1227, %60, !dbg !85
  %1230 = add i32 %1227, %61, !dbg !85
  %1231 = add i32 %1227, %62, !dbg !85
  %1232 = sext i32 %1228 to i64, !dbg !86
  %1233 = getelementptr float, ptr addrspace(1) %3, i64 %1232, !dbg !86
  %1234 = sext i32 %1229 to i64, !dbg !86
  %1235 = getelementptr float, ptr addrspace(1) %3, i64 %1234, !dbg !86
  %1236 = sext i32 %1230 to i64, !dbg !86
  %1237 = getelementptr float, ptr addrspace(1) %3, i64 %1236, !dbg !86
  %1238 = sext i32 %1231 to i64, !dbg !86
  %1239 = getelementptr float, ptr addrspace(1) %3, i64 %1238, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  store <8 x float> %1224, ptr addrspace(3) %380, align 32, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %1240 = mul nuw nsw i32 %15, 72, !dbg !87
  %1241 = add nuw nsw i32 %1240, %20, !dbg !87
  %1242 = zext nneg i32 %1241 to i64, !dbg !87
  %1243 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1242, !dbg !87
  %1244 = load <4 x i32>, ptr addrspace(3) %1243, align 16, !dbg !87
  %1245 = mul nuw nsw i32 %16, 72, !dbg !87
  %1246 = add nuw nsw i32 %1245, %20, !dbg !87
  %1247 = zext nneg i32 %1246 to i64, !dbg !87
  %1248 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1247, !dbg !87
  %1249 = load <4 x i32>, ptr addrspace(3) %1248, align 16, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  store <8 x float> %1225, ptr addrspace(3) %380, align 32, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %1250 = load <4 x i32>, ptr addrspace(3) %1243, align 16, !dbg !87
  %1251 = load <4 x i32>, ptr addrspace(3) %1248, align 16, !dbg !87
  %.extract = extractelement <4 x i32> %1244, i64 0, !dbg !87
  %.extract65 = extractelement <4 x i32> %1244, i64 1, !dbg !87
  %.extract67 = extractelement <4 x i32> %1244, i64 2, !dbg !87
  %.extract69 = extractelement <4 x i32> %1244, i64 3, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract65, i32 %.extract67, i32 %.extract69, ptr addrspace(1) %1233, i1 %45) #2, !dbg !87
  %.extract71 = extractelement <4 x i32> %1249, i64 0, !dbg !87
  %.extract73 = extractelement <4 x i32> %1249, i64 1, !dbg !87
  %.extract75 = extractelement <4 x i32> %1249, i64 2, !dbg !87
  %.extract77 = extractelement <4 x i32> %1249, i64 3, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract71, i32 %.extract73, i32 %.extract75, i32 %.extract77, ptr addrspace(1) %1235, i1 %46) #2, !dbg !87
  %.extract79 = extractelement <4 x i32> %1250, i64 0, !dbg !87
  %.extract81 = extractelement <4 x i32> %1250, i64 1, !dbg !87
  %.extract83 = extractelement <4 x i32> %1250, i64 2, !dbg !87
  %.extract85 = extractelement <4 x i32> %1250, i64 3, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract79, i32 %.extract81, i32 %.extract83, i32 %.extract85, ptr addrspace(1) %1237, i1 %47) #2, !dbg !87
  %.extract87 = extractelement <4 x i32> %1251, i64 0, !dbg !87
  %.extract89 = extractelement <4 x i32> %1251, i64 1, !dbg !87
  %.extract91 = extractelement <4 x i32> %1251, i64 2, !dbg !87
  %.extract93 = extractelement <4 x i32> %1251, i64 3, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract87, i32 %.extract89, i32 %.extract91, i32 %.extract93, ptr addrspace(1) %1239, i1 %48) #2, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "crrdsfk77bdln63d7tpusb7zw3nj6ood2d466j625pinrh64lbkt.py", directory: "/tmp/torchinductor_zeus/rr")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 24, column: 28, scope: !5)
!14 = !DILocation(line: 24, column: 33, scope: !5)
!15 = !DILocation(line: 25, column: 23, scope: !5)
!16 = !DILocation(line: 26, column: 21, scope: !5)
!17 = !DILocation(line: 29, column: 20, scope: !5)
!18 = !DILocation(line: 28, column: 18, scope: !5)
!19 = !DILocation(line: 30, column: 40, scope: !5)
!20 = !DILocation(line: 30, column: 54, scope: !5)
!21 = !DILocation(line: 30, column: 36, scope: !5)
!22 = !DILocation(line: 30, column: 47, scope: !5)
!23 = !DILocation(line: 30, column: 30, scope: !5)
!24 = !DILocation(line: 30, column: 60, scope: !5)
!25 = !DILocation(line: 30, column: 100, scope: !5)
!26 = !DILocation(line: 31, column: 41, scope: !5)
!27 = !DILocation(line: 31, column: 37, scope: !5)
!28 = !DILocation(line: 31, column: 31, scope: !5)
!29 = !DILocation(line: 31, column: 47, scope: !5)
!30 = !DILocation(line: 32, column: 40, scope: !5)
!31 = !DILocation(line: 32, column: 57, scope: !5)
!32 = !DILocation(line: 32, column: 31, scope: !5)
!33 = !DILocation(line: 35, column: 19, scope: !5)
!34 = !DILocation(line: 42, column: 19, scope: !5)
!35 = !DILocation(line: 45, column: 20, scope: !5)
!36 = !DILocation(line: 46, column: 42, scope: !5)
!37 = !DILocation(line: 46, column: 59, scope: !5)
!38 = !DILocation(line: 46, column: 31, scope: !5)
!39 = !DILocation(line: 46, column: 80, scope: !5)
!40 = !DILocation(line: 48, column: 40, scope: !5)
!41 = !DILocation(line: 48, column: 46, scope: !5)
!42 = !DILocation(line: 48, column: 31, scope: !5)
!43 = !DILocation(line: 56, column: 19, scope: !5)
!44 = !DILocation(line: 57, column: 39, scope: !5)
!45 = !DILocation(line: 57, column: 56, scope: !5)
!46 = !DILocation(line: 57, column: 31, scope: !5)
!47 = !DILocation(line: 59, column: 37, scope: !5)
!48 = !DILocation(line: 59, column: 43, scope: !5)
!49 = !DILocation(line: 59, column: 31, scope: !5)
!50 = !DILocation(line: 84, column: 40, scope: !5)
!51 = !DILocation(line: 84, column: 57, scope: !5)
!52 = !DILocation(line: 84, column: 31, scope: !5)
!53 = !DILocation(line: 0, scope: !5)
!54 = !DILocation(line: 32, column: 70, scope: !5)
!55 = !DILocation(line: 32, column: 110, scope: !5)
!56 = !DILocation(line: 36, column: 60, scope: !5)
!57 = !DILocation(line: 36, column: 118, scope: !5)
!58 = !DILocation(line: 46, column: 72, scope: !5)
!59 = !DILocation(line: 46, column: 131, scope: !5)
!60 = !DILocation(line: 48, column: 56, scope: !5)
!61 = !DILocation(line: 49, column: 20, scope: !5)
!62 = !DILocation(line: 51, column: 13, scope: !5)
!63 = !DILocation(line: 55, column: 20, scope: !5)
!64 = !DILocation(line: 57, column: 69, scope: !5)
!65 = !DILocation(line: 57, column: 128, scope: !5)
!66 = !DILocation(line: 59, column: 53, scope: !5)
!67 = !DILocation(line: 60, column: 20, scope: !5)
!68 = !DILocation(line: 65, column: 20, scope: !5)
!69 = !DILocation(line: 66, column: 19, scope: !5)
!70 = !DILocation(line: 68, column: 70, scope: !5)
!71 = !DILocation(line: 68, column: 128, scope: !5)
!72 = !DILocation(line: 73, column: 20, scope: !5)
!73 = !DILocation(line: 75, column: 69, scope: !5)
!74 = !DILocation(line: 75, column: 128, scope: !5)
!75 = !DILocation(line: 77, column: 20, scope: !5)
!76 = !DILocation(line: 79, column: 13, scope: !5)
!77 = !DILocation(line: 83, column: 20, scope: !5)
!78 = !DILocation(line: 84, column: 70, scope: !5)
!79 = !DILocation(line: 84, column: 129, scope: !5)
!80 = !DILocation(line: 86, column: 20, scope: !5)
!81 = !DILocation(line: 91, column: 20, scope: !5)
!82 = !DILocation(line: 92, column: 20, scope: !5)
!83 = !DILocation(line: 94, column: 20, scope: !5)
!84 = !DILocation(line: 95, column: 49, scope: !5)
!85 = !DILocation(line: 95, column: 42, scope: !5)
!86 = !DILocation(line: 95, column: 25, scope: !5)
!87 = !DILocation(line: 95, column: 62, scope: !5)
!88 = !DILocation(line: 95, column: 4, scope: !5)
