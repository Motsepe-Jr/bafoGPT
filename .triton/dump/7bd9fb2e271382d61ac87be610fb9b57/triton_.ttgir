#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 8], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [8, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [8, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked>
    %cst_0 = arith.constant dense<256> : tensor<64x1xi32, #blocked1>
    %cst_1 = arith.constant dense<256> : tensor<64x1xi32, #blocked>
    %cst_2 = arith.constant dense<256> : tensor<64x1xi32, #blocked2>
    %cst_3 = arith.constant dense<512> : tensor<1x64xi32, #blocked1>
    %cst_4 = arith.constant dense<512> : tensor<1x64xi32, #blocked>
    %cst_5 = arith.constant dense<512> : tensor<1x64xi32, #blocked2>
    %cst_6 = arith.constant dense<512> : tensor<64x1xi32, #blocked1>
    %cst_7 = arith.constant dense<512> : tensor<64x1xi32, #blocked2>
    %cst_8 = arith.constant dense<262144> : tensor<1x64xi32, #blocked1>
    %cst_9 = arith.constant dense<256> : tensor<1x64xi32, #blocked>
    %cst_10 = arith.constant dense<131072> : tensor<1x64xi32, #blocked1>
    %cst_11 = arith.constant dense<131072> : tensor<1x64xi32, #blocked2>
    %cst_12 = arith.constant dense<256> : tensor<64x1xi64, #blocked1>
    %cst_13 = arith.constant dense<256> : tensor<64x1xi64, #blocked>
    %cst_14 = arith.constant dense<196608> : tensor<1x64xi32, #blocked1>
    %cst_15 = arith.constant dense<128> : tensor<64x1xi32, #blocked>
    %cst_16 = arith.constant dense<65536> : tensor<1x64xi32, #blocked1>
    %cst_17 = arith.constant dense<-128> : tensor<64x1xi32, #blocked>
    %cst_18 = arith.constant dense<-65536> : tensor<1x64xi32, #blocked1>
    %cst_19 = arith.constant dense<128> : tensor<64x1xi64, #blocked1>
    %cst_20 = arith.constant dense<128> : tensor<64x1xi64, #blocked>
    %c64_i32 = arith.constant 64 : i32
    %cst_21 = arith.constant dense<0.000000e+00> : tensor<64x64xbf16, #blocked1>
    %cst_22 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked1>
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c64_i32 : i32
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>
    %5 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x64xi32, #blocked1>
    %6 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked>
    %7 = tt.expand_dims %4 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x64xi32, #blocked2>
    %8 = tt.splat %1 : (i32) -> tensor<1x64xi32, #blocked1>
    %9 = tt.splat %1 : (i32) -> tensor<1x64xi32, #blocked>
    %10 = tt.splat %1 : (i32) -> tensor<1x64xi32, #blocked2>
    %11 = arith.addi %8, %5 : tensor<1x64xi32, #blocked1>
    %12 = arith.addi %9, %6 : tensor<1x64xi32, #blocked>
    %13 = arith.addi %10, %7 : tensor<1x64xi32, #blocked2>
    %14 = tt.get_program_id x : i32
    %15 = arith.muli %14, %c64_i32 : i32
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %17 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %18 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %19 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1>
    %20 = tt.expand_dims %17 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2>
    %21 = tt.expand_dims %18 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked>
    %22 = tt.splat %15 : (i32) -> tensor<64x1xi32, #blocked1>
    %23 = tt.splat %15 : (i32) -> tensor<64x1xi32, #blocked2>
    %24 = tt.splat %15 : (i32) -> tensor<64x1xi32, #blocked>
    %25 = arith.addi %22, %19 : tensor<64x1xi32, #blocked1>
    %26 = arith.addi %23, %20 : tensor<64x1xi32, #blocked2>
    %27 = arith.addi %24, %21 : tensor<64x1xi32, #blocked>
    %28 = arith.cmpi slt, %25, %cst_0 : tensor<64x1xi32, #blocked1>
    %29 = arith.cmpi slt, %27, %cst_1 : tensor<64x1xi32, #blocked>
    %30 = arith.cmpi slt, %26, %cst_2 : tensor<64x1xi32, #blocked2>
    %31 = arith.remsi %11, %cst_3 : tensor<1x64xi32, #blocked1>
    %32 = arith.remsi %12, %cst_4 : tensor<1x64xi32, #blocked>
    %33 = arith.remsi %13, %cst_5 : tensor<1x64xi32, #blocked2>
    %34 = arith.divsi %11, %cst_3 : tensor<1x64xi32, #blocked1>
    %35 = arith.divsi %13, %cst_5 : tensor<1x64xi32, #blocked2>
    %36 = arith.muli %25, %cst_6 : tensor<64x1xi32, #blocked1>
    %37 = arith.muli %26, %cst_7 : tensor<64x1xi32, #blocked2>
    %38 = tt.broadcast %31 : (tensor<1x64xi32, #blocked1>) -> tensor<64x64xi32, #blocked1>
    %39 = tt.broadcast %33 : (tensor<1x64xi32, #blocked2>) -> tensor<64x64xi32, #blocked2>
    %40 = tt.broadcast %36 : (tensor<64x1xi32, #blocked1>) -> tensor<64x64xi32, #blocked1>
    %41 = tt.broadcast %37 : (tensor<64x1xi32, #blocked2>) -> tensor<64x64xi32, #blocked2>
    %42 = arith.addi %38, %40 : tensor<64x64xi32, #blocked1>
    %43 = arith.addi %39, %41 : tensor<64x64xi32, #blocked2>
    %44 = arith.muli %34, %cst_8 : tensor<1x64xi32, #blocked1>
    %45 = tt.broadcast %44 : (tensor<1x64xi32, #blocked1>) -> tensor<64x64xi32, #blocked1>
    %46 = arith.addi %42, %45 : tensor<64x64xi32, #blocked1>
    %47 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<64x64x!tt.ptr<bf16, 1>, #blocked1>
    %48 = tt.addptr %47, %46 : tensor<64x64x!tt.ptr<bf16, 1>, #blocked1>, tensor<64x64xi32, #blocked1>
    %49 = tt.broadcast %28 : (tensor<64x1xi1, #blocked1>) -> tensor<64x64xi1, #blocked1>
    %50 = tt.broadcast %29 : (tensor<64x1xi1, #blocked>) -> tensor<64x64xi1, #blocked>
    %51 = tt.broadcast %30 : (tensor<64x1xi1, #blocked2>) -> tensor<64x64xi1, #blocked2>
    %52 = tt.load %48, %49 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16, #blocked1>
    %53 = triton_gpu.convert_layout %52 : (tensor<64x64xbf16, #blocked1>) -> tensor<64x64xbf16, #blocked>
    %54 = arith.extf %53 : tensor<64x64xbf16, #blocked> to tensor<64x64xf32, #blocked>
    %55 = arith.muli %32, %cst_9 : tensor<1x64xi32, #blocked>
    %56 = tt.broadcast %27 : (tensor<64x1xi32, #blocked>) -> tensor<64x64xi32, #blocked>
    %57 = tt.broadcast %55 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked>
    %58 = arith.addi %56, %57 : tensor<64x64xi32, #blocked>
    %59 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<64x64x!tt.ptr<f32, 1>, #blocked>
    %60 = tt.addptr %59, %58 : tensor<64x64x!tt.ptr<f32, 1>, #blocked>, tensor<64x64xi32, #blocked>
    %61 = tt.load %60, %50 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xf32, #blocked>
    %62 = triton_gpu.convert_layout %61 : (tensor<64x64xf32, #blocked>) -> tensor<64x64xf32, #blocked1>
    %63 = arith.addi %31, %cst_10 : tensor<1x64xi32, #blocked1>
    %64 = tt.broadcast %63 : (tensor<1x64xi32, #blocked1>) -> tensor<64x64xi32, #blocked1>
    %65 = arith.addi %64, %40 : tensor<64x64xi32, #blocked1>
    %66 = arith.addi %65, %45 : tensor<64x64xi32, #blocked1>
    %67 = tt.addptr %47, %66 : tensor<64x64x!tt.ptr<bf16, 1>, #blocked1>, tensor<64x64xi32, #blocked1>
    %68 = tt.load %67, %49 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16, #blocked1>
    %69 = arith.extf %68 : tensor<64x64xbf16, #blocked1> to tensor<64x64xf32, #blocked1>
    %70 = arith.extsi %25 : tensor<64x1xi32, #blocked1> to tensor<64x1xi64, #blocked1>
    %71 = arith.extsi %27 : tensor<64x1xi32, #blocked> to tensor<64x1xi64, #blocked>
    %72 = arith.cmpi sge, %70, %cst_12 : tensor<64x1xi64, #blocked1>
    %73 = arith.cmpi sge, %71, %cst_13 : tensor<64x1xi64, #blocked>
    %74 = arith.andi %72, %28 : tensor<64x1xi1, #blocked1>
    %75 = tt.broadcast %74 : (tensor<64x1xi1, #blocked1>) -> tensor<64x64xi1, #blocked1>
    %76 = tt.load %48, %75, %cst_21 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16, #blocked1>
    %77 = triton_gpu.convert_layout %76 : (tensor<64x64xbf16, #blocked1>) -> tensor<64x64xbf16, #blocked>
    %78 = arith.extf %77 : tensor<64x64xbf16, #blocked> to tensor<64x64xf32, #blocked>
    %79 = tt.broadcast %72 : (tensor<64x1xi1, #blocked1>) -> tensor<64x64xi1, #blocked1>
    %80 = tt.broadcast %73 : (tensor<64x1xi1, #blocked>) -> tensor<64x64xi1, #blocked>
    %81 = arith.select %80, %78, %cst : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked>
    %82 = arith.mulf %54, %61 : tensor<64x64xf32, #blocked>
    %83 = arith.cmpi sge, %70, %cst_19 : tensor<64x1xi64, #blocked1>
    %84 = arith.cmpi sge, %71, %cst_20 : tensor<64x1xi64, #blocked>
    %85 = arith.addi %31, %cst_18 : tensor<1x64xi32, #blocked1>
    %86 = tt.broadcast %85 : (tensor<1x64xi32, #blocked1>) -> tensor<64x64xi32, #blocked1>
    %87 = arith.addi %86, %40 : tensor<64x64xi32, #blocked1>
    %88 = arith.addi %87, %45 : tensor<64x64xi32, #blocked1>
    %89 = tt.addptr %47, %88 : tensor<64x64x!tt.ptr<bf16, 1>, #blocked1>, tensor<64x64xi32, #blocked1>
    %90 = arith.andi %83, %28 : tensor<64x1xi1, #blocked1>
    %91 = arith.andi %84, %29 : tensor<64x1xi1, #blocked>
    %92 = tt.broadcast %90 : (tensor<64x1xi1, #blocked1>) -> tensor<64x64xi1, #blocked1>
    %93 = tt.broadcast %91 : (tensor<64x1xi1, #blocked>) -> tensor<64x64xi1, #blocked>
    %94 = tt.load %89, %92, %cst_21 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16, #blocked1>
    %95 = triton_gpu.convert_layout %94 : (tensor<64x64xbf16, #blocked1>) -> tensor<64x64xbf16, #blocked>
    %96 = arith.extf %95 : tensor<64x64xbf16, #blocked> to tensor<64x64xf32, #blocked>
    %97 = arith.addi %27, %cst_17 : tensor<64x1xi32, #blocked>
    %98 = tt.broadcast %97 : (tensor<64x1xi32, #blocked>) -> tensor<64x64xi32, #blocked>
    %99 = arith.addi %98, %57 : tensor<64x64xi32, #blocked>
    %100 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x64x!tt.ptr<f32, 1>, #blocked>
    %101 = tt.addptr %100, %99 : tensor<64x64x!tt.ptr<f32, 1>, #blocked>, tensor<64x64xi32, #blocked>
    %102 = tt.load %101, %93, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xf32, #blocked>
    %103 = triton_gpu.convert_layout %102 : (tensor<64x64xf32, #blocked>) -> tensor<64x64xf32, #blocked1>
    %104 = arith.mulf %96, %102 : tensor<64x64xf32, #blocked>
    %105 = arith.subf %cst, %104 : tensor<64x64xf32, #blocked>
    %106 = tt.broadcast %83 : (tensor<64x1xi1, #blocked1>) -> tensor<64x64xi1, #blocked1>
    %107 = tt.broadcast %84 : (tensor<64x1xi1, #blocked>) -> tensor<64x64xi1, #blocked>
    %108 = arith.select %107, %105, %cst : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked>
    %109 = arith.addf %82, %108 : tensor<64x64xf32, #blocked>
    %110 = arith.cmpi slt, %70, %cst_19 : tensor<64x1xi64, #blocked1>
    %111 = arith.cmpi slt, %71, %cst_20 : tensor<64x1xi64, #blocked>
    %112 = arith.addi %31, %cst_16 : tensor<1x64xi32, #blocked1>
    %113 = tt.broadcast %112 : (tensor<1x64xi32, #blocked1>) -> tensor<64x64xi32, #blocked1>
    %114 = arith.addi %113, %40 : tensor<64x64xi32, #blocked1>
    %115 = arith.addi %114, %45 : tensor<64x64xi32, #blocked1>
    %116 = tt.addptr %47, %115 : tensor<64x64x!tt.ptr<bf16, 1>, #blocked1>, tensor<64x64xi32, #blocked1>
    %117 = arith.andi %110, %28 : tensor<64x1xi1, #blocked1>
    %118 = arith.andi %111, %29 : tensor<64x1xi1, #blocked>
    %119 = tt.broadcast %117 : (tensor<64x1xi1, #blocked1>) -> tensor<64x64xi1, #blocked1>
    %120 = tt.broadcast %118 : (tensor<64x1xi1, #blocked>) -> tensor<64x64xi1, #blocked>
    %121 = tt.load %116, %119, %cst_21 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16, #blocked1>
    %122 = triton_gpu.convert_layout %121 : (tensor<64x64xbf16, #blocked1>) -> tensor<64x64xbf16, #blocked>
    %123 = arith.extf %122 : tensor<64x64xbf16, #blocked> to tensor<64x64xf32, #blocked>
    %124 = arith.addi %27, %cst_15 : tensor<64x1xi32, #blocked>
    %125 = tt.broadcast %124 : (tensor<64x1xi32, #blocked>) -> tensor<64x64xi32, #blocked>
    %126 = arith.addi %125, %57 : tensor<64x64xi32, #blocked>
    %127 = tt.addptr %100, %126 : tensor<64x64x!tt.ptr<f32, 1>, #blocked>, tensor<64x64xi32, #blocked>
    %128 = tt.load %127, %120, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xf32, #blocked>
    %129 = triton_gpu.convert_layout %128 : (tensor<64x64xf32, #blocked>) -> tensor<64x64xf32, #blocked1>
    %130 = arith.mulf %123, %128 : tensor<64x64xf32, #blocked>
    %131 = tt.broadcast %110 : (tensor<64x1xi1, #blocked1>) -> tensor<64x64xi1, #blocked1>
    %132 = tt.broadcast %111 : (tensor<64x1xi1, #blocked>) -> tensor<64x64xi1, #blocked>
    %133 = arith.select %132, %130, %cst : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked>
    %134 = arith.addf %109, %133 : tensor<64x64xf32, #blocked>
    %135 = arith.addf %81, %134 : tensor<64x64xf32, #blocked>
    %136 = triton_gpu.convert_layout %135 : (tensor<64x64xf32, #blocked>) -> tensor<64x64xf32, #blocked1>
    %137 = tt.load %67, %75, %cst_21 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16, #blocked1>
    %138 = arith.extf %137 : tensor<64x64xbf16, #blocked1> to tensor<64x64xf32, #blocked1>
    %139 = arith.select %79, %138, %cst_22 : tensor<64x64xi1, #blocked1>, tensor<64x64xf32, #blocked1>
    %140 = arith.mulf %69, %62 : tensor<64x64xf32, #blocked1>
    %141 = tt.load %116, %92, %cst_21 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16, #blocked1>
    %142 = arith.extf %141 : tensor<64x64xbf16, #blocked1> to tensor<64x64xf32, #blocked1>
    %143 = arith.mulf %142, %103 : tensor<64x64xf32, #blocked1>
    %144 = arith.subf %cst_22, %143 : tensor<64x64xf32, #blocked1>
    %145 = arith.select %106, %144, %cst_22 : tensor<64x64xi1, #blocked1>, tensor<64x64xf32, #blocked1>
    %146 = arith.addf %140, %145 : tensor<64x64xf32, #blocked1>
    %147 = arith.addi %31, %cst_14 : tensor<1x64xi32, #blocked1>
    %148 = tt.broadcast %147 : (tensor<1x64xi32, #blocked1>) -> tensor<64x64xi32, #blocked1>
    %149 = arith.addi %148, %40 : tensor<64x64xi32, #blocked1>
    %150 = arith.addi %149, %45 : tensor<64x64xi32, #blocked1>
    %151 = tt.addptr %47, %150 : tensor<64x64x!tt.ptr<bf16, 1>, #blocked1>, tensor<64x64xi32, #blocked1>
    %152 = tt.load %151, %119, %cst_21 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16, #blocked1>
    %153 = arith.extf %152 : tensor<64x64xbf16, #blocked1> to tensor<64x64xf32, #blocked1>
    %154 = arith.mulf %153, %129 : tensor<64x64xf32, #blocked1>
    %155 = arith.select %131, %154, %cst_22 : tensor<64x64xi1, #blocked1>, tensor<64x64xf32, #blocked1>
    %156 = arith.addf %146, %155 : tensor<64x64xf32, #blocked1>
    %157 = arith.addf %139, %156 : tensor<64x64xf32, #blocked1>
    %158 = arith.addf %136, %157 : tensor<64x64xf32, #blocked1>
    %159 = arith.muli %35, %cst_11 : tensor<1x64xi32, #blocked2>
    %160 = tt.broadcast %159 : (tensor<1x64xi32, #blocked2>) -> tensor<64x64xi32, #blocked2>
    %161 = arith.addi %43, %160 : tensor<64x64xi32, #blocked2>
    %162 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<64x64x!tt.ptr<f32, 1>, #blocked2>
    %163 = tt.addptr %162, %161 : tensor<64x64x!tt.ptr<f32, 1>, #blocked2>, tensor<64x64xi32, #blocked2>
    %164 = triton_gpu.convert_layout %158 : (tensor<64x64xf32, #blocked1>) -> tensor<64x64xf32, #blocked2>
    tt.store %163, %164, %51 {cache = 1 : i32, evict = 1 : i32} : tensor<64x64xf32, #blocked2>
    tt.return
  }
}
