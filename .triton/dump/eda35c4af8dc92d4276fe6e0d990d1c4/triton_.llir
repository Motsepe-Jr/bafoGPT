; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = shl i32 %7, 3, !dbg !8
  %9 = and i32 %8, 1016, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %11 = shl i32 %10, 10, !dbg !10
  %12 = or i32 %11, %9, !dbg !11
  %13 = or i32 %12, 1, !dbg !11
  %14 = or i32 %12, 2, !dbg !11
  %15 = or i32 %12, 3, !dbg !11
  %16 = or i32 %12, 4, !dbg !11
  %17 = or i32 %12, 5, !dbg !11
  %18 = or i32 %12, 6, !dbg !11
  %19 = or i32 %12, 7, !dbg !11
  %20 = insertelement <8 x i32> poison, i32 %19, i64 0, !dbg !12
  %21 = insertelement <8 x i32> %20, i32 %18, i64 1, !dbg !12
  %22 = insertelement <8 x i32> %21, i32 %17, i64 2, !dbg !12
  %23 = insertelement <8 x i32> %22, i32 %16, i64 3, !dbg !12
  %24 = insertelement <8 x i32> %23, i32 %15, i64 4, !dbg !12
  %25 = insertelement <8 x i32> %24, i32 %14, i64 5, !dbg !12
  %26 = insertelement <8 x i32> %25, i32 %13, i64 6, !dbg !12
  %27 = insertelement <8 x i32> %26, i32 %12, i64 7, !dbg !12
  %28 = srem <8 x i32> %27, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>, !dbg !12
  %29 = sdiv i32 %12, 256, !dbg !13
  %30 = srem i32 %29, 512, !dbg !14
  %.frozen = freeze i32 %12
  %31 = sdiv i32 %.frozen, 131072, !dbg !15
  %32 = mul i32 %31, 131072
  %.decomposed = sub i32 %.frozen, %32
  %33 = srem i32 %13, 131072, !dbg !16
  %34 = srem i32 %14, 131072, !dbg !16
  %35 = srem i32 %15, 131072, !dbg !16
  %36 = srem i32 %16, 131072, !dbg !16
  %37 = srem i32 %17, 131072, !dbg !16
  %38 = srem i32 %18, 131072, !dbg !16
  %39 = srem i32 %19, 131072, !dbg !16
  %.lhs.trunc = trunc i32 %31 to i16, !dbg !17
  %40 = srem i16 %.lhs.trunc, 2, !dbg !17
  %.sext = sext i16 %40 to i32, !dbg !17
  %41 = shl nsw i32 %.sext, 8, !dbg !18
  %42 = sdiv i32 %12, 262144, !dbg !19
  %43 = shl nsw i32 %42, 10, !dbg !20
  %44 = shl nsw i32 %30, 12, !dbg !21
  %45 = add nsw i32 %44, %43, !dbg !22
  %46 = extractelement <8 x i32> %28, i64 7, !dbg !23
  %47 = add nsw i32 %45, %46, !dbg !24
  %48 = add nsw i32 %47, %41, !dbg !25
  %49 = extractelement <8 x i32> %28, i64 6, !dbg !23
  %50 = add nsw i32 %45, %49, !dbg !24
  %51 = add nsw i32 %50, %41, !dbg !25
  %52 = extractelement <8 x i32> %28, i64 5, !dbg !23
  %53 = add nsw i32 %45, %52, !dbg !24
  %54 = add nsw i32 %53, %41, !dbg !25
  %55 = extractelement <8 x i32> %28, i64 4, !dbg !23
  %56 = add nsw i32 %45, %55, !dbg !24
  %57 = add nsw i32 %56, %41, !dbg !25
  %58 = extractelement <8 x i32> %28, i64 3, !dbg !23
  %59 = add nsw i32 %45, %58, !dbg !24
  %60 = add nsw i32 %59, %41, !dbg !25
  %61 = extractelement <8 x i32> %28, i64 2, !dbg !23
  %62 = add nsw i32 %45, %61, !dbg !24
  %63 = add nsw i32 %62, %41, !dbg !25
  %64 = extractelement <8 x i32> %28, i64 1, !dbg !23
  %65 = add nsw i32 %45, %64, !dbg !24
  %66 = add nsw i32 %65, %41, !dbg !25
  %67 = extractelement <8 x i32> %28, i64 0, !dbg !23
  %68 = add nsw i32 %45, %67, !dbg !24
  %69 = add nsw i32 %68, %41, !dbg !25
  %70 = sext i32 %48 to i64, !dbg !26
  %71 = getelementptr i16, ptr addrspace(1) %0, i64 %70, !dbg !26
  %72 = sext i32 %51 to i64, !dbg !26
  %73 = getelementptr i16, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = sext i32 %54 to i64, !dbg !26
  %75 = getelementptr i16, ptr addrspace(1) %0, i64 %74, !dbg !26
  %76 = sext i32 %57 to i64, !dbg !26
  %77 = getelementptr i16, ptr addrspace(1) %0, i64 %76, !dbg !26
  %78 = sext i32 %60 to i64, !dbg !26
  %79 = getelementptr i16, ptr addrspace(1) %0, i64 %78, !dbg !26
  %80 = sext i32 %63 to i64, !dbg !26
  %81 = getelementptr i16, ptr addrspace(1) %0, i64 %80, !dbg !26
  %82 = sext i32 %66 to i64, !dbg !26
  %83 = getelementptr i16, ptr addrspace(1) %0, i64 %82, !dbg !26
  %84 = sext i32 %69 to i64, !dbg !26
  %85 = getelementptr i16, ptr addrspace(1) %0, i64 %84, !dbg !26
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %71, i1 true, i16 0, i1 true) #1, !dbg !27
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %73, i1 true, i16 0, i1 true) #1, !dbg !27
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %75, i1 true, i16 0, i1 true) #1, !dbg !27
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %77, i1 true, i16 0, i1 true) #1, !dbg !27
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %79, i1 true, i16 0, i1 true) #1, !dbg !27
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %81, i1 true, i16 0, i1 true) #1, !dbg !27
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %83, i1 true, i16 0, i1 true) #1, !dbg !27
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %85, i1 true, i16 0, i1 true) #1, !dbg !27
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #1, !dbg !28
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #1, !dbg !28
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #1, !dbg !28
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #1, !dbg !28
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #1, !dbg !28
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #1, !dbg !28
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #1, !dbg !28
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #1, !dbg !28
  %102 = sext i32 %.decomposed to i64, !dbg !29
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !29
  %104 = sext i32 %33 to i64, !dbg !29
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !29
  %106 = sext i32 %34 to i64, !dbg !29
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !29
  %108 = sext i32 %35 to i64, !dbg !29
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !29
  %110 = sext i32 %36 to i64, !dbg !29
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !29
  %112 = sext i32 %37 to i64, !dbg !29
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !29
  %114 = sext i32 %38 to i64, !dbg !29
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !29
  %116 = sext i32 %39 to i64, !dbg !29
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !29
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 true, i32 0, i1 true) #1, !dbg !30
  %119 = bitcast i32 %118 to float, !dbg !30
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 true, i32 0, i1 true) #1, !dbg !30
  %121 = bitcast i32 %120 to float, !dbg !30
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 true, i32 0, i1 true) #1, !dbg !30
  %123 = bitcast i32 %122 to float, !dbg !30
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 true, i32 0, i1 true) #1, !dbg !30
  %125 = bitcast i32 %124 to float, !dbg !30
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 true, i32 0, i1 true) #1, !dbg !30
  %127 = bitcast i32 %126 to float, !dbg !30
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 true, i32 0, i1 true) #1, !dbg !30
  %129 = bitcast i32 %128 to float, !dbg !30
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 true, i32 0, i1 true) #1, !dbg !30
  %131 = bitcast i32 %130 to float, !dbg !30
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 true, i32 0, i1 true) #1, !dbg !30
  %133 = bitcast i32 %132 to float, !dbg !30
  %134 = fmul float %94, %119, !dbg !31
  %135 = fmul float %95, %121, !dbg !31
  %136 = fmul float %96, %123, !dbg !31
  %137 = fmul float %97, %125, !dbg !31
  %138 = fmul float %98, %127, !dbg !31
  %139 = fmul float %99, %129, !dbg !31
  %140 = fmul float %100, %131, !dbg !31
  %141 = fmul float %101, %133, !dbg !31
  %142 = icmp slt <8 x i32> %28, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>, !dbg !32
  %143 = or i32 %45, 128, !dbg !33
  %144 = add nsw i32 %143, %46, !dbg !34
  %145 = add nsw i32 %144, %41, !dbg !35
  %146 = add nsw i32 %143, %49, !dbg !34
  %147 = add nsw i32 %146, %41, !dbg !35
  %148 = add nsw i32 %143, %52, !dbg !34
  %149 = add nsw i32 %148, %41, !dbg !35
  %150 = add nsw i32 %143, %55, !dbg !34
  %151 = add nsw i32 %150, %41, !dbg !35
  %152 = add nsw i32 %143, %58, !dbg !34
  %153 = add nsw i32 %152, %41, !dbg !35
  %154 = add nsw i32 %143, %61, !dbg !34
  %155 = add nsw i32 %154, %41, !dbg !35
  %156 = add nsw i32 %143, %64, !dbg !34
  %157 = add nsw i32 %156, %41, !dbg !35
  %158 = add nsw i32 %143, %67, !dbg !34
  %159 = add nsw i32 %158, %41, !dbg !35
  %160 = sext i32 %145 to i64, !dbg !36
  %161 = getelementptr i16, ptr addrspace(1) %0, i64 %160, !dbg !36
  %162 = sext i32 %147 to i64, !dbg !36
  %163 = getelementptr i16, ptr addrspace(1) %0, i64 %162, !dbg !36
  %164 = sext i32 %149 to i64, !dbg !36
  %165 = getelementptr i16, ptr addrspace(1) %0, i64 %164, !dbg !36
  %166 = sext i32 %151 to i64, !dbg !36
  %167 = getelementptr i16, ptr addrspace(1) %0, i64 %166, !dbg !36
  %168 = sext i32 %153 to i64, !dbg !36
  %169 = getelementptr i16, ptr addrspace(1) %0, i64 %168, !dbg !36
  %170 = sext i32 %155 to i64, !dbg !36
  %171 = getelementptr i16, ptr addrspace(1) %0, i64 %170, !dbg !36
  %172 = sext i32 %157 to i64, !dbg !36
  %173 = getelementptr i16, ptr addrspace(1) %0, i64 %172, !dbg !36
  %174 = sext i32 %159 to i64, !dbg !36
  %175 = getelementptr i16, ptr addrspace(1) %0, i64 %174, !dbg !36
  %176 = extractelement <8 x i1> %142, i64 7, !dbg !37
  %177 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %161, i1 %176, i16 0, i1 %176) #1, !dbg !38
  %178 = extractelement <8 x i1> %142, i64 6, !dbg !37
  %179 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %163, i1 %178, i16 0, i1 %178) #1, !dbg !38
  %180 = extractelement <8 x i1> %142, i64 5, !dbg !37
  %181 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %165, i1 %180, i16 0, i1 %180) #1, !dbg !38
  %182 = extractelement <8 x i1> %142, i64 4, !dbg !37
  %183 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %167, i1 %182, i16 0, i1 %182) #1, !dbg !38
  %184 = extractelement <8 x i1> %142, i64 3, !dbg !37
  %185 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %169, i1 %184, i16 0, i1 %184) #1, !dbg !38
  %186 = extractelement <8 x i1> %142, i64 2, !dbg !37
  %187 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %171, i1 %186, i16 0, i1 %186) #1, !dbg !38
  %188 = extractelement <8 x i1> %142, i64 1, !dbg !37
  %189 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %173, i1 %188, i16 0, i1 %188) #1, !dbg !38
  %190 = extractelement <8 x i1> %142, i64 0, !dbg !37
  %191 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %175, i1 %190, i16 0, i1 %190) #1, !dbg !38
  %192 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %177) #1, !dbg !39
  %193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %179) #1, !dbg !39
  %194 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %181) #1, !dbg !39
  %195 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %183) #1, !dbg !39
  %196 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %185) #1, !dbg !39
  %197 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %187) #1, !dbg !39
  %198 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #1, !dbg !39
  %199 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %191) #1, !dbg !39
  %200 = fsub float 0.000000e+00, %192, !dbg !40
  %201 = fsub float 0.000000e+00, %193, !dbg !40
  %202 = fsub float 0.000000e+00, %194, !dbg !40
  %203 = fsub float 0.000000e+00, %195, !dbg !40
  %204 = fsub float 0.000000e+00, %196, !dbg !40
  %205 = fsub float 0.000000e+00, %197, !dbg !40
  %206 = fsub float 0.000000e+00, %198, !dbg !40
  %207 = fsub float 0.000000e+00, %199, !dbg !40
  %208 = icmp sgt i32 %46, 127, !dbg !41
  %209 = icmp sgt i32 %49, 127, !dbg !41
  %210 = icmp sgt i32 %52, 127, !dbg !41
  %211 = icmp sgt i32 %55, 127, !dbg !41
  %212 = icmp sgt i32 %58, 127, !dbg !41
  %213 = icmp sgt i32 %61, 127, !dbg !41
  %214 = icmp sgt i32 %64, 127, !dbg !41
  %215 = icmp sgt i32 %67, 127, !dbg !41
  %216 = add nsw i32 %45, -128, !dbg !42
  %217 = add nsw i32 %216, %46, !dbg !43
  %218 = add nsw i32 %217, %41, !dbg !44
  %219 = add nsw i32 %216, %49, !dbg !43
  %220 = add nsw i32 %219, %41, !dbg !44
  %221 = add nsw i32 %216, %52, !dbg !43
  %222 = add nsw i32 %221, %41, !dbg !44
  %223 = add nsw i32 %216, %55, !dbg !43
  %224 = add nsw i32 %223, %41, !dbg !44
  %225 = add nsw i32 %216, %58, !dbg !43
  %226 = add nsw i32 %225, %41, !dbg !44
  %227 = add nsw i32 %216, %61, !dbg !43
  %228 = add nsw i32 %227, %41, !dbg !44
  %229 = add nsw i32 %216, %64, !dbg !43
  %230 = add nsw i32 %229, %41, !dbg !44
  %231 = add nsw i32 %216, %67, !dbg !43
  %232 = add nsw i32 %231, %41, !dbg !44
  %233 = sext i32 %218 to i64, !dbg !45
  %234 = getelementptr i16, ptr addrspace(1) %0, i64 %233, !dbg !45
  %235 = sext i32 %220 to i64, !dbg !45
  %236 = getelementptr i16, ptr addrspace(1) %0, i64 %235, !dbg !45
  %237 = sext i32 %222 to i64, !dbg !45
  %238 = getelementptr i16, ptr addrspace(1) %0, i64 %237, !dbg !45
  %239 = sext i32 %224 to i64, !dbg !45
  %240 = getelementptr i16, ptr addrspace(1) %0, i64 %239, !dbg !45
  %241 = sext i32 %226 to i64, !dbg !45
  %242 = getelementptr i16, ptr addrspace(1) %0, i64 %241, !dbg !45
  %243 = sext i32 %228 to i64, !dbg !45
  %244 = getelementptr i16, ptr addrspace(1) %0, i64 %243, !dbg !45
  %245 = sext i32 %230 to i64, !dbg !45
  %246 = getelementptr i16, ptr addrspace(1) %0, i64 %245, !dbg !45
  %247 = sext i32 %232 to i64, !dbg !45
  %248 = getelementptr i16, ptr addrspace(1) %0, i64 %247, !dbg !45
  %249 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %234, i1 %208, i16 0, i1 %208) #1, !dbg !46
  %250 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %236, i1 %209, i16 0, i1 %209) #1, !dbg !46
  %251 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %238, i1 %210, i16 0, i1 %210) #1, !dbg !46
  %252 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %240, i1 %211, i16 0, i1 %211) #1, !dbg !46
  %253 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %242, i1 %212, i16 0, i1 %212) #1, !dbg !46
  %254 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %244, i1 %213, i16 0, i1 %213) #1, !dbg !46
  %255 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %246, i1 %214, i16 0, i1 %214) #1, !dbg !46
  %256 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %248, i1 %215, i16 0, i1 %215) #1, !dbg !46
  %257 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %249) #1, !dbg !47
  %258 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %250) #1, !dbg !47
  %259 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %251) #1, !dbg !47
  %260 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %252) #1, !dbg !47
  %261 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %253) #1, !dbg !47
  %262 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %254) #1, !dbg !47
  %263 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %255) #1, !dbg !47
  %264 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %256) #1, !dbg !47
  %265 = select i1 %208, float %257, float 0.000000e+00, !dbg !48
  %266 = select i1 %209, float %258, float 0.000000e+00, !dbg !48
  %267 = select i1 %210, float %259, float 0.000000e+00, !dbg !48
  %268 = select i1 %211, float %260, float 0.000000e+00, !dbg !48
  %269 = select i1 %212, float %261, float 0.000000e+00, !dbg !48
  %270 = select i1 %213, float %262, float 0.000000e+00, !dbg !48
  %271 = select i1 %214, float %263, float 0.000000e+00, !dbg !48
  %272 = select i1 %215, float %264, float 0.000000e+00, !dbg !48
  %273 = select i1 %176, float %200, float %265, !dbg !37
  %274 = select i1 %178, float %201, float %266, !dbg !37
  %275 = select i1 %180, float %202, float %267, !dbg !37
  %276 = select i1 %182, float %203, float %268, !dbg !37
  %277 = select i1 %184, float %204, float %269, !dbg !37
  %278 = select i1 %186, float %205, float %270, !dbg !37
  %279 = select i1 %188, float %206, float %271, !dbg !37
  %280 = select i1 %190, float %207, float %272, !dbg !37
  %281 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !49
  %282 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !49
  %283 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !49
  %284 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !49
  %285 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !49
  %286 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !49
  %287 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !49
  %288 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !49
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %281, i1 true, i32 0, i1 true) #1, !dbg !50
  %290 = bitcast i32 %289 to float, !dbg !50
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 true, i32 0, i1 true) #1, !dbg !50
  %292 = bitcast i32 %291 to float, !dbg !50
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 true, i32 0, i1 true) #1, !dbg !50
  %294 = bitcast i32 %293 to float, !dbg !50
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 true, i32 0, i1 true) #1, !dbg !50
  %296 = bitcast i32 %295 to float, !dbg !50
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %285, i1 true, i32 0, i1 true) #1, !dbg !50
  %298 = bitcast i32 %297 to float, !dbg !50
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %286, i1 true, i32 0, i1 true) #1, !dbg !50
  %300 = bitcast i32 %299 to float, !dbg !50
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %287, i1 true, i32 0, i1 true) #1, !dbg !50
  %302 = bitcast i32 %301 to float, !dbg !50
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %288, i1 true, i32 0, i1 true) #1, !dbg !50
  %304 = bitcast i32 %303 to float, !dbg !50
  %305 = fmul float %273, %290, !dbg !51
  %306 = fmul float %274, %292, !dbg !51
  %307 = fmul float %275, %294, !dbg !51
  %308 = fmul float %276, %296, !dbg !51
  %309 = fmul float %277, %298, !dbg !51
  %310 = fmul float %278, %300, !dbg !51
  %311 = fmul float %279, %302, !dbg !51
  %312 = fmul float %280, %304, !dbg !51
  %313 = fadd float %134, %305, !dbg !52
  %314 = fadd float %135, %306, !dbg !52
  %315 = fadd float %136, %307, !dbg !52
  %316 = fadd float %137, %308, !dbg !52
  %317 = fadd float %138, %309, !dbg !52
  %318 = fadd float %139, %310, !dbg !52
  %319 = fadd float %140, %311, !dbg !52
  %320 = fadd float %141, %312, !dbg !52
  %321 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %71, i1 false, i16 0, i1 false) #1, !dbg !53
  %322 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %73, i1 false, i16 0, i1 false) #1, !dbg !53
  %323 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %75, i1 false, i16 0, i1 false) #1, !dbg !53
  %324 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %77, i1 false, i16 0, i1 false) #1, !dbg !53
  %325 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %79, i1 false, i16 0, i1 false) #1, !dbg !53
  %326 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %81, i1 false, i16 0, i1 false) #1, !dbg !53
  %327 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %83, i1 false, i16 0, i1 false) #1, !dbg !53
  %328 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %85, i1 false, i16 0, i1 false) #1, !dbg !53
  %329 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %321) #1, !dbg !54
  %330 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %322) #1, !dbg !54
  %331 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %323) #1, !dbg !54
  %332 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %324) #1, !dbg !54
  %333 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %325) #1, !dbg !54
  %334 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %326) #1, !dbg !54
  %335 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %327) #1, !dbg !54
  %336 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %328) #1, !dbg !54
  %337 = or i32 %45, 512, !dbg !55
  %338 = add nsw i32 %337, %46, !dbg !56
  %339 = add nsw i32 %337, %49, !dbg !56
  %340 = add nsw i32 %337, %52, !dbg !56
  %341 = add nsw i32 %337, %55, !dbg !56
  %342 = add nsw i32 %337, %58, !dbg !56
  %343 = add nsw i32 %337, %61, !dbg !56
  %344 = add nsw i32 %337, %64, !dbg !56
  %345 = add nsw i32 %337, %67, !dbg !56
  %346 = sext i32 %338 to i64, !dbg !57
  %347 = getelementptr i16, ptr addrspace(1) %0, i64 %346, !dbg !57
  %348 = sext i32 %339 to i64, !dbg !57
  %349 = getelementptr i16, ptr addrspace(1) %0, i64 %348, !dbg !57
  %350 = sext i32 %340 to i64, !dbg !57
  %351 = getelementptr i16, ptr addrspace(1) %0, i64 %350, !dbg !57
  %352 = sext i32 %341 to i64, !dbg !57
  %353 = getelementptr i16, ptr addrspace(1) %0, i64 %352, !dbg !57
  %354 = sext i32 %342 to i64, !dbg !57
  %355 = getelementptr i16, ptr addrspace(1) %0, i64 %354, !dbg !57
  %356 = sext i32 %343 to i64, !dbg !57
  %357 = getelementptr i16, ptr addrspace(1) %0, i64 %356, !dbg !57
  %358 = sext i32 %344 to i64, !dbg !57
  %359 = getelementptr i16, ptr addrspace(1) %0, i64 %358, !dbg !57
  %360 = sext i32 %345 to i64, !dbg !57
  %361 = getelementptr i16, ptr addrspace(1) %0, i64 %360, !dbg !57
  %362 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %347, i1 true, i16 0, i1 true) #1, !dbg !58
  %363 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %349, i1 true, i16 0, i1 true) #1, !dbg !58
  %364 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %351, i1 true, i16 0, i1 true) #1, !dbg !58
  %365 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %353, i1 true, i16 0, i1 true) #1, !dbg !58
  %366 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %355, i1 true, i16 0, i1 true) #1, !dbg !58
  %367 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %357, i1 true, i16 0, i1 true) #1, !dbg !58
  %368 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %359, i1 true, i16 0, i1 true) #1, !dbg !58
  %369 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %361, i1 true, i16 0, i1 true) #1, !dbg !58
  %370 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %362) #1, !dbg !59
  %371 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #1, !dbg !59
  %372 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %364) #1, !dbg !59
  %373 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #1, !dbg !59
  %374 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %366) #1, !dbg !59
  %375 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %367) #1, !dbg !59
  %376 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %368) #1, !dbg !59
  %377 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %369) #1, !dbg !59
  %378 = fmul float %370, %119, !dbg !60
  %379 = fmul float %371, %121, !dbg !60
  %380 = fmul float %372, %123, !dbg !60
  %381 = fmul float %373, %125, !dbg !60
  %382 = fmul float %374, %127, !dbg !60
  %383 = fmul float %375, %129, !dbg !60
  %384 = fmul float %376, %131, !dbg !60
  %385 = fmul float %377, %133, !dbg !60
  %386 = or i32 %45, 640, !dbg !61
  %387 = add nsw i32 %386, %46, !dbg !62
  %388 = add nsw i32 %386, %49, !dbg !62
  %389 = add nsw i32 %386, %52, !dbg !62
  %390 = add nsw i32 %386, %55, !dbg !62
  %391 = add nsw i32 %386, %58, !dbg !62
  %392 = add nsw i32 %386, %61, !dbg !62
  %393 = add nsw i32 %386, %64, !dbg !62
  %394 = add nsw i32 %386, %67, !dbg !62
  %395 = sext i32 %387 to i64, !dbg !63
  %396 = getelementptr i16, ptr addrspace(1) %0, i64 %395, !dbg !63
  %397 = sext i32 %388 to i64, !dbg !63
  %398 = getelementptr i16, ptr addrspace(1) %0, i64 %397, !dbg !63
  %399 = sext i32 %389 to i64, !dbg !63
  %400 = getelementptr i16, ptr addrspace(1) %0, i64 %399, !dbg !63
  %401 = sext i32 %390 to i64, !dbg !63
  %402 = getelementptr i16, ptr addrspace(1) %0, i64 %401, !dbg !63
  %403 = sext i32 %391 to i64, !dbg !63
  %404 = getelementptr i16, ptr addrspace(1) %0, i64 %403, !dbg !63
  %405 = sext i32 %392 to i64, !dbg !63
  %406 = getelementptr i16, ptr addrspace(1) %0, i64 %405, !dbg !63
  %407 = sext i32 %393 to i64, !dbg !63
  %408 = getelementptr i16, ptr addrspace(1) %0, i64 %407, !dbg !63
  %409 = sext i32 %394 to i64, !dbg !63
  %410 = getelementptr i16, ptr addrspace(1) %0, i64 %409, !dbg !63
  %411 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %396, i1 %176, i16 0, i1 %176) #1, !dbg !64
  %412 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %398, i1 %178, i16 0, i1 %178) #1, !dbg !64
  %413 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %400, i1 %180, i16 0, i1 %180) #1, !dbg !64
  %414 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %402, i1 %182, i16 0, i1 %182) #1, !dbg !64
  %415 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %404, i1 %184, i16 0, i1 %184) #1, !dbg !64
  %416 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %406, i1 %186, i16 0, i1 %186) #1, !dbg !64
  %417 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %408, i1 %188, i16 0, i1 %188) #1, !dbg !64
  %418 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %410, i1 %190, i16 0, i1 %190) #1, !dbg !64
  %419 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %411) #1, !dbg !65
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %412) #1, !dbg !65
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %413) #1, !dbg !65
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %414) #1, !dbg !65
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %415) #1, !dbg !65
  %424 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %416) #1, !dbg !65
  %425 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #1, !dbg !65
  %426 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #1, !dbg !65
  %427 = fsub float 0.000000e+00, %419, !dbg !66
  %428 = fsub float 0.000000e+00, %420, !dbg !66
  %429 = fsub float 0.000000e+00, %421, !dbg !66
  %430 = fsub float 0.000000e+00, %422, !dbg !66
  %431 = fsub float 0.000000e+00, %423, !dbg !66
  %432 = fsub float 0.000000e+00, %424, !dbg !66
  %433 = fsub float 0.000000e+00, %425, !dbg !66
  %434 = fsub float 0.000000e+00, %426, !dbg !66
  %435 = or i32 %45, 384, !dbg !67
  %436 = add nsw i32 %435, %46, !dbg !23
  %437 = add nsw i32 %435, %49, !dbg !23
  %438 = add nsw i32 %435, %52, !dbg !23
  %439 = add nsw i32 %435, %55, !dbg !23
  %440 = add nsw i32 %435, %58, !dbg !23
  %441 = add nsw i32 %435, %61, !dbg !23
  %442 = add nsw i32 %435, %64, !dbg !23
  %443 = add nsw i32 %435, %67, !dbg !23
  %444 = sext i32 %436 to i64, !dbg !68
  %445 = getelementptr i16, ptr addrspace(1) %0, i64 %444, !dbg !68
  %446 = sext i32 %437 to i64, !dbg !68
  %447 = getelementptr i16, ptr addrspace(1) %0, i64 %446, !dbg !68
  %448 = sext i32 %438 to i64, !dbg !68
  %449 = getelementptr i16, ptr addrspace(1) %0, i64 %448, !dbg !68
  %450 = sext i32 %439 to i64, !dbg !68
  %451 = getelementptr i16, ptr addrspace(1) %0, i64 %450, !dbg !68
  %452 = sext i32 %440 to i64, !dbg !68
  %453 = getelementptr i16, ptr addrspace(1) %0, i64 %452, !dbg !68
  %454 = sext i32 %441 to i64, !dbg !68
  %455 = getelementptr i16, ptr addrspace(1) %0, i64 %454, !dbg !68
  %456 = sext i32 %442 to i64, !dbg !68
  %457 = getelementptr i16, ptr addrspace(1) %0, i64 %456, !dbg !68
  %458 = sext i32 %443 to i64, !dbg !68
  %459 = getelementptr i16, ptr addrspace(1) %0, i64 %458, !dbg !68
  %460 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %445, i1 %208, i16 0, i1 %208) #1, !dbg !69
  %461 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %447, i1 %209, i16 0, i1 %209) #1, !dbg !69
  %462 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %449, i1 %210, i16 0, i1 %210) #1, !dbg !69
  %463 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %451, i1 %211, i16 0, i1 %211) #1, !dbg !69
  %464 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %453, i1 %212, i16 0, i1 %212) #1, !dbg !69
  %465 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %455, i1 %213, i16 0, i1 %213) #1, !dbg !69
  %466 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %457, i1 %214, i16 0, i1 %214) #1, !dbg !69
  %467 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %459, i1 %215, i16 0, i1 %215) #1, !dbg !69
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #1, !dbg !70
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %461) #1, !dbg !70
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #1, !dbg !70
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #1, !dbg !70
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #1, !dbg !70
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %465) #1, !dbg !70
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %466) #1, !dbg !70
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %467) #1, !dbg !70
  %476 = select i1 %208, float %468, float 0.000000e+00, !dbg !71
  %477 = select i1 %209, float %469, float 0.000000e+00, !dbg !71
  %478 = select i1 %210, float %470, float 0.000000e+00, !dbg !71
  %479 = select i1 %211, float %471, float 0.000000e+00, !dbg !71
  %480 = select i1 %212, float %472, float 0.000000e+00, !dbg !71
  %481 = select i1 %213, float %473, float 0.000000e+00, !dbg !71
  %482 = select i1 %214, float %474, float 0.000000e+00, !dbg !71
  %483 = select i1 %215, float %475, float 0.000000e+00, !dbg !71
  %484 = select i1 %176, float %427, float %476, !dbg !72
  %485 = select i1 %178, float %428, float %477, !dbg !72
  %486 = select i1 %180, float %429, float %478, !dbg !72
  %487 = select i1 %182, float %430, float %479, !dbg !72
  %488 = select i1 %184, float %431, float %480, !dbg !72
  %489 = select i1 %186, float %432, float %481, !dbg !72
  %490 = select i1 %188, float %433, float %482, !dbg !72
  %491 = select i1 %190, float %434, float %483, !dbg !72
  %492 = fmul float %484, %290, !dbg !73
  %493 = fmul float %485, %292, !dbg !73
  %494 = fmul float %486, %294, !dbg !73
  %495 = fmul float %487, %296, !dbg !73
  %496 = fmul float %488, %298, !dbg !73
  %497 = fmul float %489, %300, !dbg !73
  %498 = fmul float %490, %302, !dbg !73
  %499 = fmul float %491, %304, !dbg !73
  %500 = fadd float %378, %492, !dbg !74
  %501 = fadd float %379, %493, !dbg !74
  %502 = fadd float %380, %494, !dbg !74
  %503 = fadd float %381, %495, !dbg !74
  %504 = fadd float %382, %496, !dbg !74
  %505 = fadd float %383, %497, !dbg !74
  %506 = fadd float %384, %498, !dbg !74
  %507 = fadd float %385, %499, !dbg !74
  %508 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %347, i1 false, i16 0, i1 false) #1, !dbg !75
  %509 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %349, i1 false, i16 0, i1 false) #1, !dbg !75
  %510 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %351, i1 false, i16 0, i1 false) #1, !dbg !75
  %511 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %353, i1 false, i16 0, i1 false) #1, !dbg !75
  %512 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %355, i1 false, i16 0, i1 false) #1, !dbg !75
  %513 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %357, i1 false, i16 0, i1 false) #1, !dbg !75
  %514 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %359, i1 false, i16 0, i1 false) #1, !dbg !75
  %515 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %361, i1 false, i16 0, i1 false) #1, !dbg !75
  %516 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #1, !dbg !76
  %517 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #1, !dbg !76
  %518 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #1, !dbg !76
  %519 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %511) #1, !dbg !76
  %520 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %512) #1, !dbg !76
  %521 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %513) #1, !dbg !76
  %522 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %514) #1, !dbg !76
  %523 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %515) #1, !dbg !76
  %524 = sext i32 %12 to i64, !dbg !77
  %525 = getelementptr i16, ptr addrspace(1) %3, i64 %524, !dbg !77
  %526 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %313) #1, !dbg !78
  %527 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %314) #1, !dbg !78
  %528 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %315) #1, !dbg !78
  %529 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %316) #1, !dbg !78
  %530 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %317) #1, !dbg !78
  %531 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %318) #1, !dbg !78
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %319) #1, !dbg !78
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %320) #1, !dbg !78
  %534 = insertelement <2 x i16> undef, i16 %526, i64 0, !dbg !78
  %535 = insertelement <2 x i16> %534, i16 %527, i64 1, !dbg !78
  %536 = bitcast <2 x i16> %535 to i32, !dbg !78
  %537 = insertelement <2 x i16> undef, i16 %528, i64 0, !dbg !78
  %538 = insertelement <2 x i16> %537, i16 %529, i64 1, !dbg !78
  %539 = bitcast <2 x i16> %538 to i32, !dbg !78
  %540 = insertelement <2 x i16> undef, i16 %530, i64 0, !dbg !78
  %541 = insertelement <2 x i16> %540, i16 %531, i64 1, !dbg !78
  %542 = bitcast <2 x i16> %541 to i32, !dbg !78
  %543 = insertelement <2 x i16> undef, i16 %532, i64 0, !dbg !78
  %544 = insertelement <2 x i16> %543, i16 %533, i64 1, !dbg !78
  %545 = bitcast <2 x i16> %544 to i32, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %536, i32 %539, i32 %542, i32 %545, ptr addrspace(1) %525, i1 true) #1, !dbg !78
  %546 = getelementptr i16, ptr addrspace(1) %4, i64 %524, !dbg !79
  %547 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %500) #1, !dbg !80
  %548 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %501) #1, !dbg !80
  %549 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %502) #1, !dbg !80
  %550 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #1, !dbg !80
  %551 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %504) #1, !dbg !80
  %552 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #1, !dbg !80
  %553 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #1, !dbg !80
  %554 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %507) #1, !dbg !80
  %555 = insertelement <2 x i16> undef, i16 %547, i64 0, !dbg !80
  %556 = insertelement <2 x i16> %555, i16 %548, i64 1, !dbg !80
  %557 = bitcast <2 x i16> %556 to i32, !dbg !80
  %558 = insertelement <2 x i16> undef, i16 %549, i64 0, !dbg !80
  %559 = insertelement <2 x i16> %558, i16 %550, i64 1, !dbg !80
  %560 = bitcast <2 x i16> %559 to i32, !dbg !80
  %561 = insertelement <2 x i16> undef, i16 %551, i64 0, !dbg !80
  %562 = insertelement <2 x i16> %561, i16 %552, i64 1, !dbg !80
  %563 = bitcast <2 x i16> %562 to i32, !dbg !80
  %564 = insertelement <2 x i16> undef, i16 %553, i64 0, !dbg !80
  %565 = insertelement <2 x i16> %564, i16 %554, i64 1, !dbg !80
  %566 = bitcast <2 x i16> %565 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %557, i32 %560, i32 %563, i32 %566, ptr addrspace(1) %546, i1 true) #1, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cgidkypykgqwjcodnahydbnjisgh67vwnp2s7b7iuis4q4fe5w2d.py", directory: "/tmp/torchinductor_zeus/gi")
!3 = !{ptr @triton__0d1d2d3d4d5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de", linkageName: "triton__0d1d2d3d4d5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 18, scope: !5)
!13 = !DILocation(line: 24, column: 20, scope: !5)
!14 = !DILocation(line: 24, column: 27, scope: !5)
!15 = !DILocation(line: 25, column: 20, scope: !5)
!16 = !DILocation(line: 26, column: 18, scope: !5)
!17 = !DILocation(line: 33, column: 46, scope: !5)
!18 = !DILocation(line: 33, column: 41, scope: !5)
!19 = !DILocation(line: 33, column: 65, scope: !5)
!20 = !DILocation(line: 33, column: 59, scope: !5)
!21 = !DILocation(line: 33, column: 77, scope: !5)
!22 = !DILocation(line: 33, column: 36, scope: !5)
!23 = !DILocation(line: 69, column: 62, scope: !5)
!24 = !DILocation(line: 33, column: 53, scope: !5)
!25 = !DILocation(line: 33, column: 72, scope: !5)
!26 = !DILocation(line: 33, column: 30, scope: !5)
!27 = !DILocation(line: 33, column: 83, scope: !5)
!28 = !DILocation(line: 33, column: 103, scope: !5)
!29 = !DILocation(line: 35, column: 30, scope: !5)
!30 = !DILocation(line: 35, column: 35, scope: !5)
!31 = !DILocation(line: 36, column: 18, scope: !5)
!32 = !DILocation(line: 38, column: 19, scope: !5)
!33 = !DILocation(line: 40, column: 43, scope: !5)
!34 = !DILocation(line: 40, column: 60, scope: !5)
!35 = !DILocation(line: 40, column: 79, scope: !5)
!36 = !DILocation(line: 40, column: 31, scope: !5)
!37 = !DILocation(line: 49, column: 35, scope: !5)
!38 = !DILocation(line: 40, column: 90, scope: !5)
!39 = !DILocation(line: 40, column: 111, scope: !5)
!40 = !DILocation(line: 41, column: 13, scope: !5)
!41 = !DILocation(line: 44, column: 20, scope: !5)
!42 = !DILocation(line: 46, column: 46, scope: !5)
!43 = !DILocation(line: 46, column: 63, scope: !5)
!44 = !DILocation(line: 46, column: 82, scope: !5)
!45 = !DILocation(line: 46, column: 31, scope: !5)
!46 = !DILocation(line: 46, column: 93, scope: !5)
!47 = !DILocation(line: 46, column: 114, scope: !5)
!48 = !DILocation(line: 48, column: 35, scope: !5)
!49 = !DILocation(line: 51, column: 31, scope: !5)
!50 = !DILocation(line: 51, column: 36, scope: !5)
!51 = !DILocation(line: 52, column: 20, scope: !5)
!52 = !DILocation(line: 53, column: 19, scope: !5)
!53 = !DILocation(line: 58, column: 84, scope: !5)
!54 = !DILocation(line: 58, column: 105, scope: !5)
!55 = !DILocation(line: 62, column: 43, scope: !5)
!56 = !DILocation(line: 62, column: 62, scope: !5)
!57 = !DILocation(line: 62, column: 31, scope: !5)
!58 = !DILocation(line: 62, column: 73, scope: !5)
!59 = !DILocation(line: 62, column: 93, scope: !5)
!60 = !DILocation(line: 64, column: 20, scope: !5)
!61 = !DILocation(line: 65, column: 43, scope: !5)
!62 = !DILocation(line: 65, column: 62, scope: !5)
!63 = !DILocation(line: 65, column: 31, scope: !5)
!64 = !DILocation(line: 65, column: 73, scope: !5)
!65 = !DILocation(line: 65, column: 94, scope: !5)
!66 = !DILocation(line: 66, column: 13, scope: !5)
!67 = !DILocation(line: 69, column: 43, scope: !5)
!68 = !DILocation(line: 69, column: 31, scope: !5)
!69 = !DILocation(line: 69, column: 73, scope: !5)
!70 = !DILocation(line: 69, column: 94, scope: !5)
!71 = !DILocation(line: 71, column: 35, scope: !5)
!72 = !DILocation(line: 72, column: 35, scope: !5)
!73 = !DILocation(line: 74, column: 20, scope: !5)
!74 = !DILocation(line: 75, column: 20, scope: !5)
!75 = !DILocation(line: 79, column: 73, scope: !5)
!76 = !DILocation(line: 79, column: 94, scope: !5)
!77 = !DILocation(line: 83, column: 25, scope: !5)
!78 = !DILocation(line: 83, column: 37, scope: !5)
!79 = !DILocation(line: 84, column: 25, scope: !5)
!80 = !DILocation(line: 84, column: 37, scope: !5)
!81 = !DILocation(line: 84, column: 4, scope: !5)
