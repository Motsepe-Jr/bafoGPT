; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d10de11de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !5 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %14 = lshr i32 %13, 5, !dbg !8
  %urem = shl i32 %13, 2, !dbg !8
  %15 = and i32 %urem, 1020, !dbg !8
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %17 = icmp slt i32 %16, 512, !dbg !10
  %18 = sext i32 %16 to i64, !dbg !11
  %19 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !11
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %17) #3, !dbg !12
  %21 = bitcast i32 %20 to float, !dbg !12
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %17) #3, !dbg !12
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %17) #3, !dbg !12
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %17) #3, !dbg !12
  %25 = mul i32 %16, 2304, !dbg !13
  %26 = insertelement <4 x float> poison, float %21, i64 0, !dbg !14
  %27 = shufflevector <4 x float> %26, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !14
  br label %28, !dbg !15

28:                                               ; preds = %12, %28
  %29 = phi i32 [ 0, %12 ], [ %131, %28 ]
  %30 = phi <4 x float> [ zeroinitializer, %12 ], [ %130, %28 ]
  %31 = or i32 %29, %15, !dbg !16
  %32 = icmp ult i32 %31, 2304, !dbg !17
  %33 = add i32 %31, %25, !dbg !18
  %34 = sext i32 %33 to i64, !dbg !19
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !19
  %36 = and i1 %17, %32, !dbg !20
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !21
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !21
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !21
  %40 = trunc i32 %38 to i16, !dbg !21
  %extelt.offset10 = lshr i32 %38, 16, !dbg !21
  %41 = trunc i32 %extelt.offset10 to i16, !dbg !21
  %42 = trunc i32 %39 to i16, !dbg !21
  %extelt.offset11 = lshr i32 %39, 16, !dbg !21
  %43 = trunc i32 %extelt.offset11 to i16, !dbg !21
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !22
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #3, !dbg !22
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #3, !dbg !22
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #3, !dbg !22
  %48 = getelementptr i16, ptr addrspace(1) %2, i64 %34, !dbg !23
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !24
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !24
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !24
  %52 = trunc i32 %50 to i16, !dbg !24
  %extelt.offset12 = lshr i32 %50, 16, !dbg !24
  %53 = trunc i32 %extelt.offset12 to i16, !dbg !24
  %54 = trunc i32 %51 to i16, !dbg !24
  %extelt.offset13 = lshr i32 %51, 16, !dbg !24
  %55 = trunc i32 %extelt.offset13 to i16, !dbg !24
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #3, !dbg !25
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #3, !dbg !25
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #3, !dbg !25
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #3, !dbg !25
  %60 = zext nneg i32 %31 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #3, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !27
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !27
  %67 = getelementptr i16, ptr addrspace(1) %4, i64 %34, !dbg !28
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !29
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !29
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !29
  %71 = trunc i32 %69 to i16, !dbg !29
  %extelt.offset14 = lshr i32 %69, 16, !dbg !29
  %72 = trunc i32 %extelt.offset14 to i16, !dbg !29
  %73 = trunc i32 %70 to i16, !dbg !29
  %extelt.offset15 = lshr i32 %70, 16, !dbg !29
  %74 = trunc i32 %extelt.offset15 to i16, !dbg !29
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #3, !dbg !30
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #3, !dbg !30
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #3, !dbg !30
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #3, !dbg !30
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %60, !dbg !31
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #3, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !32
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !32
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !32
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !33
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !34
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !34
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !34
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !34
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !34
  %91 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !27
  %92 = insertelement <4 x i32> %91, i32 %64, i64 1, !dbg !27
  %93 = insertelement <4 x i32> %92, i32 %65, i64 2, !dbg !27
  %94 = insertelement <4 x i32> %93, i32 %66, i64 3, !dbg !27
  %95 = bitcast <4 x i32> %94 to <4 x float>, !dbg !27
  %96 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !32
  %97 = insertelement <4 x i32> %96, i32 %82, i64 1, !dbg !32
  %98 = insertelement <4 x i32> %97, i32 %83, i64 2, !dbg !32
  %99 = insertelement <4 x i32> %98, i32 %84, i64 3, !dbg !32
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !32
  %101 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !34
  %102 = insertelement <4 x i32> %101, i32 %88, i64 1, !dbg !34
  %103 = insertelement <4 x i32> %102, i32 %89, i64 2, !dbg !34
  %104 = insertelement <4 x i32> %103, i32 %90, i64 3, !dbg !34
  %105 = bitcast <4 x i32> %104 to <4 x float>, !dbg !34
  %106 = insertelement <4 x float> poison, float %44, i64 0, !dbg !35
  %107 = insertelement <4 x float> %106, float %45, i64 1, !dbg !35
  %108 = insertelement <4 x float> %107, float %46, i64 2, !dbg !35
  %109 = insertelement <4 x float> %108, float %47, i64 3, !dbg !35
  %110 = insertelement <4 x float> poison, float %56, i64 0, !dbg !35
  %111 = insertelement <4 x float> %110, float %57, i64 1, !dbg !35
  %112 = insertelement <4 x float> %111, float %58, i64 2, !dbg !35
  %113 = insertelement <4 x float> %112, float %59, i64 3, !dbg !35
  %114 = fadd <4 x float> %109, %113, !dbg !35
  %115 = fadd <4 x float> %95, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !36
  %116 = fmul <4 x float> %114, %115, !dbg !37
  %117 = insertelement <4 x float> poison, float %75, i64 0, !dbg !14
  %118 = insertelement <4 x float> %117, float %76, i64 1, !dbg !14
  %119 = insertelement <4 x float> %118, float %77, i64 2, !dbg !14
  %120 = insertelement <4 x float> %119, float %78, i64 3, !dbg !14
  %121 = fmul <4 x float> %120, %27, !dbg !14
  %122 = fadd <4 x float> %100, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !38
  %123 = fmul <4 x float> %121, %122, !dbg !39
  %124 = fmul <4 x float> %105, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !40
  %125 = fadd <4 x float> %123, %124, !dbg !41
  %126 = fmul <4 x float> %116, %125, !dbg !42
  %127 = insertelement <4 x i1> poison, i1 %36, i64 0, !dbg !43
  %128 = shufflevector <4 x i1> %127, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !43
  %129 = select <4 x i1> %128, <4 x float> %126, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !43
  %130 = fadd <4 x float> %30, %129, !dbg !43
  %131 = add nuw nsw i32 %29, 1024, !dbg !15
  %132 = icmp ult i32 %29, 1280, !dbg !15
  br i1 %132, label %28, label %133, !dbg !15

133:                                              ; preds = %28
  %134 = and i32 %13, 31, !dbg !8
  %135 = and i32 %14, 7, !dbg !8
  %136 = bitcast i32 %23 to float, !dbg !12
  %shift = shufflevector <4 x float> %130, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !44
  %137 = fadd <4 x float> %130, %shift, !dbg !44
  %shift38 = shufflevector <4 x float> %130, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !44
  %138 = fadd <4 x float> %shift38, %137, !dbg !44
  %shift39 = shufflevector <4 x float> %130, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !44
  %139 = fadd <4 x float> %shift39, %138, !dbg !44
  %140 = extractelement <4 x float> %139, i64 0, !dbg !44
  %141 = bitcast float %140 to i32, !dbg !50
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !50
  %143 = bitcast i32 %142 to float, !dbg !50
  %144 = fadd float %140, %143, !dbg !44
  %145 = bitcast float %144 to i32, !dbg !50
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 8, i32 31), !dbg !50
  %147 = bitcast i32 %146 to float, !dbg !50
  %148 = fadd float %144, %147, !dbg !44
  %149 = bitcast float %148 to i32, !dbg !50
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 4, i32 31), !dbg !50
  %151 = bitcast i32 %150 to float, !dbg !50
  %152 = fadd float %148, %151, !dbg !44
  %153 = bitcast float %152 to i32, !dbg !50
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 2, i32 31), !dbg !50
  %155 = bitcast i32 %154 to float, !dbg !50
  %156 = fadd float %152, %155, !dbg !44
  %157 = bitcast float %156 to i32, !dbg !50
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 1, i32 31), !dbg !50
  %159 = bitcast i32 %158 to float, !dbg !50
  %160 = fadd float %156, %159, !dbg !44
  %161 = icmp eq i32 %134, 0, !dbg !50
  %162 = zext nneg i32 %135 to i64, !dbg !50
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i64 %162, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, float %160, i1 %161) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %164 = icmp slt i32 %13, 8, !dbg !50
  %165 = sext i32 %13 to i64, !dbg !50
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i64 %165, !dbg !50
  %167 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %166, i1 %164) #3, !dbg !50
  %168 = bitcast float %167 to i32, !dbg !50
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 4, i32 31), !dbg !50
  %170 = bitcast i32 %169 to float, !dbg !50
  %171 = fadd float %167, %170, !dbg !44
  %172 = bitcast float %171 to i32, !dbg !50
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 2, i32 31), !dbg !50
  %174 = bitcast i32 %173 to float, !dbg !50
  %175 = fadd float %171, %174, !dbg !44
  %176 = bitcast float %175 to i32, !dbg !50
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !50
  %178 = bitcast i32 %177 to float, !dbg !50
  %179 = fadd float %175, %178, !dbg !44
  %180 = and i32 %13, 7, !dbg !50
  %181 = icmp eq i32 %180, 0, !dbg !50
  %182 = and i1 %164, %181, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, float %179, i1 %182) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %183 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !50
  %184 = getelementptr float, ptr addrspace(1) %8, i64 %18, !dbg !52
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %17) #3, !dbg !53
  %186 = bitcast i32 %185 to float, !dbg !53
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %17) #3, !dbg !53
  %188 = bitcast i32 %187 to float, !dbg !53
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %17) #3, !dbg !53
  %190 = bitcast i32 %189 to float, !dbg !53
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %17) #3, !dbg !53
  %192 = bitcast i32 %191 to float, !dbg !53
  %193 = fmul float %183, -5.000000e-01, !dbg !54
  %194 = fmul float %186, %186, !dbg !55
  %195 = fmul float %188, %188, !dbg !55
  %196 = fmul float %190, %190, !dbg !55
  %197 = fmul float %192, %192, !dbg !55
  %198 = fmul float %194, %186, !dbg !56
  %199 = fmul float %195, %188, !dbg !56
  %200 = fmul float %196, %190, !dbg !56
  %201 = fmul float %197, %192, !dbg !56
  %202 = fmul float %193, %198, !dbg !57
  %203 = fmul float %193, %199, !dbg !57
  %204 = fmul float %193, %200, !dbg !57
  %205 = fmul float %193, %201, !dbg !57
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float 2.304000e+03) #3, !dbg !58
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float 2.304000e+03) #3, !dbg !58
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float 2.304000e+03) #3, !dbg !58
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float 2.304000e+03) #3, !dbg !58
  %210 = insertelement <4 x float> poison, float %206, i64 0, !dbg !59
  %211 = shufflevector <4 x float> %210, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !59
  %212 = insertelement <4 x float> poison, float %186, i64 0, !dbg !60
  %213 = shufflevector <4 x float> %212, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !60
  br label %214, !dbg !61

214:                                              ; preds = %133, %214
  %215 = phi i32 [ 0, %133 ], [ %338, %214 ]
  %216 = phi <4 x float> [ zeroinitializer, %133 ], [ %333, %214 ]
  %217 = or i32 %215, %15, !dbg !62
  %218 = icmp ult i32 %217, 2304, !dbg !63
  %219 = add i32 %217, %25, !dbg !64
  %220 = sext i32 %219 to i64, !dbg !65
  %221 = getelementptr i16, ptr addrspace(1) %4, i64 %220, !dbg !65
  %222 = and i1 %17, %218, !dbg !66
  %223 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %221, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #3, !dbg !67
  %224 = extractvalue { i32, i32 } %223, 0, !dbg !67
  %225 = extractvalue { i32, i32 } %223, 1, !dbg !67
  %226 = trunc i32 %224 to i16, !dbg !67
  %extelt.offset4 = lshr i32 %224, 16, !dbg !67
  %227 = trunc i32 %extelt.offset4 to i16, !dbg !67
  %228 = trunc i32 %225 to i16, !dbg !67
  %extelt.offset5 = lshr i32 %225, 16, !dbg !67
  %229 = trunc i32 %extelt.offset5 to i16, !dbg !67
  %230 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #3, !dbg !68
  %231 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %227) #3, !dbg !68
  %232 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #3, !dbg !68
  %233 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %229) #3, !dbg !68
  %234 = zext nneg i32 %217 to i64, !dbg !69
  %235 = getelementptr float, ptr addrspace(1) %6, i64 %234, !dbg !69
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %235, i1 %218, i32 0, i1 %218, i32 0, i1 %218, i32 0, i1 %218, i32 0, i1 %218) #3, !dbg !70
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !70
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !70
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !70
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !70
  %241 = getelementptr float, ptr addrspace(1) %7, i64 %220, !dbg !71
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %241, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #3, !dbg !72
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !72
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !72
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !72
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !72
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !73
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %247, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #3, !dbg !74
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !74
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !74
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !74
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !74
  %253 = getelementptr i16, ptr addrspace(1) %1, i64 %220, !dbg !75
  %254 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %253, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #3, !dbg !76
  %255 = extractvalue { i32, i32 } %254, 0, !dbg !76
  %256 = extractvalue { i32, i32 } %254, 1, !dbg !76
  %257 = trunc i32 %255 to i16, !dbg !76
  %extelt.offset6 = lshr i32 %255, 16, !dbg !76
  %258 = trunc i32 %extelt.offset6 to i16, !dbg !76
  %259 = trunc i32 %256 to i16, !dbg !76
  %extelt.offset7 = lshr i32 %256, 16, !dbg !76
  %260 = trunc i32 %extelt.offset7 to i16, !dbg !76
  %261 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %257) #3, !dbg !77
  %262 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %258) #3, !dbg !77
  %263 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %259) #3, !dbg !77
  %264 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %260) #3, !dbg !77
  %265 = getelementptr i16, ptr addrspace(1) %2, i64 %220, !dbg !78
  %266 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %265, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #3, !dbg !79
  %267 = extractvalue { i32, i32 } %266, 0, !dbg !79
  %268 = extractvalue { i32, i32 } %266, 1, !dbg !79
  %269 = trunc i32 %267 to i16, !dbg !79
  %extelt.offset8 = lshr i32 %267, 16, !dbg !79
  %270 = trunc i32 %extelt.offset8 to i16, !dbg !79
  %271 = trunc i32 %268 to i16, !dbg !79
  %extelt.offset9 = lshr i32 %268, 16, !dbg !79
  %272 = trunc i32 %extelt.offset9 to i16, !dbg !79
  %273 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %269) #3, !dbg !80
  %274 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %270) #3, !dbg !80
  %275 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %271) #3, !dbg !80
  %276 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %272) #3, !dbg !80
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %234, !dbg !81
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %277, i1 %218, i32 0, i1 %218, i32 0, i1 %218, i32 0, i1 %218, i32 0, i1 %218) #3, !dbg !82
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !82
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !82
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !82
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !82
  %283 = insertelement <4 x i32> poison, i32 %237, i64 0, !dbg !70
  %284 = insertelement <4 x i32> %283, i32 %238, i64 1, !dbg !70
  %285 = insertelement <4 x i32> %284, i32 %239, i64 2, !dbg !70
  %286 = insertelement <4 x i32> %285, i32 %240, i64 3, !dbg !70
  %287 = bitcast <4 x i32> %286 to <4 x float>, !dbg !70
  %288 = insertelement <4 x i32> poison, i32 %243, i64 0, !dbg !72
  %289 = insertelement <4 x i32> %288, i32 %244, i64 1, !dbg !72
  %290 = insertelement <4 x i32> %289, i32 %245, i64 2, !dbg !72
  %291 = insertelement <4 x i32> %290, i32 %246, i64 3, !dbg !72
  %292 = bitcast <4 x i32> %291 to <4 x float>, !dbg !72
  %293 = insertelement <4 x i32> poison, i32 %249, i64 0, !dbg !74
  %294 = insertelement <4 x i32> %293, i32 %250, i64 1, !dbg !74
  %295 = insertelement <4 x i32> %294, i32 %251, i64 2, !dbg !74
  %296 = insertelement <4 x i32> %295, i32 %252, i64 3, !dbg !74
  %297 = bitcast <4 x i32> %296 to <4 x float>, !dbg !74
  %298 = insertelement <4 x i32> poison, i32 %279, i64 0, !dbg !82
  %299 = insertelement <4 x i32> %298, i32 %280, i64 1, !dbg !82
  %300 = insertelement <4 x i32> %299, i32 %281, i64 2, !dbg !82
  %301 = insertelement <4 x i32> %300, i32 %282, i64 3, !dbg !82
  %302 = bitcast <4 x i32> %301 to <4 x float>, !dbg !82
  %303 = insertelement <4 x float> poison, float %230, i64 0, !dbg !83
  %304 = insertelement <4 x float> %303, float %231, i64 1, !dbg !83
  %305 = insertelement <4 x float> %304, float %232, i64 2, !dbg !83
  %306 = insertelement <4 x float> %305, float %233, i64 3, !dbg !83
  %307 = fmul <4 x float> %306, %27, !dbg !83
  %308 = fadd <4 x float> %287, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !84
  %309 = fmul <4 x float> %307, %308, !dbg !85
  %310 = fmul <4 x float> %292, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !86
  %311 = fadd <4 x float> %309, %310, !dbg !87
  %312 = fmul <4 x float> %211, %311, !dbg !59
  %313 = insertelement <4 x float> poison, float %261, i64 0, !dbg !88
  %314 = insertelement <4 x float> %313, float %262, i64 1, !dbg !88
  %315 = insertelement <4 x float> %314, float %263, i64 2, !dbg !88
  %316 = insertelement <4 x float> %315, float %264, i64 3, !dbg !88
  %317 = insertelement <4 x float> poison, float %273, i64 0, !dbg !88
  %318 = insertelement <4 x float> %317, float %274, i64 1, !dbg !88
  %319 = insertelement <4 x float> %318, float %275, i64 2, !dbg !88
  %320 = insertelement <4 x float> %319, float %276, i64 3, !dbg !88
  %321 = fadd <4 x float> %316, %320, !dbg !88
  %322 = fadd <4 x float> %302, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !89
  %323 = fmul <4 x float> %321, %322, !dbg !90
  %324 = fmul <4 x float> %323, %213, !dbg !60
  %325 = fadd <4 x float> %324, %297, !dbg !91
  %326 = fadd <4 x float> %312, %325, !dbg !92
  %327 = fadd <4 x float> %312, %326, !dbg !93
  %328 = fmul <4 x float> %308, %327, !dbg !94
  %329 = fmul <4 x float> %306, %328, !dbg !95
  %330 = insertelement <4 x i1> poison, i1 %222, i64 0, !dbg !96
  %331 = shufflevector <4 x i1> %330, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !96
  %332 = select <4 x i1> %331, <4 x float> %329, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !96
  %333 = fadd <4 x float> %216, %332, !dbg !96
  %bc = bitcast <4 x float> %327 to <4 x i32>, !dbg !97
  %334 = extractelement <4 x i32> %bc, i64 0, !dbg !97
  %bc43 = bitcast <4 x float> %327 to <4 x i32>, !dbg !97
  %335 = extractelement <4 x i32> %bc43, i64 1, !dbg !97
  %bc44 = bitcast <4 x float> %327 to <4 x i32>, !dbg !97
  %336 = extractelement <4 x i32> %bc44, i64 2, !dbg !97
  %bc45 = bitcast <4 x float> %327 to <4 x i32>, !dbg !97
  %337 = extractelement <4 x i32> %bc45, i64 3, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %334, i32 %335, i32 %336, i32 %337, ptr addrspace(1) %247, i1 %222) #3, !dbg !97
  %338 = add nuw nsw i32 %215, 1024, !dbg !61
  %339 = icmp ult i32 %215, 1280, !dbg !61
  br i1 %339, label %214, label %340, !dbg !61

340:                                              ; preds = %214
  %341 = bitcast i32 %22 to float, !dbg !12
  %342 = bitcast i32 %24 to float, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %shift40 = shufflevector <4 x float> %333, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !100
  %343 = fadd <4 x float> %333, %shift40, !dbg !100
  %shift41 = shufflevector <4 x float> %333, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !100
  %344 = fadd <4 x float> %shift41, %343, !dbg !100
  %shift42 = shufflevector <4 x float> %333, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !100
  %345 = fadd <4 x float> %shift42, %344, !dbg !100
  %346 = extractelement <4 x float> %345, i64 0, !dbg !100
  %347 = bitcast float %346 to i32, !dbg !98
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 16, i32 31), !dbg !98
  %349 = bitcast i32 %348 to float, !dbg !98
  %350 = fadd float %346, %349, !dbg !100
  %351 = bitcast float %350 to i32, !dbg !98
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 8, i32 31), !dbg !98
  %353 = bitcast i32 %352 to float, !dbg !98
  %354 = fadd float %350, %353, !dbg !100
  %355 = bitcast float %354 to i32, !dbg !98
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 4, i32 31), !dbg !98
  %357 = bitcast i32 %356 to float, !dbg !98
  %358 = fadd float %354, %357, !dbg !100
  %359 = bitcast float %358 to i32, !dbg !98
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 2, i32 31), !dbg !98
  %361 = bitcast i32 %360 to float, !dbg !98
  %362 = fadd float %358, %361, !dbg !100
  %363 = bitcast float %362 to i32, !dbg !98
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 1, i32 31), !dbg !98
  %365 = bitcast i32 %364 to float, !dbg !98
  %366 = fadd float %362, %365, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, float %366, i1 %161) #3, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %367 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %166, i1 %164) #3, !dbg !98
  %368 = bitcast float %367 to i32, !dbg !98
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 4, i32 31), !dbg !98
  %370 = bitcast i32 %369 to float, !dbg !98
  %371 = fadd float %367, %370, !dbg !100
  %372 = bitcast float %371 to i32, !dbg !98
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 2, i32 31), !dbg !98
  %374 = bitcast i32 %373 to float, !dbg !98
  %375 = fadd float %371, %374, !dbg !100
  %376 = bitcast float %375 to i32, !dbg !98
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 1, i32 31), !dbg !98
  %378 = bitcast i32 %377 to float, !dbg !98
  %379 = fadd float %375, %378, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, float %379, i1 %182) #3, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %380 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !98
  %381 = fmul float %380, -5.000000e-01, !dbg !103
  %382 = fmul float %21, %21, !dbg !104
  %383 = fmul float %341, %341, !dbg !104
  %384 = fmul float %136, %136, !dbg !104
  %385 = fmul float %342, %342, !dbg !104
  %386 = fmul float %382, %21, !dbg !105
  %387 = fmul float %383, %341, !dbg !105
  %388 = fmul float %384, %136, !dbg !105
  %389 = fmul float %385, %342, !dbg !105
  %390 = fmul float %386, %381, !dbg !106
  %391 = fmul float %387, %381, !dbg !106
  %392 = fmul float %388, %381, !dbg !106
  %393 = fmul float %389, %381, !dbg !106
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %390, float 2.304000e+03) #3, !dbg !107
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %391, float 2.304000e+03) #3, !dbg !107
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %392, float 2.304000e+03) #3, !dbg !107
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float 2.304000e+03) #3, !dbg !107
  br label %398, !dbg !108

398:                                              ; preds = %340, %398
  %399 = phi i32 [ 0, %340 ], [ %473, %398 ]
  %400 = or i32 %399, %15, !dbg !109
  %401 = icmp ult i32 %400, 2304, !dbg !110
  %402 = add i32 %400, %25, !dbg !111
  %403 = sext i32 %402 to i64, !dbg !112
  %404 = getelementptr float, ptr addrspace(1) %0, i64 %403, !dbg !112
  %405 = and i1 %17, %401, !dbg !113
  %406 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %404, i1 %405, i32 0, i1 %405, i32 0, i1 %405, i32 0, i1 %405, i32 0, i1 %405) #3, !dbg !114
  %407 = extractvalue { i32, i32, i32, i32 } %406, 0, !dbg !114
  %408 = extractvalue { i32, i32, i32, i32 } %406, 1, !dbg !114
  %409 = extractvalue { i32, i32, i32, i32 } %406, 2, !dbg !114
  %410 = extractvalue { i32, i32, i32, i32 } %406, 3, !dbg !114
  %411 = bitcast i32 %407 to float, !dbg !114
  %412 = bitcast i32 %408 to float, !dbg !114
  %413 = bitcast i32 %409 to float, !dbg !114
  %414 = bitcast i32 %410 to float, !dbg !114
  %415 = zext nneg i32 %400 to i64, !dbg !115
  %416 = getelementptr float, ptr addrspace(1) %6, i64 %415, !dbg !115
  %417 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %416, i1 %401, i32 0, i1 %401, i32 0, i1 %401, i32 0, i1 %401, i32 0, i1 %401) #3, !dbg !116
  %418 = extractvalue { i32, i32, i32, i32 } %417, 0, !dbg !116
  %419 = extractvalue { i32, i32, i32, i32 } %417, 1, !dbg !116
  %420 = extractvalue { i32, i32, i32, i32 } %417, 2, !dbg !116
  %421 = extractvalue { i32, i32, i32, i32 } %417, 3, !dbg !116
  %422 = bitcast i32 %418 to float, !dbg !116
  %423 = bitcast i32 %419 to float, !dbg !116
  %424 = bitcast i32 %420 to float, !dbg !116
  %425 = bitcast i32 %421 to float, !dbg !116
  %426 = getelementptr i16, ptr addrspace(1) %4, i64 %403, !dbg !117
  %427 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %426, i1 %405, i32 0, i1 %405, i32 0, i1 %405) #3, !dbg !118
  %428 = extractvalue { i32, i32 } %427, 0, !dbg !118
  %429 = extractvalue { i32, i32 } %427, 1, !dbg !118
  %430 = trunc i32 %428 to i16, !dbg !118
  %extelt.offset = lshr i32 %428, 16, !dbg !118
  %431 = trunc i32 %extelt.offset to i16, !dbg !118
  %432 = trunc i32 %429 to i16, !dbg !118
  %extelt.offset3 = lshr i32 %429, 16, !dbg !118
  %433 = trunc i32 %extelt.offset3 to i16, !dbg !118
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #3, !dbg !119
  %435 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #3, !dbg !119
  %436 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #3, !dbg !119
  %437 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #3, !dbg !119
  %438 = fadd float %422, 1.000000e+00, !dbg !120
  %439 = fadd float %423, 1.000000e+00, !dbg !120
  %440 = fadd float %424, 1.000000e+00, !dbg !120
  %441 = fadd float %425, 1.000000e+00, !dbg !120
  %442 = fmul float %438, %411, !dbg !121
  %443 = fmul float %439, %412, !dbg !121
  %444 = fmul float %440, %413, !dbg !121
  %445 = fmul float %441, %414, !dbg !121
  %446 = fmul float %442, %21, !dbg !122
  %447 = fmul float %443, %21, !dbg !122
  %448 = fmul float %444, %21, !dbg !122
  %449 = fmul float %445, %21, !dbg !122
  %450 = fmul float %394, %434, !dbg !123
  %451 = fmul float %394, %435, !dbg !123
  %452 = fmul float %394, %436, !dbg !123
  %453 = fmul float %394, %437, !dbg !123
  %454 = fadd float %450, %446, !dbg !124
  %455 = fadd float %451, %447, !dbg !124
  %456 = fadd float %448, %452, !dbg !124
  %457 = fadd float %449, %453, !dbg !124
  %458 = fadd float %450, %454, !dbg !125
  %459 = fadd float %451, %455, !dbg !125
  %460 = fadd float %452, %456, !dbg !125
  %461 = fadd float %453, %457, !dbg !125
  %462 = getelementptr i16, ptr addrspace(1) %9, i64 %403, !dbg !126
  %463 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %458) #3, !dbg !127
  %464 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %459) #3, !dbg !127
  %465 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %460) #3, !dbg !127
  %466 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %461) #3, !dbg !127
  %467 = insertelement <2 x i16> undef, i16 %463, i64 0, !dbg !127
  %468 = insertelement <2 x i16> %467, i16 %464, i64 1, !dbg !127
  %469 = bitcast <2 x i16> %468 to i32, !dbg !127
  %470 = insertelement <2 x i16> undef, i16 %465, i64 0, !dbg !127
  %471 = insertelement <2 x i16> %470, i16 %466, i64 1, !dbg !127
  %472 = bitcast <2 x i16> %471 to i32, !dbg !127
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %469, i32 %472, ptr addrspace(1) %462, i1 %405) #3, !dbg !127
  %473 = add nuw nsw i32 %399, 1024, !dbg !108
  %474 = icmp ult i32 %399, 1280, !dbg !108
  br i1 %474, label %398, label %475, !dbg !108

475:                                              ; preds = %398
  ret void, !dbg !128
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cjiociwwh44srntjpqixcowor3lt33d4znl3eabkxorjlaaix62t.py", directory: "/tmp/torchinductor_zeus/ji")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 26, column: 31, scope: !5)
!12 = !DILocation(line: 26, column: 36, scope: !5)
!13 = !DILocation(line: 32, column: 45, scope: !5)
!14 = !DILocation(line: 45, column: 24, scope: !5)
!15 = !DILocation(line: 28, column: 36, scope: !5)
!16 = !DILocation(line: 29, column: 27, scope: !5)
!17 = !DILocation(line: 30, column: 25, scope: !5)
!18 = !DILocation(line: 32, column: 40, scope: !5)
!19 = !DILocation(line: 32, column: 34, scope: !5)
!20 = !DILocation(line: 32, column: 59, scope: !5)
!21 = !DILocation(line: 32, column: 51, scope: !5)
!22 = !DILocation(line: 32, column: 110, scope: !5)
!23 = !DILocation(line: 33, column: 34, scope: !5)
!24 = !DILocation(line: 33, column: 51, scope: !5)
!25 = !DILocation(line: 33, column: 110, scope: !5)
!26 = !DILocation(line: 34, column: 34, scope: !5)
!27 = !DILocation(line: 34, column: 39, scope: !5)
!28 = !DILocation(line: 35, column: 34, scope: !5)
!29 = !DILocation(line: 35, column: 51, scope: !5)
!30 = !DILocation(line: 35, column: 110, scope: !5)
!31 = !DILocation(line: 36, column: 35, scope: !5)
!32 = !DILocation(line: 36, column: 40, scope: !5)
!33 = !DILocation(line: 37, column: 35, scope: !5)
!34 = !DILocation(line: 37, column: 52, scope: !5)
!35 = !DILocation(line: 40, column: 22, scope: !5)
!36 = !DILocation(line: 42, column: 22, scope: !5)
!37 = !DILocation(line: 43, column: 22, scope: !5)
!38 = !DILocation(line: 46, column: 24, scope: !5)
!39 = !DILocation(line: 47, column: 24, scope: !5)
!40 = !DILocation(line: 51, column: 24, scope: !5)
!41 = !DILocation(line: 52, column: 24, scope: !5)
!42 = !DILocation(line: 53, column: 23, scope: !5)
!43 = !DILocation(line: 56, column: 48, scope: !5)
!44 = !DILocation(line: 233, column: 15, scope: !45, inlinedAt: !48)
!45 = distinct !DILexicalBlockFile(scope: !47, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!47 = distinct !DILexicalBlockFile(scope: !5, file: !46, discriminator: 0)
!48 = !DILocation(line: 243, column: 36, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 57, column: 27, scope: !45)
!50 = !DILocation(line: 243, column: 36, scope: !47, inlinedAt: !51)
!51 = !DILocation(line: 57, column: 27, scope: !47)
!52 = !DILocation(line: 58, column: 31, scope: !5)
!53 = !DILocation(line: 58, column: 36, scope: !5)
!54 = !DILocation(line: 72, column: 24, scope: !5)
!55 = !DILocation(line: 73, column: 24, scope: !5)
!56 = !DILocation(line: 74, column: 24, scope: !5)
!57 = !DILocation(line: 75, column: 24, scope: !5)
!58 = !DILocation(line: 77, column: 24, scope: !5)
!59 = !DILocation(line: 88, column: 24, scope: !5)
!60 = !DILocation(line: 94, column: 24, scope: !5)
!61 = !DILocation(line: 60, column: 36, scope: !5)
!62 = !DILocation(line: 61, column: 27, scope: !5)
!63 = !DILocation(line: 62, column: 25, scope: !5)
!64 = !DILocation(line: 64, column: 41, scope: !5)
!65 = !DILocation(line: 64, column: 35, scope: !5)
!66 = !DILocation(line: 64, column: 60, scope: !5)
!67 = !DILocation(line: 64, column: 52, scope: !5)
!68 = !DILocation(line: 64, column: 111, scope: !5)
!69 = !DILocation(line: 65, column: 35, scope: !5)
!70 = !DILocation(line: 65, column: 40, scope: !5)
!71 = !DILocation(line: 66, column: 35, scope: !5)
!72 = !DILocation(line: 66, column: 52, scope: !5)
!73 = !DILocation(line: 67, column: 39, scope: !5)
!74 = !DILocation(line: 67, column: 56, scope: !5)
!75 = !DILocation(line: 68, column: 35, scope: !5)
!76 = !DILocation(line: 68, column: 52, scope: !5)
!77 = !DILocation(line: 68, column: 112, scope: !5)
!78 = !DILocation(line: 69, column: 35, scope: !5)
!79 = !DILocation(line: 69, column: 52, scope: !5)
!80 = !DILocation(line: 69, column: 112, scope: !5)
!81 = !DILocation(line: 70, column: 35, scope: !5)
!82 = !DILocation(line: 70, column: 40, scope: !5)
!83 = !DILocation(line: 79, column: 24, scope: !5)
!84 = !DILocation(line: 81, column: 24, scope: !5)
!85 = !DILocation(line: 82, column: 24, scope: !5)
!86 = !DILocation(line: 86, column: 24, scope: !5)
!87 = !DILocation(line: 87, column: 24, scope: !5)
!88 = !DILocation(line: 91, column: 24, scope: !5)
!89 = !DILocation(line: 92, column: 24, scope: !5)
!90 = !DILocation(line: 93, column: 24, scope: !5)
!91 = !DILocation(line: 95, column: 24, scope: !5)
!92 = !DILocation(line: 96, column: 24, scope: !5)
!93 = !DILocation(line: 97, column: 24, scope: !5)
!94 = !DILocation(line: 98, column: 24, scope: !5)
!95 = !DILocation(line: 99, column: 24, scope: !5)
!96 = !DILocation(line: 102, column: 48, scope: !5)
!97 = !DILocation(line: 103, column: 56, scope: !5)
!98 = !DILocation(line: 243, column: 36, scope: !47, inlinedAt: !99)
!99 = !DILocation(line: 104, column: 27, scope: !47)
!100 = !DILocation(line: 233, column: 15, scope: !45, inlinedAt: !101)
!101 = !DILocation(line: 243, column: 36, scope: !45, inlinedAt: !102)
!102 = !DILocation(line: 104, column: 27, scope: !45)
!103 = !DILocation(line: 117, column: 24, scope: !5)
!104 = !DILocation(line: 118, column: 24, scope: !5)
!105 = !DILocation(line: 119, column: 24, scope: !5)
!106 = !DILocation(line: 120, column: 24, scope: !5)
!107 = !DILocation(line: 122, column: 24, scope: !5)
!108 = !DILocation(line: 105, column: 36, scope: !5)
!109 = !DILocation(line: 106, column: 27, scope: !5)
!110 = !DILocation(line: 107, column: 25, scope: !5)
!111 = !DILocation(line: 109, column: 45, scope: !5)
!112 = !DILocation(line: 109, column: 39, scope: !5)
!113 = !DILocation(line: 109, column: 64, scope: !5)
!114 = !DILocation(line: 109, column: 56, scope: !5)
!115 = !DILocation(line: 110, column: 35, scope: !5)
!116 = !DILocation(line: 110, column: 40, scope: !5)
!117 = !DILocation(line: 111, column: 35, scope: !5)
!118 = !DILocation(line: 111, column: 52, scope: !5)
!119 = !DILocation(line: 111, column: 112, scope: !5)
!120 = !DILocation(line: 113, column: 24, scope: !5)
!121 = !DILocation(line: 114, column: 24, scope: !5)
!122 = !DILocation(line: 115, column: 24, scope: !5)
!123 = !DILocation(line: 124, column: 24, scope: !5)
!124 = !DILocation(line: 125, column: 24, scope: !5)
!125 = !DILocation(line: 126, column: 24, scope: !5)
!126 = !DILocation(line: 128, column: 29, scope: !5)
!127 = !DILocation(line: 128, column: 53, scope: !5)
!128 = !DILocation(line: 105, column: 4, scope: !5)
