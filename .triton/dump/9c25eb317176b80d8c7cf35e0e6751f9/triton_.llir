; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d78de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = lshr i32 %10, 5, !dbg !10
  %urem = and i32 %10, 255, !dbg !10
  %12 = shl nuw nsw i32 %urem, 3, !dbg !10
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %14 = icmp slt i32 %13, 4, !dbg !12
  %15 = mul i32 %13, 2304, !dbg !13
  %16 = add i32 %12, %15, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr i16, ptr addrspace(1) %2, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #6, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %24 = trunc i32 %20 to i16, !dbg !16
  %extelt.offset10 = lshr i32 %20, 16, !dbg !16
  %25 = trunc i32 %extelt.offset10 to i16, !dbg !16
  %26 = trunc i32 %21 to i16, !dbg !16
  %extelt.offset11 = lshr i32 %21, 16, !dbg !16
  %27 = trunc i32 %extelt.offset11 to i16, !dbg !16
  %28 = trunc i32 %22 to i16, !dbg !16
  %extelt.offset12 = lshr i32 %22, 16, !dbg !16
  %29 = trunc i32 %extelt.offset12 to i16, !dbg !16
  %30 = trunc i32 %23 to i16, !dbg !16
  %extelt.offset13 = lshr i32 %23, 16, !dbg !16
  %31 = trunc i32 %extelt.offset13 to i16, !dbg !16
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !17
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !17
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !17
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !17
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !17
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !17
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !17
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !17
  %40 = fmul float %32, %32, !dbg !18
  %41 = fmul float %33, %33, !dbg !18
  %42 = fmul float %34, %34, !dbg !18
  %43 = fmul float %35, %35, !dbg !18
  %44 = fmul float %36, %36, !dbg !18
  %45 = fmul float %37, %37, !dbg !18
  %46 = fmul float %38, %38, !dbg !18
  %47 = fmul float %39, %39, !dbg !18
  %48 = select i1 %14, float %40, float 0.000000e+00, !dbg !19
  %49 = select i1 %14, float %41, float 0.000000e+00, !dbg !19
  %50 = select i1 %14, float %42, float 0.000000e+00, !dbg !19
  %51 = select i1 %14, float %43, float 0.000000e+00, !dbg !19
  %52 = select i1 %14, float %44, float 0.000000e+00, !dbg !19
  %53 = select i1 %14, float %45, float 0.000000e+00, !dbg !19
  %54 = select i1 %14, float %46, float 0.000000e+00, !dbg !19
  %55 = select i1 %14, float %47, float 0.000000e+00, !dbg !19
  %56 = or i32 %12, 2048, !dbg !20
  %57 = icmp ult i32 %56, 2304, !dbg !21
  %58 = add i32 %56, %15, !dbg !14
  %59 = sext i32 %58 to i64, !dbg !15
  %60 = getelementptr i16, ptr addrspace(1) %2, i64 %59, !dbg !15
  %61 = and i1 %14, %57, !dbg !22
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #6, !dbg !16
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !16
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !16
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !16
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !16
  %67 = trunc i32 %63 to i16, !dbg !16
  %extelt.offset10.1 = lshr i32 %63, 16, !dbg !16
  %68 = trunc i32 %extelt.offset10.1 to i16, !dbg !16
  %69 = trunc i32 %64 to i16, !dbg !16
  %extelt.offset11.1 = lshr i32 %64, 16, !dbg !16
  %70 = trunc i32 %extelt.offset11.1 to i16, !dbg !16
  %71 = trunc i32 %65 to i16, !dbg !16
  %extelt.offset12.1 = lshr i32 %65, 16, !dbg !16
  %72 = trunc i32 %extelt.offset12.1 to i16, !dbg !16
  %73 = trunc i32 %66 to i16, !dbg !16
  %extelt.offset13.1 = lshr i32 %66, 16, !dbg !16
  %74 = trunc i32 %extelt.offset13.1 to i16, !dbg !16
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #6, !dbg !17
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #6, !dbg !17
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #6, !dbg !17
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #6, !dbg !17
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #6, !dbg !17
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #6, !dbg !17
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #6, !dbg !17
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #6, !dbg !17
  %83 = fmul float %75, %75, !dbg !18
  %84 = fmul float %76, %76, !dbg !18
  %85 = fmul float %77, %77, !dbg !18
  %86 = fmul float %78, %78, !dbg !18
  %87 = fmul float %79, %79, !dbg !18
  %88 = fmul float %80, %80, !dbg !18
  %89 = fmul float %81, %81, !dbg !18
  %90 = fmul float %82, %82, !dbg !18
  %91 = select i1 %61, float %83, float -0.000000e+00, !dbg !19
  %92 = fadd float %48, %91, !dbg !19
  %93 = select i1 %61, float %84, float -0.000000e+00, !dbg !19
  %94 = fadd float %49, %93, !dbg !19
  %95 = select i1 %61, float %85, float -0.000000e+00, !dbg !19
  %96 = fadd float %50, %95, !dbg !19
  %97 = select i1 %61, float %86, float -0.000000e+00, !dbg !19
  %98 = fadd float %51, %97, !dbg !19
  %99 = select i1 %61, float %87, float -0.000000e+00, !dbg !19
  %100 = fadd float %52, %99, !dbg !19
  %101 = select i1 %61, float %88, float -0.000000e+00, !dbg !19
  %102 = fadd float %53, %101, !dbg !19
  %103 = select i1 %61, float %89, float -0.000000e+00, !dbg !19
  %104 = fadd float %54, %103, !dbg !19
  %105 = select i1 %61, float %90, float -0.000000e+00, !dbg !19
  %106 = fadd float %55, %105, !dbg !19
  %107 = and i32 %10, 31, !dbg !10
  %108 = and i32 %11, 7, !dbg !10
  %109 = or i32 %12, 4, !dbg !10
  %110 = fadd float %92, %94, !dbg !23
  %111 = fadd float %96, %110, !dbg !23
  %112 = fadd float %98, %111, !dbg !23
  %113 = fadd float %100, %112, !dbg !23
  %114 = fadd float %102, %113, !dbg !23
  %115 = fadd float %104, %114, !dbg !23
  %116 = fadd float %106, %115, !dbg !23
  %117 = bitcast float %116 to i32, !dbg !29
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = fadd float %116, %119, !dbg !23
  %121 = bitcast float %120 to i32, !dbg !29
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !29
  %123 = bitcast i32 %122 to float, !dbg !29
  %124 = fadd float %120, %123, !dbg !23
  %125 = bitcast float %124 to i32, !dbg !29
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !29
  %127 = bitcast i32 %126 to float, !dbg !29
  %128 = fadd float %124, %127, !dbg !23
  %129 = bitcast float %128 to i32, !dbg !29
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !29
  %131 = bitcast i32 %130 to float, !dbg !29
  %132 = fadd float %128, %131, !dbg !23
  %133 = bitcast float %132 to i32, !dbg !29
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !29
  %135 = bitcast i32 %134 to float, !dbg !29
  %136 = fadd float %132, %135, !dbg !23
  %137 = icmp eq i32 %107, 0, !dbg !29
  %138 = zext nneg i32 %108 to i64, !dbg !29
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i64 %138, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, float %136, i1 %137) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %140 = icmp slt i32 %10, 8, !dbg !29
  %141 = sext i32 %10 to i64, !dbg !29
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i64 %141, !dbg !29
  %143 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %142, i1 %140) #6, !dbg !29
  %144 = bitcast float %143 to i32, !dbg !29
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !29
  %146 = bitcast i32 %145 to float, !dbg !29
  %147 = fadd float %143, %146, !dbg !23
  %148 = bitcast float %147 to i32, !dbg !29
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !29
  %150 = bitcast i32 %149 to float, !dbg !29
  %151 = fadd float %147, %150, !dbg !23
  %152 = bitcast float %151 to i32, !dbg !29
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !29
  %154 = bitcast i32 %153 to float, !dbg !29
  %155 = fadd float %151, %154, !dbg !23
  %156 = and i32 %10, 7, !dbg !29
  %157 = icmp eq i32 %156, 0, !dbg !29
  %158 = and i1 %140, %157, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, float %155, i1 %158) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %159 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %160 = insertelement <1 x float> undef, float %159, i64 0, !dbg !31
  store <1 x float> %160, ptr addrspace(3) @global_smem, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %161 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !31
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float 2.304000e+03) #6, !dbg !32
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !32
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !32
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !32
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !32
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !32
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !32
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !32
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !32
  %171 = fadd float %162, 0x3EE4F8B580000000, !dbg !33
  %172 = fadd float %163, 0x3EE4F8B580000000, !dbg !33
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %.not.i = icmp eq i32 %173, 0, !dbg !31
  br i1 %.not.i, label %176, label %174, !dbg !31

174:                                              ; preds = %9
  %175 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %171), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

176:                                              ; preds = %9
  %177 = tail call float @llvm.nvvm.rsqrt.approx.f(float %171), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %174, %176
  %.0.i = phi float [ %175, %174 ], [ %177, %176 ], !dbg !31
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %.not.i14 = icmp eq i32 %178, 0, !dbg !31
  br i1 %.not.i14, label %181, label %179, !dbg !31

179:                                              ; preds = %__nv_rsqrtf.exit
  %180 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %172), !dbg !31
  br label %__nv_rsqrtf.exit16, !dbg !31

181:                                              ; preds = %__nv_rsqrtf.exit
  %182 = tail call float @llvm.nvvm.rsqrt.approx.f(float %172), !dbg !31
  br label %__nv_rsqrtf.exit16, !dbg !31

__nv_rsqrtf.exit16:                               ; preds = %179, %181
  %.0.i15 = phi float [ %180, %179 ], [ %182, %181 ], !dbg !31
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %190 = sext i32 %13 to i64, !dbg !35
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !35
  %192 = icmp eq i32 %urem, 0, !dbg !36
  %193 = bitcast float %.0.i to i32, !dbg !36
  %194 = and i1 %192, %14, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %191, i1 %194) #6, !dbg !36
  %195 = insertelement <8 x float> poison, float %.0.i15, i64 0, !dbg !37
  %196 = shufflevector <8 x float> %195, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %197 = add i32 %12, %15, !dbg !38
  %198 = add i32 %109, %15, !dbg !38
  %199 = sext i32 %197 to i64, !dbg !39
  %200 = getelementptr i16, ptr addrspace(1) %2, i64 %199, !dbg !39
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #6, !dbg !40
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !40
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !40
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !40
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !40
  %206 = trunc i32 %202 to i16, !dbg !40
  %extelt.offset6 = lshr i32 %202, 16, !dbg !40
  %207 = trunc i32 %extelt.offset6 to i16, !dbg !40
  %208 = trunc i32 %203 to i16, !dbg !40
  %extelt.offset7 = lshr i32 %203, 16, !dbg !40
  %209 = trunc i32 %extelt.offset7 to i16, !dbg !40
  %210 = trunc i32 %204 to i16, !dbg !40
  %extelt.offset8 = lshr i32 %204, 16, !dbg !40
  %211 = trunc i32 %extelt.offset8 to i16, !dbg !40
  %212 = trunc i32 %205 to i16, !dbg !40
  %extelt.offset9 = lshr i32 %205, 16, !dbg !40
  %213 = trunc i32 %extelt.offset9 to i16, !dbg !40
  %214 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #6, !dbg !41
  %215 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %207) #6, !dbg !41
  %216 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %208) #6, !dbg !41
  %217 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %209) #6, !dbg !41
  %218 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %210) #6, !dbg !41
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %211) #6, !dbg !41
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %212) #6, !dbg !41
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %213) #6, !dbg !41
  %222 = zext nneg i32 %12 to i64, !dbg !42
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %222, !dbg !42
  %224 = zext nneg i32 %109 to i64, !dbg !42
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %224, !dbg !42
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %223, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !43
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !43
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !43
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !43
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !43
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %225, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !43
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !43
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !43
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !43
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !43
  %236 = getelementptr float, ptr addrspace(1) %4, i64 %199, !dbg !44
  %237 = sext i32 %198 to i64, !dbg !44
  %238 = getelementptr float, ptr addrspace(1) %4, i64 %237, !dbg !44
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %236, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #6, !dbg !45
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !45
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !45
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !45
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !45
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %238, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #6, !dbg !45
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !45
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !45
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !45
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !45
  %249 = insertelement <8 x i32> poison, i32 %227, i64 0, !dbg !43
  %250 = insertelement <8 x i32> %249, i32 %228, i64 1, !dbg !43
  %251 = insertelement <8 x i32> %250, i32 %229, i64 2, !dbg !43
  %252 = insertelement <8 x i32> %251, i32 %230, i64 3, !dbg !43
  %253 = insertelement <8 x i32> %252, i32 %232, i64 4, !dbg !43
  %254 = insertelement <8 x i32> %253, i32 %233, i64 5, !dbg !43
  %255 = insertelement <8 x i32> %254, i32 %234, i64 6, !dbg !43
  %256 = insertelement <8 x i32> %255, i32 %235, i64 7, !dbg !43
  %257 = bitcast <8 x i32> %256 to <8 x float>, !dbg !43
  %258 = insertelement <8 x i32> poison, i32 %240, i64 0, !dbg !45
  %259 = insertelement <8 x i32> %258, i32 %241, i64 1, !dbg !45
  %260 = insertelement <8 x i32> %259, i32 %242, i64 2, !dbg !45
  %261 = insertelement <8 x i32> %260, i32 %243, i64 3, !dbg !45
  %262 = insertelement <8 x i32> %261, i32 %245, i64 4, !dbg !45
  %263 = insertelement <8 x i32> %262, i32 %246, i64 5, !dbg !45
  %264 = insertelement <8 x i32> %263, i32 %247, i64 6, !dbg !45
  %265 = insertelement <8 x i32> %264, i32 %248, i64 7, !dbg !45
  %266 = bitcast <8 x i32> %265 to <8 x float>, !dbg !45
  %267 = insertelement <8 x float> poison, float %214, i64 0, !dbg !37
  %268 = insertelement <8 x float> %267, float %215, i64 1, !dbg !37
  %269 = insertelement <8 x float> %268, float %216, i64 2, !dbg !37
  %270 = insertelement <8 x float> %269, float %217, i64 3, !dbg !37
  %271 = insertelement <8 x float> %270, float %218, i64 4, !dbg !37
  %272 = insertelement <8 x float> %271, float %219, i64 5, !dbg !37
  %273 = insertelement <8 x float> %272, float %220, i64 6, !dbg !37
  %274 = insertelement <8 x float> %273, float %221, i64 7, !dbg !37
  %275 = fmul <8 x float> %196, %274, !dbg !37
  %276 = fadd <8 x float> %257, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !46
  %277 = fmul <8 x float> %275, %276, !dbg !47
  %278 = fmul <8 x float> %266, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !48
  %279 = fadd <8 x float> %277, %278, !dbg !49
  %280 = fmul <8 x float> %279, %279, !dbg !50
  %281 = insertelement <8 x i1> poison, i1 %14, i64 0, !dbg !51
  %282 = shufflevector <8 x i1> %281, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !51
  %283 = select <8 x i1> %282, <8 x float> %280, <8 x float> zeroinitializer, !dbg !51
  %284 = or i32 %12, 2048, !dbg !52
  %285 = or i32 %12, 2052, !dbg !52
  %286 = icmp ult i32 %284, 2304, !dbg !53
  %287 = add i32 %284, %15, !dbg !38
  %288 = add i32 %285, %15, !dbg !38
  %289 = sext i32 %287 to i64, !dbg !39
  %290 = getelementptr i16, ptr addrspace(1) %2, i64 %289, !dbg !39
  %291 = and i1 %14, %286, !dbg !54
  %292 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %290, i1 %291, i32 0, i1 %291, i32 0, i1 %291, i32 0, i1 %291, i32 0, i1 %291) #6, !dbg !40
  %293 = extractvalue { i32, i32, i32, i32 } %292, 0, !dbg !40
  %294 = extractvalue { i32, i32, i32, i32 } %292, 1, !dbg !40
  %295 = extractvalue { i32, i32, i32, i32 } %292, 2, !dbg !40
  %296 = extractvalue { i32, i32, i32, i32 } %292, 3, !dbg !40
  %297 = trunc i32 %293 to i16, !dbg !40
  %extelt.offset6.1 = lshr i32 %293, 16, !dbg !40
  %298 = trunc i32 %extelt.offset6.1 to i16, !dbg !40
  %299 = trunc i32 %294 to i16, !dbg !40
  %extelt.offset7.1 = lshr i32 %294, 16, !dbg !40
  %300 = trunc i32 %extelt.offset7.1 to i16, !dbg !40
  %301 = trunc i32 %295 to i16, !dbg !40
  %extelt.offset8.1 = lshr i32 %295, 16, !dbg !40
  %302 = trunc i32 %extelt.offset8.1 to i16, !dbg !40
  %303 = trunc i32 %296 to i16, !dbg !40
  %extelt.offset9.1 = lshr i32 %296, 16, !dbg !40
  %304 = trunc i32 %extelt.offset9.1 to i16, !dbg !40
  %305 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %297) #6, !dbg !41
  %306 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %298) #6, !dbg !41
  %307 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %299) #6, !dbg !41
  %308 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %300) #6, !dbg !41
  %309 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %301) #6, !dbg !41
  %310 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %302) #6, !dbg !41
  %311 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %303) #6, !dbg !41
  %312 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %304) #6, !dbg !41
  %313 = zext nneg i32 %284 to i64, !dbg !42
  %314 = getelementptr float, ptr addrspace(1) %3, i64 %313, !dbg !42
  %315 = zext nneg i32 %285 to i64, !dbg !42
  %316 = getelementptr float, ptr addrspace(1) %3, i64 %315, !dbg !42
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %314, i1 %286, i32 0, i1 %286, i32 0, i1 %286, i32 0, i1 %286, i32 0, i1 %286) #6, !dbg !43
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !43
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !43
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !43
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !43
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %316, i1 %286, i32 0, i1 %286, i32 0, i1 %286, i32 0, i1 %286, i32 0, i1 %286) #6, !dbg !43
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !43
  %324 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !43
  %325 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !43
  %326 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !43
  %327 = getelementptr float, ptr addrspace(1) %4, i64 %289, !dbg !44
  %328 = sext i32 %288 to i64, !dbg !44
  %329 = getelementptr float, ptr addrspace(1) %4, i64 %328, !dbg !44
  %330 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %327, i1 %291, i32 0, i1 %291, i32 0, i1 %291, i32 0, i1 %291, i32 0, i1 %291) #6, !dbg !45
  %331 = extractvalue { i32, i32, i32, i32 } %330, 0, !dbg !45
  %332 = extractvalue { i32, i32, i32, i32 } %330, 1, !dbg !45
  %333 = extractvalue { i32, i32, i32, i32 } %330, 2, !dbg !45
  %334 = extractvalue { i32, i32, i32, i32 } %330, 3, !dbg !45
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %329, i1 %291, i32 0, i1 %291, i32 0, i1 %291, i32 0, i1 %291, i32 0, i1 %291) #6, !dbg !45
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !45
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !45
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !45
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !45
  %340 = insertelement <8 x i32> poison, i32 %318, i64 0, !dbg !43
  %341 = insertelement <8 x i32> %340, i32 %319, i64 1, !dbg !43
  %342 = insertelement <8 x i32> %341, i32 %320, i64 2, !dbg !43
  %343 = insertelement <8 x i32> %342, i32 %321, i64 3, !dbg !43
  %344 = insertelement <8 x i32> %343, i32 %323, i64 4, !dbg !43
  %345 = insertelement <8 x i32> %344, i32 %324, i64 5, !dbg !43
  %346 = insertelement <8 x i32> %345, i32 %325, i64 6, !dbg !43
  %347 = insertelement <8 x i32> %346, i32 %326, i64 7, !dbg !43
  %348 = bitcast <8 x i32> %347 to <8 x float>, !dbg !43
  %349 = insertelement <8 x i32> poison, i32 %331, i64 0, !dbg !45
  %350 = insertelement <8 x i32> %349, i32 %332, i64 1, !dbg !45
  %351 = insertelement <8 x i32> %350, i32 %333, i64 2, !dbg !45
  %352 = insertelement <8 x i32> %351, i32 %334, i64 3, !dbg !45
  %353 = insertelement <8 x i32> %352, i32 %336, i64 4, !dbg !45
  %354 = insertelement <8 x i32> %353, i32 %337, i64 5, !dbg !45
  %355 = insertelement <8 x i32> %354, i32 %338, i64 6, !dbg !45
  %356 = insertelement <8 x i32> %355, i32 %339, i64 7, !dbg !45
  %357 = bitcast <8 x i32> %356 to <8 x float>, !dbg !45
  %358 = insertelement <8 x float> poison, float %305, i64 0, !dbg !37
  %359 = insertelement <8 x float> %358, float %306, i64 1, !dbg !37
  %360 = insertelement <8 x float> %359, float %307, i64 2, !dbg !37
  %361 = insertelement <8 x float> %360, float %308, i64 3, !dbg !37
  %362 = insertelement <8 x float> %361, float %309, i64 4, !dbg !37
  %363 = insertelement <8 x float> %362, float %310, i64 5, !dbg !37
  %364 = insertelement <8 x float> %363, float %311, i64 6, !dbg !37
  %365 = insertelement <8 x float> %364, float %312, i64 7, !dbg !37
  %366 = fmul <8 x float> %196, %365, !dbg !37
  %367 = fadd <8 x float> %348, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !46
  %368 = fmul <8 x float> %366, %367, !dbg !47
  %369 = fmul <8 x float> %357, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !48
  %370 = fadd <8 x float> %368, %369, !dbg !49
  %371 = fmul <8 x float> %370, %370, !dbg !50
  %372 = insertelement <8 x i1> poison, i1 %291, i64 0, !dbg !51
  %373 = shufflevector <8 x i1> %372, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !51
  %374 = select <8 x i1> %373, <8 x float> %371, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !51
  %375 = fadd <8 x float> %283, %374, !dbg !51
  %shift = shufflevector <8 x float> %375, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %376 = fadd <8 x float> %375, %shift, !dbg !55
  %shift95 = shufflevector <8 x float> %375, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %377 = fadd <8 x float> %shift95, %376, !dbg !55
  %shift96 = shufflevector <8 x float> %375, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %378 = fadd <8 x float> %shift96, %377, !dbg !55
  %shift97 = shufflevector <8 x float> %375, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %379 = fadd <8 x float> %shift97, %378, !dbg !55
  %shift98 = shufflevector <8 x float> %375, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %380 = fadd <8 x float> %shift98, %379, !dbg !55
  %shift99 = shufflevector <8 x float> %375, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %381 = fadd <8 x float> %shift99, %380, !dbg !55
  %shift100 = shufflevector <8 x float> %375, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %382 = fadd <8 x float> %shift100, %381, !dbg !55
  %383 = extractelement <8 x float> %382, i64 0, !dbg !55
  %384 = bitcast float %383 to i32, !dbg !58
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 16, i32 31), !dbg !58
  %386 = bitcast i32 %385 to float, !dbg !58
  %387 = fadd float %383, %386, !dbg !55
  %388 = bitcast float %387 to i32, !dbg !58
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 8, i32 31), !dbg !58
  %390 = bitcast i32 %389 to float, !dbg !58
  %391 = fadd float %387, %390, !dbg !55
  %392 = bitcast float %391 to i32, !dbg !58
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 4, i32 31), !dbg !58
  %394 = bitcast i32 %393 to float, !dbg !58
  %395 = fadd float %391, %394, !dbg !55
  %396 = bitcast float %395 to i32, !dbg !58
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 2, i32 31), !dbg !58
  %398 = bitcast i32 %397 to float, !dbg !58
  %399 = fadd float %395, %398, !dbg !55
  %400 = bitcast float %399 to i32, !dbg !58
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 1, i32 31), !dbg !58
  %402 = bitcast i32 %401 to float, !dbg !58
  %403 = fadd float %399, %402, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, float %403, i1 %137) #6, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %404 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %142, i1 %140) #6, !dbg !58
  %405 = bitcast float %404 to i32, !dbg !58
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 4, i32 31), !dbg !58
  %407 = bitcast i32 %406 to float, !dbg !58
  %408 = fadd float %404, %407, !dbg !55
  %409 = bitcast float %408 to i32, !dbg !58
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %409, i32 2, i32 31), !dbg !58
  %411 = bitcast i32 %410 to float, !dbg !58
  %412 = fadd float %408, %411, !dbg !55
  %413 = bitcast float %412 to i32, !dbg !58
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 1, i32 31), !dbg !58
  %415 = bitcast i32 %414 to float, !dbg !58
  %416 = fadd float %412, %415, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, float %416, i1 %158) #6, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %417 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %418 = insertelement <1 x float> undef, float %417, i64 0, !dbg !60
  store <1 x float> %418, ptr addrspace(3) @global_smem, align 4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %419 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !60
  %420 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %419, float 2.304000e+03) #6, !dbg !61
  %421 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float 2.304000e+03) #6, !dbg !61
  %422 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float 2.304000e+03) #6, !dbg !61
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float 2.304000e+03) #6, !dbg !61
  %424 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float 2.304000e+03) #6, !dbg !61
  %425 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float 2.304000e+03) #6, !dbg !61
  %426 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float 2.304000e+03) #6, !dbg !61
  %427 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float 2.304000e+03) #6, !dbg !61
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float 2.304000e+03) #6, !dbg !61
  %429 = fadd float %420, 0x3EE4F8B580000000, !dbg !62
  %430 = fadd float %421, 0x3EE4F8B580000000, !dbg !62
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !60
  %.not.i38 = icmp eq i32 %431, 0, !dbg !60
  br i1 %.not.i38, label %434, label %432, !dbg !60

432:                                              ; preds = %__nv_rsqrtf.exit16
  %433 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %429), !dbg !60
  br label %__nv_rsqrtf.exit40, !dbg !60

434:                                              ; preds = %__nv_rsqrtf.exit16
  %435 = tail call float @llvm.nvvm.rsqrt.approx.f(float %429), !dbg !60
  br label %__nv_rsqrtf.exit40, !dbg !60

__nv_rsqrtf.exit40:                               ; preds = %432, %434
  %.0.i39 = phi float [ %433, %432 ], [ %435, %434 ], !dbg !60
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !60
  %.not.i41 = icmp eq i32 %436, 0, !dbg !60
  br i1 %.not.i41, label %439, label %437, !dbg !60

437:                                              ; preds = %__nv_rsqrtf.exit40
  %438 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %430), !dbg !60
  br label %__nv_rsqrtf.exit43, !dbg !60

439:                                              ; preds = %__nv_rsqrtf.exit40
  %440 = tail call float @llvm.nvvm.rsqrt.approx.f(float %430), !dbg !60
  br label %__nv_rsqrtf.exit43, !dbg !60

__nv_rsqrtf.exit43:                               ; preds = %437, %439
  %.0.i42 = phi float [ %438, %437 ], [ %440, %439 ], !dbg !60
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !60
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !60
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !60
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !60
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !60
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !60
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %448 = getelementptr float, ptr addrspace(1) %1, i64 %190, !dbg !64
  %449 = bitcast float %.0.i39 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %449, ptr addrspace(1) %448, i1 %194) #6, !dbg !65
  br label %450, !dbg !66

450:                                              ; preds = %__nv_rsqrtf.exit43, %450
  %451 = phi i1 [ true, %__nv_rsqrtf.exit43 ], [ false, %450 ]
  %452 = phi i32 [ 0, %__nv_rsqrtf.exit43 ], [ 2048, %450 ]
  %453 = or i32 %452, %12, !dbg !67
  %454 = or i32 %452, %109, !dbg !67
  %455 = icmp ult i32 %453, 2304, !dbg !68
  %456 = add i32 %453, %15, !dbg !69
  %457 = add i32 %454, %15, !dbg !69
  %458 = sext i32 %456 to i64, !dbg !70
  %459 = getelementptr i16, ptr addrspace(1) %2, i64 %458, !dbg !70
  %460 = and i1 %14, %455, !dbg !71
  %461 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %459, i1 %460, i32 0, i1 %460, i32 0, i1 %460, i32 0, i1 %460, i32 0, i1 %460) #6, !dbg !72
  %462 = extractvalue { i32, i32, i32, i32 } %461, 0, !dbg !72
  %463 = extractvalue { i32, i32, i32, i32 } %461, 1, !dbg !72
  %464 = extractvalue { i32, i32, i32, i32 } %461, 2, !dbg !72
  %465 = extractvalue { i32, i32, i32, i32 } %461, 3, !dbg !72
  %466 = trunc i32 %462 to i16, !dbg !72
  %extelt.offset = lshr i32 %462, 16, !dbg !72
  %467 = trunc i32 %extelt.offset to i16, !dbg !72
  %468 = trunc i32 %463 to i16, !dbg !72
  %extelt.offset3 = lshr i32 %463, 16, !dbg !72
  %469 = trunc i32 %extelt.offset3 to i16, !dbg !72
  %470 = trunc i32 %464 to i16, !dbg !72
  %extelt.offset4 = lshr i32 %464, 16, !dbg !72
  %471 = trunc i32 %extelt.offset4 to i16, !dbg !72
  %472 = trunc i32 %465 to i16, !dbg !72
  %extelt.offset5 = lshr i32 %465, 16, !dbg !72
  %473 = trunc i32 %extelt.offset5 to i16, !dbg !72
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %466) #6, !dbg !73
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %467) #6, !dbg !73
  %476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %468) #6, !dbg !73
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %469) #6, !dbg !73
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %470) #6, !dbg !73
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %471) #6, !dbg !73
  %480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %472) #6, !dbg !73
  %481 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %473) #6, !dbg !73
  %482 = zext nneg i32 %453 to i64, !dbg !74
  %483 = getelementptr float, ptr addrspace(1) %3, i64 %482, !dbg !74
  %484 = zext nneg i32 %454 to i64, !dbg !74
  %485 = getelementptr float, ptr addrspace(1) %3, i64 %484, !dbg !74
  %486 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %483, i1 %455, i32 0, i1 %455, i32 0, i1 %455, i32 0, i1 %455, i32 0, i1 %455) #6, !dbg !75
  %487 = extractvalue { i32, i32, i32, i32 } %486, 0, !dbg !75
  %488 = extractvalue { i32, i32, i32, i32 } %486, 1, !dbg !75
  %489 = extractvalue { i32, i32, i32, i32 } %486, 2, !dbg !75
  %490 = extractvalue { i32, i32, i32, i32 } %486, 3, !dbg !75
  %491 = bitcast i32 %487 to float, !dbg !75
  %492 = bitcast i32 %488 to float, !dbg !75
  %493 = bitcast i32 %489 to float, !dbg !75
  %494 = bitcast i32 %490 to float, !dbg !75
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %485, i1 %455, i32 0, i1 %455, i32 0, i1 %455, i32 0, i1 %455, i32 0, i1 %455) #6, !dbg !75
  %496 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !75
  %497 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !75
  %498 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !75
  %499 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !75
  %500 = bitcast i32 %496 to float, !dbg !75
  %501 = bitcast i32 %497 to float, !dbg !75
  %502 = bitcast i32 %498 to float, !dbg !75
  %503 = bitcast i32 %499 to float, !dbg !75
  %504 = getelementptr float, ptr addrspace(1) %4, i64 %458, !dbg !76
  %505 = sext i32 %457 to i64, !dbg !76
  %506 = getelementptr float, ptr addrspace(1) %4, i64 %505, !dbg !76
  %507 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %504, i1 %460, i32 0, i1 %460, i32 0, i1 %460, i32 0, i1 %460, i32 0, i1 %460) #6, !dbg !77
  %508 = extractvalue { i32, i32, i32, i32 } %507, 0, !dbg !77
  %509 = extractvalue { i32, i32, i32, i32 } %507, 1, !dbg !77
  %510 = extractvalue { i32, i32, i32, i32 } %507, 2, !dbg !77
  %511 = extractvalue { i32, i32, i32, i32 } %507, 3, !dbg !77
  %512 = bitcast i32 %508 to float, !dbg !77
  %513 = bitcast i32 %509 to float, !dbg !77
  %514 = bitcast i32 %510 to float, !dbg !77
  %515 = bitcast i32 %511 to float, !dbg !77
  %516 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %506, i1 %460, i32 0, i1 %460, i32 0, i1 %460, i32 0, i1 %460, i32 0, i1 %460) #6, !dbg !77
  %517 = extractvalue { i32, i32, i32, i32 } %516, 0, !dbg !77
  %518 = extractvalue { i32, i32, i32, i32 } %516, 1, !dbg !77
  %519 = extractvalue { i32, i32, i32, i32 } %516, 2, !dbg !77
  %520 = extractvalue { i32, i32, i32, i32 } %516, 3, !dbg !77
  %521 = bitcast i32 %517 to float, !dbg !77
  %522 = bitcast i32 %518 to float, !dbg !77
  %523 = bitcast i32 %519 to float, !dbg !77
  %524 = bitcast i32 %520 to float, !dbg !77
  %525 = getelementptr float, ptr addrspace(1) %5, i64 %482, !dbg !78
  %526 = getelementptr float, ptr addrspace(1) %5, i64 %484, !dbg !78
  %527 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %525, i1 %455, i32 0, i1 %455, i32 0, i1 %455, i32 0, i1 %455, i32 0, i1 %455) #6, !dbg !79
  %528 = extractvalue { i32, i32, i32, i32 } %527, 0, !dbg !79
  %529 = extractvalue { i32, i32, i32, i32 } %527, 1, !dbg !79
  %530 = extractvalue { i32, i32, i32, i32 } %527, 2, !dbg !79
  %531 = extractvalue { i32, i32, i32, i32 } %527, 3, !dbg !79
  %532 = bitcast i32 %528 to float, !dbg !79
  %533 = bitcast i32 %529 to float, !dbg !79
  %534 = bitcast i32 %530 to float, !dbg !79
  %535 = bitcast i32 %531 to float, !dbg !79
  %536 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %526, i1 %455, i32 0, i1 %455, i32 0, i1 %455, i32 0, i1 %455, i32 0, i1 %455) #6, !dbg !79
  %537 = extractvalue { i32, i32, i32, i32 } %536, 0, !dbg !79
  %538 = extractvalue { i32, i32, i32, i32 } %536, 1, !dbg !79
  %539 = extractvalue { i32, i32, i32, i32 } %536, 2, !dbg !79
  %540 = extractvalue { i32, i32, i32, i32 } %536, 3, !dbg !79
  %541 = bitcast i32 %537 to float, !dbg !79
  %542 = bitcast i32 %538 to float, !dbg !79
  %543 = bitcast i32 %539 to float, !dbg !79
  %544 = bitcast i32 %540 to float, !dbg !79
  %545 = fmul float %.0.i15, %474, !dbg !80
  %546 = fmul float %.0.i15, %475, !dbg !80
  %547 = fmul float %.0.i15, %476, !dbg !80
  %548 = fmul float %.0.i15, %477, !dbg !80
  %549 = fmul float %.0.i15, %478, !dbg !80
  %550 = fmul float %.0.i15, %479, !dbg !80
  %551 = fmul float %.0.i15, %480, !dbg !80
  %552 = fmul float %.0.i15, %481, !dbg !80
  %553 = fadd float %491, 1.000000e+00, !dbg !81
  %554 = fadd float %492, 1.000000e+00, !dbg !81
  %555 = fadd float %493, 1.000000e+00, !dbg !81
  %556 = fadd float %494, 1.000000e+00, !dbg !81
  %557 = fadd float %500, 1.000000e+00, !dbg !81
  %558 = fadd float %501, 1.000000e+00, !dbg !81
  %559 = fadd float %502, 1.000000e+00, !dbg !81
  %560 = fadd float %503, 1.000000e+00, !dbg !81
  %561 = fmul float %545, %553, !dbg !82
  %562 = fmul float %546, %554, !dbg !82
  %563 = fmul float %547, %555, !dbg !82
  %564 = fmul float %548, %556, !dbg !82
  %565 = fmul float %549, %557, !dbg !82
  %566 = fmul float %550, %558, !dbg !82
  %567 = fmul float %551, %559, !dbg !82
  %568 = fmul float %552, %560, !dbg !82
  %569 = fmul float %512, 4.800000e+01, !dbg !83
  %570 = fmul float %513, 4.800000e+01, !dbg !83
  %571 = fmul float %514, 4.800000e+01, !dbg !83
  %572 = fmul float %515, 4.800000e+01, !dbg !83
  %573 = fmul float %521, 4.800000e+01, !dbg !83
  %574 = fmul float %522, 4.800000e+01, !dbg !83
  %575 = fmul float %523, 4.800000e+01, !dbg !83
  %576 = fmul float %524, 4.800000e+01, !dbg !83
  %577 = fadd float %561, %569, !dbg !84
  %578 = fadd float %562, %570, !dbg !84
  %579 = fadd float %563, %571, !dbg !84
  %580 = fadd float %564, %572, !dbg !84
  %581 = fadd float %565, %573, !dbg !84
  %582 = fadd float %566, %574, !dbg !84
  %583 = fadd float %567, %575, !dbg !84
  %584 = fadd float %568, %576, !dbg !84
  %585 = fmul float %.0.i42, %577, !dbg !85
  %586 = fmul float %.0.i42, %578, !dbg !85
  %587 = fmul float %.0.i42, %579, !dbg !85
  %588 = fmul float %.0.i42, %580, !dbg !85
  %589 = fmul float %.0.i42, %581, !dbg !85
  %590 = fmul float %.0.i42, %582, !dbg !85
  %591 = fmul float %.0.i42, %583, !dbg !85
  %592 = fmul float %.0.i42, %584, !dbg !85
  %593 = fadd float %532, 1.000000e+00, !dbg !86
  %594 = fadd float %533, 1.000000e+00, !dbg !86
  %595 = fadd float %534, 1.000000e+00, !dbg !86
  %596 = fadd float %535, 1.000000e+00, !dbg !86
  %597 = fadd float %541, 1.000000e+00, !dbg !86
  %598 = fadd float %542, 1.000000e+00, !dbg !86
  %599 = fadd float %543, 1.000000e+00, !dbg !86
  %600 = fadd float %544, 1.000000e+00, !dbg !86
  %601 = fmul float %585, %593, !dbg !87
  %602 = fmul float %586, %594, !dbg !87
  %603 = fmul float %587, %595, !dbg !87
  %604 = fmul float %588, %596, !dbg !87
  %605 = fmul float %589, %597, !dbg !87
  %606 = fmul float %590, %598, !dbg !87
  %607 = fmul float %591, %599, !dbg !87
  %608 = fmul float %592, %600, !dbg !87
  %609 = getelementptr i16, ptr addrspace(1) %6, i64 %458, !dbg !88
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %601) #6, !dbg !89
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %602) #6, !dbg !89
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %603) #6, !dbg !89
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %604) #6, !dbg !89
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %605) #6, !dbg !89
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %606) #6, !dbg !89
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %607) #6, !dbg !89
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %608) #6, !dbg !89
  %618 = insertelement <2 x i16> undef, i16 %610, i64 0, !dbg !89
  %619 = insertelement <2 x i16> %618, i16 %611, i64 1, !dbg !89
  %620 = bitcast <2 x i16> %619 to i32, !dbg !89
  %621 = insertelement <2 x i16> undef, i16 %612, i64 0, !dbg !89
  %622 = insertelement <2 x i16> %621, i16 %613, i64 1, !dbg !89
  %623 = bitcast <2 x i16> %622 to i32, !dbg !89
  %624 = insertelement <2 x i16> undef, i16 %614, i64 0, !dbg !89
  %625 = insertelement <2 x i16> %624, i16 %615, i64 1, !dbg !89
  %626 = bitcast <2 x i16> %625 to i32, !dbg !89
  %627 = insertelement <2 x i16> undef, i16 %616, i64 0, !dbg !89
  %628 = insertelement <2 x i16> %627, i16 %617, i64 1, !dbg !89
  %629 = bitcast <2 x i16> %628 to i32, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %620, i32 %623, i32 %626, i32 %629, ptr addrspace(1) %609, i1 %460) #6, !dbg !89
  br i1 %451, label %450, label %630, !dbg !66

630:                                              ; preds = %450
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ck3fkparkhreqd3grw23iyppg3xxi4lkwv7ll5ejpvnag4vkysom.py", directory: "/tmp/torchinductor_zeus/k3")
!4 = !{ptr @triton__0d1d2d3d4d5d6d78de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d78de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d78de", linkageName: "triton__0d1d2d3d4d5d6d78de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 110, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 36, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 29, column: 25, scope: !7)
!22 = !DILocation(line: 31, column: 59, scope: !7)
!23 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 37, column: 25, scope: !26)
!31 = !DILocation(line: 42, column: 26, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 18, scope: !7)
!34 = !DILocation(line: 43, column: 4, scope: !7)
!35 = !DILocation(line: 44, column: 28, scope: !7)
!36 = !DILocation(line: 44, column: 40, scope: !7)
!37 = !DILocation(line: 54, column: 24, scope: !7)
!38 = !DILocation(line: 50, column: 41, scope: !7)
!39 = !DILocation(line: 50, column: 35, scope: !7)
!40 = !DILocation(line: 50, column: 52, scope: !7)
!41 = !DILocation(line: 50, column: 111, scope: !7)
!42 = !DILocation(line: 51, column: 35, scope: !7)
!43 = !DILocation(line: 51, column: 40, scope: !7)
!44 = !DILocation(line: 52, column: 35, scope: !7)
!45 = !DILocation(line: 52, column: 52, scope: !7)
!46 = !DILocation(line: 56, column: 24, scope: !7)
!47 = !DILocation(line: 57, column: 24, scope: !7)
!48 = !DILocation(line: 61, column: 24, scope: !7)
!49 = !DILocation(line: 62, column: 24, scope: !7)
!50 = !DILocation(line: 63, column: 24, scope: !7)
!51 = !DILocation(line: 66, column: 48, scope: !7)
!52 = !DILocation(line: 47, column: 27, scope: !7)
!53 = !DILocation(line: 48, column: 25, scope: !7)
!54 = !DILocation(line: 50, column: 60, scope: !7)
!55 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !56)
!56 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !57)
!57 = !DILocation(line: 67, column: 27, scope: !24)
!58 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !59)
!59 = !DILocation(line: 67, column: 27, scope: !26)
!60 = !DILocation(line: 72, column: 26, scope: !7)
!61 = !DILocation(line: 69, column: 20, scope: !7)
!62 = !DILocation(line: 71, column: 20, scope: !7)
!63 = !DILocation(line: 73, column: 4, scope: !7)
!64 = !DILocation(line: 74, column: 28, scope: !7)
!65 = !DILocation(line: 74, column: 40, scope: !7)
!66 = !DILocation(line: 75, column: 36, scope: !7)
!67 = !DILocation(line: 76, column: 27, scope: !7)
!68 = !DILocation(line: 77, column: 25, scope: !7)
!69 = !DILocation(line: 79, column: 41, scope: !7)
!70 = !DILocation(line: 79, column: 35, scope: !7)
!71 = !DILocation(line: 79, column: 60, scope: !7)
!72 = !DILocation(line: 79, column: 52, scope: !7)
!73 = !DILocation(line: 79, column: 112, scope: !7)
!74 = !DILocation(line: 80, column: 35, scope: !7)
!75 = !DILocation(line: 80, column: 40, scope: !7)
!76 = !DILocation(line: 81, column: 35, scope: !7)
!77 = !DILocation(line: 81, column: 52, scope: !7)
!78 = !DILocation(line: 82, column: 35, scope: !7)
!79 = !DILocation(line: 82, column: 40, scope: !7)
!80 = !DILocation(line: 84, column: 24, scope: !7)
!81 = !DILocation(line: 86, column: 24, scope: !7)
!82 = !DILocation(line: 87, column: 24, scope: !7)
!83 = !DILocation(line: 91, column: 24, scope: !7)
!84 = !DILocation(line: 92, column: 24, scope: !7)
!85 = !DILocation(line: 93, column: 24, scope: !7)
!86 = !DILocation(line: 94, column: 24, scope: !7)
!87 = !DILocation(line: 95, column: 24, scope: !7)
!88 = !DILocation(line: 97, column: 29, scope: !7)
!89 = !DILocation(line: 97, column: 53, scope: !7)
!90 = !DILocation(line: 75, column: 4, scope: !7)
