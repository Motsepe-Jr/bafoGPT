; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_1 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_1 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_1 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp13 < 288256"
@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 2, !dbg !10
  %9 = and i32 %8, 63, !dbg !10
  %10 = and i32 %7, 63, !dbg !10
  %11 = and i32 %7, 3, !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %13 = shl i32 %12, 6, !dbg !13
  %14 = or i32 %13, %9, !dbg !14
  %15 = or i32 %13, %10, !dbg !14
  %16 = sext i32 %14 to i64, !dbg !15
  %17 = getelementptr i64, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = sext i32 %15 to i64, !dbg !15
  %19 = getelementptr i64, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 true) #5, !dbg !16
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !16
  %22 = add i64 %20, 288256, !dbg !17
  %23 = add i64 %21, 288256, !dbg !17
  %24 = icmp slt i64 %20, 0, !dbg !18
  %25 = icmp slt i64 %21, 0, !dbg !18
  %26 = select i1 %24, i64 %22, i64 %20, !dbg !19
  %27 = select i1 %25, i64 %23, i64 %21, !dbg !19
  %28 = icmp ugt i64 %27, 288255, !dbg !20
  %29 = mul i64 %26, 2304, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29
  br i1 %28, label %.split.us, label %.split, !dbg !22

.split.us:                                        ; preds = %6, %.split.us
  %31 = phi float [ %40, %.split.us ], [ 0.000000e+00, %6 ]
  %32 = phi i32 [ %41, %.split.us ], [ 0, %6 ]
  %33 = or i32 %32, %11, !dbg !23
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !22
  %34 = zext nneg i32 %33 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %30, i64 %34, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true) #5, !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = fmul float %37, 4.800000e+01, !dbg !27
  %39 = fmul float %38, %38, !dbg !28
  %40 = fadd float %31, %39, !dbg !29
  %41 = add nuw nsw i32 %32, 4, !dbg !30
  %42 = icmp ult i32 %32, 2300, !dbg !30
  br i1 %42, label %.split.us, label %.split3.us, !dbg !30

.split:                                           ; preds = %6, %.split
  %43 = phi float [ %52, %.split ], [ 0.000000e+00, %6 ]
  %44 = phi i32 [ %53, %.split ], [ 0, %6 ]
  %45 = or i32 %44, %11, !dbg !23
  %46 = zext nneg i32 %45 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %30, i64 %46, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 true, i32 0, i1 true) #5, !dbg !26
  %49 = bitcast i32 %48 to float, !dbg !26
  %50 = fmul float %49, 4.800000e+01, !dbg !27
  %51 = fmul float %50, %50, !dbg !28
  %52 = fadd float %43, %51, !dbg !29
  %53 = add nuw nsw i32 %44, 4, !dbg !30
  %54 = icmp ult i32 %44, 2300, !dbg !30
  br i1 %54, label %.split, label %.split3.us, !dbg !30

.split3.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %40, %.split.us ], [ %52, %.split ]
  %55 = bitcast float %.us-phi to i32, !dbg !31
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !31
  %57 = bitcast i32 %56 to float, !dbg !31
  %58 = fadd float %.us-phi, %57, !dbg !35
  %59 = bitcast float %58 to i32, !dbg !31
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !31
  %61 = bitcast i32 %60 to float, !dbg !31
  %62 = fadd float %58, %61, !dbg !35
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 2.304000e+03) #5, !dbg !39
  %64 = fadd float %63, 0x3EE4F8B580000000, !dbg !40
  %65 = mul i32 %14, 2304, !dbg !41
  br i1 %28, label %.split4.us, label %.split4, !dbg !42

.split4.us:                                       ; preds = %.split3.us, %__nv_rsqrtf.exit.us
  %66 = phi i32 [ %88, %__nv_rsqrtf.exit.us ], [ 0, %.split3.us ]
  %67 = or i32 %66, %11, !dbg !43
  %68 = zext nneg i32 %67 to i64, !dbg !44
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !44
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true) #5, !dbg !45
  %71 = bitcast i32 %70 to float, !dbg !45
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 883, ptr nonnull @assertFunc_1, i64 1), !dbg !42
  %72 = getelementptr float, ptr addrspace(1) %30, i64 %68, !dbg !46
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 true, i32 0, i1 true) #5, !dbg !47
  %74 = bitcast i32 %73 to float, !dbg !47
  %75 = fmul float %74, 4.800000e+01, !dbg !48
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i.us = icmp eq i32 %76, 0, !dbg !49
  br i1 %.not.i.us, label %79, label %77, !dbg !49

77:                                               ; preds = %.split4.us
  %78 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %64), !dbg !49
  br label %__nv_rsqrtf.exit.us, !dbg !49

79:                                               ; preds = %.split4.us
  %80 = tail call float @llvm.nvvm.rsqrt.approx.f(float %64), !dbg !49
  br label %__nv_rsqrtf.exit.us, !dbg !49

__nv_rsqrtf.exit.us:                              ; preds = %79, %77
  %.0.i.us = phi float [ %78, %77 ], [ %80, %79 ], !dbg !49
  %81 = fmul float %75, %.0.i.us, !dbg !50
  %82 = fadd float %71, 1.000000e+00, !dbg !51
  %83 = fmul float %82, %81, !dbg !52
  %84 = add i32 %67, %65, !dbg !53
  %85 = sext i32 %84 to i64, !dbg !54
  %86 = getelementptr i16, ptr addrspace(1) %3, i64 %85, !dbg !54
  %87 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %83) #5, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %87, ptr addrspace(1) %86, i1 true) #5, !dbg !55
  %88 = add nuw nsw i32 %66, 4, !dbg !56
  %89 = icmp ult i32 %66, 2300, !dbg !56
  br i1 %89, label %.split4.us, label %.split6.us, !dbg !56

.split4:                                          ; preds = %.split3.us, %__nv_rsqrtf.exit
  %90 = phi i32 [ %112, %__nv_rsqrtf.exit ], [ 0, %.split3.us ]
  %91 = or i32 %90, %11, !dbg !43
  %92 = zext nneg i32 %91 to i64, !dbg !44
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !44
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 true, i32 0, i1 true) #5, !dbg !45
  %95 = bitcast i32 %94 to float, !dbg !45
  %96 = getelementptr float, ptr addrspace(1) %30, i64 %92, !dbg !46
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 true, i32 0, i1 true) #5, !dbg !47
  %98 = bitcast i32 %97 to float, !dbg !47
  %99 = fmul float %98, 4.800000e+01, !dbg !48
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %100, 0, !dbg !49
  br i1 %.not.i, label %103, label %101, !dbg !49

101:                                              ; preds = %.split4
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %64), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

103:                                              ; preds = %.split4
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %64), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %101, %103
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], !dbg !49
  %105 = fmul float %99, %.0.i, !dbg !50
  %106 = fadd float %95, 1.000000e+00, !dbg !51
  %107 = fmul float %106, %105, !dbg !52
  %108 = add i32 %91, %65, !dbg !53
  %109 = sext i32 %108 to i64, !dbg !54
  %110 = getelementptr i16, ptr addrspace(1) %3, i64 %109, !dbg !54
  %111 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %107) #5, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %111, ptr addrspace(1) %110, i1 true) #5, !dbg !55
  %112 = add nuw nsw i32 %90, 4, !dbg !56
  %113 = icmp ult i32 %90, 2300, !dbg !56
  br i1 %113, label %.split4, label %.split6.us, !dbg !56

.split6.us:                                       ; preds = %__nv_rsqrtf.exit, %__nv_rsqrtf.exit.us
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #2 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cfgw3ant7vl6znikbhsyonz3tb7dlz33uxndwlkczlbsjo3766ai.py", directory: "/tmp/torchinductor_zeus/fg")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 44, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 28, scope: !7)
!13 = !DILocation(line: 21, column: 33, scope: !7)
!14 = !DILocation(line: 22, column: 23, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 32, column: 22, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 34, column: 36, scope: !7)
!20 = !DILocation(line: 35, column: 40, scope: !7)
!21 = !DILocation(line: 36, column: 45, scope: !7)
!22 = !DILocation(line: 35, column: 56, scope: !7)
!23 = !DILocation(line: 29, column: 27, scope: !7)
!24 = !DILocation(line: 36, column: 40, scope: !7)
!25 = !DILocation(line: 36, column: 34, scope: !7)
!26 = !DILocation(line: 36, column: 53, scope: !7)
!27 = !DILocation(line: 38, column: 22, scope: !7)
!28 = !DILocation(line: 39, column: 22, scope: !7)
!29 = !DILocation(line: 42, column: 39, scope: !7)
!30 = !DILocation(line: 28, column: 36, scope: !7)
!31 = !DILocation(line: 243, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!34 = !DILocation(line: 43, column: 25, scope: !32)
!35 = !DILocation(line: 233, column: 15, scope: !36, inlinedAt: !37)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 243, column: 36, scope: !36, inlinedAt: !38)
!38 = !DILocation(line: 43, column: 25, scope: !36)
!39 = !DILocation(line: 57, column: 23, scope: !7)
!40 = !DILocation(line: 59, column: 24, scope: !7)
!41 = !DILocation(line: 66, column: 40, scope: !7)
!42 = !DILocation(line: 52, column: 58, scope: !7)
!43 = !DILocation(line: 45, column: 27, scope: !7)
!44 = !DILocation(line: 48, column: 35, scope: !7)
!45 = !DILocation(line: 48, column: 40, scope: !7)
!46 = !DILocation(line: 53, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 55, scope: !7)
!48 = !DILocation(line: 55, column: 24, scope: !7)
!49 = !DILocation(line: 60, column: 30, scope: !7)
!50 = !DILocation(line: 61, column: 24, scope: !7)
!51 = !DILocation(line: 63, column: 24, scope: !7)
!52 = !DILocation(line: 64, column: 24, scope: !7)
!53 = !DILocation(line: 66, column: 35, scope: !7)
!54 = !DILocation(line: 66, column: 29, scope: !7)
!55 = !DILocation(line: 66, column: 53, scope: !7)
!56 = !DILocation(line: 44, column: 36, scope: !7)
!57 = !DILocation(line: 44, column: 4, scope: !7)
