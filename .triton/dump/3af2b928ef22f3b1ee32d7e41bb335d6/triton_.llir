; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp23 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4d5d6d7d8de9de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = lshr i32 %11, 5, !dbg !10
  %urem = and i32 %11, 255, !dbg !10
  %13 = shl nuw nsw i32 %urem, 3, !dbg !10
  %14 = shl nuw nsw i32 %urem, 2, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %16 = mul i32 %15, 3584, !dbg !12
  %17 = add i32 %13, %16, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !15
  %25 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset20 = lshr i32 %21, 16, !dbg !15
  %26 = trunc i32 %extelt.offset20 to i16, !dbg !15
  %27 = trunc i32 %22 to i16, !dbg !15
  %extelt.offset21 = lshr i32 %22, 16, !dbg !15
  %28 = trunc i32 %extelt.offset21 to i16, !dbg !15
  %29 = trunc i32 %23 to i16, !dbg !15
  %extelt.offset22 = lshr i32 %23, 16, !dbg !15
  %30 = trunc i32 %extelt.offset22 to i16, !dbg !15
  %31 = trunc i32 %24 to i16, !dbg !15
  %extelt.offset23 = lshr i32 %24, 16, !dbg !15
  %32 = trunc i32 %extelt.offset23 to i16, !dbg !15
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !16
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !16
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !16
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !16
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !16
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #6, !dbg !16
  %41 = fmul float %33, %33, !dbg !17
  %42 = fmul float %34, %34, !dbg !17
  %43 = fmul float %35, %35, !dbg !17
  %44 = fmul float %36, %36, !dbg !17
  %45 = fmul float %37, %37, !dbg !17
  %46 = fmul float %38, %38, !dbg !17
  %47 = fmul float %39, %39, !dbg !17
  %48 = fmul float %40, %40, !dbg !17
  %49 = or i32 %13, 2048, !dbg !18
  %50 = icmp ult i32 %49, 3584, !dbg !19
  %51 = add i32 %49, %16, !dbg !13
  %52 = sext i32 %51 to i64, !dbg !14
  %53 = getelementptr i16, ptr addrspace(1) %0, i64 %52, !dbg !14
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #6, !dbg !15
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !15
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !15
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !15
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !15
  %59 = trunc i32 %55 to i16, !dbg !15
  %extelt.offset20.1 = lshr i32 %55, 16, !dbg !15
  %60 = trunc i32 %extelt.offset20.1 to i16, !dbg !15
  %61 = trunc i32 %56 to i16, !dbg !15
  %extelt.offset21.1 = lshr i32 %56, 16, !dbg !15
  %62 = trunc i32 %extelt.offset21.1 to i16, !dbg !15
  %63 = trunc i32 %57 to i16, !dbg !15
  %extelt.offset22.1 = lshr i32 %57, 16, !dbg !15
  %64 = trunc i32 %extelt.offset22.1 to i16, !dbg !15
  %65 = trunc i32 %58 to i16, !dbg !15
  %extelt.offset23.1 = lshr i32 %58, 16, !dbg !15
  %66 = trunc i32 %extelt.offset23.1 to i16, !dbg !15
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #6, !dbg !16
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #6, !dbg !16
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #6, !dbg !16
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #6, !dbg !16
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #6, !dbg !16
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #6, !dbg !16
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #6, !dbg !16
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #6, !dbg !16
  %75 = fmul float %67, %67, !dbg !17
  %76 = fmul float %68, %68, !dbg !17
  %77 = fmul float %69, %69, !dbg !17
  %78 = fmul float %70, %70, !dbg !17
  %79 = fmul float %71, %71, !dbg !17
  %80 = fmul float %72, %72, !dbg !17
  %81 = fmul float %73, %73, !dbg !17
  %82 = fmul float %74, %74, !dbg !17
  %83 = select i1 %50, float %75, float -0.000000e+00, !dbg !20
  %84 = fadd float %41, %83, !dbg !20
  %85 = select i1 %50, float %76, float -0.000000e+00, !dbg !20
  %86 = fadd float %42, %85, !dbg !20
  %87 = select i1 %50, float %77, float -0.000000e+00, !dbg !20
  %88 = fadd float %43, %87, !dbg !20
  %89 = select i1 %50, float %78, float -0.000000e+00, !dbg !20
  %90 = fadd float %44, %89, !dbg !20
  %91 = select i1 %50, float %79, float -0.000000e+00, !dbg !20
  %92 = fadd float %45, %91, !dbg !20
  %93 = select i1 %50, float %80, float -0.000000e+00, !dbg !20
  %94 = fadd float %46, %93, !dbg !20
  %95 = select i1 %50, float %81, float -0.000000e+00, !dbg !20
  %96 = fadd float %47, %95, !dbg !20
  %97 = select i1 %50, float %82, float -0.000000e+00, !dbg !20
  %98 = fadd float %48, %97, !dbg !20
  %99 = and i32 %11, 31, !dbg !10
  %100 = and i32 %12, 7, !dbg !10
  %101 = or i32 %13, 4, !dbg !10
  %102 = or i32 %14, 1024, !dbg !10
  %103 = fadd float %84, %86, !dbg !21
  %104 = fadd float %88, %103, !dbg !21
  %105 = fadd float %90, %104, !dbg !21
  %106 = fadd float %92, %105, !dbg !21
  %107 = fadd float %94, %106, !dbg !21
  %108 = fadd float %96, %107, !dbg !21
  %109 = fadd float %98, %108, !dbg !21
  %110 = bitcast float %109 to i32, !dbg !27
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 16, i32 31), !dbg !27
  %112 = bitcast i32 %111 to float, !dbg !27
  %113 = fadd float %109, %112, !dbg !21
  %114 = bitcast float %113 to i32, !dbg !27
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 8, i32 31), !dbg !27
  %116 = bitcast i32 %115 to float, !dbg !27
  %117 = fadd float %113, %116, !dbg !21
  %118 = bitcast float %117 to i32, !dbg !27
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !27
  %120 = bitcast i32 %119 to float, !dbg !27
  %121 = fadd float %117, %120, !dbg !21
  %122 = bitcast float %121 to i32, !dbg !27
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !27
  %124 = bitcast i32 %123 to float, !dbg !27
  %125 = fadd float %121, %124, !dbg !21
  %126 = bitcast float %125 to i32, !dbg !27
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !27
  %128 = bitcast i32 %127 to float, !dbg !27
  %129 = fadd float %125, %128, !dbg !21
  %130 = icmp eq i32 %99, 0, !dbg !27
  %131 = zext nneg i32 %100 to i64, !dbg !27
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %131, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, float %129, i1 %130) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %133 = icmp slt i32 %11, 8, !dbg !27
  %134 = sext i32 %11 to i64, !dbg !27
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i64 %134, !dbg !27
  %136 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %133) #6, !dbg !27
  %137 = bitcast float %136 to i32, !dbg !27
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 4, i32 31), !dbg !27
  %139 = bitcast i32 %138 to float, !dbg !27
  %140 = fadd float %136, %139, !dbg !21
  %141 = bitcast float %140 to i32, !dbg !27
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !27
  %143 = bitcast i32 %142 to float, !dbg !27
  %144 = fadd float %140, %143, !dbg !21
  %145 = bitcast float %144 to i32, !dbg !27
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !27
  %147 = bitcast i32 %146 to float, !dbg !27
  %148 = fadd float %144, %147, !dbg !21
  %149 = and i32 %11, 7, !dbg !27
  %150 = icmp eq i32 %149, 0, !dbg !27
  %151 = and i1 %133, %150, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, float %148, i1 %151) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %152 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  %153 = sext i32 %15 to i64, !dbg !29
  %154 = getelementptr i64, ptr addrspace(1) %2, i64 %153, !dbg !29
  %155 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %154, i1 true) #6, !dbg !30
  %156 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %154, i1 true) #6, !dbg !30
  %157 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %154, i1 true) #6, !dbg !30
  %158 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %154, i1 true) #6, !dbg !30
  %159 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %154, i1 true) #6, !dbg !30
  %160 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %154, i1 true) #6, !dbg !30
  %161 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %154, i1 true) #6, !dbg !30
  %162 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %154, i1 true) #6, !dbg !30
  %163 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %154, i1 true) #6, !dbg !30
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 3.584000e+03) #6, !dbg !31
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 3.584000e+03) #6, !dbg !31
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 3.584000e+03) #6, !dbg !31
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 3.584000e+03) #6, !dbg !31
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 3.584000e+03) #6, !dbg !31
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 3.584000e+03) #6, !dbg !31
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 3.584000e+03) #6, !dbg !31
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 3.584000e+03) #6, !dbg !31
  %172 = fadd float %164, 0x3EE4F8B580000000, !dbg !32
  %173 = add i64 %155, 288256, !dbg !33
  %174 = add i64 %163, 288256, !dbg !33
  %175 = icmp slt i64 %155, 0, !dbg !34
  %176 = icmp slt i64 %163, 0, !dbg !34
  %177 = select i1 %175, i64 %173, i64 %155, !dbg !35
  %178 = select i1 %176, i64 %174, i64 %163, !dbg !35
  %179 = icmp ugt i64 %178, 288255, !dbg !36
  %180 = mul i64 %177, 3584, !dbg !37
  %181 = getelementptr float, ptr addrspace(1) %3, i64 %180
  %182 = zext nneg i32 %13 to i64
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i64 %182
  %184 = zext nneg i32 %14 to i64
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i64 %184
  %186 = zext nneg i32 %102 to i64
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186
  %188 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %185, i64 0, i64 1
  %189 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %185, i64 0, i64 2
  %190 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %185, i64 0, i64 3
  br label %191, !dbg !38

191:                                              ; preds = %10, %276
  %192 = phi i1 [ true, %10 ], [ false, %276 ]
  %193 = phi i32 [ 0, %10 ], [ 2048, %276 ]
  %194 = phi <8 x float> [ zeroinitializer, %10 ], [ %304, %276 ]
  %195 = or i32 %193, %13, !dbg !39
  %196 = or i32 %193, %101, !dbg !39
  %197 = or i32 %193, %14, !dbg !39
  %198 = or i32 %193, %102, !dbg !39
  %199 = icmp ult i32 %195, 3584, !dbg !40
  %200 = icmp ult i32 %198, 3584, !dbg !40
  %201 = add i32 %195, %16, !dbg !41
  %202 = add i32 %197, %16, !dbg !41
  %203 = add i32 %198, %16, !dbg !41
  %204 = sext i32 %201 to i64, !dbg !42
  %205 = getelementptr i16, ptr addrspace(1) %0, i64 %204, !dbg !42
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %205, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199) #6, !dbg !43
  %207 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !43
  %208 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !43
  %209 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !43
  %210 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !43
  %211 = trunc i32 %207 to i16, !dbg !43
  %extelt.offset = lshr i32 %207, 16, !dbg !43
  %212 = trunc i32 %extelt.offset to i16, !dbg !43
  %213 = trunc i32 %208 to i16, !dbg !43
  %extelt.offset3 = lshr i32 %208, 16, !dbg !43
  %214 = trunc i32 %extelt.offset3 to i16, !dbg !43
  %215 = trunc i32 %209 to i16, !dbg !43
  %extelt.offset4 = lshr i32 %209, 16, !dbg !43
  %216 = trunc i32 %extelt.offset4 to i16, !dbg !43
  %217 = trunc i32 %210 to i16, !dbg !43
  %extelt.offset5 = lshr i32 %210, 16, !dbg !43
  %218 = trunc i32 %extelt.offset5 to i16, !dbg !43
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %211) #6, !dbg !44
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %212) #6, !dbg !44
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %213) #6, !dbg !44
  %222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %214) #6, !dbg !44
  %223 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %215) #6, !dbg !44
  %224 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %216) #6, !dbg !44
  %225 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %217) #6, !dbg !44
  %226 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %218) #6, !dbg !44
  %227 = zext nneg i32 %195 to i64, !dbg !45
  %228 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !45
  %229 = zext nneg i32 %196 to i64, !dbg !45
  %230 = getelementptr float, ptr addrspace(1) %1, i64 %229, !dbg !45
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %228, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199) #6, !dbg !46
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !46
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !46
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !46
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !46
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %230, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199) #6, !dbg !46
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !46
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !46
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !46
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !46
  %241 = insertelement <8 x i32> poison, i32 %232, i64 0, !dbg !46
  %242 = insertelement <8 x i32> %241, i32 %233, i64 1, !dbg !46
  %243 = insertelement <8 x i32> %242, i32 %234, i64 2, !dbg !46
  %244 = insertelement <8 x i32> %243, i32 %235, i64 3, !dbg !46
  %245 = insertelement <8 x i32> %244, i32 %237, i64 4, !dbg !46
  %246 = insertelement <8 x i32> %245, i32 %238, i64 5, !dbg !46
  %247 = insertelement <8 x i32> %246, i32 %239, i64 6, !dbg !46
  %248 = insertelement <8 x i32> %247, i32 %240, i64 7, !dbg !46
  %249 = bitcast <8 x i32> %248 to <8 x float>, !dbg !46
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %.not.i45 = icmp eq i32 %250, 0, !dbg !47
  br i1 %.not.i45, label %253, label %251, !dbg !47

251:                                              ; preds = %191
  %252 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %172), !dbg !47
  br label %__nv_rsqrtf.exit47, !dbg !47

253:                                              ; preds = %191
  %254 = tail call float @llvm.nvvm.rsqrt.approx.f(float %172), !dbg !47
  br label %__nv_rsqrtf.exit47, !dbg !47

__nv_rsqrtf.exit47:                               ; preds = %251, %253
  %.0.i46 = phi float [ %252, %251 ], [ %254, %253 ], !dbg !47
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %262 = insertelement <8 x float> poison, float %219, i64 0, !dbg !48
  %263 = insertelement <8 x float> %262, float %220, i64 1, !dbg !48
  %264 = insertelement <8 x float> %263, float %221, i64 2, !dbg !48
  %265 = insertelement <8 x float> %264, float %222, i64 3, !dbg !48
  %266 = insertelement <8 x float> %265, float %223, i64 4, !dbg !48
  %267 = insertelement <8 x float> %266, float %224, i64 5, !dbg !48
  %268 = insertelement <8 x float> %267, float %225, i64 6, !dbg !48
  %269 = insertelement <8 x float> %268, float %226, i64 7, !dbg !48
  %270 = insertelement <8 x float> poison, float %.0.i46, i64 0, !dbg !48
  %271 = shufflevector <8 x float> %270, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !48
  %272 = fmul <8 x float> %269, %271, !dbg !48
  %273 = fadd <8 x float> %249, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !49
  %274 = fmul <8 x float> %273, %272, !dbg !50
  br i1 %179, label %275, label %276, !dbg !51

275:                                              ; preds = %__nv_rsqrtf.exit47
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !51
  br label %276, !dbg !51

276:                                              ; preds = %275, %__nv_rsqrtf.exit47
  %277 = getelementptr float, ptr addrspace(1) %181, i64 %227, !dbg !52
  %278 = getelementptr float, ptr addrspace(1) %181, i64 %229, !dbg !52
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %277, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199) #6, !dbg !53
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !53
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !53
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !53
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !53
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %278, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199, i32 0, i1 %199) #6, !dbg !53
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !53
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !53
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !53
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !53
  %289 = insertelement <8 x i32> poison, i32 %280, i64 0, !dbg !53
  %290 = insertelement <8 x i32> %289, i32 %281, i64 1, !dbg !53
  %291 = insertelement <8 x i32> %290, i32 %282, i64 2, !dbg !53
  %292 = insertelement <8 x i32> %291, i32 %283, i64 3, !dbg !53
  %293 = insertelement <8 x i32> %292, i32 %285, i64 4, !dbg !53
  %294 = insertelement <8 x i32> %293, i32 %286, i64 5, !dbg !53
  %295 = insertelement <8 x i32> %294, i32 %287, i64 6, !dbg !53
  %296 = insertelement <8 x i32> %295, i32 %288, i64 7, !dbg !53
  %297 = bitcast <8 x i32> %296 to <8 x float>, !dbg !53
  %298 = fmul <8 x float> %297, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !54
  %299 = fadd <8 x float> %274, %298, !dbg !55
  %300 = fmul <8 x float> %299, %299, !dbg !56
  %301 = insertelement <8 x i1> poison, i1 %199, i64 0, !dbg !57
  %302 = shufflevector <8 x i1> %301, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !57
  %303 = select <8 x i1> %302, <8 x float> %300, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !57
  %304 = fadd <8 x float> %194, %303, !dbg !57
  %305 = sext i32 %202 to i64, !dbg !58
  %306 = getelementptr float, ptr addrspace(1) %5, i64 %305, !dbg !58
  %307 = sext i32 %203 to i64, !dbg !58
  %308 = getelementptr float, ptr addrspace(1) %5, i64 %307, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  store <8 x float> %299, ptr addrspace(3) %183, align 32, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %309 = load <4 x i32>, ptr addrspace(3) %187, align 16, !dbg !59
  %.extract = load i32, ptr addrspace(3) %185, align 16, !dbg !59
  %.extract7 = load i32, ptr addrspace(3) %188, align 4, !dbg !59
  %.extract9 = load i32, ptr addrspace(3) %189, align 8, !dbg !59
  %.extract11 = load i32, ptr addrspace(3) %190, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract9, i32 %.extract11, ptr addrspace(1) %306, i1 true) #6, !dbg !59
  %.extract13 = extractelement <4 x i32> %309, i64 0, !dbg !59
  %.extract15 = extractelement <4 x i32> %309, i64 1, !dbg !59
  %.extract17 = extractelement <4 x i32> %309, i64 2, !dbg !59
  %.extract19 = extractelement <4 x i32> %309, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract15, i32 %.extract17, i32 %.extract19, ptr addrspace(1) %308, i1 %200) #6, !dbg !59
  br i1 %192, label %191, label %310, !dbg !38

310:                                              ; preds = %276
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %shift = shufflevector <8 x float> %304, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %311 = fadd <8 x float> %304, %shift, !dbg !62
  %shift99 = shufflevector <8 x float> %304, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %312 = fadd <8 x float> %shift99, %311, !dbg !62
  %shift100 = shufflevector <8 x float> %304, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %313 = fadd <8 x float> %shift100, %312, !dbg !62
  %shift101 = shufflevector <8 x float> %304, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %314 = fadd <8 x float> %shift101, %313, !dbg !62
  %shift102 = shufflevector <8 x float> %304, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %315 = fadd <8 x float> %shift102, %314, !dbg !62
  %shift103 = shufflevector <8 x float> %304, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %316 = fadd <8 x float> %shift103, %315, !dbg !62
  %shift104 = shufflevector <8 x float> %304, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %317 = fadd <8 x float> %shift104, %316, !dbg !62
  %318 = extractelement <8 x float> %317, i64 0, !dbg !62
  %319 = bitcast float %318 to i32, !dbg !60
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 16, i32 31), !dbg !60
  %321 = bitcast i32 %320 to float, !dbg !60
  %322 = fadd float %318, %321, !dbg !62
  %323 = bitcast float %322 to i32, !dbg !60
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 8, i32 31), !dbg !60
  %325 = bitcast i32 %324 to float, !dbg !60
  %326 = fadd float %322, %325, !dbg !62
  %327 = bitcast float %326 to i32, !dbg !60
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 4, i32 31), !dbg !60
  %329 = bitcast i32 %328 to float, !dbg !60
  %330 = fadd float %326, %329, !dbg !62
  %331 = bitcast float %330 to i32, !dbg !60
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 2, i32 31), !dbg !60
  %333 = bitcast i32 %332 to float, !dbg !60
  %334 = fadd float %330, %333, !dbg !62
  %335 = bitcast float %334 to i32, !dbg !60
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 1, i32 31), !dbg !60
  %337 = bitcast i32 %336 to float, !dbg !60
  %338 = fadd float %334, %337, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, float %338, i1 %130) #6, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %339 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %133) #6, !dbg !60
  %340 = bitcast float %339 to i32, !dbg !60
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !60
  %342 = bitcast i32 %341 to float, !dbg !60
  %343 = fadd float %339, %342, !dbg !62
  %344 = bitcast float %343 to i32, !dbg !60
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 2, i32 31), !dbg !60
  %346 = bitcast i32 %345 to float, !dbg !60
  %347 = fadd float %343, %346, !dbg !62
  %348 = bitcast float %347 to i32, !dbg !60
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 1, i32 31), !dbg !60
  %350 = bitcast i32 %349 to float, !dbg !60
  %351 = fadd float %347, %350, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, float %351, i1 %151) #6, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %352 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !60
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 3.584000e+03) #6, !dbg !65
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 3.584000e+03) #6, !dbg !65
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 3.584000e+03) #6, !dbg !65
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 3.584000e+03) #6, !dbg !65
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 3.584000e+03) #6, !dbg !65
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 3.584000e+03) #6, !dbg !65
  %359 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 3.584000e+03) #6, !dbg !65
  %360 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 3.584000e+03) #6, !dbg !65
  %361 = fadd float %353, 0x3EE4F8B580000000, !dbg !66
  br label %362, !dbg !67

362:                                              ; preds = %310, %__nv_rsqrtf.exit
  %363 = phi i1 [ true, %310 ], [ false, %__nv_rsqrtf.exit ]
  %364 = phi i32 [ 0, %310 ], [ 2048, %__nv_rsqrtf.exit ]
  %365 = or i32 %364, %13, !dbg !68
  %366 = or i32 %364, %101, !dbg !68
  %367 = icmp ult i32 %365, 3584, !dbg !69
  %368 = add i32 %365, %16, !dbg !70
  %369 = add i32 %366, %16, !dbg !70
  %370 = sext i32 %368 to i64, !dbg !71
  %371 = getelementptr float, ptr addrspace(1) %5, i64 %370, !dbg !71
  %372 = sext i32 %369 to i64, !dbg !71
  %373 = getelementptr float, ptr addrspace(1) %5, i64 %372, !dbg !71
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %371, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #6, !dbg !72
  %375 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !72
  %376 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !72
  %377 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !72
  %378 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !72
  %379 = bitcast i32 %375 to float, !dbg !72
  %380 = bitcast i32 %376 to float, !dbg !72
  %381 = bitcast i32 %377 to float, !dbg !72
  %382 = bitcast i32 %378 to float, !dbg !72
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %373, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #6, !dbg !72
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !72
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !72
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !72
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !72
  %388 = bitcast i32 %384 to float, !dbg !72
  %389 = bitcast i32 %385 to float, !dbg !72
  %390 = bitcast i32 %386 to float, !dbg !72
  %391 = bitcast i32 %387 to float, !dbg !72
  %392 = zext nneg i32 %365 to i64, !dbg !73
  %393 = getelementptr float, ptr addrspace(1) %4, i64 %392, !dbg !73
  %394 = zext nneg i32 %366 to i64, !dbg !73
  %395 = getelementptr float, ptr addrspace(1) %4, i64 %394, !dbg !73
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %393, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #6, !dbg !74
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !74
  %398 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !74
  %399 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !74
  %400 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !74
  %401 = bitcast i32 %397 to float, !dbg !74
  %402 = bitcast i32 %398 to float, !dbg !74
  %403 = bitcast i32 %399 to float, !dbg !74
  %404 = bitcast i32 %400 to float, !dbg !74
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %395, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #6, !dbg !74
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !74
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !74
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !74
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !74
  %410 = bitcast i32 %406 to float, !dbg !74
  %411 = bitcast i32 %407 to float, !dbg !74
  %412 = bitcast i32 %408 to float, !dbg !74
  %413 = bitcast i32 %409 to float, !dbg !74
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %.not.i = icmp eq i32 %414, 0, !dbg !75
  br i1 %.not.i, label %417, label %415, !dbg !75

415:                                              ; preds = %362
  %416 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %361), !dbg !75
  br label %__nv_rsqrtf.exit, !dbg !75

417:                                              ; preds = %362
  %418 = tail call float @llvm.nvvm.rsqrt.approx.f(float %361), !dbg !75
  br label %__nv_rsqrtf.exit, !dbg !75

__nv_rsqrtf.exit:                                 ; preds = %415, %417
  %.0.i = phi float [ %416, %415 ], [ %418, %417 ], !dbg !75
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %426 = fmul float %.0.i, %379, !dbg !76
  %427 = fmul float %.0.i, %380, !dbg !76
  %428 = fmul float %.0.i, %381, !dbg !76
  %429 = fmul float %.0.i, %382, !dbg !76
  %430 = fmul float %.0.i, %388, !dbg !76
  %431 = fmul float %.0.i, %389, !dbg !76
  %432 = fmul float %.0.i, %390, !dbg !76
  %433 = fmul float %.0.i, %391, !dbg !76
  %434 = fadd float %401, 1.000000e+00, !dbg !77
  %435 = fadd float %402, 1.000000e+00, !dbg !77
  %436 = fadd float %403, 1.000000e+00, !dbg !77
  %437 = fadd float %404, 1.000000e+00, !dbg !77
  %438 = fadd float %410, 1.000000e+00, !dbg !77
  %439 = fadd float %411, 1.000000e+00, !dbg !77
  %440 = fadd float %412, 1.000000e+00, !dbg !77
  %441 = fadd float %413, 1.000000e+00, !dbg !77
  %442 = fmul float %434, %426, !dbg !78
  %443 = fmul float %435, %427, !dbg !78
  %444 = fmul float %436, %428, !dbg !78
  %445 = fmul float %437, %429, !dbg !78
  %446 = fmul float %438, %430, !dbg !78
  %447 = fmul float %439, %431, !dbg !78
  %448 = fmul float %440, %432, !dbg !78
  %449 = fmul float %441, %433, !dbg !78
  %450 = getelementptr i16, ptr addrspace(1) %6, i64 %370, !dbg !79
  %451 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %442) #6, !dbg !80
  %452 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %443) #6, !dbg !80
  %453 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %444) #6, !dbg !80
  %454 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %445) #6, !dbg !80
  %455 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %446) #6, !dbg !80
  %456 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %447) #6, !dbg !80
  %457 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %448) #6, !dbg !80
  %458 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %449) #6, !dbg !80
  %459 = insertelement <2 x i16> undef, i16 %451, i64 0, !dbg !80
  %460 = insertelement <2 x i16> %459, i16 %452, i64 1, !dbg !80
  %461 = bitcast <2 x i16> %460 to i32, !dbg !80
  %462 = insertelement <2 x i16> undef, i16 %453, i64 0, !dbg !80
  %463 = insertelement <2 x i16> %462, i16 %454, i64 1, !dbg !80
  %464 = bitcast <2 x i16> %463 to i32, !dbg !80
  %465 = insertelement <2 x i16> undef, i16 %455, i64 0, !dbg !80
  %466 = insertelement <2 x i16> %465, i16 %456, i64 1, !dbg !80
  %467 = bitcast <2 x i16> %466 to i32, !dbg !80
  %468 = insertelement <2 x i16> undef, i16 %457, i64 0, !dbg !80
  %469 = insertelement <2 x i16> %468, i16 %458, i64 1, !dbg !80
  %470 = bitcast <2 x i16> %469 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %461, i32 %464, i32 %467, i32 %470, ptr addrspace(1) %450, i1 %367) #6, !dbg !80
  %471 = getelementptr i16, ptr addrspace(1) %7, i64 %370, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %461, i32 %464, i32 %467, i32 %470, ptr addrspace(1) %471, i1 %367) #6, !dbg !82
  br i1 %363, label %362, label %472, !dbg !67

472:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cbbw4wnppjsx5cygsxsmnwhuq4ee7cbgmx7xjln7klhugn4f6bq5.py", directory: "/tmp/torchinductor_zeus/bb")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8de9de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8de9de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8de9de", linkageName: "triton__0d1d2d3d4d5d6d7d8de9de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 36, scope: !7)
!31 = !DILocation(line: 48, column: 22, scope: !7)
!32 = !DILocation(line: 50, column: 23, scope: !7)
!33 = !DILocation(line: 58, column: 24, scope: !7)
!34 = !DILocation(line: 59, column: 24, scope: !7)
!35 = !DILocation(line: 60, column: 39, scope: !7)
!36 = !DILocation(line: 61, column: 41, scope: !7)
!37 = !DILocation(line: 62, column: 46, scope: !7)
!38 = !DILocation(line: 40, column: 36, scope: !7)
!39 = !DILocation(line: 41, column: 27, scope: !7)
!40 = !DILocation(line: 42, column: 25, scope: !7)
!41 = !DILocation(line: 44, column: 40, scope: !7)
!42 = !DILocation(line: 44, column: 34, scope: !7)
!43 = !DILocation(line: 44, column: 51, scope: !7)
!44 = !DILocation(line: 44, column: 103, scope: !7)
!45 = !DILocation(line: 45, column: 35, scope: !7)
!46 = !DILocation(line: 45, column: 40, scope: !7)
!47 = !DILocation(line: 51, column: 30, scope: !7)
!48 = !DILocation(line: 52, column: 23, scope: !7)
!49 = !DILocation(line: 54, column: 24, scope: !7)
!50 = !DILocation(line: 55, column: 24, scope: !7)
!51 = !DILocation(line: 61, column: 58, scope: !7)
!52 = !DILocation(line: 62, column: 35, scope: !7)
!53 = !DILocation(line: 62, column: 55, scope: !7)
!54 = !DILocation(line: 64, column: 24, scope: !7)
!55 = !DILocation(line: 65, column: 24, scope: !7)
!56 = !DILocation(line: 66, column: 24, scope: !7)
!57 = !DILocation(line: 69, column: 40, scope: !7)
!58 = !DILocation(line: 70, column: 29, scope: !7)
!59 = !DILocation(line: 70, column: 53, scope: !7)
!60 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !61)
!61 = !DILocation(line: 71, column: 27, scope: !24)
!62 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !63)
!63 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !64)
!64 = !DILocation(line: 71, column: 27, scope: !22)
!65 = !DILocation(line: 79, column: 24, scope: !7)
!66 = !DILocation(line: 81, column: 24, scope: !7)
!67 = !DILocation(line: 72, column: 36, scope: !7)
!68 = !DILocation(line: 73, column: 27, scope: !7)
!69 = !DILocation(line: 74, column: 25, scope: !7)
!70 = !DILocation(line: 76, column: 42, scope: !7)
!71 = !DILocation(line: 76, column: 36, scope: !7)
!72 = !DILocation(line: 76, column: 53, scope: !7)
!73 = !DILocation(line: 77, column: 35, scope: !7)
!74 = !DILocation(line: 77, column: 40, scope: !7)
!75 = !DILocation(line: 82, column: 30, scope: !7)
!76 = !DILocation(line: 83, column: 24, scope: !7)
!77 = !DILocation(line: 85, column: 24, scope: !7)
!78 = !DILocation(line: 86, column: 24, scope: !7)
!79 = !DILocation(line: 88, column: 29, scope: !7)
!80 = !DILocation(line: 88, column: 53, scope: !7)
!81 = !DILocation(line: 89, column: 29, scope: !7)
!82 = !DILocation(line: 89, column: 53, scope: !7)
!83 = !DILocation(line: 72, column: 4, scope: !7)
