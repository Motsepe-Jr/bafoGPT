; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = and i32 %9, 3, !dbg !8
  %urem = and i32 %7, 127, !dbg !8
  %11 = shl nuw nsw i32 %urem, 2, !dbg !8
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %13 = icmp slt i32 %12, 2304, !dbg !10
  %14 = mul nuw nsw i32 %urem, 9216, !dbg !11
  %15 = add i32 %12, %14, !dbg !12
  %16 = add i32 %15, 2304, !dbg !12
  %17 = add i32 %15, 4608, !dbg !12
  %18 = add i32 %15, 6912, !dbg !12
  %19 = sext i32 %15 to i64, !dbg !13
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !13
  %21 = sext i32 %16 to i64, !dbg !13
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !13
  %23 = sext i32 %17 to i64, !dbg !13
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !13
  %25 = sext i32 %18 to i64, !dbg !13
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !13
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %13, i32 0, i1 %13) #3, !dbg !14
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %13, i32 0, i1 %13) #3, !dbg !14
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %13, i32 0, i1 %13) #3, !dbg !14
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %13, i32 0, i1 %13) #3, !dbg !14
  %31 = getelementptr i16, ptr addrspace(1) %1, i64 %19, !dbg !15
  %32 = getelementptr i16, ptr addrspace(1) %1, i64 %21, !dbg !15
  %33 = getelementptr i16, ptr addrspace(1) %1, i64 %23, !dbg !15
  %34 = getelementptr i16, ptr addrspace(1) %1, i64 %25, !dbg !15
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %31, i1 %13, i16 0, i1 %13) #3, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %32, i1 %13, i16 0, i1 %13) #3, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %33, i1 %13, i16 0, i1 %13) #3, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %34, i1 %13, i16 0, i1 %13) #3, !dbg !16
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #3, !dbg !17
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #3, !dbg !17
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #3, !dbg !17
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !17
  %43 = zext nneg i32 %11 to i64, !dbg !18
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !18
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !19
  %50 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !14
  %51 = insertelement <2 x i32> %50, i32 %28, i64 1, !dbg !14
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !14
  %53 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !19
  %54 = insertelement <2 x i32> %53, i32 %47, i64 1, !dbg !19
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !19
  %56 = insertelement <2 x float> poison, float %39, i64 0, !dbg !20
  %57 = insertelement <2 x float> %56, float %40, i64 1, !dbg !20
  %58 = fmul <2 x float> %57, %55, !dbg !20
  %59 = fmul <2 x float> %58, %52, !dbg !21
  %60 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !14
  %61 = insertelement <2 x i32> %60, i32 %29, i64 1, !dbg !14
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !14
  %63 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !19
  %64 = insertelement <2 x i32> %63, i32 %48, i64 1, !dbg !19
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !19
  %66 = insertelement <2 x float> poison, float %42, i64 0, !dbg !20
  %67 = insertelement <2 x float> %66, float %41, i64 1, !dbg !20
  %68 = fmul <2 x float> %67, %65, !dbg !20
  %69 = fmul <2 x float> %68, %62, !dbg !21
  %shift = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %70 = fadd <2 x float> %59, %shift, !dbg !22
  %shift1 = shufflevector <2 x float> %69, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %71 = fadd <2 x float> %shift1, %70, !dbg !22
  %72 = fadd <2 x float> %69, %71, !dbg !22
  %73 = extractelement <2 x float> %72, i64 0, !dbg !22
  %74 = select i1 %13, float %73, float 0.000000e+00, !dbg !22
  %75 = bitcast float %74 to i32, !dbg !28
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 16, i32 31), !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = fadd float %74, %77, !dbg !22
  %79 = bitcast float %78 to i32, !dbg !28
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 8, i32 31), !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = fadd float %78, %81, !dbg !22
  %83 = bitcast float %82 to i32, !dbg !28
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 4, i32 31), !dbg !28
  %85 = bitcast i32 %84 to float, !dbg !28
  %86 = fadd float %82, %85, !dbg !22
  %87 = bitcast float %86 to i32, !dbg !28
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 2, i32 31), !dbg !28
  %89 = bitcast i32 %88 to float, !dbg !28
  %90 = fadd float %86, %89, !dbg !22
  %91 = bitcast float %90 to i32, !dbg !28
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 1, i32 31), !dbg !28
  %93 = bitcast i32 %92 to float, !dbg !28
  %94 = fadd float %90, %93, !dbg !22
  %95 = icmp eq i32 %8, 0, !dbg !28
  %96 = zext nneg i32 %10 to i64, !dbg !28
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i64 %96, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, float %94, i1 %95) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %98 = icmp slt i32 %7, 4, !dbg !28
  %99 = sext i32 %7 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i64 %99, !dbg !28
  %101 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %100, i1 %98) #3, !dbg !28
  %102 = bitcast float %101 to i32, !dbg !28
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !28
  %104 = bitcast i32 %103 to float, !dbg !28
  %105 = fadd float %101, %104, !dbg !22
  %106 = bitcast float %105 to i32, !dbg !28
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = fadd float %105, %108, !dbg !22
  %110 = and i32 %7, 3, !dbg !28
  %111 = icmp eq i32 %110, 0, !dbg !28
  %112 = and i1 %98, %111, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, float %109, i1 %112) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %113 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !28
  %114 = fadd float %113, 0.000000e+00, !dbg !30
  %115 = sext i32 %12 to i64, !dbg !34
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !34
  %117 = icmp eq i32 %urem, 0, !dbg !35
  %118 = bitcast float %114 to i32, !dbg !35
  %119 = and i1 %117, %13, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %116, i1 %119) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "ct5wohdb5ruw3mpex5vpttvbv3vcxa2mrkbdpki4qelxtbynl6bt.py", directory: "/tmp/torchinductor_zeus/t5")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 26, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 25, column: 21, scope: !5)
!11 = !DILocation(line: 30, column: 41, scope: !5)
!12 = !DILocation(line: 30, column: 36, scope: !5)
!13 = !DILocation(line: 30, column: 30, scope: !5)
!14 = !DILocation(line: 30, column: 47, scope: !5)
!15 = !DILocation(line: 31, column: 30, scope: !5)
!16 = !DILocation(line: 31, column: 47, scope: !5)
!17 = !DILocation(line: 31, column: 76, scope: !5)
!18 = !DILocation(line: 32, column: 30, scope: !5)
!19 = !DILocation(line: 32, column: 35, scope: !5)
!20 = !DILocation(line: 34, column: 18, scope: !5)
!21 = !DILocation(line: 35, column: 18, scope: !5)
!22 = !DILocation(line: 233, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !5, file: !24, discriminator: 0)
!26 = !DILocation(line: 243, column: 36, scope: !23, inlinedAt: !27)
!27 = !DILocation(line: 38, column: 57, scope: !23)
!28 = !DILocation(line: 243, column: 36, scope: !25, inlinedAt: !29)
!29 = !DILocation(line: 38, column: 57, scope: !25)
!30 = !DILocation(line: 8, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !5, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor")
!33 = !DILocation(line: 38, column: 44, scope: !31)
!34 = !DILocation(line: 39, column: 25, scope: !5)
!35 = !DILocation(line: 39, column: 36, scope: !5)
!36 = !DILocation(line: 39, column: 4, scope: !5)
