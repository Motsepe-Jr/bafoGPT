module {
  tt.func public @triton__0d1d2d3d4d5d6de7de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<256> : tensor<32x1xi64>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xbf16>
    %cst_1 = arith.constant dense<128> : tensor<32x1xi64>
    %cst_2 = arith.constant dense<524288> : tensor<32x1xi32>
    %cst_3 = arith.constant dense<524288> : tensor<1x32xi32>
    %cst_4 = arith.constant dense<2048> : tensor<32x1xi32>
    %cst_5 = arith.constant dense<3> : tensor<1x32xi64>
    %cst_6 = arith.constant dense<128> : tensor<32x1xi32>
    %cst_7 = arith.constant dense<-128> : tensor<32x1xi32>
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<32x32xf32>
    %cst_9 = arith.constant dense<1048576> : tensor<1x32xi32>
    %cst_10 = arith.constant dense<256> : tensor<1x32xi32>
    %cst_11 = arith.constant dense<2> : tensor<1x32xi64>
    %cst_12 = arith.constant dense<8192> : tensor<1x32xi32>
    %cst_13 = arith.constant dense<4> : tensor<1x32xi32>
    %cst_14 = arith.constant dense<2048> : tensor<1x32xi32>
    %cst_15 = arith.constant dense<256> : tensor<32x1xi32>
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c32_i32 : i32
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %4 = tt.splat %1 : (i32) -> tensor<1x32xi32>
    %5 = arith.addi %4, %3 : tensor<1x32xi32>
    %6 = tt.get_program_id x : i32
    %7 = arith.muli %6, %c32_i32 : i32
    %8 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %9 = tt.splat %7 : (i32) -> tensor<32x1xi32>
    %10 = arith.addi %9, %8 : tensor<32x1xi32>
    %11 = arith.cmpi slt, %10, %cst_15 : tensor<32x1xi32>
    %12 = arith.divsi %5, %cst_14 : tensor<1x32xi32>
    %13 = arith.remsi %12, %cst_13 : tensor<1x32xi32>
    %14 = arith.divsi %5, %cst_12 : tensor<1x32xi32>
    %15 = arith.remsi %5, %cst_12 : tensor<1x32xi32>
    %16 = arith.remsi %5, %cst_14 : tensor<1x32xi32>
    %17 = arith.extsi %13 : tensor<1x32xi32> to tensor<1x32xi64>
    %18 = arith.cmpi slt, %17, %cst_11 : tensor<1x32xi64>
    %19 = arith.extsi %10 : tensor<32x1xi32> to tensor<32x1xi64>
    %20 = arith.cmpi sge, %19, %cst : tensor<32x1xi64>
    %21 = tt.broadcast %20 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %22 = tt.broadcast %18 : (tensor<1x32xi1>) -> tensor<32x32xi1>
    %23 = arith.andi %21, %22 : tensor<32x32xi1>
    %24 = arith.muli %15, %cst_10 : tensor<1x32xi32>
    %25 = tt.broadcast %10 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %26 = tt.broadcast %24 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %27 = arith.addi %25, %26 : tensor<32x32xi32>
    %28 = arith.muli %14, %cst_9 : tensor<1x32xi32>
    %29 = tt.broadcast %28 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %30 = arith.addi %27, %29 : tensor<32x32xi32>
    %31 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<32x32x!tt.ptr<bf16, 1>>
    %32 = tt.addptr %31, %30 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %33 = tt.broadcast %11 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %34 = arith.andi %23, %33 : tensor<32x32xi1>
    %35 = tt.load %32, %34, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %36 = arith.extf %35 : tensor<32x32xbf16> to tensor<32x32xf32>
    %37 = arith.select %23, %36, %cst_8 : tensor<32x32xi1>, tensor<32x32xf32>
    %38 = arith.andi %22, %33 : tensor<32x32xi1>
    %39 = tt.load %32, %38, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %40 = arith.extf %39 : tensor<32x32xbf16> to tensor<32x32xf32>
    %41 = arith.muli %16, %cst_10 : tensor<1x32xi32>
    %42 = tt.broadcast %41 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %43 = arith.addi %25, %42 : tensor<32x32xi32>
    %44 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<32x32x!tt.ptr<f32, 1>>
    %45 = tt.addptr %44, %43 : tensor<32x32x!tt.ptr<f32, 1>>, tensor<32x32xi32>
    %46 = tt.load %45, %38, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xf32>
    %47 = arith.mulf %40, %46 : tensor<32x32xf32>
    %48 = arith.cmpi sge, %19, %cst_1 : tensor<32x1xi64>
    %49 = tt.broadcast %48 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %50 = arith.andi %49, %22 : tensor<32x32xi1>
    %51 = arith.addi %10, %cst_7 : tensor<32x1xi32>
    %52 = tt.broadcast %51 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %53 = arith.addi %52, %26 : tensor<32x32xi32>
    %54 = arith.addi %53, %29 : tensor<32x32xi32>
    %55 = tt.addptr %31, %54 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %56 = arith.andi %50, %33 : tensor<32x32xi1>
    %57 = tt.load %55, %56, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %58 = arith.extf %57 : tensor<32x32xbf16> to tensor<32x32xf32>
    %59 = arith.addi %52, %42 : tensor<32x32xi32>
    %60 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<32x32x!tt.ptr<f32, 1>>
    %61 = tt.addptr %60, %59 : tensor<32x32x!tt.ptr<f32, 1>>, tensor<32x32xi32>
    %62 = tt.load %61, %56, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xf32>
    %63 = arith.mulf %58, %62 : tensor<32x32xf32>
    %64 = arith.subf %cst_8, %63 : tensor<32x32xf32>
    %65 = arith.select %50, %64, %cst_8 : tensor<32x32xi1>, tensor<32x32xf32>
    %66 = arith.addf %47, %65 : tensor<32x32xf32>
    %67 = arith.cmpi slt, %19, %cst_1 : tensor<32x1xi64>
    %68 = tt.broadcast %67 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %69 = arith.andi %68, %22 : tensor<32x32xi1>
    %70 = arith.addi %10, %cst_6 : tensor<32x1xi32>
    %71 = tt.broadcast %70 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %72 = arith.addi %71, %26 : tensor<32x32xi32>
    %73 = arith.addi %72, %29 : tensor<32x32xi32>
    %74 = tt.addptr %31, %73 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %75 = arith.andi %69, %33 : tensor<32x32xi1>
    %76 = tt.load %74, %75, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %77 = arith.extf %76 : tensor<32x32xbf16> to tensor<32x32xf32>
    %78 = arith.addi %71, %42 : tensor<32x32xi32>
    %79 = tt.addptr %60, %78 : tensor<32x32x!tt.ptr<f32, 1>>, tensor<32x32xi32>
    %80 = tt.load %79, %75, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xf32>
    %81 = arith.mulf %77, %80 : tensor<32x32xf32>
    %82 = arith.select %69, %81, %cst_8 : tensor<32x32xi1>, tensor<32x32xf32>
    %83 = arith.addf %66, %82 : tensor<32x32xf32>
    %84 = arith.addf %37, %83 : tensor<32x32xf32>
    %85 = arith.select %22, %84, %cst_8 : tensor<32x32xi1>, tensor<32x32xf32>
    %86 = arith.cmpi sge, %17, %cst_11 : tensor<1x32xi64>
    %87 = arith.cmpi slt, %17, %cst_5 : tensor<1x32xi64>
    %88 = arith.andi %86, %87 : tensor<1x32xi1>
    %89 = arith.muli %10, %cst_4 : tensor<32x1xi32>
    %90 = tt.broadcast %16 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %91 = tt.broadcast %89 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %92 = arith.addi %90, %91 : tensor<32x32xi32>
    %93 = arith.muli %14, %cst_3 : tensor<1x32xi32>
    %94 = tt.broadcast %93 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %95 = arith.addi %92, %94 : tensor<32x32xi32>
    %96 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<32x32x!tt.ptr<f32, 1>>
    %97 = tt.addptr %96, %95 : tensor<32x32x!tt.ptr<f32, 1>>, tensor<32x32xi32>
    %98 = tt.broadcast %88 : (tensor<1x32xi1>) -> tensor<32x32xi1>
    %99 = arith.andi %98, %33 : tensor<32x32xi1>
    %100 = tt.load %97, %99, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xf32>
    %101 = arith.select %98, %100, %cst_8 : tensor<32x32xi1>, tensor<32x32xf32>
    %102 = arith.cmpi sge, %17, %cst_5 : tensor<1x32xi64>
    %103 = arith.addi %43, %29 : tensor<32x32xi32>
    %104 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<32x32x!tt.ptr<bf16, 1>>
    %105 = tt.addptr %104, %103 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %106 = tt.broadcast %102 : (tensor<1x32xi1>) -> tensor<32x32xi1>
    %107 = arith.andi %106, %33 : tensor<32x32xi1>
    %108 = tt.load %105, %107, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %109 = arith.extf %108 : tensor<32x32xbf16> to tensor<32x32xf32>
    %110 = arith.addi %10, %cst_2 : tensor<32x1xi32>
    %111 = tt.broadcast %110 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %112 = arith.addi %111, %42 : tensor<32x32xi32>
    %113 = arith.addi %112, %29 : tensor<32x32xi32>
    %114 = tt.addptr %104, %113 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %115 = tt.load %114, %107, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %116 = arith.extf %115 : tensor<32x32xbf16> to tensor<32x32xf32>
    %117 = arith.addf %109, %116 : tensor<32x32xf32>
    %118 = arith.select %106, %117, %cst_8 : tensor<32x32xi1>, tensor<32x32xf32>
    %119 = arith.select %98, %101, %118 : tensor<32x32xi1>, tensor<32x32xf32>
    %120 = arith.select %22, %85, %119 : tensor<32x32xi1>, tensor<32x32xf32>
    %121 = arith.muli %5, %cst_10 : tensor<1x32xi32>
    %122 = tt.broadcast %121 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %123 = arith.addi %25, %122 : tensor<32x32xi32>
    %124 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<32x32x!tt.ptr<bf16, 1>>
    %125 = tt.addptr %124, %123 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %126 = arith.truncf %120 : tensor<32x32xf32> to tensor<32x32xbf16>
    tt.store %125, %126, %33 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xbf16>
    tt.return
  }
}
