; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = and i32 %9, 7, !dbg !8
  %urem = and i32 %7, 255, !dbg !8
  %11 = shl nuw nsw i32 %urem, 2, !dbg !8
  %12 = or i32 %11, 1024, !dbg !8
  %13 = or i32 %urem, 256, !dbg !8
  %14 = or i32 %urem, 512, !dbg !8
  %15 = or i32 %urem, 768, !dbg !8
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %17 = icmp slt i32 %16, 2304, !dbg !10
  %18 = mul nuw nsw i32 %urem, 2304, !dbg !11
  %19 = mul nuw nsw i32 %13, 2304, !dbg !11
  %20 = mul nuw nsw i32 %14, 2304, !dbg !11
  %21 = mul nuw nsw i32 %15, 2304, !dbg !11
  %22 = add i32 %16, %18, !dbg !12
  %23 = add i32 %16, %19, !dbg !12
  %24 = add i32 %16, %20, !dbg !12
  %25 = add i32 %16, %21, !dbg !12
  %26 = add i32 %22, 2359296, !dbg !12
  %27 = add i32 %22, 2949120, !dbg !12
  %28 = add i32 %22, 3538944, !dbg !12
  %29 = add i32 %22, 4128768, !dbg !12
  %30 = sext i32 %22 to i64, !dbg !13
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !13
  %32 = sext i32 %23 to i64, !dbg !13
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !13
  %34 = sext i32 %24 to i64, !dbg !13
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !13
  %36 = sext i32 %25 to i64, !dbg !13
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !13
  %38 = sext i32 %26 to i64, !dbg !13
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !13
  %40 = sext i32 %27 to i64, !dbg !13
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !13
  %42 = sext i32 %28 to i64, !dbg !13
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !13
  %44 = sext i32 %29 to i64, !dbg !13
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !13
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %54 = zext nneg i32 %urem to i64, !dbg !14
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i64 %54, !dbg !14
  store i32 %46, ptr addrspace(3) %55, align 4, !dbg !14
  %56 = zext nneg i32 %13 to i64, !dbg !14
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56, !dbg !14
  store i32 %47, ptr addrspace(3) %57, align 4, !dbg !14
  %58 = zext nneg i32 %14 to i64, !dbg !14
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i64 %58, !dbg !14
  store i32 %48, ptr addrspace(3) %59, align 4, !dbg !14
  %60 = zext nneg i32 %15 to i64, !dbg !14
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !14
  store i32 %49, ptr addrspace(3) %61, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %62 = zext nneg i32 %11 to i64, !dbg !14
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i64 %62, !dbg !14
  %64 = load float, ptr addrspace(3) %63, align 16, !dbg !14
  %65 = getelementptr inbounds <4 x float>, ptr addrspace(3) %63, i64 0, i64 1, !dbg !14
  %66 = load float, ptr addrspace(3) %65, align 4, !dbg !14
  %67 = getelementptr inbounds <4 x float>, ptr addrspace(3) %63, i64 0, i64 2, !dbg !14
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !15
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !15
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !15
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !15
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !15
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !15
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !15
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !15
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !16
  %77 = zext nneg i32 %12 to i64, !dbg !16
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !16
  %79 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  store i32 %50, ptr addrspace(3) %55, align 4, !dbg !14
  store i32 %51, ptr addrspace(3) %57, align 4, !dbg !14
  store i32 %52, ptr addrspace(3) %59, align 4, !dbg !14
  store i32 %53, ptr addrspace(3) %61, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %80 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !14
  %81 = load <2 x float>, ptr addrspace(3) %63, align 16, !dbg !14
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %17, i32 0, i1 %17) #3, !dbg !17
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %17, i32 0, i1 %17) #3, !dbg !17
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %17, i32 0, i1 %17) #3, !dbg !17
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %17, i32 0, i1 %17) #3, !dbg !17
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %17, i32 0, i1 %17) #3, !dbg !17
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %17, i32 0, i1 %17) #3, !dbg !17
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %17, i32 0, i1 %17) #3, !dbg !17
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %17, i32 0, i1 %17) #3, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !17
  store i32 %82, ptr addrspace(3) %55, align 4, !dbg !17
  store i32 %83, ptr addrspace(3) %57, align 4, !dbg !17
  store i32 %84, ptr addrspace(3) %59, align 4, !dbg !17
  store i32 %85, ptr addrspace(3) %61, align 4, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !17
  %90 = load float, ptr addrspace(3) %63, align 16, !dbg !17
  %91 = load float, ptr addrspace(3) %65, align 4, !dbg !17
  %92 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !17
  store i32 %86, ptr addrspace(3) %55, align 4, !dbg !17
  store i32 %87, ptr addrspace(3) %57, align 4, !dbg !17
  store i32 %88, ptr addrspace(3) %59, align 4, !dbg !17
  store i32 %89, ptr addrspace(3) %61, align 4, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !17
  %93 = load <2 x float>, ptr addrspace(3) %63, align 16, !dbg !17
  %94 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !17
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !18
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !18
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !18
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !18
  %100 = bitcast i32 %96 to float, !dbg !18
  %101 = bitcast i32 %97 to float, !dbg !18
  %102 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !18
  %103 = insertelement <2 x i32> %102, i32 %99, i64 1, !dbg !18
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !18
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !18
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !18
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !18
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !18
  %110 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !18
  %111 = insertelement <2 x i32> %110, i32 %107, i64 1, !dbg !18
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !18
  %113 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !18
  %114 = insertelement <2 x i32> %113, i32 %109, i64 1, !dbg !18
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !18
  %116 = fmul float %90, %100, !dbg !19
  %117 = fmul float %91, %101, !dbg !19
  %118 = fmul <2 x float> %92, %104, !dbg !19
  %119 = fmul <2 x float> %93, %112, !dbg !19
  %120 = fmul <2 x float> %94, %115, !dbg !19
  %121 = fmul float %64, %116, !dbg !20
  %122 = fmul float %66, %117, !dbg !20
  %123 = fmul <2 x float> %79, %118, !dbg !20
  %124 = fmul <2 x float> %81, %119, !dbg !20
  %125 = fmul <2 x float> %80, %120, !dbg !20
  %126 = fadd float %121, 0.000000e+00, !dbg !21
  %127 = fadd float %122, 0.000000e+00, !dbg !21
  %128 = fadd <2 x float> %123, zeroinitializer, !dbg !21
  %129 = fadd <2 x float> %124, zeroinitializer, !dbg !21
  %130 = fadd <2 x float> %125, zeroinitializer, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %131 = fadd float %126, %127, !dbg !26
  %132 = extractelement <2 x float> %128, i64 0, !dbg !26
  %133 = fadd float %132, %131, !dbg !26
  %134 = extractelement <2 x float> %128, i64 1, !dbg !26
  %135 = fadd float %134, %133, !dbg !26
  %136 = extractelement <2 x float> %129, i64 0, !dbg !26
  %137 = fadd float %136, %135, !dbg !26
  %138 = extractelement <2 x float> %129, i64 1, !dbg !26
  %139 = fadd float %138, %137, !dbg !26
  %140 = extractelement <2 x float> %130, i64 0, !dbg !26
  %141 = fadd float %140, %139, !dbg !26
  %142 = extractelement <2 x float> %130, i64 1, !dbg !26
  %143 = fadd float %142, %141, !dbg !26
  %144 = select i1 %17, float %143, float 0.000000e+00, !dbg !26
  %145 = bitcast float %144 to i32, !dbg !22
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 16, i32 31), !dbg !22
  %147 = bitcast i32 %146 to float, !dbg !22
  %148 = fadd float %144, %147, !dbg !26
  %149 = bitcast float %148 to i32, !dbg !22
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 8, i32 31), !dbg !22
  %151 = bitcast i32 %150 to float, !dbg !22
  %152 = fadd float %148, %151, !dbg !26
  %153 = bitcast float %152 to i32, !dbg !22
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 4, i32 31), !dbg !22
  %155 = bitcast i32 %154 to float, !dbg !22
  %156 = fadd float %152, %155, !dbg !26
  %157 = bitcast float %156 to i32, !dbg !22
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 2, i32 31), !dbg !22
  %159 = bitcast i32 %158 to float, !dbg !22
  %160 = fadd float %156, %159, !dbg !26
  %161 = bitcast float %160 to i32, !dbg !22
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !22
  %163 = bitcast i32 %162 to float, !dbg !22
  %164 = fadd float %160, %163, !dbg !26
  %165 = icmp eq i32 %8, 0, !dbg !22
  %166 = zext nneg i32 %10 to i64, !dbg !22
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i64 %166, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, float %164, i1 %165) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %168 = icmp slt i32 %7, 8, !dbg !22
  %169 = sext i32 %7 to i64, !dbg !22
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i64 %169, !dbg !22
  %171 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %170, i1 %168) #3, !dbg !22
  %172 = bitcast float %171 to i32, !dbg !22
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 4, i32 31), !dbg !22
  %174 = bitcast i32 %173 to float, !dbg !22
  %175 = fadd float %171, %174, !dbg !26
  %176 = bitcast float %175 to i32, !dbg !22
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 2, i32 31), !dbg !22
  %178 = bitcast i32 %177 to float, !dbg !22
  %179 = fadd float %175, %178, !dbg !26
  %180 = bitcast float %179 to i32, !dbg !22
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 1, i32 31), !dbg !22
  %182 = bitcast i32 %181 to float, !dbg !22
  %183 = fadd float %179, %182, !dbg !26
  %184 = and i32 %7, 7, !dbg !22
  %185 = icmp eq i32 %184, 0, !dbg !22
  %186 = and i1 %168, %185, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, float %183, i1 %186) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %187 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %188 = insertelement <1 x float> undef, float %187, i64 0, !dbg !30
  store <1 x float> %188, ptr addrspace(3) @global_smem, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %189 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !30
  %190 = sext i32 %16 to i64, !dbg !31
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %190, !dbg !31
  %192 = icmp eq i32 %urem, 0, !dbg !32
  %193 = and i1 %192, %17, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %189, ptr addrspace(1) %191, i1 %193) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cwbee7zcjnqqljmr7qqigjrhv6646azd4b4uvh3enoaanvxnycsk.py", directory: "/tmp/torchinductor_zeus/wb")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 31, column: 45, scope: !5)
!12 = !DILocation(line: 31, column: 40, scope: !5)
!13 = !DILocation(line: 31, column: 34, scope: !5)
!14 = !DILocation(line: 31, column: 51, scope: !5)
!15 = !DILocation(line: 32, column: 34, scope: !5)
!16 = !DILocation(line: 33, column: 34, scope: !5)
!17 = !DILocation(line: 32, column: 51, scope: !5)
!18 = !DILocation(line: 33, column: 39, scope: !5)
!19 = !DILocation(line: 34, column: 22, scope: !5)
!20 = !DILocation(line: 35, column: 22, scope: !5)
!21 = !DILocation(line: 37, column: 23, scope: !5)
!22 = !DILocation(line: 243, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !5, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!25 = !DILocation(line: 39, column: 25, scope: !23)
!26 = !DILocation(line: 233, column: 15, scope: !27, inlinedAt: !28)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 243, column: 36, scope: !27, inlinedAt: !29)
!29 = !DILocation(line: 39, column: 25, scope: !27)
!30 = !DILocation(line: 39, column: 28, scope: !5)
!31 = !DILocation(line: 40, column: 25, scope: !5)
!32 = !DILocation(line: 40, column: 36, scope: !5)
!33 = !DILocation(line: 40, column: 4, scope: !5)
