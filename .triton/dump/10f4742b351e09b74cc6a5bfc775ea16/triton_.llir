; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !5 {
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %16 = shl i32 %15, 1, !dbg !8
  %17 = and i32 %16, 254, !dbg !8
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %19 = shl i32 %18, 8, !dbg !10
  %20 = or i32 %19, %17, !dbg !11
  %21 = icmp slt i32 %20, 2304, !dbg !12
  %22 = sext i32 %20 to i64, !dbg !13
  %23 = getelementptr i16, ptr addrspace(1) %0, i64 %22, !dbg !13
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %21) #1, !dbg !14
  %25 = trunc i32 %24 to i16, !dbg !14
  %extelt.offset = lshr i32 %24, 16, !dbg !14
  %26 = trunc i32 %extelt.offset to i16, !dbg !14
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #1, !dbg !15
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #1, !dbg !15
  %29 = getelementptr i16, ptr addrspace(1) %1, i64 %22, !dbg !16
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %21) #1, !dbg !17
  %31 = trunc i32 %30 to i16, !dbg !17
  %extelt.offset1 = lshr i32 %30, 16, !dbg !17
  %32 = trunc i32 %extelt.offset1 to i16, !dbg !17
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #1, !dbg !18
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #1, !dbg !18
  %35 = getelementptr i16, ptr addrspace(1) %2, i64 %22, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %21) #1, !dbg !20
  %37 = trunc i32 %36 to i16, !dbg !20
  %extelt.offset2 = lshr i32 %36, 16, !dbg !20
  %38 = trunc i32 %extelt.offset2 to i16, !dbg !20
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #1, !dbg !21
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #1, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !23
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %21) #1, !dbg !24
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !24
  %47 = bitcast i32 %45 to float, !dbg !24
  %48 = bitcast i32 %46 to float, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !25
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %21) #1, !dbg !26
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !26
  %53 = bitcast i32 %51 to float, !dbg !26
  %54 = bitcast i32 %52 to float, !dbg !26
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #1, !dbg !27
  %56 = bitcast i32 %55 to float, !dbg !27
  %57 = add i32 %20, 2304, !dbg !28
  %58 = sext i32 %57 to i64, !dbg !29
  %59 = getelementptr i16, ptr addrspace(1) %0, i64 %58, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %21) #1, !dbg !30
  %61 = trunc i32 %60 to i16, !dbg !30
  %extelt.offset3 = lshr i32 %60, 16, !dbg !30
  %62 = trunc i32 %extelt.offset3 to i16, !dbg !30
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #1, !dbg !31
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #1, !dbg !31
  %65 = getelementptr i16, ptr addrspace(1) %1, i64 %58, !dbg !32
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %21) #1, !dbg !33
  %67 = trunc i32 %66 to i16, !dbg !33
  %extelt.offset4 = lshr i32 %66, 16, !dbg !33
  %68 = trunc i32 %extelt.offset4 to i16, !dbg !33
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #1, !dbg !34
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #1, !dbg !34
  %71 = getelementptr i16, ptr addrspace(1) %2, i64 %58, !dbg !35
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %21) #1, !dbg !36
  %73 = trunc i32 %72 to i16, !dbg !36
  %extelt.offset5 = lshr i32 %72, 16, !dbg !36
  %74 = trunc i32 %extelt.offset5 to i16, !dbg !36
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #1, !dbg !37
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #1, !dbg !37
  %77 = getelementptr float, ptr addrspace(1) %3, i64 1, !dbg !38
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !39
  %79 = bitcast i32 %78 to float, !dbg !39
  %80 = getelementptr float, ptr addrspace(1) %5, i64 %58, !dbg !40
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %80, i1 %21) #1, !dbg !41
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !41
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !41
  %84 = bitcast i32 %82 to float, !dbg !41
  %85 = bitcast i32 %83 to float, !dbg !41
  %86 = getelementptr float, ptr addrspace(1) %6, i64 1, !dbg !42
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !43
  %88 = bitcast i32 %87 to float, !dbg !43
  %89 = add i32 %20, 4608, !dbg !44
  %90 = sext i32 %89 to i64, !dbg !45
  %91 = getelementptr i16, ptr addrspace(1) %0, i64 %90, !dbg !45
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %21) #1, !dbg !46
  %93 = trunc i32 %92 to i16, !dbg !46
  %extelt.offset6 = lshr i32 %92, 16, !dbg !46
  %94 = trunc i32 %extelt.offset6 to i16, !dbg !46
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #1, !dbg !47
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #1, !dbg !47
  %97 = getelementptr i16, ptr addrspace(1) %1, i64 %90, !dbg !48
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %21) #1, !dbg !49
  %99 = trunc i32 %98 to i16, !dbg !49
  %extelt.offset7 = lshr i32 %98, 16, !dbg !49
  %100 = trunc i32 %extelt.offset7 to i16, !dbg !49
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #1, !dbg !50
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #1, !dbg !50
  %103 = getelementptr i16, ptr addrspace(1) %2, i64 %90, !dbg !51
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %21) #1, !dbg !52
  %105 = trunc i32 %104 to i16, !dbg !52
  %extelt.offset8 = lshr i32 %104, 16, !dbg !52
  %106 = trunc i32 %extelt.offset8 to i16, !dbg !52
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #1, !dbg !53
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #1, !dbg !53
  %109 = getelementptr float, ptr addrspace(1) %3, i64 2, !dbg !54
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !55
  %111 = bitcast i32 %110 to float, !dbg !55
  %112 = getelementptr float, ptr addrspace(1) %5, i64 %90, !dbg !56
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %112, i1 %21) #1, !dbg !57
  %114 = extractvalue { i32, i32 } %113, 0, !dbg !57
  %115 = extractvalue { i32, i32 } %113, 1, !dbg !57
  %116 = bitcast i32 %114 to float, !dbg !57
  %117 = bitcast i32 %115 to float, !dbg !57
  %118 = getelementptr float, ptr addrspace(1) %6, i64 2, !dbg !58
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !59
  %120 = bitcast i32 %119 to float, !dbg !59
  %121 = add i32 %20, 6912, !dbg !60
  %122 = sext i32 %121 to i64, !dbg !61
  %123 = getelementptr i16, ptr addrspace(1) %0, i64 %122, !dbg !61
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %21) #1, !dbg !62
  %125 = trunc i32 %124 to i16, !dbg !62
  %extelt.offset9 = lshr i32 %124, 16, !dbg !62
  %126 = trunc i32 %extelt.offset9 to i16, !dbg !62
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %125) #1, !dbg !63
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #1, !dbg !63
  %129 = getelementptr i16, ptr addrspace(1) %1, i64 %122, !dbg !64
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %21) #1, !dbg !65
  %131 = trunc i32 %130 to i16, !dbg !65
  %extelt.offset10 = lshr i32 %130, 16, !dbg !65
  %132 = trunc i32 %extelt.offset10 to i16, !dbg !65
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %131) #1, !dbg !66
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %132) #1, !dbg !66
  %135 = getelementptr i16, ptr addrspace(1) %2, i64 %122, !dbg !67
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %21) #1, !dbg !68
  %137 = trunc i32 %136 to i16, !dbg !68
  %extelt.offset11 = lshr i32 %136, 16, !dbg !68
  %138 = trunc i32 %extelt.offset11 to i16, !dbg !68
  %139 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %137) #1, !dbg !69
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #1, !dbg !69
  %141 = getelementptr float, ptr addrspace(1) %3, i64 3, !dbg !70
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #1, !dbg !71
  %143 = bitcast i32 %142 to float, !dbg !71
  %144 = getelementptr float, ptr addrspace(1) %5, i64 %122, !dbg !72
  %145 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %144, i1 %21) #1, !dbg !73
  %146 = extractvalue { i32, i32 } %145, 0, !dbg !73
  %147 = extractvalue { i32, i32 } %145, 1, !dbg !73
  %148 = bitcast i32 %146 to float, !dbg !73
  %149 = bitcast i32 %147 to float, !dbg !73
  %150 = getelementptr float, ptr addrspace(1) %6, i64 3, !dbg !74
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !75
  %152 = bitcast i32 %151 to float, !dbg !75
  %153 = getelementptr i16, ptr addrspace(1) %7, i64 %22, !dbg !76
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %21) #1, !dbg !77
  %155 = trunc i32 %154 to i16, !dbg !77
  %extelt.offset12 = lshr i32 %154, 16, !dbg !77
  %156 = trunc i32 %extelt.offset12 to i16, !dbg !77
  %157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #1, !dbg !78
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %156) #1, !dbg !78
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #1, !dbg !79
  %160 = bitcast i32 %159 to float, !dbg !79
  %161 = getelementptr i16, ptr addrspace(1) %7, i64 %58, !dbg !80
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %21) #1, !dbg !81
  %163 = trunc i32 %162 to i16, !dbg !81
  %extelt.offset13 = lshr i32 %162, 16, !dbg !81
  %164 = trunc i32 %extelt.offset13 to i16, !dbg !81
  %165 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %163) #1, !dbg !82
  %166 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %164) #1, !dbg !82
  %167 = getelementptr float, ptr addrspace(1) %8, i64 1, !dbg !83
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !84
  %169 = bitcast i32 %168 to float, !dbg !84
  %170 = getelementptr i16, ptr addrspace(1) %7, i64 %90, !dbg !85
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %21) #1, !dbg !86
  %172 = trunc i32 %171 to i16, !dbg !86
  %extelt.offset14 = lshr i32 %171, 16, !dbg !86
  %173 = trunc i32 %extelt.offset14 to i16, !dbg !86
  %174 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %172) #1, !dbg !87
  %175 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %173) #1, !dbg !87
  %176 = getelementptr float, ptr addrspace(1) %8, i64 2, !dbg !88
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #1, !dbg !89
  %178 = bitcast i32 %177 to float, !dbg !89
  %179 = getelementptr i16, ptr addrspace(1) %7, i64 %122, !dbg !90
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %21) #1, !dbg !91
  %181 = trunc i32 %180 to i16, !dbg !91
  %extelt.offset15 = lshr i32 %180, 16, !dbg !91
  %182 = trunc i32 %extelt.offset15 to i16, !dbg !91
  %183 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %181) #1, !dbg !92
  %184 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %182) #1, !dbg !92
  %185 = getelementptr float, ptr addrspace(1) %8, i64 3, !dbg !93
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 true) #1, !dbg !94
  %187 = bitcast i32 %186 to float, !dbg !94
  %188 = getelementptr float, ptr addrspace(1) %9, i64 %22, !dbg !95
  %189 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %188, i1 %21) #1, !dbg !96
  %190 = extractvalue { i32, i32 } %189, 0, !dbg !96
  %191 = extractvalue { i32, i32 } %189, 1, !dbg !96
  %192 = bitcast i32 %190 to float, !dbg !96
  %193 = bitcast i32 %191 to float, !dbg !96
  %194 = getelementptr float, ptr addrspace(1) %9, i64 %58, !dbg !97
  %195 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %194, i1 %21) #1, !dbg !98
  %196 = extractvalue { i32, i32 } %195, 0, !dbg !98
  %197 = extractvalue { i32, i32 } %195, 1, !dbg !98
  %198 = bitcast i32 %196 to float, !dbg !98
  %199 = bitcast i32 %197 to float, !dbg !98
  %200 = getelementptr float, ptr addrspace(1) %9, i64 %90, !dbg !99
  %201 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %200, i1 %21) #1, !dbg !100
  %202 = extractvalue { i32, i32 } %201, 0, !dbg !100
  %203 = extractvalue { i32, i32 } %201, 1, !dbg !100
  %204 = bitcast i32 %202 to float, !dbg !100
  %205 = bitcast i32 %203 to float, !dbg !100
  %206 = getelementptr float, ptr addrspace(1) %9, i64 %122, !dbg !101
  %207 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %206, i1 %21) #1, !dbg !102
  %208 = extractvalue { i32, i32 } %207, 0, !dbg !102
  %209 = extractvalue { i32, i32 } %207, 1, !dbg !102
  %210 = bitcast i32 %208 to float, !dbg !102
  %211 = bitcast i32 %209 to float, !dbg !102
  %212 = fadd float %27, %33, !dbg !103
  %213 = fadd float %28, %34, !dbg !103
  %214 = fmul float %39, %42, !dbg !104
  %215 = fmul float %40, %42, !dbg !104
  %216 = fadd float %47, 1.000000e+00, !dbg !105
  %217 = fadd float %48, 1.000000e+00, !dbg !105
  %218 = fmul float %214, %216, !dbg !106
  %219 = fmul float %215, %217, !dbg !106
  %220 = fmul float %53, 4.800000e+01, !dbg !107
  %221 = fmul float %54, 4.800000e+01, !dbg !107
  %222 = fadd float %218, %220, !dbg !108
  %223 = fadd float %219, %221, !dbg !108
  %224 = fmul float %222, %56, !dbg !109
  %225 = fmul float %223, %56, !dbg !109
  %226 = fmul float %212, %224, !dbg !110
  %227 = fmul float %213, %225, !dbg !110
  %228 = fadd float %63, %69, !dbg !111
  %229 = fadd float %64, %70, !dbg !111
  %230 = fmul float %75, %79, !dbg !112
  %231 = fmul float %76, %79, !dbg !112
  %232 = fmul float %216, %230, !dbg !113
  %233 = fmul float %217, %231, !dbg !113
  %234 = fmul float %84, 4.800000e+01, !dbg !114
  %235 = fmul float %85, 4.800000e+01, !dbg !114
  %236 = fadd float %232, %234, !dbg !115
  %237 = fadd float %233, %235, !dbg !115
  %238 = fmul float %236, %88, !dbg !116
  %239 = fmul float %237, %88, !dbg !116
  %240 = fmul float %228, %238, !dbg !117
  %241 = fmul float %229, %239, !dbg !117
  %242 = fadd float %226, %240, !dbg !118
  %243 = fadd float %227, %241, !dbg !118
  %244 = fadd float %95, %101, !dbg !119
  %245 = fadd float %96, %102, !dbg !119
  %246 = fmul float %107, %111, !dbg !120
  %247 = fmul float %108, %111, !dbg !120
  %248 = fmul float %216, %246, !dbg !121
  %249 = fmul float %217, %247, !dbg !121
  %250 = fmul float %116, 4.800000e+01, !dbg !122
  %251 = fmul float %117, 4.800000e+01, !dbg !122
  %252 = fadd float %248, %250, !dbg !123
  %253 = fadd float %249, %251, !dbg !123
  %254 = fmul float %252, %120, !dbg !124
  %255 = fmul float %253, %120, !dbg !124
  %256 = fmul float %244, %254, !dbg !125
  %257 = fmul float %245, %255, !dbg !125
  %258 = fadd float %242, %256, !dbg !126
  %259 = fadd float %243, %257, !dbg !126
  %260 = fadd float %127, %133, !dbg !127
  %261 = fadd float %128, %134, !dbg !127
  %262 = fmul float %139, %143, !dbg !128
  %263 = fmul float %140, %143, !dbg !128
  %264 = fmul float %216, %262, !dbg !129
  %265 = fmul float %217, %263, !dbg !129
  %266 = fmul float %148, 4.800000e+01, !dbg !130
  %267 = fmul float %149, 4.800000e+01, !dbg !130
  %268 = fadd float %264, %266, !dbg !131
  %269 = fadd float %265, %267, !dbg !131
  %270 = fmul float %268, %152, !dbg !132
  %271 = fmul float %269, %152, !dbg !132
  %272 = fmul float %260, %270, !dbg !133
  %273 = fmul float %261, %271, !dbg !133
  %274 = fadd float %258, %272, !dbg !134
  %275 = fadd float %259, %273, !dbg !134
  %276 = fmul float %220, %160, !dbg !135
  %277 = fmul float %221, %160, !dbg !135
  %278 = fmul float %157, %276, !dbg !136
  %279 = fmul float %158, %277, !dbg !136
  %280 = fmul float %234, %169, !dbg !137
  %281 = fmul float %235, %169, !dbg !137
  %282 = fmul float %165, %280, !dbg !138
  %283 = fmul float %166, %281, !dbg !138
  %284 = fadd float %278, %282, !dbg !139
  %285 = fadd float %279, %283, !dbg !139
  %286 = fmul float %250, %178, !dbg !140
  %287 = fmul float %251, %178, !dbg !140
  %288 = fmul float %174, %286, !dbg !141
  %289 = fmul float %175, %287, !dbg !141
  %290 = fadd float %284, %288, !dbg !142
  %291 = fadd float %285, %289, !dbg !142
  %292 = fmul float %266, %187, !dbg !143
  %293 = fmul float %267, %187, !dbg !143
  %294 = fmul float %183, %292, !dbg !144
  %295 = fmul float %184, %293, !dbg !144
  %296 = fadd float %290, %294, !dbg !145
  %297 = fadd float %291, %295, !dbg !145
  %298 = fmul float %214, %192, !dbg !146
  %299 = fmul float %215, %193, !dbg !146
  %300 = fmul float %230, %198, !dbg !147
  %301 = fmul float %231, %199, !dbg !147
  %302 = fadd float %298, %300, !dbg !148
  %303 = fadd float %299, %301, !dbg !148
  %304 = fmul float %246, %204, !dbg !149
  %305 = fmul float %247, %205, !dbg !149
  %306 = fadd float %302, %304, !dbg !150
  %307 = fadd float %303, %305, !dbg !150
  %308 = fmul float %262, %210, !dbg !151
  %309 = fmul float %263, %211, !dbg !151
  %310 = fadd float %306, %308, !dbg !152
  %311 = fadd float %307, %309, !dbg !152
  %312 = getelementptr float, ptr addrspace(1) %10, i64 %22, !dbg !153
  %313 = bitcast float %274 to i32, !dbg !154
  %314 = bitcast float %275 to i32, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %313, i32 %314, ptr addrspace(1) %312, i1 %21) #1, !dbg !154
  %315 = getelementptr float, ptr addrspace(1) %11, i64 %22, !dbg !155
  %316 = bitcast float %296 to i32, !dbg !156
  %317 = bitcast float %297 to i32, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %316, i32 %317, ptr addrspace(1) %315, i1 %21) #1, !dbg !156
  %318 = getelementptr float, ptr addrspace(1) %12, i64 %22, !dbg !157
  %319 = bitcast float %310 to i32, !dbg !158
  %320 = bitcast float %311 to i32, !dbg !158
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %319, i32 %320, ptr addrspace(1) %318, i1 %21) #1, !dbg !158
  ret void, !dbg !159
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cwhzgtt7fb3tra35knxind7p4ho3wxbuzpt3qpdmro5fieca2uqf.py", directory: "/tmp/torchinductor_zeus/wh")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 22, column: 21, scope: !5)
!13 = !DILocation(line: 24, column: 30, scope: !5)
!14 = !DILocation(line: 24, column: 35, scope: !5)
!15 = !DILocation(line: 24, column: 45, scope: !5)
!16 = !DILocation(line: 25, column: 30, scope: !5)
!17 = !DILocation(line: 25, column: 35, scope: !5)
!18 = !DILocation(line: 25, column: 45, scope: !5)
!19 = !DILocation(line: 26, column: 30, scope: !5)
!20 = !DILocation(line: 26, column: 35, scope: !5)
!21 = !DILocation(line: 26, column: 45, scope: !5)
!22 = !DILocation(line: 27, column: 19, scope: !5)
!23 = !DILocation(line: 29, column: 31, scope: !5)
!24 = !DILocation(line: 29, column: 36, scope: !5)
!25 = !DILocation(line: 30, column: 31, scope: !5)
!26 = !DILocation(line: 30, column: 36, scope: !5)
!27 = !DILocation(line: 31, column: 20, scope: !5)
!28 = !DILocation(line: 33, column: 38, scope: !5)
!29 = !DILocation(line: 33, column: 31, scope: !5)
!30 = !DILocation(line: 33, column: 43, scope: !5)
!31 = !DILocation(line: 33, column: 53, scope: !5)
!32 = !DILocation(line: 34, column: 31, scope: !5)
!33 = !DILocation(line: 34, column: 43, scope: !5)
!34 = !DILocation(line: 34, column: 53, scope: !5)
!35 = !DILocation(line: 35, column: 31, scope: !5)
!36 = !DILocation(line: 35, column: 43, scope: !5)
!37 = !DILocation(line: 35, column: 53, scope: !5)
!38 = !DILocation(line: 36, column: 31, scope: !5)
!39 = !DILocation(line: 36, column: 20, scope: !5)
!40 = !DILocation(line: 38, column: 31, scope: !5)
!41 = !DILocation(line: 38, column: 43, scope: !5)
!42 = !DILocation(line: 39, column: 31, scope: !5)
!43 = !DILocation(line: 39, column: 20, scope: !5)
!44 = !DILocation(line: 41, column: 38, scope: !5)
!45 = !DILocation(line: 41, column: 31, scope: !5)
!46 = !DILocation(line: 41, column: 43, scope: !5)
!47 = !DILocation(line: 41, column: 53, scope: !5)
!48 = !DILocation(line: 42, column: 31, scope: !5)
!49 = !DILocation(line: 42, column: 43, scope: !5)
!50 = !DILocation(line: 42, column: 53, scope: !5)
!51 = !DILocation(line: 43, column: 31, scope: !5)
!52 = !DILocation(line: 43, column: 43, scope: !5)
!53 = !DILocation(line: 43, column: 53, scope: !5)
!54 = !DILocation(line: 44, column: 31, scope: !5)
!55 = !DILocation(line: 44, column: 20, scope: !5)
!56 = !DILocation(line: 46, column: 31, scope: !5)
!57 = !DILocation(line: 46, column: 43, scope: !5)
!58 = !DILocation(line: 47, column: 31, scope: !5)
!59 = !DILocation(line: 47, column: 20, scope: !5)
!60 = !DILocation(line: 49, column: 38, scope: !5)
!61 = !DILocation(line: 49, column: 31, scope: !5)
!62 = !DILocation(line: 49, column: 43, scope: !5)
!63 = !DILocation(line: 49, column: 53, scope: !5)
!64 = !DILocation(line: 50, column: 31, scope: !5)
!65 = !DILocation(line: 50, column: 43, scope: !5)
!66 = !DILocation(line: 50, column: 53, scope: !5)
!67 = !DILocation(line: 51, column: 31, scope: !5)
!68 = !DILocation(line: 51, column: 43, scope: !5)
!69 = !DILocation(line: 51, column: 53, scope: !5)
!70 = !DILocation(line: 52, column: 31, scope: !5)
!71 = !DILocation(line: 52, column: 20, scope: !5)
!72 = !DILocation(line: 54, column: 31, scope: !5)
!73 = !DILocation(line: 54, column: 43, scope: !5)
!74 = !DILocation(line: 55, column: 31, scope: !5)
!75 = !DILocation(line: 55, column: 20, scope: !5)
!76 = !DILocation(line: 57, column: 31, scope: !5)
!77 = !DILocation(line: 57, column: 36, scope: !5)
!78 = !DILocation(line: 57, column: 46, scope: !5)
!79 = !DILocation(line: 58, column: 20, scope: !5)
!80 = !DILocation(line: 60, column: 31, scope: !5)
!81 = !DILocation(line: 60, column: 43, scope: !5)
!82 = !DILocation(line: 60, column: 53, scope: !5)
!83 = !DILocation(line: 61, column: 31, scope: !5)
!84 = !DILocation(line: 61, column: 20, scope: !5)
!85 = !DILocation(line: 63, column: 32, scope: !5)
!86 = !DILocation(line: 63, column: 44, scope: !5)
!87 = !DILocation(line: 63, column: 54, scope: !5)
!88 = !DILocation(line: 64, column: 32, scope: !5)
!89 = !DILocation(line: 64, column: 21, scope: !5)
!90 = !DILocation(line: 66, column: 32, scope: !5)
!91 = !DILocation(line: 66, column: 44, scope: !5)
!92 = !DILocation(line: 66, column: 54, scope: !5)
!93 = !DILocation(line: 67, column: 32, scope: !5)
!94 = !DILocation(line: 67, column: 21, scope: !5)
!95 = !DILocation(line: 69, column: 32, scope: !5)
!96 = !DILocation(line: 69, column: 37, scope: !5)
!97 = !DILocation(line: 70, column: 32, scope: !5)
!98 = !DILocation(line: 70, column: 44, scope: !5)
!99 = !DILocation(line: 71, column: 32, scope: !5)
!100 = !DILocation(line: 71, column: 44, scope: !5)
!101 = !DILocation(line: 72, column: 32, scope: !5)
!102 = !DILocation(line: 72, column: 44, scope: !5)
!103 = !DILocation(line: 75, column: 18, scope: !5)
!104 = !DILocation(line: 77, column: 18, scope: !5)
!105 = !DILocation(line: 79, column: 20, scope: !5)
!106 = !DILocation(line: 80, column: 19, scope: !5)
!107 = !DILocation(line: 84, column: 20, scope: !5)
!108 = !DILocation(line: 85, column: 20, scope: !5)
!109 = !DILocation(line: 86, column: 20, scope: !5)
!110 = !DILocation(line: 87, column: 19, scope: !5)
!111 = !DILocation(line: 90, column: 20, scope: !5)
!112 = !DILocation(line: 92, column: 20, scope: !5)
!113 = !DILocation(line: 93, column: 20, scope: !5)
!114 = !DILocation(line: 96, column: 20, scope: !5)
!115 = !DILocation(line: 97, column: 20, scope: !5)
!116 = !DILocation(line: 98, column: 20, scope: !5)
!117 = !DILocation(line: 99, column: 20, scope: !5)
!118 = !DILocation(line: 100, column: 20, scope: !5)
!119 = !DILocation(line: 103, column: 20, scope: !5)
!120 = !DILocation(line: 105, column: 20, scope: !5)
!121 = !DILocation(line: 106, column: 20, scope: !5)
!122 = !DILocation(line: 109, column: 20, scope: !5)
!123 = !DILocation(line: 110, column: 20, scope: !5)
!124 = !DILocation(line: 111, column: 20, scope: !5)
!125 = !DILocation(line: 112, column: 20, scope: !5)
!126 = !DILocation(line: 113, column: 20, scope: !5)
!127 = !DILocation(line: 116, column: 20, scope: !5)
!128 = !DILocation(line: 118, column: 20, scope: !5)
!129 = !DILocation(line: 119, column: 20, scope: !5)
!130 = !DILocation(line: 122, column: 20, scope: !5)
!131 = !DILocation(line: 123, column: 20, scope: !5)
!132 = !DILocation(line: 124, column: 20, scope: !5)
!133 = !DILocation(line: 125, column: 20, scope: !5)
!134 = !DILocation(line: 126, column: 20, scope: !5)
!135 = !DILocation(line: 128, column: 20, scope: !5)
!136 = !DILocation(line: 129, column: 20, scope: !5)
!137 = !DILocation(line: 131, column: 20, scope: !5)
!138 = !DILocation(line: 132, column: 20, scope: !5)
!139 = !DILocation(line: 133, column: 20, scope: !5)
!140 = !DILocation(line: 135, column: 21, scope: !5)
!141 = !DILocation(line: 136, column: 22, scope: !5)
!142 = !DILocation(line: 137, column: 21, scope: !5)
!143 = !DILocation(line: 139, column: 21, scope: !5)
!144 = !DILocation(line: 140, column: 22, scope: !5)
!145 = !DILocation(line: 141, column: 22, scope: !5)
!146 = !DILocation(line: 142, column: 22, scope: !5)
!147 = !DILocation(line: 143, column: 22, scope: !5)
!148 = !DILocation(line: 144, column: 22, scope: !5)
!149 = !DILocation(line: 145, column: 22, scope: !5)
!150 = !DILocation(line: 146, column: 22, scope: !5)
!151 = !DILocation(line: 147, column: 22, scope: !5)
!152 = !DILocation(line: 148, column: 22, scope: !5)
!153 = !DILocation(line: 149, column: 25, scope: !5)
!154 = !DILocation(line: 149, column: 37, scope: !5)
!155 = !DILocation(line: 150, column: 25, scope: !5)
!156 = !DILocation(line: 150, column: 38, scope: !5)
!157 = !DILocation(line: 151, column: 25, scope: !5)
!158 = !DILocation(line: 151, column: 38, scope: !5)
!159 = !DILocation(line: 151, column: 4, scope: !5)
