; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_1 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_1 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_1 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp13 < 288256"
@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d45de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 5, !dbg !10
  %urem = shl i32 %7, 3, !dbg !10
  %9 = and i32 %urem, 2040, !dbg !10
  %10 = or i32 %9, 4, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %12 = icmp slt i32 %11, 4, !dbg !12
  %13 = sext i32 %11 to i64, !dbg !13
  %14 = getelementptr i64, ptr addrspace(1) %0, i64 %13, !dbg !13
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %12) #6, !dbg !14
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %12) #6, !dbg !14
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %12) #6, !dbg !14
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %12) #6, !dbg !14
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %12) #6, !dbg !14
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %12) #6, !dbg !14
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %12) #6, !dbg !14
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %12) #6, !dbg !14
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %12) #6, !dbg !14
  %24 = add i64 %15, 288256, !dbg !15
  %25 = add i64 %23, 288256, !dbg !15
  %26 = icmp slt i64 %15, 0, !dbg !16
  %27 = icmp slt i64 %23, 0, !dbg !16
  %28 = select i1 %26, i64 %24, i64 %15, !dbg !17
  %29 = select i1 %27, i64 %25, i64 %23, !dbg !17
  %30 = icmp ugt i64 %29, 288255, !dbg !18
  %.not3 = and i1 %12, %30, !dbg !19
  %31 = mul i64 %28, 2304, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31
  br i1 %.not3, label %33, label %34, !dbg !20

33:                                               ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !20
  br label %34, !dbg !20

34:                                               ; preds = %33, %6
  %35 = zext nneg i32 %9 to i64, !dbg !21
  %36 = zext nneg i32 %10 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %32, i64 %35, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %32, i64 %36, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #6, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #6, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !23
  %49 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !23
  %50 = insertelement <2 x i32> %49, i32 %41, i64 1, !dbg !23
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !23
  %52 = fmul <2 x float> %51, <float 4.800000e+01, float 4.800000e+01>, !dbg !24
  %53 = fmul <2 x float> %52, %52, !dbg !25
  %54 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !23
  %55 = insertelement <2 x i32> %54, i32 %42, i64 1, !dbg !23
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !23
  %57 = fmul <2 x float> %56, <float 4.800000e+01, float 4.800000e+01>, !dbg !24
  %58 = fmul <2 x float> %57, %57, !dbg !25
  %59 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !23
  %60 = insertelement <2 x i32> %59, i32 %45, i64 1, !dbg !23
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !23
  %62 = fmul <2 x float> %61, <float 4.800000e+01, float 4.800000e+01>, !dbg !24
  %63 = fmul <2 x float> %62, %62, !dbg !25
  %64 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !23
  %65 = insertelement <2 x i32> %64, i32 %47, i64 1, !dbg !23
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !23
  %67 = fmul <2 x float> %66, <float 4.800000e+01, float 4.800000e+01>, !dbg !24
  %68 = fmul <2 x float> %67, %67, !dbg !25
  %69 = insertelement <2 x i1> poison, i1 %12, i64 0, !dbg !26
  %70 = shufflevector <2 x i1> %69, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !26
  %71 = select <2 x i1> %70, <2 x float> %53, <2 x float> zeroinitializer, !dbg !26
  %72 = select <2 x i1> %70, <2 x float> %58, <2 x float> zeroinitializer, !dbg !26
  %73 = select <2 x i1> %70, <2 x float> %63, <2 x float> zeroinitializer, !dbg !26
  %74 = select <2 x i1> %70, <2 x float> %68, <2 x float> zeroinitializer, !dbg !26
  %75 = or i32 %9, 2048, !dbg !27
  %76 = or i32 %9, 2052, !dbg !27
  %77 = icmp ult i32 %75, 2304, !dbg !28
  br i1 %.not3, label %78, label %79, !dbg !20

78:                                               ; preds = %34
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !20
  br label %79, !dbg !20

79:                                               ; preds = %78, %34
  %80 = zext nneg i32 %75 to i64, !dbg !21
  %81 = zext nneg i32 %76 to i64, !dbg !21
  %82 = getelementptr float, ptr addrspace(1) %32, i64 %80, !dbg !22
  %83 = getelementptr float, ptr addrspace(1) %32, i64 %81, !dbg !22
  %84 = and i1 %12, %77, !dbg !29
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #6, !dbg !23
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !23
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !23
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !23
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !23
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #6, !dbg !23
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !23
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !23
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !23
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !23
  %95 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !23
  %96 = insertelement <2 x i32> %95, i32 %87, i64 1, !dbg !23
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !23
  %98 = fmul <2 x float> %97, <float 4.800000e+01, float 4.800000e+01>, !dbg !24
  %99 = fmul <2 x float> %98, %98, !dbg !25
  %100 = insertelement <2 x i1> poison, i1 %84, i64 0, !dbg !26
  %101 = shufflevector <2 x i1> %100, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !26
  %102 = select <2 x i1> %101, <2 x float> %99, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !26
  %103 = fadd <2 x float> %71, %102, !dbg !26
  %104 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !23
  %105 = insertelement <2 x i32> %104, i32 %88, i64 1, !dbg !23
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !23
  %107 = fmul <2 x float> %106, <float 4.800000e+01, float 4.800000e+01>, !dbg !24
  %108 = fmul <2 x float> %107, %107, !dbg !25
  %109 = select <2 x i1> %101, <2 x float> %108, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !26
  %110 = fadd <2 x float> %72, %109, !dbg !26
  %111 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !23
  %112 = insertelement <2 x i32> %111, i32 %91, i64 1, !dbg !23
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !23
  %114 = fmul <2 x float> %113, <float 4.800000e+01, float 4.800000e+01>, !dbg !24
  %115 = fmul <2 x float> %114, %114, !dbg !25
  %116 = select <2 x i1> %101, <2 x float> %115, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !26
  %117 = fadd <2 x float> %73, %116, !dbg !26
  %118 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !23
  %119 = insertelement <2 x i32> %118, i32 %93, i64 1, !dbg !23
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !23
  %121 = fmul <2 x float> %120, <float 4.800000e+01, float 4.800000e+01>, !dbg !24
  %122 = fmul <2 x float> %121, %121, !dbg !25
  %123 = select <2 x i1> %101, <2 x float> %122, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !26
  %124 = fadd <2 x float> %74, %123, !dbg !26
  %125 = and i32 %7, 31, !dbg !10
  %126 = and i32 %8, 7, !dbg !10
  %shift = shufflevector <2 x float> %103, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %127 = fadd <2 x float> %103, %shift, !dbg !30
  %shift32 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %128 = fadd <2 x float> %shift32, %127, !dbg !30
  %129 = fadd <2 x float> %110, %128, !dbg !30
  %shift33 = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %130 = fadd <2 x float> %shift33, %129, !dbg !30
  %131 = fadd <2 x float> %117, %130, !dbg !30
  %shift34 = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %132 = fadd <2 x float> %shift34, %131, !dbg !30
  %133 = fadd <2 x float> %124, %132, !dbg !30
  %134 = extractelement <2 x float> %133, i64 0, !dbg !30
  %135 = bitcast float %134 to i32, !dbg !36
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !36
  %137 = bitcast i32 %136 to float, !dbg !36
  %138 = fadd float %134, %137, !dbg !30
  %139 = bitcast float %138 to i32, !dbg !36
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !36
  %141 = bitcast i32 %140 to float, !dbg !36
  %142 = fadd float %138, %141, !dbg !30
  %143 = bitcast float %142 to i32, !dbg !36
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !36
  %145 = bitcast i32 %144 to float, !dbg !36
  %146 = fadd float %142, %145, !dbg !30
  %147 = bitcast float %146 to i32, !dbg !36
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = fadd float %146, %149, !dbg !30
  %151 = bitcast float %150 to i32, !dbg !36
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !36
  %153 = bitcast i32 %152 to float, !dbg !36
  %154 = fadd float %150, %153, !dbg !30
  %155 = icmp eq i32 %125, 0, !dbg !36
  %156 = zext nneg i32 %126 to i64, !dbg !36
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i64 %156, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, float %154, i1 %155) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %158 = icmp slt i32 %7, 8, !dbg !36
  %159 = sext i32 %7 to i64, !dbg !36
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i64 %159, !dbg !36
  %161 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %158) #6, !dbg !36
  %162 = bitcast float %161 to i32, !dbg !36
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !36
  %164 = bitcast i32 %163 to float, !dbg !36
  %165 = fadd float %161, %164, !dbg !30
  %166 = bitcast float %165 to i32, !dbg !36
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 2, i32 31), !dbg !36
  %168 = bitcast i32 %167 to float, !dbg !36
  %169 = fadd float %165, %168, !dbg !30
  %170 = bitcast float %169 to i32, !dbg !36
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !36
  %172 = bitcast i32 %171 to float, !dbg !36
  %173 = fadd float %169, %172, !dbg !30
  %174 = and i32 %7, 7, !dbg !36
  %175 = icmp eq i32 %174, 0, !dbg !36
  %176 = and i1 %158, %175, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, float %173, i1 %176) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %177 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !36
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 2.304000e+03) #6, !dbg !38
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 2.304000e+03) #6, !dbg !38
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 2.304000e+03) #6, !dbg !38
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 2.304000e+03) #6, !dbg !38
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 2.304000e+03) #6, !dbg !38
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 2.304000e+03) #6, !dbg !38
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 2.304000e+03) #6, !dbg !38
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 2.304000e+03) #6, !dbg !38
  %186 = fadd float %178, 0x3EE4F8B580000000, !dbg !39
  %187 = mul i32 %11, 2304, !dbg !40
  br label %188, !dbg !41

188:                                              ; preds = %79, %__nv_rsqrtf.exit
  %189 = phi i1 [ true, %79 ], [ false, %__nv_rsqrtf.exit ]
  %190 = phi i32 [ 0, %79 ], [ 2048, %__nv_rsqrtf.exit ]
  %191 = or i32 %190, %9, !dbg !42
  %192 = or i32 %190, %10, !dbg !42
  %193 = icmp ult i32 %191, 2304, !dbg !43
  %194 = zext nneg i32 %191 to i64, !dbg !44
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %194, !dbg !44
  %196 = zext nneg i32 %192 to i64, !dbg !44
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %196, !dbg !44
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193) #6, !dbg !45
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !45
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !45
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !45
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !45
  %203 = bitcast i32 %199 to float, !dbg !45
  %204 = bitcast i32 %200 to float, !dbg !45
  %205 = bitcast i32 %201 to float, !dbg !45
  %206 = bitcast i32 %202 to float, !dbg !45
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193) #6, !dbg !45
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !45
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !45
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !45
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !45
  %212 = bitcast i32 %208 to float, !dbg !45
  %213 = bitcast i32 %209 to float, !dbg !45
  %214 = bitcast i32 %210 to float, !dbg !45
  %215 = bitcast i32 %211 to float, !dbg !45
  br i1 %.not3, label %216, label %217, !dbg !46

216:                                              ; preds = %188
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 883, ptr nonnull @assertFunc_1, i64 1), !dbg !46
  br label %217, !dbg !46

217:                                              ; preds = %216, %188
  %218 = getelementptr float, ptr addrspace(1) %32, i64 %194, !dbg !47
  %219 = getelementptr float, ptr addrspace(1) %32, i64 %196, !dbg !47
  %220 = and i1 %12, %193, !dbg !48
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %218, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220) #6, !dbg !49
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !49
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !49
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !49
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !49
  %226 = bitcast i32 %222 to float, !dbg !49
  %227 = bitcast i32 %223 to float, !dbg !49
  %228 = bitcast i32 %224 to float, !dbg !49
  %229 = bitcast i32 %225 to float, !dbg !49
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %219, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220) #6, !dbg !49
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !49
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !49
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !49
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !49
  %235 = bitcast i32 %231 to float, !dbg !49
  %236 = bitcast i32 %232 to float, !dbg !49
  %237 = bitcast i32 %233 to float, !dbg !49
  %238 = bitcast i32 %234 to float, !dbg !49
  %239 = fmul float %226, 4.800000e+01, !dbg !50
  %240 = fmul float %227, 4.800000e+01, !dbg !50
  %241 = fmul float %228, 4.800000e+01, !dbg !50
  %242 = fmul float %229, 4.800000e+01, !dbg !50
  %243 = fmul float %235, 4.800000e+01, !dbg !50
  %244 = fmul float %236, 4.800000e+01, !dbg !50
  %245 = fmul float %237, 4.800000e+01, !dbg !50
  %246 = fmul float %238, 4.800000e+01, !dbg !50
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i = icmp eq i32 %247, 0, !dbg !51
  br i1 %.not.i, label %250, label %248, !dbg !51

248:                                              ; preds = %217
  %249 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %186), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

250:                                              ; preds = %217
  %251 = tail call float @llvm.nvvm.rsqrt.approx.f(float %186), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %248, %250
  %.0.i = phi float [ %249, %248 ], [ %251, %250 ], !dbg !51
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %259 = fmul float %239, %.0.i, !dbg !52
  %260 = fmul float %240, %.0.i, !dbg !52
  %261 = fmul float %241, %.0.i, !dbg !52
  %262 = fmul float %242, %.0.i, !dbg !52
  %263 = fmul float %243, %.0.i, !dbg !52
  %264 = fmul float %244, %.0.i, !dbg !52
  %265 = fmul float %245, %.0.i, !dbg !52
  %266 = fmul float %246, %.0.i, !dbg !52
  %267 = fadd float %203, 1.000000e+00, !dbg !53
  %268 = fadd float %204, 1.000000e+00, !dbg !53
  %269 = fadd float %205, 1.000000e+00, !dbg !53
  %270 = fadd float %206, 1.000000e+00, !dbg !53
  %271 = fadd float %212, 1.000000e+00, !dbg !53
  %272 = fadd float %213, 1.000000e+00, !dbg !53
  %273 = fadd float %214, 1.000000e+00, !dbg !53
  %274 = fadd float %215, 1.000000e+00, !dbg !53
  %275 = fmul float %267, %259, !dbg !54
  %276 = fmul float %268, %260, !dbg !54
  %277 = fmul float %269, %261, !dbg !54
  %278 = fmul float %270, %262, !dbg !54
  %279 = fmul float %271, %263, !dbg !54
  %280 = fmul float %272, %264, !dbg !54
  %281 = fmul float %273, %265, !dbg !54
  %282 = fmul float %274, %266, !dbg !54
  %283 = add i32 %191, %187, !dbg !55
  %284 = sext i32 %283 to i64, !dbg !56
  %285 = getelementptr i16, ptr addrspace(1) %3, i64 %284, !dbg !56
  %286 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %275) #6, !dbg !57
  %287 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %276) #6, !dbg !57
  %288 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %277) #6, !dbg !57
  %289 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %278) #6, !dbg !57
  %290 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %279) #6, !dbg !57
  %291 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %280) #6, !dbg !57
  %292 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %281) #6, !dbg !57
  %293 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %282) #6, !dbg !57
  %294 = insertelement <2 x i16> undef, i16 %286, i64 0, !dbg !57
  %295 = insertelement <2 x i16> %294, i16 %287, i64 1, !dbg !57
  %296 = bitcast <2 x i16> %295 to i32, !dbg !57
  %297 = insertelement <2 x i16> undef, i16 %288, i64 0, !dbg !57
  %298 = insertelement <2 x i16> %297, i16 %289, i64 1, !dbg !57
  %299 = bitcast <2 x i16> %298 to i32, !dbg !57
  %300 = insertelement <2 x i16> undef, i16 %290, i64 0, !dbg !57
  %301 = insertelement <2 x i16> %300, i16 %291, i64 1, !dbg !57
  %302 = bitcast <2 x i16> %301 to i32, !dbg !57
  %303 = insertelement <2 x i16> undef, i16 %292, i64 0, !dbg !57
  %304 = insertelement <2 x i16> %303, i16 %293, i64 1, !dbg !57
  %305 = bitcast <2 x i16> %304 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %299, i32 %302, i32 %305, ptr addrspace(1) %285, i1 %220) #6, !dbg !57
  br i1 %189, label %188, label %306, !dbg !41

306:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cbc6pweon6mczytveh5urbq7gpgbvt5eq2vg2chiiag42zvj7t77.py", directory: "/tmp/torchinductor_zeus/bc")
!4 = !{ptr @triton__0d1d2d3d45de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d45de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d45de", linkageName: "triton__0d1d2d3d45de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 26, column: 30, scope: !7)
!14 = !DILocation(line: 26, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 22, scope: !7)
!16 = !DILocation(line: 33, column: 22, scope: !7)
!17 = !DILocation(line: 34, column: 36, scope: !7)
!18 = !DILocation(line: 35, column: 41, scope: !7)
!19 = !DILocation(line: 36, column: 45, scope: !7)
!20 = !DILocation(line: 35, column: 67, scope: !7)
!21 = !DILocation(line: 36, column: 40, scope: !7)
!22 = !DILocation(line: 36, column: 34, scope: !7)
!23 = !DILocation(line: 36, column: 53, scope: !7)
!24 = !DILocation(line: 38, column: 22, scope: !7)
!25 = !DILocation(line: 39, column: 22, scope: !7)
!26 = !DILocation(line: 42, column: 47, scope: !7)
!27 = !DILocation(line: 29, column: 27, scope: !7)
!28 = !DILocation(line: 30, column: 25, scope: !7)
!29 = !DILocation(line: 36, column: 61, scope: !7)
!30 = !DILocation(line: 233, column: 15, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!33 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!34 = !DILocation(line: 243, column: 36, scope: !31, inlinedAt: !35)
!35 = !DILocation(line: 43, column: 25, scope: !31)
!36 = !DILocation(line: 243, column: 36, scope: !33, inlinedAt: !37)
!37 = !DILocation(line: 43, column: 25, scope: !33)
!38 = !DILocation(line: 57, column: 23, scope: !7)
!39 = !DILocation(line: 59, column: 24, scope: !7)
!40 = !DILocation(line: 66, column: 40, scope: !7)
!41 = !DILocation(line: 44, column: 36, scope: !7)
!42 = !DILocation(line: 45, column: 27, scope: !7)
!43 = !DILocation(line: 46, column: 25, scope: !7)
!44 = !DILocation(line: 48, column: 35, scope: !7)
!45 = !DILocation(line: 48, column: 40, scope: !7)
!46 = !DILocation(line: 52, column: 69, scope: !7)
!47 = !DILocation(line: 53, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 63, scope: !7)
!49 = !DILocation(line: 53, column: 55, scope: !7)
!50 = !DILocation(line: 55, column: 24, scope: !7)
!51 = !DILocation(line: 60, column: 30, scope: !7)
!52 = !DILocation(line: 61, column: 24, scope: !7)
!53 = !DILocation(line: 63, column: 24, scope: !7)
!54 = !DILocation(line: 64, column: 24, scope: !7)
!55 = !DILocation(line: 66, column: 35, scope: !7)
!56 = !DILocation(line: 66, column: 29, scope: !7)
!57 = !DILocation(line: 66, column: 53, scope: !7)
!58 = !DILocation(line: 44, column: 4, scope: !7)
