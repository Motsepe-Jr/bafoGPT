module {
  tt.func public @triton__0d1d2d3d45de(%arg0: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c2304_i32 = arith.constant 2304 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<2304> : tensor<4x1xi64>
    %cst_0 = arith.constant dense<0> : tensor<4x1xi64>
    %cst_1 = arith.constant dense<288256> : tensor<4x1xi64>
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x1024xf32>
    %cst_3 = arith.constant dense<9.99999974E-6> : tensor<4x1xf32>
    %cst_4 = arith.constant dense<2.304000e+03> : tensor<4x1xf32>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32>
    %cst_6 = arith.constant dense<4.800000e+01> : tensor<4x1024xf32>
    %cst_7 = arith.constant dense<2304> : tensor<4x1xi32>
    %cst_8 = arith.constant dense<true> : tensor<4x1xi1>
    %cst_9 = arith.constant dense<2304> : tensor<1x1024xi32>
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<4x1024xf32>
    %cst_11 = arith.constant dense<4> : tensor<4x1xi32>
    %c4_i32 = arith.constant 4 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c4_i32 : i32
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32>
    %3 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<4xi32>) -> tensor<4x1xi32>
    %4 = tt.splat %1 : (i32) -> tensor<4x1xi32>
    %5 = arith.addi %4, %3 : tensor<4x1xi32>
    %6 = arith.cmpi slt, %5, %cst_11 : tensor<4x1xi32>
    %7 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %8 = tt.expand_dims %7 {axis = 0 : i32} : (tensor<1024xi32>) -> tensor<1x1024xi32>
    %9 = tt.splat %arg0 : (!tt.ptr<i64, 1>) -> tensor<4x1x!tt.ptr<i64, 1>>
    %10 = tt.addptr %9, %5 : tensor<4x1x!tt.ptr<i64, 1>>, tensor<4x1xi32>
    %11 = tt.load %10, %6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<4x1xi64>
    %12 = arith.addi %11, %cst_1 : tensor<4x1xi64>
    %13 = arith.cmpi slt, %11, %cst_0 : tensor<4x1xi64>
    %14 = arith.select %13, %12, %11 : tensor<4x1xi1>, tensor<4x1xi64>
    %15 = arith.cmpi sge, %14, %cst_0 : tensor<4x1xi64>
    %16 = arith.cmpi slt, %14, %cst_1 : tensor<4x1xi64>
    %17 = arith.andi %15, %16 : tensor<4x1xi1>
    %18 = arith.xori %6, %cst_8 : tensor<4x1xi1>
    %19 = arith.ori %17, %18 : tensor<4x1xi1>
    %20 = arith.muli %14, %cst : tensor<4x1xi64>
    %21 = tt.broadcast %20 : (tensor<4x1xi64>) -> tensor<4x1024xi64>
    %22 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<4x1024x!tt.ptr<f32, 1>>
    %23 = tt.broadcast %6 : (tensor<4x1xi1>) -> tensor<4x1024xi1>
    %24 = scf.for %arg6 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg7 = %cst_10) -> (tensor<4x1024xf32>)  : i32 {
      %45 = tt.splat %arg6 : (i32) -> tensor<1x1024xi32>
      %46 = arith.addi %45, %8 : tensor<1x1024xi32>
      %47 = arith.cmpi slt, %46, %cst_9 : tensor<1x1024xi32>
      tt.assert %19, "index out of bounds: 0 <= tmp3 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<4x1xi1>
      %48 = arith.extsi %46 : tensor<1x1024xi32> to tensor<1x1024xi64>
      %49 = tt.broadcast %48 : (tensor<1x1024xi64>) -> tensor<4x1024xi64>
      %50 = arith.addi %49, %21 : tensor<4x1024xi64>
      %51 = tt.addptr %22, %50 : tensor<4x1024x!tt.ptr<f32, 1>>, tensor<4x1024xi64>
      %52 = tt.broadcast %47 : (tensor<1x1024xi1>) -> tensor<4x1024xi1>
      %53 = arith.andi %52, %23 : tensor<4x1024xi1>
      %54 = tt.load %51, %53, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<4x1024xf32>
      %55 = arith.mulf %54, %cst_6 : tensor<4x1024xf32>
      %56 = arith.mulf %55, %55 : tensor<4x1024xf32>
      %57 = arith.addf %arg7, %56 : tensor<4x1024xf32>
      %58 = arith.select %53, %57, %arg7 : tensor<4x1024xi1>, tensor<4x1024xf32>
      scf.yield %58 : tensor<4x1024xf32>
    }
    %25 = "tt.reduce"(%24) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %45 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %45 : f32
    }) : (tensor<4x1024xf32>) -> tensor<4xf32>
    %26 = tt.expand_dims %25 {axis = 1 : i32} : (tensor<4xf32>) -> tensor<4x1xf32>
    %27 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %28 = arith.addi %11, %cst_1 : tensor<4x1xi64>
    %29 = arith.cmpi slt, %11, %cst_0 : tensor<4x1xi64>
    %30 = arith.select %29, %28, %11 : tensor<4x1xi1>, tensor<4x1xi64>
    %31 = arith.cmpi sge, %30, %cst_0 : tensor<4x1xi64>
    %32 = arith.cmpi slt, %30, %cst_1 : tensor<4x1xi64>
    %33 = arith.andi %31, %32 : tensor<4x1xi1>
    %34 = arith.xori %6, %cst_8 : tensor<4x1xi1>
    %35 = arith.ori %33, %34 : tensor<4x1xi1>
    %36 = arith.muli %30, %cst : tensor<4x1xi64>
    %37 = tt.broadcast %36 : (tensor<4x1xi64>) -> tensor<4x1024xi64>
    %38 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<4x1024x!tt.ptr<f32, 1>>
    %39 = tt.broadcast %6 : (tensor<4x1xi1>) -> tensor<4x1024xi1>
    %40 = arith.divf %26, %cst_4 : tensor<4x1xf32>
    %41 = arith.addf %40, %cst_3 : tensor<4x1xf32>
    %42 = arith.muli %5, %cst_7 : tensor<4x1xi32>
    %43 = tt.broadcast %42 : (tensor<4x1xi32>) -> tensor<4x1024xi32>
    %44 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<4x1024x!tt.ptr<bf16, 1>>
    scf.for %arg6 = %c0_i32 to %c2304_i32 step %c1024_i32  : i32 {
      %45 = tt.splat %arg6 : (i32) -> tensor<1x1024xi32>
      %46 = arith.addi %45, %8 : tensor<1x1024xi32>
      %47 = arith.cmpi slt, %46, %cst_9 : tensor<1x1024xi32>
      %48 = tt.addptr %27, %46 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %49 = tt.load %48, %47, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      tt.assert %35, "index out of bounds: 0 <= tmp13 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<4x1xi1>
      %50 = arith.extsi %46 : tensor<1x1024xi32> to tensor<1x1024xi64>
      %51 = tt.broadcast %50 : (tensor<1x1024xi64>) -> tensor<4x1024xi64>
      %52 = arith.addi %51, %37 : tensor<4x1024xi64>
      %53 = tt.addptr %38, %52 : tensor<4x1024x!tt.ptr<f32, 1>>, tensor<4x1024xi64>
      %54 = tt.broadcast %47 : (tensor<1x1024xi1>) -> tensor<4x1024xi1>
      %55 = arith.andi %54, %39 : tensor<4x1024xi1>
      %56 = tt.load %53, %55, %cst_10 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<4x1024xf32>
      %57 = arith.mulf %56, %cst_6 : tensor<4x1024xf32>
      %58 = tt.extern_elementwise %41 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<4x1xf32>) -> tensor<4x1xf32>
      %59 = tt.broadcast %58 : (tensor<4x1xf32>) -> tensor<4x1024xf32>
      %60 = arith.mulf %57, %59 : tensor<4x1024xf32>
      %61 = arith.addf %49, %cst_2 : tensor<1x1024xf32>
      %62 = tt.broadcast %61 : (tensor<1x1024xf32>) -> tensor<4x1024xf32>
      %63 = arith.mulf %60, %62 : tensor<4x1024xf32>
      %64 = tt.broadcast %46 : (tensor<1x1024xi32>) -> tensor<4x1024xi32>
      %65 = arith.addi %64, %43 : tensor<4x1024xi32>
      %66 = tt.addptr %44, %65 : tensor<4x1024x!tt.ptr<bf16, 1>>, tensor<4x1024xi32>
      %67 = arith.truncf %63 : tensor<4x1024xf32> to tensor<4x1024xbf16>
      tt.store %66, %67, %55 {cache = 1 : i32, evict = 1 : i32} : tensor<4x1024xbf16>
    }
    tt.return
  }
}
