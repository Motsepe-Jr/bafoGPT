; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_1 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_1 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_1 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp13 < 288256"
@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d45de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 7, !dbg !10
  %10 = and i32 %7, 3, !dbg !10
  %urem = shl i32 %7, 3, !dbg !11
  %11 = and i32 %urem, 1016, !dbg !11
  %12 = or i32 %11, 4, !dbg !11
  %13 = shl i32 %7, 2, !dbg !11
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !12
  %15 = shl i32 %14, 2, !dbg !13
  %16 = or i32 %15, %10, !dbg !14
  %17 = and i32 %9, 1, !dbg !10
  %18 = or i32 %17, 2, !dbg !10
  %19 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !14
  %20 = shufflevector <2 x i32> %19, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !14
  %21 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !14
  %22 = insertelement <2 x i32> %21, i32 %18, i64 1, !dbg !14
  %23 = or <2 x i32> %20, %22, !dbg !14
  %24 = icmp slt <2 x i32> %23, <i32 4, i32 4>, !dbg !15
  %25 = icmp slt i32 %16, 4, !dbg !15
  %26 = extractelement <2 x i32> %23, i64 0, !dbg !16
  %27 = sext i32 %26 to i64, !dbg !16
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = extractelement <2 x i32> %23, i64 1, !dbg !16
  %30 = sext i32 %29 to i64, !dbg !16
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !16
  %32 = sext i32 %16 to i64, !dbg !16
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !16
  %34 = extractelement <2 x i1> %24, i64 0, !dbg !17
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %34) #6, !dbg !17
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %34) #6, !dbg !17
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %34) #6, !dbg !17
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %34) #6, !dbg !17
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %34) #6, !dbg !17
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %34) #6, !dbg !17
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %34) #6, !dbg !17
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %34) #6, !dbg !17
  %43 = extractelement <2 x i1> %24, i64 1, !dbg !17
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %43) #6, !dbg !17
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %43) #6, !dbg !17
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %43) #6, !dbg !17
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %43) #6, !dbg !17
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %43) #6, !dbg !17
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %43) #6, !dbg !17
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %43) #6, !dbg !17
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %43) #6, !dbg !17
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %25) #6, !dbg !17
  %53 = add i64 %35, 288256, !dbg !18
  %54 = add i64 %44, 288256, !dbg !18
  %55 = add i64 %52, 288256, !dbg !18
  %56 = icmp slt i64 %35, 0, !dbg !19
  %57 = icmp slt i64 %44, 0, !dbg !19
  %58 = icmp slt i64 %52, 0, !dbg !19
  %59 = select i1 %56, i64 %53, i64 %35, !dbg !20
  %60 = select i1 %57, i64 %54, i64 %44, !dbg !20
  %61 = select i1 %58, i64 %55, i64 %52, !dbg !20
  %62 = icmp ugt i64 %61, 288255, !dbg !21
  %.not2 = and i1 %25, %62, !dbg !22
  %63 = mul i64 %59, 2304, !dbg !22
  %64 = mul i64 %60, 2304, !dbg !22
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %63
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %64
  br i1 %.not2, label %67, label %68, !dbg !23

67:                                               ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  br label %68, !dbg !23

68:                                               ; preds = %67, %6
  %69 = zext nneg i32 %11 to i64, !dbg !24
  %70 = zext nneg i32 %12 to i64, !dbg !24
  %71 = getelementptr float, ptr addrspace(1) %65, i64 %69, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %65, i64 %70, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %66, i64 %69, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %66, i64 %70, !dbg !25
  %75 = shufflevector <2 x i1> %24, <2 x i1> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !26
  %76 = extractelement <2 x i1> %24, i64 0, !dbg !27
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #6, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !27
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #6, !dbg !27
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !27
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !27
  %87 = extractelement <2 x i1> %24, i64 1, !dbg !27
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #6, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !27
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !27
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #6, !dbg !27
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !27
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !27
  %98 = insertelement <16 x i32> poison, i32 %78, i64 0, !dbg !27
  %99 = insertelement <16 x i32> %98, i32 %79, i64 1, !dbg !27
  %100 = insertelement <16 x i32> %99, i32 %80, i64 2, !dbg !27
  %101 = insertelement <16 x i32> %100, i32 %81, i64 3, !dbg !27
  %102 = insertelement <16 x i32> %101, i32 %83, i64 4, !dbg !27
  %103 = insertelement <16 x i32> %102, i32 %84, i64 5, !dbg !27
  %104 = insertelement <16 x i32> %103, i32 %85, i64 6, !dbg !27
  %105 = insertelement <16 x i32> %104, i32 %86, i64 7, !dbg !27
  %106 = insertelement <16 x i32> %105, i32 %89, i64 8, !dbg !27
  %107 = insertelement <16 x i32> %106, i32 %90, i64 9, !dbg !27
  %108 = insertelement <16 x i32> %107, i32 %91, i64 10, !dbg !27
  %109 = insertelement <16 x i32> %108, i32 %92, i64 11, !dbg !27
  %110 = insertelement <16 x i32> %109, i32 %94, i64 12, !dbg !27
  %111 = insertelement <16 x i32> %110, i32 %95, i64 13, !dbg !27
  %112 = insertelement <16 x i32> %111, i32 %96, i64 14, !dbg !27
  %113 = insertelement <16 x i32> %112, i32 %97, i64 15, !dbg !27
  %114 = bitcast <16 x i32> %113 to <16 x float>, !dbg !27
  %115 = fmul <16 x float> %114, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !28
  %116 = fmul <16 x float> %115, %115, !dbg !29
  %117 = select <16 x i1> %75, <16 x float> %116, <16 x float> zeroinitializer, !dbg !30
  %118 = or i32 %11, 1024, !dbg !31
  %119 = or i32 %11, 1028, !dbg !31
  br i1 %.not2, label %120, label %121, !dbg !23

120:                                              ; preds = %68
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  br label %121, !dbg !23

121:                                              ; preds = %120, %68
  %122 = zext nneg i32 %118 to i64, !dbg !24
  %123 = zext nneg i32 %119 to i64, !dbg !24
  %124 = getelementptr float, ptr addrspace(1) %65, i64 %122, !dbg !25
  %125 = getelementptr float, ptr addrspace(1) %65, i64 %123, !dbg !25
  %126 = getelementptr float, ptr addrspace(1) %66, i64 %122, !dbg !25
  %127 = getelementptr float, ptr addrspace(1) %66, i64 %123, !dbg !25
  %128 = shufflevector <2 x i1> %24, <2 x i1> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !26
  %129 = extractelement <2 x i1> %24, i64 0, !dbg !27
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #6, !dbg !27
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !27
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !27
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !27
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !27
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #6, !dbg !27
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !27
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !27
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !27
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !27
  %140 = extractelement <2 x i1> %24, i64 1, !dbg !27
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #6, !dbg !27
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !27
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !27
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !27
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !27
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #6, !dbg !27
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !27
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !27
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !27
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !27
  %151 = insertelement <16 x i32> poison, i32 %131, i64 0, !dbg !27
  %152 = insertelement <16 x i32> %151, i32 %132, i64 1, !dbg !27
  %153 = insertelement <16 x i32> %152, i32 %133, i64 2, !dbg !27
  %154 = insertelement <16 x i32> %153, i32 %134, i64 3, !dbg !27
  %155 = insertelement <16 x i32> %154, i32 %136, i64 4, !dbg !27
  %156 = insertelement <16 x i32> %155, i32 %137, i64 5, !dbg !27
  %157 = insertelement <16 x i32> %156, i32 %138, i64 6, !dbg !27
  %158 = insertelement <16 x i32> %157, i32 %139, i64 7, !dbg !27
  %159 = insertelement <16 x i32> %158, i32 %142, i64 8, !dbg !27
  %160 = insertelement <16 x i32> %159, i32 %143, i64 9, !dbg !27
  %161 = insertelement <16 x i32> %160, i32 %144, i64 10, !dbg !27
  %162 = insertelement <16 x i32> %161, i32 %145, i64 11, !dbg !27
  %163 = insertelement <16 x i32> %162, i32 %147, i64 12, !dbg !27
  %164 = insertelement <16 x i32> %163, i32 %148, i64 13, !dbg !27
  %165 = insertelement <16 x i32> %164, i32 %149, i64 14, !dbg !27
  %166 = insertelement <16 x i32> %165, i32 %150, i64 15, !dbg !27
  %167 = bitcast <16 x i32> %166 to <16 x float>, !dbg !27
  %168 = fmul <16 x float> %167, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !28
  %169 = fmul <16 x float> %168, %168, !dbg !29
  %170 = select <16 x i1> %128, <16 x float> %169, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !30
  %171 = fadd <16 x float> %117, %170, !dbg !30
  %172 = or i32 %11, 2048, !dbg !31
  %173 = or i32 %11, 2052, !dbg !31
  %174 = icmp ult i32 %172, 2304, !dbg !32
  br i1 %.not2, label %175, label %176, !dbg !23

175:                                              ; preds = %121
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  br label %176, !dbg !23

176:                                              ; preds = %175, %121
  %177 = zext nneg i32 %172 to i64, !dbg !24
  %178 = zext nneg i32 %173 to i64, !dbg !24
  %179 = getelementptr float, ptr addrspace(1) %65, i64 %177, !dbg !25
  %180 = getelementptr float, ptr addrspace(1) %65, i64 %178, !dbg !25
  %181 = getelementptr float, ptr addrspace(1) %66, i64 %177, !dbg !25
  %182 = getelementptr float, ptr addrspace(1) %66, i64 %178, !dbg !25
  %183 = insertelement <2 x i1> poison, i1 %174, i64 0, !dbg !26
  %184 = shufflevector <2 x i1> %183, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !26
  %185 = and <2 x i1> %24, %184, !dbg !26
  %186 = shufflevector <2 x i1> %185, <2 x i1> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !26
  %187 = extractelement <2 x i1> %185, i64 0, !dbg !27
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 %187, i32 0, i1 %187, i32 0, i1 %187, i32 0, i1 %187, i32 0, i1 %187) #6, !dbg !27
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !27
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !27
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !27
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !27
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %180, i1 %187, i32 0, i1 %187, i32 0, i1 %187, i32 0, i1 %187, i32 0, i1 %187) #6, !dbg !27
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !27
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !27
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !27
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !27
  %198 = extractelement <2 x i1> %185, i64 1, !dbg !27
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198) #6, !dbg !27
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !27
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !27
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !27
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !27
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198) #6, !dbg !27
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !27
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !27
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !27
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !27
  %209 = insertelement <16 x i32> poison, i32 %189, i64 0, !dbg !27
  %210 = insertelement <16 x i32> %209, i32 %190, i64 1, !dbg !27
  %211 = insertelement <16 x i32> %210, i32 %191, i64 2, !dbg !27
  %212 = insertelement <16 x i32> %211, i32 %192, i64 3, !dbg !27
  %213 = insertelement <16 x i32> %212, i32 %194, i64 4, !dbg !27
  %214 = insertelement <16 x i32> %213, i32 %195, i64 5, !dbg !27
  %215 = insertelement <16 x i32> %214, i32 %196, i64 6, !dbg !27
  %216 = insertelement <16 x i32> %215, i32 %197, i64 7, !dbg !27
  %217 = insertelement <16 x i32> %216, i32 %200, i64 8, !dbg !27
  %218 = insertelement <16 x i32> %217, i32 %201, i64 9, !dbg !27
  %219 = insertelement <16 x i32> %218, i32 %202, i64 10, !dbg !27
  %220 = insertelement <16 x i32> %219, i32 %203, i64 11, !dbg !27
  %221 = insertelement <16 x i32> %220, i32 %205, i64 12, !dbg !27
  %222 = insertelement <16 x i32> %221, i32 %206, i64 13, !dbg !27
  %223 = insertelement <16 x i32> %222, i32 %207, i64 14, !dbg !27
  %224 = insertelement <16 x i32> %223, i32 %208, i64 15, !dbg !27
  %225 = bitcast <16 x i32> %224 to <16 x float>, !dbg !27
  %226 = fmul <16 x float> %225, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !28
  %227 = fmul <16 x float> %226, %226, !dbg !29
  %228 = select <16 x i1> %186, <16 x float> %227, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !30
  %229 = fadd <16 x float> %171, %228, !dbg !30
  %230 = lshr i32 %7, 5, !dbg !10
  %231 = and i32 %230, 3, !dbg !11
  %232 = and i32 %13, 1020, !dbg !11
  %shift = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %233 = fadd <16 x float> %229, %shift, !dbg !33
  %shift93 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %234 = fadd <16 x float> %shift93, %233, !dbg !33
  %shift94 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %235 = fadd <16 x float> %shift94, %234, !dbg !33
  %shift95 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %236 = fadd <16 x float> %shift95, %235, !dbg !33
  %shift96 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %237 = fadd <16 x float> %shift96, %236, !dbg !33
  %shift97 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %238 = fadd <16 x float> %shift97, %237, !dbg !33
  %shift98 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %239 = fadd <16 x float> %shift98, %238, !dbg !33
  %240 = extractelement <16 x float> %239, i64 0, !dbg !33
  %shift99 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %241 = fadd <16 x float> %229, %shift99, !dbg !33
  %shift100 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 10, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %242 = fadd <16 x float> %shift100, %241, !dbg !33
  %shift101 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 11, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %243 = fadd <16 x float> %shift101, %242, !dbg !33
  %shift102 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 12, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %244 = fadd <16 x float> %shift102, %243, !dbg !33
  %shift103 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 13, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %245 = fadd <16 x float> %shift103, %244, !dbg !33
  %shift104 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 14, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %246 = fadd <16 x float> %shift104, %245, !dbg !33
  %shift105 = shufflevector <16 x float> %229, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %247 = fadd <16 x float> %shift105, %246, !dbg !33
  %248 = extractelement <16 x float> %247, i64 8, !dbg !33
  %249 = bitcast float %240 to i32, !dbg !39
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 16, i32 31), !dbg !39
  %251 = bitcast i32 %250 to float, !dbg !39
  %252 = fadd float %240, %251, !dbg !33
  %253 = bitcast float %252 to i32, !dbg !39
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 8, i32 31), !dbg !39
  %255 = bitcast i32 %254 to float, !dbg !39
  %256 = fadd float %252, %255, !dbg !33
  %257 = bitcast float %256 to i32, !dbg !39
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !39
  %259 = bitcast i32 %258 to float, !dbg !39
  %260 = fadd float %256, %259, !dbg !33
  %261 = bitcast float %260 to i32, !dbg !39
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 2, i32 31), !dbg !39
  %263 = bitcast i32 %262 to float, !dbg !39
  %264 = fadd float %260, %263, !dbg !33
  %265 = bitcast float %264 to i32, !dbg !39
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 1, i32 31), !dbg !39
  %267 = bitcast i32 %266 to float, !dbg !39
  %268 = fadd float %264, %267, !dbg !33
  %269 = bitcast float %248 to i32, !dbg !39
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 16, i32 31), !dbg !39
  %271 = bitcast i32 %270 to float, !dbg !39
  %272 = fadd float %248, %271, !dbg !33
  %273 = bitcast float %272 to i32, !dbg !39
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 8, i32 31), !dbg !39
  %275 = bitcast i32 %274 to float, !dbg !39
  %276 = fadd float %272, %275, !dbg !33
  %277 = bitcast float %276 to i32, !dbg !39
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !39
  %279 = bitcast i32 %278 to float, !dbg !39
  %280 = fadd float %276, %279, !dbg !33
  %281 = bitcast float %280 to i32, !dbg !39
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !39
  %283 = bitcast i32 %282 to float, !dbg !39
  %284 = fadd float %280, %283, !dbg !33
  %285 = bitcast float %284 to i32, !dbg !39
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !39
  %287 = bitcast i32 %286 to float, !dbg !39
  %288 = fadd float %284, %287, !dbg !33
  %289 = icmp eq i32 %8, 0, !dbg !39
  %290 = shl nuw nsw i32 %17, 2, !dbg !39
  %291 = or i32 %290, %231, !dbg !39
  %292 = zext nneg i32 %291 to i64, !dbg !39
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i64 %292, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, float %268, i1 %289) #6, !dbg !39
  %294 = shl nuw nsw i32 %18, 2, !dbg !39
  %295 = or i32 %294, %231, !dbg !39
  %296 = zext nneg i32 %295 to i64, !dbg !39
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i64 %296, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, float %288, i1 %289) #6, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %298 = icmp slt i32 %7, 16, !dbg !39
  %299 = sext i32 %7 to i64, !dbg !39
  %300 = getelementptr float, ptr addrspace(3) @global_smem, i64 %299, !dbg !39
  %301 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %300, i1 %298) #6, !dbg !39
  %302 = bitcast float %301 to i32, !dbg !39
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 2, i32 31), !dbg !39
  %304 = bitcast i32 %303 to float, !dbg !39
  %305 = fadd float %301, %304, !dbg !33
  %306 = bitcast float %305 to i32, !dbg !39
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !39
  %308 = bitcast i32 %307 to float, !dbg !39
  %309 = fadd float %305, %308, !dbg !33
  %310 = icmp eq i32 %10, 0, !dbg !39
  %311 = and i1 %298, %310, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, float %309, i1 %311) #6, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %312 = zext nneg i32 %290 to i64, !dbg !39
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i64 %312, !dbg !39
  %314 = load float, ptr addrspace(3) %313, align 4, !dbg !39
  %315 = zext nneg i32 %294 to i64, !dbg !39
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i64 %315, !dbg !39
  %317 = load float, ptr addrspace(3) %316, align 4, !dbg !39
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !41
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !41
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !41
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !41
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !41
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !41
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !41
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !41
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !41
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !41
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !41
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !41
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !41
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !41
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !41
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !41
  %334 = fadd float %318, 0x3EE4F8B580000000, !dbg !42
  %335 = fadd float %326, 0x3EE4F8B580000000, !dbg !42
  %336 = mul i32 %26, 2304, !dbg !43
  %337 = mul i32 %29, 2304, !dbg !43
  %338 = zext nneg i32 %232 to i64
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i64 %338
  %340 = zext nneg i32 %11 to i64
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i64 %340
  %342 = getelementptr inbounds <8 x float>, ptr addrspace(3) %341, i64 0, i64 1
  %343 = getelementptr inbounds <8 x float>, ptr addrspace(3) %341, i64 0, i64 2
  %344 = getelementptr inbounds <8 x float>, ptr addrspace(3) %341, i64 0, i64 3
  %345 = getelementptr inbounds <8 x float>, ptr addrspace(3) %341, i64 0, i64 4
  %346 = getelementptr inbounds <8 x float>, ptr addrspace(3) %341, i64 0, i64 5
  %347 = getelementptr inbounds <8 x float>, ptr addrspace(3) %341, i64 0, i64 6
  %348 = getelementptr inbounds <8 x float>, ptr addrspace(3) %341, i64 0, i64 7
  br label %349, !dbg !44

349:                                              ; preds = %176, %__nv_rsqrtf.exit26
  %350 = phi i32 [ 0, %176 ], [ %541, %__nv_rsqrtf.exit26 ]
  %351 = or i32 %350, %232, !dbg !45
  %352 = or i32 %350, %11, !dbg !45
  %353 = or i32 %350, %12, !dbg !45
  %354 = icmp ult i32 %351, 2304, !dbg !46
  %355 = icmp ult i32 %352, 2304, !dbg !46
  %356 = zext nneg i32 %351 to i64, !dbg !47
  %357 = getelementptr float, ptr addrspace(1) %2, i64 %356, !dbg !47
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %357, i1 %354, i32 0, i1 %354, i32 0, i1 %354, i32 0, i1 %354, i32 0, i1 %354) #6, !dbg !48
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !48
  %360 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !48
  %361 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !48
  %362 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !48
  %363 = insertelement <4 x i32> poison, i32 %359, i64 0, !dbg !48
  %364 = insertelement <4 x i32> %363, i32 %360, i64 1, !dbg !48
  %365 = insertelement <4 x i32> %364, i32 %361, i64 2, !dbg !48
  %366 = insertelement <4 x i32> %365, i32 %362, i64 3, !dbg !48
  %367 = bitcast <4 x i32> %366 to <4 x float>, !dbg !48
  br i1 %.not2, label %368, label %369, !dbg !49

368:                                              ; preds = %349
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 883, ptr nonnull @assertFunc_1, i64 1), !dbg !49
  br label %369, !dbg !49

369:                                              ; preds = %368, %349
  %370 = zext nneg i32 %352 to i64, !dbg !50
  %371 = zext nneg i32 %353 to i64, !dbg !50
  %372 = getelementptr float, ptr addrspace(1) %65, i64 %370, !dbg !51
  %373 = getelementptr float, ptr addrspace(1) %65, i64 %371, !dbg !51
  %374 = getelementptr float, ptr addrspace(1) %66, i64 %370, !dbg !51
  %375 = getelementptr float, ptr addrspace(1) %66, i64 %371, !dbg !51
  %376 = and i1 %34, %355, !dbg !52
  %377 = and i1 %43, %355, !dbg !52
  %378 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %372, i1 %376, i32 0, i1 %376, i32 0, i1 %376, i32 0, i1 %376, i32 0, i1 %376) #6, !dbg !53
  %379 = extractvalue { i32, i32, i32, i32 } %378, 0, !dbg !53
  %380 = extractvalue { i32, i32, i32, i32 } %378, 1, !dbg !53
  %381 = extractvalue { i32, i32, i32, i32 } %378, 2, !dbg !53
  %382 = extractvalue { i32, i32, i32, i32 } %378, 3, !dbg !53
  %383 = bitcast i32 %379 to float, !dbg !53
  %384 = bitcast i32 %380 to float, !dbg !53
  %385 = bitcast i32 %381 to float, !dbg !53
  %386 = bitcast i32 %382 to float, !dbg !53
  %387 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %373, i1 %376, i32 0, i1 %376, i32 0, i1 %376, i32 0, i1 %376, i32 0, i1 %376) #6, !dbg !53
  %388 = extractvalue { i32, i32, i32, i32 } %387, 0, !dbg !53
  %389 = extractvalue { i32, i32, i32, i32 } %387, 1, !dbg !53
  %390 = extractvalue { i32, i32, i32, i32 } %387, 2, !dbg !53
  %391 = extractvalue { i32, i32, i32, i32 } %387, 3, !dbg !53
  %392 = bitcast i32 %388 to float, !dbg !53
  %393 = bitcast i32 %389 to float, !dbg !53
  %394 = bitcast i32 %390 to float, !dbg !53
  %395 = bitcast i32 %391 to float, !dbg !53
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %374, i1 %377, i32 0, i1 %377, i32 0, i1 %377, i32 0, i1 %377, i32 0, i1 %377) #6, !dbg !53
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !53
  %398 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !53
  %399 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !53
  %400 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !53
  %401 = bitcast i32 %397 to float, !dbg !53
  %402 = bitcast i32 %398 to float, !dbg !53
  %403 = bitcast i32 %399 to float, !dbg !53
  %404 = bitcast i32 %400 to float, !dbg !53
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %375, i1 %377, i32 0, i1 %377, i32 0, i1 %377, i32 0, i1 %377, i32 0, i1 %377) #6, !dbg !53
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !53
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !53
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !53
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !53
  %410 = bitcast i32 %406 to float, !dbg !53
  %411 = bitcast i32 %407 to float, !dbg !53
  %412 = bitcast i32 %408 to float, !dbg !53
  %413 = bitcast i32 %409 to float, !dbg !53
  %414 = fmul float %383, 4.800000e+01, !dbg !54
  %415 = fmul float %384, 4.800000e+01, !dbg !54
  %416 = fmul float %385, 4.800000e+01, !dbg !54
  %417 = fmul float %386, 4.800000e+01, !dbg !54
  %418 = fmul float %392, 4.800000e+01, !dbg !54
  %419 = fmul float %393, 4.800000e+01, !dbg !54
  %420 = fmul float %394, 4.800000e+01, !dbg !54
  %421 = fmul float %395, 4.800000e+01, !dbg !54
  %422 = fmul float %401, 4.800000e+01, !dbg !54
  %423 = fmul float %402, 4.800000e+01, !dbg !54
  %424 = fmul float %403, 4.800000e+01, !dbg !54
  %425 = fmul float %404, 4.800000e+01, !dbg !54
  %426 = fmul float %410, 4.800000e+01, !dbg !54
  %427 = fmul float %411, 4.800000e+01, !dbg !54
  %428 = fmul float %412, 4.800000e+01, !dbg !54
  %429 = fmul float %413, 4.800000e+01, !dbg !54
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i = icmp eq i32 %430, 0, !dbg !55
  br i1 %.not.i, label %433, label %431, !dbg !55

431:                                              ; preds = %369
  %432 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %334), !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !55

433:                                              ; preds = %369
  %434 = tail call float @llvm.nvvm.rsqrt.approx.f(float %334), !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !55

__nv_rsqrtf.exit:                                 ; preds = %431, %433
  %.0.i = phi float [ %432, %431 ], [ %434, %433 ], !dbg !55
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i24 = icmp eq i32 %442, 0, !dbg !55
  br i1 %.not.i24, label %445, label %443, !dbg !55

443:                                              ; preds = %__nv_rsqrtf.exit
  %444 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %335), !dbg !55
  br label %__nv_rsqrtf.exit26, !dbg !55

445:                                              ; preds = %__nv_rsqrtf.exit
  %446 = tail call float @llvm.nvvm.rsqrt.approx.f(float %335), !dbg !55
  br label %__nv_rsqrtf.exit26, !dbg !55

__nv_rsqrtf.exit26:                               ; preds = %443, %445
  %.0.i25 = phi float [ %444, %443 ], [ %446, %445 ], !dbg !55
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %450 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %454 = fmul float %414, %.0.i, !dbg !56
  %455 = fmul float %415, %.0.i, !dbg !56
  %456 = fmul float %416, %.0.i, !dbg !56
  %457 = fmul float %417, %.0.i, !dbg !56
  %458 = fmul float %418, %.0.i, !dbg !56
  %459 = fmul float %419, %.0.i, !dbg !56
  %460 = fmul float %420, %.0.i, !dbg !56
  %461 = fmul float %421, %.0.i, !dbg !56
  %462 = fmul float %422, %.0.i25, !dbg !56
  %463 = fmul float %423, %.0.i25, !dbg !56
  %464 = fmul float %424, %.0.i25, !dbg !56
  %465 = fmul float %425, %.0.i25, !dbg !56
  %466 = fmul float %426, %.0.i25, !dbg !56
  %467 = fmul float %427, %.0.i25, !dbg !56
  %468 = fmul float %428, %.0.i25, !dbg !56
  %469 = fmul float %429, %.0.i25, !dbg !56
  %470 = fadd <4 x float> %367, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  store <4 x float> %470, ptr addrspace(3) %339, align 16, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %471 = load float, ptr addrspace(3) %341, align 32, !dbg !58
  %472 = load float, ptr addrspace(3) %342, align 4, !dbg !58
  %473 = load float, ptr addrspace(3) %343, align 8, !dbg !58
  %474 = load float, ptr addrspace(3) %344, align 4, !dbg !58
  %475 = load float, ptr addrspace(3) %345, align 16, !dbg !58
  %476 = load float, ptr addrspace(3) %346, align 4, !dbg !58
  %477 = load float, ptr addrspace(3) %347, align 8, !dbg !58
  %478 = load float, ptr addrspace(3) %348, align 4, !dbg !58
  %479 = fmul float %454, %471, !dbg !58
  %480 = fmul float %455, %472, !dbg !58
  %481 = fmul float %456, %473, !dbg !58
  %482 = fmul float %457, %474, !dbg !58
  %483 = fmul float %458, %475, !dbg !58
  %484 = fmul float %459, %476, !dbg !58
  %485 = fmul float %460, %477, !dbg !58
  %486 = fmul float %461, %478, !dbg !58
  %487 = fmul float %462, %471, !dbg !58
  %488 = fmul float %463, %472, !dbg !58
  %489 = fmul float %464, %473, !dbg !58
  %490 = fmul float %465, %474, !dbg !58
  %491 = fmul float %466, %475, !dbg !58
  %492 = fmul float %467, %476, !dbg !58
  %493 = fmul float %468, %477, !dbg !58
  %494 = fmul float %469, %478, !dbg !58
  %495 = add i32 %352, %336, !dbg !59
  %496 = add i32 %352, %337, !dbg !59
  %497 = sext i32 %495 to i64, !dbg !60
  %498 = getelementptr i16, ptr addrspace(1) %3, i64 %497, !dbg !60
  %499 = sext i32 %496 to i64, !dbg !60
  %500 = getelementptr i16, ptr addrspace(1) %3, i64 %499, !dbg !60
  %501 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %479) #6, !dbg !61
  %502 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %480) #6, !dbg !61
  %503 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %481) #6, !dbg !61
  %504 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %482) #6, !dbg !61
  %505 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %483) #6, !dbg !61
  %506 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %484) #6, !dbg !61
  %507 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %485) #6, !dbg !61
  %508 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %486) #6, !dbg !61
  %509 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %487) #6, !dbg !61
  %510 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %488) #6, !dbg !61
  %511 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %489) #6, !dbg !61
  %512 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %490) #6, !dbg !61
  %513 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %491) #6, !dbg !61
  %514 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %492) #6, !dbg !61
  %515 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %493) #6, !dbg !61
  %516 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %494) #6, !dbg !61
  %517 = insertelement <2 x i16> undef, i16 %501, i64 0, !dbg !61
  %518 = insertelement <2 x i16> %517, i16 %502, i64 1, !dbg !61
  %519 = bitcast <2 x i16> %518 to i32, !dbg !61
  %520 = insertelement <2 x i16> undef, i16 %503, i64 0, !dbg !61
  %521 = insertelement <2 x i16> %520, i16 %504, i64 1, !dbg !61
  %522 = bitcast <2 x i16> %521 to i32, !dbg !61
  %523 = insertelement <2 x i16> undef, i16 %505, i64 0, !dbg !61
  %524 = insertelement <2 x i16> %523, i16 %506, i64 1, !dbg !61
  %525 = bitcast <2 x i16> %524 to i32, !dbg !61
  %526 = insertelement <2 x i16> undef, i16 %507, i64 0, !dbg !61
  %527 = insertelement <2 x i16> %526, i16 %508, i64 1, !dbg !61
  %528 = bitcast <2 x i16> %527 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %519, i32 %522, i32 %525, i32 %528, ptr addrspace(1) %498, i1 %376) #6, !dbg !61
  %529 = insertelement <2 x i16> undef, i16 %509, i64 0, !dbg !61
  %530 = insertelement <2 x i16> %529, i16 %510, i64 1, !dbg !61
  %531 = bitcast <2 x i16> %530 to i32, !dbg !61
  %532 = insertelement <2 x i16> undef, i16 %511, i64 0, !dbg !61
  %533 = insertelement <2 x i16> %532, i16 %512, i64 1, !dbg !61
  %534 = bitcast <2 x i16> %533 to i32, !dbg !61
  %535 = insertelement <2 x i16> undef, i16 %513, i64 0, !dbg !61
  %536 = insertelement <2 x i16> %535, i16 %514, i64 1, !dbg !61
  %537 = bitcast <2 x i16> %536 to i32, !dbg !61
  %538 = insertelement <2 x i16> undef, i16 %515, i64 0, !dbg !61
  %539 = insertelement <2 x i16> %538, i16 %516, i64 1, !dbg !61
  %540 = bitcast <2 x i16> %539 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %531, i32 %534, i32 %537, i32 %540, ptr addrspace(1) %500, i1 %377) #6, !dbg !61
  %541 = add nuw nsw i32 %350, 1024, !dbg !44
  %542 = icmp ult i32 %350, 1280, !dbg !44
  br i1 %542, label %349, label %543, !dbg !44

543:                                              ; preds = %__nv_rsqrtf.exit26
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cbc6pweon6mczytveh5urbq7gpgbvt5eq2vg2chiiag42zvj7t77.py", directory: "/tmp/torchinductor_zeus/bc")
!4 = !{ptr @triton__0d1d2d3d45de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d45de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d45de", linkageName: "triton__0d1d2d3d45de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 44, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 28, scope: !7)
!13 = !DILocation(line: 21, column: 33, scope: !7)
!14 = !DILocation(line: 22, column: 23, scope: !7)
!15 = !DILocation(line: 23, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 22, scope: !7)
!19 = !DILocation(line: 33, column: 22, scope: !7)
!20 = !DILocation(line: 34, column: 36, scope: !7)
!21 = !DILocation(line: 35, column: 41, scope: !7)
!22 = !DILocation(line: 36, column: 45, scope: !7)
!23 = !DILocation(line: 35, column: 67, scope: !7)
!24 = !DILocation(line: 36, column: 40, scope: !7)
!25 = !DILocation(line: 36, column: 34, scope: !7)
!26 = !DILocation(line: 36, column: 61, scope: !7)
!27 = !DILocation(line: 36, column: 53, scope: !7)
!28 = !DILocation(line: 38, column: 22, scope: !7)
!29 = !DILocation(line: 39, column: 22, scope: !7)
!30 = !DILocation(line: 42, column: 47, scope: !7)
!31 = !DILocation(line: 29, column: 27, scope: !7)
!32 = !DILocation(line: 30, column: 25, scope: !7)
!33 = !DILocation(line: 233, column: 15, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!36 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!37 = !DILocation(line: 243, column: 36, scope: !34, inlinedAt: !38)
!38 = !DILocation(line: 43, column: 25, scope: !34)
!39 = !DILocation(line: 243, column: 36, scope: !36, inlinedAt: !40)
!40 = !DILocation(line: 43, column: 25, scope: !36)
!41 = !DILocation(line: 57, column: 23, scope: !7)
!42 = !DILocation(line: 59, column: 24, scope: !7)
!43 = !DILocation(line: 66, column: 40, scope: !7)
!44 = !DILocation(line: 44, column: 36, scope: !7)
!45 = !DILocation(line: 45, column: 27, scope: !7)
!46 = !DILocation(line: 46, column: 25, scope: !7)
!47 = !DILocation(line: 48, column: 35, scope: !7)
!48 = !DILocation(line: 48, column: 40, scope: !7)
!49 = !DILocation(line: 52, column: 69, scope: !7)
!50 = !DILocation(line: 53, column: 41, scope: !7)
!51 = !DILocation(line: 53, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 63, scope: !7)
!53 = !DILocation(line: 53, column: 55, scope: !7)
!54 = !DILocation(line: 55, column: 24, scope: !7)
!55 = !DILocation(line: 60, column: 30, scope: !7)
!56 = !DILocation(line: 61, column: 24, scope: !7)
!57 = !DILocation(line: 63, column: 24, scope: !7)
!58 = !DILocation(line: 64, column: 24, scope: !7)
!59 = !DILocation(line: 66, column: 35, scope: !7)
!60 = !DILocation(line: 66, column: 29, scope: !7)
!61 = !DILocation(line: 66, column: 53, scope: !7)
!62 = !DILocation(line: 44, column: 4, scope: !7)
