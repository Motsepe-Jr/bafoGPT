#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [2, 4], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [8, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d45de(%arg0: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<4> : tensor<4x1xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<1x1024xi32, #blocked>
    %cst_1 = arith.constant dense<2304> : tensor<1x1024xi32, #blocked1>
    %cst_2 = arith.constant dense<2304> : tensor<4x1xi32, #blocked>
    %cst_3 = arith.constant dense<2304> : tensor<4x1xi64, #blocked>
    %cst_4 = arith.constant dense<0> : tensor<4x1xi64, #blocked>
    %cst_5 = arith.constant dense<288256> : tensor<4x1xi64, #blocked>
    %cst_6 = arith.constant dense<288256> : tensor<4x1xi64, #blocked2>
    %cst_7 = arith.constant dense<0> : tensor<4x1xi64, #blocked2>
    %c0_i32 = arith.constant 0 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %cst_8 = arith.constant dense<true> : tensor<4x1xi1, #blocked2>
    %cst_9 = arith.constant dense<1.000000e+00> : tensor<1x1024xf32, #blocked1>
    %cst_10 = arith.constant dense<9.99999974E-6> : tensor<4x1xf32, #blocked>
    %cst_11 = arith.constant dense<2.304000e+03> : tensor<4x1xf32, #blocked>
    %cst_12 = arith.constant dense<4.800000e+01> : tensor<4x1024xf32, #blocked>
    %cst_13 = arith.constant dense<0.000000e+00> : tensor<4x1024xf32, #blocked>
    %cst_14 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32, #blocked1>
    %c4_i32 = arith.constant 4 : i32
    %cst_15 = arith.constant dense<4> : tensor<4x1xi32, #blocked2>
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c4_i32 : i32
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %3 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %4 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<4x1xi32, #blocked>
    %5 = tt.expand_dims %3 {axis = 1 : i32} : (tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<4x1xi32, #blocked2>
    %6 = tt.splat %1 : (i32) -> tensor<4x1xi32, #blocked>
    %7 = tt.splat %1 : (i32) -> tensor<4x1xi32, #blocked2>
    %8 = arith.addi %6, %4 : tensor<4x1xi32, #blocked>
    %9 = arith.addi %7, %5 : tensor<4x1xi32, #blocked2>
    %10 = arith.cmpi slt, %8, %cst : tensor<4x1xi32, #blocked>
    %11 = arith.cmpi slt, %9, %cst_15 : tensor<4x1xi32, #blocked2>
    %12 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %13 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %14 = tt.expand_dims %12 {axis = 0 : i32} : (tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x1024xi32, #blocked>
    %15 = tt.expand_dims %13 {axis = 0 : i32} : (tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x1024xi32, #blocked1>
    %16 = tt.splat %arg0 : (!tt.ptr<i64, 1>) -> tensor<4x1x!tt.ptr<i64, 1>, #blocked>
    %17 = tt.splat %arg0 : (!tt.ptr<i64, 1>) -> tensor<4x1x!tt.ptr<i64, 1>, #blocked2>
    %18 = tt.addptr %16, %8 : tensor<4x1x!tt.ptr<i64, 1>, #blocked>, tensor<4x1xi32, #blocked>
    %19 = tt.addptr %17, %9 : tensor<4x1x!tt.ptr<i64, 1>, #blocked2>, tensor<4x1xi32, #blocked2>
    %20 = tt.load %18, %10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<4x1xi64, #blocked>
    %21 = tt.load %19, %11 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<4x1xi64, #blocked2>
    %22 = arith.addi %20, %cst_5 : tensor<4x1xi64, #blocked>
    %23 = arith.addi %21, %cst_6 : tensor<4x1xi64, #blocked2>
    %24 = arith.cmpi slt, %20, %cst_4 : tensor<4x1xi64, #blocked>
    %25 = arith.cmpi slt, %21, %cst_7 : tensor<4x1xi64, #blocked2>
    %26 = arith.select %24, %22, %20 : tensor<4x1xi1, #blocked>, tensor<4x1xi64, #blocked>
    %27 = arith.select %25, %23, %21 : tensor<4x1xi1, #blocked2>, tensor<4x1xi64, #blocked2>
    %28 = arith.cmpi sge, %27, %cst_7 : tensor<4x1xi64, #blocked2>
    %29 = arith.cmpi slt, %27, %cst_6 : tensor<4x1xi64, #blocked2>
    %30 = arith.andi %28, %29 : tensor<4x1xi1, #blocked2>
    %31 = arith.xori %11, %cst_8 : tensor<4x1xi1, #blocked2>
    %32 = arith.ori %30, %31 : tensor<4x1xi1, #blocked2>
    %33 = arith.muli %26, %cst_3 : tensor<4x1xi64, #blocked>
    %34 = tt.broadcast %33 : (tensor<4x1xi64, #blocked>) -> tensor<4x1024xi64, #blocked>
    %35 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<4x1024x!tt.ptr<f32, 1>, #blocked>
    %36 = tt.broadcast %10 : (tensor<4x1xi1, #blocked>) -> tensor<4x1024xi1, #blocked>
    %37 = scf.for %arg6 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg7 = %cst_13) -> (tensor<4x1024xf32, #blocked>)  : i32 {
      %46 = tt.splat %arg6 : (i32) -> tensor<1x1024xi32, #blocked>
      %47 = arith.addi %46, %14 : tensor<1x1024xi32, #blocked>
      %48 = arith.cmpi slt, %47, %cst_0 : tensor<1x1024xi32, #blocked>
      tt.assert %32, "index out of bounds: 0 <= tmp3 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<4x1xi1, #blocked2>
      %49 = arith.extsi %47 : tensor<1x1024xi32, #blocked> to tensor<1x1024xi64, #blocked>
      %50 = tt.broadcast %49 : (tensor<1x1024xi64, #blocked>) -> tensor<4x1024xi64, #blocked>
      %51 = arith.addi %50, %34 : tensor<4x1024xi64, #blocked>
      %52 = tt.addptr %35, %51 : tensor<4x1024x!tt.ptr<f32, 1>, #blocked>, tensor<4x1024xi64, #blocked>
      %53 = tt.broadcast %48 : (tensor<1x1024xi1, #blocked>) -> tensor<4x1024xi1, #blocked>
      %54 = arith.andi %53, %36 : tensor<4x1024xi1, #blocked>
      %55 = tt.load %52, %54, %cst_13 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<4x1024xf32, #blocked>
      %56 = arith.mulf %55, %cst_12 : tensor<4x1024xf32, #blocked>
      %57 = arith.mulf %56, %56 : tensor<4x1024xf32, #blocked>
      %58 = arith.addf %arg7, %57 : tensor<4x1024xf32, #blocked>
      %59 = arith.select %54, %58, %arg7 : tensor<4x1024xi1, #blocked>, tensor<4x1024xf32, #blocked>
      scf.yield %59 : tensor<4x1024xf32, #blocked>
    }
    %38 = "tt.reduce"(%37) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %46 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %46 : f32
    }) : (tensor<4x1024xf32, #blocked>) -> tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %39 = tt.expand_dims %38 {axis = 1 : i32} : (tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<4x1xf32, #blocked>
    %40 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>
    %41 = arith.divf %39, %cst_11 : tensor<4x1xf32, #blocked>
    %42 = arith.addf %41, %cst_10 : tensor<4x1xf32, #blocked>
    %43 = arith.muli %8, %cst_2 : tensor<4x1xi32, #blocked>
    %44 = tt.broadcast %43 : (tensor<4x1xi32, #blocked>) -> tensor<4x1024xi32, #blocked>
    %45 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<4x1024x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg6 = %c0_i32 to %c2304_i32 step %c1024_i32  : i32 {
      %46 = tt.splat %arg6 : (i32) -> tensor<1x1024xi32, #blocked1>
      %47 = tt.splat %arg6 : (i32) -> tensor<1x1024xi32, #blocked>
      %48 = arith.addi %46, %15 : tensor<1x1024xi32, #blocked1>
      %49 = arith.addi %47, %14 : tensor<1x1024xi32, #blocked>
      %50 = arith.cmpi slt, %48, %cst_1 : tensor<1x1024xi32, #blocked1>
      %51 = arith.cmpi slt, %49, %cst_0 : tensor<1x1024xi32, #blocked>
      %52 = tt.addptr %40, %48 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
      %53 = tt.load %52, %50, %cst_14 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked1>
      tt.assert %32, "index out of bounds: 0 <= tmp13 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<4x1xi1, #blocked2>
      %54 = arith.extsi %49 : tensor<1x1024xi32, #blocked> to tensor<1x1024xi64, #blocked>
      %55 = tt.broadcast %54 : (tensor<1x1024xi64, #blocked>) -> tensor<4x1024xi64, #blocked>
      %56 = arith.addi %55, %34 : tensor<4x1024xi64, #blocked>
      %57 = tt.addptr %35, %56 : tensor<4x1024x!tt.ptr<f32, 1>, #blocked>, tensor<4x1024xi64, #blocked>
      %58 = tt.broadcast %51 : (tensor<1x1024xi1, #blocked>) -> tensor<4x1024xi1, #blocked>
      %59 = arith.andi %58, %36 : tensor<4x1024xi1, #blocked>
      %60 = tt.load %57, %59, %cst_13 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<4x1024xf32, #blocked>
      %61 = arith.mulf %60, %cst_12 : tensor<4x1024xf32, #blocked>
      %62 = tt.extern_elementwise %42 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<4x1xf32, #blocked>) -> tensor<4x1xf32, #blocked>
      %63 = tt.broadcast %62 : (tensor<4x1xf32, #blocked>) -> tensor<4x1024xf32, #blocked>
      %64 = arith.mulf %61, %63 : tensor<4x1024xf32, #blocked>
      %65 = arith.addf %53, %cst_9 : tensor<1x1024xf32, #blocked1>
      %66 = triton_gpu.convert_layout %65 : (tensor<1x1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked>
      %67 = tt.broadcast %66 : (tensor<1x1024xf32, #blocked>) -> tensor<4x1024xf32, #blocked>
      %68 = arith.mulf %64, %67 : tensor<4x1024xf32, #blocked>
      %69 = tt.broadcast %49 : (tensor<1x1024xi32, #blocked>) -> tensor<4x1024xi32, #blocked>
      %70 = arith.addi %69, %44 : tensor<4x1024xi32, #blocked>
      %71 = tt.addptr %45, %70 : tensor<4x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<4x1024xi32, #blocked>
      %72 = arith.truncf %68 : tensor<4x1024xf32, #blocked> to tensor<4x1024xbf16, #blocked>
      tt.store %71, %72, %59 {cache = 1 : i32, evict = 1 : i32} : tensor<4x1024xbf16, #blocked>
    }
    tt.return
  }
}
