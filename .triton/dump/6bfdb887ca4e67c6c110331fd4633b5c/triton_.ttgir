#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10de11de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x1024xi32, #blocked>
    %c0_i32 = arith.constant 0 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %cst_0 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_1 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32, #blocked>
    %cst_2 = arith.constant dense<4.800000e+01> : tensor<1x1024xf32, #blocked>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x1024xf32, #blocked>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32, #blocked>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x1024xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x1024xi32, #blocked>
    %3 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %4 = tt.splat %3 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %5 = tt.load %4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked>
    %6 = arith.muli %0, %c2304_i32 : i32
    %7 = tt.splat %6 : (i32) -> tensor<1x1024xi32, #blocked>
    %8 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    %9 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    %10 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %11 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    %12 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %13 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %14 = tt.broadcast %5 : (tensor<1x1xf32, #blocked>) -> tensor<1x1024xf32, #blocked>
    %15 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg13 = %cst_4) -> (tensor<1x1024xf32, #blocked>)  : i32 {
      %39 = tt.splat %arg12 : (i32) -> tensor<1x1024xi32, #blocked>
      %40 = arith.addi %39, %2 : tensor<1x1024xi32, #blocked>
      %41 = arith.cmpi slt, %40, %cst : tensor<1x1024xi32, #blocked>
      %42 = arith.addi %40, %7 : tensor<1x1024xi32, #blocked>
      %43 = tt.addptr %8, %42 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %44 = tt.load %43, %41, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %45 = arith.extf %44 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %46 = tt.addptr %9, %42 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %47 = tt.load %46, %41, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %48 = arith.extf %47 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %49 = tt.addptr %10, %40 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %50 = tt.load %49, %41, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %51 = tt.addptr %11, %42 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %52 = tt.load %51, %41, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %53 = arith.extf %52 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %54 = tt.addptr %12, %40 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %55 = tt.load %54, %41, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %56 = tt.addptr %13, %42 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %57 = tt.load %56, %41, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %58 = arith.addf %45, %48 : tensor<1x1024xf32, #blocked>
      %59 = arith.addf %50, %cst_3 : tensor<1x1024xf32, #blocked>
      %60 = arith.mulf %58, %59 : tensor<1x1024xf32, #blocked>
      %61 = arith.mulf %53, %14 : tensor<1x1024xf32, #blocked>
      %62 = arith.addf %55, %cst_3 : tensor<1x1024xf32, #blocked>
      %63 = arith.mulf %61, %62 : tensor<1x1024xf32, #blocked>
      %64 = arith.mulf %57, %cst_2 : tensor<1x1024xf32, #blocked>
      %65 = arith.addf %63, %64 : tensor<1x1024xf32, #blocked>
      %66 = arith.mulf %60, %65 : tensor<1x1024xf32, #blocked>
      %67 = arith.addf %arg13, %66 : tensor<1x1024xf32, #blocked>
      %68 = arith.select %41, %67, %arg13 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
      scf.yield %68 : tensor<1x1024xf32, #blocked>
    }
    %16 = "tt.reduce"(%15) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %39 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %39 : f32
    }) : (tensor<1x1024xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %17 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %18 = tt.addptr %arg8, %0 : !tt.ptr<f32, 1>, i32
    %19 = tt.splat %18 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %20 = tt.load %19 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked>
    %21 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %22 = arith.mulf %17, %cst_1 : tensor<1x1xf32, #blocked>
    %23 = arith.mulf %20, %20 : tensor<1x1xf32, #blocked>
    %24 = arith.mulf %23, %20 : tensor<1x1xf32, #blocked>
    %25 = arith.mulf %22, %24 : tensor<1x1xf32, #blocked>
    %26 = arith.divf %25, %cst_0 : tensor<1x1xf32, #blocked>
    %27 = tt.broadcast %26 : (tensor<1x1xf32, #blocked>) -> tensor<1x1024xf32, #blocked>
    %28 = tt.broadcast %20 : (tensor<1x1xf32, #blocked>) -> tensor<1x1024xf32, #blocked>
    %29 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg13 = %cst_4) -> (tensor<1x1024xf32, #blocked>)  : i32 {
      %39 = tt.splat %arg12 : (i32) -> tensor<1x1024xi32, #blocked>
      %40 = arith.addi %39, %2 : tensor<1x1024xi32, #blocked>
      %41 = arith.cmpi slt, %40, %cst : tensor<1x1024xi32, #blocked>
      %42 = arith.addi %40, %7 : tensor<1x1024xi32, #blocked>
      %43 = tt.addptr %11, %42 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %44 = tt.load %43, %41, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %45 = arith.extf %44 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %46 = tt.addptr %12, %40 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %47 = tt.load %46, %41, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %48 = tt.addptr %13, %42 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %49 = tt.load %48, %41, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %50 = tt.addptr %21, %42 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %51 = tt.load %50, %41, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %52 = tt.addptr %8, %42 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %53 = tt.load %52, %41, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %54 = arith.extf %53 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %55 = tt.addptr %9, %42 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %56 = tt.load %55, %41, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %57 = arith.extf %56 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %58 = tt.addptr %10, %40 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %59 = tt.load %58, %41, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %60 = arith.mulf %45, %14 : tensor<1x1024xf32, #blocked>
      %61 = arith.addf %47, %cst_3 : tensor<1x1024xf32, #blocked>
      %62 = arith.mulf %60, %61 : tensor<1x1024xf32, #blocked>
      %63 = arith.mulf %49, %cst_2 : tensor<1x1024xf32, #blocked>
      %64 = arith.addf %62, %63 : tensor<1x1024xf32, #blocked>
      %65 = arith.mulf %27, %64 : tensor<1x1024xf32, #blocked>
      %66 = arith.addf %54, %57 : tensor<1x1024xf32, #blocked>
      %67 = arith.addf %59, %cst_3 : tensor<1x1024xf32, #blocked>
      %68 = arith.mulf %66, %67 : tensor<1x1024xf32, #blocked>
      %69 = arith.mulf %68, %28 : tensor<1x1024xf32, #blocked>
      %70 = arith.addf %51, %69 : tensor<1x1024xf32, #blocked>
      %71 = arith.addf %70, %65 : tensor<1x1024xf32, #blocked>
      %72 = arith.addf %71, %65 : tensor<1x1024xf32, #blocked>
      %73 = arith.mulf %72, %61 : tensor<1x1024xf32, #blocked>
      %74 = arith.mulf %73, %45 : tensor<1x1024xf32, #blocked>
      %75 = arith.addf %arg13, %74 : tensor<1x1024xf32, #blocked>
      %76 = arith.select %41, %75, %arg13 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
      tt.store %50, %72, %41 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xf32, #blocked>
      scf.yield %76 : tensor<1x1024xf32, #blocked>
    }
    %30 = "tt.reduce"(%29) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %39 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %39 : f32
    }) : (tensor<1x1024xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %31 = tt.expand_dims %30 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %32 = arith.mulf %31, %cst_1 : tensor<1x1xf32, #blocked>
    %33 = arith.mulf %5, %5 : tensor<1x1xf32, #blocked>
    %34 = arith.mulf %33, %5 : tensor<1x1xf32, #blocked>
    %35 = arith.mulf %32, %34 : tensor<1x1xf32, #blocked>
    %36 = arith.divf %35, %cst_0 : tensor<1x1xf32, #blocked>
    %37 = tt.broadcast %36 : (tensor<1x1xf32, #blocked>) -> tensor<1x1024xf32, #blocked>
    %38 = tt.splat %arg9 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg12 = %c0_i32 to %c2304_i32 step %c1024_i32  : i32 {
      %39 = tt.splat %arg12 : (i32) -> tensor<1x1024xi32, #blocked>
      %40 = arith.addi %39, %2 : tensor<1x1024xi32, #blocked>
      %41 = arith.cmpi slt, %40, %cst : tensor<1x1024xi32, #blocked>
      %42 = arith.addi %40, %7 : tensor<1x1024xi32, #blocked>
      %43 = tt.addptr %21, %42 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %44 = tt.load %43, %41, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %45 = tt.addptr %12, %40 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %46 = tt.load %45, %41, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %47 = tt.addptr %11, %42 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %48 = tt.load %47, %41, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %49 = arith.extf %48 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %50 = arith.addf %46, %cst_3 : tensor<1x1024xf32, #blocked>
      %51 = arith.mulf %44, %50 : tensor<1x1024xf32, #blocked>
      %52 = arith.mulf %51, %14 : tensor<1x1024xf32, #blocked>
      %53 = arith.mulf %37, %49 : tensor<1x1024xf32, #blocked>
      %54 = arith.addf %52, %53 : tensor<1x1024xf32, #blocked>
      %55 = arith.addf %54, %53 : tensor<1x1024xf32, #blocked>
      %56 = tt.addptr %38, %42 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %57 = arith.truncf %55 : tensor<1x1024xf32, #blocked> to tensor<1x1024xbf16, #blocked>
      tt.store %56, %57, %41 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xbf16, #blocked>
    }
    tt.return
  }
}
