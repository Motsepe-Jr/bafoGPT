; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d10de11de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !5 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %14 = lshr i32 %13, 5, !dbg !8
  %urem = shl i32 %13, 2, !dbg !8
  %15 = and i32 %urem, 1020, !dbg !8
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %17 = sext i32 %16 to i64, !dbg !10
  %18 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !10
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !11
  %20 = bitcast i32 %19 to float, !dbg !11
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !11
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !11
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !11
  %24 = mul i32 %16, 2304, !dbg !12
  %25 = insertelement <4 x float> poison, float %20, i64 0, !dbg !13
  %26 = shufflevector <4 x float> %25, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !13
  br label %27, !dbg !14

27:                                               ; preds = %12, %27
  %28 = phi i32 [ 0, %12 ], [ %129, %27 ]
  %29 = phi <4 x float> [ zeroinitializer, %12 ], [ %128, %27 ]
  %30 = or i32 %28, %15, !dbg !15
  %31 = icmp ult i32 %30, 2304, !dbg !16
  %32 = add i32 %30, %24, !dbg !17
  %33 = sext i32 %32 to i64, !dbg !18
  %34 = getelementptr i16, ptr addrspace(1) %1, i64 %33, !dbg !18
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !19
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !19
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !19
  %38 = trunc i32 %36 to i16, !dbg !19
  %extelt.offset10 = lshr i32 %36, 16, !dbg !19
  %39 = trunc i32 %extelt.offset10 to i16, !dbg !19
  %40 = trunc i32 %37 to i16, !dbg !19
  %extelt.offset11 = lshr i32 %37, 16, !dbg !19
  %41 = trunc i32 %extelt.offset11 to i16, !dbg !19
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !20
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #3, !dbg !20
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !20
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #3, !dbg !20
  %46 = getelementptr i16, ptr addrspace(1) %2, i64 %33, !dbg !21
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !22
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !22
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !22
  %50 = trunc i32 %48 to i16, !dbg !22
  %extelt.offset12 = lshr i32 %48, 16, !dbg !22
  %51 = trunc i32 %extelt.offset12 to i16, !dbg !22
  %52 = trunc i32 %49 to i16, !dbg !22
  %extelt.offset13 = lshr i32 %49, 16, !dbg !22
  %53 = trunc i32 %extelt.offset13 to i16, !dbg !22
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #3, !dbg !23
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !23
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #3, !dbg !23
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #3, !dbg !23
  %58 = zext nneg i32 %30 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !24
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %65 = getelementptr i16, ptr addrspace(1) %4, i64 %33, !dbg !26
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !27
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !27
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !27
  %69 = trunc i32 %67 to i16, !dbg !27
  %extelt.offset14 = lshr i32 %67, 16, !dbg !27
  %70 = trunc i32 %extelt.offset14 to i16, !dbg !27
  %71 = trunc i32 %68 to i16, !dbg !27
  %extelt.offset15 = lshr i32 %68, 16, !dbg !27
  %72 = trunc i32 %extelt.offset15 to i16, !dbg !27
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #3, !dbg !28
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #3, !dbg !28
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #3, !dbg !28
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #3, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %6, i64 %58, !dbg !29
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %77, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !30
  %83 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !31
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !32
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !32
  %89 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !25
  %90 = insertelement <4 x i32> %89, i32 %62, i64 1, !dbg !25
  %91 = insertelement <4 x i32> %90, i32 %63, i64 2, !dbg !25
  %92 = insertelement <4 x i32> %91, i32 %64, i64 3, !dbg !25
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !25
  %94 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !30
  %95 = insertelement <4 x i32> %94, i32 %80, i64 1, !dbg !30
  %96 = insertelement <4 x i32> %95, i32 %81, i64 2, !dbg !30
  %97 = insertelement <4 x i32> %96, i32 %82, i64 3, !dbg !30
  %98 = bitcast <4 x i32> %97 to <4 x float>, !dbg !30
  %99 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !32
  %100 = insertelement <4 x i32> %99, i32 %86, i64 1, !dbg !32
  %101 = insertelement <4 x i32> %100, i32 %87, i64 2, !dbg !32
  %102 = insertelement <4 x i32> %101, i32 %88, i64 3, !dbg !32
  %103 = bitcast <4 x i32> %102 to <4 x float>, !dbg !32
  %104 = insertelement <4 x float> poison, float %42, i64 0, !dbg !33
  %105 = insertelement <4 x float> %104, float %43, i64 1, !dbg !33
  %106 = insertelement <4 x float> %105, float %44, i64 2, !dbg !33
  %107 = insertelement <4 x float> %106, float %45, i64 3, !dbg !33
  %108 = insertelement <4 x float> poison, float %54, i64 0, !dbg !33
  %109 = insertelement <4 x float> %108, float %55, i64 1, !dbg !33
  %110 = insertelement <4 x float> %109, float %56, i64 2, !dbg !33
  %111 = insertelement <4 x float> %110, float %57, i64 3, !dbg !33
  %112 = fadd <4 x float> %107, %111, !dbg !33
  %113 = fadd <4 x float> %93, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !34
  %114 = fmul <4 x float> %112, %113, !dbg !35
  %115 = insertelement <4 x float> poison, float %73, i64 0, !dbg !13
  %116 = insertelement <4 x float> %115, float %74, i64 1, !dbg !13
  %117 = insertelement <4 x float> %116, float %75, i64 2, !dbg !13
  %118 = insertelement <4 x float> %117, float %76, i64 3, !dbg !13
  %119 = fmul <4 x float> %118, %26, !dbg !13
  %120 = fadd <4 x float> %98, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !36
  %121 = fmul <4 x float> %119, %120, !dbg !37
  %122 = fmul <4 x float> %103, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !38
  %123 = fadd <4 x float> %121, %122, !dbg !39
  %124 = fmul <4 x float> %114, %123, !dbg !40
  %125 = insertelement <4 x i1> poison, i1 %31, i64 0, !dbg !41
  %126 = shufflevector <4 x i1> %125, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !41
  %127 = select <4 x i1> %126, <4 x float> %124, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !41
  %128 = fadd <4 x float> %29, %127, !dbg !41
  %129 = add nuw nsw i32 %28, 1024, !dbg !14
  %130 = icmp ult i32 %28, 1280, !dbg !14
  br i1 %130, label %27, label %131, !dbg !14

131:                                              ; preds = %27
  %132 = and i32 %13, 31, !dbg !8
  %133 = and i32 %14, 7, !dbg !8
  %134 = bitcast i32 %22 to float, !dbg !11
  %shift = shufflevector <4 x float> %128, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !42
  %135 = fadd <4 x float> %128, %shift, !dbg !42
  %shift38 = shufflevector <4 x float> %128, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !42
  %136 = fadd <4 x float> %shift38, %135, !dbg !42
  %shift39 = shufflevector <4 x float> %128, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !42
  %137 = fadd <4 x float> %shift39, %136, !dbg !42
  %138 = extractelement <4 x float> %137, i64 0, !dbg !42
  %139 = bitcast float %138 to i32, !dbg !48
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 16, i32 31), !dbg !48
  %141 = bitcast i32 %140 to float, !dbg !48
  %142 = fadd float %138, %141, !dbg !42
  %143 = bitcast float %142 to i32, !dbg !48
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !48
  %145 = bitcast i32 %144 to float, !dbg !48
  %146 = fadd float %142, %145, !dbg !42
  %147 = bitcast float %146 to i32, !dbg !48
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !48
  %149 = bitcast i32 %148 to float, !dbg !48
  %150 = fadd float %146, %149, !dbg !42
  %151 = bitcast float %150 to i32, !dbg !48
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !48
  %153 = bitcast i32 %152 to float, !dbg !48
  %154 = fadd float %150, %153, !dbg !42
  %155 = bitcast float %154 to i32, !dbg !48
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !48
  %157 = bitcast i32 %156 to float, !dbg !48
  %158 = fadd float %154, %157, !dbg !42
  %159 = icmp eq i32 %132, 0, !dbg !48
  %160 = zext nneg i32 %133 to i64, !dbg !48
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i64 %160, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, float %158, i1 %159) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %162 = icmp slt i32 %13, 8, !dbg !48
  %163 = sext i32 %13 to i64, !dbg !48
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i64 %163, !dbg !48
  %165 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %164, i1 %162) #3, !dbg !48
  %166 = bitcast float %165 to i32, !dbg !48
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !48
  %168 = bitcast i32 %167 to float, !dbg !48
  %169 = fadd float %165, %168, !dbg !42
  %170 = bitcast float %169 to i32, !dbg !48
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !48
  %172 = bitcast i32 %171 to float, !dbg !48
  %173 = fadd float %169, %172, !dbg !42
  %174 = bitcast float %173 to i32, !dbg !48
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !48
  %176 = bitcast i32 %175 to float, !dbg !48
  %177 = fadd float %173, %176, !dbg !42
  %178 = and i32 %13, 7, !dbg !48
  %179 = icmp eq i32 %178, 0, !dbg !48
  %180 = and i1 %162, %179, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, float %177, i1 %180) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %181 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !48
  %182 = getelementptr float, ptr addrspace(1) %8, i64 %17, !dbg !50
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #3, !dbg !51
  %184 = bitcast i32 %183 to float, !dbg !51
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #3, !dbg !51
  %186 = bitcast i32 %185 to float, !dbg !51
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #3, !dbg !51
  %188 = bitcast i32 %187 to float, !dbg !51
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #3, !dbg !51
  %190 = bitcast i32 %189 to float, !dbg !51
  %191 = fmul float %181, -5.000000e-01, !dbg !52
  %192 = fmul float %184, %184, !dbg !53
  %193 = fmul float %186, %186, !dbg !53
  %194 = fmul float %188, %188, !dbg !53
  %195 = fmul float %190, %190, !dbg !53
  %196 = fmul float %192, %184, !dbg !54
  %197 = fmul float %193, %186, !dbg !54
  %198 = fmul float %194, %188, !dbg !54
  %199 = fmul float %195, %190, !dbg !54
  %200 = fmul float %191, %196, !dbg !55
  %201 = fmul float %191, %197, !dbg !55
  %202 = fmul float %191, %198, !dbg !55
  %203 = fmul float %191, %199, !dbg !55
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float 2.304000e+03) #3, !dbg !56
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float 2.304000e+03) #3, !dbg !56
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float 2.304000e+03) #3, !dbg !56
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float 2.304000e+03) #3, !dbg !56
  %208 = insertelement <4 x float> poison, float %204, i64 0, !dbg !57
  %209 = shufflevector <4 x float> %208, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !57
  %210 = insertelement <4 x float> poison, float %184, i64 0, !dbg !58
  %211 = shufflevector <4 x float> %210, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !58
  br label %212, !dbg !59

212:                                              ; preds = %131, %212
  %213 = phi i32 [ 0, %131 ], [ %335, %212 ]
  %214 = phi <4 x float> [ zeroinitializer, %131 ], [ %330, %212 ]
  %215 = or i32 %213, %15, !dbg !60
  %216 = icmp ult i32 %215, 2304, !dbg !61
  %217 = add i32 %215, %24, !dbg !62
  %218 = sext i32 %217 to i64, !dbg !63
  %219 = getelementptr i16, ptr addrspace(1) %4, i64 %218, !dbg !63
  %220 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %219, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #3, !dbg !64
  %221 = extractvalue { i32, i32 } %220, 0, !dbg !64
  %222 = extractvalue { i32, i32 } %220, 1, !dbg !64
  %223 = trunc i32 %221 to i16, !dbg !64
  %extelt.offset4 = lshr i32 %221, 16, !dbg !64
  %224 = trunc i32 %extelt.offset4 to i16, !dbg !64
  %225 = trunc i32 %222 to i16, !dbg !64
  %extelt.offset5 = lshr i32 %222, 16, !dbg !64
  %226 = trunc i32 %extelt.offset5 to i16, !dbg !64
  %227 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %223) #3, !dbg !65
  %228 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %224) #3, !dbg !65
  %229 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %225) #3, !dbg !65
  %230 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #3, !dbg !65
  %231 = zext nneg i32 %215 to i64, !dbg !66
  %232 = getelementptr float, ptr addrspace(1) %6, i64 %231, !dbg !66
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %232, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #3, !dbg !67
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !67
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !67
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !67
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !67
  %238 = getelementptr float, ptr addrspace(1) %7, i64 %218, !dbg !68
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %238, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #3, !dbg !69
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !69
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !69
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !69
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !69
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !70
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %244, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #3, !dbg !71
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !71
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !71
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !71
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !71
  %250 = getelementptr i16, ptr addrspace(1) %1, i64 %218, !dbg !72
  %251 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %250, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #3, !dbg !73
  %252 = extractvalue { i32, i32 } %251, 0, !dbg !73
  %253 = extractvalue { i32, i32 } %251, 1, !dbg !73
  %254 = trunc i32 %252 to i16, !dbg !73
  %extelt.offset6 = lshr i32 %252, 16, !dbg !73
  %255 = trunc i32 %extelt.offset6 to i16, !dbg !73
  %256 = trunc i32 %253 to i16, !dbg !73
  %extelt.offset7 = lshr i32 %253, 16, !dbg !73
  %257 = trunc i32 %extelt.offset7 to i16, !dbg !73
  %258 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %254) #3, !dbg !74
  %259 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %255) #3, !dbg !74
  %260 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %256) #3, !dbg !74
  %261 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %257) #3, !dbg !74
  %262 = getelementptr i16, ptr addrspace(1) %2, i64 %218, !dbg !75
  %263 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %262, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #3, !dbg !76
  %264 = extractvalue { i32, i32 } %263, 0, !dbg !76
  %265 = extractvalue { i32, i32 } %263, 1, !dbg !76
  %266 = trunc i32 %264 to i16, !dbg !76
  %extelt.offset8 = lshr i32 %264, 16, !dbg !76
  %267 = trunc i32 %extelt.offset8 to i16, !dbg !76
  %268 = trunc i32 %265 to i16, !dbg !76
  %extelt.offset9 = lshr i32 %265, 16, !dbg !76
  %269 = trunc i32 %extelt.offset9 to i16, !dbg !76
  %270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #3, !dbg !77
  %271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #3, !dbg !77
  %272 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #3, !dbg !77
  %273 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %269) #3, !dbg !77
  %274 = getelementptr float, ptr addrspace(1) %3, i64 %231, !dbg !78
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %274, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #3, !dbg !79
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !79
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !79
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !79
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !79
  %280 = insertelement <4 x i32> poison, i32 %234, i64 0, !dbg !67
  %281 = insertelement <4 x i32> %280, i32 %235, i64 1, !dbg !67
  %282 = insertelement <4 x i32> %281, i32 %236, i64 2, !dbg !67
  %283 = insertelement <4 x i32> %282, i32 %237, i64 3, !dbg !67
  %284 = bitcast <4 x i32> %283 to <4 x float>, !dbg !67
  %285 = insertelement <4 x i32> poison, i32 %240, i64 0, !dbg !69
  %286 = insertelement <4 x i32> %285, i32 %241, i64 1, !dbg !69
  %287 = insertelement <4 x i32> %286, i32 %242, i64 2, !dbg !69
  %288 = insertelement <4 x i32> %287, i32 %243, i64 3, !dbg !69
  %289 = bitcast <4 x i32> %288 to <4 x float>, !dbg !69
  %290 = insertelement <4 x i32> poison, i32 %246, i64 0, !dbg !71
  %291 = insertelement <4 x i32> %290, i32 %247, i64 1, !dbg !71
  %292 = insertelement <4 x i32> %291, i32 %248, i64 2, !dbg !71
  %293 = insertelement <4 x i32> %292, i32 %249, i64 3, !dbg !71
  %294 = bitcast <4 x i32> %293 to <4 x float>, !dbg !71
  %295 = insertelement <4 x i32> poison, i32 %276, i64 0, !dbg !79
  %296 = insertelement <4 x i32> %295, i32 %277, i64 1, !dbg !79
  %297 = insertelement <4 x i32> %296, i32 %278, i64 2, !dbg !79
  %298 = insertelement <4 x i32> %297, i32 %279, i64 3, !dbg !79
  %299 = bitcast <4 x i32> %298 to <4 x float>, !dbg !79
  %300 = insertelement <4 x float> poison, float %227, i64 0, !dbg !80
  %301 = insertelement <4 x float> %300, float %228, i64 1, !dbg !80
  %302 = insertelement <4 x float> %301, float %229, i64 2, !dbg !80
  %303 = insertelement <4 x float> %302, float %230, i64 3, !dbg !80
  %304 = fmul <4 x float> %303, %26, !dbg !80
  %305 = fadd <4 x float> %284, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !81
  %306 = fmul <4 x float> %304, %305, !dbg !82
  %307 = fmul <4 x float> %289, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !83
  %308 = fadd <4 x float> %306, %307, !dbg !84
  %309 = fmul <4 x float> %209, %308, !dbg !57
  %310 = insertelement <4 x float> poison, float %258, i64 0, !dbg !85
  %311 = insertelement <4 x float> %310, float %259, i64 1, !dbg !85
  %312 = insertelement <4 x float> %311, float %260, i64 2, !dbg !85
  %313 = insertelement <4 x float> %312, float %261, i64 3, !dbg !85
  %314 = insertelement <4 x float> poison, float %270, i64 0, !dbg !85
  %315 = insertelement <4 x float> %314, float %271, i64 1, !dbg !85
  %316 = insertelement <4 x float> %315, float %272, i64 2, !dbg !85
  %317 = insertelement <4 x float> %316, float %273, i64 3, !dbg !85
  %318 = fadd <4 x float> %313, %317, !dbg !85
  %319 = fadd <4 x float> %299, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !86
  %320 = fmul <4 x float> %318, %319, !dbg !87
  %321 = fmul <4 x float> %320, %211, !dbg !58
  %322 = fadd <4 x float> %321, %294, !dbg !88
  %323 = fadd <4 x float> %309, %322, !dbg !89
  %324 = fadd <4 x float> %309, %323, !dbg !90
  %325 = fmul <4 x float> %305, %324, !dbg !91
  %326 = fmul <4 x float> %303, %325, !dbg !92
  %327 = insertelement <4 x i1> poison, i1 %216, i64 0, !dbg !93
  %328 = shufflevector <4 x i1> %327, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !93
  %329 = select <4 x i1> %328, <4 x float> %326, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !93
  %330 = fadd <4 x float> %214, %329, !dbg !93
  %bc = bitcast <4 x float> %324 to <4 x i32>, !dbg !94
  %331 = extractelement <4 x i32> %bc, i64 0, !dbg !94
  %bc43 = bitcast <4 x float> %324 to <4 x i32>, !dbg !94
  %332 = extractelement <4 x i32> %bc43, i64 1, !dbg !94
  %bc44 = bitcast <4 x float> %324 to <4 x i32>, !dbg !94
  %333 = extractelement <4 x i32> %bc44, i64 2, !dbg !94
  %bc45 = bitcast <4 x float> %324 to <4 x i32>, !dbg !94
  %334 = extractelement <4 x i32> %bc45, i64 3, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %332, i32 %333, i32 %334, ptr addrspace(1) %244, i1 %216) #3, !dbg !94
  %335 = add nuw nsw i32 %213, 1024, !dbg !59
  %336 = icmp ult i32 %213, 1280, !dbg !59
  br i1 %336, label %212, label %337, !dbg !59

337:                                              ; preds = %212
  %338 = bitcast i32 %21 to float, !dbg !11
  %339 = bitcast i32 %23 to float, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %shift40 = shufflevector <4 x float> %330, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !97
  %340 = fadd <4 x float> %330, %shift40, !dbg !97
  %shift41 = shufflevector <4 x float> %330, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !97
  %341 = fadd <4 x float> %shift41, %340, !dbg !97
  %shift42 = shufflevector <4 x float> %330, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !97
  %342 = fadd <4 x float> %shift42, %341, !dbg !97
  %343 = extractelement <4 x float> %342, i64 0, !dbg !97
  %344 = bitcast float %343 to i32, !dbg !95
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 16, i32 31), !dbg !95
  %346 = bitcast i32 %345 to float, !dbg !95
  %347 = fadd float %343, %346, !dbg !97
  %348 = bitcast float %347 to i32, !dbg !95
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 8, i32 31), !dbg !95
  %350 = bitcast i32 %349 to float, !dbg !95
  %351 = fadd float %347, %350, !dbg !97
  %352 = bitcast float %351 to i32, !dbg !95
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 4, i32 31), !dbg !95
  %354 = bitcast i32 %353 to float, !dbg !95
  %355 = fadd float %351, %354, !dbg !97
  %356 = bitcast float %355 to i32, !dbg !95
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 2, i32 31), !dbg !95
  %358 = bitcast i32 %357 to float, !dbg !95
  %359 = fadd float %355, %358, !dbg !97
  %360 = bitcast float %359 to i32, !dbg !95
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 1, i32 31), !dbg !95
  %362 = bitcast i32 %361 to float, !dbg !95
  %363 = fadd float %359, %362, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, float %363, i1 %159) #3, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %364 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %164, i1 %162) #3, !dbg !95
  %365 = bitcast float %364 to i32, !dbg !95
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 4, i32 31), !dbg !95
  %367 = bitcast i32 %366 to float, !dbg !95
  %368 = fadd float %364, %367, !dbg !97
  %369 = bitcast float %368 to i32, !dbg !95
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 2, i32 31), !dbg !95
  %371 = bitcast i32 %370 to float, !dbg !95
  %372 = fadd float %368, %371, !dbg !97
  %373 = bitcast float %372 to i32, !dbg !95
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 1, i32 31), !dbg !95
  %375 = bitcast i32 %374 to float, !dbg !95
  %376 = fadd float %372, %375, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, float %376, i1 %180) #3, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %377 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !95
  %378 = fmul float %377, -5.000000e-01, !dbg !100
  %379 = fmul float %20, %20, !dbg !101
  %380 = fmul float %338, %338, !dbg !101
  %381 = fmul float %134, %134, !dbg !101
  %382 = fmul float %339, %339, !dbg !101
  %383 = fmul float %379, %20, !dbg !102
  %384 = fmul float %380, %338, !dbg !102
  %385 = fmul float %381, %134, !dbg !102
  %386 = fmul float %382, %339, !dbg !102
  %387 = fmul float %383, %378, !dbg !103
  %388 = fmul float %384, %378, !dbg !103
  %389 = fmul float %385, %378, !dbg !103
  %390 = fmul float %386, %378, !dbg !103
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %387, float 2.304000e+03) #3, !dbg !104
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %388, float 2.304000e+03) #3, !dbg !104
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float 2.304000e+03) #3, !dbg !104
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %390, float 2.304000e+03) #3, !dbg !104
  br label %395, !dbg !105

395:                                              ; preds = %337, %395
  %396 = phi i32 [ 0, %337 ], [ %469, %395 ]
  %397 = or i32 %396, %15, !dbg !106
  %398 = icmp ult i32 %397, 2304, !dbg !107
  %399 = add i32 %397, %24, !dbg !108
  %400 = sext i32 %399 to i64, !dbg !109
  %401 = getelementptr float, ptr addrspace(1) %0, i64 %400, !dbg !109
  %402 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %401, i1 %398, i32 0, i1 %398, i32 0, i1 %398, i32 0, i1 %398, i32 0, i1 %398) #3, !dbg !110
  %403 = extractvalue { i32, i32, i32, i32 } %402, 0, !dbg !110
  %404 = extractvalue { i32, i32, i32, i32 } %402, 1, !dbg !110
  %405 = extractvalue { i32, i32, i32, i32 } %402, 2, !dbg !110
  %406 = extractvalue { i32, i32, i32, i32 } %402, 3, !dbg !110
  %407 = bitcast i32 %403 to float, !dbg !110
  %408 = bitcast i32 %404 to float, !dbg !110
  %409 = bitcast i32 %405 to float, !dbg !110
  %410 = bitcast i32 %406 to float, !dbg !110
  %411 = zext nneg i32 %397 to i64, !dbg !111
  %412 = getelementptr float, ptr addrspace(1) %6, i64 %411, !dbg !111
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %412, i1 %398, i32 0, i1 %398, i32 0, i1 %398, i32 0, i1 %398, i32 0, i1 %398) #3, !dbg !112
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !112
  %415 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !112
  %416 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !112
  %417 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !112
  %418 = bitcast i32 %414 to float, !dbg !112
  %419 = bitcast i32 %415 to float, !dbg !112
  %420 = bitcast i32 %416 to float, !dbg !112
  %421 = bitcast i32 %417 to float, !dbg !112
  %422 = getelementptr i16, ptr addrspace(1) %4, i64 %400, !dbg !113
  %423 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %422, i1 %398, i32 0, i1 %398, i32 0, i1 %398) #3, !dbg !114
  %424 = extractvalue { i32, i32 } %423, 0, !dbg !114
  %425 = extractvalue { i32, i32 } %423, 1, !dbg !114
  %426 = trunc i32 %424 to i16, !dbg !114
  %extelt.offset = lshr i32 %424, 16, !dbg !114
  %427 = trunc i32 %extelt.offset to i16, !dbg !114
  %428 = trunc i32 %425 to i16, !dbg !114
  %extelt.offset3 = lshr i32 %425, 16, !dbg !114
  %429 = trunc i32 %extelt.offset3 to i16, !dbg !114
  %430 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #3, !dbg !115
  %431 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %427) #3, !dbg !115
  %432 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %428) #3, !dbg !115
  %433 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %429) #3, !dbg !115
  %434 = fadd float %418, 1.000000e+00, !dbg !116
  %435 = fadd float %419, 1.000000e+00, !dbg !116
  %436 = fadd float %420, 1.000000e+00, !dbg !116
  %437 = fadd float %421, 1.000000e+00, !dbg !116
  %438 = fmul float %434, %407, !dbg !117
  %439 = fmul float %435, %408, !dbg !117
  %440 = fmul float %436, %409, !dbg !117
  %441 = fmul float %437, %410, !dbg !117
  %442 = fmul float %438, %20, !dbg !118
  %443 = fmul float %439, %20, !dbg !118
  %444 = fmul float %440, %20, !dbg !118
  %445 = fmul float %441, %20, !dbg !118
  %446 = fmul float %391, %430, !dbg !119
  %447 = fmul float %391, %431, !dbg !119
  %448 = fmul float %391, %432, !dbg !119
  %449 = fmul float %391, %433, !dbg !119
  %450 = fadd float %446, %442, !dbg !120
  %451 = fadd float %447, %443, !dbg !120
  %452 = fadd float %444, %448, !dbg !120
  %453 = fadd float %445, %449, !dbg !120
  %454 = fadd float %446, %450, !dbg !121
  %455 = fadd float %447, %451, !dbg !121
  %456 = fadd float %448, %452, !dbg !121
  %457 = fadd float %449, %453, !dbg !121
  %458 = getelementptr i16, ptr addrspace(1) %9, i64 %400, !dbg !122
  %459 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %454) #3, !dbg !123
  %460 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %455) #3, !dbg !123
  %461 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %456) #3, !dbg !123
  %462 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %457) #3, !dbg !123
  %463 = insertelement <2 x i16> undef, i16 %459, i64 0, !dbg !123
  %464 = insertelement <2 x i16> %463, i16 %460, i64 1, !dbg !123
  %465 = bitcast <2 x i16> %464 to i32, !dbg !123
  %466 = insertelement <2 x i16> undef, i16 %461, i64 0, !dbg !123
  %467 = insertelement <2 x i16> %466, i16 %462, i64 1, !dbg !123
  %468 = bitcast <2 x i16> %467 to i32, !dbg !123
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %465, i32 %468, ptr addrspace(1) %458, i1 %398) #3, !dbg !123
  %469 = add nuw nsw i32 %396, 1024, !dbg !105
  %470 = icmp ult i32 %396, 1280, !dbg !105
  br i1 %470, label %395, label %471, !dbg !105

471:                                              ; preds = %395
  ret void, !dbg !124
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cm2skr2yj4io2d2kiptcqd26hikjgl7j2qs6qmplxo7hrklsylgw.py", directory: "/tmp/torchinductor_zeus/m2")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 26, column: 31, scope: !5)
!11 = !DILocation(line: 26, column: 36, scope: !5)
!12 = !DILocation(line: 32, column: 45, scope: !5)
!13 = !DILocation(line: 45, column: 24, scope: !5)
!14 = !DILocation(line: 28, column: 36, scope: !5)
!15 = !DILocation(line: 29, column: 27, scope: !5)
!16 = !DILocation(line: 30, column: 25, scope: !5)
!17 = !DILocation(line: 32, column: 40, scope: !5)
!18 = !DILocation(line: 32, column: 34, scope: !5)
!19 = !DILocation(line: 32, column: 51, scope: !5)
!20 = !DILocation(line: 32, column: 102, scope: !5)
!21 = !DILocation(line: 33, column: 34, scope: !5)
!22 = !DILocation(line: 33, column: 51, scope: !5)
!23 = !DILocation(line: 33, column: 102, scope: !5)
!24 = !DILocation(line: 34, column: 34, scope: !5)
!25 = !DILocation(line: 34, column: 39, scope: !5)
!26 = !DILocation(line: 35, column: 34, scope: !5)
!27 = !DILocation(line: 35, column: 51, scope: !5)
!28 = !DILocation(line: 35, column: 102, scope: !5)
!29 = !DILocation(line: 36, column: 35, scope: !5)
!30 = !DILocation(line: 36, column: 40, scope: !5)
!31 = !DILocation(line: 37, column: 35, scope: !5)
!32 = !DILocation(line: 37, column: 52, scope: !5)
!33 = !DILocation(line: 40, column: 22, scope: !5)
!34 = !DILocation(line: 42, column: 22, scope: !5)
!35 = !DILocation(line: 43, column: 22, scope: !5)
!36 = !DILocation(line: 46, column: 24, scope: !5)
!37 = !DILocation(line: 47, column: 24, scope: !5)
!38 = !DILocation(line: 51, column: 24, scope: !5)
!39 = !DILocation(line: 52, column: 24, scope: !5)
!40 = !DILocation(line: 53, column: 23, scope: !5)
!41 = !DILocation(line: 56, column: 40, scope: !5)
!42 = !DILocation(line: 233, column: 15, scope: !43, inlinedAt: !46)
!43 = distinct !DILexicalBlockFile(scope: !45, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!45 = distinct !DILexicalBlockFile(scope: !5, file: !44, discriminator: 0)
!46 = !DILocation(line: 243, column: 36, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 57, column: 27, scope: !43)
!48 = !DILocation(line: 243, column: 36, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 57, column: 27, scope: !45)
!50 = !DILocation(line: 58, column: 31, scope: !5)
!51 = !DILocation(line: 58, column: 36, scope: !5)
!52 = !DILocation(line: 72, column: 24, scope: !5)
!53 = !DILocation(line: 73, column: 24, scope: !5)
!54 = !DILocation(line: 74, column: 24, scope: !5)
!55 = !DILocation(line: 75, column: 24, scope: !5)
!56 = !DILocation(line: 77, column: 24, scope: !5)
!57 = !DILocation(line: 88, column: 24, scope: !5)
!58 = !DILocation(line: 94, column: 24, scope: !5)
!59 = !DILocation(line: 60, column: 36, scope: !5)
!60 = !DILocation(line: 61, column: 27, scope: !5)
!61 = !DILocation(line: 62, column: 25, scope: !5)
!62 = !DILocation(line: 64, column: 41, scope: !5)
!63 = !DILocation(line: 64, column: 35, scope: !5)
!64 = !DILocation(line: 64, column: 52, scope: !5)
!65 = !DILocation(line: 64, column: 103, scope: !5)
!66 = !DILocation(line: 65, column: 35, scope: !5)
!67 = !DILocation(line: 65, column: 40, scope: !5)
!68 = !DILocation(line: 66, column: 35, scope: !5)
!69 = !DILocation(line: 66, column: 52, scope: !5)
!70 = !DILocation(line: 67, column: 39, scope: !5)
!71 = !DILocation(line: 67, column: 56, scope: !5)
!72 = !DILocation(line: 68, column: 35, scope: !5)
!73 = !DILocation(line: 68, column: 52, scope: !5)
!74 = !DILocation(line: 68, column: 104, scope: !5)
!75 = !DILocation(line: 69, column: 35, scope: !5)
!76 = !DILocation(line: 69, column: 52, scope: !5)
!77 = !DILocation(line: 69, column: 104, scope: !5)
!78 = !DILocation(line: 70, column: 35, scope: !5)
!79 = !DILocation(line: 70, column: 40, scope: !5)
!80 = !DILocation(line: 79, column: 24, scope: !5)
!81 = !DILocation(line: 81, column: 24, scope: !5)
!82 = !DILocation(line: 82, column: 24, scope: !5)
!83 = !DILocation(line: 86, column: 24, scope: !5)
!84 = !DILocation(line: 87, column: 24, scope: !5)
!85 = !DILocation(line: 91, column: 24, scope: !5)
!86 = !DILocation(line: 92, column: 24, scope: !5)
!87 = !DILocation(line: 93, column: 24, scope: !5)
!88 = !DILocation(line: 95, column: 24, scope: !5)
!89 = !DILocation(line: 96, column: 24, scope: !5)
!90 = !DILocation(line: 97, column: 24, scope: !5)
!91 = !DILocation(line: 98, column: 24, scope: !5)
!92 = !DILocation(line: 99, column: 24, scope: !5)
!93 = !DILocation(line: 102, column: 40, scope: !5)
!94 = !DILocation(line: 103, column: 56, scope: !5)
!95 = !DILocation(line: 243, column: 36, scope: !45, inlinedAt: !96)
!96 = !DILocation(line: 104, column: 27, scope: !45)
!97 = !DILocation(line: 233, column: 15, scope: !43, inlinedAt: !98)
!98 = !DILocation(line: 243, column: 36, scope: !43, inlinedAt: !99)
!99 = !DILocation(line: 104, column: 27, scope: !43)
!100 = !DILocation(line: 117, column: 24, scope: !5)
!101 = !DILocation(line: 118, column: 24, scope: !5)
!102 = !DILocation(line: 119, column: 24, scope: !5)
!103 = !DILocation(line: 120, column: 24, scope: !5)
!104 = !DILocation(line: 122, column: 24, scope: !5)
!105 = !DILocation(line: 105, column: 36, scope: !5)
!106 = !DILocation(line: 106, column: 27, scope: !5)
!107 = !DILocation(line: 107, column: 25, scope: !5)
!108 = !DILocation(line: 109, column: 45, scope: !5)
!109 = !DILocation(line: 109, column: 39, scope: !5)
!110 = !DILocation(line: 109, column: 56, scope: !5)
!111 = !DILocation(line: 110, column: 35, scope: !5)
!112 = !DILocation(line: 110, column: 40, scope: !5)
!113 = !DILocation(line: 111, column: 35, scope: !5)
!114 = !DILocation(line: 111, column: 52, scope: !5)
!115 = !DILocation(line: 111, column: 104, scope: !5)
!116 = !DILocation(line: 113, column: 24, scope: !5)
!117 = !DILocation(line: 114, column: 24, scope: !5)
!118 = !DILocation(line: 115, column: 24, scope: !5)
!119 = !DILocation(line: 124, column: 24, scope: !5)
!120 = !DILocation(line: 125, column: 24, scope: !5)
!121 = !DILocation(line: 126, column: 24, scope: !5)
!122 = !DILocation(line: 128, column: 29, scope: !5)
!123 = !DILocation(line: 128, column: 53, scope: !5)
!124 = !DILocation(line: 105, column: 4, scope: !5)
