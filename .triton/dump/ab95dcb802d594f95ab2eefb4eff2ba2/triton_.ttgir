#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6de7de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<1024> : tensor<1x1024xi32, #blocked>
    %cst_0 = arith.constant dense<1024> : tensor<1x1024xi32, #blocked1>
    %cst_1 = arith.constant dense<4> : tensor<1x1024xi32, #blocked>
    %cst_2 = arith.constant dense<4> : tensor<1x1024xi32, #blocked1>
    %cst_3 = arith.constant dense<4096> : tensor<1x1024xi32, #blocked>
    %cst_4 = arith.constant dense<4096> : tensor<1x1024xi32, #blocked1>
    %cst_5 = arith.constant dense<2> : tensor<1x1024xi64, #blocked>
    %cst_6 = arith.constant dense<2> : tensor<1x1024xi64, #blocked1>
    %cst_7 = arith.constant dense<256> : tensor<1x1024xi32, #blocked>
    %cst_8 = arith.constant dense<524288> : tensor<1x1024xi32, #blocked>
    %cst_9 = arith.constant dense<262144> : tensor<1x1024xi32, #blocked1>
    %cst_10 = arith.constant dense<3> : tensor<1x1024xi64, #blocked>
    %cst_11 = arith.constant dense<3> : tensor<1x1024xi64, #blocked1>
    %c262144_i32 = arith.constant 262144 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c128_i32 = arith.constant 128 : i32
    %c-128_i32 = arith.constant -128 : i32
    %c128_i64 = arith.constant 128 : i64
    %c256_i64 = arith.constant 256 : i64
    %c256_i32 = arith.constant 256 : i32
    %cst_12 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32, #blocked>
    %cst_13 = arith.constant dense<0.000000e+00> : tensor<1x1024xbf16, #blocked>
    %cst_14 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32, #blocked1>
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x1024xi32, #blocked>
    %5 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x1024xi32, #blocked1>
    %6 = tt.splat %1 : (i32) -> tensor<1x1024xi32, #blocked>
    %7 = tt.splat %1 : (i32) -> tensor<1x1024xi32, #blocked1>
    %8 = arith.addi %6, %4 : tensor<1x1024xi32, #blocked>
    %9 = arith.addi %7, %5 : tensor<1x1024xi32, #blocked1>
    %10 = tt.get_program_id x : i32
    %11 = arith.cmpi slt, %10, %c256_i32 : i32
    %12 = arith.divsi %8, %cst : tensor<1x1024xi32, #blocked>
    %13 = arith.divsi %9, %cst_0 : tensor<1x1024xi32, #blocked1>
    %14 = arith.remsi %12, %cst_1 : tensor<1x1024xi32, #blocked>
    %15 = arith.remsi %13, %cst_2 : tensor<1x1024xi32, #blocked1>
    %16 = arith.divsi %8, %cst_3 : tensor<1x1024xi32, #blocked>
    %17 = arith.divsi %9, %cst_4 : tensor<1x1024xi32, #blocked1>
    %18 = arith.remsi %8, %cst_3 : tensor<1x1024xi32, #blocked>
    %19 = arith.remsi %8, %cst : tensor<1x1024xi32, #blocked>
    %20 = arith.remsi %9, %cst_0 : tensor<1x1024xi32, #blocked1>
    %21 = arith.extsi %14 : tensor<1x1024xi32, #blocked> to tensor<1x1024xi64, #blocked>
    %22 = arith.extsi %15 : tensor<1x1024xi32, #blocked1> to tensor<1x1024xi64, #blocked1>
    %23 = arith.cmpi slt, %21, %cst_5 : tensor<1x1024xi64, #blocked>
    %24 = arith.extsi %10 : i32 to i64
    %25 = arith.cmpi sge, %24, %c256_i64 : i64
    %26 = tt.splat %25 : (i1) -> tensor<1x1024xi1, #blocked>
    %27 = arith.andi %26, %23 : tensor<1x1024xi1, #blocked>
    %28 = arith.muli %18, %cst_7 : tensor<1x1024xi32, #blocked>
    %29 = tt.splat %10 : (i32) -> tensor<1x1024xi32, #blocked>
    %30 = arith.addi %29, %28 : tensor<1x1024xi32, #blocked>
    %31 = arith.muli %16, %cst_8 : tensor<1x1024xi32, #blocked>
    %32 = arith.addi %30, %31 : tensor<1x1024xi32, #blocked>
    %33 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    %34 = tt.addptr %33, %32 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %35 = tt.splat %11 : (i1) -> tensor<1x1024xi1, #blocked>
    %36 = tt.splat %11 : (i1) -> tensor<1x1024xi1, #blocked1>
    %37 = arith.andi %27, %35 : tensor<1x1024xi1, #blocked>
    %38 = tt.load %34, %37, %cst_13 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
    %39 = arith.extf %38 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %40 = arith.select %27, %39, %cst_12 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
    %41 = arith.andi %23, %35 : tensor<1x1024xi1, #blocked>
    %42 = tt.load %34, %41, %cst_13 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
    %43 = arith.extf %42 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %44 = arith.muli %19, %cst_7 : tensor<1x1024xi32, #blocked>
    %45 = arith.addi %29, %44 : tensor<1x1024xi32, #blocked>
    %46 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    %47 = tt.addptr %46, %45 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %48 = tt.load %47, %41, %cst_13 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
    %49 = arith.extf %48 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %50 = arith.mulf %43, %49 : tensor<1x1024xf32, #blocked>
    %51 = arith.cmpi sge, %24, %c128_i64 : i64
    %52 = tt.splat %51 : (i1) -> tensor<1x1024xi1, #blocked>
    %53 = arith.andi %52, %23 : tensor<1x1024xi1, #blocked>
    %54 = arith.addi %10, %c-128_i32 : i32
    %55 = tt.splat %54 : (i32) -> tensor<1x1024xi32, #blocked>
    %56 = arith.addi %55, %28 : tensor<1x1024xi32, #blocked>
    %57 = arith.addi %56, %31 : tensor<1x1024xi32, #blocked>
    %58 = tt.addptr %33, %57 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %59 = arith.andi %53, %35 : tensor<1x1024xi1, #blocked>
    %60 = tt.load %58, %59, %cst_13 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
    %61 = arith.extf %60 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %62 = arith.addi %55, %44 : tensor<1x1024xi32, #blocked>
    %63 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    %64 = tt.addptr %63, %62 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %65 = tt.load %64, %59, %cst_13 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
    %66 = arith.extf %65 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %67 = arith.mulf %61, %66 : tensor<1x1024xf32, #blocked>
    %68 = arith.subf %cst_12, %67 : tensor<1x1024xf32, #blocked>
    %69 = arith.select %53, %68, %cst_12 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
    %70 = arith.addf %50, %69 : tensor<1x1024xf32, #blocked>
    %71 = arith.cmpi slt, %24, %c128_i64 : i64
    %72 = tt.splat %71 : (i1) -> tensor<1x1024xi1, #blocked>
    %73 = arith.andi %72, %23 : tensor<1x1024xi1, #blocked>
    %74 = arith.addi %10, %c128_i32 : i32
    %75 = tt.splat %74 : (i32) -> tensor<1x1024xi32, #blocked>
    %76 = arith.addi %75, %28 : tensor<1x1024xi32, #blocked>
    %77 = arith.addi %76, %31 : tensor<1x1024xi32, #blocked>
    %78 = tt.addptr %33, %77 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %79 = arith.andi %73, %35 : tensor<1x1024xi1, #blocked>
    %80 = tt.load %78, %79, %cst_13 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
    %81 = arith.extf %80 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %82 = arith.addi %75, %44 : tensor<1x1024xi32, #blocked>
    %83 = tt.addptr %63, %82 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %84 = tt.load %83, %79, %cst_13 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
    %85 = arith.extf %84 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %86 = arith.mulf %81, %85 : tensor<1x1024xf32, #blocked>
    %87 = arith.select %73, %86, %cst_12 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
    %88 = arith.addf %70, %87 : tensor<1x1024xf32, #blocked>
    %89 = arith.addf %40, %88 : tensor<1x1024xf32, #blocked>
    %90 = arith.cmpi sge, %21, %cst_5 : tensor<1x1024xi64, #blocked>
    %91 = arith.cmpi sge, %22, %cst_6 : tensor<1x1024xi64, #blocked1>
    %92 = arith.cmpi slt, %21, %cst_10 : tensor<1x1024xi64, #blocked>
    %93 = arith.cmpi slt, %22, %cst_11 : tensor<1x1024xi64, #blocked1>
    %94 = arith.andi %90, %92 : tensor<1x1024xi1, #blocked>
    %95 = arith.andi %91, %93 : tensor<1x1024xi1, #blocked1>
    %96 = arith.muli %10, %c1024_i32 : i32
    %97 = tt.splat %96 : (i32) -> tensor<1x1024xi32, #blocked1>
    %98 = arith.addi %20, %97 : tensor<1x1024xi32, #blocked1>
    %99 = arith.muli %17, %cst_9 : tensor<1x1024xi32, #blocked1>
    %100 = arith.addi %98, %99 : tensor<1x1024xi32, #blocked1>
    %101 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>
    %102 = tt.addptr %101, %100 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
    %103 = arith.andi %95, %36 : tensor<1x1024xi1, #blocked1>
    %104 = tt.load %102, %103, %cst_14 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked1>
    %105 = triton_gpu.convert_layout %104 : (tensor<1x1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked>
    %106 = arith.cmpi sge, %21, %cst_10 : tensor<1x1024xi64, #blocked>
    %107 = arith.addi %45, %31 : tensor<1x1024xi32, #blocked>
    %108 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    %109 = tt.addptr %108, %107 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %110 = arith.andi %106, %35 : tensor<1x1024xi1, #blocked>
    %111 = tt.load %109, %110, %cst_13 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
    %112 = arith.extf %111 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %113 = arith.addi %10, %c262144_i32 : i32
    %114 = tt.splat %113 : (i32) -> tensor<1x1024xi32, #blocked>
    %115 = arith.addi %114, %44 : tensor<1x1024xi32, #blocked>
    %116 = arith.addi %115, %31 : tensor<1x1024xi32, #blocked>
    %117 = tt.addptr %108, %116 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %118 = tt.load %117, %110, %cst_13 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
    %119 = arith.extf %118 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
    %120 = arith.addf %112, %119 : tensor<1x1024xf32, #blocked>
    %121 = arith.select %106, %120, %cst_12 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
    %122 = arith.select %94, %105, %121 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
    %123 = arith.select %23, %89, %122 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
    %124 = arith.muli %8, %cst_7 : tensor<1x1024xi32, #blocked>
    %125 = arith.addi %29, %124 : tensor<1x1024xi32, #blocked>
    %126 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    %127 = tt.addptr %126, %125 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
    %128 = arith.truncf %123 : tensor<1x1024xf32, #blocked> to tensor<1x1024xbf16, #blocked>
    tt.store %127, %128, %35 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xbf16, #blocked>
    tt.return
  }
}
