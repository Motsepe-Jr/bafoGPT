; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6de7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = and i32 %9, 127, !dbg !8
  %11 = or i32 %10, 128, !dbg !8
  %12 = or i32 %10, 256, !dbg !8
  %13 = or i32 %10, 384, !dbg !8
  %14 = shl nuw nsw i32 %10, 2, !dbg !8
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %16 = shl i32 %15, 10, !dbg !10
  %17 = or i32 %16, %14, !dbg !11
  %18 = or i32 %17, 512, !dbg !11
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %20 = icmp slt i32 %19, 256, !dbg !13
  %.frozen = freeze i32 %17
  %21 = sdiv i32 %.frozen, 1024, !dbg !14
  %.frozen1 = freeze i32 %18
  %22 = sdiv i32 %.frozen1, 1024, !dbg !14
  %23 = sdiv i32 %17, 4096, !dbg !15
  %24 = sdiv i32 %18, 4096, !dbg !15
  %25 = mul i32 %21, 1024
  %.decomposed = sub i32 %.frozen, %25
  %26 = mul i32 %22, 1024
  %.decomposed2 = sub i32 %.frozen1, %26
  %27 = icmp sgt i32 %19, 255, !dbg !16
  %28 = icmp sgt i32 %19, 127, !dbg !17
  %29 = add i32 %19, -128, !dbg !18
  %30 = icmp slt i32 %19, 128, !dbg !19
  %31 = add i32 %19, 128, !dbg !20
  %32 = or i32 %16, %10, !dbg !11
  %33 = or i32 %16, %11, !dbg !11
  %34 = or i32 %16, %12, !dbg !11
  %35 = or i32 %16, %13, !dbg !11
  %36 = or i32 %32, 512, !dbg !11
  %37 = or i32 %32, 640, !dbg !11
  %38 = or i32 %32, 768, !dbg !11
  %39 = or i32 %32, 896, !dbg !11
  %40 = insertelement <8 x i32> poison, i32 %39, i64 0, !dbg !14
  %41 = insertelement <8 x i32> %40, i32 %38, i64 1, !dbg !14
  %42 = insertelement <8 x i32> %41, i32 %37, i64 2, !dbg !14
  %43 = insertelement <8 x i32> %42, i32 %36, i64 3, !dbg !14
  %44 = insertelement <8 x i32> %43, i32 %35, i64 4, !dbg !14
  %45 = insertelement <8 x i32> %44, i32 %34, i64 5, !dbg !14
  %46 = insertelement <8 x i32> %45, i32 %33, i64 6, !dbg !14
  %47 = insertelement <8 x i32> %46, i32 %32, i64 7, !dbg !14
  %48 = sdiv <8 x i32> %47, <i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024, i32 1024>, !dbg !14
  %49 = srem <8 x i32> %48, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !21
  %.frozen3 = freeze i32 %32
  %50 = sdiv i32 %.frozen3, 4096, !dbg !15
  %.frozen5 = freeze i32 %33
  %51 = sdiv i32 %.frozen5, 4096, !dbg !15
  %.frozen7 = freeze i32 %34
  %52 = sdiv i32 %.frozen7, 4096, !dbg !15
  %.frozen9 = freeze i32 %35
  %53 = sdiv i32 %.frozen9, 4096, !dbg !15
  %.frozen11 = freeze i32 %36
  %54 = sdiv i32 %.frozen11, 4096, !dbg !15
  %.frozen13 = freeze i32 %37
  %55 = sdiv i32 %.frozen13, 4096, !dbg !15
  %.frozen15 = freeze i32 %38
  %56 = sdiv i32 %.frozen15, 4096, !dbg !15
  %.frozen17 = freeze i32 %39
  %57 = sdiv i32 %.frozen17, 4096, !dbg !15
  %58 = mul i32 %50, 4096
  %.decomposed4 = sub i32 %.frozen3, %58
  %59 = mul i32 %51, 4096
  %.decomposed6 = sub i32 %.frozen5, %59
  %60 = mul i32 %52, 4096
  %.decomposed8 = sub i32 %.frozen7, %60
  %61 = mul i32 %53, 4096
  %.decomposed10 = sub i32 %.frozen9, %61
  %62 = mul i32 %54, 4096
  %.decomposed12 = sub i32 %.frozen11, %62
  %63 = mul i32 %55, 4096
  %.decomposed14 = sub i32 %.frozen13, %63
  %64 = mul i32 %56, 4096
  %.decomposed16 = sub i32 %.frozen15, %64
  %65 = mul i32 %57, 4096
  %.decomposed18 = sub i32 %.frozen17, %65
  %66 = srem i32 %32, 1024, !dbg !22
  %67 = srem i32 %33, 1024, !dbg !22
  %68 = srem i32 %34, 1024, !dbg !22
  %69 = srem i32 %35, 1024, !dbg !22
  %70 = srem i32 %36, 1024, !dbg !22
  %71 = srem i32 %37, 1024, !dbg !22
  %72 = srem i32 %38, 1024, !dbg !22
  %73 = srem i32 %39, 1024, !dbg !22
  %74 = extractelement <8 x i32> %49, i64 7, !dbg !23
  %75 = icmp slt i32 %74, 2, !dbg !24
  %76 = extractelement <8 x i32> %49, i64 6, !dbg !23
  %77 = icmp slt i32 %76, 2, !dbg !24
  %78 = extractelement <8 x i32> %49, i64 5, !dbg !23
  %79 = icmp slt i32 %78, 2, !dbg !24
  %80 = extractelement <8 x i32> %49, i64 4, !dbg !23
  %81 = icmp slt i32 %80, 2, !dbg !24
  %82 = extractelement <8 x i32> %49, i64 3, !dbg !23
  %83 = icmp slt i32 %82, 2, !dbg !24
  %84 = extractelement <8 x i32> %49, i64 2, !dbg !23
  %85 = icmp slt i32 %84, 2, !dbg !24
  %86 = extractelement <8 x i32> %49, i64 1, !dbg !23
  %87 = icmp slt i32 %86, 2, !dbg !24
  %88 = extractelement <8 x i32> %49, i64 0, !dbg !23
  %89 = icmp slt i32 %88, 2, !dbg !24
  %90 = and i1 %27, %75, !dbg !25
  %91 = and i1 %27, %77, !dbg !25
  %92 = and i1 %27, %79, !dbg !25
  %93 = and i1 %27, %81, !dbg !25
  %94 = and i1 %83, %27, !dbg !25
  %95 = and i1 %85, %27, !dbg !25
  %96 = and i1 %87, %27, !dbg !25
  %97 = and i1 %89, %27, !dbg !25
  %98 = shl nsw i32 %.decomposed4, 8, !dbg !26
  %99 = shl nsw i32 %.decomposed6, 8, !dbg !26
  %100 = shl nsw i32 %.decomposed8, 8, !dbg !26
  %101 = shl nsw i32 %.decomposed10, 8, !dbg !26
  %102 = shl nsw i32 %.decomposed12, 8, !dbg !26
  %103 = shl nsw i32 %.decomposed14, 8, !dbg !26
  %104 = shl nsw i32 %.decomposed16, 8, !dbg !26
  %105 = shl nsw i32 %.decomposed18, 8, !dbg !26
  %106 = shl i32 %50, 19, !dbg !27
  %107 = shl i32 %51, 19, !dbg !27
  %108 = shl i32 %52, 19, !dbg !27
  %109 = shl i32 %53, 19, !dbg !27
  %110 = shl i32 %54, 19, !dbg !27
  %111 = shl i32 %55, 19, !dbg !27
  %112 = shl i32 %56, 19, !dbg !27
  %113 = shl i32 %57, 19, !dbg !27
  %114 = add i32 %106, %98, !dbg !28
  %115 = add i32 %114, %19, !dbg !29
  %116 = add i32 %107, %99, !dbg !28
  %117 = add i32 %116, %19, !dbg !29
  %118 = add i32 %108, %100, !dbg !28
  %119 = add i32 %118, %19, !dbg !29
  %120 = add i32 %109, %101, !dbg !28
  %121 = add i32 %120, %19, !dbg !29
  %122 = add i32 %110, %102, !dbg !28
  %123 = add i32 %122, %19, !dbg !29
  %124 = add i32 %111, %103, !dbg !28
  %125 = add i32 %124, %19, !dbg !29
  %126 = add i32 %112, %104, !dbg !28
  %127 = add i32 %126, %19, !dbg !29
  %128 = add i32 %113, %105, !dbg !28
  %129 = add i32 %128, %19, !dbg !29
  %130 = sext i32 %115 to i64, !dbg !30
  %131 = getelementptr i16, ptr addrspace(1) %0, i64 %130, !dbg !30
  %132 = sext i32 %117 to i64, !dbg !30
  %133 = getelementptr i16, ptr addrspace(1) %0, i64 %132, !dbg !30
  %134 = sext i32 %119 to i64, !dbg !30
  %135 = getelementptr i16, ptr addrspace(1) %0, i64 %134, !dbg !30
  %136 = sext i32 %121 to i64, !dbg !30
  %137 = getelementptr i16, ptr addrspace(1) %0, i64 %136, !dbg !30
  %138 = sext i32 %123 to i64, !dbg !30
  %139 = getelementptr i16, ptr addrspace(1) %0, i64 %138, !dbg !30
  %140 = sext i32 %125 to i64, !dbg !30
  %141 = getelementptr i16, ptr addrspace(1) %0, i64 %140, !dbg !30
  %142 = sext i32 %127 to i64, !dbg !30
  %143 = getelementptr i16, ptr addrspace(1) %0, i64 %142, !dbg !30
  %144 = sext i32 %129 to i64, !dbg !30
  %145 = getelementptr i16, ptr addrspace(1) %0, i64 %144, !dbg !30
  %146 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %131, i1 false, i16 0, i1 false) #2, !dbg !31
  %147 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %133, i1 false, i16 0, i1 false) #2, !dbg !31
  %148 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %135, i1 false, i16 0, i1 false) #2, !dbg !31
  %149 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %137, i1 false, i16 0, i1 false) #2, !dbg !31
  %150 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %139, i1 false, i16 0, i1 false) #2, !dbg !31
  %151 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %141, i1 false, i16 0, i1 false) #2, !dbg !31
  %152 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %143, i1 false, i16 0, i1 false) #2, !dbg !31
  %153 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %145, i1 false, i16 0, i1 false) #2, !dbg !31
  %154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #2, !dbg !32
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %147) #2, !dbg !32
  %156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %148) #2, !dbg !32
  %157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %149) #2, !dbg !32
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %150) #2, !dbg !32
  %159 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %151) #2, !dbg !32
  %160 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %152) #2, !dbg !32
  %161 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %153) #2, !dbg !32
  %162 = select i1 %90, float %154, float 0.000000e+00, !dbg !33
  %163 = select i1 %91, float %155, float 0.000000e+00, !dbg !33
  %164 = select i1 %92, float %156, float 0.000000e+00, !dbg !33
  %165 = select i1 %93, float %157, float 0.000000e+00, !dbg !33
  %166 = select i1 %94, float %158, float 0.000000e+00, !dbg !33
  %167 = select i1 %95, float %159, float 0.000000e+00, !dbg !33
  %168 = select i1 %96, float %160, float 0.000000e+00, !dbg !33
  %169 = select i1 %97, float %161, float 0.000000e+00, !dbg !33
  %170 = and i1 %20, %75, !dbg !34
  %171 = and i1 %20, %77, !dbg !34
  %172 = and i1 %20, %79, !dbg !34
  %173 = and i1 %20, %81, !dbg !34
  %174 = and i1 %83, %20, !dbg !34
  %175 = and i1 %85, %20, !dbg !34
  %176 = and i1 %87, %20, !dbg !34
  %177 = and i1 %89, %20, !dbg !34
  %178 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %131, i1 %170, i16 0, i1 %170) #2, !dbg !35
  %179 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %133, i1 %171, i16 0, i1 %171) #2, !dbg !35
  %180 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %135, i1 %172, i16 0, i1 %172) #2, !dbg !35
  %181 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %137, i1 %173, i16 0, i1 %173) #2, !dbg !35
  %182 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %139, i1 %174, i16 0, i1 %174) #2, !dbg !35
  %183 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %141, i1 %175, i16 0, i1 %175) #2, !dbg !35
  %184 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %143, i1 %176, i16 0, i1 %176) #2, !dbg !35
  %185 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %145, i1 %177, i16 0, i1 %177) #2, !dbg !35
  %186 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %178) #2, !dbg !36
  %187 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %179) #2, !dbg !36
  %188 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %180) #2, !dbg !36
  %189 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %181) #2, !dbg !36
  %190 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %182) #2, !dbg !36
  %191 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %183) #2, !dbg !36
  %192 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %184) #2, !dbg !36
  %193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %185) #2, !dbg !36
  %194 = shl nsw i32 %66, 8, !dbg !37
  %195 = shl nsw i32 %67, 8, !dbg !37
  %196 = shl nsw i32 %68, 8, !dbg !37
  %197 = shl nsw i32 %69, 8, !dbg !37
  %198 = shl nsw i32 %70, 8, !dbg !37
  %199 = shl nsw i32 %71, 8, !dbg !37
  %200 = shl nsw i32 %72, 8, !dbg !37
  %201 = shl nsw i32 %73, 8, !dbg !37
  %202 = add i32 %194, %19, !dbg !38
  %203 = add i32 %195, %19, !dbg !38
  %204 = add i32 %196, %19, !dbg !38
  %205 = add i32 %197, %19, !dbg !38
  %206 = add i32 %19, %198, !dbg !38
  %207 = add i32 %19, %199, !dbg !38
  %208 = add i32 %19, %200, !dbg !38
  %209 = add i32 %19, %201, !dbg !38
  %210 = sext i32 %202 to i64, !dbg !39
  %211 = getelementptr i16, ptr addrspace(1) %1, i64 %210, !dbg !39
  %212 = sext i32 %203 to i64, !dbg !39
  %213 = getelementptr i16, ptr addrspace(1) %1, i64 %212, !dbg !39
  %214 = sext i32 %204 to i64, !dbg !39
  %215 = getelementptr i16, ptr addrspace(1) %1, i64 %214, !dbg !39
  %216 = sext i32 %205 to i64, !dbg !39
  %217 = getelementptr i16, ptr addrspace(1) %1, i64 %216, !dbg !39
  %218 = sext i32 %206 to i64, !dbg !39
  %219 = getelementptr i16, ptr addrspace(1) %1, i64 %218, !dbg !39
  %220 = sext i32 %207 to i64, !dbg !39
  %221 = getelementptr i16, ptr addrspace(1) %1, i64 %220, !dbg !39
  %222 = sext i32 %208 to i64, !dbg !39
  %223 = getelementptr i16, ptr addrspace(1) %1, i64 %222, !dbg !39
  %224 = sext i32 %209 to i64, !dbg !39
  %225 = getelementptr i16, ptr addrspace(1) %1, i64 %224, !dbg !39
  %226 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %211, i1 %170, i16 0, i1 %170) #2, !dbg !40
  %227 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %213, i1 %171, i16 0, i1 %171) #2, !dbg !40
  %228 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %215, i1 %172, i16 0, i1 %172) #2, !dbg !40
  %229 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %217, i1 %173, i16 0, i1 %173) #2, !dbg !40
  %230 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %219, i1 %174, i16 0, i1 %174) #2, !dbg !40
  %231 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %221, i1 %175, i16 0, i1 %175) #2, !dbg !40
  %232 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %223, i1 %176, i16 0, i1 %176) #2, !dbg !40
  %233 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %225, i1 %177, i16 0, i1 %177) #2, !dbg !40
  %234 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #2, !dbg !41
  %235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %227) #2, !dbg !41
  %236 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #2, !dbg !41
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %229) #2, !dbg !41
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %230) #2, !dbg !41
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #2, !dbg !41
  %240 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #2, !dbg !41
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #2, !dbg !41
  %242 = fmul float %186, %234, !dbg !42
  %243 = fmul float %187, %235, !dbg !42
  %244 = fmul float %188, %236, !dbg !42
  %245 = fmul float %189, %237, !dbg !42
  %246 = fmul float %190, %238, !dbg !42
  %247 = fmul float %191, %239, !dbg !42
  %248 = fmul float %192, %240, !dbg !42
  %249 = fmul float %193, %241, !dbg !42
  %250 = and i1 %28, %75, !dbg !43
  %251 = and i1 %28, %77, !dbg !43
  %252 = and i1 %28, %79, !dbg !43
  %253 = and i1 %28, %81, !dbg !43
  %254 = and i1 %83, %28, !dbg !43
  %255 = and i1 %85, %28, !dbg !43
  %256 = and i1 %87, %28, !dbg !43
  %257 = and i1 %89, %28, !dbg !43
  %258 = add i32 %114, %29, !dbg !44
  %259 = add i32 %116, %29, !dbg !44
  %260 = add i32 %118, %29, !dbg !44
  %261 = add i32 %120, %29, !dbg !44
  %262 = add i32 %122, %29, !dbg !44
  %263 = add i32 %124, %29, !dbg !44
  %264 = add i32 %126, %29, !dbg !44
  %265 = add i32 %128, %29, !dbg !44
  %266 = sext i32 %258 to i64, !dbg !45
  %267 = getelementptr i16, ptr addrspace(1) %0, i64 %266, !dbg !45
  %268 = sext i32 %259 to i64, !dbg !45
  %269 = getelementptr i16, ptr addrspace(1) %0, i64 %268, !dbg !45
  %270 = sext i32 %260 to i64, !dbg !45
  %271 = getelementptr i16, ptr addrspace(1) %0, i64 %270, !dbg !45
  %272 = sext i32 %261 to i64, !dbg !45
  %273 = getelementptr i16, ptr addrspace(1) %0, i64 %272, !dbg !45
  %274 = sext i32 %262 to i64, !dbg !45
  %275 = getelementptr i16, ptr addrspace(1) %0, i64 %274, !dbg !45
  %276 = sext i32 %263 to i64, !dbg !45
  %277 = getelementptr i16, ptr addrspace(1) %0, i64 %276, !dbg !45
  %278 = sext i32 %264 to i64, !dbg !45
  %279 = getelementptr i16, ptr addrspace(1) %0, i64 %278, !dbg !45
  %280 = sext i32 %265 to i64, !dbg !45
  %281 = getelementptr i16, ptr addrspace(1) %0, i64 %280, !dbg !45
  %282 = and i1 %20, %250, !dbg !46
  %283 = and i1 %20, %251, !dbg !46
  %284 = and i1 %20, %252, !dbg !46
  %285 = and i1 %20, %253, !dbg !46
  %286 = and i1 %20, %254, !dbg !46
  %287 = and i1 %20, %255, !dbg !46
  %288 = and i1 %20, %256, !dbg !46
  %289 = and i1 %20, %257, !dbg !46
  %290 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %267, i1 %282, i16 0, i1 %282) #2, !dbg !47
  %291 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %269, i1 %283, i16 0, i1 %283) #2, !dbg !47
  %292 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %271, i1 %284, i16 0, i1 %284) #2, !dbg !47
  %293 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %273, i1 %285, i16 0, i1 %285) #2, !dbg !47
  %294 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %275, i1 %286, i16 0, i1 %286) #2, !dbg !47
  %295 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %277, i1 %287, i16 0, i1 %287) #2, !dbg !47
  %296 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %279, i1 %288, i16 0, i1 %288) #2, !dbg !47
  %297 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %281, i1 %289, i16 0, i1 %289) #2, !dbg !47
  %298 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %290) #2, !dbg !48
  %299 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %291) #2, !dbg !48
  %300 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %292) #2, !dbg !48
  %301 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %293) #2, !dbg !48
  %302 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %294) #2, !dbg !48
  %303 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %295) #2, !dbg !48
  %304 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %296) #2, !dbg !48
  %305 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %297) #2, !dbg !48
  %306 = add i32 %194, %29, !dbg !49
  %307 = add i32 %195, %29, !dbg !49
  %308 = add i32 %196, %29, !dbg !49
  %309 = add i32 %197, %29, !dbg !49
  %310 = add i32 %29, %198, !dbg !49
  %311 = add i32 %29, %199, !dbg !49
  %312 = add i32 %29, %200, !dbg !49
  %313 = add i32 %29, %201, !dbg !49
  %314 = sext i32 %306 to i64, !dbg !50
  %315 = getelementptr i16, ptr addrspace(1) %2, i64 %314, !dbg !50
  %316 = sext i32 %307 to i64, !dbg !50
  %317 = getelementptr i16, ptr addrspace(1) %2, i64 %316, !dbg !50
  %318 = sext i32 %308 to i64, !dbg !50
  %319 = getelementptr i16, ptr addrspace(1) %2, i64 %318, !dbg !50
  %320 = sext i32 %309 to i64, !dbg !50
  %321 = getelementptr i16, ptr addrspace(1) %2, i64 %320, !dbg !50
  %322 = sext i32 %310 to i64, !dbg !50
  %323 = getelementptr i16, ptr addrspace(1) %2, i64 %322, !dbg !50
  %324 = sext i32 %311 to i64, !dbg !50
  %325 = getelementptr i16, ptr addrspace(1) %2, i64 %324, !dbg !50
  %326 = sext i32 %312 to i64, !dbg !50
  %327 = getelementptr i16, ptr addrspace(1) %2, i64 %326, !dbg !50
  %328 = sext i32 %313 to i64, !dbg !50
  %329 = getelementptr i16, ptr addrspace(1) %2, i64 %328, !dbg !50
  %330 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %315, i1 %282, i16 0, i1 %282) #2, !dbg !51
  %331 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %317, i1 %283, i16 0, i1 %283) #2, !dbg !51
  %332 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %319, i1 %284, i16 0, i1 %284) #2, !dbg !51
  %333 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %321, i1 %285, i16 0, i1 %285) #2, !dbg !51
  %334 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %323, i1 %286, i16 0, i1 %286) #2, !dbg !51
  %335 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %325, i1 %287, i16 0, i1 %287) #2, !dbg !51
  %336 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %327, i1 %288, i16 0, i1 %288) #2, !dbg !51
  %337 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %329, i1 %289, i16 0, i1 %289) #2, !dbg !51
  %338 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %330) #2, !dbg !52
  %339 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %331) #2, !dbg !52
  %340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %332) #2, !dbg !52
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %333) #2, !dbg !52
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %334) #2, !dbg !52
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %335) #2, !dbg !52
  %344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %336) #2, !dbg !52
  %345 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #2, !dbg !52
  %346 = fmul float %298, %338, !dbg !53
  %347 = fmul float %299, %339, !dbg !53
  %348 = fmul float %300, %340, !dbg !53
  %349 = fmul float %301, %341, !dbg !53
  %350 = fmul float %302, %342, !dbg !53
  %351 = fmul float %303, %343, !dbg !53
  %352 = fmul float %304, %344, !dbg !53
  %353 = fmul float %305, %345, !dbg !53
  %354 = fsub float 0.000000e+00, %346, !dbg !54
  %355 = fsub float 0.000000e+00, %347, !dbg !54
  %356 = fsub float 0.000000e+00, %348, !dbg !54
  %357 = fsub float 0.000000e+00, %349, !dbg !54
  %358 = fsub float 0.000000e+00, %350, !dbg !54
  %359 = fsub float 0.000000e+00, %351, !dbg !54
  %360 = fsub float 0.000000e+00, %352, !dbg !54
  %361 = fsub float 0.000000e+00, %353, !dbg !54
  %362 = select i1 %250, float %354, float 0.000000e+00, !dbg !33
  %363 = select i1 %251, float %355, float 0.000000e+00, !dbg !33
  %364 = select i1 %252, float %356, float 0.000000e+00, !dbg !33
  %365 = select i1 %253, float %357, float 0.000000e+00, !dbg !33
  %366 = select i1 %254, float %358, float 0.000000e+00, !dbg !33
  %367 = select i1 %255, float %359, float 0.000000e+00, !dbg !33
  %368 = select i1 %256, float %360, float 0.000000e+00, !dbg !33
  %369 = select i1 %257, float %361, float 0.000000e+00, !dbg !33
  %370 = fadd float %242, %362, !dbg !55
  %371 = fadd float %243, %363, !dbg !55
  %372 = fadd float %244, %364, !dbg !55
  %373 = fadd float %245, %365, !dbg !55
  %374 = fadd float %246, %366, !dbg !55
  %375 = fadd float %247, %367, !dbg !55
  %376 = fadd float %248, %368, !dbg !55
  %377 = fadd float %249, %369, !dbg !55
  %378 = and i1 %30, %75, !dbg !56
  %379 = and i1 %30, %77, !dbg !56
  %380 = and i1 %30, %79, !dbg !56
  %381 = and i1 %30, %81, !dbg !56
  %382 = and i1 %83, %30, !dbg !56
  %383 = and i1 %85, %30, !dbg !56
  %384 = and i1 %87, %30, !dbg !56
  %385 = and i1 %89, %30, !dbg !56
  %386 = add i32 %114, %31, !dbg !57
  %387 = add i32 %116, %31, !dbg !57
  %388 = add i32 %118, %31, !dbg !57
  %389 = add i32 %120, %31, !dbg !57
  %390 = add i32 %122, %31, !dbg !57
  %391 = add i32 %124, %31, !dbg !57
  %392 = add i32 %126, %31, !dbg !57
  %393 = add i32 %128, %31, !dbg !57
  %394 = sext i32 %386 to i64, !dbg !58
  %395 = getelementptr i16, ptr addrspace(1) %0, i64 %394, !dbg !58
  %396 = sext i32 %387 to i64, !dbg !58
  %397 = getelementptr i16, ptr addrspace(1) %0, i64 %396, !dbg !58
  %398 = sext i32 %388 to i64, !dbg !58
  %399 = getelementptr i16, ptr addrspace(1) %0, i64 %398, !dbg !58
  %400 = sext i32 %389 to i64, !dbg !58
  %401 = getelementptr i16, ptr addrspace(1) %0, i64 %400, !dbg !58
  %402 = sext i32 %390 to i64, !dbg !58
  %403 = getelementptr i16, ptr addrspace(1) %0, i64 %402, !dbg !58
  %404 = sext i32 %391 to i64, !dbg !58
  %405 = getelementptr i16, ptr addrspace(1) %0, i64 %404, !dbg !58
  %406 = sext i32 %392 to i64, !dbg !58
  %407 = getelementptr i16, ptr addrspace(1) %0, i64 %406, !dbg !58
  %408 = sext i32 %393 to i64, !dbg !58
  %409 = getelementptr i16, ptr addrspace(1) %0, i64 %408, !dbg !58
  %410 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %395, i1 %378, i16 0, i1 %378) #2, !dbg !59
  %411 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %397, i1 %379, i16 0, i1 %379) #2, !dbg !59
  %412 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %399, i1 %380, i16 0, i1 %380) #2, !dbg !59
  %413 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %401, i1 %381, i16 0, i1 %381) #2, !dbg !59
  %414 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %403, i1 %382, i16 0, i1 %382) #2, !dbg !59
  %415 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %405, i1 %383, i16 0, i1 %383) #2, !dbg !59
  %416 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %407, i1 %384, i16 0, i1 %384) #2, !dbg !59
  %417 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %409, i1 %385, i16 0, i1 %385) #2, !dbg !59
  %418 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %410) #2, !dbg !60
  %419 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %411) #2, !dbg !60
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %412) #2, !dbg !60
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %413) #2, !dbg !60
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %414) #2, !dbg !60
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %415) #2, !dbg !60
  %424 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %416) #2, !dbg !60
  %425 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #2, !dbg !60
  %426 = add i32 %194, %31, !dbg !61
  %427 = add i32 %195, %31, !dbg !61
  %428 = add i32 %196, %31, !dbg !61
  %429 = add i32 %197, %31, !dbg !61
  %430 = add i32 %31, %198, !dbg !61
  %431 = add i32 %31, %199, !dbg !61
  %432 = add i32 %31, %200, !dbg !61
  %433 = add i32 %31, %201, !dbg !61
  %434 = sext i32 %426 to i64, !dbg !62
  %435 = getelementptr i16, ptr addrspace(1) %2, i64 %434, !dbg !62
  %436 = sext i32 %427 to i64, !dbg !62
  %437 = getelementptr i16, ptr addrspace(1) %2, i64 %436, !dbg !62
  %438 = sext i32 %428 to i64, !dbg !62
  %439 = getelementptr i16, ptr addrspace(1) %2, i64 %438, !dbg !62
  %440 = sext i32 %429 to i64, !dbg !62
  %441 = getelementptr i16, ptr addrspace(1) %2, i64 %440, !dbg !62
  %442 = sext i32 %430 to i64, !dbg !62
  %443 = getelementptr i16, ptr addrspace(1) %2, i64 %442, !dbg !62
  %444 = sext i32 %431 to i64, !dbg !62
  %445 = getelementptr i16, ptr addrspace(1) %2, i64 %444, !dbg !62
  %446 = sext i32 %432 to i64, !dbg !62
  %447 = getelementptr i16, ptr addrspace(1) %2, i64 %446, !dbg !62
  %448 = sext i32 %433 to i64, !dbg !62
  %449 = getelementptr i16, ptr addrspace(1) %2, i64 %448, !dbg !62
  %450 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %435, i1 %378, i16 0, i1 %378) #2, !dbg !63
  %451 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %437, i1 %379, i16 0, i1 %379) #2, !dbg !63
  %452 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %439, i1 %380, i16 0, i1 %380) #2, !dbg !63
  %453 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %441, i1 %381, i16 0, i1 %381) #2, !dbg !63
  %454 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %443, i1 %382, i16 0, i1 %382) #2, !dbg !63
  %455 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %445, i1 %383, i16 0, i1 %383) #2, !dbg !63
  %456 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %447, i1 %384, i16 0, i1 %384) #2, !dbg !63
  %457 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %449, i1 %385, i16 0, i1 %385) #2, !dbg !63
  %458 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #2, !dbg !64
  %459 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #2, !dbg !64
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #2, !dbg !64
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #2, !dbg !64
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %454) #2, !dbg !64
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %455) #2, !dbg !64
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %456) #2, !dbg !64
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %457) #2, !dbg !64
  %466 = fmul float %418, %458, !dbg !65
  %467 = fmul float %419, %459, !dbg !65
  %468 = fmul float %420, %460, !dbg !65
  %469 = fmul float %421, %461, !dbg !65
  %470 = fmul float %422, %462, !dbg !65
  %471 = fmul float %423, %463, !dbg !65
  %472 = fmul float %424, %464, !dbg !65
  %473 = fmul float %425, %465, !dbg !65
  %474 = select i1 %378, float %466, float 0.000000e+00, !dbg !33
  %475 = select i1 %379, float %467, float 0.000000e+00, !dbg !33
  %476 = select i1 %380, float %468, float 0.000000e+00, !dbg !33
  %477 = select i1 %381, float %469, float 0.000000e+00, !dbg !33
  %478 = select i1 %382, float %470, float 0.000000e+00, !dbg !33
  %479 = select i1 %383, float %471, float 0.000000e+00, !dbg !33
  %480 = select i1 %384, float %472, float 0.000000e+00, !dbg !33
  %481 = select i1 %385, float %473, float 0.000000e+00, !dbg !33
  %482 = fadd float %370, %474, !dbg !66
  %483 = fadd float %371, %475, !dbg !66
  %484 = fadd float %372, %476, !dbg !66
  %485 = fadd float %373, %477, !dbg !66
  %486 = fadd float %374, %478, !dbg !66
  %487 = fadd float %375, %479, !dbg !66
  %488 = fadd float %376, %480, !dbg !66
  %489 = fadd float %377, %481, !dbg !66
  %490 = fadd float %162, %482, !dbg !67
  %491 = fadd float %163, %483, !dbg !67
  %492 = fadd float %164, %484, !dbg !67
  %493 = fadd float %165, %485, !dbg !67
  %494 = fadd float %166, %486, !dbg !67
  %495 = fadd float %167, %487, !dbg !67
  %496 = fadd float %168, %488, !dbg !67
  %497 = fadd float %169, %489, !dbg !67
  %498 = icmp eq <8 x i32> %49, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>, !dbg !68
  %499 = and i32 %21, -2147483645, !dbg !68
  %500 = icmp eq i32 %499, 2, !dbg !68
  %501 = and i32 %22, -2147483645, !dbg !68
  %502 = icmp eq i32 %501, 2, !dbg !68
  %503 = shl i32 %19, 10, !dbg !69
  %504 = add i32 %.decomposed, %503, !dbg !70
  %505 = shl i32 %23, 18, !dbg !71
  %506 = shl i32 %24, 18, !dbg !71
  %507 = add i32 %504, %505, !dbg !72
  %508 = add i32 %506, %.decomposed2, !dbg !70
  %509 = add i32 %508, %503, !dbg !72
  %510 = sext i32 %507 to i64, !dbg !73
  %511 = getelementptr float, ptr addrspace(1) %3, i64 %510, !dbg !73
  %512 = sext i32 %509 to i64, !dbg !73
  %513 = getelementptr float, ptr addrspace(1) %3, i64 %512, !dbg !73
  %514 = and i1 %20, %500, !dbg !74
  %515 = and i1 %502, %20, !dbg !74
  %516 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %511, i1 %514, i32 0, i1 %514, i32 0, i1 %514, i32 0, i1 %514, i32 0, i1 %514) #2, !dbg !75
  %517 = extractvalue { i32, i32, i32, i32 } %516, 0, !dbg !75
  %518 = extractvalue { i32, i32, i32, i32 } %516, 1, !dbg !75
  %519 = extractvalue { i32, i32, i32, i32 } %516, 2, !dbg !75
  %520 = extractvalue { i32, i32, i32, i32 } %516, 3, !dbg !75
  %521 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %513, i1 %515, i32 0, i1 %515, i32 0, i1 %515, i32 0, i1 %515, i32 0, i1 %515) #2, !dbg !75
  %522 = extractvalue { i32, i32, i32, i32 } %521, 0, !dbg !75
  %523 = extractvalue { i32, i32, i32, i32 } %521, 1, !dbg !75
  %524 = extractvalue { i32, i32, i32, i32 } %521, 2, !dbg !75
  %525 = extractvalue { i32, i32, i32, i32 } %521, 3, !dbg !75
  %526 = shl nuw nsw i32 %10, 3, !dbg !75
  %527 = zext nneg i32 %526 to i64, !dbg !75
  %528 = getelementptr float, ptr addrspace(3) @global_smem, i64 %527, !dbg !75
  store i32 %517, ptr addrspace(3) %528, align 4, !dbg !75
  %529 = or i32 %526, 2, !dbg !75
  %530 = zext nneg i32 %529 to i64, !dbg !75
  %531 = getelementptr float, ptr addrspace(3) @global_smem, i64 %530, !dbg !75
  store i32 %518, ptr addrspace(3) %531, align 4, !dbg !75
  %532 = or i32 %526, 4, !dbg !75
  %533 = zext nneg i32 %532 to i64, !dbg !75
  %534 = getelementptr float, ptr addrspace(3) @global_smem, i64 %533, !dbg !75
  store i32 %519, ptr addrspace(3) %534, align 4, !dbg !75
  %535 = or i32 %526, 6, !dbg !75
  %536 = zext nneg i32 %535 to i64, !dbg !75
  %537 = getelementptr float, ptr addrspace(3) @global_smem, i64 %536, !dbg !75
  store i32 %520, ptr addrspace(3) %537, align 4, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %538 = shl nuw nsw i32 %10, 1, !dbg !75
  %539 = zext nneg i32 %538 to i64, !dbg !75
  %540 = getelementptr float, ptr addrspace(3) @global_smem, i64 %539, !dbg !75
  %541 = load float, ptr addrspace(3) %540, align 4, !dbg !75
  %542 = shl nuw nsw i32 %11, 1, !dbg !75
  %543 = zext nneg i32 %542 to i64, !dbg !75
  %544 = getelementptr float, ptr addrspace(3) @global_smem, i64 %543, !dbg !75
  %545 = load float, ptr addrspace(3) %544, align 4, !dbg !75
  %546 = shl nuw nsw i32 %12, 1, !dbg !75
  %547 = zext nneg i32 %546 to i64, !dbg !75
  %548 = getelementptr float, ptr addrspace(3) @global_smem, i64 %547, !dbg !75
  %549 = load float, ptr addrspace(3) %548, align 4, !dbg !75
  %550 = shl nuw nsw i32 %13, 1, !dbg !75
  %551 = zext nneg i32 %550 to i64, !dbg !75
  %552 = getelementptr float, ptr addrspace(3) @global_smem, i64 %551, !dbg !75
  %553 = load float, ptr addrspace(3) %552, align 4, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  store i32 %522, ptr addrspace(3) %528, align 4, !dbg !75
  store i32 %523, ptr addrspace(3) %531, align 4, !dbg !75
  store i32 %524, ptr addrspace(3) %534, align 4, !dbg !75
  store i32 %525, ptr addrspace(3) %537, align 4, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %554 = load float, ptr addrspace(3) %540, align 4, !dbg !75
  %555 = load float, ptr addrspace(3) %544, align 4, !dbg !75
  %556 = load float, ptr addrspace(3) %548, align 4, !dbg !75
  %557 = load float, ptr addrspace(3) %552, align 4, !dbg !75
  %558 = icmp sgt i32 %74, 2, !dbg !23
  %559 = icmp sgt i32 %76, 2, !dbg !23
  %560 = icmp sgt i32 %78, 2, !dbg !23
  %561 = icmp sgt i32 %80, 2, !dbg !23
  %562 = icmp sgt i32 %82, 2, !dbg !23
  %563 = icmp sgt i32 %84, 2, !dbg !23
  %564 = icmp sgt i32 %86, 2, !dbg !23
  %565 = icmp sgt i32 %88, 2, !dbg !23
  %566 = add i32 %202, %106, !dbg !76
  %567 = add i32 %203, %107, !dbg !76
  %568 = add i32 %204, %108, !dbg !76
  %569 = add i32 %205, %109, !dbg !76
  %570 = add i32 %206, %110, !dbg !76
  %571 = add i32 %207, %111, !dbg !76
  %572 = add i32 %208, %112, !dbg !76
  %573 = add i32 %209, %113, !dbg !76
  %574 = sext i32 %566 to i64, !dbg !77
  %575 = getelementptr i16, ptr addrspace(1) %4, i64 %574, !dbg !77
  %576 = sext i32 %567 to i64, !dbg !77
  %577 = getelementptr i16, ptr addrspace(1) %4, i64 %576, !dbg !77
  %578 = sext i32 %568 to i64, !dbg !77
  %579 = getelementptr i16, ptr addrspace(1) %4, i64 %578, !dbg !77
  %580 = sext i32 %569 to i64, !dbg !77
  %581 = getelementptr i16, ptr addrspace(1) %4, i64 %580, !dbg !77
  %582 = sext i32 %570 to i64, !dbg !77
  %583 = getelementptr i16, ptr addrspace(1) %4, i64 %582, !dbg !77
  %584 = sext i32 %571 to i64, !dbg !77
  %585 = getelementptr i16, ptr addrspace(1) %4, i64 %584, !dbg !77
  %586 = sext i32 %572 to i64, !dbg !77
  %587 = getelementptr i16, ptr addrspace(1) %4, i64 %586, !dbg !77
  %588 = sext i32 %573 to i64, !dbg !77
  %589 = getelementptr i16, ptr addrspace(1) %4, i64 %588, !dbg !77
  %590 = and i1 %20, %558, !dbg !78
  %591 = and i1 %20, %559, !dbg !78
  %592 = and i1 %20, %560, !dbg !78
  %593 = and i1 %20, %561, !dbg !78
  %594 = and i1 %562, %20, !dbg !78
  %595 = and i1 %563, %20, !dbg !78
  %596 = and i1 %564, %20, !dbg !78
  %597 = and i1 %565, %20, !dbg !78
  %598 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %575, i1 %590, i16 0, i1 %590) #2, !dbg !79
  %599 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %577, i1 %591, i16 0, i1 %591) #2, !dbg !79
  %600 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %579, i1 %592, i16 0, i1 %592) #2, !dbg !79
  %601 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %581, i1 %593, i16 0, i1 %593) #2, !dbg !79
  %602 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %583, i1 %594, i16 0, i1 %594) #2, !dbg !79
  %603 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %585, i1 %595, i16 0, i1 %595) #2, !dbg !79
  %604 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %587, i1 %596, i16 0, i1 %596) #2, !dbg !79
  %605 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %589, i1 %597, i16 0, i1 %597) #2, !dbg !79
  %606 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %598) #2, !dbg !80
  %607 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %599) #2, !dbg !80
  %608 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %600) #2, !dbg !80
  %609 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %601) #2, !dbg !80
  %610 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %602) #2, !dbg !80
  %611 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %603) #2, !dbg !80
  %612 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %604) #2, !dbg !80
  %613 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %605) #2, !dbg !80
  %614 = add i32 %19, 262144, !dbg !81
  %615 = add i32 %194, %614, !dbg !82
  %616 = add i32 %195, %614, !dbg !82
  %617 = add i32 %196, %614, !dbg !82
  %618 = add i32 %197, %614, !dbg !82
  %619 = add i32 %615, %106, !dbg !83
  %620 = add i32 %616, %107, !dbg !83
  %621 = add i32 %617, %108, !dbg !83
  %622 = add i32 %618, %109, !dbg !83
  %623 = add i32 %110, %198, !dbg !82
  %624 = add i32 %623, %614, !dbg !83
  %625 = add i32 %111, %199, !dbg !82
  %626 = add i32 %625, %614, !dbg !83
  %627 = add i32 %112, %200, !dbg !82
  %628 = add i32 %627, %614, !dbg !83
  %629 = add i32 %113, %201, !dbg !82
  %630 = add i32 %629, %614, !dbg !83
  %631 = sext i32 %619 to i64, !dbg !84
  %632 = getelementptr i16, ptr addrspace(1) %4, i64 %631, !dbg !84
  %633 = sext i32 %620 to i64, !dbg !84
  %634 = getelementptr i16, ptr addrspace(1) %4, i64 %633, !dbg !84
  %635 = sext i32 %621 to i64, !dbg !84
  %636 = getelementptr i16, ptr addrspace(1) %4, i64 %635, !dbg !84
  %637 = sext i32 %622 to i64, !dbg !84
  %638 = getelementptr i16, ptr addrspace(1) %4, i64 %637, !dbg !84
  %639 = sext i32 %624 to i64, !dbg !84
  %640 = getelementptr i16, ptr addrspace(1) %4, i64 %639, !dbg !84
  %641 = sext i32 %626 to i64, !dbg !84
  %642 = getelementptr i16, ptr addrspace(1) %4, i64 %641, !dbg !84
  %643 = sext i32 %628 to i64, !dbg !84
  %644 = getelementptr i16, ptr addrspace(1) %4, i64 %643, !dbg !84
  %645 = sext i32 %630 to i64, !dbg !84
  %646 = getelementptr i16, ptr addrspace(1) %4, i64 %645, !dbg !84
  %647 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %632, i1 %590, i16 0, i1 %590) #2, !dbg !85
  %648 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %634, i1 %591, i16 0, i1 %591) #2, !dbg !85
  %649 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %636, i1 %592, i16 0, i1 %592) #2, !dbg !85
  %650 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %638, i1 %593, i16 0, i1 %593) #2, !dbg !85
  %651 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %640, i1 %594, i16 0, i1 %594) #2, !dbg !85
  %652 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %642, i1 %595, i16 0, i1 %595) #2, !dbg !85
  %653 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %644, i1 %596, i16 0, i1 %596) #2, !dbg !85
  %654 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %646, i1 %597, i16 0, i1 %597) #2, !dbg !85
  %655 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %647) #2, !dbg !86
  %656 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %648) #2, !dbg !86
  %657 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %649) #2, !dbg !86
  %658 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %650) #2, !dbg !86
  %659 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %651) #2, !dbg !86
  %660 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %652) #2, !dbg !86
  %661 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %653) #2, !dbg !86
  %662 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %654) #2, !dbg !86
  %663 = fadd float %606, %655, !dbg !87
  %664 = fadd float %607, %656, !dbg !87
  %665 = fadd float %608, %657, !dbg !87
  %666 = fadd float %609, %658, !dbg !87
  %667 = fadd float %610, %659, !dbg !87
  %668 = fadd float %611, %660, !dbg !87
  %669 = fadd float %612, %661, !dbg !87
  %670 = fadd float %613, %662, !dbg !87
  %671 = select i1 %558, float %663, float 0.000000e+00, !dbg !88
  %672 = select i1 %559, float %664, float 0.000000e+00, !dbg !88
  %673 = select i1 %560, float %665, float 0.000000e+00, !dbg !88
  %674 = select i1 %561, float %666, float 0.000000e+00, !dbg !88
  %675 = select i1 %562, float %667, float 0.000000e+00, !dbg !88
  %676 = select i1 %563, float %668, float 0.000000e+00, !dbg !88
  %677 = select i1 %564, float %669, float 0.000000e+00, !dbg !88
  %678 = select i1 %565, float %670, float 0.000000e+00, !dbg !88
  %679 = extractelement <8 x i1> %498, i64 7, !dbg !33
  %680 = select i1 %679, float %541, float %671, !dbg !33
  %681 = extractelement <8 x i1> %498, i64 6, !dbg !33
  %682 = select i1 %681, float %545, float %672, !dbg !33
  %683 = extractelement <8 x i1> %498, i64 5, !dbg !33
  %684 = select i1 %683, float %549, float %673, !dbg !33
  %685 = extractelement <8 x i1> %498, i64 4, !dbg !33
  %686 = select i1 %685, float %553, float %674, !dbg !33
  %687 = extractelement <8 x i1> %498, i64 3, !dbg !33
  %688 = select i1 %687, float %554, float %675, !dbg !33
  %689 = extractelement <8 x i1> %498, i64 2, !dbg !33
  %690 = select i1 %689, float %555, float %676, !dbg !33
  %691 = extractelement <8 x i1> %498, i64 1, !dbg !33
  %692 = select i1 %691, float %556, float %677, !dbg !33
  %693 = extractelement <8 x i1> %498, i64 0, !dbg !33
  %694 = select i1 %693, float %557, float %678, !dbg !33
  %695 = select i1 %75, float %490, float %680, !dbg !33
  %696 = select i1 %77, float %491, float %682, !dbg !33
  %697 = select i1 %79, float %492, float %684, !dbg !33
  %698 = select i1 %81, float %493, float %686, !dbg !33
  %699 = select i1 %83, float %494, float %688, !dbg !33
  %700 = select i1 %85, float %495, float %690, !dbg !33
  %701 = select i1 %87, float %496, float %692, !dbg !33
  %702 = select i1 %89, float %497, float %694, !dbg !33
  %703 = shl i32 %32, 8, !dbg !89
  %704 = shl i32 %33, 8, !dbg !89
  %705 = shl i32 %34, 8, !dbg !89
  %706 = shl i32 %35, 8, !dbg !89
  %707 = shl i32 %36, 8, !dbg !89
  %708 = shl i32 %37, 8, !dbg !89
  %709 = shl i32 %38, 8, !dbg !89
  %710 = shl i32 %39, 8, !dbg !89
  %711 = add i32 %703, %19, !dbg !90
  %712 = add i32 %704, %19, !dbg !90
  %713 = add i32 %705, %19, !dbg !90
  %714 = add i32 %706, %19, !dbg !90
  %715 = add i32 %19, %707, !dbg !90
  %716 = add i32 %19, %708, !dbg !90
  %717 = add i32 %19, %709, !dbg !90
  %718 = add i32 %19, %710, !dbg !90
  %719 = sext i32 %711 to i64, !dbg !91
  %720 = getelementptr i16, ptr addrspace(1) %5, i64 %719, !dbg !91
  %721 = sext i32 %712 to i64, !dbg !91
  %722 = getelementptr i16, ptr addrspace(1) %5, i64 %721, !dbg !91
  %723 = sext i32 %713 to i64, !dbg !91
  %724 = getelementptr i16, ptr addrspace(1) %5, i64 %723, !dbg !91
  %725 = sext i32 %714 to i64, !dbg !91
  %726 = getelementptr i16, ptr addrspace(1) %5, i64 %725, !dbg !91
  %727 = sext i32 %715 to i64, !dbg !91
  %728 = getelementptr i16, ptr addrspace(1) %5, i64 %727, !dbg !91
  %729 = sext i32 %716 to i64, !dbg !91
  %730 = getelementptr i16, ptr addrspace(1) %5, i64 %729, !dbg !91
  %731 = sext i32 %717 to i64, !dbg !91
  %732 = getelementptr i16, ptr addrspace(1) %5, i64 %731, !dbg !91
  %733 = sext i32 %718 to i64, !dbg !91
  %734 = getelementptr i16, ptr addrspace(1) %5, i64 %733, !dbg !91
  %735 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %695) #2, !dbg !92
  %736 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %696) #2, !dbg !92
  %737 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %697) #2, !dbg !92
  %738 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %698) #2, !dbg !92
  %739 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %699) #2, !dbg !92
  %740 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %700) #2, !dbg !92
  %741 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %701) #2, !dbg !92
  %742 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %702) #2, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %735, ptr addrspace(1) %720, i1 %20) #2, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %736, ptr addrspace(1) %722, i1 %20) #2, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %737, ptr addrspace(1) %724, i1 %20) #2, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %738, ptr addrspace(1) %726, i1 %20) #2, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %739, ptr addrspace(1) %728, i1 %20) #2, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %740, ptr addrspace(1) %730, i1 %20) #2, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %741, ptr addrspace(1) %732, i1 %20) #2, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %742, ptr addrspace(1) %734, i1 %20) #2, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c6mlm4dgfww5aacivm6durdbprval5i6d4v5rkkr3vcgsrdzsl6y.py", directory: "/tmp/torchinductor_zeus/6m")
!3 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7de", linkageName: "triton__0d1d2d3d4d5d6de7de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 28, scope: !5)
!13 = !DILocation(line: 26, column: 21, scope: !5)
!14 = !DILocation(line: 27, column: 20, scope: !5)
!15 = !DILocation(line: 29, column: 20, scope: !5)
!16 = !DILocation(line: 40, column: 19, scope: !5)
!17 = !DILocation(line: 51, column: 20, scope: !5)
!18 = !DILocation(line: 53, column: 40, scope: !5)
!19 = !DILocation(line: 61, column: 19, scope: !5)
!20 = !DILocation(line: 63, column: 37, scope: !5)
!21 = !DILocation(line: 27, column: 28, scope: !5)
!22 = !DILocation(line: 31, column: 18, scope: !5)
!23 = !DILocation(line: 81, column: 20, scope: !5)
!24 = !DILocation(line: 37, column: 18, scope: !5)
!25 = !DILocation(line: 41, column: 18, scope: !5)
!26 = !DILocation(line: 42, column: 40, scope: !5)
!27 = !DILocation(line: 42, column: 54, scope: !5)
!28 = !DILocation(line: 42, column: 36, scope: !5)
!29 = !DILocation(line: 42, column: 47, scope: !5)
!30 = !DILocation(line: 42, column: 30, scope: !5)
!31 = !DILocation(line: 42, column: 60, scope: !5)
!32 = !DILocation(line: 42, column: 118, scope: !5)
!33 = !DILocation(line: 0, scope: !5)
!34 = !DILocation(line: 47, column: 68, scope: !5)
!35 = !DILocation(line: 47, column: 61, scope: !5)
!36 = !DILocation(line: 47, column: 119, scope: !5)
!37 = !DILocation(line: 48, column: 41, scope: !5)
!38 = !DILocation(line: 48, column: 37, scope: !5)
!39 = !DILocation(line: 48, column: 31, scope: !5)
!40 = !DILocation(line: 48, column: 47, scope: !5)
!41 = !DILocation(line: 48, column: 105, scope: !5)
!42 = !DILocation(line: 49, column: 20, scope: !5)
!43 = !DILocation(line: 52, column: 20, scope: !5)
!44 = !DILocation(line: 53, column: 57, scope: !5)
!45 = !DILocation(line: 53, column: 31, scope: !5)
!46 = !DILocation(line: 53, column: 78, scope: !5)
!47 = !DILocation(line: 53, column: 70, scope: !5)
!48 = !DILocation(line: 53, column: 129, scope: !5)
!49 = !DILocation(line: 54, column: 46, scope: !5)
!50 = !DILocation(line: 54, column: 31, scope: !5)
!51 = !DILocation(line: 54, column: 56, scope: !5)
!52 = !DILocation(line: 54, column: 115, scope: !5)
!53 = !DILocation(line: 55, column: 20, scope: !5)
!54 = !DILocation(line: 56, column: 13, scope: !5)
!55 = !DILocation(line: 60, column: 20, scope: !5)
!56 = !DILocation(line: 62, column: 20, scope: !5)
!57 = !DILocation(line: 63, column: 54, scope: !5)
!58 = !DILocation(line: 63, column: 31, scope: !5)
!59 = !DILocation(line: 63, column: 67, scope: !5)
!60 = !DILocation(line: 63, column: 126, scope: !5)
!61 = !DILocation(line: 64, column: 43, scope: !5)
!62 = !DILocation(line: 64, column: 31, scope: !5)
!63 = !DILocation(line: 64, column: 53, scope: !5)
!64 = !DILocation(line: 64, column: 112, scope: !5)
!65 = !DILocation(line: 65, column: 20, scope: !5)
!66 = !DILocation(line: 69, column: 20, scope: !5)
!67 = !DILocation(line: 70, column: 20, scope: !5)
!68 = !DILocation(line: 76, column: 20, scope: !5)
!69 = !DILocation(line: 77, column: 42, scope: !5)
!70 = !DILocation(line: 77, column: 37, scope: !5)
!71 = !DILocation(line: 77, column: 56, scope: !5)
!72 = !DILocation(line: 77, column: 49, scope: !5)
!73 = !DILocation(line: 77, column: 31, scope: !5)
!74 = !DILocation(line: 77, column: 70, scope: !5)
!75 = !DILocation(line: 77, column: 62, scope: !5)
!76 = !DILocation(line: 84, column: 48, scope: !5)
!77 = !DILocation(line: 84, column: 31, scope: !5)
!78 = !DILocation(line: 84, column: 69, scope: !5)
!79 = !DILocation(line: 84, column: 61, scope: !5)
!80 = !DILocation(line: 84, column: 120, scope: !5)
!81 = !DILocation(line: 86, column: 40, scope: !5)
!82 = !DILocation(line: 86, column: 46, scope: !5)
!83 = !DILocation(line: 86, column: 57, scope: !5)
!84 = !DILocation(line: 86, column: 31, scope: !5)
!85 = !DILocation(line: 86, column: 70, scope: !5)
!86 = !DILocation(line: 86, column: 129, scope: !5)
!87 = !DILocation(line: 88, column: 20, scope: !5)
!88 = !DILocation(line: 91, column: 35, scope: !5)
!89 = !DILocation(line: 94, column: 35, scope: !5)
!90 = !DILocation(line: 94, column: 31, scope: !5)
!91 = !DILocation(line: 94, column: 25, scope: !5)
!92 = !DILocation(line: 94, column: 48, scope: !5)
!93 = !DILocation(line: 94, column: 4, scope: !5)
