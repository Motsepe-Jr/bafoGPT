; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6de7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = and i32 %9, 31, !dbg !8
  %11 = lshr i32 %9, 5, !dbg !8
  %12 = and i32 %11, 7, !dbg !8
  %13 = or i32 %12, 8, !dbg !8
  %14 = shl i32 %9, 2, !dbg !8
  %15 = and i32 %14, 12, !dbg !8
  %16 = shl nuw nsw i32 %10, 3, !dbg !9
  %17 = or i32 %16, 4, !dbg !9
  %18 = lshr i32 %10, 2, !dbg !9
  %19 = shl nuw nsw i32 %12, 3, !dbg !9
  %20 = or i32 %19, %18, !dbg !9
  %21 = or i32 %20, 64, !dbg !9
  %22 = or i32 %20, 128, !dbg !9
  %23 = or i32 %20, 192, !dbg !9
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %25 = shl i32 %24, 4, !dbg !11
  %26 = or i32 %25, %12, !dbg !12
  %27 = or i32 %25, %13, !dbg !12
  %28 = or i32 %25, %15, !dbg !12
  %29 = icmp slt i32 %26, 64, !dbg !13
  %30 = icmp slt i32 %27, 64, !dbg !13
  %31 = icmp slt i32 %28, 64, !dbg !13
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %33 = shl i32 %32, 8, !dbg !15
  %34 = or i32 %33, %16, !dbg !16
  %35 = or i32 %33, %17, !dbg !16
  %36 = or i32 %33, %20, !dbg !16
  %37 = or i32 %33, %21, !dbg !16
  %38 = or i32 %33, %22, !dbg !16
  %39 = or i32 %33, %23, !dbg !16
  %40 = icmp slt i32 %34, 256, !dbg !17
  %41 = icmp slt i32 %36, 256, !dbg !17
  %42 = icmp slt i32 %37, 256, !dbg !17
  %43 = icmp slt i32 %38, 256, !dbg !17
  %44 = icmp slt i32 %39, 256, !dbg !17
  %.frozen50 = freeze i32 %26
  %45 = sdiv i32 %.frozen50, 4, !dbg !18
  %.frozen52 = freeze i32 %27
  %46 = sdiv i32 %.frozen52, 4, !dbg !18
  %47 = ashr exact i32 %28, 2, !dbg !18
  %48 = srem i32 %45, 4, !dbg !19
  %49 = srem i32 %46, 4, !dbg !19
  %.frozen = freeze i32 %26
  %50 = sdiv i32 %.frozen, 16, !dbg !20
  %.frozen48 = freeze i32 %27
  %51 = sdiv i32 %.frozen48, 16, !dbg !20
  %52 = sdiv i32 %28, 16, !dbg !20
  %53 = mul i32 %50, 16
  %.decomposed = sub i32 %.frozen, %53
  %54 = mul i32 %51, 16
  %.decomposed49 = sub i32 %.frozen48, %54
  %55 = mul i32 %45, 4
  %.decomposed51 = sub i32 %.frozen50, %55
  %56 = mul i32 %46, 4
  %.decomposed53 = sub i32 %.frozen52, %56
  %57 = icmp slt i32 %48, 2, !dbg !21
  %58 = icmp slt i32 %49, 2, !dbg !21
  %59 = icmp sgt i32 %34, 255, !dbg !22
  %60 = and i1 %59, %57, !dbg !23
  %61 = and i1 %59, %58, !dbg !23
  %62 = shl nsw i32 %.decomposed, 8, !dbg !24
  %63 = shl nsw i32 %.decomposed49, 8, !dbg !24
  %64 = shl i32 %50, 11, !dbg !25
  %65 = shl i32 %51, 11, !dbg !25
  %66 = add i32 %64, %62, !dbg !26
  %67 = add i32 %66, %34, !dbg !27
  %68 = add i32 %65, %63, !dbg !26
  %69 = add i32 %68, %34, !dbg !27
  %70 = sext i32 %67 to i64, !dbg !28
  %71 = getelementptr i16, ptr addrspace(1) %0, i64 %70, !dbg !28
  %72 = sext i32 %69 to i64, !dbg !28
  %73 = getelementptr i16, ptr addrspace(1) %0, i64 %72, !dbg !28
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !29
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !29
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !29
  %79 = trunc i32 %75 to i16, !dbg !29
  %extelt.offset = lshr i32 %75, 16, !dbg !29
  %80 = trunc i32 %extelt.offset to i16, !dbg !29
  %81 = trunc i32 %76 to i16, !dbg !29
  %extelt.offset1 = lshr i32 %76, 16, !dbg !29
  %82 = trunc i32 %extelt.offset1 to i16, !dbg !29
  %83 = trunc i32 %77 to i16, !dbg !29
  %extelt.offset2 = lshr i32 %77, 16, !dbg !29
  %84 = trunc i32 %extelt.offset2 to i16, !dbg !29
  %85 = trunc i32 %78 to i16, !dbg !29
  %extelt.offset3 = lshr i32 %78, 16, !dbg !29
  %86 = trunc i32 %extelt.offset3 to i16, !dbg !29
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !29
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !29
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !29
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !29
  %92 = trunc i32 %88 to i16, !dbg !29
  %extelt.offset4 = lshr i32 %88, 16, !dbg !29
  %93 = trunc i32 %extelt.offset4 to i16, !dbg !29
  %94 = trunc i32 %89 to i16, !dbg !29
  %extelt.offset5 = lshr i32 %89, 16, !dbg !29
  %95 = trunc i32 %extelt.offset5 to i16, !dbg !29
  %96 = trunc i32 %90 to i16, !dbg !29
  %extelt.offset6 = lshr i32 %90, 16, !dbg !29
  %97 = trunc i32 %extelt.offset6 to i16, !dbg !29
  %98 = trunc i32 %91 to i16, !dbg !29
  %extelt.offset7 = lshr i32 %91, 16, !dbg !29
  %99 = trunc i32 %extelt.offset7 to i16, !dbg !29
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #2, !dbg !30
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #2, !dbg !30
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #2, !dbg !30
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #2, !dbg !30
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #2, !dbg !30
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #2, !dbg !30
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #2, !dbg !30
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #2, !dbg !30
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #2, !dbg !30
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #2, !dbg !30
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #2, !dbg !30
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #2, !dbg !30
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #2, !dbg !30
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #2, !dbg !30
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #2, !dbg !30
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #2, !dbg !30
  %116 = select i1 %60, float %100, float 0.000000e+00, !dbg !31
  %117 = select i1 %60, float %101, float 0.000000e+00, !dbg !31
  %118 = select i1 %60, float %102, float 0.000000e+00, !dbg !31
  %119 = select i1 %60, float %103, float 0.000000e+00, !dbg !31
  %120 = select i1 %60, float %104, float 0.000000e+00, !dbg !31
  %121 = select i1 %60, float %105, float 0.000000e+00, !dbg !31
  %122 = select i1 %60, float %106, float 0.000000e+00, !dbg !31
  %123 = select i1 %60, float %107, float 0.000000e+00, !dbg !31
  %124 = select i1 %61, float %108, float 0.000000e+00, !dbg !31
  %125 = select i1 %61, float %109, float 0.000000e+00, !dbg !31
  %126 = select i1 %61, float %110, float 0.000000e+00, !dbg !31
  %127 = select i1 %61, float %111, float 0.000000e+00, !dbg !31
  %128 = select i1 %61, float %112, float 0.000000e+00, !dbg !31
  %129 = select i1 %61, float %113, float 0.000000e+00, !dbg !31
  %130 = select i1 %61, float %114, float 0.000000e+00, !dbg !31
  %131 = select i1 %61, float %115, float 0.000000e+00, !dbg !31
  %132 = and i1 %40, %57, !dbg !32
  %133 = and i1 %40, %58, !dbg !32
  %134 = and i1 %29, %132, !dbg !33
  %135 = and i1 %30, %133, !dbg !33
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #2, !dbg !34
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !34
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !34
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !34
  %141 = trunc i32 %137 to i16, !dbg !34
  %extelt.offset8 = lshr i32 %137, 16, !dbg !34
  %142 = trunc i32 %extelt.offset8 to i16, !dbg !34
  %143 = trunc i32 %138 to i16, !dbg !34
  %extelt.offset9 = lshr i32 %138, 16, !dbg !34
  %144 = trunc i32 %extelt.offset9 to i16, !dbg !34
  %145 = trunc i32 %139 to i16, !dbg !34
  %extelt.offset10 = lshr i32 %139, 16, !dbg !34
  %146 = trunc i32 %extelt.offset10 to i16, !dbg !34
  %147 = trunc i32 %140 to i16, !dbg !34
  %extelt.offset11 = lshr i32 %140, 16, !dbg !34
  %148 = trunc i32 %extelt.offset11 to i16, !dbg !34
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #2, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !34
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !34
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !34
  %154 = trunc i32 %150 to i16, !dbg !34
  %extelt.offset12 = lshr i32 %150, 16, !dbg !34
  %155 = trunc i32 %extelt.offset12 to i16, !dbg !34
  %156 = trunc i32 %151 to i16, !dbg !34
  %extelt.offset13 = lshr i32 %151, 16, !dbg !34
  %157 = trunc i32 %extelt.offset13 to i16, !dbg !34
  %158 = trunc i32 %152 to i16, !dbg !34
  %extelt.offset14 = lshr i32 %152, 16, !dbg !34
  %159 = trunc i32 %extelt.offset14 to i16, !dbg !34
  %160 = trunc i32 %153 to i16, !dbg !34
  %extelt.offset15 = lshr i32 %153, 16, !dbg !34
  %161 = trunc i32 %extelt.offset15 to i16, !dbg !34
  %162 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %141) #2, !dbg !35
  %163 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %142) #2, !dbg !35
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %143) #2, !dbg !35
  %165 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #2, !dbg !35
  %166 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #2, !dbg !35
  %167 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #2, !dbg !35
  %168 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %147) #2, !dbg !35
  %169 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %148) #2, !dbg !35
  %170 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %154) #2, !dbg !35
  %171 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #2, !dbg !35
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %156) #2, !dbg !35
  %173 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %157) #2, !dbg !35
  %174 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %158) #2, !dbg !35
  %175 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %159) #2, !dbg !35
  %176 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %160) #2, !dbg !35
  %177 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %161) #2, !dbg !35
  %178 = shl nsw i32 %.decomposed51, 8, !dbg !36
  %179 = shl nsw i32 %.decomposed53, 8, !dbg !36
  %180 = add i32 %178, %34, !dbg !37
  %181 = add i32 %178, %35, !dbg !37
  %182 = add i32 %179, %34, !dbg !37
  %183 = add i32 %179, %35, !dbg !37
  %184 = sext i32 %180 to i64, !dbg !38
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !38
  %186 = sext i32 %181 to i64, !dbg !38
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !38
  %188 = sext i32 %182 to i64, !dbg !38
  %189 = getelementptr float, ptr addrspace(1) %1, i64 %188, !dbg !38
  %190 = sext i32 %183 to i64, !dbg !38
  %191 = getelementptr float, ptr addrspace(1) %1, i64 %190, !dbg !38
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %185, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #2, !dbg !39
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !39
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !39
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !39
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !39
  %197 = bitcast i32 %193 to float, !dbg !39
  %198 = bitcast i32 %194 to float, !dbg !39
  %199 = bitcast i32 %195 to float, !dbg !39
  %200 = bitcast i32 %196 to float, !dbg !39
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %187, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #2, !dbg !39
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !39
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !39
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !39
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !39
  %206 = bitcast i32 %202 to float, !dbg !39
  %207 = bitcast i32 %203 to float, !dbg !39
  %208 = bitcast i32 %204 to float, !dbg !39
  %209 = bitcast i32 %205 to float, !dbg !39
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %189, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #2, !dbg !39
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !39
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !39
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !39
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !39
  %215 = bitcast i32 %211 to float, !dbg !39
  %216 = bitcast i32 %212 to float, !dbg !39
  %217 = bitcast i32 %213 to float, !dbg !39
  %218 = bitcast i32 %214 to float, !dbg !39
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %191, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #2, !dbg !39
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !39
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !39
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !39
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !39
  %224 = bitcast i32 %220 to float, !dbg !39
  %225 = bitcast i32 %221 to float, !dbg !39
  %226 = bitcast i32 %222 to float, !dbg !39
  %227 = bitcast i32 %223 to float, !dbg !39
  %228 = fmul float %162, %197, !dbg !40
  %229 = fmul float %163, %198, !dbg !40
  %230 = fmul float %164, %199, !dbg !40
  %231 = fmul float %165, %200, !dbg !40
  %232 = fmul float %166, %206, !dbg !40
  %233 = fmul float %167, %207, !dbg !40
  %234 = fmul float %168, %208, !dbg !40
  %235 = fmul float %169, %209, !dbg !40
  %236 = fmul float %170, %215, !dbg !40
  %237 = fmul float %171, %216, !dbg !40
  %238 = fmul float %172, %217, !dbg !40
  %239 = fmul float %173, %218, !dbg !40
  %240 = fmul float %174, %224, !dbg !40
  %241 = fmul float %175, %225, !dbg !40
  %242 = fmul float %176, %226, !dbg !40
  %243 = fmul float %177, %227, !dbg !40
  %244 = icmp sgt i32 %34, 127, !dbg !41
  %245 = and i1 %244, %57, !dbg !42
  %246 = and i1 %244, %58, !dbg !42
  %247 = add i32 %34, -128, !dbg !43
  %248 = add i32 %35, -128, !dbg !43
  %249 = add i32 %66, %247, !dbg !44
  %250 = add i32 %68, %247, !dbg !44
  %251 = sext i32 %249 to i64, !dbg !45
  %252 = getelementptr i16, ptr addrspace(1) %0, i64 %251, !dbg !45
  %253 = sext i32 %250 to i64, !dbg !45
  %254 = getelementptr i16, ptr addrspace(1) %0, i64 %253, !dbg !45
  %255 = and i1 %40, %245, !dbg !46
  %256 = and i1 %40, %246, !dbg !46
  %257 = and i1 %29, %255, !dbg !47
  %258 = and i1 %30, %256, !dbg !47
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %252, i1 %257, i32 0, i1 %257, i32 0, i1 %257, i32 0, i1 %257, i32 0, i1 %257) #2, !dbg !48
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !48
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !48
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !48
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !48
  %264 = trunc i32 %260 to i16, !dbg !48
  %extelt.offset16 = lshr i32 %260, 16, !dbg !48
  %265 = trunc i32 %extelt.offset16 to i16, !dbg !48
  %266 = trunc i32 %261 to i16, !dbg !48
  %extelt.offset17 = lshr i32 %261, 16, !dbg !48
  %267 = trunc i32 %extelt.offset17 to i16, !dbg !48
  %268 = trunc i32 %262 to i16, !dbg !48
  %extelt.offset18 = lshr i32 %262, 16, !dbg !48
  %269 = trunc i32 %extelt.offset18 to i16, !dbg !48
  %270 = trunc i32 %263 to i16, !dbg !48
  %extelt.offset19 = lshr i32 %263, 16, !dbg !48
  %271 = trunc i32 %extelt.offset19 to i16, !dbg !48
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %254, i1 %258, i32 0, i1 %258, i32 0, i1 %258, i32 0, i1 %258, i32 0, i1 %258) #2, !dbg !48
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !48
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !48
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !48
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !48
  %277 = trunc i32 %273 to i16, !dbg !48
  %extelt.offset20 = lshr i32 %273, 16, !dbg !48
  %278 = trunc i32 %extelt.offset20 to i16, !dbg !48
  %279 = trunc i32 %274 to i16, !dbg !48
  %extelt.offset21 = lshr i32 %274, 16, !dbg !48
  %280 = trunc i32 %extelt.offset21 to i16, !dbg !48
  %281 = trunc i32 %275 to i16, !dbg !48
  %extelt.offset22 = lshr i32 %275, 16, !dbg !48
  %282 = trunc i32 %extelt.offset22 to i16, !dbg !48
  %283 = trunc i32 %276 to i16, !dbg !48
  %extelt.offset23 = lshr i32 %276, 16, !dbg !48
  %284 = trunc i32 %extelt.offset23 to i16, !dbg !48
  %285 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %264) #2, !dbg !49
  %286 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #2, !dbg !49
  %287 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #2, !dbg !49
  %288 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #2, !dbg !49
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #2, !dbg !49
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %269) #2, !dbg !49
  %291 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %270) #2, !dbg !49
  %292 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %271) #2, !dbg !49
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %277) #2, !dbg !49
  %294 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %278) #2, !dbg !49
  %295 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %279) #2, !dbg !49
  %296 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %280) #2, !dbg !49
  %297 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %281) #2, !dbg !49
  %298 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %282) #2, !dbg !49
  %299 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %283) #2, !dbg !49
  %300 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %284) #2, !dbg !49
  %301 = add i32 %247, %178, !dbg !50
  %302 = add i32 %248, %178, !dbg !50
  %303 = add i32 %247, %179, !dbg !50
  %304 = add i32 %248, %179, !dbg !50
  %305 = sext i32 %301 to i64, !dbg !51
  %306 = getelementptr float, ptr addrspace(1) %2, i64 %305, !dbg !51
  %307 = sext i32 %302 to i64, !dbg !51
  %308 = getelementptr float, ptr addrspace(1) %2, i64 %307, !dbg !51
  %309 = sext i32 %303 to i64, !dbg !51
  %310 = getelementptr float, ptr addrspace(1) %2, i64 %309, !dbg !51
  %311 = sext i32 %304 to i64, !dbg !51
  %312 = getelementptr float, ptr addrspace(1) %2, i64 %311, !dbg !51
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %306, i1 %257, i32 0, i1 %257, i32 0, i1 %257, i32 0, i1 %257, i32 0, i1 %257) #2, !dbg !52
  %314 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !52
  %315 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !52
  %316 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !52
  %317 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !52
  %318 = bitcast i32 %314 to float, !dbg !52
  %319 = bitcast i32 %315 to float, !dbg !52
  %320 = bitcast i32 %316 to float, !dbg !52
  %321 = bitcast i32 %317 to float, !dbg !52
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %308, i1 %257, i32 0, i1 %257, i32 0, i1 %257, i32 0, i1 %257, i32 0, i1 %257) #2, !dbg !52
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !52
  %324 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !52
  %325 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !52
  %326 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !52
  %327 = bitcast i32 %323 to float, !dbg !52
  %328 = bitcast i32 %324 to float, !dbg !52
  %329 = bitcast i32 %325 to float, !dbg !52
  %330 = bitcast i32 %326 to float, !dbg !52
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %310, i1 %258, i32 0, i1 %258, i32 0, i1 %258, i32 0, i1 %258, i32 0, i1 %258) #2, !dbg !52
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !52
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !52
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !52
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !52
  %336 = bitcast i32 %332 to float, !dbg !52
  %337 = bitcast i32 %333 to float, !dbg !52
  %338 = bitcast i32 %334 to float, !dbg !52
  %339 = bitcast i32 %335 to float, !dbg !52
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %312, i1 %258, i32 0, i1 %258, i32 0, i1 %258, i32 0, i1 %258, i32 0, i1 %258) #2, !dbg !52
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !52
  %342 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !52
  %343 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !52
  %344 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !52
  %345 = bitcast i32 %341 to float, !dbg !52
  %346 = bitcast i32 %342 to float, !dbg !52
  %347 = bitcast i32 %343 to float, !dbg !52
  %348 = bitcast i32 %344 to float, !dbg !52
  %349 = fmul float %285, %318, !dbg !53
  %350 = fmul float %286, %319, !dbg !53
  %351 = fmul float %287, %320, !dbg !53
  %352 = fmul float %288, %321, !dbg !53
  %353 = fmul float %289, %327, !dbg !53
  %354 = fmul float %290, %328, !dbg !53
  %355 = fmul float %291, %329, !dbg !53
  %356 = fmul float %292, %330, !dbg !53
  %357 = fmul float %293, %336, !dbg !53
  %358 = fmul float %294, %337, !dbg !53
  %359 = fmul float %295, %338, !dbg !53
  %360 = fmul float %296, %339, !dbg !53
  %361 = fmul float %297, %345, !dbg !53
  %362 = fmul float %298, %346, !dbg !53
  %363 = fmul float %299, %347, !dbg !53
  %364 = fmul float %300, %348, !dbg !53
  %365 = fsub float 0.000000e+00, %349, !dbg !54
  %366 = fsub float 0.000000e+00, %350, !dbg !54
  %367 = fsub float 0.000000e+00, %351, !dbg !54
  %368 = fsub float 0.000000e+00, %352, !dbg !54
  %369 = fsub float 0.000000e+00, %353, !dbg !54
  %370 = fsub float 0.000000e+00, %354, !dbg !54
  %371 = fsub float 0.000000e+00, %355, !dbg !54
  %372 = fsub float 0.000000e+00, %356, !dbg !54
  %373 = fsub float 0.000000e+00, %357, !dbg !54
  %374 = fsub float 0.000000e+00, %358, !dbg !54
  %375 = fsub float 0.000000e+00, %359, !dbg !54
  %376 = fsub float 0.000000e+00, %360, !dbg !54
  %377 = fsub float 0.000000e+00, %361, !dbg !54
  %378 = fsub float 0.000000e+00, %362, !dbg !54
  %379 = fsub float 0.000000e+00, %363, !dbg !54
  %380 = fsub float 0.000000e+00, %364, !dbg !54
  %381 = select i1 %245, float %365, float 0.000000e+00, !dbg !31
  %382 = select i1 %245, float %366, float 0.000000e+00, !dbg !31
  %383 = select i1 %245, float %367, float 0.000000e+00, !dbg !31
  %384 = select i1 %245, float %368, float 0.000000e+00, !dbg !31
  %385 = select i1 %245, float %369, float 0.000000e+00, !dbg !31
  %386 = select i1 %245, float %370, float 0.000000e+00, !dbg !31
  %387 = select i1 %245, float %371, float 0.000000e+00, !dbg !31
  %388 = select i1 %245, float %372, float 0.000000e+00, !dbg !31
  %389 = select i1 %246, float %373, float 0.000000e+00, !dbg !31
  %390 = select i1 %246, float %374, float 0.000000e+00, !dbg !31
  %391 = select i1 %246, float %375, float 0.000000e+00, !dbg !31
  %392 = select i1 %246, float %376, float 0.000000e+00, !dbg !31
  %393 = select i1 %246, float %377, float 0.000000e+00, !dbg !31
  %394 = select i1 %246, float %378, float 0.000000e+00, !dbg !31
  %395 = select i1 %246, float %379, float 0.000000e+00, !dbg !31
  %396 = select i1 %246, float %380, float 0.000000e+00, !dbg !31
  %397 = fadd float %228, %381, !dbg !55
  %398 = fadd float %229, %382, !dbg !55
  %399 = fadd float %230, %383, !dbg !55
  %400 = fadd float %231, %384, !dbg !55
  %401 = fadd float %232, %385, !dbg !55
  %402 = fadd float %233, %386, !dbg !55
  %403 = fadd float %234, %387, !dbg !55
  %404 = fadd float %235, %388, !dbg !55
  %405 = fadd float %236, %389, !dbg !55
  %406 = fadd float %237, %390, !dbg !55
  %407 = fadd float %238, %391, !dbg !55
  %408 = fadd float %239, %392, !dbg !55
  %409 = fadd float %240, %393, !dbg !55
  %410 = fadd float %241, %394, !dbg !55
  %411 = fadd float %242, %395, !dbg !55
  %412 = fadd float %243, %396, !dbg !55
  %413 = icmp slt i32 %34, 128, !dbg !56
  %414 = and i1 %413, %57, !dbg !57
  %415 = and i1 %413, %58, !dbg !57
  %416 = add i32 %34, 128, !dbg !58
  %417 = add i32 %35, 128, !dbg !58
  %418 = add i32 %66, %416, !dbg !59
  %419 = add i32 %68, %416, !dbg !59
  %420 = sext i32 %418 to i64, !dbg !60
  %421 = getelementptr i16, ptr addrspace(1) %0, i64 %420, !dbg !60
  %422 = sext i32 %419 to i64, !dbg !60
  %423 = getelementptr i16, ptr addrspace(1) %0, i64 %422, !dbg !60
  %424 = and i1 %29, %414, !dbg !61
  %425 = and i1 %30, %415, !dbg !61
  %426 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %421, i1 %424, i32 0, i1 %424, i32 0, i1 %424, i32 0, i1 %424, i32 0, i1 %424) #2, !dbg !62
  %427 = extractvalue { i32, i32, i32, i32 } %426, 0, !dbg !62
  %428 = extractvalue { i32, i32, i32, i32 } %426, 1, !dbg !62
  %429 = extractvalue { i32, i32, i32, i32 } %426, 2, !dbg !62
  %430 = extractvalue { i32, i32, i32, i32 } %426, 3, !dbg !62
  %431 = trunc i32 %427 to i16, !dbg !62
  %extelt.offset24 = lshr i32 %427, 16, !dbg !62
  %432 = trunc i32 %extelt.offset24 to i16, !dbg !62
  %433 = trunc i32 %428 to i16, !dbg !62
  %extelt.offset25 = lshr i32 %428, 16, !dbg !62
  %434 = trunc i32 %extelt.offset25 to i16, !dbg !62
  %435 = trunc i32 %429 to i16, !dbg !62
  %extelt.offset26 = lshr i32 %429, 16, !dbg !62
  %436 = trunc i32 %extelt.offset26 to i16, !dbg !62
  %437 = trunc i32 %430 to i16, !dbg !62
  %extelt.offset27 = lshr i32 %430, 16, !dbg !62
  %438 = trunc i32 %extelt.offset27 to i16, !dbg !62
  %439 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %423, i1 %425, i32 0, i1 %425, i32 0, i1 %425, i32 0, i1 %425, i32 0, i1 %425) #2, !dbg !62
  %440 = extractvalue { i32, i32, i32, i32 } %439, 0, !dbg !62
  %441 = extractvalue { i32, i32, i32, i32 } %439, 1, !dbg !62
  %442 = extractvalue { i32, i32, i32, i32 } %439, 2, !dbg !62
  %443 = extractvalue { i32, i32, i32, i32 } %439, 3, !dbg !62
  %444 = trunc i32 %440 to i16, !dbg !62
  %extelt.offset28 = lshr i32 %440, 16, !dbg !62
  %445 = trunc i32 %extelt.offset28 to i16, !dbg !62
  %446 = trunc i32 %441 to i16, !dbg !62
  %extelt.offset29 = lshr i32 %441, 16, !dbg !62
  %447 = trunc i32 %extelt.offset29 to i16, !dbg !62
  %448 = trunc i32 %442 to i16, !dbg !62
  %extelt.offset30 = lshr i32 %442, 16, !dbg !62
  %449 = trunc i32 %extelt.offset30 to i16, !dbg !62
  %450 = trunc i32 %443 to i16, !dbg !62
  %extelt.offset31 = lshr i32 %443, 16, !dbg !62
  %451 = trunc i32 %extelt.offset31 to i16, !dbg !62
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #2, !dbg !63
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #2, !dbg !63
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #2, !dbg !63
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %434) #2, !dbg !63
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %435) #2, !dbg !63
  %457 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #2, !dbg !63
  %458 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #2, !dbg !63
  %459 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #2, !dbg !63
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #2, !dbg !63
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #2, !dbg !63
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #2, !dbg !63
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #2, !dbg !63
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #2, !dbg !63
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #2, !dbg !63
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #2, !dbg !63
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #2, !dbg !63
  %468 = add i32 %416, %178, !dbg !64
  %469 = add i32 %417, %178, !dbg !64
  %470 = add i32 %416, %179, !dbg !64
  %471 = add i32 %417, %179, !dbg !64
  %472 = sext i32 %468 to i64, !dbg !65
  %473 = getelementptr float, ptr addrspace(1) %2, i64 %472, !dbg !65
  %474 = sext i32 %469 to i64, !dbg !65
  %475 = getelementptr float, ptr addrspace(1) %2, i64 %474, !dbg !65
  %476 = sext i32 %470 to i64, !dbg !65
  %477 = getelementptr float, ptr addrspace(1) %2, i64 %476, !dbg !65
  %478 = sext i32 %471 to i64, !dbg !65
  %479 = getelementptr float, ptr addrspace(1) %2, i64 %478, !dbg !65
  %480 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %473, i1 %424, i32 0, i1 %424, i32 0, i1 %424, i32 0, i1 %424, i32 0, i1 %424) #2, !dbg !66
  %481 = extractvalue { i32, i32, i32, i32 } %480, 0, !dbg !66
  %482 = extractvalue { i32, i32, i32, i32 } %480, 1, !dbg !66
  %483 = extractvalue { i32, i32, i32, i32 } %480, 2, !dbg !66
  %484 = extractvalue { i32, i32, i32, i32 } %480, 3, !dbg !66
  %485 = bitcast i32 %481 to float, !dbg !66
  %486 = bitcast i32 %482 to float, !dbg !66
  %487 = bitcast i32 %483 to float, !dbg !66
  %488 = bitcast i32 %484 to float, !dbg !66
  %489 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %475, i1 %424, i32 0, i1 %424, i32 0, i1 %424, i32 0, i1 %424, i32 0, i1 %424) #2, !dbg !66
  %490 = extractvalue { i32, i32, i32, i32 } %489, 0, !dbg !66
  %491 = extractvalue { i32, i32, i32, i32 } %489, 1, !dbg !66
  %492 = extractvalue { i32, i32, i32, i32 } %489, 2, !dbg !66
  %493 = extractvalue { i32, i32, i32, i32 } %489, 3, !dbg !66
  %494 = bitcast i32 %490 to float, !dbg !66
  %495 = bitcast i32 %491 to float, !dbg !66
  %496 = bitcast i32 %492 to float, !dbg !66
  %497 = bitcast i32 %493 to float, !dbg !66
  %498 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %477, i1 %425, i32 0, i1 %425, i32 0, i1 %425, i32 0, i1 %425, i32 0, i1 %425) #2, !dbg !66
  %499 = extractvalue { i32, i32, i32, i32 } %498, 0, !dbg !66
  %500 = extractvalue { i32, i32, i32, i32 } %498, 1, !dbg !66
  %501 = extractvalue { i32, i32, i32, i32 } %498, 2, !dbg !66
  %502 = extractvalue { i32, i32, i32, i32 } %498, 3, !dbg !66
  %503 = bitcast i32 %499 to float, !dbg !66
  %504 = bitcast i32 %500 to float, !dbg !66
  %505 = bitcast i32 %501 to float, !dbg !66
  %506 = bitcast i32 %502 to float, !dbg !66
  %507 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %479, i1 %425, i32 0, i1 %425, i32 0, i1 %425, i32 0, i1 %425, i32 0, i1 %425) #2, !dbg !66
  %508 = extractvalue { i32, i32, i32, i32 } %507, 0, !dbg !66
  %509 = extractvalue { i32, i32, i32, i32 } %507, 1, !dbg !66
  %510 = extractvalue { i32, i32, i32, i32 } %507, 2, !dbg !66
  %511 = extractvalue { i32, i32, i32, i32 } %507, 3, !dbg !66
  %512 = bitcast i32 %508 to float, !dbg !66
  %513 = bitcast i32 %509 to float, !dbg !66
  %514 = bitcast i32 %510 to float, !dbg !66
  %515 = bitcast i32 %511 to float, !dbg !66
  %516 = fmul float %452, %485, !dbg !67
  %517 = fmul float %453, %486, !dbg !67
  %518 = fmul float %454, %487, !dbg !67
  %519 = fmul float %455, %488, !dbg !67
  %520 = fmul float %456, %494, !dbg !67
  %521 = fmul float %457, %495, !dbg !67
  %522 = fmul float %458, %496, !dbg !67
  %523 = fmul float %459, %497, !dbg !67
  %524 = fmul float %460, %503, !dbg !67
  %525 = fmul float %461, %504, !dbg !67
  %526 = fmul float %462, %505, !dbg !67
  %527 = fmul float %463, %506, !dbg !67
  %528 = fmul float %464, %512, !dbg !67
  %529 = fmul float %465, %513, !dbg !67
  %530 = fmul float %466, %514, !dbg !67
  %531 = fmul float %467, %515, !dbg !67
  %532 = select i1 %414, float %516, float 0.000000e+00, !dbg !31
  %533 = select i1 %414, float %517, float 0.000000e+00, !dbg !31
  %534 = select i1 %414, float %518, float 0.000000e+00, !dbg !31
  %535 = select i1 %414, float %519, float 0.000000e+00, !dbg !31
  %536 = select i1 %414, float %520, float 0.000000e+00, !dbg !31
  %537 = select i1 %414, float %521, float 0.000000e+00, !dbg !31
  %538 = select i1 %414, float %522, float 0.000000e+00, !dbg !31
  %539 = select i1 %414, float %523, float 0.000000e+00, !dbg !31
  %540 = select i1 %415, float %524, float 0.000000e+00, !dbg !31
  %541 = select i1 %415, float %525, float 0.000000e+00, !dbg !31
  %542 = select i1 %415, float %526, float 0.000000e+00, !dbg !31
  %543 = select i1 %415, float %527, float 0.000000e+00, !dbg !31
  %544 = select i1 %415, float %528, float 0.000000e+00, !dbg !31
  %545 = select i1 %415, float %529, float 0.000000e+00, !dbg !31
  %546 = select i1 %415, float %530, float 0.000000e+00, !dbg !31
  %547 = select i1 %415, float %531, float 0.000000e+00, !dbg !31
  %548 = fadd float %397, %532, !dbg !68
  %549 = fadd float %398, %533, !dbg !68
  %550 = fadd float %399, %534, !dbg !68
  %551 = fadd float %400, %535, !dbg !68
  %552 = fadd float %401, %536, !dbg !68
  %553 = fadd float %402, %537, !dbg !68
  %554 = fadd float %403, %538, !dbg !68
  %555 = fadd float %404, %539, !dbg !68
  %556 = fadd float %405, %540, !dbg !68
  %557 = fadd float %406, %541, !dbg !68
  %558 = fadd float %407, %542, !dbg !68
  %559 = fadd float %408, %543, !dbg !68
  %560 = fadd float %409, %544, !dbg !68
  %561 = fadd float %410, %545, !dbg !68
  %562 = fadd float %411, %546, !dbg !68
  %563 = fadd float %412, %547, !dbg !68
  %564 = fadd float %116, %548, !dbg !69
  %565 = fadd float %117, %549, !dbg !69
  %566 = fadd float %118, %550, !dbg !69
  %567 = fadd float %119, %551, !dbg !69
  %568 = fadd float %120, %552, !dbg !69
  %569 = fadd float %121, %553, !dbg !69
  %570 = fadd float %122, %554, !dbg !69
  %571 = fadd float %123, %555, !dbg !69
  %572 = fadd float %124, %556, !dbg !69
  %573 = fadd float %125, %557, !dbg !69
  %574 = fadd float %126, %558, !dbg !69
  %575 = fadd float %127, %559, !dbg !69
  %576 = fadd float %128, %560, !dbg !69
  %577 = fadd float %129, %561, !dbg !69
  %578 = fadd float %130, %562, !dbg !69
  %579 = fadd float %131, %563, !dbg !69
  %580 = icmp eq i32 %48, 2, !dbg !70
  %581 = icmp eq i32 %49, 2, !dbg !70
  %582 = and i32 %47, -2147483645, !dbg !70
  %583 = icmp eq i32 %582, 2, !dbg !70
  %584 = shl i32 %36, 2, !dbg !71
  %585 = shl i32 %37, 2, !dbg !71
  %586 = shl i32 %38, 2, !dbg !71
  %587 = shl i32 %39, 2, !dbg !71
  %588 = shl i32 %52, 10, !dbg !72
  %589 = add i32 %584, %588, !dbg !73
  %590 = add i32 %585, %588, !dbg !73
  %591 = add i32 %586, %588, !dbg !73
  %592 = add i32 %587, %588, !dbg !73
  %593 = sext i32 %589 to i64, !dbg !74
  %594 = getelementptr float, ptr addrspace(1) %3, i64 %593, !dbg !74
  %595 = sext i32 %590 to i64, !dbg !74
  %596 = getelementptr float, ptr addrspace(1) %3, i64 %595, !dbg !74
  %597 = sext i32 %591 to i64, !dbg !74
  %598 = getelementptr float, ptr addrspace(1) %3, i64 %597, !dbg !74
  %599 = sext i32 %592 to i64, !dbg !74
  %600 = getelementptr float, ptr addrspace(1) %3, i64 %599, !dbg !74
  %601 = and i1 %41, %583, !dbg !75
  %602 = and i1 %42, %583, !dbg !75
  %603 = and i1 %43, %583, !dbg !75
  %604 = and i1 %44, %583, !dbg !75
  %605 = and i1 %31, %601, !dbg !76
  %606 = and i1 %31, %602, !dbg !76
  %607 = and i1 %31, %603, !dbg !76
  %608 = and i1 %31, %604, !dbg !76
  %609 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %594, i1 %605, i32 0, i1 %605, i32 0, i1 %605, i32 0, i1 %605, i32 0, i1 %605) #2, !dbg !77
  %610 = extractvalue { i32, i32, i32, i32 } %609, 0, !dbg !77
  %611 = extractvalue { i32, i32, i32, i32 } %609, 1, !dbg !77
  %612 = extractvalue { i32, i32, i32, i32 } %609, 2, !dbg !77
  %613 = extractvalue { i32, i32, i32, i32 } %609, 3, !dbg !77
  %614 = bitcast i32 %610 to float, !dbg !77
  %615 = bitcast i32 %611 to float, !dbg !77
  %616 = bitcast i32 %612 to float, !dbg !77
  %617 = bitcast i32 %613 to float, !dbg !77
  %618 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %596, i1 %606, i32 0, i1 %606, i32 0, i1 %606, i32 0, i1 %606, i32 0, i1 %606) #2, !dbg !77
  %619 = extractvalue { i32, i32, i32, i32 } %618, 0, !dbg !77
  %620 = extractvalue { i32, i32, i32, i32 } %618, 1, !dbg !77
  %621 = extractvalue { i32, i32, i32, i32 } %618, 2, !dbg !77
  %622 = extractvalue { i32, i32, i32, i32 } %618, 3, !dbg !77
  %623 = bitcast i32 %619 to float, !dbg !77
  %624 = bitcast i32 %620 to float, !dbg !77
  %625 = bitcast i32 %621 to float, !dbg !77
  %626 = bitcast i32 %622 to float, !dbg !77
  %627 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %598, i1 %607, i32 0, i1 %607, i32 0, i1 %607, i32 0, i1 %607, i32 0, i1 %607) #2, !dbg !77
  %628 = extractvalue { i32, i32, i32, i32 } %627, 0, !dbg !77
  %629 = extractvalue { i32, i32, i32, i32 } %627, 1, !dbg !77
  %630 = extractvalue { i32, i32, i32, i32 } %627, 2, !dbg !77
  %631 = extractvalue { i32, i32, i32, i32 } %627, 3, !dbg !77
  %632 = bitcast i32 %628 to float, !dbg !77
  %633 = bitcast i32 %629 to float, !dbg !77
  %634 = bitcast i32 %630 to float, !dbg !77
  %635 = bitcast i32 %631 to float, !dbg !77
  %636 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %600, i1 %608, i32 0, i1 %608, i32 0, i1 %608, i32 0, i1 %608, i32 0, i1 %608) #2, !dbg !77
  %637 = extractvalue { i32, i32, i32, i32 } %636, 0, !dbg !77
  %638 = extractvalue { i32, i32, i32, i32 } %636, 1, !dbg !77
  %639 = extractvalue { i32, i32, i32, i32 } %636, 2, !dbg !77
  %640 = extractvalue { i32, i32, i32, i32 } %636, 3, !dbg !77
  %641 = bitcast i32 %637 to float, !dbg !77
  %642 = bitcast i32 %638 to float, !dbg !77
  %643 = bitcast i32 %639 to float, !dbg !77
  %644 = bitcast i32 %640 to float, !dbg !77
  %645 = select i1 %583, float %614, float 0.000000e+00, !dbg !78
  %646 = select i1 %583, float %615, float 0.000000e+00, !dbg !78
  %647 = select i1 %583, float %616, float 0.000000e+00, !dbg !78
  %648 = select i1 %583, float %617, float 0.000000e+00, !dbg !78
  %649 = select i1 %583, float %623, float 0.000000e+00, !dbg !78
  %650 = select i1 %583, float %624, float 0.000000e+00, !dbg !78
  %651 = select i1 %583, float %625, float 0.000000e+00, !dbg !78
  %652 = select i1 %583, float %626, float 0.000000e+00, !dbg !78
  %653 = select i1 %583, float %632, float 0.000000e+00, !dbg !78
  %654 = select i1 %583, float %633, float 0.000000e+00, !dbg !78
  %655 = select i1 %583, float %634, float 0.000000e+00, !dbg !78
  %656 = select i1 %583, float %635, float 0.000000e+00, !dbg !78
  %657 = select i1 %583, float %641, float 0.000000e+00, !dbg !78
  %658 = select i1 %583, float %642, float 0.000000e+00, !dbg !78
  %659 = select i1 %583, float %643, float 0.000000e+00, !dbg !78
  %660 = select i1 %583, float %644, float 0.000000e+00, !dbg !78
  %661 = mul nuw nsw i32 %15, 257, !dbg !78
  %662 = add nuw nsw i32 %20, %661, !dbg !78
  %663 = zext nneg i32 %662 to i64, !dbg !78
  %664 = getelementptr float, ptr addrspace(3) @global_smem, i64 %663, !dbg !78
  %665 = insertelement <1 x float> undef, float %645, i64 0, !dbg !78
  store <1 x float> %665, ptr addrspace(3) %664, align 4, !dbg !78
  %666 = add nuw nsw i32 %661, 257, !dbg !78
  %667 = add nuw nsw i32 %666, %20, !dbg !78
  %668 = zext nneg i32 %667 to i64, !dbg !78
  %669 = getelementptr float, ptr addrspace(3) @global_smem, i64 %668, !dbg !78
  %670 = insertelement <1 x float> undef, float %646, i64 0, !dbg !78
  store <1 x float> %670, ptr addrspace(3) %669, align 4, !dbg !78
  %671 = add nuw nsw i32 %661, 514, !dbg !78
  %672 = add nuw nsw i32 %671, %20, !dbg !78
  %673 = zext nneg i32 %672 to i64, !dbg !78
  %674 = getelementptr float, ptr addrspace(3) @global_smem, i64 %673, !dbg !78
  %675 = insertelement <1 x float> undef, float %647, i64 0, !dbg !78
  store <1 x float> %675, ptr addrspace(3) %674, align 4, !dbg !78
  %676 = add nuw nsw i32 %661, 771, !dbg !78
  %677 = add nuw nsw i32 %676, %20, !dbg !78
  %678 = zext nneg i32 %677 to i64, !dbg !78
  %679 = getelementptr float, ptr addrspace(3) @global_smem, i64 %678, !dbg !78
  %680 = insertelement <1 x float> undef, float %648, i64 0, !dbg !78
  store <1 x float> %680, ptr addrspace(3) %679, align 4, !dbg !78
  %681 = add nuw nsw i32 %21, %661, !dbg !78
  %682 = zext nneg i32 %681 to i64, !dbg !78
  %683 = getelementptr float, ptr addrspace(3) @global_smem, i64 %682, !dbg !78
  %684 = insertelement <1 x float> undef, float %649, i64 0, !dbg !78
  store <1 x float> %684, ptr addrspace(3) %683, align 4, !dbg !78
  %685 = add nuw nsw i32 %21, %666, !dbg !78
  %686 = zext nneg i32 %685 to i64, !dbg !78
  %687 = getelementptr float, ptr addrspace(3) @global_smem, i64 %686, !dbg !78
  %688 = insertelement <1 x float> undef, float %650, i64 0, !dbg !78
  store <1 x float> %688, ptr addrspace(3) %687, align 4, !dbg !78
  %689 = add nuw nsw i32 %21, %671, !dbg !78
  %690 = zext nneg i32 %689 to i64, !dbg !78
  %691 = getelementptr float, ptr addrspace(3) @global_smem, i64 %690, !dbg !78
  %692 = insertelement <1 x float> undef, float %651, i64 0, !dbg !78
  store <1 x float> %692, ptr addrspace(3) %691, align 4, !dbg !78
  %693 = add nuw nsw i32 %21, %676, !dbg !78
  %694 = zext nneg i32 %693 to i64, !dbg !78
  %695 = getelementptr float, ptr addrspace(3) @global_smem, i64 %694, !dbg !78
  %696 = insertelement <1 x float> undef, float %652, i64 0, !dbg !78
  store <1 x float> %696, ptr addrspace(3) %695, align 4, !dbg !78
  %697 = add nuw nsw i32 %22, %661, !dbg !78
  %698 = zext nneg i32 %697 to i64, !dbg !78
  %699 = getelementptr float, ptr addrspace(3) @global_smem, i64 %698, !dbg !78
  %700 = insertelement <1 x float> undef, float %653, i64 0, !dbg !78
  store <1 x float> %700, ptr addrspace(3) %699, align 4, !dbg !78
  %701 = add nuw nsw i32 %22, %666, !dbg !78
  %702 = zext nneg i32 %701 to i64, !dbg !78
  %703 = getelementptr float, ptr addrspace(3) @global_smem, i64 %702, !dbg !78
  %704 = insertelement <1 x float> undef, float %654, i64 0, !dbg !78
  store <1 x float> %704, ptr addrspace(3) %703, align 4, !dbg !78
  %705 = add nuw nsw i32 %22, %671, !dbg !78
  %706 = zext nneg i32 %705 to i64, !dbg !78
  %707 = getelementptr float, ptr addrspace(3) @global_smem, i64 %706, !dbg !78
  %708 = insertelement <1 x float> undef, float %655, i64 0, !dbg !78
  store <1 x float> %708, ptr addrspace(3) %707, align 4, !dbg !78
  %709 = add nuw nsw i32 %22, %676, !dbg !78
  %710 = zext nneg i32 %709 to i64, !dbg !78
  %711 = getelementptr float, ptr addrspace(3) @global_smem, i64 %710, !dbg !78
  %712 = insertelement <1 x float> undef, float %656, i64 0, !dbg !78
  store <1 x float> %712, ptr addrspace(3) %711, align 4, !dbg !78
  %713 = add nuw nsw i32 %23, %661, !dbg !78
  %714 = zext nneg i32 %713 to i64, !dbg !78
  %715 = getelementptr float, ptr addrspace(3) @global_smem, i64 %714, !dbg !78
  %716 = insertelement <1 x float> undef, float %657, i64 0, !dbg !78
  store <1 x float> %716, ptr addrspace(3) %715, align 4, !dbg !78
  %717 = add nuw nsw i32 %23, %666, !dbg !78
  %718 = zext nneg i32 %717 to i64, !dbg !78
  %719 = getelementptr float, ptr addrspace(3) @global_smem, i64 %718, !dbg !78
  %720 = insertelement <1 x float> undef, float %658, i64 0, !dbg !78
  store <1 x float> %720, ptr addrspace(3) %719, align 4, !dbg !78
  %721 = add nuw nsw i32 %23, %671, !dbg !78
  %722 = zext nneg i32 %721 to i64, !dbg !78
  %723 = getelementptr float, ptr addrspace(3) @global_smem, i64 %722, !dbg !78
  %724 = insertelement <1 x float> undef, float %659, i64 0, !dbg !78
  store <1 x float> %724, ptr addrspace(3) %723, align 4, !dbg !78
  %725 = add nuw nsw i32 %23, %676, !dbg !78
  %726 = zext nneg i32 %725 to i64, !dbg !78
  %727 = getelementptr float, ptr addrspace(3) @global_smem, i64 %726, !dbg !78
  %728 = insertelement <1 x float> undef, float %660, i64 0, !dbg !78
  store <1 x float> %728, ptr addrspace(3) %727, align 4, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %729 = mul nuw nsw i32 %12, 257, !dbg !78
  %730 = add nuw nsw i32 %729, %16, !dbg !78
  %731 = zext nneg i32 %730 to i64, !dbg !78
  %732 = getelementptr float, ptr addrspace(3) @global_smem, i64 %731, !dbg !78
  %733 = load float, ptr addrspace(3) %732, align 4, !dbg !78
  %734 = or i32 %16, 1, !dbg !78
  %735 = add nuw nsw i32 %729, %734, !dbg !78
  %736 = zext nneg i32 %735 to i64, !dbg !78
  %737 = getelementptr float, ptr addrspace(3) @global_smem, i64 %736, !dbg !78
  %738 = load float, ptr addrspace(3) %737, align 4, !dbg !78
  %739 = or i32 %16, 2, !dbg !78
  %740 = add nuw nsw i32 %729, %739, !dbg !78
  %741 = zext nneg i32 %740 to i64, !dbg !78
  %742 = getelementptr float, ptr addrspace(3) @global_smem, i64 %741, !dbg !78
  %743 = load float, ptr addrspace(3) %742, align 4, !dbg !78
  %744 = or i32 %16, 3, !dbg !78
  %745 = add nuw nsw i32 %729, %744, !dbg !78
  %746 = zext nneg i32 %745 to i64, !dbg !78
  %747 = getelementptr float, ptr addrspace(3) @global_smem, i64 %746, !dbg !78
  %748 = load float, ptr addrspace(3) %747, align 4, !dbg !78
  %749 = add nuw nsw i32 %729, %17, !dbg !78
  %750 = zext nneg i32 %749 to i64, !dbg !78
  %751 = getelementptr float, ptr addrspace(3) @global_smem, i64 %750, !dbg !78
  %752 = load float, ptr addrspace(3) %751, align 4, !dbg !78
  %753 = or i32 %16, 5, !dbg !78
  %754 = add nuw nsw i32 %729, %753, !dbg !78
  %755 = zext nneg i32 %754 to i64, !dbg !78
  %756 = getelementptr float, ptr addrspace(3) @global_smem, i64 %755, !dbg !78
  %757 = load float, ptr addrspace(3) %756, align 4, !dbg !78
  %758 = or i32 %16, 6, !dbg !78
  %759 = add nuw nsw i32 %729, %758, !dbg !78
  %760 = zext nneg i32 %759 to i64, !dbg !78
  %761 = getelementptr float, ptr addrspace(3) @global_smem, i64 %760, !dbg !78
  %762 = load float, ptr addrspace(3) %761, align 4, !dbg !78
  %763 = or i32 %16, 7, !dbg !78
  %764 = add nuw nsw i32 %729, %763, !dbg !78
  %765 = zext nneg i32 %764 to i64, !dbg !78
  %766 = getelementptr float, ptr addrspace(3) @global_smem, i64 %765, !dbg !78
  %767 = load float, ptr addrspace(3) %766, align 4, !dbg !78
  %768 = mul nuw nsw i32 %13, 257, !dbg !78
  %769 = add nuw nsw i32 %768, %16, !dbg !78
  %770 = zext nneg i32 %769 to i64, !dbg !78
  %771 = getelementptr float, ptr addrspace(3) @global_smem, i64 %770, !dbg !78
  %772 = load float, ptr addrspace(3) %771, align 4, !dbg !78
  %773 = add nuw nsw i32 %768, %734, !dbg !78
  %774 = zext nneg i32 %773 to i64, !dbg !78
  %775 = getelementptr float, ptr addrspace(3) @global_smem, i64 %774, !dbg !78
  %776 = load float, ptr addrspace(3) %775, align 4, !dbg !78
  %777 = add nuw nsw i32 %768, %739, !dbg !78
  %778 = zext nneg i32 %777 to i64, !dbg !78
  %779 = getelementptr float, ptr addrspace(3) @global_smem, i64 %778, !dbg !78
  %780 = load float, ptr addrspace(3) %779, align 4, !dbg !78
  %781 = add nuw nsw i32 %768, %744, !dbg !78
  %782 = zext nneg i32 %781 to i64, !dbg !78
  %783 = getelementptr float, ptr addrspace(3) @global_smem, i64 %782, !dbg !78
  %784 = load float, ptr addrspace(3) %783, align 4, !dbg !78
  %785 = add nuw nsw i32 %768, %17, !dbg !78
  %786 = zext nneg i32 %785 to i64, !dbg !78
  %787 = getelementptr float, ptr addrspace(3) @global_smem, i64 %786, !dbg !78
  %788 = load float, ptr addrspace(3) %787, align 4, !dbg !78
  %789 = add nuw nsw i32 %768, %753, !dbg !78
  %790 = zext nneg i32 %789 to i64, !dbg !78
  %791 = getelementptr float, ptr addrspace(3) @global_smem, i64 %790, !dbg !78
  %792 = load float, ptr addrspace(3) %791, align 4, !dbg !78
  %793 = add nuw nsw i32 %768, %758, !dbg !78
  %794 = zext nneg i32 %793 to i64, !dbg !78
  %795 = getelementptr float, ptr addrspace(3) @global_smem, i64 %794, !dbg !78
  %796 = load float, ptr addrspace(3) %795, align 4, !dbg !78
  %797 = add nuw nsw i32 %768, %763, !dbg !78
  %798 = zext nneg i32 %797 to i64, !dbg !78
  %799 = getelementptr float, ptr addrspace(3) @global_smem, i64 %798, !dbg !78
  %800 = load float, ptr addrspace(3) %799, align 4, !dbg !78
  %801 = icmp sgt i32 %48, 2, !dbg !79
  %802 = icmp sgt i32 %49, 2, !dbg !79
  %803 = add i32 %180, %64, !dbg !80
  %804 = add i32 %182, %65, !dbg !80
  %805 = sext i32 %803 to i64, !dbg !81
  %806 = getelementptr i16, ptr addrspace(1) %4, i64 %805, !dbg !81
  %807 = sext i32 %804 to i64, !dbg !81
  %808 = getelementptr i16, ptr addrspace(1) %4, i64 %807, !dbg !81
  %809 = and i1 %40, %801, !dbg !82
  %810 = and i1 %40, %802, !dbg !82
  %811 = and i1 %29, %809, !dbg !83
  %812 = and i1 %30, %810, !dbg !83
  %813 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %806, i1 %811, i32 0, i1 %811, i32 0, i1 %811, i32 0, i1 %811, i32 0, i1 %811) #2, !dbg !84
  %814 = extractvalue { i32, i32, i32, i32 } %813, 0, !dbg !84
  %815 = extractvalue { i32, i32, i32, i32 } %813, 1, !dbg !84
  %816 = extractvalue { i32, i32, i32, i32 } %813, 2, !dbg !84
  %817 = extractvalue { i32, i32, i32, i32 } %813, 3, !dbg !84
  %818 = trunc i32 %814 to i16, !dbg !84
  %extelt.offset32 = lshr i32 %814, 16, !dbg !84
  %819 = trunc i32 %extelt.offset32 to i16, !dbg !84
  %820 = trunc i32 %815 to i16, !dbg !84
  %extelt.offset33 = lshr i32 %815, 16, !dbg !84
  %821 = trunc i32 %extelt.offset33 to i16, !dbg !84
  %822 = trunc i32 %816 to i16, !dbg !84
  %extelt.offset34 = lshr i32 %816, 16, !dbg !84
  %823 = trunc i32 %extelt.offset34 to i16, !dbg !84
  %824 = trunc i32 %817 to i16, !dbg !84
  %extelt.offset35 = lshr i32 %817, 16, !dbg !84
  %825 = trunc i32 %extelt.offset35 to i16, !dbg !84
  %826 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %808, i1 %812, i32 0, i1 %812, i32 0, i1 %812, i32 0, i1 %812, i32 0, i1 %812) #2, !dbg !84
  %827 = extractvalue { i32, i32, i32, i32 } %826, 0, !dbg !84
  %828 = extractvalue { i32, i32, i32, i32 } %826, 1, !dbg !84
  %829 = extractvalue { i32, i32, i32, i32 } %826, 2, !dbg !84
  %830 = extractvalue { i32, i32, i32, i32 } %826, 3, !dbg !84
  %831 = trunc i32 %827 to i16, !dbg !84
  %extelt.offset36 = lshr i32 %827, 16, !dbg !84
  %832 = trunc i32 %extelt.offset36 to i16, !dbg !84
  %833 = trunc i32 %828 to i16, !dbg !84
  %extelt.offset37 = lshr i32 %828, 16, !dbg !84
  %834 = trunc i32 %extelt.offset37 to i16, !dbg !84
  %835 = trunc i32 %829 to i16, !dbg !84
  %extelt.offset38 = lshr i32 %829, 16, !dbg !84
  %836 = trunc i32 %extelt.offset38 to i16, !dbg !84
  %837 = trunc i32 %830 to i16, !dbg !84
  %extelt.offset39 = lshr i32 %830, 16, !dbg !84
  %838 = trunc i32 %extelt.offset39 to i16, !dbg !84
  %839 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %818) #2, !dbg !85
  %840 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %819) #2, !dbg !85
  %841 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %820) #2, !dbg !85
  %842 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %821) #2, !dbg !85
  %843 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %822) #2, !dbg !85
  %844 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %823) #2, !dbg !85
  %845 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %824) #2, !dbg !85
  %846 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %825) #2, !dbg !85
  %847 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %831) #2, !dbg !85
  %848 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %832) #2, !dbg !85
  %849 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %833) #2, !dbg !85
  %850 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %834) #2, !dbg !85
  %851 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %835) #2, !dbg !85
  %852 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %836) #2, !dbg !85
  %853 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %837) #2, !dbg !85
  %854 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %838) #2, !dbg !85
  %855 = add i32 %34, 1024, !dbg !86
  %856 = add i32 %855, %178, !dbg !87
  %857 = add i32 %855, %179, !dbg !87
  %858 = add i32 %856, %64, !dbg !88
  %859 = add i32 %857, %65, !dbg !88
  %860 = sext i32 %858 to i64, !dbg !89
  %861 = getelementptr i16, ptr addrspace(1) %4, i64 %860, !dbg !89
  %862 = sext i32 %859 to i64, !dbg !89
  %863 = getelementptr i16, ptr addrspace(1) %4, i64 %862, !dbg !89
  %864 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %861, i1 %811, i32 0, i1 %811, i32 0, i1 %811, i32 0, i1 %811, i32 0, i1 %811) #2, !dbg !90
  %865 = extractvalue { i32, i32, i32, i32 } %864, 0, !dbg !90
  %866 = extractvalue { i32, i32, i32, i32 } %864, 1, !dbg !90
  %867 = extractvalue { i32, i32, i32, i32 } %864, 2, !dbg !90
  %868 = extractvalue { i32, i32, i32, i32 } %864, 3, !dbg !90
  %869 = trunc i32 %865 to i16, !dbg !90
  %extelt.offset40 = lshr i32 %865, 16, !dbg !90
  %870 = trunc i32 %extelt.offset40 to i16, !dbg !90
  %871 = trunc i32 %866 to i16, !dbg !90
  %extelt.offset41 = lshr i32 %866, 16, !dbg !90
  %872 = trunc i32 %extelt.offset41 to i16, !dbg !90
  %873 = trunc i32 %867 to i16, !dbg !90
  %extelt.offset42 = lshr i32 %867, 16, !dbg !90
  %874 = trunc i32 %extelt.offset42 to i16, !dbg !90
  %875 = trunc i32 %868 to i16, !dbg !90
  %extelt.offset43 = lshr i32 %868, 16, !dbg !90
  %876 = trunc i32 %extelt.offset43 to i16, !dbg !90
  %877 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %863, i1 %812, i32 0, i1 %812, i32 0, i1 %812, i32 0, i1 %812, i32 0, i1 %812) #2, !dbg !90
  %878 = extractvalue { i32, i32, i32, i32 } %877, 0, !dbg !90
  %879 = extractvalue { i32, i32, i32, i32 } %877, 1, !dbg !90
  %880 = extractvalue { i32, i32, i32, i32 } %877, 2, !dbg !90
  %881 = extractvalue { i32, i32, i32, i32 } %877, 3, !dbg !90
  %882 = trunc i32 %878 to i16, !dbg !90
  %extelt.offset44 = lshr i32 %878, 16, !dbg !90
  %883 = trunc i32 %extelt.offset44 to i16, !dbg !90
  %884 = trunc i32 %879 to i16, !dbg !90
  %extelt.offset45 = lshr i32 %879, 16, !dbg !90
  %885 = trunc i32 %extelt.offset45 to i16, !dbg !90
  %886 = trunc i32 %880 to i16, !dbg !90
  %extelt.offset46 = lshr i32 %880, 16, !dbg !90
  %887 = trunc i32 %extelt.offset46 to i16, !dbg !90
  %888 = trunc i32 %881 to i16, !dbg !90
  %extelt.offset47 = lshr i32 %881, 16, !dbg !90
  %889 = trunc i32 %extelt.offset47 to i16, !dbg !90
  %890 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %869) #2, !dbg !91
  %891 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %870) #2, !dbg !91
  %892 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %871) #2, !dbg !91
  %893 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %872) #2, !dbg !91
  %894 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %873) #2, !dbg !91
  %895 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %874) #2, !dbg !91
  %896 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %875) #2, !dbg !91
  %897 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %876) #2, !dbg !91
  %898 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %882) #2, !dbg !91
  %899 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %883) #2, !dbg !91
  %900 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %884) #2, !dbg !91
  %901 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %885) #2, !dbg !91
  %902 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %886) #2, !dbg !91
  %903 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %887) #2, !dbg !91
  %904 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %888) #2, !dbg !91
  %905 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %889) #2, !dbg !91
  %906 = fadd float %839, %890, !dbg !92
  %907 = fadd float %840, %891, !dbg !92
  %908 = fadd float %841, %892, !dbg !92
  %909 = fadd float %842, %893, !dbg !92
  %910 = fadd float %843, %894, !dbg !92
  %911 = fadd float %844, %895, !dbg !92
  %912 = fadd float %845, %896, !dbg !92
  %913 = fadd float %846, %897, !dbg !92
  %914 = fadd float %847, %898, !dbg !92
  %915 = fadd float %848, %899, !dbg !92
  %916 = fadd float %849, %900, !dbg !92
  %917 = fadd float %850, %901, !dbg !92
  %918 = fadd float %851, %902, !dbg !92
  %919 = fadd float %852, %903, !dbg !92
  %920 = fadd float %853, %904, !dbg !92
  %921 = fadd float %854, %905, !dbg !92
  %922 = select i1 %801, float %906, float 0.000000e+00, !dbg !93
  %923 = select i1 %801, float %907, float 0.000000e+00, !dbg !93
  %924 = select i1 %801, float %908, float 0.000000e+00, !dbg !93
  %925 = select i1 %801, float %909, float 0.000000e+00, !dbg !93
  %926 = select i1 %801, float %910, float 0.000000e+00, !dbg !93
  %927 = select i1 %801, float %911, float 0.000000e+00, !dbg !93
  %928 = select i1 %801, float %912, float 0.000000e+00, !dbg !93
  %929 = select i1 %801, float %913, float 0.000000e+00, !dbg !93
  %930 = select i1 %802, float %914, float 0.000000e+00, !dbg !93
  %931 = select i1 %802, float %915, float 0.000000e+00, !dbg !93
  %932 = select i1 %802, float %916, float 0.000000e+00, !dbg !93
  %933 = select i1 %802, float %917, float 0.000000e+00, !dbg !93
  %934 = select i1 %802, float %918, float 0.000000e+00, !dbg !93
  %935 = select i1 %802, float %919, float 0.000000e+00, !dbg !93
  %936 = select i1 %802, float %920, float 0.000000e+00, !dbg !93
  %937 = select i1 %802, float %921, float 0.000000e+00, !dbg !93
  %938 = select i1 %580, float %733, float %922, !dbg !94
  %939 = select i1 %580, float %738, float %923, !dbg !94
  %940 = select i1 %580, float %743, float %924, !dbg !94
  %941 = select i1 %580, float %748, float %925, !dbg !94
  %942 = select i1 %580, float %752, float %926, !dbg !94
  %943 = select i1 %580, float %757, float %927, !dbg !94
  %944 = select i1 %580, float %762, float %928, !dbg !94
  %945 = select i1 %580, float %767, float %929, !dbg !94
  %946 = select i1 %581, float %772, float %930, !dbg !94
  %947 = select i1 %581, float %776, float %931, !dbg !94
  %948 = select i1 %581, float %780, float %932, !dbg !94
  %949 = select i1 %581, float %784, float %933, !dbg !94
  %950 = select i1 %581, float %788, float %934, !dbg !94
  %951 = select i1 %581, float %792, float %935, !dbg !94
  %952 = select i1 %581, float %796, float %936, !dbg !94
  %953 = select i1 %581, float %800, float %937, !dbg !94
  %954 = select i1 %57, float %564, float %938, !dbg !31
  %955 = select i1 %57, float %565, float %939, !dbg !31
  %956 = select i1 %57, float %566, float %940, !dbg !31
  %957 = select i1 %57, float %567, float %941, !dbg !31
  %958 = select i1 %57, float %568, float %942, !dbg !31
  %959 = select i1 %57, float %569, float %943, !dbg !31
  %960 = select i1 %57, float %570, float %944, !dbg !31
  %961 = select i1 %57, float %571, float %945, !dbg !31
  %962 = select i1 %58, float %572, float %946, !dbg !31
  %963 = select i1 %58, float %573, float %947, !dbg !31
  %964 = select i1 %58, float %574, float %948, !dbg !31
  %965 = select i1 %58, float %575, float %949, !dbg !31
  %966 = select i1 %58, float %576, float %950, !dbg !31
  %967 = select i1 %58, float %577, float %951, !dbg !31
  %968 = select i1 %58, float %578, float %952, !dbg !31
  %969 = select i1 %58, float %579, float %953, !dbg !31
  %970 = shl i32 %26, 8, !dbg !95
  %971 = shl i32 %27, 8, !dbg !95
  %972 = add i32 %34, %970, !dbg !96
  %973 = add i32 %34, %971, !dbg !96
  %974 = sext i32 %972 to i64, !dbg !97
  %975 = getelementptr i16, ptr addrspace(1) %5, i64 %974, !dbg !97
  %976 = sext i32 %973 to i64, !dbg !97
  %977 = getelementptr i16, ptr addrspace(1) %5, i64 %976, !dbg !97
  %978 = and i1 %29, %40, !dbg !98
  %979 = and i1 %30, %40, !dbg !98
  %980 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %954) #2, !dbg !99
  %981 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %955) #2, !dbg !99
  %982 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %956) #2, !dbg !99
  %983 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %957) #2, !dbg !99
  %984 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %958) #2, !dbg !99
  %985 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %959) #2, !dbg !99
  %986 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %960) #2, !dbg !99
  %987 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %961) #2, !dbg !99
  %988 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %962) #2, !dbg !99
  %989 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %963) #2, !dbg !99
  %990 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %964) #2, !dbg !99
  %991 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %965) #2, !dbg !99
  %992 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %966) #2, !dbg !99
  %993 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %967) #2, !dbg !99
  %994 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %968) #2, !dbg !99
  %995 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %969) #2, !dbg !99
  %996 = insertelement <2 x i16> undef, i16 %980, i64 0, !dbg !99
  %997 = insertelement <2 x i16> %996, i16 %981, i64 1, !dbg !99
  %998 = bitcast <2 x i16> %997 to i32, !dbg !99
  %999 = insertelement <2 x i16> undef, i16 %982, i64 0, !dbg !99
  %1000 = insertelement <2 x i16> %999, i16 %983, i64 1, !dbg !99
  %1001 = bitcast <2 x i16> %1000 to i32, !dbg !99
  %1002 = insertelement <2 x i16> undef, i16 %984, i64 0, !dbg !99
  %1003 = insertelement <2 x i16> %1002, i16 %985, i64 1, !dbg !99
  %1004 = bitcast <2 x i16> %1003 to i32, !dbg !99
  %1005 = insertelement <2 x i16> undef, i16 %986, i64 0, !dbg !99
  %1006 = insertelement <2 x i16> %1005, i16 %987, i64 1, !dbg !99
  %1007 = bitcast <2 x i16> %1006 to i32, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %998, i32 %1001, i32 %1004, i32 %1007, ptr addrspace(1) %975, i1 %978) #2, !dbg !99
  %1008 = insertelement <2 x i16> undef, i16 %988, i64 0, !dbg !99
  %1009 = insertelement <2 x i16> %1008, i16 %989, i64 1, !dbg !99
  %1010 = bitcast <2 x i16> %1009 to i32, !dbg !99
  %1011 = insertelement <2 x i16> undef, i16 %990, i64 0, !dbg !99
  %1012 = insertelement <2 x i16> %1011, i16 %991, i64 1, !dbg !99
  %1013 = bitcast <2 x i16> %1012 to i32, !dbg !99
  %1014 = insertelement <2 x i16> undef, i16 %992, i64 0, !dbg !99
  %1015 = insertelement <2 x i16> %1014, i16 %993, i64 1, !dbg !99
  %1016 = bitcast <2 x i16> %1015 to i32, !dbg !99
  %1017 = insertelement <2 x i16> undef, i16 %994, i64 0, !dbg !99
  %1018 = insertelement <2 x i16> %1017, i16 %995, i64 1, !dbg !99
  %1019 = bitcast <2 x i16> %1018 to i32, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1010, i32 %1013, i32 %1016, i32 %1019, ptr addrspace(1) %977, i1 %979) #2, !dbg !99
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cfc2gcnsfqxu2s5i5dia3tq4evgi5rrmhipe2sd2ombmmpot2rzk.py", directory: "/tmp/torchinductor_zeus/fc")
!3 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7de", linkageName: "triton__0d1d2d3d4d5d6de7de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 23, column: 21, scope: !5)
!14 = !DILocation(line: 24, column: 28, scope: !5)
!15 = !DILocation(line: 24, column: 33, scope: !5)
!16 = !DILocation(line: 25, column: 23, scope: !5)
!17 = !DILocation(line: 26, column: 21, scope: !5)
!18 = !DILocation(line: 27, column: 20, scope: !5)
!19 = !DILocation(line: 27, column: 25, scope: !5)
!20 = !DILocation(line: 29, column: 20, scope: !5)
!21 = !DILocation(line: 37, column: 18, scope: !5)
!22 = !DILocation(line: 40, column: 19, scope: !5)
!23 = !DILocation(line: 41, column: 18, scope: !5)
!24 = !DILocation(line: 42, column: 40, scope: !5)
!25 = !DILocation(line: 42, column: 52, scope: !5)
!26 = !DILocation(line: 42, column: 36, scope: !5)
!27 = !DILocation(line: 42, column: 47, scope: !5)
!28 = !DILocation(line: 42, column: 30, scope: !5)
!29 = !DILocation(line: 42, column: 58, scope: !5)
!30 = !DILocation(line: 42, column: 124, scope: !5)
!31 = !DILocation(line: 0, scope: !5)
!32 = !DILocation(line: 47, column: 66, scope: !5)
!33 = !DILocation(line: 47, column: 74, scope: !5)
!34 = !DILocation(line: 47, column: 59, scope: !5)
!35 = !DILocation(line: 47, column: 125, scope: !5)
!36 = !DILocation(line: 49, column: 41, scope: !5)
!37 = !DILocation(line: 49, column: 37, scope: !5)
!38 = !DILocation(line: 49, column: 31, scope: !5)
!39 = !DILocation(line: 49, column: 47, scope: !5)
!40 = !DILocation(line: 50, column: 20, scope: !5)
!41 = !DILocation(line: 53, column: 20, scope: !5)
!42 = !DILocation(line: 54, column: 20, scope: !5)
!43 = !DILocation(line: 55, column: 40, scope: !5)
!44 = !DILocation(line: 55, column: 57, scope: !5)
!45 = !DILocation(line: 55, column: 31, scope: !5)
!46 = !DILocation(line: 55, column: 76, scope: !5)
!47 = !DILocation(line: 55, column: 84, scope: !5)
!48 = !DILocation(line: 55, column: 68, scope: !5)
!49 = !DILocation(line: 55, column: 135, scope: !5)
!50 = !DILocation(line: 57, column: 46, scope: !5)
!51 = !DILocation(line: 57, column: 31, scope: !5)
!52 = !DILocation(line: 57, column: 56, scope: !5)
!53 = !DILocation(line: 58, column: 20, scope: !5)
!54 = !DILocation(line: 60, column: 13, scope: !5)
!55 = !DILocation(line: 64, column: 20, scope: !5)
!56 = !DILocation(line: 65, column: 19, scope: !5)
!57 = !DILocation(line: 66, column: 20, scope: !5)
!58 = !DILocation(line: 67, column: 37, scope: !5)
!59 = !DILocation(line: 67, column: 54, scope: !5)
!60 = !DILocation(line: 67, column: 31, scope: !5)
!61 = !DILocation(line: 67, column: 81, scope: !5)
!62 = !DILocation(line: 67, column: 65, scope: !5)
!63 = !DILocation(line: 67, column: 132, scope: !5)
!64 = !DILocation(line: 69, column: 43, scope: !5)
!65 = !DILocation(line: 69, column: 31, scope: !5)
!66 = !DILocation(line: 69, column: 53, scope: !5)
!67 = !DILocation(line: 70, column: 20, scope: !5)
!68 = !DILocation(line: 75, column: 20, scope: !5)
!69 = !DILocation(line: 76, column: 20, scope: !5)
!70 = !DILocation(line: 82, column: 20, scope: !5)
!71 = !DILocation(line: 83, column: 39, scope: !5)
!72 = !DILocation(line: 83, column: 51, scope: !5)
!73 = !DILocation(line: 83, column: 46, scope: !5)
!74 = !DILocation(line: 83, column: 31, scope: !5)
!75 = !DILocation(line: 83, column: 65, scope: !5)
!76 = !DILocation(line: 83, column: 73, scope: !5)
!77 = !DILocation(line: 83, column: 57, scope: !5)
!78 = !DILocation(line: 86, column: 35, scope: !5)
!79 = !DILocation(line: 87, column: 20, scope: !5)
!80 = !DILocation(line: 90, column: 48, scope: !5)
!81 = !DILocation(line: 90, column: 31, scope: !5)
!82 = !DILocation(line: 90, column: 67, scope: !5)
!83 = !DILocation(line: 90, column: 75, scope: !5)
!84 = !DILocation(line: 90, column: 59, scope: !5)
!85 = !DILocation(line: 90, column: 126, scope: !5)
!86 = !DILocation(line: 92, column: 38, scope: !5)
!87 = !DILocation(line: 92, column: 44, scope: !5)
!88 = !DILocation(line: 92, column: 55, scope: !5)
!89 = !DILocation(line: 92, column: 31, scope: !5)
!90 = !DILocation(line: 92, column: 66, scope: !5)
!91 = !DILocation(line: 92, column: 133, scope: !5)
!92 = !DILocation(line: 94, column: 20, scope: !5)
!93 = !DILocation(line: 97, column: 35, scope: !5)
!94 = !DILocation(line: 98, column: 35, scope: !5)
!95 = !DILocation(line: 100, column: 35, scope: !5)
!96 = !DILocation(line: 100, column: 31, scope: !5)
!97 = !DILocation(line: 100, column: 25, scope: !5)
!98 = !DILocation(line: 100, column: 56, scope: !5)
!99 = !DILocation(line: 100, column: 48, scope: !5)
!100 = !DILocation(line: 100, column: 4, scope: !5)
