; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d56de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 5, !dbg !10
  %urem = shl i32 %8, 3, !dbg !10
  %10 = and i32 %urem, 2040, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %12 = icmp slt i32 %11, 4, !dbg !12
  %13 = mul i32 %11, 2304, !dbg !13
  %14 = add i32 %10, %13, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr i16, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #6, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %22 = trunc i32 %18 to i16, !dbg !16
  %extelt.offset10 = lshr i32 %18, 16, !dbg !16
  %23 = trunc i32 %extelt.offset10 to i16, !dbg !16
  %24 = trunc i32 %19 to i16, !dbg !16
  %extelt.offset11 = lshr i32 %19, 16, !dbg !16
  %25 = trunc i32 %extelt.offset11 to i16, !dbg !16
  %26 = trunc i32 %20 to i16, !dbg !16
  %extelt.offset12 = lshr i32 %20, 16, !dbg !16
  %27 = trunc i32 %extelt.offset12 to i16, !dbg !16
  %28 = trunc i32 %21 to i16, !dbg !16
  %extelt.offset13 = lshr i32 %21, 16, !dbg !16
  %29 = trunc i32 %extelt.offset13 to i16, !dbg !16
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #6, !dbg !17
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #6, !dbg !17
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !17
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !17
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !17
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !17
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !17
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !17
  %38 = fmul float %30, %30, !dbg !18
  %39 = fmul float %31, %31, !dbg !18
  %40 = fmul float %32, %32, !dbg !18
  %41 = fmul float %33, %33, !dbg !18
  %42 = fmul float %34, %34, !dbg !18
  %43 = fmul float %35, %35, !dbg !18
  %44 = fmul float %36, %36, !dbg !18
  %45 = fmul float %37, %37, !dbg !18
  %46 = select i1 %12, float %38, float 0.000000e+00, !dbg !19
  %47 = select i1 %12, float %39, float 0.000000e+00, !dbg !19
  %48 = select i1 %12, float %40, float 0.000000e+00, !dbg !19
  %49 = select i1 %12, float %41, float 0.000000e+00, !dbg !19
  %50 = select i1 %12, float %42, float 0.000000e+00, !dbg !19
  %51 = select i1 %12, float %43, float 0.000000e+00, !dbg !19
  %52 = select i1 %12, float %44, float 0.000000e+00, !dbg !19
  %53 = select i1 %12, float %45, float 0.000000e+00, !dbg !19
  %54 = or i32 %10, 2048, !dbg !20
  %55 = icmp ult i32 %54, 2304, !dbg !21
  %56 = add i32 %54, %13, !dbg !14
  %57 = sext i32 %56 to i64, !dbg !15
  %58 = getelementptr i16, ptr addrspace(1) %0, i64 %57, !dbg !15
  %59 = and i1 %12, %55, !dbg !22
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #6, !dbg !16
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !16
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !16
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !16
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !16
  %65 = trunc i32 %61 to i16, !dbg !16
  %extelt.offset10.1 = lshr i32 %61, 16, !dbg !16
  %66 = trunc i32 %extelt.offset10.1 to i16, !dbg !16
  %67 = trunc i32 %62 to i16, !dbg !16
  %extelt.offset11.1 = lshr i32 %62, 16, !dbg !16
  %68 = trunc i32 %extelt.offset11.1 to i16, !dbg !16
  %69 = trunc i32 %63 to i16, !dbg !16
  %extelt.offset12.1 = lshr i32 %63, 16, !dbg !16
  %70 = trunc i32 %extelt.offset12.1 to i16, !dbg !16
  %71 = trunc i32 %64 to i16, !dbg !16
  %extelt.offset13.1 = lshr i32 %64, 16, !dbg !16
  %72 = trunc i32 %extelt.offset13.1 to i16, !dbg !16
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #6, !dbg !17
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #6, !dbg !17
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #6, !dbg !17
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #6, !dbg !17
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #6, !dbg !17
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #6, !dbg !17
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #6, !dbg !17
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #6, !dbg !17
  %81 = fmul float %73, %73, !dbg !18
  %82 = fmul float %74, %74, !dbg !18
  %83 = fmul float %75, %75, !dbg !18
  %84 = fmul float %76, %76, !dbg !18
  %85 = fmul float %77, %77, !dbg !18
  %86 = fmul float %78, %78, !dbg !18
  %87 = fmul float %79, %79, !dbg !18
  %88 = fmul float %80, %80, !dbg !18
  %89 = select i1 %59, float %81, float -0.000000e+00, !dbg !19
  %90 = fadd float %46, %89, !dbg !19
  %91 = select i1 %59, float %82, float -0.000000e+00, !dbg !19
  %92 = fadd float %47, %91, !dbg !19
  %93 = select i1 %59, float %83, float -0.000000e+00, !dbg !19
  %94 = fadd float %48, %93, !dbg !19
  %95 = select i1 %59, float %84, float -0.000000e+00, !dbg !19
  %96 = fadd float %49, %95, !dbg !19
  %97 = select i1 %59, float %85, float -0.000000e+00, !dbg !19
  %98 = fadd float %50, %97, !dbg !19
  %99 = select i1 %59, float %86, float -0.000000e+00, !dbg !19
  %100 = fadd float %51, %99, !dbg !19
  %101 = select i1 %59, float %87, float -0.000000e+00, !dbg !19
  %102 = fadd float %52, %101, !dbg !19
  %103 = select i1 %59, float %88, float -0.000000e+00, !dbg !19
  %104 = fadd float %53, %103, !dbg !19
  %105 = and i32 %8, 31, !dbg !10
  %106 = and i32 %9, 7, !dbg !10
  %107 = or i32 %10, 4, !dbg !10
  %108 = fadd float %90, %92, !dbg !23
  %109 = fadd float %94, %108, !dbg !23
  %110 = fadd float %96, %109, !dbg !23
  %111 = fadd float %98, %110, !dbg !23
  %112 = fadd float %100, %111, !dbg !23
  %113 = fadd float %102, %112, !dbg !23
  %114 = fadd float %104, %113, !dbg !23
  %115 = bitcast float %114 to i32, !dbg !29
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 16, i32 31), !dbg !29
  %117 = bitcast i32 %116 to float, !dbg !29
  %118 = fadd float %114, %117, !dbg !23
  %119 = bitcast float %118 to i32, !dbg !29
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 8, i32 31), !dbg !29
  %121 = bitcast i32 %120 to float, !dbg !29
  %122 = fadd float %118, %121, !dbg !23
  %123 = bitcast float %122 to i32, !dbg !29
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !29
  %125 = bitcast i32 %124 to float, !dbg !29
  %126 = fadd float %122, %125, !dbg !23
  %127 = bitcast float %126 to i32, !dbg !29
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !29
  %129 = bitcast i32 %128 to float, !dbg !29
  %130 = fadd float %126, %129, !dbg !23
  %131 = bitcast float %130 to i32, !dbg !29
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !29
  %133 = bitcast i32 %132 to float, !dbg !29
  %134 = fadd float %130, %133, !dbg !23
  %135 = icmp eq i32 %105, 0, !dbg !29
  %136 = zext nneg i32 %106 to i64, !dbg !29
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i64 %136, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, float %134, i1 %135) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %138 = icmp slt i32 %8, 8, !dbg !29
  %139 = sext i32 %8 to i64, !dbg !29
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i64 %139, !dbg !29
  %141 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %140, i1 %138) #6, !dbg !29
  %142 = bitcast float %141 to i32, !dbg !29
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 4, i32 31), !dbg !29
  %144 = bitcast i32 %143 to float, !dbg !29
  %145 = fadd float %141, %144, !dbg !23
  %146 = bitcast float %145 to i32, !dbg !29
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 2, i32 31), !dbg !29
  %148 = bitcast i32 %147 to float, !dbg !29
  %149 = fadd float %145, %148, !dbg !23
  %150 = bitcast float %149 to i32, !dbg !29
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !29
  %152 = bitcast i32 %151 to float, !dbg !29
  %153 = fadd float %149, %152, !dbg !23
  %154 = and i32 %8, 7, !dbg !29
  %155 = icmp eq i32 %154, 0, !dbg !29
  %156 = and i1 %138, %155, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, float %153, i1 %156) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %157 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float 2.304000e+03) #6, !dbg !31
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float 2.304000e+03) #6, !dbg !31
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float 2.304000e+03) #6, !dbg !31
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float 2.304000e+03) #6, !dbg !31
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float 2.304000e+03) #6, !dbg !31
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float 2.304000e+03) #6, !dbg !31
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float 2.304000e+03) #6, !dbg !31
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float 2.304000e+03) #6, !dbg !31
  %166 = fadd float %158, 0x3EE4F8B580000000, !dbg !32
  br label %167, !dbg !33

167:                                              ; preds = %7, %__nv_rsqrtf.exit61
  %168 = phi i1 [ true, %7 ], [ false, %__nv_rsqrtf.exit61 ]
  %169 = phi i32 [ 0, %7 ], [ 2048, %__nv_rsqrtf.exit61 ]
  %170 = phi <8 x float> [ zeroinitializer, %7 ], [ %275, %__nv_rsqrtf.exit61 ]
  %171 = or i32 %169, %10, !dbg !34
  %172 = or i32 %169, %107, !dbg !34
  %173 = icmp ult i32 %171, 2304, !dbg !35
  %174 = add i32 %171, %13, !dbg !36
  %175 = add i32 %172, %13, !dbg !36
  %176 = sext i32 %174 to i64, !dbg !37
  %177 = getelementptr i16, ptr addrspace(1) %0, i64 %176, !dbg !37
  %178 = and i1 %12, %173, !dbg !38
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #6, !dbg !39
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !39
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !39
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !39
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !39
  %184 = trunc i32 %180 to i16, !dbg !39
  %extelt.offset6 = lshr i32 %180, 16, !dbg !39
  %185 = trunc i32 %extelt.offset6 to i16, !dbg !39
  %186 = trunc i32 %181 to i16, !dbg !39
  %extelt.offset7 = lshr i32 %181, 16, !dbg !39
  %187 = trunc i32 %extelt.offset7 to i16, !dbg !39
  %188 = trunc i32 %182 to i16, !dbg !39
  %extelt.offset8 = lshr i32 %182, 16, !dbg !39
  %189 = trunc i32 %extelt.offset8 to i16, !dbg !39
  %190 = trunc i32 %183 to i16, !dbg !39
  %extelt.offset9 = lshr i32 %183, 16, !dbg !39
  %191 = trunc i32 %extelt.offset9 to i16, !dbg !39
  %192 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %184) #6, !dbg !40
  %193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %185) #6, !dbg !40
  %194 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %186) #6, !dbg !40
  %195 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %187) #6, !dbg !40
  %196 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %188) #6, !dbg !40
  %197 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #6, !dbg !40
  %198 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %190) #6, !dbg !40
  %199 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %191) #6, !dbg !40
  %200 = zext nneg i32 %171 to i64, !dbg !41
  %201 = getelementptr float, ptr addrspace(1) %1, i64 %200, !dbg !41
  %202 = zext nneg i32 %172 to i64, !dbg !41
  %203 = getelementptr float, ptr addrspace(1) %1, i64 %202, !dbg !41
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %173, i32 0, i1 %173, i32 0, i1 %173, i32 0, i1 %173, i32 0, i1 %173) #6, !dbg !42
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !42
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !42
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !42
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !42
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %203, i1 %173, i32 0, i1 %173, i32 0, i1 %173, i32 0, i1 %173, i32 0, i1 %173) #6, !dbg !42
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !42
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !42
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !42
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !42
  %214 = insertelement <8 x i32> poison, i32 %205, i64 0, !dbg !42
  %215 = insertelement <8 x i32> %214, i32 %206, i64 1, !dbg !42
  %216 = insertelement <8 x i32> %215, i32 %207, i64 2, !dbg !42
  %217 = insertelement <8 x i32> %216, i32 %208, i64 3, !dbg !42
  %218 = insertelement <8 x i32> %217, i32 %210, i64 4, !dbg !42
  %219 = insertelement <8 x i32> %218, i32 %211, i64 5, !dbg !42
  %220 = insertelement <8 x i32> %219, i32 %212, i64 6, !dbg !42
  %221 = insertelement <8 x i32> %220, i32 %213, i64 7, !dbg !42
  %222 = bitcast <8 x i32> %221 to <8 x float>, !dbg !42
  %223 = getelementptr float, ptr addrspace(1) %2, i64 %176, !dbg !43
  %224 = sext i32 %175 to i64, !dbg !43
  %225 = getelementptr float, ptr addrspace(1) %2, i64 %224, !dbg !43
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %223, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #6, !dbg !44
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !44
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !44
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !44
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !44
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %225, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #6, !dbg !44
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !44
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !44
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !44
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !44
  %236 = insertelement <8 x i32> poison, i32 %227, i64 0, !dbg !44
  %237 = insertelement <8 x i32> %236, i32 %228, i64 1, !dbg !44
  %238 = insertelement <8 x i32> %237, i32 %229, i64 2, !dbg !44
  %239 = insertelement <8 x i32> %238, i32 %230, i64 3, !dbg !44
  %240 = insertelement <8 x i32> %239, i32 %232, i64 4, !dbg !44
  %241 = insertelement <8 x i32> %240, i32 %233, i64 5, !dbg !44
  %242 = insertelement <8 x i32> %241, i32 %234, i64 6, !dbg !44
  %243 = insertelement <8 x i32> %242, i32 %235, i64 7, !dbg !44
  %244 = bitcast <8 x i32> %243 to <8 x float>, !dbg !44
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %.not.i59 = icmp eq i32 %245, 0, !dbg !45
  br i1 %.not.i59, label %248, label %246, !dbg !45

246:                                              ; preds = %167
  %247 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %166), !dbg !45
  br label %__nv_rsqrtf.exit61, !dbg !45

248:                                              ; preds = %167
  %249 = tail call float @llvm.nvvm.rsqrt.approx.f(float %166), !dbg !45
  br label %__nv_rsqrtf.exit61, !dbg !45

__nv_rsqrtf.exit61:                               ; preds = %246, %248
  %.0.i60 = phi float [ %247, %246 ], [ %249, %248 ], !dbg !45
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %257 = insertelement <8 x float> poison, float %192, i64 0, !dbg !46
  %258 = insertelement <8 x float> %257, float %193, i64 1, !dbg !46
  %259 = insertelement <8 x float> %258, float %194, i64 2, !dbg !46
  %260 = insertelement <8 x float> %259, float %195, i64 3, !dbg !46
  %261 = insertelement <8 x float> %260, float %196, i64 4, !dbg !46
  %262 = insertelement <8 x float> %261, float %197, i64 5, !dbg !46
  %263 = insertelement <8 x float> %262, float %198, i64 6, !dbg !46
  %264 = insertelement <8 x float> %263, float %199, i64 7, !dbg !46
  %265 = insertelement <8 x float> poison, float %.0.i60, i64 0, !dbg !46
  %266 = shufflevector <8 x float> %265, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !46
  %267 = fmul <8 x float> %264, %266, !dbg !46
  %268 = fadd <8 x float> %222, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !47
  %269 = fmul <8 x float> %268, %267, !dbg !48
  %270 = fadd <8 x float> %269, %244, !dbg !49
  %271 = fmul <8 x float> %270, %270, !dbg !50
  %272 = insertelement <8 x i1> poison, i1 %178, i64 0, !dbg !51
  %273 = shufflevector <8 x i1> %272, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !51
  %274 = select <8 x i1> %273, <8 x float> %271, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !51
  %275 = fadd <8 x float> %170, %274, !dbg !51
  br i1 %168, label %167, label %276, !dbg !33

276:                                              ; preds = %__nv_rsqrtf.exit61
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %shift = shufflevector <8 x float> %275, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %277 = fadd <8 x float> %275, %shift, !dbg !54
  %shift113 = shufflevector <8 x float> %275, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %278 = fadd <8 x float> %shift113, %277, !dbg !54
  %shift114 = shufflevector <8 x float> %275, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %279 = fadd <8 x float> %shift114, %278, !dbg !54
  %shift115 = shufflevector <8 x float> %275, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %280 = fadd <8 x float> %shift115, %279, !dbg !54
  %shift116 = shufflevector <8 x float> %275, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %281 = fadd <8 x float> %shift116, %280, !dbg !54
  %shift117 = shufflevector <8 x float> %275, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %282 = fadd <8 x float> %shift117, %281, !dbg !54
  %shift118 = shufflevector <8 x float> %275, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %283 = fadd <8 x float> %shift118, %282, !dbg !54
  %284 = extractelement <8 x float> %283, i64 0, !dbg !54
  %285 = bitcast float %284 to i32, !dbg !52
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 16, i32 31), !dbg !52
  %287 = bitcast i32 %286 to float, !dbg !52
  %288 = fadd float %284, %287, !dbg !54
  %289 = bitcast float %288 to i32, !dbg !52
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 8, i32 31), !dbg !52
  %291 = bitcast i32 %290 to float, !dbg !52
  %292 = fadd float %288, %291, !dbg !54
  %293 = bitcast float %292 to i32, !dbg !52
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 4, i32 31), !dbg !52
  %295 = bitcast i32 %294 to float, !dbg !52
  %296 = fadd float %292, %295, !dbg !54
  %297 = bitcast float %296 to i32, !dbg !52
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 2, i32 31), !dbg !52
  %299 = bitcast i32 %298 to float, !dbg !52
  %300 = fadd float %296, %299, !dbg !54
  %301 = bitcast float %300 to i32, !dbg !52
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !52
  %303 = bitcast i32 %302 to float, !dbg !52
  %304 = fadd float %300, %303, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, float %304, i1 %135) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %305 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %140, i1 %138) #6, !dbg !52
  %306 = bitcast float %305 to i32, !dbg !52
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !52
  %308 = bitcast i32 %307 to float, !dbg !52
  %309 = fadd float %305, %308, !dbg !54
  %310 = bitcast float %309 to i32, !dbg !52
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 2, i32 31), !dbg !52
  %312 = bitcast i32 %311 to float, !dbg !52
  %313 = fadd float %309, %312, !dbg !54
  %314 = bitcast float %313 to i32, !dbg !52
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 1, i32 31), !dbg !52
  %316 = bitcast i32 %315 to float, !dbg !52
  %317 = fadd float %313, %316, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, float %317, i1 %156) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %318 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !52
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float 2.304000e+03) #6, !dbg !57
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float 2.304000e+03) #6, !dbg !57
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float 2.304000e+03) #6, !dbg !57
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float 2.304000e+03) #6, !dbg !57
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float 2.304000e+03) #6, !dbg !57
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float 2.304000e+03) #6, !dbg !57
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float 2.304000e+03) #6, !dbg !57
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float 2.304000e+03) #6, !dbg !57
  %327 = fadd float %319, 0x3EE4F8B580000000, !dbg !58
  br label %328, !dbg !59

328:                                              ; preds = %276, %__nv_rsqrtf.exit37
  %329 = phi i1 [ true, %276 ], [ false, %__nv_rsqrtf.exit37 ]
  %330 = phi i32 [ 0, %276 ], [ 2048, %__nv_rsqrtf.exit37 ]
  %331 = or i32 %330, %10, !dbg !60
  %332 = or i32 %330, %107, !dbg !60
  %333 = icmp ult i32 %331, 2304, !dbg !61
  %334 = add i32 %331, %13, !dbg !62
  %335 = add i32 %332, %13, !dbg !62
  %336 = sext i32 %334 to i64, !dbg !63
  %337 = getelementptr i16, ptr addrspace(1) %0, i64 %336, !dbg !63
  %338 = and i1 %12, %333, !dbg !64
  %339 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %337, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338) #6, !dbg !65
  %340 = extractvalue { i32, i32, i32, i32 } %339, 0, !dbg !65
  %341 = extractvalue { i32, i32, i32, i32 } %339, 1, !dbg !65
  %342 = extractvalue { i32, i32, i32, i32 } %339, 2, !dbg !65
  %343 = extractvalue { i32, i32, i32, i32 } %339, 3, !dbg !65
  %344 = trunc i32 %340 to i16, !dbg !65
  %extelt.offset = lshr i32 %340, 16, !dbg !65
  %345 = trunc i32 %extelt.offset to i16, !dbg !65
  %346 = trunc i32 %341 to i16, !dbg !65
  %extelt.offset3 = lshr i32 %341, 16, !dbg !65
  %347 = trunc i32 %extelt.offset3 to i16, !dbg !65
  %348 = trunc i32 %342 to i16, !dbg !65
  %extelt.offset4 = lshr i32 %342, 16, !dbg !65
  %349 = trunc i32 %extelt.offset4 to i16, !dbg !65
  %350 = trunc i32 %343 to i16, !dbg !65
  %extelt.offset5 = lshr i32 %343, 16, !dbg !65
  %351 = trunc i32 %extelt.offset5 to i16, !dbg !65
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %344) #6, !dbg !66
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #6, !dbg !66
  %354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #6, !dbg !66
  %355 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %347) #6, !dbg !66
  %356 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %348) #6, !dbg !66
  %357 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %349) #6, !dbg !66
  %358 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %350) #6, !dbg !66
  %359 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %351) #6, !dbg !66
  %360 = zext nneg i32 %331 to i64, !dbg !67
  %361 = getelementptr float, ptr addrspace(1) %1, i64 %360, !dbg !67
  %362 = zext nneg i32 %332 to i64, !dbg !67
  %363 = getelementptr float, ptr addrspace(1) %1, i64 %362, !dbg !67
  %364 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %361, i1 %333, i32 0, i1 %333, i32 0, i1 %333, i32 0, i1 %333, i32 0, i1 %333) #6, !dbg !68
  %365 = extractvalue { i32, i32, i32, i32 } %364, 0, !dbg !68
  %366 = extractvalue { i32, i32, i32, i32 } %364, 1, !dbg !68
  %367 = extractvalue { i32, i32, i32, i32 } %364, 2, !dbg !68
  %368 = extractvalue { i32, i32, i32, i32 } %364, 3, !dbg !68
  %369 = bitcast i32 %365 to float, !dbg !68
  %370 = bitcast i32 %366 to float, !dbg !68
  %371 = bitcast i32 %367 to float, !dbg !68
  %372 = bitcast i32 %368 to float, !dbg !68
  %373 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %363, i1 %333, i32 0, i1 %333, i32 0, i1 %333, i32 0, i1 %333, i32 0, i1 %333) #6, !dbg !68
  %374 = extractvalue { i32, i32, i32, i32 } %373, 0, !dbg !68
  %375 = extractvalue { i32, i32, i32, i32 } %373, 1, !dbg !68
  %376 = extractvalue { i32, i32, i32, i32 } %373, 2, !dbg !68
  %377 = extractvalue { i32, i32, i32, i32 } %373, 3, !dbg !68
  %378 = bitcast i32 %374 to float, !dbg !68
  %379 = bitcast i32 %375 to float, !dbg !68
  %380 = bitcast i32 %376 to float, !dbg !68
  %381 = bitcast i32 %377 to float, !dbg !68
  %382 = getelementptr float, ptr addrspace(1) %2, i64 %336, !dbg !69
  %383 = sext i32 %335 to i64, !dbg !69
  %384 = getelementptr float, ptr addrspace(1) %2, i64 %383, !dbg !69
  %385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %382, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338) #6, !dbg !70
  %386 = extractvalue { i32, i32, i32, i32 } %385, 0, !dbg !70
  %387 = extractvalue { i32, i32, i32, i32 } %385, 1, !dbg !70
  %388 = extractvalue { i32, i32, i32, i32 } %385, 2, !dbg !70
  %389 = extractvalue { i32, i32, i32, i32 } %385, 3, !dbg !70
  %390 = bitcast i32 %386 to float, !dbg !70
  %391 = bitcast i32 %387 to float, !dbg !70
  %392 = bitcast i32 %388 to float, !dbg !70
  %393 = bitcast i32 %389 to float, !dbg !70
  %394 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %384, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338) #6, !dbg !70
  %395 = extractvalue { i32, i32, i32, i32 } %394, 0, !dbg !70
  %396 = extractvalue { i32, i32, i32, i32 } %394, 1, !dbg !70
  %397 = extractvalue { i32, i32, i32, i32 } %394, 2, !dbg !70
  %398 = extractvalue { i32, i32, i32, i32 } %394, 3, !dbg !70
  %399 = bitcast i32 %395 to float, !dbg !70
  %400 = bitcast i32 %396 to float, !dbg !70
  %401 = bitcast i32 %397 to float, !dbg !70
  %402 = bitcast i32 %398 to float, !dbg !70
  %403 = getelementptr float, ptr addrspace(1) %3, i64 %360, !dbg !71
  %404 = getelementptr float, ptr addrspace(1) %3, i64 %362, !dbg !71
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %403, i1 %333, i32 0, i1 %333, i32 0, i1 %333, i32 0, i1 %333, i32 0, i1 %333) #6, !dbg !72
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !72
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !72
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !72
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !72
  %410 = bitcast i32 %406 to float, !dbg !72
  %411 = bitcast i32 %407 to float, !dbg !72
  %412 = bitcast i32 %408 to float, !dbg !72
  %413 = bitcast i32 %409 to float, !dbg !72
  %414 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %404, i1 %333, i32 0, i1 %333, i32 0, i1 %333, i32 0, i1 %333, i32 0, i1 %333) #6, !dbg !72
  %415 = extractvalue { i32, i32, i32, i32 } %414, 0, !dbg !72
  %416 = extractvalue { i32, i32, i32, i32 } %414, 1, !dbg !72
  %417 = extractvalue { i32, i32, i32, i32 } %414, 2, !dbg !72
  %418 = extractvalue { i32, i32, i32, i32 } %414, 3, !dbg !72
  %419 = bitcast i32 %415 to float, !dbg !72
  %420 = bitcast i32 %416 to float, !dbg !72
  %421 = bitcast i32 %417 to float, !dbg !72
  %422 = bitcast i32 %418 to float, !dbg !72
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %.not.i = icmp eq i32 %423, 0, !dbg !73
  br i1 %.not.i, label %426, label %424, !dbg !73

424:                                              ; preds = %328
  %425 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %166), !dbg !73
  br label %__nv_rsqrtf.exit, !dbg !73

426:                                              ; preds = %328
  %427 = tail call float @llvm.nvvm.rsqrt.approx.f(float %166), !dbg !73
  br label %__nv_rsqrtf.exit, !dbg !73

__nv_rsqrtf.exit:                                 ; preds = %424, %426
  %.0.i = phi float [ %425, %424 ], [ %427, %426 ], !dbg !73
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %435 = fmul float %352, %.0.i, !dbg !74
  %436 = fmul float %353, %.0.i, !dbg !74
  %437 = fmul float %354, %.0.i, !dbg !74
  %438 = fmul float %355, %.0.i, !dbg !74
  %439 = fmul float %356, %.0.i, !dbg !74
  %440 = fmul float %357, %.0.i, !dbg !74
  %441 = fmul float %358, %.0.i, !dbg !74
  %442 = fmul float %359, %.0.i, !dbg !74
  %443 = fadd float %369, 1.000000e+00, !dbg !75
  %444 = fadd float %370, 1.000000e+00, !dbg !75
  %445 = fadd float %371, 1.000000e+00, !dbg !75
  %446 = fadd float %372, 1.000000e+00, !dbg !75
  %447 = fadd float %378, 1.000000e+00, !dbg !75
  %448 = fadd float %379, 1.000000e+00, !dbg !75
  %449 = fadd float %380, 1.000000e+00, !dbg !75
  %450 = fadd float %381, 1.000000e+00, !dbg !75
  %451 = fmul float %443, %435, !dbg !76
  %452 = fmul float %444, %436, !dbg !76
  %453 = fmul float %445, %437, !dbg !76
  %454 = fmul float %446, %438, !dbg !76
  %455 = fmul float %447, %439, !dbg !76
  %456 = fmul float %448, %440, !dbg !76
  %457 = fmul float %449, %441, !dbg !76
  %458 = fmul float %450, %442, !dbg !76
  %459 = fadd float %451, %390, !dbg !77
  %460 = fadd float %452, %391, !dbg !77
  %461 = fadd float %453, %392, !dbg !77
  %462 = fadd float %454, %393, !dbg !77
  %463 = fadd float %455, %399, !dbg !77
  %464 = fadd float %456, %400, !dbg !77
  %465 = fadd float %457, %401, !dbg !77
  %466 = fadd float %458, %402, !dbg !77
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %.not.i35 = icmp eq i32 %467, 0, !dbg !78
  br i1 %.not.i35, label %470, label %468, !dbg !78

468:                                              ; preds = %__nv_rsqrtf.exit
  %469 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %327), !dbg !78
  br label %__nv_rsqrtf.exit37, !dbg !78

470:                                              ; preds = %__nv_rsqrtf.exit
  %471 = tail call float @llvm.nvvm.rsqrt.approx.f(float %327), !dbg !78
  br label %__nv_rsqrtf.exit37, !dbg !78

__nv_rsqrtf.exit37:                               ; preds = %468, %470
  %.0.i36 = phi float [ %469, %468 ], [ %471, %470 ], !dbg !78
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %479 = fmul float %459, %.0.i36, !dbg !79
  %480 = fmul float %460, %.0.i36, !dbg !79
  %481 = fmul float %461, %.0.i36, !dbg !79
  %482 = fmul float %462, %.0.i36, !dbg !79
  %483 = fmul float %463, %.0.i36, !dbg !79
  %484 = fmul float %464, %.0.i36, !dbg !79
  %485 = fmul float %465, %.0.i36, !dbg !79
  %486 = fmul float %466, %.0.i36, !dbg !79
  %487 = fadd float %410, 1.000000e+00, !dbg !80
  %488 = fadd float %411, 1.000000e+00, !dbg !80
  %489 = fadd float %412, 1.000000e+00, !dbg !80
  %490 = fadd float %413, 1.000000e+00, !dbg !80
  %491 = fadd float %419, 1.000000e+00, !dbg !80
  %492 = fadd float %420, 1.000000e+00, !dbg !80
  %493 = fadd float %421, 1.000000e+00, !dbg !80
  %494 = fadd float %422, 1.000000e+00, !dbg !80
  %495 = fmul float %487, %479, !dbg !81
  %496 = fmul float %488, %480, !dbg !81
  %497 = fmul float %489, %481, !dbg !81
  %498 = fmul float %490, %482, !dbg !81
  %499 = fmul float %491, %483, !dbg !81
  %500 = fmul float %492, %484, !dbg !81
  %501 = fmul float %493, %485, !dbg !81
  %502 = fmul float %494, %486, !dbg !81
  %503 = getelementptr i16, ptr addrspace(1) %4, i64 %336, !dbg !82
  %504 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %495) #6, !dbg !83
  %505 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %496) #6, !dbg !83
  %506 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %497) #6, !dbg !83
  %507 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %498) #6, !dbg !83
  %508 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %499) #6, !dbg !83
  %509 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %500) #6, !dbg !83
  %510 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %501) #6, !dbg !83
  %511 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %502) #6, !dbg !83
  %512 = insertelement <2 x i16> undef, i16 %504, i64 0, !dbg !83
  %513 = insertelement <2 x i16> %512, i16 %505, i64 1, !dbg !83
  %514 = bitcast <2 x i16> %513 to i32, !dbg !83
  %515 = insertelement <2 x i16> undef, i16 %506, i64 0, !dbg !83
  %516 = insertelement <2 x i16> %515, i16 %507, i64 1, !dbg !83
  %517 = bitcast <2 x i16> %516 to i32, !dbg !83
  %518 = insertelement <2 x i16> undef, i16 %508, i64 0, !dbg !83
  %519 = insertelement <2 x i16> %518, i16 %509, i64 1, !dbg !83
  %520 = bitcast <2 x i16> %519 to i32, !dbg !83
  %521 = insertelement <2 x i16> undef, i16 %510, i64 0, !dbg !83
  %522 = insertelement <2 x i16> %521, i16 %511, i64 1, !dbg !83
  %523 = bitcast <2 x i16> %522 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %514, i32 %517, i32 %520, i32 %523, ptr addrspace(1) %503, i1 %338) #6, !dbg !83
  br i1 %329, label %328, label %524, !dbg !59

524:                                              ; preds = %__nv_rsqrtf.exit37
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cswqobcsddjv75skfxgfqabg2glypcw2mtnoik42i2cbhilzz7mh.py", directory: "/tmp/torchinductor_zeus/sw")
!4 = !{ptr @triton__0d1d2d3d4d56de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d56de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d56de", linkageName: "triton__0d1d2d3d4d56de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 110, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 36, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 29, column: 25, scope: !7)
!22 = !DILocation(line: 31, column: 59, scope: !7)
!23 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 37, column: 25, scope: !26)
!31 = !DILocation(line: 48, column: 22, scope: !7)
!32 = !DILocation(line: 50, column: 23, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 27, scope: !7)
!35 = !DILocation(line: 41, column: 25, scope: !7)
!36 = !DILocation(line: 43, column: 40, scope: !7)
!37 = !DILocation(line: 43, column: 34, scope: !7)
!38 = !DILocation(line: 43, column: 59, scope: !7)
!39 = !DILocation(line: 43, column: 51, scope: !7)
!40 = !DILocation(line: 43, column: 110, scope: !7)
!41 = !DILocation(line: 44, column: 35, scope: !7)
!42 = !DILocation(line: 44, column: 40, scope: !7)
!43 = !DILocation(line: 45, column: 35, scope: !7)
!44 = !DILocation(line: 45, column: 52, scope: !7)
!45 = !DILocation(line: 51, column: 30, scope: !7)
!46 = !DILocation(line: 52, column: 23, scope: !7)
!47 = !DILocation(line: 54, column: 24, scope: !7)
!48 = !DILocation(line: 55, column: 24, scope: !7)
!49 = !DILocation(line: 58, column: 24, scope: !7)
!50 = !DILocation(line: 59, column: 24, scope: !7)
!51 = !DILocation(line: 62, column: 48, scope: !7)
!52 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !53)
!53 = !DILocation(line: 63, column: 27, scope: !26)
!54 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !55)
!55 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !56)
!56 = !DILocation(line: 63, column: 27, scope: !24)
!57 = !DILocation(line: 85, column: 24, scope: !7)
!58 = !DILocation(line: 86, column: 24, scope: !7)
!59 = !DILocation(line: 64, column: 36, scope: !7)
!60 = !DILocation(line: 65, column: 27, scope: !7)
!61 = !DILocation(line: 66, column: 25, scope: !7)
!62 = !DILocation(line: 68, column: 41, scope: !7)
!63 = !DILocation(line: 68, column: 35, scope: !7)
!64 = !DILocation(line: 68, column: 60, scope: !7)
!65 = !DILocation(line: 68, column: 52, scope: !7)
!66 = !DILocation(line: 68, column: 112, scope: !7)
!67 = !DILocation(line: 69, column: 35, scope: !7)
!68 = !DILocation(line: 69, column: 40, scope: !7)
!69 = !DILocation(line: 70, column: 35, scope: !7)
!70 = !DILocation(line: 70, column: 52, scope: !7)
!71 = !DILocation(line: 71, column: 35, scope: !7)
!72 = !DILocation(line: 71, column: 40, scope: !7)
!73 = !DILocation(line: 77, column: 30, scope: !7)
!74 = !DILocation(line: 78, column: 24, scope: !7)
!75 = !DILocation(line: 80, column: 24, scope: !7)
!76 = !DILocation(line: 81, column: 24, scope: !7)
!77 = !DILocation(line: 84, column: 24, scope: !7)
!78 = !DILocation(line: 87, column: 30, scope: !7)
!79 = !DILocation(line: 88, column: 24, scope: !7)
!80 = !DILocation(line: 89, column: 24, scope: !7)
!81 = !DILocation(line: 90, column: 24, scope: !7)
!82 = !DILocation(line: 92, column: 29, scope: !7)
!83 = !DILocation(line: 92, column: 53, scope: !7)
!84 = !DILocation(line: 64, column: 4, scope: !7)
