module {
  tt.func public @triton__0d1d2d3d4d56de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: i32, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c4_i32 = arith.constant 4 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_3 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c4_i32 : i32
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %4 = arith.muli %0, %c2304_i32 : i32
    %5 = tt.splat %4 : (i32) -> tensor<1x2048xi32>
    %6 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %7 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %8 = scf.for %arg7 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg8 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %34 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32>
      %35 = arith.addi %34, %3 : tensor<1x2048xi32>
      %36 = arith.cmpi slt, %35, %cst_3 : tensor<1x2048xi32>
      %37 = arith.addi %35, %5 : tensor<1x2048xi32>
      %38 = tt.addptr %6, %37 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %39 = arith.andi %36, %7 : tensor<1x2048xi1>
      %40 = tt.load %38, %39, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %41 = arith.extf %40 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %42 = arith.mulf %41, %41 : tensor<1x2048xf32>
      %43 = arith.addf %arg8, %42 : tensor<1x2048xf32>
      %44 = arith.select %39, %43, %arg8 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %44 : tensor<1x2048xf32>
    }
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %34 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %34 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %10 = tt.expand_dims %9 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %11 = arith.muli %0, %c2304_i32 : i32
    %12 = tt.splat %11 : (i32) -> tensor<1x2048xi32>
    %13 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %14 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %15 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %16 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %17 = arith.divf %10, %cst_2 : tensor<1x1xf32>
    %18 = arith.addf %17, %cst_1 : tensor<1x1xf32>
    %19 = scf.for %arg7 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg8 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %34 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32>
      %35 = arith.addi %34, %3 : tensor<1x2048xi32>
      %36 = arith.cmpi slt, %35, %cst_3 : tensor<1x2048xi32>
      %37 = arith.addi %35, %12 : tensor<1x2048xi32>
      %38 = tt.addptr %13, %37 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %39 = arith.andi %36, %14 : tensor<1x2048xi1>
      %40 = tt.load %38, %39, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %41 = arith.extf %40 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %42 = tt.addptr %15, %35 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %43 = tt.load %42, %36, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %44 = tt.addptr %16, %37 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %45 = tt.load %44, %39, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %46 = tt.extern_elementwise %18 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %47 = tt.broadcast %46 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %48 = arith.mulf %41, %47 : tensor<1x2048xf32>
      %49 = arith.addf %43, %cst_0 : tensor<1x2048xf32>
      %50 = arith.mulf %48, %49 : tensor<1x2048xf32>
      %51 = arith.addf %50, %45 : tensor<1x2048xf32>
      %52 = arith.mulf %51, %51 : tensor<1x2048xf32>
      %53 = arith.addf %arg8, %52 : tensor<1x2048xf32>
      %54 = arith.select %39, %53, %arg8 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %54 : tensor<1x2048xf32>
    }
    %20 = "tt.reduce"(%19) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %34 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %34 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %21 = tt.expand_dims %20 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %22 = arith.muli %0, %c2304_i32 : i32
    %23 = tt.splat %22 : (i32) -> tensor<1x2048xi32>
    %24 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %25 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %26 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %27 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %28 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %29 = arith.divf %10, %cst_2 : tensor<1x1xf32>
    %30 = arith.addf %29, %cst_1 : tensor<1x1xf32>
    %31 = arith.divf %21, %cst_2 : tensor<1x1xf32>
    %32 = arith.addf %31, %cst_1 : tensor<1x1xf32>
    %33 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg7 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %34 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32>
      %35 = arith.addi %34, %3 : tensor<1x2048xi32>
      %36 = arith.cmpi slt, %35, %cst_3 : tensor<1x2048xi32>
      %37 = arith.addi %35, %23 : tensor<1x2048xi32>
      %38 = tt.addptr %24, %37 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %39 = arith.andi %36, %25 : tensor<1x2048xi1>
      %40 = tt.load %38, %39, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %41 = arith.extf %40 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %42 = tt.addptr %26, %35 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %43 = tt.load %42, %36, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %44 = tt.addptr %27, %37 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %45 = tt.load %44, %39, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %46 = tt.addptr %28, %35 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %47 = tt.load %46, %36, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %48 = tt.extern_elementwise %30 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %49 = tt.broadcast %48 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %50 = arith.mulf %41, %49 : tensor<1x2048xf32>
      %51 = arith.addf %43, %cst_0 : tensor<1x2048xf32>
      %52 = arith.mulf %50, %51 : tensor<1x2048xf32>
      %53 = arith.addf %52, %45 : tensor<1x2048xf32>
      %54 = tt.extern_elementwise %32 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %55 = tt.broadcast %54 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %56 = arith.mulf %53, %55 : tensor<1x2048xf32>
      %57 = arith.addf %47, %cst_0 : tensor<1x2048xf32>
      %58 = arith.mulf %56, %57 : tensor<1x2048xf32>
      %59 = tt.addptr %33, %37 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %60 = arith.truncf %58 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %59, %60, %39 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
