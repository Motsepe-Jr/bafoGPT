; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 127, !dbg !8
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %10 = shl i32 %9, 7, !dbg !10
  %11 = or i32 %10, %8, !dbg !11
  %12 = srem i32 %11, 256, !dbg !12
  %13 = srem i32 %11, 1024, !dbg !13
  %14 = sdiv i32 %11, 2048, !dbg !14
  %15 = shl nsw i32 %14, 10, !dbg !15
  %16 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !16
  %17 = shufflevector <2 x i32> %16, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %18 = sdiv <2 x i32> %17, <i32 1024, i32 256>, !dbg !16
  %19 = srem <2 x i32> %18, <i32 2, i32 4>, !dbg !17
  %20 = shl nsw <2 x i32> %19, <i32 8, i32 12>, !dbg !18
  %21 = add nsw i32 %15, %12, !dbg !19
  %22 = extractelement <2 x i32> %20, i64 0, !dbg !20
  %23 = add i32 %21, %22, !dbg !21
  %24 = extractelement <2 x i32> %20, i64 1, !dbg !22
  %25 = add nsw i32 %23, %24, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr i16, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %27, i1 true, i16 0, i1 true) #1, !dbg !24
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #1, !dbg !25
  %30 = sext i32 %13 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 true, i32 0, i1 true) #1, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = fmul float %29, %33, !dbg !28
  %35 = icmp slt i32 %12, 128, !dbg !29
  %36 = add i32 %21, 128, !dbg !30
  %37 = add i32 %36, %22, !dbg !31
  %38 = add nsw i32 %37, %24, !dbg !32
  %39 = sext i32 %38 to i64, !dbg !33
  %40 = getelementptr i16, ptr addrspace(1) %0, i64 %39, !dbg !33
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %40, i1 %35, i16 0, i1 %35) #1, !dbg !34
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #1, !dbg !35
  %43 = fsub float 0.000000e+00, %42, !dbg !36
  %44 = icmp sgt i32 %12, 127, !dbg !37
  %45 = add i32 %21, -128, !dbg !38
  %46 = add i32 %45, %22, !dbg !20
  %47 = add nsw i32 %46, %24, !dbg !39
  %48 = sext i32 %47 to i64, !dbg !40
  %49 = getelementptr i16, ptr addrspace(1) %0, i64 %48, !dbg !40
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %49, i1 %44, i16 0, i1 %44) #1, !dbg !41
  %51 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #1, !dbg !42
  %52 = select i1 %44, float %51, float 0.000000e+00, !dbg !43
  %53 = select i1 %35, float %43, float %52, !dbg !44
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !45
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 true, i32 0, i1 true) #1, !dbg !46
  %56 = bitcast i32 %55 to float, !dbg !46
  %57 = fmul float %53, %56, !dbg !47
  %58 = fadd float %34, %57, !dbg !48
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %27, i1 false, i16 0, i1 false) #1, !dbg !49
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #1, !dbg !50
  %61 = add i32 %21, 512, !dbg !51
  %62 = add nsw i32 %61, %24, !dbg !52
  %63 = sext i32 %62 to i64, !dbg !53
  %64 = getelementptr i16, ptr addrspace(1) %0, i64 %63, !dbg !53
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %64, i1 true, i16 0, i1 true) #1, !dbg !54
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #1, !dbg !55
  %67 = fmul float %66, %33, !dbg !56
  %68 = add i32 %21, 640, !dbg !57
  %69 = add nsw i32 %68, %24, !dbg !58
  %70 = sext i32 %69 to i64, !dbg !59
  %71 = getelementptr i16, ptr addrspace(1) %0, i64 %70, !dbg !59
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %71, i1 %35, i16 0, i1 %35) #1, !dbg !60
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #1, !dbg !61
  %74 = fsub float 0.000000e+00, %73, !dbg !62
  %75 = add i32 %21, 384, !dbg !63
  %76 = add nsw i32 %75, %24, !dbg !64
  %77 = sext i32 %76 to i64, !dbg !65
  %78 = getelementptr i16, ptr addrspace(1) %0, i64 %77, !dbg !65
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %78, i1 %44, i16 0, i1 %44) #1, !dbg !66
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #1, !dbg !67
  %81 = select i1 %44, float %80, float 0.000000e+00, !dbg !68
  %82 = select i1 %35, float %74, float %81, !dbg !69
  %83 = fmul float %82, %56, !dbg !70
  %84 = fadd float %67, %83, !dbg !71
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %64, i1 false, i16 0, i1 false) #1, !dbg !72
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #1, !dbg !73
  %87 = sext i32 %11 to i64, !dbg !74
  %88 = getelementptr i16, ptr addrspace(1) %3, i64 %87, !dbg !74
  %89 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %58) #1, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %89, ptr addrspace(1) %88, i1 true) #1, !dbg !75
  %90 = getelementptr i16, ptr addrspace(1) %4, i64 %87, !dbg !76
  %91 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %84) #1, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %91, ptr addrspace(1) %90, i1 true) #1, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cfztofrruvwcaajdiger3yhijszpmyg4ufd3hl5yq3ps4gnucqm6.py", directory: "/tmp/torchinductor_zeus/fz")
!3 = !{ptr @triton__0d1d2d3d4d5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de", linkageName: "triton__0d1d2d3d4d5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 18, scope: !5)
!13 = !DILocation(line: 26, column: 18, scope: !5)
!14 = !DILocation(line: 33, column: 65, scope: !5)
!15 = !DILocation(line: 33, column: 59, scope: !5)
!16 = !DILocation(line: 25, column: 20, scope: !5)
!17 = !DILocation(line: 33, column: 46, scope: !5)
!18 = !DILocation(line: 33, column: 41, scope: !5)
!19 = !DILocation(line: 33, column: 36, scope: !5)
!20 = !DILocation(line: 46, column: 63, scope: !5)
!21 = !DILocation(line: 33, column: 53, scope: !5)
!22 = !DILocation(line: 33, column: 72, scope: !5)
!23 = !DILocation(line: 33, column: 30, scope: !5)
!24 = !DILocation(line: 33, column: 83, scope: !5)
!25 = !DILocation(line: 33, column: 103, scope: !5)
!26 = !DILocation(line: 35, column: 30, scope: !5)
!27 = !DILocation(line: 35, column: 35, scope: !5)
!28 = !DILocation(line: 36, column: 18, scope: !5)
!29 = !DILocation(line: 38, column: 19, scope: !5)
!30 = !DILocation(line: 40, column: 43, scope: !5)
!31 = !DILocation(line: 40, column: 60, scope: !5)
!32 = !DILocation(line: 40, column: 79, scope: !5)
!33 = !DILocation(line: 40, column: 31, scope: !5)
!34 = !DILocation(line: 40, column: 90, scope: !5)
!35 = !DILocation(line: 40, column: 111, scope: !5)
!36 = !DILocation(line: 41, column: 13, scope: !5)
!37 = !DILocation(line: 44, column: 20, scope: !5)
!38 = !DILocation(line: 46, column: 46, scope: !5)
!39 = !DILocation(line: 46, column: 82, scope: !5)
!40 = !DILocation(line: 46, column: 31, scope: !5)
!41 = !DILocation(line: 46, column: 93, scope: !5)
!42 = !DILocation(line: 46, column: 114, scope: !5)
!43 = !DILocation(line: 48, column: 35, scope: !5)
!44 = !DILocation(line: 49, column: 35, scope: !5)
!45 = !DILocation(line: 51, column: 31, scope: !5)
!46 = !DILocation(line: 51, column: 36, scope: !5)
!47 = !DILocation(line: 52, column: 20, scope: !5)
!48 = !DILocation(line: 53, column: 19, scope: !5)
!49 = !DILocation(line: 58, column: 84, scope: !5)
!50 = !DILocation(line: 58, column: 105, scope: !5)
!51 = !DILocation(line: 62, column: 43, scope: !5)
!52 = !DILocation(line: 62, column: 62, scope: !5)
!53 = !DILocation(line: 62, column: 31, scope: !5)
!54 = !DILocation(line: 62, column: 73, scope: !5)
!55 = !DILocation(line: 62, column: 93, scope: !5)
!56 = !DILocation(line: 64, column: 20, scope: !5)
!57 = !DILocation(line: 65, column: 43, scope: !5)
!58 = !DILocation(line: 65, column: 62, scope: !5)
!59 = !DILocation(line: 65, column: 31, scope: !5)
!60 = !DILocation(line: 65, column: 73, scope: !5)
!61 = !DILocation(line: 65, column: 94, scope: !5)
!62 = !DILocation(line: 66, column: 13, scope: !5)
!63 = !DILocation(line: 69, column: 43, scope: !5)
!64 = !DILocation(line: 69, column: 62, scope: !5)
!65 = !DILocation(line: 69, column: 31, scope: !5)
!66 = !DILocation(line: 69, column: 73, scope: !5)
!67 = !DILocation(line: 69, column: 94, scope: !5)
!68 = !DILocation(line: 71, column: 35, scope: !5)
!69 = !DILocation(line: 72, column: 35, scope: !5)
!70 = !DILocation(line: 74, column: 20, scope: !5)
!71 = !DILocation(line: 75, column: 20, scope: !5)
!72 = !DILocation(line: 79, column: 73, scope: !5)
!73 = !DILocation(line: 79, column: 94, scope: !5)
!74 = !DILocation(line: 83, column: 25, scope: !5)
!75 = !DILocation(line: 83, column: 37, scope: !5)
!76 = !DILocation(line: 84, column: 25, scope: !5)
!77 = !DILocation(line: 84, column: 37, scope: !5)
!78 = !DILocation(line: 84, column: 4, scope: !5)
