#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5de6de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x2048xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<1x2048xi32, #blocked1>
    %cst_1 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked>
    %c0_i32 = arith.constant 0 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %cst_3 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32, #blocked>
    %cst_4 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %5 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x2048xi32, #blocked1>
    %6 = arith.muli %0, %c2304_i32 : i32
    %7 = tt.splat %6 : (i32) -> tensor<1x2048xi32, #blocked>
    %8 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %9 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked>
    %10 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %11 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %12 = scf.for %arg7 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg8 = %cst_5) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %26 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32, #blocked>
      %27 = arith.addi %26, %4 : tensor<1x2048xi32, #blocked>
      %28 = arith.cmpi slt, %27, %cst : tensor<1x2048xi32, #blocked>
      %29 = arith.addi %27, %7 : tensor<1x2048xi32, #blocked>
      %30 = tt.addptr %8, %29 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %31 = arith.andi %28, %9 : tensor<1x2048xi1, #blocked>
      %32 = tt.load %30, %31, %cst_6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %33 = arith.extf %32 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %34 = tt.addptr %10, %27 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %35 = tt.load %34, %28, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %36 = tt.addptr %11, %29 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %37 = tt.load %36, %31, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %38 = arith.addf %35, %cst_4 : tensor<1x2048xf32, #blocked>
      %39 = arith.mulf %33, %38 : tensor<1x2048xf32, #blocked>
      %40 = arith.mulf %39, %37 : tensor<1x2048xf32, #blocked>
      %41 = arith.addf %arg8, %40 : tensor<1x2048xf32, #blocked>
      %42 = arith.select %31, %41, %arg8 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %42 : tensor<1x2048xf32, #blocked>
    }
    %13 = "tt.reduce"(%12) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %26 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %26 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %14 = tt.expand_dims %13 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %15 = tt.addptr %arg4, %0 : !tt.ptr<f32, 1>, i32
    %16 = tt.splat %15 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %17 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked>
    %18 = tt.load %16, %17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked>
    %19 = tt.splat %6 : (i32) -> tensor<1x2048xi32, #blocked1>
    %20 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %21 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>
    %22 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked1>
    %23 = arith.divf %18, %cst_1 : tensor<1x1xf32, #blocked>
    %24 = arith.addf %23, %cst_2 : tensor<1x1xf32, #blocked>
    %25 = arith.mulf %14, %cst_3 : tensor<1x1xf32, #blocked>
    scf.for %arg7 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %26 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32, #blocked>
      %27 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32, #blocked1>
      %28 = arith.addi %26, %4 : tensor<1x2048xi32, #blocked>
      %29 = arith.addi %27, %5 : tensor<1x2048xi32, #blocked1>
      %30 = arith.cmpi slt, %28, %cst : tensor<1x2048xi32, #blocked>
      %31 = arith.cmpi slt, %29, %cst_0 : tensor<1x2048xi32, #blocked1>
      %32 = arith.addi %28, %7 : tensor<1x2048xi32, #blocked>
      %33 = arith.addi %29, %19 : tensor<1x2048xi32, #blocked1>
      %34 = tt.addptr %20, %32 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %35 = tt.addptr %21, %33 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xi32, #blocked1>
      %36 = arith.andi %30, %9 : tensor<1x2048xi1, #blocked>
      %37 = arith.andi %31, %22 : tensor<1x2048xi1, #blocked1>
      %38 = tt.load %34, %36, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %39 = tt.addptr %8, %32 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %40 = tt.load %39, %36, %cst_6 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %41 = arith.extf %40 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %42 = tt.addptr %10, %28 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %43 = tt.load %42, %30, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %44 = tt.addptr %11, %32 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %45 = tt.load %44, %36, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %46 = arith.addf %43, %cst_4 : tensor<1x2048xf32, #blocked>
      %47 = arith.mulf %41, %46 : tensor<1x2048xf32, #blocked>
      %48 = tt.extern_elementwise %24 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %49 = tt.broadcast %48 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %50 = arith.mulf %47, %49 : tensor<1x2048xf32, #blocked>
      %51 = arith.addf %38, %50 : tensor<1x2048xf32, #blocked>
      %52 = arith.mulf %48, %48 : tensor<1x1xf32, #blocked>
      %53 = arith.mulf %52, %48 : tensor<1x1xf32, #blocked>
      %54 = arith.mulf %25, %53 : tensor<1x1xf32, #blocked>
      %55 = arith.divf %54, %cst_1 : tensor<1x1xf32, #blocked>
      %56 = tt.broadcast %55 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %57 = arith.mulf %56, %45 : tensor<1x2048xf32, #blocked>
      %58 = arith.addf %51, %57 : tensor<1x2048xf32, #blocked>
      %59 = arith.addf %58, %57 : tensor<1x2048xf32, #blocked>
      %60 = triton_gpu.convert_layout %59 : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked1>
      tt.store %35, %60, %37 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32, #blocked1>
    }
    tt.return
  }
}
