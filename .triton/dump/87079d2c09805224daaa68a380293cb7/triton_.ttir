module {
  tt.func public @triton__0d1d2d3d4d5d6de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.797884583> : tensor<1024xf32>
    %cst_0 = arith.constant dense<1.341450e-01> : tensor<1024xf32>
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1024xf32>
    %cst_2 = arith.constant dense<5.000000e-01> : tensor<1024xf32>
    %c1024_i32 = arith.constant 1024 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %3 = tt.splat %1 : (i32) -> tensor<1024xi32>
    %4 = arith.addi %3, %2 : tensor<1024xi32>
    %5 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>>
    %6 = tt.addptr %5, %4 : tensor<1024x!tt.ptr<bf16, 1>>, tensor<1024xi32>
    %7 = tt.load %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16>
    %8 = arith.extf %7 : tensor<1024xbf16> to tensor<1024xf32>
    %9 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>>
    %10 = tt.addptr %9, %4 : tensor<1024x!tt.ptr<bf16, 1>>, tensor<1024xi32>
    %11 = tt.load %10 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16>
    %12 = arith.extf %11 : tensor<1024xbf16> to tensor<1024xf32>
    %13 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1024x!tt.ptr<f32, 1>>
    %14 = tt.addptr %13, %4 : tensor<1024x!tt.ptr<f32, 1>>, tensor<1024xi32>
    %15 = tt.load %14 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32>
    %16 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>>
    %17 = tt.addptr %16, %4 : tensor<1024x!tt.ptr<bf16, 1>>, tensor<1024xi32>
    %18 = tt.load %17 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16>
    %19 = arith.extf %18 : tensor<1024xbf16> to tensor<1024xf32>
    %20 = arith.mulf %12, %cst_2 : tensor<1024xf32>
    %21 = arith.addf %15, %cst_1 : tensor<1024xf32>
    %22 = arith.mulf %20, %21 : tensor<1024xf32>
    %23 = arith.mulf %8, %22 : tensor<1024xf32>
    %24 = arith.mulf %8, %19 : tensor<1024xf32>
    %25 = arith.mulf %21, %cst_2 : tensor<1024xf32>
    %26 = arith.mulf %15, %15 : tensor<1024xf32>
    %27 = arith.subf %cst_1, %26 : tensor<1024xf32>
    %28 = arith.mulf %20, %27 : tensor<1024xf32>
    %29 = arith.mulf %12, %12 : tensor<1024xf32>
    %30 = arith.mulf %29, %cst_0 : tensor<1024xf32>
    %31 = arith.addf %30, %cst_1 : tensor<1024xf32>
    %32 = arith.mulf %31, %cst : tensor<1024xf32>
    %33 = arith.mulf %28, %32 : tensor<1024xf32>
    %34 = arith.addf %25, %33 : tensor<1024xf32>
    %35 = arith.mulf %24, %34 : tensor<1024xf32>
    %36 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>>
    %37 = tt.addptr %36, %4 : tensor<1024x!tt.ptr<bf16, 1>>, tensor<1024xi32>
    %38 = arith.truncf %23 : tensor<1024xf32> to tensor<1024xbf16>
    tt.store %37, %38 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xbf16>
    %39 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>>
    %40 = tt.addptr %39, %4 : tensor<1024x!tt.ptr<bf16, 1>>, tensor<1024xi32>
    %41 = arith.truncf %35 : tensor<1024xf32> to tensor<1024xbf16>
    tt.store %40, %41 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xbf16>
    tt.return
  }
}
