; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5d6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = shl i32 %8, 3, !dbg !8
  %10 = and i32 %9, 1016, !dbg !8
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %12 = shl i32 %11, 10, !dbg !10
  %13 = or i32 %12, %10, !dbg !11
  %14 = or i32 %13, 4, !dbg !11
  %15 = sext i32 %13 to i64, !dbg !12
  %16 = getelementptr i16, ptr addrspace(1) %0, i64 %15, !dbg !12
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !13
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !13
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !13
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !13
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !13
  %22 = trunc i32 %18 to i16, !dbg !13
  %extelt.offset = lshr i32 %18, 16, !dbg !13
  %23 = trunc i32 %extelt.offset to i16, !dbg !13
  %24 = trunc i32 %19 to i16, !dbg !13
  %extelt.offset1 = lshr i32 %19, 16, !dbg !13
  %25 = trunc i32 %extelt.offset1 to i16, !dbg !13
  %26 = trunc i32 %20 to i16, !dbg !13
  %extelt.offset2 = lshr i32 %20, 16, !dbg !13
  %27 = trunc i32 %extelt.offset2 to i16, !dbg !13
  %28 = trunc i32 %21 to i16, !dbg !13
  %extelt.offset3 = lshr i32 %21, 16, !dbg !13
  %29 = trunc i32 %extelt.offset3 to i16, !dbg !13
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #1, !dbg !14
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #1, !dbg !14
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #1, !dbg !14
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #1, !dbg !14
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #1, !dbg !14
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #1, !dbg !14
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #1, !dbg !14
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #1, !dbg !14
  %38 = getelementptr i16, ptr addrspace(1) %1, i64 %15, !dbg !15
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !16
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !16
  %44 = trunc i32 %40 to i16, !dbg !16
  %extelt.offset4 = lshr i32 %40, 16, !dbg !16
  %45 = trunc i32 %extelt.offset4 to i16, !dbg !16
  %46 = trunc i32 %41 to i16, !dbg !16
  %extelt.offset5 = lshr i32 %41, 16, !dbg !16
  %47 = trunc i32 %extelt.offset5 to i16, !dbg !16
  %48 = trunc i32 %42 to i16, !dbg !16
  %extelt.offset6 = lshr i32 %42, 16, !dbg !16
  %49 = trunc i32 %extelt.offset6 to i16, !dbg !16
  %50 = trunc i32 %43 to i16, !dbg !16
  %extelt.offset7 = lshr i32 %43, 16, !dbg !16
  %51 = trunc i32 %extelt.offset7 to i16, !dbg !16
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #1, !dbg !17
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #1, !dbg !17
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #1, !dbg !17
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #1, !dbg !17
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #1, !dbg !17
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #1, !dbg !17
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #1, !dbg !17
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #1, !dbg !17
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !18
  %61 = sext i32 %14 to i64, !dbg !18
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !18
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !19
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !19
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !19
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !19
  %68 = bitcast i32 %64 to float, !dbg !19
  %69 = bitcast i32 %65 to float, !dbg !19
  %70 = bitcast i32 %66 to float, !dbg !19
  %71 = bitcast i32 %67 to float, !dbg !19
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !19
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !19
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !19
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !19
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !19
  %77 = bitcast i32 %73 to float, !dbg !19
  %78 = bitcast i32 %74 to float, !dbg !19
  %79 = bitcast i32 %75 to float, !dbg !19
  %80 = bitcast i32 %76 to float, !dbg !19
  %81 = getelementptr i16, ptr addrspace(1) %3, i64 %15, !dbg !20
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !21
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !21
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !21
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !21
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !21
  %87 = trunc i32 %83 to i16, !dbg !21
  %extelt.offset8 = lshr i32 %83, 16, !dbg !21
  %88 = trunc i32 %extelt.offset8 to i16, !dbg !21
  %89 = trunc i32 %84 to i16, !dbg !21
  %extelt.offset9 = lshr i32 %84, 16, !dbg !21
  %90 = trunc i32 %extelt.offset9 to i16, !dbg !21
  %91 = trunc i32 %85 to i16, !dbg !21
  %extelt.offset10 = lshr i32 %85, 16, !dbg !21
  %92 = trunc i32 %extelt.offset10 to i16, !dbg !21
  %93 = trunc i32 %86 to i16, !dbg !21
  %extelt.offset11 = lshr i32 %86, 16, !dbg !21
  %94 = trunc i32 %extelt.offset11 to i16, !dbg !21
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #1, !dbg !22
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #1, !dbg !22
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #1, !dbg !22
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #1, !dbg !22
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #1, !dbg !22
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #1, !dbg !22
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #1, !dbg !22
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #1, !dbg !22
  %103 = fmul float %52, 5.000000e-01, !dbg !23
  %104 = fmul float %53, 5.000000e-01, !dbg !23
  %105 = fmul float %54, 5.000000e-01, !dbg !23
  %106 = fmul float %55, 5.000000e-01, !dbg !23
  %107 = fmul float %56, 5.000000e-01, !dbg !23
  %108 = fmul float %57, 5.000000e-01, !dbg !23
  %109 = fmul float %58, 5.000000e-01, !dbg !23
  %110 = fmul float %59, 5.000000e-01, !dbg !23
  %111 = fadd float %68, 1.000000e+00, !dbg !24
  %112 = fadd float %69, 1.000000e+00, !dbg !24
  %113 = fadd float %70, 1.000000e+00, !dbg !24
  %114 = fadd float %71, 1.000000e+00, !dbg !24
  %115 = fadd float %77, 1.000000e+00, !dbg !24
  %116 = fadd float %78, 1.000000e+00, !dbg !24
  %117 = fadd float %79, 1.000000e+00, !dbg !24
  %118 = fadd float %80, 1.000000e+00, !dbg !24
  %119 = fmul float %103, %111, !dbg !25
  %120 = fmul float %104, %112, !dbg !25
  %121 = fmul float %105, %113, !dbg !25
  %122 = fmul float %106, %114, !dbg !25
  %123 = fmul float %107, %115, !dbg !25
  %124 = fmul float %108, %116, !dbg !25
  %125 = fmul float %109, %117, !dbg !25
  %126 = fmul float %110, %118, !dbg !25
  %127 = fmul float %30, %119, !dbg !26
  %128 = fmul float %31, %120, !dbg !26
  %129 = fmul float %32, %121, !dbg !26
  %130 = fmul float %33, %122, !dbg !26
  %131 = fmul float %34, %123, !dbg !26
  %132 = fmul float %35, %124, !dbg !26
  %133 = fmul float %36, %125, !dbg !26
  %134 = fmul float %37, %126, !dbg !26
  %135 = fmul float %30, %95, !dbg !27
  %136 = fmul float %31, %96, !dbg !27
  %137 = fmul float %32, %97, !dbg !27
  %138 = fmul float %33, %98, !dbg !27
  %139 = fmul float %34, %99, !dbg !27
  %140 = fmul float %35, %100, !dbg !27
  %141 = fmul float %36, %101, !dbg !27
  %142 = fmul float %37, %102, !dbg !27
  %143 = fmul float %111, 5.000000e-01, !dbg !28
  %144 = fmul float %112, 5.000000e-01, !dbg !28
  %145 = fmul float %113, 5.000000e-01, !dbg !28
  %146 = fmul float %114, 5.000000e-01, !dbg !28
  %147 = fmul float %115, 5.000000e-01, !dbg !28
  %148 = fmul float %116, 5.000000e-01, !dbg !28
  %149 = fmul float %117, 5.000000e-01, !dbg !28
  %150 = fmul float %118, 5.000000e-01, !dbg !28
  %151 = fmul float %68, %68, !dbg !29
  %152 = fmul float %69, %69, !dbg !29
  %153 = fmul float %70, %70, !dbg !29
  %154 = fmul float %71, %71, !dbg !29
  %155 = fmul float %77, %77, !dbg !29
  %156 = fmul float %78, %78, !dbg !29
  %157 = fmul float %79, %79, !dbg !29
  %158 = fmul float %80, %80, !dbg !29
  %159 = fsub float 1.000000e+00, %151, !dbg !30
  %160 = fsub float 1.000000e+00, %152, !dbg !30
  %161 = fsub float 1.000000e+00, %153, !dbg !30
  %162 = fsub float 1.000000e+00, %154, !dbg !30
  %163 = fsub float 1.000000e+00, %155, !dbg !30
  %164 = fsub float 1.000000e+00, %156, !dbg !30
  %165 = fsub float 1.000000e+00, %157, !dbg !30
  %166 = fsub float 1.000000e+00, %158, !dbg !30
  %167 = fmul float %103, %159, !dbg !31
  %168 = fmul float %104, %160, !dbg !31
  %169 = fmul float %105, %161, !dbg !31
  %170 = fmul float %106, %162, !dbg !31
  %171 = fmul float %107, %163, !dbg !31
  %172 = fmul float %108, %164, !dbg !31
  %173 = fmul float %109, %165, !dbg !31
  %174 = fmul float %110, %166, !dbg !31
  %175 = fmul float %52, %52, !dbg !32
  %176 = fmul float %53, %53, !dbg !32
  %177 = fmul float %54, %54, !dbg !32
  %178 = fmul float %55, %55, !dbg !32
  %179 = fmul float %56, %56, !dbg !32
  %180 = fmul float %57, %57, !dbg !32
  %181 = fmul float %58, %58, !dbg !32
  %182 = fmul float %59, %59, !dbg !32
  %183 = fmul float %175, 0x3FC12BA9E0000000, !dbg !33
  %184 = fmul float %176, 0x3FC12BA9E0000000, !dbg !33
  %185 = fmul float %177, 0x3FC12BA9E0000000, !dbg !33
  %186 = fmul float %178, 0x3FC12BA9E0000000, !dbg !33
  %187 = fmul float %179, 0x3FC12BA9E0000000, !dbg !33
  %188 = fmul float %180, 0x3FC12BA9E0000000, !dbg !33
  %189 = fmul float %181, 0x3FC12BA9E0000000, !dbg !33
  %190 = fmul float %182, 0x3FC12BA9E0000000, !dbg !33
  %191 = fadd float %183, 1.000000e+00, !dbg !34
  %192 = fadd float %184, 1.000000e+00, !dbg !34
  %193 = fadd float %185, 1.000000e+00, !dbg !34
  %194 = fadd float %186, 1.000000e+00, !dbg !34
  %195 = fadd float %187, 1.000000e+00, !dbg !34
  %196 = fadd float %188, 1.000000e+00, !dbg !34
  %197 = fadd float %189, 1.000000e+00, !dbg !34
  %198 = fadd float %190, 1.000000e+00, !dbg !34
  %199 = fmul float %191, 0x3FE9884540000000, !dbg !35
  %200 = fmul float %192, 0x3FE9884540000000, !dbg !35
  %201 = fmul float %193, 0x3FE9884540000000, !dbg !35
  %202 = fmul float %194, 0x3FE9884540000000, !dbg !35
  %203 = fmul float %195, 0x3FE9884540000000, !dbg !35
  %204 = fmul float %196, 0x3FE9884540000000, !dbg !35
  %205 = fmul float %197, 0x3FE9884540000000, !dbg !35
  %206 = fmul float %198, 0x3FE9884540000000, !dbg !35
  %207 = fmul float %199, %167, !dbg !36
  %208 = fmul float %200, %168, !dbg !36
  %209 = fmul float %201, %169, !dbg !36
  %210 = fmul float %202, %170, !dbg !36
  %211 = fmul float %203, %171, !dbg !36
  %212 = fmul float %204, %172, !dbg !36
  %213 = fmul float %205, %173, !dbg !36
  %214 = fmul float %206, %174, !dbg !36
  %215 = fadd float %143, %207, !dbg !37
  %216 = fadd float %144, %208, !dbg !37
  %217 = fadd float %145, %209, !dbg !37
  %218 = fadd float %146, %210, !dbg !37
  %219 = fadd float %147, %211, !dbg !37
  %220 = fadd float %148, %212, !dbg !37
  %221 = fadd float %149, %213, !dbg !37
  %222 = fadd float %150, %214, !dbg !37
  %223 = fmul float %135, %215, !dbg !38
  %224 = fmul float %136, %216, !dbg !38
  %225 = fmul float %137, %217, !dbg !38
  %226 = fmul float %138, %218, !dbg !38
  %227 = fmul float %139, %219, !dbg !38
  %228 = fmul float %220, %140, !dbg !38
  %229 = fmul float %221, %141, !dbg !38
  %230 = fmul float %222, %142, !dbg !38
  %231 = getelementptr i16, ptr addrspace(1) %4, i64 %15, !dbg !39
  %232 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %127) #1, !dbg !40
  %233 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %128) #1, !dbg !40
  %234 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %129) #1, !dbg !40
  %235 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %130) #1, !dbg !40
  %236 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %131) #1, !dbg !40
  %237 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %132) #1, !dbg !40
  %238 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %133) #1, !dbg !40
  %239 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %134) #1, !dbg !40
  %240 = insertelement <2 x i16> undef, i16 %232, i64 0, !dbg !40
  %241 = insertelement <2 x i16> %240, i16 %233, i64 1, !dbg !40
  %242 = bitcast <2 x i16> %241 to i32, !dbg !40
  %243 = insertelement <2 x i16> undef, i16 %234, i64 0, !dbg !40
  %244 = insertelement <2 x i16> %243, i16 %235, i64 1, !dbg !40
  %245 = bitcast <2 x i16> %244 to i32, !dbg !40
  %246 = insertelement <2 x i16> undef, i16 %236, i64 0, !dbg !40
  %247 = insertelement <2 x i16> %246, i16 %237, i64 1, !dbg !40
  %248 = bitcast <2 x i16> %247 to i32, !dbg !40
  %249 = insertelement <2 x i16> undef, i16 %238, i64 0, !dbg !40
  %250 = insertelement <2 x i16> %249, i16 %239, i64 1, !dbg !40
  %251 = bitcast <2 x i16> %250 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %242, i32 %245, i32 %248, i32 %251, ptr addrspace(1) %231, i1 true) #1, !dbg !40
  %252 = getelementptr i16, ptr addrspace(1) %5, i64 %15, !dbg !41
  %253 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %223) #1, !dbg !42
  %254 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %224) #1, !dbg !42
  %255 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %225) #1, !dbg !42
  %256 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %226) #1, !dbg !42
  %257 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %227) #1, !dbg !42
  %258 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %228) #1, !dbg !42
  %259 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %229) #1, !dbg !42
  %260 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %230) #1, !dbg !42
  %261 = insertelement <2 x i16> undef, i16 %253, i64 0, !dbg !42
  %262 = insertelement <2 x i16> %261, i16 %254, i64 1, !dbg !42
  %263 = bitcast <2 x i16> %262 to i32, !dbg !42
  %264 = insertelement <2 x i16> undef, i16 %255, i64 0, !dbg !42
  %265 = insertelement <2 x i16> %264, i16 %256, i64 1, !dbg !42
  %266 = bitcast <2 x i16> %265 to i32, !dbg !42
  %267 = insertelement <2 x i16> undef, i16 %257, i64 0, !dbg !42
  %268 = insertelement <2 x i16> %267, i16 %258, i64 1, !dbg !42
  %269 = bitcast <2 x i16> %268 to i32, !dbg !42
  %270 = insertelement <2 x i16> undef, i16 %259, i64 0, !dbg !42
  %271 = insertelement <2 x i16> %270, i16 %260, i64 1, !dbg !42
  %272 = bitcast <2 x i16> %271 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %263, i32 %266, i32 %269, i32 %272, ptr addrspace(1) %252, i1 true) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cj3vjh5re6u2ng4aarki3wapppjiicupxdk5o4o3njytgk43ho5z.py", directory: "/tmp/torchinductor_zeus/j3")
!3 = !{ptr @triton__0d1d2d3d4d5d6de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de", linkageName: "triton__0d1d2d3d4d5d6de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 30, scope: !5)
!13 = !DILocation(line: 24, column: 35, scope: !5)
!14 = !DILocation(line: 24, column: 44, scope: !5)
!15 = !DILocation(line: 25, column: 30, scope: !5)
!16 = !DILocation(line: 25, column: 35, scope: !5)
!17 = !DILocation(line: 25, column: 44, scope: !5)
!18 = !DILocation(line: 26, column: 30, scope: !5)
!19 = !DILocation(line: 26, column: 35, scope: !5)
!20 = !DILocation(line: 27, column: 31, scope: !5)
!21 = !DILocation(line: 27, column: 36, scope: !5)
!22 = !DILocation(line: 27, column: 45, scope: !5)
!23 = !DILocation(line: 30, column: 18, scope: !5)
!24 = !DILocation(line: 32, column: 18, scope: !5)
!25 = !DILocation(line: 33, column: 18, scope: !5)
!26 = !DILocation(line: 35, column: 19, scope: !5)
!27 = !DILocation(line: 36, column: 19, scope: !5)
!28 = !DILocation(line: 38, column: 19, scope: !5)
!29 = !DILocation(line: 39, column: 19, scope: !5)
!30 = !DILocation(line: 40, column: 19, scope: !5)
!31 = !DILocation(line: 41, column: 19, scope: !5)
!32 = !DILocation(line: 42, column: 19, scope: !5)
!33 = !DILocation(line: 44, column: 20, scope: !5)
!34 = !DILocation(line: 45, column: 20, scope: !5)
!35 = !DILocation(line: 47, column: 20, scope: !5)
!36 = !DILocation(line: 48, column: 20, scope: !5)
!37 = !DILocation(line: 49, column: 20, scope: !5)
!38 = !DILocation(line: 50, column: 20, scope: !5)
!39 = !DILocation(line: 52, column: 25, scope: !5)
!40 = !DILocation(line: 52, column: 37, scope: !5)
!41 = !DILocation(line: 53, column: 25, scope: !5)
!42 = !DILocation(line: 53, column: 37, scope: !5)
!43 = !DILocation(line: 53, column: 4, scope: !5)
