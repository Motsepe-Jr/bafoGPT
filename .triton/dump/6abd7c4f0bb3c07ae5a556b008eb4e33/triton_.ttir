module {
  tt.func public @triton__0d1d2de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<4096> : tensor<1024xi32>
    %cst_0 = arith.constant dense<1024> : tensor<1024xi32>
    %cst_1 = arith.constant dense<512> : tensor<1024xi32>
    %cst_2 = arith.constant dense<1048576> : tensor<1024xi32>
    %cst_3 = arith.constant dense<2048> : tensor<1024xi32>
    %cst_4 = arith.constant dense<256> : tensor<1024xi32>
    %c1024_i32 = arith.constant 1024 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %3 = tt.splat %1 : (i32) -> tensor<1024xi32>
    %4 = arith.addi %3, %2 : tensor<1024xi32>
    %5 = arith.remsi %4, %cst_4 : tensor<1024xi32>
    %6 = arith.divsi %4, %cst_4 : tensor<1024xi32>
    %7 = arith.remsi %6, %cst_3 : tensor<1024xi32>
    %8 = arith.divsi %4, %cst_2 : tensor<1024xi32>
    %9 = arith.addi %5, %cst_1 : tensor<1024xi32>
    %10 = arith.muli %8, %cst_0 : tensor<1024xi32>
    %11 = arith.addi %9, %10 : tensor<1024xi32>
    %12 = arith.muli %7, %cst : tensor<1024xi32>
    %13 = arith.addi %11, %12 : tensor<1024xi32>
    %14 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>>
    %15 = tt.addptr %14, %13 : tensor<1024x!tt.ptr<bf16, 1>>, tensor<1024xi32>
    %16 = tt.load %15 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1024xbf16>
    %17 = arith.extf %16 : tensor<1024xbf16> to tensor<1024xf32>
    %18 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>>
    %19 = tt.addptr %18, %4 : tensor<1024x!tt.ptr<bf16, 1>>, tensor<1024xi32>
    %20 = arith.truncf %17 : tensor<1024xf32> to tensor<1024xbf16>
    tt.store %19, %20 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xbf16>
    tt.return
  }
}
