#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [4, 2], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [8, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<3584> : tensor<1x512xi32, #blocked>
    %cst_0 = arith.constant dense<3584> : tensor<1x512xi32, #blocked1>
    %cst_1 = arith.constant dense<3584> : tensor<8x1xi32, #blocked>
    %cst_2 = arith.constant dense<3584> : tensor<8x1xi64, #blocked>
    %cst_3 = arith.constant dense<0> : tensor<8x1xi64, #blocked>
    %cst_4 = arith.constant dense<288256> : tensor<8x1xi64, #blocked>
    %cst_5 = arith.constant dense<288256> : tensor<8x1xi64, #blocked2>
    %cst_6 = arith.constant dense<0> : tensor<8x1xi64, #blocked2>
    %c0_i32 = arith.constant 0 : i32
    %c512_i32 = arith.constant 512 : i32
    %c3584_i32 = arith.constant 3584 : i32
    %cst_7 = arith.constant dense<1.000000e+00> : tensor<1x512xf32, #blocked1>
    %cst_8 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked>
    %cst_9 = arith.constant dense<3.584000e+03> : tensor<8x1xf32, #blocked>
    %cst_10 = arith.constant dense<59.8665199> : tensor<8x512xf32, #blocked>
    %cst_11 = arith.constant dense<0.000000e+00> : tensor<8x512xf32, #blocked>
    %cst_12 = arith.constant dense<0.000000e+00> : tensor<1x512xf32, #blocked1>
    %c8_i32 = arith.constant 8 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c8_i32 : i32
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %4 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<8x1xi32, #blocked>
    %5 = tt.expand_dims %3 {axis = 1 : i32} : (tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<8x1xi32, #blocked2>
    %6 = tt.splat %1 : (i32) -> tensor<8x1xi32, #blocked>
    %7 = tt.splat %1 : (i32) -> tensor<8x1xi32, #blocked2>
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked>
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked2>
    %10 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %11 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %12 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x512xi32, #blocked>
    %13 = tt.expand_dims %11 {axis = 0 : i32} : (tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x512xi32, #blocked1>
    %14 = tt.splat %arg0 : (!tt.ptr<i64, 1>) -> tensor<8x1x!tt.ptr<i64, 1>, #blocked>
    %15 = tt.splat %arg0 : (!tt.ptr<i64, 1>) -> tensor<8x1x!tt.ptr<i64, 1>, #blocked2>
    %16 = tt.addptr %14, %8 : tensor<8x1x!tt.ptr<i64, 1>, #blocked>, tensor<8x1xi32, #blocked>
    %17 = tt.addptr %15, %9 : tensor<8x1x!tt.ptr<i64, 1>, #blocked2>, tensor<8x1xi32, #blocked2>
    %18 = tt.load %16 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<8x1xi64, #blocked>
    %19 = tt.load %17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<8x1xi64, #blocked2>
    %20 = arith.addi %18, %cst_4 : tensor<8x1xi64, #blocked>
    %21 = arith.addi %19, %cst_5 : tensor<8x1xi64, #blocked2>
    %22 = arith.cmpi slt, %18, %cst_3 : tensor<8x1xi64, #blocked>
    %23 = arith.cmpi slt, %19, %cst_6 : tensor<8x1xi64, #blocked2>
    %24 = arith.select %22, %20, %18 : tensor<8x1xi1, #blocked>, tensor<8x1xi64, #blocked>
    %25 = arith.select %23, %21, %19 : tensor<8x1xi1, #blocked2>, tensor<8x1xi64, #blocked2>
    %26 = arith.cmpi sge, %25, %cst_6 : tensor<8x1xi64, #blocked2>
    %27 = arith.cmpi slt, %25, %cst_5 : tensor<8x1xi64, #blocked2>
    %28 = arith.andi %26, %27 : tensor<8x1xi1, #blocked2>
    %29 = arith.muli %24, %cst_2 : tensor<8x1xi64, #blocked>
    %30 = tt.broadcast %29 : (tensor<8x1xi64, #blocked>) -> tensor<8x512xi64, #blocked>
    %31 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<8x512x!tt.ptr<f32, 1>, #blocked>
    %32 = scf.for %arg6 = %c0_i32 to %c3584_i32 step %c512_i32 iter_args(%arg7 = %cst_11) -> (tensor<8x512xf32, #blocked>)  : i32 {
      %41 = tt.splat %arg6 : (i32) -> tensor<1x512xi32, #blocked>
      %42 = arith.addi %41, %12 : tensor<1x512xi32, #blocked>
      %43 = arith.cmpi slt, %42, %cst : tensor<1x512xi32, #blocked>
      tt.assert %28, "index out of bounds: 0 <= tmp3 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<8x1xi1, #blocked2>
      %44 = arith.extsi %42 : tensor<1x512xi32, #blocked> to tensor<1x512xi64, #blocked>
      %45 = tt.broadcast %44 : (tensor<1x512xi64, #blocked>) -> tensor<8x512xi64, #blocked>
      %46 = arith.addi %45, %30 : tensor<8x512xi64, #blocked>
      %47 = tt.addptr %31, %46 : tensor<8x512x!tt.ptr<f32, 1>, #blocked>, tensor<8x512xi64, #blocked>
      %48 = tt.broadcast %43 : (tensor<1x512xi1, #blocked>) -> tensor<8x512xi1, #blocked>
      %49 = tt.load %47, %48, %cst_11 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<8x512xf32, #blocked>
      %50 = arith.mulf %49, %cst_10 : tensor<8x512xf32, #blocked>
      %51 = arith.mulf %50, %50 : tensor<8x512xf32, #blocked>
      %52 = arith.addf %arg7, %51 : tensor<8x512xf32, #blocked>
      %53 = arith.select %48, %52, %arg7 : tensor<8x512xi1, #blocked>, tensor<8x512xf32, #blocked>
      scf.yield %53 : tensor<8x512xf32, #blocked>
    }
    %33 = "tt.reduce"(%32) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %41 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %41 : f32
    }) : (tensor<8x512xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %34 = tt.expand_dims %33 {axis = 1 : i32} : (tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<8x1xf32, #blocked>
    %35 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x512x!tt.ptr<f32, 1>, #blocked1>
    %36 = arith.divf %34, %cst_9 : tensor<8x1xf32, #blocked>
    %37 = arith.addf %36, %cst_8 : tensor<8x1xf32, #blocked>
    %38 = arith.muli %8, %cst_1 : tensor<8x1xi32, #blocked>
    %39 = tt.broadcast %38 : (tensor<8x1xi32, #blocked>) -> tensor<8x512xi32, #blocked>
    %40 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<8x512x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg6 = %c0_i32 to %c3584_i32 step %c512_i32  : i32 {
      %41 = tt.splat %arg6 : (i32) -> tensor<1x512xi32, #blocked1>
      %42 = tt.splat %arg6 : (i32) -> tensor<1x512xi32, #blocked>
      %43 = arith.addi %41, %13 : tensor<1x512xi32, #blocked1>
      %44 = arith.addi %42, %12 : tensor<1x512xi32, #blocked>
      %45 = arith.cmpi slt, %43, %cst_0 : tensor<1x512xi32, #blocked1>
      %46 = arith.cmpi slt, %44, %cst : tensor<1x512xi32, #blocked>
      %47 = tt.addptr %35, %43 : tensor<1x512x!tt.ptr<f32, 1>, #blocked1>, tensor<1x512xi32, #blocked1>
      %48 = tt.load %47, %45, %cst_12 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x512xf32, #blocked1>
      tt.assert %28, "index out of bounds: 0 <= tmp13 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<8x1xi1, #blocked2>
      %49 = arith.extsi %44 : tensor<1x512xi32, #blocked> to tensor<1x512xi64, #blocked>
      %50 = tt.broadcast %49 : (tensor<1x512xi64, #blocked>) -> tensor<8x512xi64, #blocked>
      %51 = arith.addi %50, %30 : tensor<8x512xi64, #blocked>
      %52 = tt.addptr %31, %51 : tensor<8x512x!tt.ptr<f32, 1>, #blocked>, tensor<8x512xi64, #blocked>
      %53 = tt.broadcast %46 : (tensor<1x512xi1, #blocked>) -> tensor<8x512xi1, #blocked>
      %54 = tt.load %52, %53, %cst_11 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<8x512xf32, #blocked>
      %55 = arith.mulf %54, %cst_10 : tensor<8x512xf32, #blocked>
      %56 = tt.extern_elementwise %37 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked>
      %57 = tt.broadcast %56 : (tensor<8x1xf32, #blocked>) -> tensor<8x512xf32, #blocked>
      %58 = arith.mulf %55, %57 : tensor<8x512xf32, #blocked>
      %59 = arith.addf %48, %cst_7 : tensor<1x512xf32, #blocked1>
      %60 = triton_gpu.convert_layout %59 : (tensor<1x512xf32, #blocked1>) -> tensor<1x512xf32, #blocked>
      %61 = tt.broadcast %60 : (tensor<1x512xf32, #blocked>) -> tensor<8x512xf32, #blocked>
      %62 = arith.mulf %58, %61 : tensor<8x512xf32, #blocked>
      %63 = tt.broadcast %44 : (tensor<1x512xi32, #blocked>) -> tensor<8x512xi32, #blocked>
      %64 = arith.addi %63, %39 : tensor<8x512xi32, #blocked>
      %65 = tt.addptr %40, %64 : tensor<8x512x!tt.ptr<bf16, 1>, #blocked>, tensor<8x512xi32, #blocked>
      %66 = arith.truncf %62 : tensor<8x512xf32, #blocked> to tensor<8x512xbf16, #blocked>
      tt.store %65, %66, %53 {cache = 1 : i32, evict = 1 : i32} : tensor<8x512xbf16, #blocked>
    }
    tt.return
  }
}
