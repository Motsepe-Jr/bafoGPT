; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = shl i32 %8, 2, !dbg !8
  %9 = and i32 %urem, 1020, !dbg !8
  %10 = or i32 %9, 1024, !dbg !8
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %12 = icmp slt i32 %11, 1024, !dbg !10
  %13 = mul i32 %11, 2304, !dbg !11
  %14 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !12
  %15 = insertelement <2 x i32> %14, i32 %10, i64 1, !dbg !12
  %16 = insertelement <2 x i1> poison, i1 %12, i64 0, !dbg !13
  %17 = shufflevector <2 x i1> %16, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !13
  %18 = lshr i32 %8, 5, !dbg !8
  %19 = add i32 %9, %13, !dbg !14
  %20 = add i32 %10, %13, !dbg !14
  %21 = sext i32 %19 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = sext i32 %20 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !15
  %25 = zext nneg i32 %9 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !16
  %27 = zext nneg i32 %10 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !16
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !17
  %31 = shufflevector <2 x i1> %16, <2 x i1> poison, <8 x i32> zeroinitializer, !dbg !13
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #3, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #3, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !18
  %42 = insertelement <8 x i32> poison, i32 %33, i64 0, !dbg !18
  %43 = insertelement <8 x i32> %42, i32 %34, i64 1, !dbg !18
  %44 = insertelement <8 x i32> %43, i32 %35, i64 2, !dbg !18
  %45 = insertelement <8 x i32> %44, i32 %36, i64 3, !dbg !18
  %46 = insertelement <8 x i32> %45, i32 %38, i64 4, !dbg !18
  %47 = insertelement <8 x i32> %46, i32 %39, i64 5, !dbg !18
  %48 = insertelement <8 x i32> %47, i32 %40, i64 6, !dbg !18
  %49 = insertelement <8 x i32> %48, i32 %41, i64 7, !dbg !18
  %50 = bitcast <8 x i32> %49 to <8 x float>, !dbg !18
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !19
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !19
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !19
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !19
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !19
  %61 = insertelement <8 x i32> poison, i32 %52, i64 0, !dbg !19
  %62 = insertelement <8 x i32> %61, i32 %53, i64 1, !dbg !19
  %63 = insertelement <8 x i32> %62, i32 %54, i64 2, !dbg !19
  %64 = insertelement <8 x i32> %63, i32 %55, i64 3, !dbg !19
  %65 = insertelement <8 x i32> %64, i32 %57, i64 4, !dbg !19
  %66 = insertelement <8 x i32> %65, i32 %58, i64 5, !dbg !19
  %67 = insertelement <8 x i32> %66, i32 %59, i64 6, !dbg !19
  %68 = insertelement <8 x i32> %67, i32 %60, i64 7, !dbg !19
  %69 = bitcast <8 x i32> %68 to <8 x float>, !dbg !19
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !20
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !20
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !20
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !20
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !20
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !20
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !20
  %80 = insertelement <8 x i32> poison, i32 %71, i64 0, !dbg !20
  %81 = insertelement <8 x i32> %80, i32 %72, i64 1, !dbg !20
  %82 = insertelement <8 x i32> %81, i32 %73, i64 2, !dbg !20
  %83 = insertelement <8 x i32> %82, i32 %74, i64 3, !dbg !20
  %84 = insertelement <8 x i32> %83, i32 %76, i64 4, !dbg !20
  %85 = insertelement <8 x i32> %84, i32 %77, i64 5, !dbg !20
  %86 = insertelement <8 x i32> %85, i32 %78, i64 6, !dbg !20
  %87 = insertelement <8 x i32> %86, i32 %79, i64 7, !dbg !20
  %88 = bitcast <8 x i32> %87 to <8 x float>, !dbg !20
  %89 = fadd <8 x float> %69, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %90 = fmul <8 x float> %89, %50, !dbg !22
  %91 = fmul <8 x float> %90, %88, !dbg !23
  %92 = fadd <8 x float> %91, zeroinitializer, !dbg !24
  %93 = select <8 x i1> %31, <8 x float> %92, <8 x float> zeroinitializer, !dbg !24
  %94 = or <2 x i32> %15, <i32 2048, i32 2048>, !dbg !12
  %95 = extractelement <2 x i32> %94, i64 0, !dbg !16
  %96 = add i32 %95, %13, !dbg !14
  %97 = extractelement <2 x i32> %94, i64 1, !dbg !16
  %98 = add i32 %97, %13, !dbg !14
  %99 = sext i32 %96 to i64, !dbg !15
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !15
  %101 = sext i32 %98 to i64, !dbg !15
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !15
  %103 = zext nneg i32 %95 to i64, !dbg !16
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !16
  %105 = zext nneg i32 %97 to i64, !dbg !16
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !16
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !17
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !17
  %109 = icmp ult <2 x i32> %94, <i32 2304, i32 2304>, !dbg !25
  %110 = and <2 x i1> %17, %109, !dbg !13
  %111 = shufflevector <2 x i1> %110, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !13
  %112 = extractelement <2 x i1> %110, i64 0, !dbg !20
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !18
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !18
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !18
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !18
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !18
  %118 = extractelement <2 x i1> %110, i64 1, !dbg !20
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #3, !dbg !18
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !18
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !18
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !18
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !18
  %124 = insertelement <8 x i32> poison, i32 %114, i64 0, !dbg !18
  %125 = insertelement <8 x i32> %124, i32 %115, i64 1, !dbg !18
  %126 = insertelement <8 x i32> %125, i32 %116, i64 2, !dbg !18
  %127 = insertelement <8 x i32> %126, i32 %117, i64 3, !dbg !18
  %128 = insertelement <8 x i32> %127, i32 %120, i64 4, !dbg !18
  %129 = insertelement <8 x i32> %128, i32 %121, i64 5, !dbg !18
  %130 = insertelement <8 x i32> %129, i32 %122, i64 6, !dbg !18
  %131 = insertelement <8 x i32> %130, i32 %123, i64 7, !dbg !18
  %132 = bitcast <8 x i32> %131 to <8 x float>, !dbg !18
  %133 = extractelement <2 x i1> %109, i64 0, !dbg !19
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %104, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #3, !dbg !19
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !19
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !19
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !19
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !19
  %139 = extractelement <2 x i1> %109, i64 1, !dbg !19
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139) #3, !dbg !19
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !19
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !19
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !19
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !19
  %145 = insertelement <8 x i32> poison, i32 %135, i64 0, !dbg !19
  %146 = insertelement <8 x i32> %145, i32 %136, i64 1, !dbg !19
  %147 = insertelement <8 x i32> %146, i32 %137, i64 2, !dbg !19
  %148 = insertelement <8 x i32> %147, i32 %138, i64 3, !dbg !19
  %149 = insertelement <8 x i32> %148, i32 %141, i64 4, !dbg !19
  %150 = insertelement <8 x i32> %149, i32 %142, i64 5, !dbg !19
  %151 = insertelement <8 x i32> %150, i32 %143, i64 6, !dbg !19
  %152 = insertelement <8 x i32> %151, i32 %144, i64 7, !dbg !19
  %153 = bitcast <8 x i32> %152 to <8 x float>, !dbg !19
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !20
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !20
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !20
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !20
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !20
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #3, !dbg !20
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !20
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !20
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !20
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !20
  %164 = insertelement <8 x i32> poison, i32 %155, i64 0, !dbg !20
  %165 = insertelement <8 x i32> %164, i32 %156, i64 1, !dbg !20
  %166 = insertelement <8 x i32> %165, i32 %157, i64 2, !dbg !20
  %167 = insertelement <8 x i32> %166, i32 %158, i64 3, !dbg !20
  %168 = insertelement <8 x i32> %167, i32 %160, i64 4, !dbg !20
  %169 = insertelement <8 x i32> %168, i32 %161, i64 5, !dbg !20
  %170 = insertelement <8 x i32> %169, i32 %162, i64 6, !dbg !20
  %171 = insertelement <8 x i32> %170, i32 %163, i64 7, !dbg !20
  %172 = bitcast <8 x i32> %171 to <8 x float>, !dbg !20
  %173 = fadd <8 x float> %153, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %174 = fmul <8 x float> %173, %132, !dbg !22
  %175 = fmul <8 x float> %174, %172, !dbg !23
  %176 = select <8 x i1> %111, <8 x float> %175, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !24
  %177 = fadd <8 x float> %93, %176, !dbg !24
  %178 = and i32 %8, 31, !dbg !8
  %179 = and i32 %18, 7, !dbg !8
  %shift = shufflevector <8 x float> %177, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %180 = fadd <8 x float> %177, %shift, !dbg !26
  %shift23 = shufflevector <8 x float> %177, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %181 = fadd <8 x float> %shift23, %180, !dbg !26
  %shift24 = shufflevector <8 x float> %177, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %182 = fadd <8 x float> %shift24, %181, !dbg !26
  %shift25 = shufflevector <8 x float> %177, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %183 = fadd <8 x float> %shift25, %182, !dbg !26
  %shift26 = shufflevector <8 x float> %177, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %184 = fadd <8 x float> %shift26, %183, !dbg !26
  %shift27 = shufflevector <8 x float> %177, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %185 = fadd <8 x float> %shift27, %184, !dbg !26
  %shift28 = shufflevector <8 x float> %177, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %186 = fadd <8 x float> %shift28, %185, !dbg !26
  %187 = extractelement <8 x float> %186, i64 0, !dbg !26
  %188 = bitcast float %187 to i32, !dbg !32
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 16, i32 31), !dbg !32
  %190 = bitcast i32 %189 to float, !dbg !32
  %191 = fadd float %187, %190, !dbg !26
  %192 = bitcast float %191 to i32, !dbg !32
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 8, i32 31), !dbg !32
  %194 = bitcast i32 %193 to float, !dbg !32
  %195 = fadd float %191, %194, !dbg !26
  %196 = bitcast float %195 to i32, !dbg !32
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 4, i32 31), !dbg !32
  %198 = bitcast i32 %197 to float, !dbg !32
  %199 = fadd float %195, %198, !dbg !26
  %200 = bitcast float %199 to i32, !dbg !32
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 2, i32 31), !dbg !32
  %202 = bitcast i32 %201 to float, !dbg !32
  %203 = fadd float %199, %202, !dbg !26
  %204 = bitcast float %203 to i32, !dbg !32
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !32
  %206 = bitcast i32 %205 to float, !dbg !32
  %207 = fadd float %203, %206, !dbg !26
  %208 = icmp eq i32 %178, 0, !dbg !32
  %209 = zext nneg i32 %179 to i64, !dbg !32
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i64 %209, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, float %207, i1 %208) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %211 = icmp slt i32 %8, 8, !dbg !32
  %212 = sext i32 %8 to i64, !dbg !32
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i64 %212, !dbg !32
  %214 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %213, i1 %211) #3, !dbg !32
  %215 = bitcast float %214 to i32, !dbg !32
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 4, i32 31), !dbg !32
  %217 = bitcast i32 %216 to float, !dbg !32
  %218 = fadd float %214, %217, !dbg !26
  %219 = bitcast float %218 to i32, !dbg !32
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 2, i32 31), !dbg !32
  %221 = bitcast i32 %220 to float, !dbg !32
  %222 = fadd float %218, %221, !dbg !26
  %223 = bitcast float %222 to i32, !dbg !32
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 1, i32 31), !dbg !32
  %225 = bitcast i32 %224 to float, !dbg !32
  %226 = fadd float %222, %225, !dbg !26
  %227 = and i32 %8, 7, !dbg !32
  %228 = icmp eq i32 %227, 0, !dbg !32
  %229 = and i1 %211, %228, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, float %226, i1 %229) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %230 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !32
  %231 = sext i32 %11 to i64, !dbg !34
  %232 = getelementptr float, ptr addrspace(1) %3, i64 %231, !dbg !34
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %12) #3, !dbg !35
  %234 = bitcast i32 %233 to float, !dbg !35
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %12) #3, !dbg !35
  %236 = bitcast i32 %235 to float, !dbg !35
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %12) #3, !dbg !35
  %238 = bitcast i32 %237 to float, !dbg !35
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %12) #3, !dbg !35
  %240 = bitcast i32 %239 to float, !dbg !35
  %241 = fmul float %230, -5.000000e-01, !dbg !36
  %242 = fmul float %234, %234, !dbg !37
  %243 = fmul float %236, %236, !dbg !37
  %244 = fmul float %238, %238, !dbg !37
  %245 = fmul float %240, %240, !dbg !37
  %246 = fmul float %242, %234, !dbg !38
  %247 = fmul float %243, %236, !dbg !38
  %248 = fmul float %244, %238, !dbg !38
  %249 = fmul float %245, %240, !dbg !38
  %250 = fmul float %241, %246, !dbg !39
  %251 = fmul float %241, %247, !dbg !39
  %252 = fmul float %241, %248, !dbg !39
  %253 = fmul float %241, %249, !dbg !39
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float 2.304000e+03) #3, !dbg !40
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float 2.304000e+03) #3, !dbg !40
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float 2.304000e+03) #3, !dbg !40
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %253, float 2.304000e+03) #3, !dbg !40
  br label %258, !dbg !41

258:                                              ; preds = %7, %258
  %259 = phi i1 [ true, %7 ], [ false, %258 ]
  %260 = phi i32 [ 0, %7 ], [ 2048, %258 ]
  %261 = or i32 %260, %9, !dbg !42
  %262 = or i32 %260, %10, !dbg !42
  %263 = icmp ult i32 %261, 2304, !dbg !43
  %264 = icmp ult i32 %262, 2304, !dbg !43
  %265 = add i32 %261, %13, !dbg !44
  %266 = add i32 %262, %13, !dbg !44
  %267 = sext i32 %265 to i64, !dbg !45
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !45
  %269 = sext i32 %266 to i64, !dbg !45
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %269, !dbg !45
  %271 = and i1 %12, %263, !dbg !46
  %272 = and i1 %12, %264, !dbg !46
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %268, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271) #3, !dbg !47
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !47
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !47
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !47
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !47
  %278 = bitcast i32 %274 to float, !dbg !47
  %279 = bitcast i32 %275 to float, !dbg !47
  %280 = bitcast i32 %276 to float, !dbg !47
  %281 = bitcast i32 %277 to float, !dbg !47
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %270, i1 %272, i32 0, i1 %272, i32 0, i1 %272, i32 0, i1 %272, i32 0, i1 %272) #3, !dbg !47
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !47
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !47
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !47
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !47
  %287 = bitcast i32 %283 to float, !dbg !47
  %288 = bitcast i32 %284 to float, !dbg !47
  %289 = bitcast i32 %285 to float, !dbg !47
  %290 = bitcast i32 %286 to float, !dbg !47
  %291 = zext nneg i32 %261 to i64, !dbg !48
  %292 = getelementptr float, ptr addrspace(1) %1, i64 %291, !dbg !48
  %293 = zext nneg i32 %262 to i64, !dbg !48
  %294 = getelementptr float, ptr addrspace(1) %1, i64 %293, !dbg !48
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %292, i1 %263, i32 0, i1 %263, i32 0, i1 %263, i32 0, i1 %263, i32 0, i1 %263) #3, !dbg !49
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !49
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !49
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !49
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !49
  %300 = bitcast i32 %296 to float, !dbg !49
  %301 = bitcast i32 %297 to float, !dbg !49
  %302 = bitcast i32 %298 to float, !dbg !49
  %303 = bitcast i32 %299 to float, !dbg !49
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %294, i1 %264, i32 0, i1 %264, i32 0, i1 %264, i32 0, i1 %264, i32 0, i1 %264) #3, !dbg !49
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !49
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !49
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !49
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !49
  %309 = bitcast i32 %305 to float, !dbg !49
  %310 = bitcast i32 %306 to float, !dbg !49
  %311 = bitcast i32 %307 to float, !dbg !49
  %312 = bitcast i32 %308 to float, !dbg !49
  %313 = getelementptr float, ptr addrspace(1) %2, i64 %267, !dbg !50
  %314 = getelementptr float, ptr addrspace(1) %2, i64 %269, !dbg !50
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %313, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271) #3, !dbg !51
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !51
  %317 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !51
  %318 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !51
  %319 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !51
  %320 = bitcast i32 %316 to float, !dbg !51
  %321 = bitcast i32 %317 to float, !dbg !51
  %322 = bitcast i32 %318 to float, !dbg !51
  %323 = bitcast i32 %319 to float, !dbg !51
  %324 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %314, i1 %272, i32 0, i1 %272, i32 0, i1 %272, i32 0, i1 %272, i32 0, i1 %272) #3, !dbg !51
  %325 = extractvalue { i32, i32, i32, i32 } %324, 0, !dbg !51
  %326 = extractvalue { i32, i32, i32, i32 } %324, 1, !dbg !51
  %327 = extractvalue { i32, i32, i32, i32 } %324, 2, !dbg !51
  %328 = extractvalue { i32, i32, i32, i32 } %324, 3, !dbg !51
  %329 = bitcast i32 %325 to float, !dbg !51
  %330 = bitcast i32 %326 to float, !dbg !51
  %331 = bitcast i32 %327 to float, !dbg !51
  %332 = bitcast i32 %328 to float, !dbg !51
  %333 = fadd float %300, 1.000000e+00, !dbg !52
  %334 = fadd float %301, 1.000000e+00, !dbg !52
  %335 = fadd float %302, 1.000000e+00, !dbg !52
  %336 = fadd float %303, 1.000000e+00, !dbg !52
  %337 = fadd float %309, 1.000000e+00, !dbg !52
  %338 = fadd float %310, 1.000000e+00, !dbg !52
  %339 = fadd float %311, 1.000000e+00, !dbg !52
  %340 = fadd float %312, 1.000000e+00, !dbg !52
  %341 = fmul float %333, %278, !dbg !53
  %342 = fmul float %334, %279, !dbg !53
  %343 = fmul float %335, %280, !dbg !53
  %344 = fmul float %336, %281, !dbg !53
  %345 = fmul float %337, %287, !dbg !53
  %346 = fmul float %338, %288, !dbg !53
  %347 = fmul float %339, %289, !dbg !53
  %348 = fmul float %340, %290, !dbg !53
  %349 = fmul float %341, %234, !dbg !54
  %350 = fmul float %342, %234, !dbg !54
  %351 = fmul float %343, %234, !dbg !54
  %352 = fmul float %344, %234, !dbg !54
  %353 = fmul float %345, %234, !dbg !54
  %354 = fmul float %346, %234, !dbg !54
  %355 = fmul float %347, %234, !dbg !54
  %356 = fmul float %348, %234, !dbg !54
  %357 = fmul float %254, %320, !dbg !55
  %358 = fmul float %254, %321, !dbg !55
  %359 = fmul float %254, %322, !dbg !55
  %360 = fmul float %254, %323, !dbg !55
  %361 = fmul float %254, %329, !dbg !55
  %362 = fmul float %254, %330, !dbg !55
  %363 = fmul float %254, %331, !dbg !55
  %364 = fmul float %254, %332, !dbg !55
  %365 = fadd float %349, %357, !dbg !56
  %366 = fadd float %350, %358, !dbg !56
  %367 = fadd float %351, %359, !dbg !56
  %368 = fadd float %352, %360, !dbg !56
  %369 = fadd float %353, %361, !dbg !56
  %370 = fadd float %354, %362, !dbg !56
  %371 = fadd float %355, %363, !dbg !56
  %372 = fadd float %356, %364, !dbg !56
  %373 = fadd float %357, %365, !dbg !57
  %374 = fadd float %358, %366, !dbg !57
  %375 = fadd float %359, %367, !dbg !57
  %376 = fadd float %360, %368, !dbg !57
  %377 = fadd float %361, %369, !dbg !57
  %378 = fadd float %362, %370, !dbg !57
  %379 = fadd float %363, %371, !dbg !57
  %380 = fadd float %364, %372, !dbg !57
  %381 = getelementptr float, ptr addrspace(1) %4, i64 %267, !dbg !58
  %382 = getelementptr float, ptr addrspace(1) %4, i64 %269, !dbg !58
  %383 = bitcast float %373 to i32, !dbg !59
  %384 = bitcast float %374 to i32, !dbg !59
  %385 = bitcast float %375 to i32, !dbg !59
  %386 = bitcast float %376 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %383, i32 %384, i32 %385, i32 %386, ptr addrspace(1) %381, i1 %271) #3, !dbg !59
  %387 = bitcast float %377 to i32, !dbg !59
  %388 = bitcast float %378 to i32, !dbg !59
  %389 = bitcast float %379 to i32, !dbg !59
  %390 = bitcast float %380 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %387, i32 %388, i32 %389, i32 %390, ptr addrspace(1) %382, i1 %272) #3, !dbg !59
  br i1 %259, label %258, label %391, !dbg !41

391:                                              ; preds = %258
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cnnyrdndowykmv3gdjfhx7wgivr3qxwsd7hlad2a7il4wudgpyto.py", directory: "/tmp/torchinductor_zeus/nn")
!3 = !{ptr @triton__0d1d2d3d4d5de6de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6de", linkageName: "triton__0d1d2d3d4d5de6de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 31, column: 45, scope: !5)
!12 = !DILocation(line: 28, column: 27, scope: !5)
!13 = !DILocation(line: 31, column: 59, scope: !5)
!14 = !DILocation(line: 31, column: 40, scope: !5)
!15 = !DILocation(line: 31, column: 34, scope: !5)
!16 = !DILocation(line: 32, column: 34, scope: !5)
!17 = !DILocation(line: 33, column: 34, scope: !5)
!18 = !DILocation(line: 31, column: 51, scope: !5)
!19 = !DILocation(line: 32, column: 39, scope: !5)
!20 = !DILocation(line: 33, column: 51, scope: !5)
!21 = !DILocation(line: 35, column: 22, scope: !5)
!22 = !DILocation(line: 36, column: 22, scope: !5)
!23 = !DILocation(line: 37, column: 22, scope: !5)
!24 = !DILocation(line: 40, column: 46, scope: !5)
!25 = !DILocation(line: 29, column: 25, scope: !5)
!26 = !DILocation(line: 233, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !5, file: !28, discriminator: 0)
!30 = !DILocation(line: 243, column: 36, scope: !27, inlinedAt: !31)
!31 = !DILocation(line: 41, column: 25, scope: !27)
!32 = !DILocation(line: 243, column: 36, scope: !29, inlinedAt: !33)
!33 = !DILocation(line: 41, column: 25, scope: !29)
!34 = !DILocation(line: 42, column: 31, scope: !5)
!35 = !DILocation(line: 42, column: 36, scope: !5)
!36 = !DILocation(line: 55, column: 23, scope: !5)
!37 = !DILocation(line: 56, column: 24, scope: !5)
!38 = !DILocation(line: 57, column: 24, scope: !5)
!39 = !DILocation(line: 58, column: 24, scope: !5)
!40 = !DILocation(line: 60, column: 24, scope: !5)
!41 = !DILocation(line: 43, column: 36, scope: !5)
!42 = !DILocation(line: 44, column: 27, scope: !5)
!43 = !DILocation(line: 45, column: 25, scope: !5)
!44 = !DILocation(line: 47, column: 41, scope: !5)
!45 = !DILocation(line: 47, column: 35, scope: !5)
!46 = !DILocation(line: 47, column: 60, scope: !5)
!47 = !DILocation(line: 47, column: 52, scope: !5)
!48 = !DILocation(line: 48, column: 35, scope: !5)
!49 = !DILocation(line: 48, column: 40, scope: !5)
!50 = !DILocation(line: 49, column: 35, scope: !5)
!51 = !DILocation(line: 49, column: 52, scope: !5)
!52 = !DILocation(line: 51, column: 24, scope: !5)
!53 = !DILocation(line: 52, column: 24, scope: !5)
!54 = !DILocation(line: 53, column: 24, scope: !5)
!55 = !DILocation(line: 61, column: 24, scope: !5)
!56 = !DILocation(line: 62, column: 24, scope: !5)
!57 = !DILocation(line: 63, column: 24, scope: !5)
!58 = !DILocation(line: 64, column: 29, scope: !5)
!59 = !DILocation(line: 64, column: 53, scope: !5)
!60 = !DILocation(line: 43, column: 4, scope: !5)
