; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d9d10d1112de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %15 = lshr i32 %14, 5, !dbg !10
  %urem = and i32 %14, 255, !dbg !10
  %16 = shl nuw nsw i32 %urem, 3, !dbg !10
  %17 = shl nuw nsw i32 %urem, 2, !dbg !10
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %19 = icmp slt i32 %18, 4, !dbg !12
  %20 = mul i32 %18, 2304, !dbg !13
  %21 = add i32 %16, %20, !dbg !14
  %22 = sext i32 %21 to i64, !dbg !15
  %23 = getelementptr i16, ptr addrspace(1) %2, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %29 = trunc i32 %25 to i16, !dbg !16
  %extelt.offset24 = lshr i32 %25, 16, !dbg !16
  %30 = trunc i32 %extelt.offset24 to i16, !dbg !16
  %31 = trunc i32 %26 to i16, !dbg !16
  %extelt.offset25 = lshr i32 %26, 16, !dbg !16
  %32 = trunc i32 %extelt.offset25 to i16, !dbg !16
  %33 = trunc i32 %27 to i16, !dbg !16
  %extelt.offset26 = lshr i32 %27, 16, !dbg !16
  %34 = trunc i32 %extelt.offset26 to i16, !dbg !16
  %35 = trunc i32 %28 to i16, !dbg !16
  %extelt.offset27 = lshr i32 %28, 16, !dbg !16
  %36 = trunc i32 %extelt.offset27 to i16, !dbg !16
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !17
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !17
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !17
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #6, !dbg !17
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #6, !dbg !17
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #6, !dbg !17
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #6, !dbg !17
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #6, !dbg !17
  %45 = fmul float %37, %37, !dbg !18
  %46 = fmul float %38, %38, !dbg !18
  %47 = fmul float %39, %39, !dbg !18
  %48 = fmul float %40, %40, !dbg !18
  %49 = fmul float %41, %41, !dbg !18
  %50 = fmul float %42, %42, !dbg !18
  %51 = fmul float %43, %43, !dbg !18
  %52 = fmul float %44, %44, !dbg !18
  %53 = select i1 %19, float %45, float 0.000000e+00, !dbg !19
  %54 = select i1 %19, float %46, float 0.000000e+00, !dbg !19
  %55 = select i1 %19, float %47, float 0.000000e+00, !dbg !19
  %56 = select i1 %19, float %48, float 0.000000e+00, !dbg !19
  %57 = select i1 %19, float %49, float 0.000000e+00, !dbg !19
  %58 = select i1 %19, float %50, float 0.000000e+00, !dbg !19
  %59 = select i1 %19, float %51, float 0.000000e+00, !dbg !19
  %60 = select i1 %19, float %52, float 0.000000e+00, !dbg !19
  %61 = or i32 %16, 2048, !dbg !20
  %62 = icmp ult i32 %61, 2304, !dbg !21
  %63 = add i32 %61, %20, !dbg !14
  %64 = sext i32 %63 to i64, !dbg !15
  %65 = getelementptr i16, ptr addrspace(1) %2, i64 %64, !dbg !15
  %66 = and i1 %19, %62, !dbg !22
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #6, !dbg !16
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !16
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !16
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !16
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !16
  %72 = trunc i32 %68 to i16, !dbg !16
  %extelt.offset24.1 = lshr i32 %68, 16, !dbg !16
  %73 = trunc i32 %extelt.offset24.1 to i16, !dbg !16
  %74 = trunc i32 %69 to i16, !dbg !16
  %extelt.offset25.1 = lshr i32 %69, 16, !dbg !16
  %75 = trunc i32 %extelt.offset25.1 to i16, !dbg !16
  %76 = trunc i32 %70 to i16, !dbg !16
  %extelt.offset26.1 = lshr i32 %70, 16, !dbg !16
  %77 = trunc i32 %extelt.offset26.1 to i16, !dbg !16
  %78 = trunc i32 %71 to i16, !dbg !16
  %extelt.offset27.1 = lshr i32 %71, 16, !dbg !16
  %79 = trunc i32 %extelt.offset27.1 to i16, !dbg !16
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #6, !dbg !17
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #6, !dbg !17
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #6, !dbg !17
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #6, !dbg !17
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #6, !dbg !17
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #6, !dbg !17
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #6, !dbg !17
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #6, !dbg !17
  %88 = fmul float %80, %80, !dbg !18
  %89 = fmul float %81, %81, !dbg !18
  %90 = fmul float %82, %82, !dbg !18
  %91 = fmul float %83, %83, !dbg !18
  %92 = fmul float %84, %84, !dbg !18
  %93 = fmul float %85, %85, !dbg !18
  %94 = fmul float %86, %86, !dbg !18
  %95 = fmul float %87, %87, !dbg !18
  %96 = select i1 %66, float %88, float -0.000000e+00, !dbg !19
  %97 = fadd float %53, %96, !dbg !19
  %98 = select i1 %66, float %89, float -0.000000e+00, !dbg !19
  %99 = fadd float %54, %98, !dbg !19
  %100 = select i1 %66, float %90, float -0.000000e+00, !dbg !19
  %101 = fadd float %55, %100, !dbg !19
  %102 = select i1 %66, float %91, float -0.000000e+00, !dbg !19
  %103 = fadd float %56, %102, !dbg !19
  %104 = select i1 %66, float %92, float -0.000000e+00, !dbg !19
  %105 = fadd float %57, %104, !dbg !19
  %106 = select i1 %66, float %93, float -0.000000e+00, !dbg !19
  %107 = fadd float %58, %106, !dbg !19
  %108 = select i1 %66, float %94, float -0.000000e+00, !dbg !19
  %109 = fadd float %59, %108, !dbg !19
  %110 = select i1 %66, float %95, float -0.000000e+00, !dbg !19
  %111 = fadd float %60, %110, !dbg !19
  %112 = and i32 %14, 31, !dbg !10
  %113 = and i32 %15, 7, !dbg !10
  %114 = or i32 %16, 4, !dbg !10
  %115 = or i32 %17, 1024, !dbg !10
  %116 = fadd float %97, %99, !dbg !23
  %117 = fadd float %101, %116, !dbg !23
  %118 = fadd float %103, %117, !dbg !23
  %119 = fadd float %105, %118, !dbg !23
  %120 = fadd float %107, %119, !dbg !23
  %121 = fadd float %109, %120, !dbg !23
  %122 = fadd float %111, %121, !dbg !23
  %123 = bitcast float %122 to i32, !dbg !29
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 16, i32 31), !dbg !29
  %125 = bitcast i32 %124 to float, !dbg !29
  %126 = fadd float %122, %125, !dbg !23
  %127 = bitcast float %126 to i32, !dbg !29
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !29
  %129 = bitcast i32 %128 to float, !dbg !29
  %130 = fadd float %126, %129, !dbg !23
  %131 = bitcast float %130 to i32, !dbg !29
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !29
  %133 = bitcast i32 %132 to float, !dbg !29
  %134 = fadd float %130, %133, !dbg !23
  %135 = bitcast float %134 to i32, !dbg !29
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !29
  %137 = bitcast i32 %136 to float, !dbg !29
  %138 = fadd float %134, %137, !dbg !23
  %139 = bitcast float %138 to i32, !dbg !29
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !29
  %141 = bitcast i32 %140 to float, !dbg !29
  %142 = fadd float %138, %141, !dbg !23
  %143 = icmp eq i32 %112, 0, !dbg !29
  %144 = zext nneg i32 %113 to i64, !dbg !29
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i64 %144, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, float %142, i1 %143) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %146 = icmp slt i32 %14, 8, !dbg !29
  %147 = sext i32 %14 to i64, !dbg !29
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i64 %147, !dbg !29
  %149 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %148, i1 %146) #6, !dbg !29
  %150 = bitcast float %149 to i32, !dbg !29
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !29
  %152 = bitcast i32 %151 to float, !dbg !29
  %153 = fadd float %149, %152, !dbg !23
  %154 = bitcast float %153 to i32, !dbg !29
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !29
  %156 = bitcast i32 %155 to float, !dbg !29
  %157 = fadd float %153, %156, !dbg !23
  %158 = bitcast float %157 to i32, !dbg !29
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !29
  %160 = bitcast i32 %159 to float, !dbg !29
  %161 = fadd float %157, %160, !dbg !23
  %162 = and i32 %14, 7, !dbg !29
  %163 = icmp eq i32 %162, 0, !dbg !29
  %164 = and i1 %146, %163, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, float %161, i1 %164) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %165 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %166 = insertelement <1 x float> undef, float %165, i64 0, !dbg !31
  store <1 x float> %166, ptr addrspace(3) @global_smem, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %167 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !31
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float 2.304000e+03) #6, !dbg !32
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 2.304000e+03) #6, !dbg !32
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 2.304000e+03) #6, !dbg !32
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 2.304000e+03) #6, !dbg !32
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 2.304000e+03) #6, !dbg !32
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 2.304000e+03) #6, !dbg !32
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 2.304000e+03) #6, !dbg !32
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 2.304000e+03) #6, !dbg !32
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 2.304000e+03) #6, !dbg !32
  %177 = fadd float %168, 0x3EE4F8B580000000, !dbg !33
  %178 = fadd float %169, 0x3EE4F8B580000000, !dbg !33
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %.not.i = icmp eq i32 %179, 0, !dbg !31
  br i1 %.not.i, label %182, label %180, !dbg !31

180:                                              ; preds = %13
  %181 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %177), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

182:                                              ; preds = %13
  %183 = tail call float @llvm.nvvm.rsqrt.approx.f(float %177), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %180, %182
  %.0.i = phi float [ %181, %180 ], [ %183, %182 ], !dbg !31
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %.not.i28 = icmp eq i32 %184, 0, !dbg !31
  br i1 %.not.i28, label %187, label %185, !dbg !31

185:                                              ; preds = %__nv_rsqrtf.exit
  %186 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %178), !dbg !31
  br label %__nv_rsqrtf.exit30, !dbg !31

187:                                              ; preds = %__nv_rsqrtf.exit
  %188 = tail call float @llvm.nvvm.rsqrt.approx.f(float %178), !dbg !31
  br label %__nv_rsqrtf.exit30, !dbg !31

__nv_rsqrtf.exit30:                               ; preds = %185, %187
  %.0.i29 = phi float [ %186, %185 ], [ %188, %187 ], !dbg !31
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %196 = sext i32 %18 to i64, !dbg !35
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !35
  %198 = icmp eq i32 %urem, 0, !dbg !36
  %199 = bitcast float %.0.i to i32, !dbg !36
  %200 = and i1 %198, %19, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %197, i1 %200) #6, !dbg !36
  %201 = getelementptr float, ptr addrspace(1) %5, i64 %196, !dbg !37
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %19) #6, !dbg !38
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %19) #6, !dbg !38
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %19) #6, !dbg !38
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %19) #6, !dbg !38
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %19) #6, !dbg !38
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %19) #6, !dbg !38
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %19) #6, !dbg !38
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %19) #6, !dbg !38
  %210 = zext nneg i32 %16 to i64
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i64 %210
  %212 = zext nneg i32 %17 to i64
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i64 %212
  %214 = zext nneg i32 %115 to i64
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i64 %214
  %216 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %213, i64 0, i64 1
  %217 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %213, i64 0, i64 2
  %218 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %213, i64 0, i64 3
  %219 = insertelement <8 x float> poison, float %.0.i29, i64 0, !dbg !39
  %220 = shufflevector <8 x float> %219, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !39
  %221 = insertelement <8 x i32> undef, i32 %202, i64 0, !dbg !40
  %222 = bitcast <8 x i32> %221 to <8 x float>, !dbg !40
  %223 = shufflevector <8 x float> %222, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !40
  br label %224, !dbg !41

224:                                              ; preds = %__nv_rsqrtf.exit30, %224
  %225 = phi i1 [ true, %__nv_rsqrtf.exit30 ], [ false, %224 ]
  %226 = phi i32 [ 0, %__nv_rsqrtf.exit30 ], [ 2048, %224 ]
  %227 = phi <8 x float> [ zeroinitializer, %__nv_rsqrtf.exit30 ], [ %382, %224 ]
  %228 = or i32 %226, %16, !dbg !42
  %229 = or i32 %226, %114, !dbg !42
  %230 = or i32 %226, %17, !dbg !42
  %231 = or i32 %226, %115, !dbg !42
  %232 = icmp ult i32 %228, 2304, !dbg !43
  %233 = icmp ult i32 %230, 2304, !dbg !43
  %234 = icmp ult i32 %231, 2304, !dbg !43
  %235 = add i32 %228, %20, !dbg !44
  %236 = add i32 %229, %20, !dbg !44
  %237 = add i32 %230, %20, !dbg !44
  %238 = add i32 %231, %20, !dbg !44
  %239 = sext i32 %235 to i64, !dbg !45
  %240 = getelementptr i16, ptr addrspace(1) %2, i64 %239, !dbg !45
  %241 = and i1 %19, %232, !dbg !46
  %242 = and i1 %19, %233, !dbg !46
  %243 = and i1 %19, %234, !dbg !46
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %240, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241) #6, !dbg !47
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !47
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !47
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !47
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !47
  %249 = trunc i32 %245 to i16, !dbg !47
  %extelt.offset = lshr i32 %245, 16, !dbg !47
  %250 = trunc i32 %extelt.offset to i16, !dbg !47
  %251 = trunc i32 %246 to i16, !dbg !47
  %extelt.offset3 = lshr i32 %246, 16, !dbg !47
  %252 = trunc i32 %extelt.offset3 to i16, !dbg !47
  %253 = trunc i32 %247 to i16, !dbg !47
  %extelt.offset4 = lshr i32 %247, 16, !dbg !47
  %254 = trunc i32 %extelt.offset4 to i16, !dbg !47
  %255 = trunc i32 %248 to i16, !dbg !47
  %extelt.offset5 = lshr i32 %248, 16, !dbg !47
  %256 = trunc i32 %extelt.offset5 to i16, !dbg !47
  %257 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %249) #6, !dbg !48
  %258 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %250) #6, !dbg !48
  %259 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %251) #6, !dbg !48
  %260 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %252) #6, !dbg !48
  %261 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %253) #6, !dbg !48
  %262 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %254) #6, !dbg !48
  %263 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %255) #6, !dbg !48
  %264 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %256) #6, !dbg !48
  %265 = zext nneg i32 %228 to i64, !dbg !49
  %266 = getelementptr float, ptr addrspace(1) %3, i64 %265, !dbg !49
  %267 = zext nneg i32 %229 to i64, !dbg !49
  %268 = getelementptr float, ptr addrspace(1) %3, i64 %267, !dbg !49
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %266, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232) #6, !dbg !50
  %270 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !50
  %271 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !50
  %272 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !50
  %273 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !50
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %268, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232) #6, !dbg !50
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !50
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !50
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !50
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !50
  %279 = getelementptr i16, ptr addrspace(1) %4, i64 %239, !dbg !51
  %280 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %279, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241) #6, !dbg !52
  %281 = extractvalue { i32, i32, i32, i32 } %280, 0, !dbg !52
  %282 = extractvalue { i32, i32, i32, i32 } %280, 1, !dbg !52
  %283 = extractvalue { i32, i32, i32, i32 } %280, 2, !dbg !52
  %284 = extractvalue { i32, i32, i32, i32 } %280, 3, !dbg !52
  %285 = trunc i32 %281 to i16, !dbg !52
  %extelt.offset6 = lshr i32 %281, 16, !dbg !52
  %286 = trunc i32 %extelt.offset6 to i16, !dbg !52
  %287 = trunc i32 %282 to i16, !dbg !52
  %extelt.offset7 = lshr i32 %282, 16, !dbg !52
  %288 = trunc i32 %extelt.offset7 to i16, !dbg !52
  %289 = trunc i32 %283 to i16, !dbg !52
  %extelt.offset8 = lshr i32 %283, 16, !dbg !52
  %290 = trunc i32 %extelt.offset8 to i16, !dbg !52
  %291 = trunc i32 %284 to i16, !dbg !52
  %extelt.offset9 = lshr i32 %284, 16, !dbg !52
  %292 = trunc i32 %extelt.offset9 to i16, !dbg !52
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #6, !dbg !53
  %294 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #6, !dbg !53
  %295 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %287) #6, !dbg !53
  %296 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %288) #6, !dbg !53
  %297 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %289) #6, !dbg !53
  %298 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %290) #6, !dbg !53
  %299 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %291) #6, !dbg !53
  %300 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %292) #6, !dbg !53
  %301 = getelementptr float, ptr addrspace(1) %6, i64 %265, !dbg !54
  %302 = getelementptr float, ptr addrspace(1) %6, i64 %267, !dbg !54
  %303 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %301, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232) #6, !dbg !55
  %304 = extractvalue { i32, i32, i32, i32 } %303, 0, !dbg !55
  %305 = extractvalue { i32, i32, i32, i32 } %303, 1, !dbg !55
  %306 = extractvalue { i32, i32, i32, i32 } %303, 2, !dbg !55
  %307 = extractvalue { i32, i32, i32, i32 } %303, 3, !dbg !55
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %302, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232) #6, !dbg !55
  %309 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !55
  %310 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !55
  %311 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !55
  %312 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !55
  %313 = getelementptr float, ptr addrspace(1) %7, i64 %239, !dbg !56
  %314 = sext i32 %236 to i64, !dbg !56
  %315 = getelementptr float, ptr addrspace(1) %7, i64 %314, !dbg !56
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %313, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241) #6, !dbg !57
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !57
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !57
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !57
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !57
  %321 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %315, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241) #6, !dbg !57
  %322 = extractvalue { i32, i32, i32, i32 } %321, 0, !dbg !57
  %323 = extractvalue { i32, i32, i32, i32 } %321, 1, !dbg !57
  %324 = extractvalue { i32, i32, i32, i32 } %321, 2, !dbg !57
  %325 = extractvalue { i32, i32, i32, i32 } %321, 3, !dbg !57
  %326 = insertelement <8 x i32> poison, i32 %270, i64 0, !dbg !50
  %327 = insertelement <8 x i32> %326, i32 %271, i64 1, !dbg !50
  %328 = insertelement <8 x i32> %327, i32 %272, i64 2, !dbg !50
  %329 = insertelement <8 x i32> %328, i32 %273, i64 3, !dbg !50
  %330 = insertelement <8 x i32> %329, i32 %275, i64 4, !dbg !50
  %331 = insertelement <8 x i32> %330, i32 %276, i64 5, !dbg !50
  %332 = insertelement <8 x i32> %331, i32 %277, i64 6, !dbg !50
  %333 = insertelement <8 x i32> %332, i32 %278, i64 7, !dbg !50
  %334 = bitcast <8 x i32> %333 to <8 x float>, !dbg !50
  %335 = insertelement <8 x i32> poison, i32 %304, i64 0, !dbg !55
  %336 = insertelement <8 x i32> %335, i32 %305, i64 1, !dbg !55
  %337 = insertelement <8 x i32> %336, i32 %306, i64 2, !dbg !55
  %338 = insertelement <8 x i32> %337, i32 %307, i64 3, !dbg !55
  %339 = insertelement <8 x i32> %338, i32 %309, i64 4, !dbg !55
  %340 = insertelement <8 x i32> %339, i32 %310, i64 5, !dbg !55
  %341 = insertelement <8 x i32> %340, i32 %311, i64 6, !dbg !55
  %342 = insertelement <8 x i32> %341, i32 %312, i64 7, !dbg !55
  %343 = bitcast <8 x i32> %342 to <8 x float>, !dbg !55
  %344 = insertelement <8 x i32> poison, i32 %317, i64 0, !dbg !57
  %345 = insertelement <8 x i32> %344, i32 %318, i64 1, !dbg !57
  %346 = insertelement <8 x i32> %345, i32 %319, i64 2, !dbg !57
  %347 = insertelement <8 x i32> %346, i32 %320, i64 3, !dbg !57
  %348 = insertelement <8 x i32> %347, i32 %322, i64 4, !dbg !57
  %349 = insertelement <8 x i32> %348, i32 %323, i64 5, !dbg !57
  %350 = insertelement <8 x i32> %349, i32 %324, i64 6, !dbg !57
  %351 = insertelement <8 x i32> %350, i32 %325, i64 7, !dbg !57
  %352 = bitcast <8 x i32> %351 to <8 x float>, !dbg !57
  %353 = insertelement <8 x float> poison, float %257, i64 0, !dbg !39
  %354 = insertelement <8 x float> %353, float %258, i64 1, !dbg !39
  %355 = insertelement <8 x float> %354, float %259, i64 2, !dbg !39
  %356 = insertelement <8 x float> %355, float %260, i64 3, !dbg !39
  %357 = insertelement <8 x float> %356, float %261, i64 4, !dbg !39
  %358 = insertelement <8 x float> %357, float %262, i64 5, !dbg !39
  %359 = insertelement <8 x float> %358, float %263, i64 6, !dbg !39
  %360 = insertelement <8 x float> %359, float %264, i64 7, !dbg !39
  %361 = fmul <8 x float> %220, %360, !dbg !39
  %362 = fadd <8 x float> %334, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !58
  %363 = fmul <8 x float> %361, %362, !dbg !59
  %364 = insertelement <8 x float> poison, float %293, i64 0, !dbg !40
  %365 = insertelement <8 x float> %364, float %294, i64 1, !dbg !40
  %366 = insertelement <8 x float> %365, float %295, i64 2, !dbg !40
  %367 = insertelement <8 x float> %366, float %296, i64 3, !dbg !40
  %368 = insertelement <8 x float> %367, float %297, i64 4, !dbg !40
  %369 = insertelement <8 x float> %368, float %298, i64 5, !dbg !40
  %370 = insertelement <8 x float> %369, float %299, i64 6, !dbg !40
  %371 = insertelement <8 x float> %370, float %300, i64 7, !dbg !40
  %372 = fmul <8 x float> %371, %223, !dbg !40
  %373 = fadd <8 x float> %343, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !60
  %374 = fmul <8 x float> %372, %373, !dbg !61
  %375 = fmul <8 x float> %352, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !62
  %376 = fadd <8 x float> %374, %375, !dbg !63
  %377 = fadd <8 x float> %363, %376, !dbg !64
  %378 = fmul <8 x float> %377, %377, !dbg !65
  %379 = insertelement <8 x i1> poison, i1 %241, i64 0, !dbg !66
  %380 = shufflevector <8 x i1> %379, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !66
  %381 = select <8 x i1> %380, <8 x float> %378, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !66
  %382 = fadd <8 x float> %227, %381, !dbg !66
  %383 = sext i32 %237 to i64, !dbg !67
  %384 = getelementptr float, ptr addrspace(1) %9, i64 %383, !dbg !67
  %385 = sext i32 %238 to i64, !dbg !67
  %386 = getelementptr float, ptr addrspace(1) %9, i64 %385, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  store <8 x float> %377, ptr addrspace(3) %211, align 32, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %387 = load <4 x i32>, ptr addrspace(3) %215, align 16, !dbg !68
  %.extract = load i32, ptr addrspace(3) %213, align 16, !dbg !68
  %.extract11 = load i32, ptr addrspace(3) %216, align 4, !dbg !68
  %.extract13 = load i32, ptr addrspace(3) %217, align 8, !dbg !68
  %.extract15 = load i32, ptr addrspace(3) %218, align 4, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract13, i32 %.extract15, ptr addrspace(1) %384, i1 %242) #6, !dbg !68
  %.extract17 = extractelement <4 x i32> %387, i64 0, !dbg !68
  %.extract19 = extractelement <4 x i32> %387, i64 1, !dbg !68
  %.extract21 = extractelement <4 x i32> %387, i64 2, !dbg !68
  %.extract23 = extractelement <4 x i32> %387, i64 3, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract17, i32 %.extract19, i32 %.extract21, i32 %.extract23, ptr addrspace(1) %386, i1 %243) #6, !dbg !68
  br i1 %225, label %224, label %388, !dbg !41

388:                                              ; preds = %224
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %shift = shufflevector <8 x float> %382, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %389 = fadd <8 x float> %382, %shift, !dbg !71
  %shift109 = shufflevector <8 x float> %382, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %390 = fadd <8 x float> %shift109, %389, !dbg !71
  %shift110 = shufflevector <8 x float> %382, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %391 = fadd <8 x float> %shift110, %390, !dbg !71
  %shift111 = shufflevector <8 x float> %382, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %392 = fadd <8 x float> %shift111, %391, !dbg !71
  %shift112 = shufflevector <8 x float> %382, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %393 = fadd <8 x float> %shift112, %392, !dbg !71
  %shift113 = shufflevector <8 x float> %382, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %394 = fadd <8 x float> %shift113, %393, !dbg !71
  %shift114 = shufflevector <8 x float> %382, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %395 = fadd <8 x float> %shift114, %394, !dbg !71
  %396 = extractelement <8 x float> %395, i64 0, !dbg !71
  %397 = bitcast float %396 to i32, !dbg !69
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 16, i32 31), !dbg !69
  %399 = bitcast i32 %398 to float, !dbg !69
  %400 = fadd float %396, %399, !dbg !71
  %401 = bitcast float %400 to i32, !dbg !69
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 8, i32 31), !dbg !69
  %403 = bitcast i32 %402 to float, !dbg !69
  %404 = fadd float %400, %403, !dbg !71
  %405 = bitcast float %404 to i32, !dbg !69
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 4, i32 31), !dbg !69
  %407 = bitcast i32 %406 to float, !dbg !69
  %408 = fadd float %404, %407, !dbg !71
  %409 = bitcast float %408 to i32, !dbg !69
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %409, i32 2, i32 31), !dbg !69
  %411 = bitcast i32 %410 to float, !dbg !69
  %412 = fadd float %408, %411, !dbg !71
  %413 = bitcast float %412 to i32, !dbg !69
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 1, i32 31), !dbg !69
  %415 = bitcast i32 %414 to float, !dbg !69
  %416 = fadd float %412, %415, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, float %416, i1 %143) #6, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %417 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %148, i1 %146) #6, !dbg !69
  %418 = bitcast float %417 to i32, !dbg !69
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 4, i32 31), !dbg !69
  %420 = bitcast i32 %419 to float, !dbg !69
  %421 = fadd float %417, %420, !dbg !71
  %422 = bitcast float %421 to i32, !dbg !69
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 2, i32 31), !dbg !69
  %424 = bitcast i32 %423 to float, !dbg !69
  %425 = fadd float %421, %424, !dbg !71
  %426 = bitcast float %425 to i32, !dbg !69
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %426, i32 1, i32 31), !dbg !69
  %428 = bitcast i32 %427 to float, !dbg !69
  %429 = fadd float %425, %428, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, float %429, i1 %164) #6, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %430 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %431 = insertelement <1 x float> undef, float %430, i64 0, !dbg !74
  store <1 x float> %431, ptr addrspace(3) @global_smem, align 4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %432 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !74
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %432, float 2.304000e+03) #6, !dbg !75
  %434 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float 2.304000e+03) #6, !dbg !75
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float 2.304000e+03) #6, !dbg !75
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float 2.304000e+03) #6, !dbg !75
  %437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float 2.304000e+03) #6, !dbg !75
  %438 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float 2.304000e+03) #6, !dbg !75
  %439 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float 2.304000e+03) #6, !dbg !75
  %440 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float 2.304000e+03) #6, !dbg !75
  %441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float 2.304000e+03) #6, !dbg !75
  %442 = fadd float %433, 0x3EE4F8B580000000, !dbg !76
  %443 = fadd float %434, 0x3EE4F8B580000000, !dbg !76
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %.not.i52 = icmp eq i32 %444, 0, !dbg !74
  br i1 %.not.i52, label %447, label %445, !dbg !74

445:                                              ; preds = %388
  %446 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %442), !dbg !74
  br label %__nv_rsqrtf.exit54, !dbg !74

447:                                              ; preds = %388
  %448 = tail call float @llvm.nvvm.rsqrt.approx.f(float %442), !dbg !74
  br label %__nv_rsqrtf.exit54, !dbg !74

__nv_rsqrtf.exit54:                               ; preds = %445, %447
  %.0.i53 = phi float [ %446, %445 ], [ %448, %447 ], !dbg !74
  %449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %.not.i55 = icmp eq i32 %449, 0, !dbg !74
  br i1 %.not.i55, label %452, label %450, !dbg !74

450:                                              ; preds = %__nv_rsqrtf.exit54
  %451 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %443), !dbg !74
  br label %__nv_rsqrtf.exit57, !dbg !74

452:                                              ; preds = %__nv_rsqrtf.exit54
  %453 = tail call float @llvm.nvvm.rsqrt.approx.f(float %443), !dbg !74
  br label %__nv_rsqrtf.exit57, !dbg !74

__nv_rsqrtf.exit57:                               ; preds = %450, %452
  %.0.i56 = phi float [ %451, %450 ], [ %453, %452 ], !dbg !74
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %455 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %456 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %461 = getelementptr float, ptr addrspace(1) %1, i64 %196, !dbg !78
  %462 = bitcast float %.0.i53 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %462, ptr addrspace(1) %461, i1 %200) #6, !dbg !79
  %463 = add i32 %114, %20, !dbg !80
  %464 = getelementptr float, ptr addrspace(1) %9, i64 %22, !dbg !81
  %465 = sext i32 %463 to i64, !dbg !81
  %466 = getelementptr float, ptr addrspace(1) %9, i64 %465, !dbg !81
  %467 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %464, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !82
  %468 = extractvalue { i32, i32, i32, i32 } %467, 0, !dbg !82
  %469 = extractvalue { i32, i32, i32, i32 } %467, 1, !dbg !82
  %470 = extractvalue { i32, i32, i32, i32 } %467, 2, !dbg !82
  %471 = extractvalue { i32, i32, i32, i32 } %467, 3, !dbg !82
  %472 = bitcast i32 %468 to float, !dbg !82
  %473 = bitcast i32 %469 to float, !dbg !82
  %474 = bitcast i32 %470 to float, !dbg !82
  %475 = bitcast i32 %471 to float, !dbg !82
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %466, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !82
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !82
  %478 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !82
  %479 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !82
  %480 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !82
  %481 = bitcast i32 %477 to float, !dbg !82
  %482 = bitcast i32 %478 to float, !dbg !82
  %483 = bitcast i32 %479 to float, !dbg !82
  %484 = bitcast i32 %480 to float, !dbg !82
  %485 = getelementptr float, ptr addrspace(1) %8, i64 %210, !dbg !83
  %486 = zext nneg i32 %114 to i64, !dbg !83
  %487 = getelementptr float, ptr addrspace(1) %8, i64 %486, !dbg !83
  %488 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %485, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !84
  %489 = extractvalue { i32, i32, i32, i32 } %488, 0, !dbg !84
  %490 = extractvalue { i32, i32, i32, i32 } %488, 1, !dbg !84
  %491 = extractvalue { i32, i32, i32, i32 } %488, 2, !dbg !84
  %492 = extractvalue { i32, i32, i32, i32 } %488, 3, !dbg !84
  %493 = bitcast i32 %489 to float, !dbg !84
  %494 = bitcast i32 %490 to float, !dbg !84
  %495 = bitcast i32 %491 to float, !dbg !84
  %496 = bitcast i32 %492 to float, !dbg !84
  %497 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %487, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !84
  %498 = extractvalue { i32, i32, i32, i32 } %497, 0, !dbg !84
  %499 = extractvalue { i32, i32, i32, i32 } %497, 1, !dbg !84
  %500 = extractvalue { i32, i32, i32, i32 } %497, 2, !dbg !84
  %501 = extractvalue { i32, i32, i32, i32 } %497, 3, !dbg !84
  %502 = bitcast i32 %498 to float, !dbg !84
  %503 = bitcast i32 %499 to float, !dbg !84
  %504 = bitcast i32 %500 to float, !dbg !84
  %505 = bitcast i32 %501 to float, !dbg !84
  %506 = fmul float %.0.i56, %472, !dbg !85
  %507 = fmul float %.0.i56, %473, !dbg !85
  %508 = fmul float %.0.i56, %474, !dbg !85
  %509 = fmul float %.0.i56, %475, !dbg !85
  %510 = fmul float %.0.i56, %481, !dbg !85
  %511 = fmul float %.0.i56, %482, !dbg !85
  %512 = fmul float %.0.i56, %483, !dbg !85
  %513 = fmul float %.0.i56, %484, !dbg !85
  %514 = fadd float %493, 1.000000e+00, !dbg !86
  %515 = fadd float %494, 1.000000e+00, !dbg !86
  %516 = fadd float %495, 1.000000e+00, !dbg !86
  %517 = fadd float %496, 1.000000e+00, !dbg !86
  %518 = fadd float %502, 1.000000e+00, !dbg !86
  %519 = fadd float %503, 1.000000e+00, !dbg !86
  %520 = fadd float %504, 1.000000e+00, !dbg !86
  %521 = fadd float %505, 1.000000e+00, !dbg !86
  %522 = fmul float %506, %514, !dbg !87
  %523 = fmul float %507, %515, !dbg !87
  %524 = fmul float %508, %516, !dbg !87
  %525 = fmul float %509, %517, !dbg !87
  %526 = fmul float %510, %518, !dbg !87
  %527 = fmul float %511, %519, !dbg !87
  %528 = fmul float %512, %520, !dbg !87
  %529 = fmul float %513, %521, !dbg !87
  %530 = getelementptr i16, ptr addrspace(1) %10, i64 %22, !dbg !88
  %531 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %522) #6, !dbg !89
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %523) #6, !dbg !89
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %524) #6, !dbg !89
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %525) #6, !dbg !89
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %526) #6, !dbg !89
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %527) #6, !dbg !89
  %537 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %528) #6, !dbg !89
  %538 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %529) #6, !dbg !89
  %539 = insertelement <2 x i16> undef, i16 %531, i64 0, !dbg !89
  %540 = insertelement <2 x i16> %539, i16 %532, i64 1, !dbg !89
  %541 = bitcast <2 x i16> %540 to i32, !dbg !89
  %542 = insertelement <2 x i16> undef, i16 %533, i64 0, !dbg !89
  %543 = insertelement <2 x i16> %542, i16 %534, i64 1, !dbg !89
  %544 = bitcast <2 x i16> %543 to i32, !dbg !89
  %545 = insertelement <2 x i16> undef, i16 %535, i64 0, !dbg !89
  %546 = insertelement <2 x i16> %545, i16 %536, i64 1, !dbg !89
  %547 = bitcast <2 x i16> %546 to i32, !dbg !89
  %548 = insertelement <2 x i16> undef, i16 %537, i64 0, !dbg !89
  %549 = insertelement <2 x i16> %548, i16 %538, i64 1, !dbg !89
  %550 = bitcast <2 x i16> %549 to i32, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %541, i32 %544, i32 %547, i32 %550, ptr addrspace(1) %530, i1 %19) #6, !dbg !89
  %551 = or i32 %16, 2052, !dbg !90
  %552 = add i32 %551, %20, !dbg !80
  %553 = getelementptr float, ptr addrspace(1) %9, i64 %64, !dbg !81
  %554 = sext i32 %552 to i64, !dbg !81
  %555 = getelementptr float, ptr addrspace(1) %9, i64 %554, !dbg !81
  %556 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %553, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #6, !dbg !82
  %557 = extractvalue { i32, i32, i32, i32 } %556, 0, !dbg !82
  %558 = extractvalue { i32, i32, i32, i32 } %556, 1, !dbg !82
  %559 = extractvalue { i32, i32, i32, i32 } %556, 2, !dbg !82
  %560 = extractvalue { i32, i32, i32, i32 } %556, 3, !dbg !82
  %561 = bitcast i32 %557 to float, !dbg !82
  %562 = bitcast i32 %558 to float, !dbg !82
  %563 = bitcast i32 %559 to float, !dbg !82
  %564 = bitcast i32 %560 to float, !dbg !82
  %565 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %555, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #6, !dbg !82
  %566 = extractvalue { i32, i32, i32, i32 } %565, 0, !dbg !82
  %567 = extractvalue { i32, i32, i32, i32 } %565, 1, !dbg !82
  %568 = extractvalue { i32, i32, i32, i32 } %565, 2, !dbg !82
  %569 = extractvalue { i32, i32, i32, i32 } %565, 3, !dbg !82
  %570 = bitcast i32 %566 to float, !dbg !82
  %571 = bitcast i32 %567 to float, !dbg !82
  %572 = bitcast i32 %568 to float, !dbg !82
  %573 = bitcast i32 %569 to float, !dbg !82
  %574 = zext nneg i32 %61 to i64, !dbg !83
  %575 = getelementptr float, ptr addrspace(1) %8, i64 %574, !dbg !83
  %576 = zext nneg i32 %551 to i64, !dbg !83
  %577 = getelementptr float, ptr addrspace(1) %8, i64 %576, !dbg !83
  %578 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %575, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #6, !dbg !84
  %579 = extractvalue { i32, i32, i32, i32 } %578, 0, !dbg !84
  %580 = extractvalue { i32, i32, i32, i32 } %578, 1, !dbg !84
  %581 = extractvalue { i32, i32, i32, i32 } %578, 2, !dbg !84
  %582 = extractvalue { i32, i32, i32, i32 } %578, 3, !dbg !84
  %583 = bitcast i32 %579 to float, !dbg !84
  %584 = bitcast i32 %580 to float, !dbg !84
  %585 = bitcast i32 %581 to float, !dbg !84
  %586 = bitcast i32 %582 to float, !dbg !84
  %587 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %577, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #6, !dbg !84
  %588 = extractvalue { i32, i32, i32, i32 } %587, 0, !dbg !84
  %589 = extractvalue { i32, i32, i32, i32 } %587, 1, !dbg !84
  %590 = extractvalue { i32, i32, i32, i32 } %587, 2, !dbg !84
  %591 = extractvalue { i32, i32, i32, i32 } %587, 3, !dbg !84
  %592 = bitcast i32 %588 to float, !dbg !84
  %593 = bitcast i32 %589 to float, !dbg !84
  %594 = bitcast i32 %590 to float, !dbg !84
  %595 = bitcast i32 %591 to float, !dbg !84
  %596 = fmul float %.0.i56, %561, !dbg !85
  %597 = fmul float %.0.i56, %562, !dbg !85
  %598 = fmul float %.0.i56, %563, !dbg !85
  %599 = fmul float %.0.i56, %564, !dbg !85
  %600 = fmul float %.0.i56, %570, !dbg !85
  %601 = fmul float %.0.i56, %571, !dbg !85
  %602 = fmul float %.0.i56, %572, !dbg !85
  %603 = fmul float %.0.i56, %573, !dbg !85
  %604 = fadd float %583, 1.000000e+00, !dbg !86
  %605 = fadd float %584, 1.000000e+00, !dbg !86
  %606 = fadd float %585, 1.000000e+00, !dbg !86
  %607 = fadd float %586, 1.000000e+00, !dbg !86
  %608 = fadd float %592, 1.000000e+00, !dbg !86
  %609 = fadd float %593, 1.000000e+00, !dbg !86
  %610 = fadd float %594, 1.000000e+00, !dbg !86
  %611 = fadd float %595, 1.000000e+00, !dbg !86
  %612 = fmul float %596, %604, !dbg !87
  %613 = fmul float %597, %605, !dbg !87
  %614 = fmul float %598, %606, !dbg !87
  %615 = fmul float %599, %607, !dbg !87
  %616 = fmul float %600, %608, !dbg !87
  %617 = fmul float %601, %609, !dbg !87
  %618 = fmul float %602, %610, !dbg !87
  %619 = fmul float %603, %611, !dbg !87
  %620 = getelementptr i16, ptr addrspace(1) %10, i64 %64, !dbg !88
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %612) #6, !dbg !89
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %613) #6, !dbg !89
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %614) #6, !dbg !89
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %615) #6, !dbg !89
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %616) #6, !dbg !89
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %617) #6, !dbg !89
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %618) #6, !dbg !89
  %628 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %619) #6, !dbg !89
  %629 = insertelement <2 x i16> undef, i16 %621, i64 0, !dbg !89
  %630 = insertelement <2 x i16> %629, i16 %622, i64 1, !dbg !89
  %631 = bitcast <2 x i16> %630 to i32, !dbg !89
  %632 = insertelement <2 x i16> undef, i16 %623, i64 0, !dbg !89
  %633 = insertelement <2 x i16> %632, i16 %624, i64 1, !dbg !89
  %634 = bitcast <2 x i16> %633 to i32, !dbg !89
  %635 = insertelement <2 x i16> undef, i16 %625, i64 0, !dbg !89
  %636 = insertelement <2 x i16> %635, i16 %626, i64 1, !dbg !89
  %637 = bitcast <2 x i16> %636 to i32, !dbg !89
  %638 = insertelement <2 x i16> undef, i16 %627, i64 0, !dbg !89
  %639 = insertelement <2 x i16> %638, i16 %628, i64 1, !dbg !89
  %640 = bitcast <2 x i16> %639 to i32, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %631, i32 %634, i32 %637, i32 %640, ptr addrspace(1) %620, i1 %66) #6, !dbg !89
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c5ateqzdoclgjmheuizqwtmdc5pq6gcfgf3vp7j7ycqdvmclvanj.py", directory: "/tmp/torchinductor_zeus/5a")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d1112de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d1112de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10d1112de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10d1112de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 110, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 36, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 29, column: 25, scope: !7)
!22 = !DILocation(line: 31, column: 59, scope: !7)
!23 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 37, column: 25, scope: !26)
!31 = !DILocation(line: 42, column: 26, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 18, scope: !7)
!34 = !DILocation(line: 43, column: 4, scope: !7)
!35 = !DILocation(line: 44, column: 28, scope: !7)
!36 = !DILocation(line: 44, column: 40, scope: !7)
!37 = !DILocation(line: 45, column: 31, scope: !7)
!38 = !DILocation(line: 45, column: 36, scope: !7)
!39 = !DILocation(line: 57, column: 24, scope: !7)
!40 = !DILocation(line: 64, column: 24, scope: !7)
!41 = !DILocation(line: 47, column: 36, scope: !7)
!42 = !DILocation(line: 48, column: 27, scope: !7)
!43 = !DILocation(line: 49, column: 25, scope: !7)
!44 = !DILocation(line: 51, column: 41, scope: !7)
!45 = !DILocation(line: 51, column: 35, scope: !7)
!46 = !DILocation(line: 51, column: 60, scope: !7)
!47 = !DILocation(line: 51, column: 52, scope: !7)
!48 = !DILocation(line: 51, column: 112, scope: !7)
!49 = !DILocation(line: 52, column: 35, scope: !7)
!50 = !DILocation(line: 52, column: 40, scope: !7)
!51 = !DILocation(line: 53, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 52, scope: !7)
!53 = !DILocation(line: 53, column: 112, scope: !7)
!54 = !DILocation(line: 54, column: 35, scope: !7)
!55 = !DILocation(line: 54, column: 40, scope: !7)
!56 = !DILocation(line: 55, column: 35, scope: !7)
!57 = !DILocation(line: 55, column: 52, scope: !7)
!58 = !DILocation(line: 59, column: 24, scope: !7)
!59 = !DILocation(line: 60, column: 24, scope: !7)
!60 = !DILocation(line: 65, column: 24, scope: !7)
!61 = !DILocation(line: 66, column: 24, scope: !7)
!62 = !DILocation(line: 70, column: 24, scope: !7)
!63 = !DILocation(line: 71, column: 24, scope: !7)
!64 = !DILocation(line: 72, column: 24, scope: !7)
!65 = !DILocation(line: 73, column: 24, scope: !7)
!66 = !DILocation(line: 76, column: 48, scope: !7)
!67 = !DILocation(line: 77, column: 29, scope: !7)
!68 = !DILocation(line: 77, column: 53, scope: !7)
!69 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !70)
!70 = !DILocation(line: 78, column: 27, scope: !26)
!71 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !73)
!73 = !DILocation(line: 78, column: 27, scope: !24)
!74 = !DILocation(line: 83, column: 26, scope: !7)
!75 = !DILocation(line: 80, column: 20, scope: !7)
!76 = !DILocation(line: 82, column: 20, scope: !7)
!77 = !DILocation(line: 84, column: 4, scope: !7)
!78 = !DILocation(line: 85, column: 28, scope: !7)
!79 = !DILocation(line: 85, column: 40, scope: !7)
!80 = !DILocation(line: 90, column: 42, scope: !7)
!81 = !DILocation(line: 90, column: 36, scope: !7)
!82 = !DILocation(line: 90, column: 53, scope: !7)
!83 = !DILocation(line: 91, column: 35, scope: !7)
!84 = !DILocation(line: 91, column: 40, scope: !7)
!85 = !DILocation(line: 92, column: 24, scope: !7)
!86 = !DILocation(line: 94, column: 24, scope: !7)
!87 = !DILocation(line: 95, column: 24, scope: !7)
!88 = !DILocation(line: 97, column: 29, scope: !7)
!89 = !DILocation(line: 97, column: 53, scope: !7)
!90 = !DILocation(line: 87, column: 27, scope: !7)
!91 = !DILocation(line: 86, column: 4, scope: !7)
