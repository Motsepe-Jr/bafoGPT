module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d1011de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg10: i32, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c4_i32 = arith.constant 4 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_1 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_3 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c4_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %5 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %6 = tt.splat %5 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %7 = tt.load %6, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %8 = arith.muli %0, %c2304_i32 : i32
    %9 = tt.splat %8 : (i32) -> tensor<1x2048xi32>
    %10 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %11 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %12 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %13 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %14 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %15 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %16 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %17 = tt.broadcast %7 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %18 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg13 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %59 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32>
      %60 = arith.addi %59, %4 : tensor<1x2048xi32>
      %61 = arith.cmpi slt, %60, %cst_3 : tensor<1x2048xi32>
      %62 = arith.addi %60, %9 : tensor<1x2048xi32>
      %63 = tt.addptr %10, %62 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %64 = arith.andi %61, %11 : tensor<1x2048xi1>
      %65 = tt.load %63, %64, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %66 = arith.extf %65 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %67 = tt.addptr %12, %62 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %68 = tt.load %67, %64, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %69 = arith.extf %68 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %70 = tt.addptr %13, %60 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %71 = tt.load %70, %61, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %72 = tt.addptr %14, %62 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %73 = tt.load %72, %64, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %74 = arith.extf %73 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %75 = tt.addptr %15, %60 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %76 = tt.load %75, %61, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %77 = tt.addptr %16, %62 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %78 = tt.load %77, %64, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %79 = arith.addf %66, %69 : tensor<1x2048xf32>
      %80 = arith.addf %71, %cst_2 : tensor<1x2048xf32>
      %81 = arith.mulf %79, %80 : tensor<1x2048xf32>
      %82 = arith.mulf %74, %17 : tensor<1x2048xf32>
      %83 = arith.addf %76, %cst_2 : tensor<1x2048xf32>
      %84 = arith.mulf %82, %83 : tensor<1x2048xf32>
      %85 = arith.addf %84, %78 : tensor<1x2048xf32>
      %86 = arith.mulf %81, %85 : tensor<1x2048xf32>
      %87 = arith.addf %arg13, %86 : tensor<1x2048xf32>
      %88 = arith.select %64, %87, %arg13 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %88 : tensor<1x2048xf32>
    }
    %19 = "tt.reduce"(%18) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %59 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %59 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %20 = tt.expand_dims %19 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %21 = tt.addptr %arg8, %0 : !tt.ptr<f32, 1>, i32
    %22 = tt.splat %21 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %23 = tt.load %22, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %24 = arith.muli %0, %c2304_i32 : i32
    %25 = tt.splat %24 : (i32) -> tensor<1x2048xi32>
    %26 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %27 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %28 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %29 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %30 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %31 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %32 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %33 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %34 = arith.mulf %20, %cst_1 : tensor<1x1xf32>
    %35 = arith.mulf %23, %23 : tensor<1x1xf32>
    %36 = arith.mulf %35, %23 : tensor<1x1xf32>
    %37 = arith.mulf %34, %36 : tensor<1x1xf32>
    %38 = arith.divf %37, %cst_0 : tensor<1x1xf32>
    %39 = tt.broadcast %7 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %40 = tt.broadcast %38 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %41 = tt.broadcast %23 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %42 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg13 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %59 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32>
      %60 = arith.addi %59, %4 : tensor<1x2048xi32>
      %61 = arith.cmpi slt, %60, %cst_3 : tensor<1x2048xi32>
      %62 = arith.addi %60, %25 : tensor<1x2048xi32>
      %63 = tt.addptr %26, %62 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %64 = arith.andi %61, %27 : tensor<1x2048xi1>
      %65 = tt.load %63, %64, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %66 = arith.extf %65 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %67 = tt.addptr %28, %60 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %68 = tt.load %67, %61, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %69 = tt.addptr %29, %62 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %70 = tt.load %69, %64, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %71 = tt.addptr %30, %62 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %72 = tt.load %71, %64, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %73 = tt.addptr %31, %62 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %74 = tt.load %73, %64, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %75 = arith.extf %74 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %76 = tt.addptr %32, %62 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %77 = tt.load %76, %64, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %78 = arith.extf %77 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %79 = tt.addptr %33, %60 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %80 = tt.load %79, %61, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %81 = arith.mulf %66, %39 : tensor<1x2048xf32>
      %82 = arith.addf %68, %cst_2 : tensor<1x2048xf32>
      %83 = arith.mulf %81, %82 : tensor<1x2048xf32>
      %84 = arith.addf %83, %70 : tensor<1x2048xf32>
      %85 = arith.mulf %40, %84 : tensor<1x2048xf32>
      %86 = arith.addf %75, %78 : tensor<1x2048xf32>
      %87 = arith.addf %80, %cst_2 : tensor<1x2048xf32>
      %88 = arith.mulf %86, %87 : tensor<1x2048xf32>
      %89 = arith.mulf %88, %41 : tensor<1x2048xf32>
      %90 = arith.addf %72, %89 : tensor<1x2048xf32>
      %91 = arith.addf %90, %85 : tensor<1x2048xf32>
      %92 = arith.addf %91, %85 : tensor<1x2048xf32>
      %93 = arith.mulf %92, %82 : tensor<1x2048xf32>
      %94 = arith.mulf %93, %66 : tensor<1x2048xf32>
      %95 = arith.addf %arg13, %94 : tensor<1x2048xf32>
      %96 = arith.select %64, %95, %arg13 : tensor<1x2048xi1>, tensor<1x2048xf32>
      tt.store %71, %92, %64 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32>
      scf.yield %96 : tensor<1x2048xf32>
    }
    %43 = "tt.reduce"(%42) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %59 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %59 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %44 = tt.expand_dims %43 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %45 = arith.muli %0, %c2304_i32 : i32
    %46 = tt.splat %45 : (i32) -> tensor<1x2048xi32>
    %47 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %48 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %49 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %50 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %51 = tt.broadcast %7 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %52 = arith.mulf %44, %cst_1 : tensor<1x1xf32>
    %53 = arith.mulf %7, %7 : tensor<1x1xf32>
    %54 = arith.mulf %53, %7 : tensor<1x1xf32>
    %55 = arith.mulf %52, %54 : tensor<1x1xf32>
    %56 = arith.divf %55, %cst_0 : tensor<1x1xf32>
    %57 = tt.broadcast %56 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %58 = tt.splat %arg9 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %59 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32>
      %60 = arith.addi %59, %4 : tensor<1x2048xi32>
      %61 = arith.cmpi slt, %60, %cst_3 : tensor<1x2048xi32>
      %62 = arith.addi %60, %46 : tensor<1x2048xi32>
      %63 = tt.addptr %47, %62 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %64 = arith.andi %61, %48 : tensor<1x2048xi1>
      %65 = tt.load %63, %64, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %66 = tt.addptr %49, %60 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %67 = tt.load %66, %61, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %68 = tt.addptr %50, %62 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %69 = tt.load %68, %64, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %70 = arith.extf %69 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %71 = arith.addf %67, %cst_2 : tensor<1x2048xf32>
      %72 = arith.mulf %65, %71 : tensor<1x2048xf32>
      %73 = arith.mulf %72, %51 : tensor<1x2048xf32>
      %74 = arith.mulf %57, %70 : tensor<1x2048xf32>
      %75 = arith.addf %73, %74 : tensor<1x2048xf32>
      %76 = arith.addf %75, %74 : tensor<1x2048xf32>
      %77 = tt.addptr %58, %62 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %78 = arith.truncf %76 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %77, %78, %64 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
