; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d1011de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !5 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %14 = lshr i32 %13, 5, !dbg !8
  %urem = and i32 %13, 255, !dbg !8
  %15 = shl nuw nsw i32 %urem, 3, !dbg !8
  %16 = or i32 %15, 4, !dbg !8
  %17 = shl nuw nsw i32 %urem, 2, !dbg !8
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %19 = icmp slt i32 %18, 4, !dbg !10
  %20 = sext i32 %18 to i64, !dbg !11
  %21 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !11
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %19) #3, !dbg !12
  %23 = bitcast i32 %22 to float, !dbg !12
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %19) #3, !dbg !12
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %19) #3, !dbg !12
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %19) #3, !dbg !12
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %19) #3, !dbg !12
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %19) #3, !dbg !12
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %19) #3, !dbg !12
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %19) #3, !dbg !12
  %31 = mul i32 %18, 2304, !dbg !13
  %32 = insertelement <8 x float> poison, float %23, i64 0, !dbg !14
  %33 = shufflevector <8 x float> %32, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !14
  br label %34, !dbg !15

34:                                               ; preds = %12, %34
  %35 = phi i1 [ true, %12 ], [ false, %34 ]
  %36 = phi i32 [ 0, %12 ], [ 2048, %34 ]
  %37 = phi <8 x float> [ zeroinitializer, %12 ], [ %212, %34 ]
  %38 = or i32 %36, %15, !dbg !16
  %39 = or i32 %36, %16, !dbg !16
  %40 = icmp ult i32 %38, 2304, !dbg !17
  %41 = add i32 %38, %31, !dbg !18
  %42 = add i32 %39, %31, !dbg !18
  %43 = sext i32 %41 to i64, !dbg !19
  %44 = getelementptr i16, ptr addrspace(1) %1, i64 %43, !dbg !19
  %45 = and i1 %19, %40, !dbg !20
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %51 = trunc i32 %47 to i16, !dbg !21
  %extelt.offset32 = lshr i32 %47, 16, !dbg !21
  %52 = trunc i32 %extelt.offset32 to i16, !dbg !21
  %53 = trunc i32 %48 to i16, !dbg !21
  %extelt.offset33 = lshr i32 %48, 16, !dbg !21
  %54 = trunc i32 %extelt.offset33 to i16, !dbg !21
  %55 = trunc i32 %49 to i16, !dbg !21
  %extelt.offset34 = lshr i32 %49, 16, !dbg !21
  %56 = trunc i32 %extelt.offset34 to i16, !dbg !21
  %57 = trunc i32 %50 to i16, !dbg !21
  %extelt.offset35 = lshr i32 %50, 16, !dbg !21
  %58 = trunc i32 %extelt.offset35 to i16, !dbg !21
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !22
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #3, !dbg !22
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #3, !dbg !22
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #3, !dbg !22
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #3, !dbg !22
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #3, !dbg !22
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #3, !dbg !22
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #3, !dbg !22
  %67 = getelementptr i16, ptr addrspace(1) %2, i64 %43, !dbg !23
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !24
  %73 = trunc i32 %69 to i16, !dbg !24
  %extelt.offset36 = lshr i32 %69, 16, !dbg !24
  %74 = trunc i32 %extelt.offset36 to i16, !dbg !24
  %75 = trunc i32 %70 to i16, !dbg !24
  %extelt.offset37 = lshr i32 %70, 16, !dbg !24
  %76 = trunc i32 %extelt.offset37 to i16, !dbg !24
  %77 = trunc i32 %71 to i16, !dbg !24
  %extelt.offset38 = lshr i32 %71, 16, !dbg !24
  %78 = trunc i32 %extelt.offset38 to i16, !dbg !24
  %79 = trunc i32 %72 to i16, !dbg !24
  %extelt.offset39 = lshr i32 %72, 16, !dbg !24
  %80 = trunc i32 %extelt.offset39 to i16, !dbg !24
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #3, !dbg !25
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #3, !dbg !25
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #3, !dbg !25
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #3, !dbg !25
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #3, !dbg !25
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #3, !dbg !25
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #3, !dbg !25
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #3, !dbg !25
  %89 = zext nneg i32 %38 to i64, !dbg !26
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !26
  %91 = zext nneg i32 %39 to i64, !dbg !26
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !26
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !27
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !27
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !27
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !27
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !27
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !27
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !27
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !27
  %103 = getelementptr i16, ptr addrspace(1) %4, i64 %43, !dbg !28
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !29
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !29
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !29
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !29
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !29
  %109 = trunc i32 %105 to i16, !dbg !29
  %extelt.offset40 = lshr i32 %105, 16, !dbg !29
  %110 = trunc i32 %extelt.offset40 to i16, !dbg !29
  %111 = trunc i32 %106 to i16, !dbg !29
  %extelt.offset41 = lshr i32 %106, 16, !dbg !29
  %112 = trunc i32 %extelt.offset41 to i16, !dbg !29
  %113 = trunc i32 %107 to i16, !dbg !29
  %extelt.offset42 = lshr i32 %107, 16, !dbg !29
  %114 = trunc i32 %extelt.offset42 to i16, !dbg !29
  %115 = trunc i32 %108 to i16, !dbg !29
  %extelt.offset43 = lshr i32 %108, 16, !dbg !29
  %116 = trunc i32 %extelt.offset43 to i16, !dbg !29
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %109) #3, !dbg !30
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #3, !dbg !30
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %111) #3, !dbg !30
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #3, !dbg !30
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #3, !dbg !30
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #3, !dbg !30
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #3, !dbg !30
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #3, !dbg !30
  %125 = getelementptr float, ptr addrspace(1) %6, i64 %89, !dbg !31
  %126 = getelementptr float, ptr addrspace(1) %6, i64 %91, !dbg !31
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !32
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !32
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !32
  %137 = getelementptr float, ptr addrspace(1) %7, i64 %43, !dbg !33
  %138 = sext i32 %42 to i64, !dbg !33
  %139 = getelementptr float, ptr addrspace(1) %7, i64 %138, !dbg !33
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !34
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !34
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !34
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !34
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !34
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !34
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !34
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !34
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !34
  %150 = insertelement <8 x i32> poison, i32 %94, i64 0, !dbg !27
  %151 = insertelement <8 x i32> %150, i32 %95, i64 1, !dbg !27
  %152 = insertelement <8 x i32> %151, i32 %96, i64 2, !dbg !27
  %153 = insertelement <8 x i32> %152, i32 %97, i64 3, !dbg !27
  %154 = insertelement <8 x i32> %153, i32 %99, i64 4, !dbg !27
  %155 = insertelement <8 x i32> %154, i32 %100, i64 5, !dbg !27
  %156 = insertelement <8 x i32> %155, i32 %101, i64 6, !dbg !27
  %157 = insertelement <8 x i32> %156, i32 %102, i64 7, !dbg !27
  %158 = bitcast <8 x i32> %157 to <8 x float>, !dbg !27
  %159 = insertelement <8 x i32> poison, i32 %128, i64 0, !dbg !32
  %160 = insertelement <8 x i32> %159, i32 %129, i64 1, !dbg !32
  %161 = insertelement <8 x i32> %160, i32 %130, i64 2, !dbg !32
  %162 = insertelement <8 x i32> %161, i32 %131, i64 3, !dbg !32
  %163 = insertelement <8 x i32> %162, i32 %133, i64 4, !dbg !32
  %164 = insertelement <8 x i32> %163, i32 %134, i64 5, !dbg !32
  %165 = insertelement <8 x i32> %164, i32 %135, i64 6, !dbg !32
  %166 = insertelement <8 x i32> %165, i32 %136, i64 7, !dbg !32
  %167 = bitcast <8 x i32> %166 to <8 x float>, !dbg !32
  %168 = insertelement <8 x i32> poison, i32 %141, i64 0, !dbg !34
  %169 = insertelement <8 x i32> %168, i32 %142, i64 1, !dbg !34
  %170 = insertelement <8 x i32> %169, i32 %143, i64 2, !dbg !34
  %171 = insertelement <8 x i32> %170, i32 %144, i64 3, !dbg !34
  %172 = insertelement <8 x i32> %171, i32 %146, i64 4, !dbg !34
  %173 = insertelement <8 x i32> %172, i32 %147, i64 5, !dbg !34
  %174 = insertelement <8 x i32> %173, i32 %148, i64 6, !dbg !34
  %175 = insertelement <8 x i32> %174, i32 %149, i64 7, !dbg !34
  %176 = bitcast <8 x i32> %175 to <8 x float>, !dbg !34
  %177 = insertelement <8 x float> poison, float %59, i64 0, !dbg !35
  %178 = insertelement <8 x float> %177, float %60, i64 1, !dbg !35
  %179 = insertelement <8 x float> %178, float %61, i64 2, !dbg !35
  %180 = insertelement <8 x float> %179, float %62, i64 3, !dbg !35
  %181 = insertelement <8 x float> %180, float %63, i64 4, !dbg !35
  %182 = insertelement <8 x float> %181, float %64, i64 5, !dbg !35
  %183 = insertelement <8 x float> %182, float %65, i64 6, !dbg !35
  %184 = insertelement <8 x float> %183, float %66, i64 7, !dbg !35
  %185 = insertelement <8 x float> poison, float %81, i64 0, !dbg !35
  %186 = insertelement <8 x float> %185, float %82, i64 1, !dbg !35
  %187 = insertelement <8 x float> %186, float %83, i64 2, !dbg !35
  %188 = insertelement <8 x float> %187, float %84, i64 3, !dbg !35
  %189 = insertelement <8 x float> %188, float %85, i64 4, !dbg !35
  %190 = insertelement <8 x float> %189, float %86, i64 5, !dbg !35
  %191 = insertelement <8 x float> %190, float %87, i64 6, !dbg !35
  %192 = insertelement <8 x float> %191, float %88, i64 7, !dbg !35
  %193 = fadd <8 x float> %184, %192, !dbg !35
  %194 = fadd <8 x float> %158, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !36
  %195 = fmul <8 x float> %193, %194, !dbg !37
  %196 = insertelement <8 x float> poison, float %117, i64 0, !dbg !14
  %197 = insertelement <8 x float> %196, float %118, i64 1, !dbg !14
  %198 = insertelement <8 x float> %197, float %119, i64 2, !dbg !14
  %199 = insertelement <8 x float> %198, float %120, i64 3, !dbg !14
  %200 = insertelement <8 x float> %199, float %121, i64 4, !dbg !14
  %201 = insertelement <8 x float> %200, float %122, i64 5, !dbg !14
  %202 = insertelement <8 x float> %201, float %123, i64 6, !dbg !14
  %203 = insertelement <8 x float> %202, float %124, i64 7, !dbg !14
  %204 = fmul <8 x float> %203, %33, !dbg !14
  %205 = fadd <8 x float> %167, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !38
  %206 = fmul <8 x float> %204, %205, !dbg !39
  %207 = fadd <8 x float> %206, %176, !dbg !40
  %208 = fmul <8 x float> %195, %207, !dbg !41
  %209 = insertelement <8 x i1> poison, i1 %45, i64 0, !dbg !42
  %210 = shufflevector <8 x i1> %209, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !42
  %211 = select <8 x i1> %210, <8 x float> %208, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !42
  %212 = fadd <8 x float> %37, %211, !dbg !42
  br i1 %35, label %34, label %213, !dbg !15

213:                                              ; preds = %34
  %214 = and i32 %13, 31, !dbg !8
  %215 = and i32 %14, 7, !dbg !8
  %216 = or i32 %17, 1024, !dbg !8
  %217 = bitcast i32 %25 to float, !dbg !12
  %218 = bitcast i32 %27 to float, !dbg !12
  %219 = bitcast i32 %29 to float, !dbg !12
  %shift = shufflevector <8 x float> %212, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %220 = fadd <8 x float> %212, %shift, !dbg !43
  %shift90 = shufflevector <8 x float> %212, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %221 = fadd <8 x float> %shift90, %220, !dbg !43
  %shift91 = shufflevector <8 x float> %212, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %222 = fadd <8 x float> %shift91, %221, !dbg !43
  %shift92 = shufflevector <8 x float> %212, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %223 = fadd <8 x float> %shift92, %222, !dbg !43
  %shift93 = shufflevector <8 x float> %212, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %224 = fadd <8 x float> %shift93, %223, !dbg !43
  %shift94 = shufflevector <8 x float> %212, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %225 = fadd <8 x float> %shift94, %224, !dbg !43
  %shift95 = shufflevector <8 x float> %212, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %226 = fadd <8 x float> %shift95, %225, !dbg !43
  %227 = extractelement <8 x float> %226, i64 0, !dbg !43
  %228 = bitcast float %227 to i32, !dbg !49
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 16, i32 31), !dbg !49
  %230 = bitcast i32 %229 to float, !dbg !49
  %231 = fadd float %227, %230, !dbg !43
  %232 = bitcast float %231 to i32, !dbg !49
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 8, i32 31), !dbg !49
  %234 = bitcast i32 %233 to float, !dbg !49
  %235 = fadd float %231, %234, !dbg !43
  %236 = bitcast float %235 to i32, !dbg !49
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 4, i32 31), !dbg !49
  %238 = bitcast i32 %237 to float, !dbg !49
  %239 = fadd float %235, %238, !dbg !43
  %240 = bitcast float %239 to i32, !dbg !49
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !49
  %242 = bitcast i32 %241 to float, !dbg !49
  %243 = fadd float %239, %242, !dbg !43
  %244 = bitcast float %243 to i32, !dbg !49
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 1, i32 31), !dbg !49
  %246 = bitcast i32 %245 to float, !dbg !49
  %247 = fadd float %243, %246, !dbg !43
  %248 = icmp eq i32 %214, 0, !dbg !49
  %249 = zext nneg i32 %215 to i64, !dbg !49
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i64 %249, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, float %247, i1 %248) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %251 = icmp slt i32 %13, 8, !dbg !49
  %252 = sext i32 %13 to i64, !dbg !49
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i64 %252, !dbg !49
  %254 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %253, i1 %251) #3, !dbg !49
  %255 = bitcast float %254 to i32, !dbg !49
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 4, i32 31), !dbg !49
  %257 = bitcast i32 %256 to float, !dbg !49
  %258 = fadd float %254, %257, !dbg !43
  %259 = bitcast float %258 to i32, !dbg !49
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 2, i32 31), !dbg !49
  %261 = bitcast i32 %260 to float, !dbg !49
  %262 = fadd float %258, %261, !dbg !43
  %263 = bitcast float %262 to i32, !dbg !49
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 1, i32 31), !dbg !49
  %265 = bitcast i32 %264 to float, !dbg !49
  %266 = fadd float %262, %265, !dbg !43
  %267 = and i32 %13, 7, !dbg !49
  %268 = icmp eq i32 %267, 0, !dbg !49
  %269 = and i1 %251, %268, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, float %266, i1 %269) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %270 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !49
  %271 = getelementptr float, ptr addrspace(1) %8, i64 %20, !dbg !51
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %19) #3, !dbg !52
  %273 = bitcast i32 %272 to float, !dbg !52
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %19) #3, !dbg !52
  %275 = bitcast i32 %274 to float, !dbg !52
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %19) #3, !dbg !52
  %277 = bitcast i32 %276 to float, !dbg !52
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %19) #3, !dbg !52
  %279 = bitcast i32 %278 to float, !dbg !52
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %19) #3, !dbg !52
  %281 = bitcast i32 %280 to float, !dbg !52
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %19) #3, !dbg !52
  %283 = bitcast i32 %282 to float, !dbg !52
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %19) #3, !dbg !52
  %285 = bitcast i32 %284 to float, !dbg !52
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %19) #3, !dbg !52
  %287 = bitcast i32 %286 to float, !dbg !52
  %288 = fmul float %270, -5.000000e-01, !dbg !53
  %289 = fmul float %273, %273, !dbg !54
  %290 = fmul float %275, %275, !dbg !54
  %291 = fmul float %277, %277, !dbg !54
  %292 = fmul float %279, %279, !dbg !54
  %293 = fmul float %281, %281, !dbg !54
  %294 = fmul float %283, %283, !dbg !54
  %295 = fmul float %285, %285, !dbg !54
  %296 = fmul float %287, %287, !dbg !54
  %297 = fmul float %289, %273, !dbg !55
  %298 = fmul float %290, %275, !dbg !55
  %299 = fmul float %291, %277, !dbg !55
  %300 = fmul float %292, %279, !dbg !55
  %301 = fmul float %293, %281, !dbg !55
  %302 = fmul float %294, %283, !dbg !55
  %303 = fmul float %295, %285, !dbg !55
  %304 = fmul float %296, %287, !dbg !55
  %305 = fmul float %288, %297, !dbg !56
  %306 = fmul float %288, %298, !dbg !56
  %307 = fmul float %288, %299, !dbg !56
  %308 = fmul float %288, %300, !dbg !56
  %309 = fmul float %288, %301, !dbg !56
  %310 = fmul float %288, %302, !dbg !56
  %311 = fmul float %288, %303, !dbg !56
  %312 = fmul float %288, %304, !dbg !56
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %305, float 2.304000e+03) #3, !dbg !57
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float 2.304000e+03) #3, !dbg !57
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #3, !dbg !57
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float 2.304000e+03) #3, !dbg !57
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float 2.304000e+03) #3, !dbg !57
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float 2.304000e+03) #3, !dbg !57
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float 2.304000e+03) #3, !dbg !57
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %312, float 2.304000e+03) #3, !dbg !57
  %321 = zext nneg i32 %15 to i64
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i64 %321
  %323 = zext nneg i32 %17 to i64
  %324 = getelementptr float, ptr addrspace(3) @global_smem, i64 %323
  %325 = zext nneg i32 %216 to i64
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i64 %325
  %327 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %324, i64 0, i64 1
  %328 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %324, i64 0, i64 2
  %329 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %324, i64 0, i64 3
  %330 = insertelement <8 x float> poison, float %313, i64 0, !dbg !58
  %331 = shufflevector <8 x float> %330, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !58
  %332 = insertelement <8 x float> poison, float %273, i64 0, !dbg !59
  %333 = shufflevector <8 x float> %332, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !59
  br label %334, !dbg !60

334:                                              ; preds = %213, %334
  %335 = phi i1 [ true, %213 ], [ false, %334 ]
  %336 = phi i32 [ 0, %213 ], [ 2048, %334 ]
  %337 = phi <8 x float> [ zeroinitializer, %213 ], [ %551, %334 ]
  %338 = or i32 %336, %15, !dbg !61
  %339 = or i32 %336, %16, !dbg !61
  %340 = or i32 %336, %17, !dbg !61
  %341 = or i32 %336, %216, !dbg !61
  %342 = icmp ult i32 %338, 2304, !dbg !62
  %343 = icmp ult i32 %340, 2304, !dbg !62
  %344 = icmp ult i32 %341, 2304, !dbg !62
  %345 = add i32 %338, %31, !dbg !63
  %346 = add i32 %339, %31, !dbg !63
  %347 = add i32 %340, %31, !dbg !63
  %348 = add i32 %341, %31, !dbg !63
  %349 = sext i32 %345 to i64, !dbg !64
  %350 = getelementptr i16, ptr addrspace(1) %4, i64 %349, !dbg !64
  %351 = and i1 %19, %342, !dbg !65
  %352 = and i1 %19, %343, !dbg !65
  %353 = and i1 %19, %344, !dbg !65
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %350, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351) #3, !dbg !66
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !66
  %356 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !66
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !66
  %358 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !66
  %359 = trunc i32 %355 to i16, !dbg !66
  %extelt.offset6 = lshr i32 %355, 16, !dbg !66
  %360 = trunc i32 %extelt.offset6 to i16, !dbg !66
  %361 = trunc i32 %356 to i16, !dbg !66
  %extelt.offset7 = lshr i32 %356, 16, !dbg !66
  %362 = trunc i32 %extelt.offset7 to i16, !dbg !66
  %363 = trunc i32 %357 to i16, !dbg !66
  %extelt.offset8 = lshr i32 %357, 16, !dbg !66
  %364 = trunc i32 %extelt.offset8 to i16, !dbg !66
  %365 = trunc i32 %358 to i16, !dbg !66
  %extelt.offset9 = lshr i32 %358, 16, !dbg !66
  %366 = trunc i32 %extelt.offset9 to i16, !dbg !66
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #3, !dbg !67
  %368 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #3, !dbg !67
  %369 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #3, !dbg !67
  %370 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %362) #3, !dbg !67
  %371 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #3, !dbg !67
  %372 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %364) #3, !dbg !67
  %373 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #3, !dbg !67
  %374 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %366) #3, !dbg !67
  %375 = zext nneg i32 %338 to i64, !dbg !68
  %376 = getelementptr float, ptr addrspace(1) %6, i64 %375, !dbg !68
  %377 = zext nneg i32 %339 to i64, !dbg !68
  %378 = getelementptr float, ptr addrspace(1) %6, i64 %377, !dbg !68
  %379 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %376, i1 %342, i32 0, i1 %342, i32 0, i1 %342, i32 0, i1 %342, i32 0, i1 %342) #3, !dbg !69
  %380 = extractvalue { i32, i32, i32, i32 } %379, 0, !dbg !69
  %381 = extractvalue { i32, i32, i32, i32 } %379, 1, !dbg !69
  %382 = extractvalue { i32, i32, i32, i32 } %379, 2, !dbg !69
  %383 = extractvalue { i32, i32, i32, i32 } %379, 3, !dbg !69
  %384 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %378, i1 %342, i32 0, i1 %342, i32 0, i1 %342, i32 0, i1 %342, i32 0, i1 %342) #3, !dbg !69
  %385 = extractvalue { i32, i32, i32, i32 } %384, 0, !dbg !69
  %386 = extractvalue { i32, i32, i32, i32 } %384, 1, !dbg !69
  %387 = extractvalue { i32, i32, i32, i32 } %384, 2, !dbg !69
  %388 = extractvalue { i32, i32, i32, i32 } %384, 3, !dbg !69
  %389 = getelementptr float, ptr addrspace(1) %7, i64 %349, !dbg !70
  %390 = sext i32 %346 to i64, !dbg !70
  %391 = getelementptr float, ptr addrspace(1) %7, i64 %390, !dbg !70
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %389, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351) #3, !dbg !71
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !71
  %394 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !71
  %395 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !71
  %396 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !71
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %391, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351) #3, !dbg !71
  %398 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !71
  %399 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !71
  %400 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !71
  %401 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !71
  %402 = getelementptr float, ptr addrspace(1) %0, i64 %349, !dbg !72
  %403 = getelementptr float, ptr addrspace(1) %0, i64 %390, !dbg !72
  %404 = sext i32 %347 to i64, !dbg !72
  %405 = getelementptr float, ptr addrspace(1) %0, i64 %404, !dbg !72
  %406 = sext i32 %348 to i64, !dbg !72
  %407 = getelementptr float, ptr addrspace(1) %0, i64 %406, !dbg !72
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %402, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351) #3, !dbg !73
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !73
  %410 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !73
  %411 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !73
  %412 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !73
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %403, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351) #3, !dbg !73
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !73
  %415 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !73
  %416 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !73
  %417 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !73
  %418 = getelementptr i16, ptr addrspace(1) %1, i64 %349, !dbg !74
  %419 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %418, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351) #3, !dbg !75
  %420 = extractvalue { i32, i32, i32, i32 } %419, 0, !dbg !75
  %421 = extractvalue { i32, i32, i32, i32 } %419, 1, !dbg !75
  %422 = extractvalue { i32, i32, i32, i32 } %419, 2, !dbg !75
  %423 = extractvalue { i32, i32, i32, i32 } %419, 3, !dbg !75
  %424 = trunc i32 %420 to i16, !dbg !75
  %extelt.offset10 = lshr i32 %420, 16, !dbg !75
  %425 = trunc i32 %extelt.offset10 to i16, !dbg !75
  %426 = trunc i32 %421 to i16, !dbg !75
  %extelt.offset11 = lshr i32 %421, 16, !dbg !75
  %427 = trunc i32 %extelt.offset11 to i16, !dbg !75
  %428 = trunc i32 %422 to i16, !dbg !75
  %extelt.offset12 = lshr i32 %422, 16, !dbg !75
  %429 = trunc i32 %extelt.offset12 to i16, !dbg !75
  %430 = trunc i32 %423 to i16, !dbg !75
  %extelt.offset13 = lshr i32 %423, 16, !dbg !75
  %431 = trunc i32 %extelt.offset13 to i16, !dbg !75
  %432 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #3, !dbg !76
  %433 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #3, !dbg !76
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #3, !dbg !76
  %435 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %427) #3, !dbg !76
  %436 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %428) #3, !dbg !76
  %437 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %429) #3, !dbg !76
  %438 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #3, !dbg !76
  %439 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #3, !dbg !76
  %440 = getelementptr i16, ptr addrspace(1) %2, i64 %349, !dbg !77
  %441 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %440, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351, i32 0, i1 %351) #3, !dbg !78
  %442 = extractvalue { i32, i32, i32, i32 } %441, 0, !dbg !78
  %443 = extractvalue { i32, i32, i32, i32 } %441, 1, !dbg !78
  %444 = extractvalue { i32, i32, i32, i32 } %441, 2, !dbg !78
  %445 = extractvalue { i32, i32, i32, i32 } %441, 3, !dbg !78
  %446 = trunc i32 %442 to i16, !dbg !78
  %extelt.offset14 = lshr i32 %442, 16, !dbg !78
  %447 = trunc i32 %extelt.offset14 to i16, !dbg !78
  %448 = trunc i32 %443 to i16, !dbg !78
  %extelt.offset15 = lshr i32 %443, 16, !dbg !78
  %449 = trunc i32 %extelt.offset15 to i16, !dbg !78
  %450 = trunc i32 %444 to i16, !dbg !78
  %extelt.offset16 = lshr i32 %444, 16, !dbg !78
  %451 = trunc i32 %extelt.offset16 to i16, !dbg !78
  %452 = trunc i32 %445 to i16, !dbg !78
  %extelt.offset17 = lshr i32 %445, 16, !dbg !78
  %453 = trunc i32 %extelt.offset17 to i16, !dbg !78
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #3, !dbg !79
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #3, !dbg !79
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #3, !dbg !79
  %457 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #3, !dbg !79
  %458 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #3, !dbg !79
  %459 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #3, !dbg !79
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #3, !dbg !79
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #3, !dbg !79
  %462 = getelementptr float, ptr addrspace(1) %3, i64 %375, !dbg !80
  %463 = getelementptr float, ptr addrspace(1) %3, i64 %377, !dbg !80
  %464 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %462, i1 %342, i32 0, i1 %342, i32 0, i1 %342, i32 0, i1 %342, i32 0, i1 %342) #3, !dbg !81
  %465 = extractvalue { i32, i32, i32, i32 } %464, 0, !dbg !81
  %466 = extractvalue { i32, i32, i32, i32 } %464, 1, !dbg !81
  %467 = extractvalue { i32, i32, i32, i32 } %464, 2, !dbg !81
  %468 = extractvalue { i32, i32, i32, i32 } %464, 3, !dbg !81
  %469 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %463, i1 %342, i32 0, i1 %342, i32 0, i1 %342, i32 0, i1 %342, i32 0, i1 %342) #3, !dbg !81
  %470 = extractvalue { i32, i32, i32, i32 } %469, 0, !dbg !81
  %471 = extractvalue { i32, i32, i32, i32 } %469, 1, !dbg !81
  %472 = extractvalue { i32, i32, i32, i32 } %469, 2, !dbg !81
  %473 = extractvalue { i32, i32, i32, i32 } %469, 3, !dbg !81
  %474 = insertelement <8 x i32> poison, i32 %380, i64 0, !dbg !69
  %475 = insertelement <8 x i32> %474, i32 %381, i64 1, !dbg !69
  %476 = insertelement <8 x i32> %475, i32 %382, i64 2, !dbg !69
  %477 = insertelement <8 x i32> %476, i32 %383, i64 3, !dbg !69
  %478 = insertelement <8 x i32> %477, i32 %385, i64 4, !dbg !69
  %479 = insertelement <8 x i32> %478, i32 %386, i64 5, !dbg !69
  %480 = insertelement <8 x i32> %479, i32 %387, i64 6, !dbg !69
  %481 = insertelement <8 x i32> %480, i32 %388, i64 7, !dbg !69
  %482 = bitcast <8 x i32> %481 to <8 x float>, !dbg !69
  %483 = insertelement <8 x i32> poison, i32 %393, i64 0, !dbg !71
  %484 = insertelement <8 x i32> %483, i32 %394, i64 1, !dbg !71
  %485 = insertelement <8 x i32> %484, i32 %395, i64 2, !dbg !71
  %486 = insertelement <8 x i32> %485, i32 %396, i64 3, !dbg !71
  %487 = insertelement <8 x i32> %486, i32 %398, i64 4, !dbg !71
  %488 = insertelement <8 x i32> %487, i32 %399, i64 5, !dbg !71
  %489 = insertelement <8 x i32> %488, i32 %400, i64 6, !dbg !71
  %490 = insertelement <8 x i32> %489, i32 %401, i64 7, !dbg !71
  %491 = bitcast <8 x i32> %490 to <8 x float>, !dbg !71
  %492 = insertelement <8 x i32> poison, i32 %409, i64 0, !dbg !73
  %493 = insertelement <8 x i32> %492, i32 %410, i64 1, !dbg !73
  %494 = insertelement <8 x i32> %493, i32 %411, i64 2, !dbg !73
  %495 = insertelement <8 x i32> %494, i32 %412, i64 3, !dbg !73
  %496 = insertelement <8 x i32> %495, i32 %414, i64 4, !dbg !73
  %497 = insertelement <8 x i32> %496, i32 %415, i64 5, !dbg !73
  %498 = insertelement <8 x i32> %497, i32 %416, i64 6, !dbg !73
  %499 = insertelement <8 x i32> %498, i32 %417, i64 7, !dbg !73
  %500 = bitcast <8 x i32> %499 to <8 x float>, !dbg !73
  %501 = insertelement <8 x i32> poison, i32 %465, i64 0, !dbg !81
  %502 = insertelement <8 x i32> %501, i32 %466, i64 1, !dbg !81
  %503 = insertelement <8 x i32> %502, i32 %467, i64 2, !dbg !81
  %504 = insertelement <8 x i32> %503, i32 %468, i64 3, !dbg !81
  %505 = insertelement <8 x i32> %504, i32 %470, i64 4, !dbg !81
  %506 = insertelement <8 x i32> %505, i32 %471, i64 5, !dbg !81
  %507 = insertelement <8 x i32> %506, i32 %472, i64 6, !dbg !81
  %508 = insertelement <8 x i32> %507, i32 %473, i64 7, !dbg !81
  %509 = bitcast <8 x i32> %508 to <8 x float>, !dbg !81
  %510 = insertelement <8 x float> poison, float %367, i64 0, !dbg !82
  %511 = insertelement <8 x float> %510, float %368, i64 1, !dbg !82
  %512 = insertelement <8 x float> %511, float %369, i64 2, !dbg !82
  %513 = insertelement <8 x float> %512, float %370, i64 3, !dbg !82
  %514 = insertelement <8 x float> %513, float %371, i64 4, !dbg !82
  %515 = insertelement <8 x float> %514, float %372, i64 5, !dbg !82
  %516 = insertelement <8 x float> %515, float %373, i64 6, !dbg !82
  %517 = insertelement <8 x float> %516, float %374, i64 7, !dbg !82
  %518 = fmul <8 x float> %517, %33, !dbg !82
  %519 = fadd <8 x float> %482, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !83
  %520 = fmul <8 x float> %518, %519, !dbg !84
  %521 = fadd <8 x float> %520, %491, !dbg !85
  %522 = fmul <8 x float> %331, %521, !dbg !58
  %523 = insertelement <8 x float> poison, float %432, i64 0, !dbg !86
  %524 = insertelement <8 x float> %523, float %433, i64 1, !dbg !86
  %525 = insertelement <8 x float> %524, float %434, i64 2, !dbg !86
  %526 = insertelement <8 x float> %525, float %435, i64 3, !dbg !86
  %527 = insertelement <8 x float> %526, float %436, i64 4, !dbg !86
  %528 = insertelement <8 x float> %527, float %437, i64 5, !dbg !86
  %529 = insertelement <8 x float> %528, float %438, i64 6, !dbg !86
  %530 = insertelement <8 x float> %529, float %439, i64 7, !dbg !86
  %531 = insertelement <8 x float> poison, float %454, i64 0, !dbg !86
  %532 = insertelement <8 x float> %531, float %455, i64 1, !dbg !86
  %533 = insertelement <8 x float> %532, float %456, i64 2, !dbg !86
  %534 = insertelement <8 x float> %533, float %457, i64 3, !dbg !86
  %535 = insertelement <8 x float> %534, float %458, i64 4, !dbg !86
  %536 = insertelement <8 x float> %535, float %459, i64 5, !dbg !86
  %537 = insertelement <8 x float> %536, float %460, i64 6, !dbg !86
  %538 = insertelement <8 x float> %537, float %461, i64 7, !dbg !86
  %539 = fadd <8 x float> %530, %538, !dbg !86
  %540 = fadd <8 x float> %509, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !87
  %541 = fmul <8 x float> %539, %540, !dbg !88
  %542 = fmul <8 x float> %541, %333, !dbg !59
  %543 = fadd <8 x float> %542, %500, !dbg !89
  %544 = fadd <8 x float> %522, %543, !dbg !90
  %545 = fadd <8 x float> %522, %544, !dbg !91
  %546 = fmul <8 x float> %519, %545, !dbg !92
  %547 = fmul <8 x float> %517, %546, !dbg !93
  %548 = insertelement <8 x i1> poison, i1 %351, i64 0, !dbg !94
  %549 = shufflevector <8 x i1> %548, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !94
  %550 = select <8 x i1> %549, <8 x float> %547, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !94
  %551 = fadd <8 x float> %337, %550, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  store <8 x float> %545, ptr addrspace(3) %322, align 32, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %552 = load <4 x i32>, ptr addrspace(3) %326, align 16, !dbg !95
  %.extract = load i32, ptr addrspace(3) %324, align 16, !dbg !95
  %.extract19 = load i32, ptr addrspace(3) %327, align 4, !dbg !95
  %.extract21 = load i32, ptr addrspace(3) %328, align 8, !dbg !95
  %.extract23 = load i32, ptr addrspace(3) %329, align 4, !dbg !95
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract21, i32 %.extract23, ptr addrspace(1) %405, i1 %352) #3, !dbg !95
  %.extract25 = extractelement <4 x i32> %552, i64 0, !dbg !95
  %.extract27 = extractelement <4 x i32> %552, i64 1, !dbg !95
  %.extract29 = extractelement <4 x i32> %552, i64 2, !dbg !95
  %.extract31 = extractelement <4 x i32> %552, i64 3, !dbg !95
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract27, i32 %.extract29, i32 %.extract31, ptr addrspace(1) %407, i1 %353) #3, !dbg !95
  br i1 %335, label %334, label %553, !dbg !60

553:                                              ; preds = %334
  %554 = bitcast i32 %24 to float, !dbg !12
  %555 = bitcast i32 %26 to float, !dbg !12
  %556 = bitcast i32 %28 to float, !dbg !12
  %557 = bitcast i32 %30 to float, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %shift96 = shufflevector <8 x float> %551, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !98
  %558 = fadd <8 x float> %551, %shift96, !dbg !98
  %shift97 = shufflevector <8 x float> %551, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !98
  %559 = fadd <8 x float> %shift97, %558, !dbg !98
  %shift98 = shufflevector <8 x float> %551, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !98
  %560 = fadd <8 x float> %shift98, %559, !dbg !98
  %shift99 = shufflevector <8 x float> %551, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !98
  %561 = fadd <8 x float> %shift99, %560, !dbg !98
  %shift100 = shufflevector <8 x float> %551, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !98
  %562 = fadd <8 x float> %shift100, %561, !dbg !98
  %shift101 = shufflevector <8 x float> %551, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !98
  %563 = fadd <8 x float> %shift101, %562, !dbg !98
  %shift102 = shufflevector <8 x float> %551, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !98
  %564 = fadd <8 x float> %shift102, %563, !dbg !98
  %565 = extractelement <8 x float> %564, i64 0, !dbg !98
  %566 = bitcast float %565 to i32, !dbg !96
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 16, i32 31), !dbg !96
  %568 = bitcast i32 %567 to float, !dbg !96
  %569 = fadd float %565, %568, !dbg !98
  %570 = bitcast float %569 to i32, !dbg !96
  %571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %570, i32 8, i32 31), !dbg !96
  %572 = bitcast i32 %571 to float, !dbg !96
  %573 = fadd float %569, %572, !dbg !98
  %574 = bitcast float %573 to i32, !dbg !96
  %575 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %574, i32 4, i32 31), !dbg !96
  %576 = bitcast i32 %575 to float, !dbg !96
  %577 = fadd float %573, %576, !dbg !98
  %578 = bitcast float %577 to i32, !dbg !96
  %579 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %578, i32 2, i32 31), !dbg !96
  %580 = bitcast i32 %579 to float, !dbg !96
  %581 = fadd float %577, %580, !dbg !98
  %582 = bitcast float %581 to i32, !dbg !96
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 1, i32 31), !dbg !96
  %584 = bitcast i32 %583 to float, !dbg !96
  %585 = fadd float %581, %584, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, float %585, i1 %248) #3, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %586 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %253, i1 %251) #3, !dbg !96
  %587 = bitcast float %586 to i32, !dbg !96
  %588 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 4, i32 31), !dbg !96
  %589 = bitcast i32 %588 to float, !dbg !96
  %590 = fadd float %586, %589, !dbg !98
  %591 = bitcast float %590 to i32, !dbg !96
  %592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %591, i32 2, i32 31), !dbg !96
  %593 = bitcast i32 %592 to float, !dbg !96
  %594 = fadd float %590, %593, !dbg !98
  %595 = bitcast float %594 to i32, !dbg !96
  %596 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %595, i32 1, i32 31), !dbg !96
  %597 = bitcast i32 %596 to float, !dbg !96
  %598 = fadd float %594, %597, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, float %598, i1 %269) #3, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %599 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !96
  %600 = fmul float %599, -5.000000e-01, !dbg !101
  %601 = fmul float %23, %23, !dbg !102
  %602 = fmul float %554, %554, !dbg !102
  %603 = fmul float %217, %217, !dbg !102
  %604 = fmul float %555, %555, !dbg !102
  %605 = fmul float %218, %218, !dbg !102
  %606 = fmul float %556, %556, !dbg !102
  %607 = fmul float %219, %219, !dbg !102
  %608 = fmul float %557, %557, !dbg !102
  %609 = fmul float %601, %23, !dbg !103
  %610 = fmul float %602, %554, !dbg !103
  %611 = fmul float %603, %217, !dbg !103
  %612 = fmul float %604, %555, !dbg !103
  %613 = fmul float %605, %218, !dbg !103
  %614 = fmul float %606, %556, !dbg !103
  %615 = fmul float %607, %219, !dbg !103
  %616 = fmul float %608, %557, !dbg !103
  %617 = fmul float %609, %600, !dbg !104
  %618 = fmul float %610, %600, !dbg !104
  %619 = fmul float %611, %600, !dbg !104
  %620 = fmul float %612, %600, !dbg !104
  %621 = fmul float %613, %600, !dbg !104
  %622 = fmul float %614, %600, !dbg !104
  %623 = fmul float %615, %600, !dbg !104
  %624 = fmul float %616, %600, !dbg !104
  %625 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %617, float 2.304000e+03) #3, !dbg !105
  %626 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %618, float 2.304000e+03) #3, !dbg !105
  %627 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %619, float 2.304000e+03) #3, !dbg !105
  %628 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %620, float 2.304000e+03) #3, !dbg !105
  %629 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %621, float 2.304000e+03) #3, !dbg !105
  %630 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %622, float 2.304000e+03) #3, !dbg !105
  %631 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %623, float 2.304000e+03) #3, !dbg !105
  %632 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %624, float 2.304000e+03) #3, !dbg !105
  br label %633, !dbg !106

633:                                              ; preds = %553, %633
  %634 = phi i1 [ true, %553 ], [ false, %633 ]
  %635 = phi i32 [ 0, %553 ], [ 2048, %633 ]
  %636 = or i32 %635, %15, !dbg !107
  %637 = or i32 %635, %16, !dbg !107
  %638 = icmp ult i32 %636, 2304, !dbg !108
  %639 = add i32 %636, %31, !dbg !109
  %640 = add i32 %637, %31, !dbg !109
  %641 = sext i32 %639 to i64, !dbg !110
  %642 = getelementptr float, ptr addrspace(1) %0, i64 %641, !dbg !110
  %643 = sext i32 %640 to i64, !dbg !110
  %644 = getelementptr float, ptr addrspace(1) %0, i64 %643, !dbg !110
  %645 = and i1 %19, %638, !dbg !111
  %646 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %642, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645) #3, !dbg !112
  %647 = extractvalue { i32, i32, i32, i32 } %646, 0, !dbg !112
  %648 = extractvalue { i32, i32, i32, i32 } %646, 1, !dbg !112
  %649 = extractvalue { i32, i32, i32, i32 } %646, 2, !dbg !112
  %650 = extractvalue { i32, i32, i32, i32 } %646, 3, !dbg !112
  %651 = bitcast i32 %647 to float, !dbg !112
  %652 = bitcast i32 %648 to float, !dbg !112
  %653 = bitcast i32 %649 to float, !dbg !112
  %654 = bitcast i32 %650 to float, !dbg !112
  %655 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %644, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645) #3, !dbg !112
  %656 = extractvalue { i32, i32, i32, i32 } %655, 0, !dbg !112
  %657 = extractvalue { i32, i32, i32, i32 } %655, 1, !dbg !112
  %658 = extractvalue { i32, i32, i32, i32 } %655, 2, !dbg !112
  %659 = extractvalue { i32, i32, i32, i32 } %655, 3, !dbg !112
  %660 = bitcast i32 %656 to float, !dbg !112
  %661 = bitcast i32 %657 to float, !dbg !112
  %662 = bitcast i32 %658 to float, !dbg !112
  %663 = bitcast i32 %659 to float, !dbg !112
  %664 = zext nneg i32 %636 to i64, !dbg !113
  %665 = getelementptr float, ptr addrspace(1) %6, i64 %664, !dbg !113
  %666 = zext nneg i32 %637 to i64, !dbg !113
  %667 = getelementptr float, ptr addrspace(1) %6, i64 %666, !dbg !113
  %668 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %665, i1 %638, i32 0, i1 %638, i32 0, i1 %638, i32 0, i1 %638, i32 0, i1 %638) #3, !dbg !114
  %669 = extractvalue { i32, i32, i32, i32 } %668, 0, !dbg !114
  %670 = extractvalue { i32, i32, i32, i32 } %668, 1, !dbg !114
  %671 = extractvalue { i32, i32, i32, i32 } %668, 2, !dbg !114
  %672 = extractvalue { i32, i32, i32, i32 } %668, 3, !dbg !114
  %673 = bitcast i32 %669 to float, !dbg !114
  %674 = bitcast i32 %670 to float, !dbg !114
  %675 = bitcast i32 %671 to float, !dbg !114
  %676 = bitcast i32 %672 to float, !dbg !114
  %677 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %667, i1 %638, i32 0, i1 %638, i32 0, i1 %638, i32 0, i1 %638, i32 0, i1 %638) #3, !dbg !114
  %678 = extractvalue { i32, i32, i32, i32 } %677, 0, !dbg !114
  %679 = extractvalue { i32, i32, i32, i32 } %677, 1, !dbg !114
  %680 = extractvalue { i32, i32, i32, i32 } %677, 2, !dbg !114
  %681 = extractvalue { i32, i32, i32, i32 } %677, 3, !dbg !114
  %682 = bitcast i32 %678 to float, !dbg !114
  %683 = bitcast i32 %679 to float, !dbg !114
  %684 = bitcast i32 %680 to float, !dbg !114
  %685 = bitcast i32 %681 to float, !dbg !114
  %686 = getelementptr i16, ptr addrspace(1) %4, i64 %641, !dbg !115
  %687 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %686, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645) #3, !dbg !116
  %688 = extractvalue { i32, i32, i32, i32 } %687, 0, !dbg !116
  %689 = extractvalue { i32, i32, i32, i32 } %687, 1, !dbg !116
  %690 = extractvalue { i32, i32, i32, i32 } %687, 2, !dbg !116
  %691 = extractvalue { i32, i32, i32, i32 } %687, 3, !dbg !116
  %692 = trunc i32 %688 to i16, !dbg !116
  %extelt.offset = lshr i32 %688, 16, !dbg !116
  %693 = trunc i32 %extelt.offset to i16, !dbg !116
  %694 = trunc i32 %689 to i16, !dbg !116
  %extelt.offset3 = lshr i32 %689, 16, !dbg !116
  %695 = trunc i32 %extelt.offset3 to i16, !dbg !116
  %696 = trunc i32 %690 to i16, !dbg !116
  %extelt.offset4 = lshr i32 %690, 16, !dbg !116
  %697 = trunc i32 %extelt.offset4 to i16, !dbg !116
  %698 = trunc i32 %691 to i16, !dbg !116
  %extelt.offset5 = lshr i32 %691, 16, !dbg !116
  %699 = trunc i32 %extelt.offset5 to i16, !dbg !116
  %700 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %692) #3, !dbg !117
  %701 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %693) #3, !dbg !117
  %702 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %694) #3, !dbg !117
  %703 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %695) #3, !dbg !117
  %704 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %696) #3, !dbg !117
  %705 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %697) #3, !dbg !117
  %706 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %698) #3, !dbg !117
  %707 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %699) #3, !dbg !117
  %708 = fadd float %673, 1.000000e+00, !dbg !118
  %709 = fadd float %674, 1.000000e+00, !dbg !118
  %710 = fadd float %675, 1.000000e+00, !dbg !118
  %711 = fadd float %676, 1.000000e+00, !dbg !118
  %712 = fadd float %682, 1.000000e+00, !dbg !118
  %713 = fadd float %683, 1.000000e+00, !dbg !118
  %714 = fadd float %684, 1.000000e+00, !dbg !118
  %715 = fadd float %685, 1.000000e+00, !dbg !118
  %716 = fmul float %708, %651, !dbg !119
  %717 = fmul float %709, %652, !dbg !119
  %718 = fmul float %710, %653, !dbg !119
  %719 = fmul float %711, %654, !dbg !119
  %720 = fmul float %712, %660, !dbg !119
  %721 = fmul float %713, %661, !dbg !119
  %722 = fmul float %714, %662, !dbg !119
  %723 = fmul float %715, %663, !dbg !119
  %724 = fmul float %716, %23, !dbg !120
  %725 = fmul float %717, %23, !dbg !120
  %726 = fmul float %718, %23, !dbg !120
  %727 = fmul float %719, %23, !dbg !120
  %728 = fmul float %720, %23, !dbg !120
  %729 = fmul float %721, %23, !dbg !120
  %730 = fmul float %722, %23, !dbg !120
  %731 = fmul float %723, %23, !dbg !120
  %732 = fmul float %625, %700, !dbg !121
  %733 = fmul float %625, %701, !dbg !121
  %734 = fmul float %625, %702, !dbg !121
  %735 = fmul float %625, %703, !dbg !121
  %736 = fmul float %625, %704, !dbg !121
  %737 = fmul float %625, %705, !dbg !121
  %738 = fmul float %625, %706, !dbg !121
  %739 = fmul float %625, %707, !dbg !121
  %740 = fadd float %732, %724, !dbg !122
  %741 = fadd float %725, %733, !dbg !122
  %742 = fadd float %726, %734, !dbg !122
  %743 = fadd float %727, %735, !dbg !122
  %744 = fadd float %728, %736, !dbg !122
  %745 = fadd float %729, %737, !dbg !122
  %746 = fadd float %730, %738, !dbg !122
  %747 = fadd float %731, %739, !dbg !122
  %748 = fadd float %732, %740, !dbg !123
  %749 = fadd float %733, %741, !dbg !123
  %750 = fadd float %734, %742, !dbg !123
  %751 = fadd float %735, %743, !dbg !123
  %752 = fadd float %736, %744, !dbg !123
  %753 = fadd float %737, %745, !dbg !123
  %754 = fadd float %738, %746, !dbg !123
  %755 = fadd float %739, %747, !dbg !123
  %756 = getelementptr i16, ptr addrspace(1) %9, i64 %641, !dbg !124
  %757 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %748) #3, !dbg !125
  %758 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %749) #3, !dbg !125
  %759 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %750) #3, !dbg !125
  %760 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %751) #3, !dbg !125
  %761 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %752) #3, !dbg !125
  %762 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %753) #3, !dbg !125
  %763 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %754) #3, !dbg !125
  %764 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %755) #3, !dbg !125
  %765 = insertelement <2 x i16> undef, i16 %757, i64 0, !dbg !125
  %766 = insertelement <2 x i16> %765, i16 %758, i64 1, !dbg !125
  %767 = bitcast <2 x i16> %766 to i32, !dbg !125
  %768 = insertelement <2 x i16> undef, i16 %759, i64 0, !dbg !125
  %769 = insertelement <2 x i16> %768, i16 %760, i64 1, !dbg !125
  %770 = bitcast <2 x i16> %769 to i32, !dbg !125
  %771 = insertelement <2 x i16> undef, i16 %761, i64 0, !dbg !125
  %772 = insertelement <2 x i16> %771, i16 %762, i64 1, !dbg !125
  %773 = bitcast <2 x i16> %772 to i32, !dbg !125
  %774 = insertelement <2 x i16> undef, i16 %763, i64 0, !dbg !125
  %775 = insertelement <2 x i16> %774, i16 %764, i64 1, !dbg !125
  %776 = bitcast <2 x i16> %775 to i32, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %767, i32 %770, i32 %773, i32 %776, ptr addrspace(1) %756, i1 %645) #3, !dbg !125
  br i1 %634, label %633, label %777, !dbg !106

777:                                              ; preds = %633
  ret void, !dbg !126
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cyto6ueidlxp6wqb5qow2rfxoxskwsthu5456pn7cay2qjg5tr7z.py", directory: "/tmp/torchinductor_zeus/yt")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d1011de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d1011de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d1011de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d1011de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 26, column: 31, scope: !5)
!12 = !DILocation(line: 26, column: 36, scope: !5)
!13 = !DILocation(line: 32, column: 45, scope: !5)
!14 = !DILocation(line: 45, column: 24, scope: !5)
!15 = !DILocation(line: 28, column: 36, scope: !5)
!16 = !DILocation(line: 29, column: 27, scope: !5)
!17 = !DILocation(line: 30, column: 25, scope: !5)
!18 = !DILocation(line: 32, column: 40, scope: !5)
!19 = !DILocation(line: 32, column: 34, scope: !5)
!20 = !DILocation(line: 32, column: 59, scope: !5)
!21 = !DILocation(line: 32, column: 51, scope: !5)
!22 = !DILocation(line: 32, column: 110, scope: !5)
!23 = !DILocation(line: 33, column: 34, scope: !5)
!24 = !DILocation(line: 33, column: 51, scope: !5)
!25 = !DILocation(line: 33, column: 110, scope: !5)
!26 = !DILocation(line: 34, column: 34, scope: !5)
!27 = !DILocation(line: 34, column: 39, scope: !5)
!28 = !DILocation(line: 35, column: 34, scope: !5)
!29 = !DILocation(line: 35, column: 51, scope: !5)
!30 = !DILocation(line: 35, column: 110, scope: !5)
!31 = !DILocation(line: 36, column: 35, scope: !5)
!32 = !DILocation(line: 36, column: 40, scope: !5)
!33 = !DILocation(line: 37, column: 35, scope: !5)
!34 = !DILocation(line: 37, column: 52, scope: !5)
!35 = !DILocation(line: 40, column: 22, scope: !5)
!36 = !DILocation(line: 42, column: 22, scope: !5)
!37 = !DILocation(line: 43, column: 22, scope: !5)
!38 = !DILocation(line: 46, column: 24, scope: !5)
!39 = !DILocation(line: 47, column: 24, scope: !5)
!40 = !DILocation(line: 50, column: 24, scope: !5)
!41 = !DILocation(line: 51, column: 23, scope: !5)
!42 = !DILocation(line: 54, column: 48, scope: !5)
!43 = !DILocation(line: 233, column: 15, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!46 = distinct !DILexicalBlockFile(scope: !5, file: !45, discriminator: 0)
!47 = !DILocation(line: 243, column: 36, scope: !44, inlinedAt: !48)
!48 = !DILocation(line: 55, column: 27, scope: !44)
!49 = !DILocation(line: 243, column: 36, scope: !46, inlinedAt: !50)
!50 = !DILocation(line: 55, column: 27, scope: !46)
!51 = !DILocation(line: 56, column: 31, scope: !5)
!52 = !DILocation(line: 56, column: 36, scope: !5)
!53 = !DILocation(line: 70, column: 24, scope: !5)
!54 = !DILocation(line: 71, column: 24, scope: !5)
!55 = !DILocation(line: 72, column: 24, scope: !5)
!56 = !DILocation(line: 73, column: 24, scope: !5)
!57 = !DILocation(line: 75, column: 24, scope: !5)
!58 = !DILocation(line: 84, column: 24, scope: !5)
!59 = !DILocation(line: 90, column: 24, scope: !5)
!60 = !DILocation(line: 58, column: 36, scope: !5)
!61 = !DILocation(line: 59, column: 27, scope: !5)
!62 = !DILocation(line: 60, column: 25, scope: !5)
!63 = !DILocation(line: 62, column: 41, scope: !5)
!64 = !DILocation(line: 62, column: 35, scope: !5)
!65 = !DILocation(line: 62, column: 60, scope: !5)
!66 = !DILocation(line: 62, column: 52, scope: !5)
!67 = !DILocation(line: 62, column: 111, scope: !5)
!68 = !DILocation(line: 63, column: 35, scope: !5)
!69 = !DILocation(line: 63, column: 40, scope: !5)
!70 = !DILocation(line: 64, column: 35, scope: !5)
!71 = !DILocation(line: 64, column: 52, scope: !5)
!72 = !DILocation(line: 65, column: 39, scope: !5)
!73 = !DILocation(line: 65, column: 56, scope: !5)
!74 = !DILocation(line: 66, column: 35, scope: !5)
!75 = !DILocation(line: 66, column: 52, scope: !5)
!76 = !DILocation(line: 66, column: 112, scope: !5)
!77 = !DILocation(line: 67, column: 35, scope: !5)
!78 = !DILocation(line: 67, column: 52, scope: !5)
!79 = !DILocation(line: 67, column: 112, scope: !5)
!80 = !DILocation(line: 68, column: 35, scope: !5)
!81 = !DILocation(line: 68, column: 40, scope: !5)
!82 = !DILocation(line: 77, column: 24, scope: !5)
!83 = !DILocation(line: 79, column: 24, scope: !5)
!84 = !DILocation(line: 80, column: 24, scope: !5)
!85 = !DILocation(line: 83, column: 24, scope: !5)
!86 = !DILocation(line: 87, column: 24, scope: !5)
!87 = !DILocation(line: 88, column: 24, scope: !5)
!88 = !DILocation(line: 89, column: 24, scope: !5)
!89 = !DILocation(line: 91, column: 24, scope: !5)
!90 = !DILocation(line: 92, column: 24, scope: !5)
!91 = !DILocation(line: 93, column: 24, scope: !5)
!92 = !DILocation(line: 94, column: 24, scope: !5)
!93 = !DILocation(line: 95, column: 24, scope: !5)
!94 = !DILocation(line: 98, column: 48, scope: !5)
!95 = !DILocation(line: 99, column: 56, scope: !5)
!96 = !DILocation(line: 243, column: 36, scope: !46, inlinedAt: !97)
!97 = !DILocation(line: 100, column: 27, scope: !46)
!98 = !DILocation(line: 233, column: 15, scope: !44, inlinedAt: !99)
!99 = !DILocation(line: 243, column: 36, scope: !44, inlinedAt: !100)
!100 = !DILocation(line: 100, column: 27, scope: !44)
!101 = !DILocation(line: 113, column: 24, scope: !5)
!102 = !DILocation(line: 114, column: 24, scope: !5)
!103 = !DILocation(line: 115, column: 24, scope: !5)
!104 = !DILocation(line: 116, column: 24, scope: !5)
!105 = !DILocation(line: 118, column: 24, scope: !5)
!106 = !DILocation(line: 101, column: 36, scope: !5)
!107 = !DILocation(line: 102, column: 27, scope: !5)
!108 = !DILocation(line: 103, column: 25, scope: !5)
!109 = !DILocation(line: 105, column: 45, scope: !5)
!110 = !DILocation(line: 105, column: 39, scope: !5)
!111 = !DILocation(line: 105, column: 64, scope: !5)
!112 = !DILocation(line: 105, column: 56, scope: !5)
!113 = !DILocation(line: 106, column: 35, scope: !5)
!114 = !DILocation(line: 106, column: 40, scope: !5)
!115 = !DILocation(line: 107, column: 35, scope: !5)
!116 = !DILocation(line: 107, column: 52, scope: !5)
!117 = !DILocation(line: 107, column: 112, scope: !5)
!118 = !DILocation(line: 109, column: 24, scope: !5)
!119 = !DILocation(line: 110, column: 24, scope: !5)
!120 = !DILocation(line: 111, column: 24, scope: !5)
!121 = !DILocation(line: 120, column: 24, scope: !5)
!122 = !DILocation(line: 121, column: 24, scope: !5)
!123 = !DILocation(line: 122, column: 24, scope: !5)
!124 = !DILocation(line: 124, column: 29, scope: !5)
!125 = !DILocation(line: 124, column: 53, scope: !5)
!126 = !DILocation(line: 101, column: 4, scope: !5)
