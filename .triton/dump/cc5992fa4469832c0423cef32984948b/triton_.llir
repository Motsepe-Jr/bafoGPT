; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i64 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = shl i32 %7, 3, !dbg !8
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %10 = sext i32 %9 to i64, !dbg !10
  %11 = shl nsw i64 %10, 10, !dbg !11
  %12 = and i32 %8, 1016, !dbg !8
  %13 = or i32 %12, 1, !dbg !8
  %14 = or i32 %12, 2, !dbg !8
  %15 = or i32 %12, 3, !dbg !8
  %16 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !8
  %17 = shufflevector <4 x i32> %16, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !8
  %18 = or <4 x i32> %17, <i32 7, i32 6, i32 5, i32 4>, !dbg !8
  %19 = shufflevector <4 x i32> %18, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %20 = insertelement <8 x i32> %19, i32 %15, i64 4
  %21 = insertelement <8 x i32> %20, i32 %14, i64 5
  %22 = insertelement <8 x i32> %21, i32 %13, i64 6
  %23 = insertelement <8 x i32> %22, i32 %12, i64 7
  %24 = zext <8 x i32> %23 to <8 x i64>
  %25 = insertelement <8 x i64> poison, i64 %11, i64 0, !dbg !12
  %26 = shufflevector <8 x i64> %25, <8 x i64> poison, <8 x i32> zeroinitializer, !dbg !12
  %27 = or <8 x i64> %26, %24, !dbg !12
  %28 = srem <8 x i64> %27, <i64 256, i64 256, i64 256, i64 256, i64 256, i64 256, i64 256, i64 256>, !dbg !13
  %29 = extractelement <8 x i64> %27, i64 7, !dbg !14
  %30 = sdiv i64 %29, 256, !dbg !14
  %31 = srem i64 %30, 8192, !dbg !15
  %.frozen = freeze i64 %29
  %32 = sdiv i64 %.frozen, 2097152, !dbg !16
  %33 = srem i64 %32, 16, !dbg !17
  %34 = sdiv i64 %29, 33554432, !dbg !18
  %35 = mul i64 %32, 2097152
  %.decomposed = sub i64 %.frozen, %35
  %36 = extractelement <8 x i64> %27, i64 6, !dbg !19
  %37 = srem i64 %36, 2097152, !dbg !19
  %38 = extractelement <8 x i64> %27, i64 5, !dbg !19
  %39 = srem i64 %38, 2097152, !dbg !19
  %40 = extractelement <8 x i64> %27, i64 4, !dbg !19
  %41 = srem i64 %40, 2097152, !dbg !19
  %42 = extractelement <8 x i64> %27, i64 3, !dbg !19
  %43 = srem i64 %42, 2097152, !dbg !19
  %44 = extractelement <8 x i64> %27, i64 2, !dbg !19
  %45 = srem i64 %44, 2097152, !dbg !19
  %46 = extractelement <8 x i64> %27, i64 1, !dbg !19
  %47 = srem i64 %46, 2097152, !dbg !19
  %48 = extractelement <8 x i64> %27, i64 0, !dbg !19
  %49 = srem i64 %48, 2097152, !dbg !19
  %.lhs.trunc = trunc i64 %33 to i8, !dbg !20
  %50 = sdiv i8 %.lhs.trunc, 2, !dbg !21
  %51 = mul i8 %50, 2
  %.decomposed3 = sub i8 %.lhs.trunc, %51
  %.sext = sext i8 %.decomposed3 to i64, !dbg !20
  %52 = shl nsw i64 %.sext, 8, !dbg !22
  %.sext2 = sext i8 %50 to i64, !dbg !21
  %53 = shl nsw i64 %.sext2, 10, !dbg !23
  %54 = shl nsw i64 %31, 13, !dbg !24
  %55 = shl nsw i64 %34, 26, !dbg !25
  %56 = extractelement <8 x i64> %28, i64 7, !dbg !26
  %57 = getelementptr i16, ptr addrspace(1) %0, i64 %56, !dbg !27
  %58 = getelementptr i16, ptr addrspace(1) %57, i64 %52, !dbg !27
  %59 = getelementptr i16, ptr addrspace(1) %58, i64 %53, !dbg !27
  %60 = getelementptr i16, ptr addrspace(1) %59, i64 %54, !dbg !27
  %61 = getelementptr i16, ptr addrspace(1) %60, i64 %55, !dbg !27
  %62 = extractelement <8 x i64> %28, i64 6, !dbg !26
  %63 = getelementptr i16, ptr addrspace(1) %0, i64 %62, !dbg !27
  %64 = getelementptr i16, ptr addrspace(1) %63, i64 %52, !dbg !27
  %65 = getelementptr i16, ptr addrspace(1) %64, i64 %53, !dbg !27
  %66 = getelementptr i16, ptr addrspace(1) %65, i64 %54, !dbg !27
  %67 = getelementptr i16, ptr addrspace(1) %66, i64 %55, !dbg !27
  %68 = extractelement <8 x i64> %28, i64 5, !dbg !26
  %69 = getelementptr i16, ptr addrspace(1) %0, i64 %68, !dbg !27
  %70 = getelementptr i16, ptr addrspace(1) %69, i64 %52, !dbg !27
  %71 = getelementptr i16, ptr addrspace(1) %70, i64 %53, !dbg !27
  %72 = getelementptr i16, ptr addrspace(1) %71, i64 %54, !dbg !27
  %73 = getelementptr i16, ptr addrspace(1) %72, i64 %55, !dbg !27
  %74 = extractelement <8 x i64> %28, i64 4, !dbg !26
  %75 = getelementptr i16, ptr addrspace(1) %0, i64 %74, !dbg !27
  %76 = getelementptr i16, ptr addrspace(1) %75, i64 %52, !dbg !27
  %77 = getelementptr i16, ptr addrspace(1) %76, i64 %53, !dbg !27
  %78 = getelementptr i16, ptr addrspace(1) %77, i64 %54, !dbg !27
  %79 = getelementptr i16, ptr addrspace(1) %78, i64 %55, !dbg !27
  %80 = extractelement <8 x i64> %28, i64 3, !dbg !26
  %81 = getelementptr i16, ptr addrspace(1) %0, i64 %80, !dbg !27
  %82 = getelementptr i16, ptr addrspace(1) %81, i64 %52, !dbg !27
  %83 = getelementptr i16, ptr addrspace(1) %82, i64 %53, !dbg !27
  %84 = getelementptr i16, ptr addrspace(1) %83, i64 %54, !dbg !27
  %85 = getelementptr i16, ptr addrspace(1) %84, i64 %55, !dbg !27
  %86 = extractelement <8 x i64> %28, i64 2, !dbg !26
  %87 = getelementptr i16, ptr addrspace(1) %0, i64 %86, !dbg !27
  %88 = getelementptr i16, ptr addrspace(1) %87, i64 %52, !dbg !27
  %89 = getelementptr i16, ptr addrspace(1) %88, i64 %53, !dbg !27
  %90 = getelementptr i16, ptr addrspace(1) %89, i64 %54, !dbg !27
  %91 = getelementptr i16, ptr addrspace(1) %90, i64 %55, !dbg !27
  %92 = extractelement <8 x i64> %28, i64 1, !dbg !26
  %93 = getelementptr i16, ptr addrspace(1) %0, i64 %92, !dbg !27
  %94 = getelementptr i16, ptr addrspace(1) %93, i64 %52, !dbg !27
  %95 = getelementptr i16, ptr addrspace(1) %94, i64 %53, !dbg !27
  %96 = getelementptr i16, ptr addrspace(1) %95, i64 %54, !dbg !27
  %97 = getelementptr i16, ptr addrspace(1) %96, i64 %55, !dbg !27
  %98 = extractelement <8 x i64> %28, i64 0, !dbg !26
  %99 = getelementptr i16, ptr addrspace(1) %0, i64 %98, !dbg !27
  %100 = getelementptr i16, ptr addrspace(1) %99, i64 %52, !dbg !27
  %101 = getelementptr i16, ptr addrspace(1) %100, i64 %53, !dbg !27
  %102 = getelementptr i16, ptr addrspace(1) %101, i64 %54, !dbg !27
  %103 = getelementptr i16, ptr addrspace(1) %102, i64 %55, !dbg !27
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %61, i1 true, i16 0, i1 true) #1, !dbg !28
  %105 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %67, i1 true, i16 0, i1 true) #1, !dbg !28
  %106 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %73, i1 true, i16 0, i1 true) #1, !dbg !28
  %107 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %79, i1 true, i16 0, i1 true) #1, !dbg !28
  %108 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %85, i1 true, i16 0, i1 true) #1, !dbg !28
  %109 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %91, i1 true, i16 0, i1 true) #1, !dbg !28
  %110 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %97, i1 true, i16 0, i1 true) #1, !dbg !28
  %111 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %103, i1 true, i16 0, i1 true) #1, !dbg !28
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #1, !dbg !29
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #1, !dbg !29
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #1, !dbg !29
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #1, !dbg !29
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #1, !dbg !29
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %109) #1, !dbg !29
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #1, !dbg !29
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %111) #1, !dbg !29
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %.decomposed, !dbg !30
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !30
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !30
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !30
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !30
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !30
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !30
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 true, i32 0, i1 true) #1, !dbg !31
  %129 = bitcast i32 %128 to float, !dbg !31
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 true, i32 0, i1 true) #1, !dbg !31
  %131 = bitcast i32 %130 to float, !dbg !31
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 true, i32 0, i1 true) #1, !dbg !31
  %133 = bitcast i32 %132 to float, !dbg !31
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 true, i32 0, i1 true) #1, !dbg !31
  %135 = bitcast i32 %134 to float, !dbg !31
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 true, i32 0, i1 true) #1, !dbg !31
  %137 = bitcast i32 %136 to float, !dbg !31
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 true, i32 0, i1 true) #1, !dbg !31
  %139 = bitcast i32 %138 to float, !dbg !31
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 true, i32 0, i1 true) #1, !dbg !31
  %141 = bitcast i32 %140 to float, !dbg !31
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 true, i32 0, i1 true) #1, !dbg !31
  %143 = bitcast i32 %142 to float, !dbg !31
  %144 = fmul float %112, %129, !dbg !32
  %145 = fmul float %113, %131, !dbg !32
  %146 = fmul float %114, %133, !dbg !32
  %147 = fmul float %115, %135, !dbg !32
  %148 = fmul float %116, %137, !dbg !32
  %149 = fmul float %117, %139, !dbg !32
  %150 = fmul float %118, %141, !dbg !32
  %151 = fmul float %119, %143, !dbg !32
  %152 = icmp slt <8 x i64> %28, <i64 128, i64 128, i64 128, i64 128, i64 128, i64 128, i64 128, i64 128>, !dbg !33
  %153 = getelementptr i16, ptr addrspace(1) %57, i64 128, !dbg !34
  %154 = getelementptr i16, ptr addrspace(1) %153, i64 %52, !dbg !34
  %155 = getelementptr i16, ptr addrspace(1) %154, i64 %53, !dbg !34
  %156 = getelementptr i16, ptr addrspace(1) %155, i64 %54, !dbg !34
  %157 = getelementptr i16, ptr addrspace(1) %156, i64 %55, !dbg !34
  %158 = getelementptr i16, ptr addrspace(1) %63, i64 128, !dbg !34
  %159 = getelementptr i16, ptr addrspace(1) %158, i64 %52, !dbg !34
  %160 = getelementptr i16, ptr addrspace(1) %159, i64 %53, !dbg !34
  %161 = getelementptr i16, ptr addrspace(1) %160, i64 %54, !dbg !34
  %162 = getelementptr i16, ptr addrspace(1) %161, i64 %55, !dbg !34
  %163 = getelementptr i16, ptr addrspace(1) %69, i64 128, !dbg !34
  %164 = getelementptr i16, ptr addrspace(1) %163, i64 %52, !dbg !34
  %165 = getelementptr i16, ptr addrspace(1) %164, i64 %53, !dbg !34
  %166 = getelementptr i16, ptr addrspace(1) %165, i64 %54, !dbg !34
  %167 = getelementptr i16, ptr addrspace(1) %166, i64 %55, !dbg !34
  %168 = getelementptr i16, ptr addrspace(1) %75, i64 128, !dbg !34
  %169 = getelementptr i16, ptr addrspace(1) %168, i64 %52, !dbg !34
  %170 = getelementptr i16, ptr addrspace(1) %169, i64 %53, !dbg !34
  %171 = getelementptr i16, ptr addrspace(1) %170, i64 %54, !dbg !34
  %172 = getelementptr i16, ptr addrspace(1) %171, i64 %55, !dbg !34
  %173 = getelementptr i16, ptr addrspace(1) %81, i64 128, !dbg !34
  %174 = getelementptr i16, ptr addrspace(1) %173, i64 %52, !dbg !34
  %175 = getelementptr i16, ptr addrspace(1) %174, i64 %53, !dbg !34
  %176 = getelementptr i16, ptr addrspace(1) %175, i64 %54, !dbg !34
  %177 = getelementptr i16, ptr addrspace(1) %176, i64 %55, !dbg !34
  %178 = getelementptr i16, ptr addrspace(1) %87, i64 128, !dbg !34
  %179 = getelementptr i16, ptr addrspace(1) %178, i64 %52, !dbg !34
  %180 = getelementptr i16, ptr addrspace(1) %179, i64 %53, !dbg !34
  %181 = getelementptr i16, ptr addrspace(1) %180, i64 %54, !dbg !34
  %182 = getelementptr i16, ptr addrspace(1) %181, i64 %55, !dbg !34
  %183 = getelementptr i16, ptr addrspace(1) %93, i64 128, !dbg !34
  %184 = getelementptr i16, ptr addrspace(1) %183, i64 %52, !dbg !34
  %185 = getelementptr i16, ptr addrspace(1) %184, i64 %53, !dbg !34
  %186 = getelementptr i16, ptr addrspace(1) %185, i64 %54, !dbg !34
  %187 = getelementptr i16, ptr addrspace(1) %186, i64 %55, !dbg !34
  %188 = getelementptr i16, ptr addrspace(1) %99, i64 128, !dbg !34
  %189 = getelementptr i16, ptr addrspace(1) %188, i64 %52, !dbg !34
  %190 = getelementptr i16, ptr addrspace(1) %189, i64 %53, !dbg !34
  %191 = getelementptr i16, ptr addrspace(1) %190, i64 %54, !dbg !34
  %192 = getelementptr i16, ptr addrspace(1) %191, i64 %55, !dbg !34
  %193 = extractelement <8 x i1> %152, i64 7, !dbg !35
  %194 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %157, i1 %193, i16 0, i1 %193) #1, !dbg !35
  %195 = extractelement <8 x i1> %152, i64 6, !dbg !35
  %196 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %162, i1 %195, i16 0, i1 %195) #1, !dbg !35
  %197 = extractelement <8 x i1> %152, i64 5, !dbg !35
  %198 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %167, i1 %197, i16 0, i1 %197) #1, !dbg !35
  %199 = extractelement <8 x i1> %152, i64 4, !dbg !35
  %200 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %172, i1 %199, i16 0, i1 %199) #1, !dbg !35
  %201 = extractelement <8 x i1> %152, i64 3, !dbg !35
  %202 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %177, i1 %201, i16 0, i1 %201) #1, !dbg !35
  %203 = extractelement <8 x i1> %152, i64 2, !dbg !35
  %204 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %182, i1 %203, i16 0, i1 %203) #1, !dbg !35
  %205 = extractelement <8 x i1> %152, i64 1, !dbg !35
  %206 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %187, i1 %205, i16 0, i1 %205) #1, !dbg !35
  %207 = extractelement <8 x i1> %152, i64 0, !dbg !35
  %208 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %192, i1 %207, i16 0, i1 %207) #1, !dbg !35
  %209 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %194) #1, !dbg !36
  %210 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %196) #1, !dbg !36
  %211 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %198) #1, !dbg !36
  %212 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %200) #1, !dbg !36
  %213 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %202) #1, !dbg !36
  %214 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %204) #1, !dbg !36
  %215 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #1, !dbg !36
  %216 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %208) #1, !dbg !36
  %217 = fsub float 0.000000e+00, %209, !dbg !37
  %218 = fsub float 0.000000e+00, %210, !dbg !37
  %219 = fsub float 0.000000e+00, %211, !dbg !37
  %220 = fsub float 0.000000e+00, %212, !dbg !37
  %221 = fsub float 0.000000e+00, %213, !dbg !37
  %222 = fsub float 0.000000e+00, %214, !dbg !37
  %223 = fsub float 0.000000e+00, %215, !dbg !37
  %224 = fsub float 0.000000e+00, %216, !dbg !37
  %225 = icmp sgt i64 %56, 127, !dbg !26
  %226 = icmp sgt i64 %62, 127, !dbg !26
  %227 = icmp sgt i64 %68, 127, !dbg !26
  %228 = icmp sgt i64 %74, 127, !dbg !26
  %229 = icmp sgt i64 %80, 127, !dbg !26
  %230 = icmp sgt i64 %86, 127, !dbg !26
  %231 = icmp sgt i64 %92, 127, !dbg !26
  %232 = icmp sgt i64 %98, 127, !dbg !26
  %233 = getelementptr i16, ptr addrspace(1) %57, i64 -128, !dbg !38
  %234 = getelementptr i16, ptr addrspace(1) %233, i64 %52, !dbg !38
  %235 = getelementptr i16, ptr addrspace(1) %234, i64 %53, !dbg !38
  %236 = getelementptr i16, ptr addrspace(1) %235, i64 %54, !dbg !38
  %237 = getelementptr i16, ptr addrspace(1) %236, i64 %55, !dbg !38
  %238 = getelementptr i16, ptr addrspace(1) %63, i64 -128, !dbg !38
  %239 = getelementptr i16, ptr addrspace(1) %238, i64 %52, !dbg !38
  %240 = getelementptr i16, ptr addrspace(1) %239, i64 %53, !dbg !38
  %241 = getelementptr i16, ptr addrspace(1) %240, i64 %54, !dbg !38
  %242 = getelementptr i16, ptr addrspace(1) %241, i64 %55, !dbg !38
  %243 = getelementptr i16, ptr addrspace(1) %69, i64 -128, !dbg !38
  %244 = getelementptr i16, ptr addrspace(1) %243, i64 %52, !dbg !38
  %245 = getelementptr i16, ptr addrspace(1) %244, i64 %53, !dbg !38
  %246 = getelementptr i16, ptr addrspace(1) %245, i64 %54, !dbg !38
  %247 = getelementptr i16, ptr addrspace(1) %246, i64 %55, !dbg !38
  %248 = getelementptr i16, ptr addrspace(1) %75, i64 -128, !dbg !38
  %249 = getelementptr i16, ptr addrspace(1) %248, i64 %52, !dbg !38
  %250 = getelementptr i16, ptr addrspace(1) %249, i64 %53, !dbg !38
  %251 = getelementptr i16, ptr addrspace(1) %250, i64 %54, !dbg !38
  %252 = getelementptr i16, ptr addrspace(1) %251, i64 %55, !dbg !38
  %253 = getelementptr i16, ptr addrspace(1) %81, i64 -128, !dbg !38
  %254 = getelementptr i16, ptr addrspace(1) %253, i64 %52, !dbg !38
  %255 = getelementptr i16, ptr addrspace(1) %254, i64 %53, !dbg !38
  %256 = getelementptr i16, ptr addrspace(1) %255, i64 %54, !dbg !38
  %257 = getelementptr i16, ptr addrspace(1) %256, i64 %55, !dbg !38
  %258 = getelementptr i16, ptr addrspace(1) %87, i64 -128, !dbg !38
  %259 = getelementptr i16, ptr addrspace(1) %258, i64 %52, !dbg !38
  %260 = getelementptr i16, ptr addrspace(1) %259, i64 %53, !dbg !38
  %261 = getelementptr i16, ptr addrspace(1) %260, i64 %54, !dbg !38
  %262 = getelementptr i16, ptr addrspace(1) %261, i64 %55, !dbg !38
  %263 = getelementptr i16, ptr addrspace(1) %93, i64 -128, !dbg !38
  %264 = getelementptr i16, ptr addrspace(1) %263, i64 %52, !dbg !38
  %265 = getelementptr i16, ptr addrspace(1) %264, i64 %53, !dbg !38
  %266 = getelementptr i16, ptr addrspace(1) %265, i64 %54, !dbg !38
  %267 = getelementptr i16, ptr addrspace(1) %266, i64 %55, !dbg !38
  %268 = getelementptr i16, ptr addrspace(1) %99, i64 -128, !dbg !38
  %269 = getelementptr i16, ptr addrspace(1) %268, i64 %52, !dbg !38
  %270 = getelementptr i16, ptr addrspace(1) %269, i64 %53, !dbg !38
  %271 = getelementptr i16, ptr addrspace(1) %270, i64 %54, !dbg !38
  %272 = getelementptr i16, ptr addrspace(1) %271, i64 %55, !dbg !38
  %273 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %237, i1 %225, i16 0, i1 %225) #1, !dbg !39
  %274 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %242, i1 %226, i16 0, i1 %226) #1, !dbg !39
  %275 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %247, i1 %227, i16 0, i1 %227) #1, !dbg !39
  %276 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %252, i1 %228, i16 0, i1 %228) #1, !dbg !39
  %277 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %257, i1 %229, i16 0, i1 %229) #1, !dbg !39
  %278 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %262, i1 %230, i16 0, i1 %230) #1, !dbg !39
  %279 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %267, i1 %231, i16 0, i1 %231) #1, !dbg !39
  %280 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %272, i1 %232, i16 0, i1 %232) #1, !dbg !39
  %281 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %273) #1, !dbg !40
  %282 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %274) #1, !dbg !40
  %283 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %275) #1, !dbg !40
  %284 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %276) #1, !dbg !40
  %285 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %277) #1, !dbg !40
  %286 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %278) #1, !dbg !40
  %287 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %279) #1, !dbg !40
  %288 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %280) #1, !dbg !40
  %289 = select i1 %225, float %281, float 0.000000e+00, !dbg !41
  %290 = select i1 %226, float %282, float 0.000000e+00, !dbg !41
  %291 = select i1 %227, float %283, float 0.000000e+00, !dbg !41
  %292 = select i1 %228, float %284, float 0.000000e+00, !dbg !41
  %293 = select i1 %229, float %285, float 0.000000e+00, !dbg !41
  %294 = select i1 %230, float %286, float 0.000000e+00, !dbg !41
  %295 = select i1 %231, float %287, float 0.000000e+00, !dbg !41
  %296 = select i1 %232, float %288, float 0.000000e+00, !dbg !41
  %297 = select i1 %193, float %217, float %289, !dbg !42
  %298 = select i1 %195, float %218, float %290, !dbg !42
  %299 = select i1 %197, float %219, float %291, !dbg !42
  %300 = select i1 %199, float %220, float %292, !dbg !42
  %301 = select i1 %201, float %221, float %293, !dbg !42
  %302 = select i1 %203, float %222, float %294, !dbg !42
  %303 = select i1 %205, float %223, float %295, !dbg !42
  %304 = select i1 %207, float %224, float %296, !dbg !42
  %305 = getelementptr float, ptr addrspace(1) %2, i64 %.decomposed, !dbg !43
  %306 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !43
  %307 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !43
  %308 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !43
  %309 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !43
  %310 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !43
  %311 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !43
  %312 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !43
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 true, i32 0, i1 true) #1, !dbg !44
  %314 = bitcast i32 %313 to float, !dbg !44
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %306, i1 true, i32 0, i1 true) #1, !dbg !44
  %316 = bitcast i32 %315 to float, !dbg !44
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %307, i1 true, i32 0, i1 true) #1, !dbg !44
  %318 = bitcast i32 %317 to float, !dbg !44
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %308, i1 true, i32 0, i1 true) #1, !dbg !44
  %320 = bitcast i32 %319 to float, !dbg !44
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 true, i32 0, i1 true) #1, !dbg !44
  %322 = bitcast i32 %321 to float, !dbg !44
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %310, i1 true, i32 0, i1 true) #1, !dbg !44
  %324 = bitcast i32 %323 to float, !dbg !44
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 true, i32 0, i1 true) #1, !dbg !44
  %326 = bitcast i32 %325 to float, !dbg !44
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %312, i1 true, i32 0, i1 true) #1, !dbg !44
  %328 = bitcast i32 %327 to float, !dbg !44
  %329 = fmul float %297, %314, !dbg !45
  %330 = fmul float %298, %316, !dbg !45
  %331 = fmul float %299, %318, !dbg !45
  %332 = fmul float %300, %320, !dbg !45
  %333 = fmul float %301, %322, !dbg !45
  %334 = fmul float %302, %324, !dbg !45
  %335 = fmul float %303, %326, !dbg !45
  %336 = fmul float %304, %328, !dbg !45
  %337 = fadd float %144, %329, !dbg !46
  %338 = fadd float %145, %330, !dbg !46
  %339 = fadd float %146, %331, !dbg !46
  %340 = fadd float %147, %332, !dbg !46
  %341 = fadd float %148, %333, !dbg !46
  %342 = fadd float %149, %334, !dbg !46
  %343 = fadd float %150, %335, !dbg !46
  %344 = fadd float %151, %336, !dbg !46
  %345 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %61, i1 false, i16 0, i1 false) #1, !dbg !47
  %346 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %67, i1 false, i16 0, i1 false) #1, !dbg !47
  %347 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %73, i1 false, i16 0, i1 false) #1, !dbg !47
  %348 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %79, i1 false, i16 0, i1 false) #1, !dbg !47
  %349 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %85, i1 false, i16 0, i1 false) #1, !dbg !47
  %350 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %91, i1 false, i16 0, i1 false) #1, !dbg !47
  %351 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %97, i1 false, i16 0, i1 false) #1, !dbg !47
  %352 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %103, i1 false, i16 0, i1 false) #1, !dbg !47
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #1, !dbg !48
  %354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #1, !dbg !48
  %355 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %347) #1, !dbg !48
  %356 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %348) #1, !dbg !48
  %357 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %349) #1, !dbg !48
  %358 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %350) #1, !dbg !48
  %359 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %351) #1, !dbg !48
  %360 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %352) #1, !dbg !48
  %361 = getelementptr i16, ptr addrspace(1) %57, i64 512, !dbg !49
  %362 = getelementptr i16, ptr addrspace(1) %361, i64 %53, !dbg !49
  %363 = getelementptr i16, ptr addrspace(1) %362, i64 %54, !dbg !49
  %364 = getelementptr i16, ptr addrspace(1) %363, i64 %55, !dbg !49
  %365 = getelementptr i16, ptr addrspace(1) %63, i64 512, !dbg !49
  %366 = getelementptr i16, ptr addrspace(1) %365, i64 %53, !dbg !49
  %367 = getelementptr i16, ptr addrspace(1) %366, i64 %54, !dbg !49
  %368 = getelementptr i16, ptr addrspace(1) %367, i64 %55, !dbg !49
  %369 = getelementptr i16, ptr addrspace(1) %69, i64 512, !dbg !49
  %370 = getelementptr i16, ptr addrspace(1) %369, i64 %53, !dbg !49
  %371 = getelementptr i16, ptr addrspace(1) %370, i64 %54, !dbg !49
  %372 = getelementptr i16, ptr addrspace(1) %371, i64 %55, !dbg !49
  %373 = getelementptr i16, ptr addrspace(1) %75, i64 512, !dbg !49
  %374 = getelementptr i16, ptr addrspace(1) %373, i64 %53, !dbg !49
  %375 = getelementptr i16, ptr addrspace(1) %374, i64 %54, !dbg !49
  %376 = getelementptr i16, ptr addrspace(1) %375, i64 %55, !dbg !49
  %377 = getelementptr i16, ptr addrspace(1) %81, i64 512, !dbg !49
  %378 = getelementptr i16, ptr addrspace(1) %377, i64 %53, !dbg !49
  %379 = getelementptr i16, ptr addrspace(1) %378, i64 %54, !dbg !49
  %380 = getelementptr i16, ptr addrspace(1) %379, i64 %55, !dbg !49
  %381 = getelementptr i16, ptr addrspace(1) %87, i64 512, !dbg !49
  %382 = getelementptr i16, ptr addrspace(1) %381, i64 %53, !dbg !49
  %383 = getelementptr i16, ptr addrspace(1) %382, i64 %54, !dbg !49
  %384 = getelementptr i16, ptr addrspace(1) %383, i64 %55, !dbg !49
  %385 = getelementptr i16, ptr addrspace(1) %93, i64 512, !dbg !49
  %386 = getelementptr i16, ptr addrspace(1) %385, i64 %53, !dbg !49
  %387 = getelementptr i16, ptr addrspace(1) %386, i64 %54, !dbg !49
  %388 = getelementptr i16, ptr addrspace(1) %387, i64 %55, !dbg !49
  %389 = getelementptr i16, ptr addrspace(1) %99, i64 512, !dbg !49
  %390 = getelementptr i16, ptr addrspace(1) %389, i64 %53, !dbg !49
  %391 = getelementptr i16, ptr addrspace(1) %390, i64 %54, !dbg !49
  %392 = getelementptr i16, ptr addrspace(1) %391, i64 %55, !dbg !49
  %393 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %364, i1 true, i16 0, i1 true) #1, !dbg !50
  %394 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %368, i1 true, i16 0, i1 true) #1, !dbg !50
  %395 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %372, i1 true, i16 0, i1 true) #1, !dbg !50
  %396 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %376, i1 true, i16 0, i1 true) #1, !dbg !50
  %397 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %380, i1 true, i16 0, i1 true) #1, !dbg !50
  %398 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %384, i1 true, i16 0, i1 true) #1, !dbg !50
  %399 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %388, i1 true, i16 0, i1 true) #1, !dbg !50
  %400 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %392, i1 true, i16 0, i1 true) #1, !dbg !50
  %401 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %393) #1, !dbg !51
  %402 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %394) #1, !dbg !51
  %403 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %395) #1, !dbg !51
  %404 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %396) #1, !dbg !51
  %405 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %397) #1, !dbg !51
  %406 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %398) #1, !dbg !51
  %407 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %399) #1, !dbg !51
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %400) #1, !dbg !51
  %409 = fmul float %401, %129, !dbg !52
  %410 = fmul float %402, %131, !dbg !52
  %411 = fmul float %403, %133, !dbg !52
  %412 = fmul float %404, %135, !dbg !52
  %413 = fmul float %405, %137, !dbg !52
  %414 = fmul float %406, %139, !dbg !52
  %415 = fmul float %407, %141, !dbg !52
  %416 = fmul float %408, %143, !dbg !52
  %417 = getelementptr i16, ptr addrspace(1) %57, i64 640, !dbg !53
  %418 = getelementptr i16, ptr addrspace(1) %417, i64 %53, !dbg !53
  %419 = getelementptr i16, ptr addrspace(1) %418, i64 %54, !dbg !53
  %420 = getelementptr i16, ptr addrspace(1) %419, i64 %55, !dbg !53
  %421 = getelementptr i16, ptr addrspace(1) %63, i64 640, !dbg !53
  %422 = getelementptr i16, ptr addrspace(1) %421, i64 %53, !dbg !53
  %423 = getelementptr i16, ptr addrspace(1) %422, i64 %54, !dbg !53
  %424 = getelementptr i16, ptr addrspace(1) %423, i64 %55, !dbg !53
  %425 = getelementptr i16, ptr addrspace(1) %69, i64 640, !dbg !53
  %426 = getelementptr i16, ptr addrspace(1) %425, i64 %53, !dbg !53
  %427 = getelementptr i16, ptr addrspace(1) %426, i64 %54, !dbg !53
  %428 = getelementptr i16, ptr addrspace(1) %427, i64 %55, !dbg !53
  %429 = getelementptr i16, ptr addrspace(1) %75, i64 640, !dbg !53
  %430 = getelementptr i16, ptr addrspace(1) %429, i64 %53, !dbg !53
  %431 = getelementptr i16, ptr addrspace(1) %430, i64 %54, !dbg !53
  %432 = getelementptr i16, ptr addrspace(1) %431, i64 %55, !dbg !53
  %433 = getelementptr i16, ptr addrspace(1) %81, i64 640, !dbg !53
  %434 = getelementptr i16, ptr addrspace(1) %433, i64 %53, !dbg !53
  %435 = getelementptr i16, ptr addrspace(1) %434, i64 %54, !dbg !53
  %436 = getelementptr i16, ptr addrspace(1) %435, i64 %55, !dbg !53
  %437 = getelementptr i16, ptr addrspace(1) %87, i64 640, !dbg !53
  %438 = getelementptr i16, ptr addrspace(1) %437, i64 %53, !dbg !53
  %439 = getelementptr i16, ptr addrspace(1) %438, i64 %54, !dbg !53
  %440 = getelementptr i16, ptr addrspace(1) %439, i64 %55, !dbg !53
  %441 = getelementptr i16, ptr addrspace(1) %93, i64 640, !dbg !53
  %442 = getelementptr i16, ptr addrspace(1) %441, i64 %53, !dbg !53
  %443 = getelementptr i16, ptr addrspace(1) %442, i64 %54, !dbg !53
  %444 = getelementptr i16, ptr addrspace(1) %443, i64 %55, !dbg !53
  %445 = getelementptr i16, ptr addrspace(1) %99, i64 640, !dbg !53
  %446 = getelementptr i16, ptr addrspace(1) %445, i64 %53, !dbg !53
  %447 = getelementptr i16, ptr addrspace(1) %446, i64 %54, !dbg !53
  %448 = getelementptr i16, ptr addrspace(1) %447, i64 %55, !dbg !53
  %449 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %420, i1 %193, i16 0, i1 %193) #1, !dbg !54
  %450 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %424, i1 %195, i16 0, i1 %195) #1, !dbg !54
  %451 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %428, i1 %197, i16 0, i1 %197) #1, !dbg !54
  %452 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %432, i1 %199, i16 0, i1 %199) #1, !dbg !54
  %453 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %436, i1 %201, i16 0, i1 %201) #1, !dbg !54
  %454 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %440, i1 %203, i16 0, i1 %203) #1, !dbg !54
  %455 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %444, i1 %205, i16 0, i1 %205) #1, !dbg !54
  %456 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %448, i1 %207, i16 0, i1 %207) #1, !dbg !54
  %457 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #1, !dbg !55
  %458 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #1, !dbg !55
  %459 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #1, !dbg !55
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #1, !dbg !55
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #1, !dbg !55
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %454) #1, !dbg !55
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %455) #1, !dbg !55
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %456) #1, !dbg !55
  %465 = fsub float 0.000000e+00, %457, !dbg !56
  %466 = fsub float 0.000000e+00, %458, !dbg !56
  %467 = fsub float 0.000000e+00, %459, !dbg !56
  %468 = fsub float 0.000000e+00, %460, !dbg !56
  %469 = fsub float 0.000000e+00, %461, !dbg !56
  %470 = fsub float 0.000000e+00, %462, !dbg !56
  %471 = fsub float 0.000000e+00, %463, !dbg !56
  %472 = fsub float 0.000000e+00, %464, !dbg !56
  %473 = getelementptr i16, ptr addrspace(1) %57, i64 384, !dbg !57
  %474 = getelementptr i16, ptr addrspace(1) %473, i64 %53, !dbg !57
  %475 = getelementptr i16, ptr addrspace(1) %474, i64 %54, !dbg !57
  %476 = getelementptr i16, ptr addrspace(1) %475, i64 %55, !dbg !57
  %477 = getelementptr i16, ptr addrspace(1) %63, i64 384, !dbg !57
  %478 = getelementptr i16, ptr addrspace(1) %477, i64 %53, !dbg !57
  %479 = getelementptr i16, ptr addrspace(1) %478, i64 %54, !dbg !57
  %480 = getelementptr i16, ptr addrspace(1) %479, i64 %55, !dbg !57
  %481 = getelementptr i16, ptr addrspace(1) %69, i64 384, !dbg !57
  %482 = getelementptr i16, ptr addrspace(1) %481, i64 %53, !dbg !57
  %483 = getelementptr i16, ptr addrspace(1) %482, i64 %54, !dbg !57
  %484 = getelementptr i16, ptr addrspace(1) %483, i64 %55, !dbg !57
  %485 = getelementptr i16, ptr addrspace(1) %75, i64 384, !dbg !57
  %486 = getelementptr i16, ptr addrspace(1) %485, i64 %53, !dbg !57
  %487 = getelementptr i16, ptr addrspace(1) %486, i64 %54, !dbg !57
  %488 = getelementptr i16, ptr addrspace(1) %487, i64 %55, !dbg !57
  %489 = getelementptr i16, ptr addrspace(1) %81, i64 384, !dbg !57
  %490 = getelementptr i16, ptr addrspace(1) %489, i64 %53, !dbg !57
  %491 = getelementptr i16, ptr addrspace(1) %490, i64 %54, !dbg !57
  %492 = getelementptr i16, ptr addrspace(1) %491, i64 %55, !dbg !57
  %493 = getelementptr i16, ptr addrspace(1) %87, i64 384, !dbg !57
  %494 = getelementptr i16, ptr addrspace(1) %493, i64 %53, !dbg !57
  %495 = getelementptr i16, ptr addrspace(1) %494, i64 %54, !dbg !57
  %496 = getelementptr i16, ptr addrspace(1) %495, i64 %55, !dbg !57
  %497 = getelementptr i16, ptr addrspace(1) %93, i64 384, !dbg !57
  %498 = getelementptr i16, ptr addrspace(1) %497, i64 %53, !dbg !57
  %499 = getelementptr i16, ptr addrspace(1) %498, i64 %54, !dbg !57
  %500 = getelementptr i16, ptr addrspace(1) %499, i64 %55, !dbg !57
  %501 = getelementptr i16, ptr addrspace(1) %99, i64 384, !dbg !57
  %502 = getelementptr i16, ptr addrspace(1) %501, i64 %53, !dbg !57
  %503 = getelementptr i16, ptr addrspace(1) %502, i64 %54, !dbg !57
  %504 = getelementptr i16, ptr addrspace(1) %503, i64 %55, !dbg !57
  %505 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %476, i1 %225, i16 0, i1 %225) #1, !dbg !58
  %506 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %480, i1 %226, i16 0, i1 %226) #1, !dbg !58
  %507 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %484, i1 %227, i16 0, i1 %227) #1, !dbg !58
  %508 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %488, i1 %228, i16 0, i1 %228) #1, !dbg !58
  %509 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %492, i1 %229, i16 0, i1 %229) #1, !dbg !58
  %510 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %496, i1 %230, i16 0, i1 %230) #1, !dbg !58
  %511 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %500, i1 %231, i16 0, i1 %231) #1, !dbg !58
  %512 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %504, i1 %232, i16 0, i1 %232) #1, !dbg !58
  %513 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #1, !dbg !59
  %514 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #1, !dbg !59
  %515 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #1, !dbg !59
  %516 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #1, !dbg !59
  %517 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #1, !dbg !59
  %518 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #1, !dbg !59
  %519 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %511) #1, !dbg !59
  %520 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %512) #1, !dbg !59
  %521 = select i1 %225, float %513, float 0.000000e+00, !dbg !60
  %522 = select i1 %226, float %514, float 0.000000e+00, !dbg !60
  %523 = select i1 %227, float %515, float 0.000000e+00, !dbg !60
  %524 = select i1 %228, float %516, float 0.000000e+00, !dbg !60
  %525 = select i1 %229, float %517, float 0.000000e+00, !dbg !60
  %526 = select i1 %230, float %518, float 0.000000e+00, !dbg !60
  %527 = select i1 %231, float %519, float 0.000000e+00, !dbg !60
  %528 = select i1 %232, float %520, float 0.000000e+00, !dbg !60
  %529 = select i1 %193, float %465, float %521, !dbg !61
  %530 = select i1 %195, float %466, float %522, !dbg !61
  %531 = select i1 %197, float %467, float %523, !dbg !61
  %532 = select i1 %199, float %468, float %524, !dbg !61
  %533 = select i1 %201, float %469, float %525, !dbg !61
  %534 = select i1 %203, float %470, float %526, !dbg !61
  %535 = select i1 %205, float %471, float %527, !dbg !61
  %536 = select i1 %207, float %472, float %528, !dbg !61
  %537 = fmul float %529, %314, !dbg !62
  %538 = fmul float %530, %316, !dbg !62
  %539 = fmul float %531, %318, !dbg !62
  %540 = fmul float %532, %320, !dbg !62
  %541 = fmul float %533, %322, !dbg !62
  %542 = fmul float %534, %324, !dbg !62
  %543 = fmul float %535, %326, !dbg !62
  %544 = fmul float %536, %328, !dbg !62
  %545 = fadd float %409, %537, !dbg !63
  %546 = fadd float %410, %538, !dbg !63
  %547 = fadd float %411, %539, !dbg !63
  %548 = fadd float %412, %540, !dbg !63
  %549 = fadd float %413, %541, !dbg !63
  %550 = fadd float %414, %542, !dbg !63
  %551 = fadd float %415, %543, !dbg !63
  %552 = fadd float %416, %544, !dbg !63
  %553 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %364, i1 false, i16 0, i1 false) #1, !dbg !64
  %554 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %368, i1 false, i16 0, i1 false) #1, !dbg !64
  %555 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %372, i1 false, i16 0, i1 false) #1, !dbg !64
  %556 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %376, i1 false, i16 0, i1 false) #1, !dbg !64
  %557 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %380, i1 false, i16 0, i1 false) #1, !dbg !64
  %558 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %384, i1 false, i16 0, i1 false) #1, !dbg !64
  %559 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %388, i1 false, i16 0, i1 false) #1, !dbg !64
  %560 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %392, i1 false, i16 0, i1 false) #1, !dbg !64
  %561 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %553) #1, !dbg !65
  %562 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %554) #1, !dbg !65
  %563 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %555) #1, !dbg !65
  %564 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %556) #1, !dbg !65
  %565 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %557) #1, !dbg !65
  %566 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %558) #1, !dbg !65
  %567 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %559) #1, !dbg !65
  %568 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %560) #1, !dbg !65
  %569 = getelementptr i16, ptr addrspace(1) %3, i64 %29, !dbg !66
  %570 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %337) #1, !dbg !67
  %571 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %338) #1, !dbg !67
  %572 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %339) #1, !dbg !67
  %573 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %340) #1, !dbg !67
  %574 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %341) #1, !dbg !67
  %575 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %342) #1, !dbg !67
  %576 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %343) #1, !dbg !67
  %577 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %344) #1, !dbg !67
  %578 = insertelement <2 x i16> undef, i16 %570, i64 0, !dbg !67
  %579 = insertelement <2 x i16> %578, i16 %571, i64 1, !dbg !67
  %580 = bitcast <2 x i16> %579 to i32, !dbg !67
  %581 = insertelement <2 x i16> undef, i16 %572, i64 0, !dbg !67
  %582 = insertelement <2 x i16> %581, i16 %573, i64 1, !dbg !67
  %583 = bitcast <2 x i16> %582 to i32, !dbg !67
  %584 = insertelement <2 x i16> undef, i16 %574, i64 0, !dbg !67
  %585 = insertelement <2 x i16> %584, i16 %575, i64 1, !dbg !67
  %586 = bitcast <2 x i16> %585 to i32, !dbg !67
  %587 = insertelement <2 x i16> undef, i16 %576, i64 0, !dbg !67
  %588 = insertelement <2 x i16> %587, i16 %577, i64 1, !dbg !67
  %589 = bitcast <2 x i16> %588 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %580, i32 %583, i32 %586, i32 %589, ptr addrspace(1) %569, i1 true) #1, !dbg !67
  %590 = getelementptr i16, ptr addrspace(1) %4, i64 %29, !dbg !68
  %591 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %545) #1, !dbg !69
  %592 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %546) #1, !dbg !69
  %593 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %547) #1, !dbg !69
  %594 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %548) #1, !dbg !69
  %595 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %549) #1, !dbg !69
  %596 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %550) #1, !dbg !69
  %597 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %551) #1, !dbg !69
  %598 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %552) #1, !dbg !69
  %599 = insertelement <2 x i16> undef, i16 %591, i64 0, !dbg !69
  %600 = insertelement <2 x i16> %599, i16 %592, i64 1, !dbg !69
  %601 = bitcast <2 x i16> %600 to i32, !dbg !69
  %602 = insertelement <2 x i16> undef, i16 %593, i64 0, !dbg !69
  %603 = insertelement <2 x i16> %602, i16 %594, i64 1, !dbg !69
  %604 = bitcast <2 x i16> %603 to i32, !dbg !69
  %605 = insertelement <2 x i16> undef, i16 %595, i64 0, !dbg !69
  %606 = insertelement <2 x i16> %605, i16 %596, i64 1, !dbg !69
  %607 = bitcast <2 x i16> %606 to i32, !dbg !69
  %608 = insertelement <2 x i16> undef, i16 %597, i64 0, !dbg !69
  %609 = insertelement <2 x i16> %608, i16 %598, i64 1, !dbg !69
  %610 = bitcast <2 x i16> %609 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %601, i32 %604, i32 %607, i32 %610, ptr addrspace(1) %590, i1 true) #1, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c3ecii63jex2iewqiz6pnf7cjso37gx7f7e64yhmapue6uqopdpe.py", directory: "/tmp/torchinductor_zeus/3e")
!3 = !{ptr @triton__0d1d2d3d4d5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de", linkageName: "triton__0d1d2d3d4d5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 34, scope: !5)
!11 = !DILocation(line: 20, column: 46, scope: !5)
!12 = !DILocation(line: 21, column: 23, scope: !5)
!13 = !DILocation(line: 23, column: 18, scope: !5)
!14 = !DILocation(line: 24, column: 20, scope: !5)
!15 = !DILocation(line: 24, column: 27, scope: !5)
!16 = !DILocation(line: 25, column: 20, scope: !5)
!17 = !DILocation(line: 25, column: 31, scope: !5)
!18 = !DILocation(line: 26, column: 20, scope: !5)
!19 = !DILocation(line: 27, column: 18, scope: !5)
!20 = !DILocation(line: 34, column: 46, scope: !5)
!21 = !DILocation(line: 34, column: 65, scope: !5)
!22 = !DILocation(line: 34, column: 41, scope: !5)
!23 = !DILocation(line: 34, column: 59, scope: !5)
!24 = !DILocation(line: 34, column: 77, scope: !5)
!25 = !DILocation(line: 34, column: 93, scope: !5)
!26 = !DILocation(line: 45, column: 20, scope: !5)
!27 = !DILocation(line: 34, column: 30, scope: !5)
!28 = !DILocation(line: 34, column: 99, scope: !5)
!29 = !DILocation(line: 34, column: 119, scope: !5)
!30 = !DILocation(line: 36, column: 30, scope: !5)
!31 = !DILocation(line: 36, column: 35, scope: !5)
!32 = !DILocation(line: 37, column: 18, scope: !5)
!33 = !DILocation(line: 39, column: 19, scope: !5)
!34 = !DILocation(line: 41, column: 31, scope: !5)
!35 = !DILocation(line: 41, column: 106, scope: !5)
!36 = !DILocation(line: 41, column: 127, scope: !5)
!37 = !DILocation(line: 42, column: 13, scope: !5)
!38 = !DILocation(line: 47, column: 31, scope: !5)
!39 = !DILocation(line: 47, column: 109, scope: !5)
!40 = !DILocation(line: 47, column: 130, scope: !5)
!41 = !DILocation(line: 49, column: 35, scope: !5)
!42 = !DILocation(line: 50, column: 35, scope: !5)
!43 = !DILocation(line: 52, column: 31, scope: !5)
!44 = !DILocation(line: 52, column: 36, scope: !5)
!45 = !DILocation(line: 53, column: 20, scope: !5)
!46 = !DILocation(line: 54, column: 19, scope: !5)
!47 = !DILocation(line: 59, column: 100, scope: !5)
!48 = !DILocation(line: 59, column: 121, scope: !5)
!49 = !DILocation(line: 63, column: 31, scope: !5)
!50 = !DILocation(line: 63, column: 89, scope: !5)
!51 = !DILocation(line: 63, column: 109, scope: !5)
!52 = !DILocation(line: 65, column: 20, scope: !5)
!53 = !DILocation(line: 66, column: 31, scope: !5)
!54 = !DILocation(line: 66, column: 89, scope: !5)
!55 = !DILocation(line: 66, column: 110, scope: !5)
!56 = !DILocation(line: 67, column: 13, scope: !5)
!57 = !DILocation(line: 70, column: 31, scope: !5)
!58 = !DILocation(line: 70, column: 89, scope: !5)
!59 = !DILocation(line: 70, column: 110, scope: !5)
!60 = !DILocation(line: 72, column: 35, scope: !5)
!61 = !DILocation(line: 73, column: 35, scope: !5)
!62 = !DILocation(line: 75, column: 20, scope: !5)
!63 = !DILocation(line: 76, column: 20, scope: !5)
!64 = !DILocation(line: 80, column: 89, scope: !5)
!65 = !DILocation(line: 80, column: 110, scope: !5)
!66 = !DILocation(line: 84, column: 25, scope: !5)
!67 = !DILocation(line: 84, column: 37, scope: !5)
!68 = !DILocation(line: 85, column: 25, scope: !5)
!69 = !DILocation(line: 85, column: 37, scope: !5)
!70 = !DILocation(line: 85, column: 4, scope: !5)
