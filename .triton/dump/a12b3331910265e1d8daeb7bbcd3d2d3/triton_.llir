; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d10de11de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !5 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %14 = lshr i32 %13, 5, !dbg !8
  %urem = shl i32 %13, 2, !dbg !8
  %15 = and i32 %urem, 1020, !dbg !8
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %17 = icmp slt i32 %16, 512, !dbg !10
  %18 = sext i32 %16 to i64, !dbg !11
  %19 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !11
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %17) #3, !dbg !12
  %21 = bitcast i32 %20 to float, !dbg !12
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %17) #3, !dbg !12
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %17) #3, !dbg !12
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %17) #3, !dbg !12
  %25 = mul i32 %16, 2304, !dbg !13
  %26 = insertelement <4 x float> poison, float %21, i64 0, !dbg !14
  %27 = shufflevector <4 x float> %26, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !14
  br label %28, !dbg !15

28:                                               ; preds = %12, %28
  %29 = phi i32 [ 0, %12 ], [ %130, %28 ]
  %30 = phi <4 x float> [ zeroinitializer, %12 ], [ %129, %28 ]
  %31 = or i32 %29, %15, !dbg !16
  %32 = icmp ult i32 %31, 2304, !dbg !17
  %33 = add i32 %31, %25, !dbg !18
  %34 = sext i32 %33 to i64, !dbg !19
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !19
  %36 = and i1 %17, %32, !dbg !20
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !21
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !21
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !21
  %40 = trunc i32 %38 to i16, !dbg !21
  %extelt.offset10 = lshr i32 %38, 16, !dbg !21
  %41 = trunc i32 %extelt.offset10 to i16, !dbg !21
  %42 = trunc i32 %39 to i16, !dbg !21
  %extelt.offset11 = lshr i32 %39, 16, !dbg !21
  %43 = trunc i32 %extelt.offset11 to i16, !dbg !21
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !22
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #3, !dbg !22
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #3, !dbg !22
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #3, !dbg !22
  %48 = getelementptr i16, ptr addrspace(1) %2, i64 %34, !dbg !23
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !24
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !24
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !24
  %52 = trunc i32 %50 to i16, !dbg !24
  %extelt.offset12 = lshr i32 %50, 16, !dbg !24
  %53 = trunc i32 %extelt.offset12 to i16, !dbg !24
  %54 = trunc i32 %51 to i16, !dbg !24
  %extelt.offset13 = lshr i32 %51, 16, !dbg !24
  %55 = trunc i32 %extelt.offset13 to i16, !dbg !24
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #3, !dbg !25
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #3, !dbg !25
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #3, !dbg !25
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #3, !dbg !25
  %60 = zext nneg i32 %31 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #3, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !27
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !27
  %67 = getelementptr i16, ptr addrspace(1) %4, i64 %34, !dbg !28
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !29
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !29
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !29
  %71 = trunc i32 %69 to i16, !dbg !29
  %extelt.offset14 = lshr i32 %69, 16, !dbg !29
  %72 = trunc i32 %extelt.offset14 to i16, !dbg !29
  %73 = trunc i32 %70 to i16, !dbg !29
  %extelt.offset15 = lshr i32 %70, 16, !dbg !29
  %74 = trunc i32 %extelt.offset15 to i16, !dbg !29
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #3, !dbg !30
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #3, !dbg !30
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #3, !dbg !30
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #3, !dbg !30
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %60, !dbg !31
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #3, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !32
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !32
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !32
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !33
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !34
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !34
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !34
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !34
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !34
  %91 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !27
  %92 = insertelement <4 x i32> %91, i32 %64, i64 1, !dbg !27
  %93 = insertelement <4 x i32> %92, i32 %65, i64 2, !dbg !27
  %94 = insertelement <4 x i32> %93, i32 %66, i64 3, !dbg !27
  %95 = bitcast <4 x i32> %94 to <4 x float>, !dbg !27
  %96 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !32
  %97 = insertelement <4 x i32> %96, i32 %82, i64 1, !dbg !32
  %98 = insertelement <4 x i32> %97, i32 %83, i64 2, !dbg !32
  %99 = insertelement <4 x i32> %98, i32 %84, i64 3, !dbg !32
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !32
  %101 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !34
  %102 = insertelement <4 x i32> %101, i32 %88, i64 1, !dbg !34
  %103 = insertelement <4 x i32> %102, i32 %89, i64 2, !dbg !34
  %104 = insertelement <4 x i32> %103, i32 %90, i64 3, !dbg !34
  %105 = bitcast <4 x i32> %104 to <4 x float>, !dbg !34
  %106 = insertelement <4 x float> poison, float %44, i64 0, !dbg !35
  %107 = insertelement <4 x float> %106, float %45, i64 1, !dbg !35
  %108 = insertelement <4 x float> %107, float %46, i64 2, !dbg !35
  %109 = insertelement <4 x float> %108, float %47, i64 3, !dbg !35
  %110 = insertelement <4 x float> poison, float %56, i64 0, !dbg !35
  %111 = insertelement <4 x float> %110, float %57, i64 1, !dbg !35
  %112 = insertelement <4 x float> %111, float %58, i64 2, !dbg !35
  %113 = insertelement <4 x float> %112, float %59, i64 3, !dbg !35
  %114 = fadd <4 x float> %109, %113, !dbg !35
  %115 = fadd <4 x float> %95, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !36
  %116 = fmul <4 x float> %114, %115, !dbg !37
  %117 = insertelement <4 x float> poison, float %75, i64 0, !dbg !14
  %118 = insertelement <4 x float> %117, float %76, i64 1, !dbg !14
  %119 = insertelement <4 x float> %118, float %77, i64 2, !dbg !14
  %120 = insertelement <4 x float> %119, float %78, i64 3, !dbg !14
  %121 = fmul <4 x float> %120, %27, !dbg !14
  %122 = fadd <4 x float> %100, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !38
  %123 = fmul <4 x float> %121, %122, !dbg !39
  %124 = fadd <4 x float> %123, %105, !dbg !40
  %125 = fmul <4 x float> %116, %124, !dbg !41
  %126 = insertelement <4 x i1> poison, i1 %36, i64 0, !dbg !42
  %127 = shufflevector <4 x i1> %126, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !42
  %128 = select <4 x i1> %127, <4 x float> %125, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !42
  %129 = fadd <4 x float> %30, %128, !dbg !42
  %130 = add nuw nsw i32 %29, 1024, !dbg !15
  %131 = icmp ult i32 %29, 1280, !dbg !15
  br i1 %131, label %28, label %132, !dbg !15

132:                                              ; preds = %28
  %133 = and i32 %13, 31, !dbg !8
  %134 = and i32 %14, 7, !dbg !8
  %135 = bitcast i32 %23 to float, !dbg !12
  %shift = shufflevector <4 x float> %129, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %136 = fadd <4 x float> %129, %shift, !dbg !43
  %shift38 = shufflevector <4 x float> %129, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %137 = fadd <4 x float> %shift38, %136, !dbg !43
  %shift39 = shufflevector <4 x float> %129, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %138 = fadd <4 x float> %shift39, %137, !dbg !43
  %139 = extractelement <4 x float> %138, i64 0, !dbg !43
  %140 = bitcast float %139 to i32, !dbg !49
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 16, i32 31), !dbg !49
  %142 = bitcast i32 %141 to float, !dbg !49
  %143 = fadd float %139, %142, !dbg !43
  %144 = bitcast float %143 to i32, !dbg !49
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 8, i32 31), !dbg !49
  %146 = bitcast i32 %145 to float, !dbg !49
  %147 = fadd float %143, %146, !dbg !43
  %148 = bitcast float %147 to i32, !dbg !49
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 4, i32 31), !dbg !49
  %150 = bitcast i32 %149 to float, !dbg !49
  %151 = fadd float %147, %150, !dbg !43
  %152 = bitcast float %151 to i32, !dbg !49
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !49
  %154 = bitcast i32 %153 to float, !dbg !49
  %155 = fadd float %151, %154, !dbg !43
  %156 = bitcast float %155 to i32, !dbg !49
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !49
  %158 = bitcast i32 %157 to float, !dbg !49
  %159 = fadd float %155, %158, !dbg !43
  %160 = icmp eq i32 %133, 0, !dbg !49
  %161 = zext nneg i32 %134 to i64, !dbg !49
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i64 %161, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, float %159, i1 %160) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %163 = icmp slt i32 %13, 8, !dbg !49
  %164 = sext i32 %13 to i64, !dbg !49
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i64 %164, !dbg !49
  %166 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %165, i1 %163) #3, !dbg !49
  %167 = bitcast float %166 to i32, !dbg !49
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !49
  %169 = bitcast i32 %168 to float, !dbg !49
  %170 = fadd float %166, %169, !dbg !43
  %171 = bitcast float %170 to i32, !dbg !49
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !49
  %173 = bitcast i32 %172 to float, !dbg !49
  %174 = fadd float %170, %173, !dbg !43
  %175 = bitcast float %174 to i32, !dbg !49
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !49
  %177 = bitcast i32 %176 to float, !dbg !49
  %178 = fadd float %174, %177, !dbg !43
  %179 = and i32 %13, 7, !dbg !49
  %180 = icmp eq i32 %179, 0, !dbg !49
  %181 = and i1 %163, %180, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, float %178, i1 %181) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %182 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !49
  %183 = getelementptr float, ptr addrspace(1) %8, i64 %18, !dbg !51
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %17) #3, !dbg !52
  %185 = bitcast i32 %184 to float, !dbg !52
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %17) #3, !dbg !52
  %187 = bitcast i32 %186 to float, !dbg !52
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %17) #3, !dbg !52
  %189 = bitcast i32 %188 to float, !dbg !52
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %17) #3, !dbg !52
  %191 = bitcast i32 %190 to float, !dbg !52
  %192 = fmul float %182, -5.000000e-01, !dbg !53
  %193 = fmul float %185, %185, !dbg !54
  %194 = fmul float %187, %187, !dbg !54
  %195 = fmul float %189, %189, !dbg !54
  %196 = fmul float %191, %191, !dbg !54
  %197 = fmul float %193, %185, !dbg !55
  %198 = fmul float %194, %187, !dbg !55
  %199 = fmul float %195, %189, !dbg !55
  %200 = fmul float %196, %191, !dbg !55
  %201 = fmul float %192, %197, !dbg !56
  %202 = fmul float %192, %198, !dbg !56
  %203 = fmul float %192, %199, !dbg !56
  %204 = fmul float %192, %200, !dbg !56
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float 2.304000e+03) #3, !dbg !57
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float 2.304000e+03) #3, !dbg !57
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float 2.304000e+03) #3, !dbg !57
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float 2.304000e+03) #3, !dbg !57
  %209 = insertelement <4 x float> poison, float %205, i64 0, !dbg !58
  %210 = shufflevector <4 x float> %209, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !58
  %211 = insertelement <4 x float> poison, float %185, i64 0, !dbg !59
  %212 = shufflevector <4 x float> %211, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !59
  br label %213, !dbg !60

213:                                              ; preds = %132, %213
  %214 = phi i32 [ 0, %132 ], [ %336, %213 ]
  %215 = phi <4 x float> [ zeroinitializer, %132 ], [ %331, %213 ]
  %216 = or i32 %214, %15, !dbg !61
  %217 = icmp ult i32 %216, 2304, !dbg !62
  %218 = add i32 %216, %25, !dbg !63
  %219 = sext i32 %218 to i64, !dbg !64
  %220 = getelementptr i16, ptr addrspace(1) %4, i64 %219, !dbg !64
  %221 = and i1 %17, %217, !dbg !65
  %222 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %220, i1 %221, i32 0, i1 %221, i32 0, i1 %221) #3, !dbg !66
  %223 = extractvalue { i32, i32 } %222, 0, !dbg !66
  %224 = extractvalue { i32, i32 } %222, 1, !dbg !66
  %225 = trunc i32 %223 to i16, !dbg !66
  %extelt.offset4 = lshr i32 %223, 16, !dbg !66
  %226 = trunc i32 %extelt.offset4 to i16, !dbg !66
  %227 = trunc i32 %224 to i16, !dbg !66
  %extelt.offset5 = lshr i32 %224, 16, !dbg !66
  %228 = trunc i32 %extelt.offset5 to i16, !dbg !66
  %229 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %225) #3, !dbg !67
  %230 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #3, !dbg !67
  %231 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %227) #3, !dbg !67
  %232 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #3, !dbg !67
  %233 = zext nneg i32 %216 to i64, !dbg !68
  %234 = getelementptr float, ptr addrspace(1) %6, i64 %233, !dbg !68
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %234, i1 %217, i32 0, i1 %217, i32 0, i1 %217, i32 0, i1 %217, i32 0, i1 %217) #3, !dbg !69
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !69
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !69
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !69
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !69
  %240 = getelementptr float, ptr addrspace(1) %7, i64 %219, !dbg !70
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %240, i1 %221, i32 0, i1 %221, i32 0, i1 %221, i32 0, i1 %221, i32 0, i1 %221) #3, !dbg !71
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !71
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !71
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !71
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !71
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !72
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %246, i1 %221, i32 0, i1 %221, i32 0, i1 %221, i32 0, i1 %221, i32 0, i1 %221) #3, !dbg !73
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !73
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !73
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !73
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !73
  %252 = getelementptr i16, ptr addrspace(1) %1, i64 %219, !dbg !74
  %253 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %252, i1 %221, i32 0, i1 %221, i32 0, i1 %221) #3, !dbg !75
  %254 = extractvalue { i32, i32 } %253, 0, !dbg !75
  %255 = extractvalue { i32, i32 } %253, 1, !dbg !75
  %256 = trunc i32 %254 to i16, !dbg !75
  %extelt.offset6 = lshr i32 %254, 16, !dbg !75
  %257 = trunc i32 %extelt.offset6 to i16, !dbg !75
  %258 = trunc i32 %255 to i16, !dbg !75
  %extelt.offset7 = lshr i32 %255, 16, !dbg !75
  %259 = trunc i32 %extelt.offset7 to i16, !dbg !75
  %260 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %256) #3, !dbg !76
  %261 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %257) #3, !dbg !76
  %262 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %258) #3, !dbg !76
  %263 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %259) #3, !dbg !76
  %264 = getelementptr i16, ptr addrspace(1) %2, i64 %219, !dbg !77
  %265 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %264, i1 %221, i32 0, i1 %221, i32 0, i1 %221) #3, !dbg !78
  %266 = extractvalue { i32, i32 } %265, 0, !dbg !78
  %267 = extractvalue { i32, i32 } %265, 1, !dbg !78
  %268 = trunc i32 %266 to i16, !dbg !78
  %extelt.offset8 = lshr i32 %266, 16, !dbg !78
  %269 = trunc i32 %extelt.offset8 to i16, !dbg !78
  %270 = trunc i32 %267 to i16, !dbg !78
  %extelt.offset9 = lshr i32 %267, 16, !dbg !78
  %271 = trunc i32 %extelt.offset9 to i16, !dbg !78
  %272 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #3, !dbg !79
  %273 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %269) #3, !dbg !79
  %274 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %270) #3, !dbg !79
  %275 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %271) #3, !dbg !79
  %276 = getelementptr float, ptr addrspace(1) %3, i64 %233, !dbg !80
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %276, i1 %217, i32 0, i1 %217, i32 0, i1 %217, i32 0, i1 %217, i32 0, i1 %217) #3, !dbg !81
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !81
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !81
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !81
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !81
  %282 = insertelement <4 x i32> poison, i32 %236, i64 0, !dbg !69
  %283 = insertelement <4 x i32> %282, i32 %237, i64 1, !dbg !69
  %284 = insertelement <4 x i32> %283, i32 %238, i64 2, !dbg !69
  %285 = insertelement <4 x i32> %284, i32 %239, i64 3, !dbg !69
  %286 = bitcast <4 x i32> %285 to <4 x float>, !dbg !69
  %287 = insertelement <4 x i32> poison, i32 %242, i64 0, !dbg !71
  %288 = insertelement <4 x i32> %287, i32 %243, i64 1, !dbg !71
  %289 = insertelement <4 x i32> %288, i32 %244, i64 2, !dbg !71
  %290 = insertelement <4 x i32> %289, i32 %245, i64 3, !dbg !71
  %291 = bitcast <4 x i32> %290 to <4 x float>, !dbg !71
  %292 = insertelement <4 x i32> poison, i32 %248, i64 0, !dbg !73
  %293 = insertelement <4 x i32> %292, i32 %249, i64 1, !dbg !73
  %294 = insertelement <4 x i32> %293, i32 %250, i64 2, !dbg !73
  %295 = insertelement <4 x i32> %294, i32 %251, i64 3, !dbg !73
  %296 = bitcast <4 x i32> %295 to <4 x float>, !dbg !73
  %297 = insertelement <4 x i32> poison, i32 %278, i64 0, !dbg !81
  %298 = insertelement <4 x i32> %297, i32 %279, i64 1, !dbg !81
  %299 = insertelement <4 x i32> %298, i32 %280, i64 2, !dbg !81
  %300 = insertelement <4 x i32> %299, i32 %281, i64 3, !dbg !81
  %301 = bitcast <4 x i32> %300 to <4 x float>, !dbg !81
  %302 = insertelement <4 x float> poison, float %229, i64 0, !dbg !82
  %303 = insertelement <4 x float> %302, float %230, i64 1, !dbg !82
  %304 = insertelement <4 x float> %303, float %231, i64 2, !dbg !82
  %305 = insertelement <4 x float> %304, float %232, i64 3, !dbg !82
  %306 = fmul <4 x float> %305, %27, !dbg !82
  %307 = fadd <4 x float> %286, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !83
  %308 = fmul <4 x float> %306, %307, !dbg !84
  %309 = fadd <4 x float> %308, %291, !dbg !85
  %310 = fmul <4 x float> %210, %309, !dbg !58
  %311 = insertelement <4 x float> poison, float %260, i64 0, !dbg !86
  %312 = insertelement <4 x float> %311, float %261, i64 1, !dbg !86
  %313 = insertelement <4 x float> %312, float %262, i64 2, !dbg !86
  %314 = insertelement <4 x float> %313, float %263, i64 3, !dbg !86
  %315 = insertelement <4 x float> poison, float %272, i64 0, !dbg !86
  %316 = insertelement <4 x float> %315, float %273, i64 1, !dbg !86
  %317 = insertelement <4 x float> %316, float %274, i64 2, !dbg !86
  %318 = insertelement <4 x float> %317, float %275, i64 3, !dbg !86
  %319 = fadd <4 x float> %314, %318, !dbg !86
  %320 = fadd <4 x float> %301, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !87
  %321 = fmul <4 x float> %319, %320, !dbg !88
  %322 = fmul <4 x float> %321, %212, !dbg !59
  %323 = fadd <4 x float> %322, %296, !dbg !89
  %324 = fadd <4 x float> %310, %323, !dbg !90
  %325 = fadd <4 x float> %310, %324, !dbg !91
  %326 = fmul <4 x float> %307, %325, !dbg !92
  %327 = fmul <4 x float> %305, %326, !dbg !93
  %328 = insertelement <4 x i1> poison, i1 %221, i64 0, !dbg !94
  %329 = shufflevector <4 x i1> %328, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !94
  %330 = select <4 x i1> %329, <4 x float> %327, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !94
  %331 = fadd <4 x float> %215, %330, !dbg !94
  %bc = bitcast <4 x float> %325 to <4 x i32>, !dbg !95
  %332 = extractelement <4 x i32> %bc, i64 0, !dbg !95
  %bc43 = bitcast <4 x float> %325 to <4 x i32>, !dbg !95
  %333 = extractelement <4 x i32> %bc43, i64 1, !dbg !95
  %bc44 = bitcast <4 x float> %325 to <4 x i32>, !dbg !95
  %334 = extractelement <4 x i32> %bc44, i64 2, !dbg !95
  %bc45 = bitcast <4 x float> %325 to <4 x i32>, !dbg !95
  %335 = extractelement <4 x i32> %bc45, i64 3, !dbg !95
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %332, i32 %333, i32 %334, i32 %335, ptr addrspace(1) %246, i1 %221) #3, !dbg !95
  %336 = add nuw nsw i32 %214, 1024, !dbg !60
  %337 = icmp ult i32 %214, 1280, !dbg !60
  br i1 %337, label %213, label %338, !dbg !60

338:                                              ; preds = %213
  %339 = bitcast i32 %22 to float, !dbg !12
  %340 = bitcast i32 %24 to float, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %shift40 = shufflevector <4 x float> %331, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !98
  %341 = fadd <4 x float> %331, %shift40, !dbg !98
  %shift41 = shufflevector <4 x float> %331, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !98
  %342 = fadd <4 x float> %shift41, %341, !dbg !98
  %shift42 = shufflevector <4 x float> %331, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !98
  %343 = fadd <4 x float> %shift42, %342, !dbg !98
  %344 = extractelement <4 x float> %343, i64 0, !dbg !98
  %345 = bitcast float %344 to i32, !dbg !96
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 16, i32 31), !dbg !96
  %347 = bitcast i32 %346 to float, !dbg !96
  %348 = fadd float %344, %347, !dbg !98
  %349 = bitcast float %348 to i32, !dbg !96
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 8, i32 31), !dbg !96
  %351 = bitcast i32 %350 to float, !dbg !96
  %352 = fadd float %348, %351, !dbg !98
  %353 = bitcast float %352 to i32, !dbg !96
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 4, i32 31), !dbg !96
  %355 = bitcast i32 %354 to float, !dbg !96
  %356 = fadd float %352, %355, !dbg !98
  %357 = bitcast float %356 to i32, !dbg !96
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 2, i32 31), !dbg !96
  %359 = bitcast i32 %358 to float, !dbg !96
  %360 = fadd float %356, %359, !dbg !98
  %361 = bitcast float %360 to i32, !dbg !96
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 1, i32 31), !dbg !96
  %363 = bitcast i32 %362 to float, !dbg !96
  %364 = fadd float %360, %363, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, float %364, i1 %160) #3, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %365 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %165, i1 %163) #3, !dbg !96
  %366 = bitcast float %365 to i32, !dbg !96
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 4, i32 31), !dbg !96
  %368 = bitcast i32 %367 to float, !dbg !96
  %369 = fadd float %365, %368, !dbg !98
  %370 = bitcast float %369 to i32, !dbg !96
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 2, i32 31), !dbg !96
  %372 = bitcast i32 %371 to float, !dbg !96
  %373 = fadd float %369, %372, !dbg !98
  %374 = bitcast float %373 to i32, !dbg !96
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 1, i32 31), !dbg !96
  %376 = bitcast i32 %375 to float, !dbg !96
  %377 = fadd float %373, %376, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, float %377, i1 %181) #3, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %378 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !96
  %379 = fmul float %378, -5.000000e-01, !dbg !101
  %380 = fmul float %21, %21, !dbg !102
  %381 = fmul float %339, %339, !dbg !102
  %382 = fmul float %135, %135, !dbg !102
  %383 = fmul float %340, %340, !dbg !102
  %384 = fmul float %380, %21, !dbg !103
  %385 = fmul float %381, %339, !dbg !103
  %386 = fmul float %382, %135, !dbg !103
  %387 = fmul float %383, %340, !dbg !103
  %388 = fmul float %384, %379, !dbg !104
  %389 = fmul float %385, %379, !dbg !104
  %390 = fmul float %386, %379, !dbg !104
  %391 = fmul float %387, %379, !dbg !104
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %388, float 2.304000e+03) #3, !dbg !105
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float 2.304000e+03) #3, !dbg !105
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %390, float 2.304000e+03) #3, !dbg !105
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %391, float 2.304000e+03) #3, !dbg !105
  br label %396, !dbg !106

396:                                              ; preds = %338, %396
  %397 = phi i32 [ 0, %338 ], [ %471, %396 ]
  %398 = or i32 %397, %15, !dbg !107
  %399 = icmp ult i32 %398, 2304, !dbg !108
  %400 = add i32 %398, %25, !dbg !109
  %401 = sext i32 %400 to i64, !dbg !110
  %402 = getelementptr float, ptr addrspace(1) %0, i64 %401, !dbg !110
  %403 = and i1 %17, %399, !dbg !111
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %402, i1 %403, i32 0, i1 %403, i32 0, i1 %403, i32 0, i1 %403, i32 0, i1 %403) #3, !dbg !112
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !112
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !112
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !112
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !112
  %409 = bitcast i32 %405 to float, !dbg !112
  %410 = bitcast i32 %406 to float, !dbg !112
  %411 = bitcast i32 %407 to float, !dbg !112
  %412 = bitcast i32 %408 to float, !dbg !112
  %413 = zext nneg i32 %398 to i64, !dbg !113
  %414 = getelementptr float, ptr addrspace(1) %6, i64 %413, !dbg !113
  %415 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %414, i1 %399, i32 0, i1 %399, i32 0, i1 %399, i32 0, i1 %399, i32 0, i1 %399) #3, !dbg !114
  %416 = extractvalue { i32, i32, i32, i32 } %415, 0, !dbg !114
  %417 = extractvalue { i32, i32, i32, i32 } %415, 1, !dbg !114
  %418 = extractvalue { i32, i32, i32, i32 } %415, 2, !dbg !114
  %419 = extractvalue { i32, i32, i32, i32 } %415, 3, !dbg !114
  %420 = bitcast i32 %416 to float, !dbg !114
  %421 = bitcast i32 %417 to float, !dbg !114
  %422 = bitcast i32 %418 to float, !dbg !114
  %423 = bitcast i32 %419 to float, !dbg !114
  %424 = getelementptr i16, ptr addrspace(1) %4, i64 %401, !dbg !115
  %425 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %424, i1 %403, i32 0, i1 %403, i32 0, i1 %403) #3, !dbg !116
  %426 = extractvalue { i32, i32 } %425, 0, !dbg !116
  %427 = extractvalue { i32, i32 } %425, 1, !dbg !116
  %428 = trunc i32 %426 to i16, !dbg !116
  %extelt.offset = lshr i32 %426, 16, !dbg !116
  %429 = trunc i32 %extelt.offset to i16, !dbg !116
  %430 = trunc i32 %427 to i16, !dbg !116
  %extelt.offset3 = lshr i32 %427, 16, !dbg !116
  %431 = trunc i32 %extelt.offset3 to i16, !dbg !116
  %432 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %428) #3, !dbg !117
  %433 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %429) #3, !dbg !117
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #3, !dbg !117
  %435 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #3, !dbg !117
  %436 = fadd float %420, 1.000000e+00, !dbg !118
  %437 = fadd float %421, 1.000000e+00, !dbg !118
  %438 = fadd float %422, 1.000000e+00, !dbg !118
  %439 = fadd float %423, 1.000000e+00, !dbg !118
  %440 = fmul float %436, %409, !dbg !119
  %441 = fmul float %437, %410, !dbg !119
  %442 = fmul float %438, %411, !dbg !119
  %443 = fmul float %439, %412, !dbg !119
  %444 = fmul float %440, %21, !dbg !120
  %445 = fmul float %441, %21, !dbg !120
  %446 = fmul float %442, %21, !dbg !120
  %447 = fmul float %443, %21, !dbg !120
  %448 = fmul float %392, %432, !dbg !121
  %449 = fmul float %392, %433, !dbg !121
  %450 = fmul float %392, %434, !dbg !121
  %451 = fmul float %392, %435, !dbg !121
  %452 = fadd float %448, %444, !dbg !122
  %453 = fadd float %449, %445, !dbg !122
  %454 = fadd float %446, %450, !dbg !122
  %455 = fadd float %447, %451, !dbg !122
  %456 = fadd float %448, %452, !dbg !123
  %457 = fadd float %449, %453, !dbg !123
  %458 = fadd float %450, %454, !dbg !123
  %459 = fadd float %451, %455, !dbg !123
  %460 = getelementptr i16, ptr addrspace(1) %9, i64 %401, !dbg !124
  %461 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %456) #3, !dbg !125
  %462 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %457) #3, !dbg !125
  %463 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %458) #3, !dbg !125
  %464 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %459) #3, !dbg !125
  %465 = insertelement <2 x i16> undef, i16 %461, i64 0, !dbg !125
  %466 = insertelement <2 x i16> %465, i16 %462, i64 1, !dbg !125
  %467 = bitcast <2 x i16> %466 to i32, !dbg !125
  %468 = insertelement <2 x i16> undef, i16 %463, i64 0, !dbg !125
  %469 = insertelement <2 x i16> %468, i16 %464, i64 1, !dbg !125
  %470 = bitcast <2 x i16> %469 to i32, !dbg !125
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %467, i32 %470, ptr addrspace(1) %460, i1 %403) #3, !dbg !125
  %471 = add nuw nsw i32 %397, 1024, !dbg !106
  %472 = icmp ult i32 %397, 1280, !dbg !106
  br i1 %472, label %396, label %473, !dbg !106

473:                                              ; preds = %396
  ret void, !dbg !126
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cxzchblyzesulroefw7kppptsuhfycdorvury5kihbqfq2e4plwk.py", directory: "/tmp/torchinductor_zeus/xz")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 26, column: 31, scope: !5)
!12 = !DILocation(line: 26, column: 36, scope: !5)
!13 = !DILocation(line: 32, column: 45, scope: !5)
!14 = !DILocation(line: 45, column: 24, scope: !5)
!15 = !DILocation(line: 28, column: 36, scope: !5)
!16 = !DILocation(line: 29, column: 27, scope: !5)
!17 = !DILocation(line: 30, column: 25, scope: !5)
!18 = !DILocation(line: 32, column: 40, scope: !5)
!19 = !DILocation(line: 32, column: 34, scope: !5)
!20 = !DILocation(line: 32, column: 59, scope: !5)
!21 = !DILocation(line: 32, column: 51, scope: !5)
!22 = !DILocation(line: 32, column: 110, scope: !5)
!23 = !DILocation(line: 33, column: 34, scope: !5)
!24 = !DILocation(line: 33, column: 51, scope: !5)
!25 = !DILocation(line: 33, column: 110, scope: !5)
!26 = !DILocation(line: 34, column: 34, scope: !5)
!27 = !DILocation(line: 34, column: 39, scope: !5)
!28 = !DILocation(line: 35, column: 34, scope: !5)
!29 = !DILocation(line: 35, column: 51, scope: !5)
!30 = !DILocation(line: 35, column: 110, scope: !5)
!31 = !DILocation(line: 36, column: 35, scope: !5)
!32 = !DILocation(line: 36, column: 40, scope: !5)
!33 = !DILocation(line: 37, column: 35, scope: !5)
!34 = !DILocation(line: 37, column: 52, scope: !5)
!35 = !DILocation(line: 40, column: 22, scope: !5)
!36 = !DILocation(line: 42, column: 22, scope: !5)
!37 = !DILocation(line: 43, column: 22, scope: !5)
!38 = !DILocation(line: 46, column: 24, scope: !5)
!39 = !DILocation(line: 47, column: 24, scope: !5)
!40 = !DILocation(line: 50, column: 24, scope: !5)
!41 = !DILocation(line: 51, column: 23, scope: !5)
!42 = !DILocation(line: 54, column: 48, scope: !5)
!43 = !DILocation(line: 233, column: 15, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!46 = distinct !DILexicalBlockFile(scope: !5, file: !45, discriminator: 0)
!47 = !DILocation(line: 243, column: 36, scope: !44, inlinedAt: !48)
!48 = !DILocation(line: 55, column: 27, scope: !44)
!49 = !DILocation(line: 243, column: 36, scope: !46, inlinedAt: !50)
!50 = !DILocation(line: 55, column: 27, scope: !46)
!51 = !DILocation(line: 56, column: 31, scope: !5)
!52 = !DILocation(line: 56, column: 36, scope: !5)
!53 = !DILocation(line: 70, column: 24, scope: !5)
!54 = !DILocation(line: 71, column: 24, scope: !5)
!55 = !DILocation(line: 72, column: 24, scope: !5)
!56 = !DILocation(line: 73, column: 24, scope: !5)
!57 = !DILocation(line: 75, column: 24, scope: !5)
!58 = !DILocation(line: 84, column: 24, scope: !5)
!59 = !DILocation(line: 90, column: 24, scope: !5)
!60 = !DILocation(line: 58, column: 36, scope: !5)
!61 = !DILocation(line: 59, column: 27, scope: !5)
!62 = !DILocation(line: 60, column: 25, scope: !5)
!63 = !DILocation(line: 62, column: 41, scope: !5)
!64 = !DILocation(line: 62, column: 35, scope: !5)
!65 = !DILocation(line: 62, column: 60, scope: !5)
!66 = !DILocation(line: 62, column: 52, scope: !5)
!67 = !DILocation(line: 62, column: 111, scope: !5)
!68 = !DILocation(line: 63, column: 35, scope: !5)
!69 = !DILocation(line: 63, column: 40, scope: !5)
!70 = !DILocation(line: 64, column: 35, scope: !5)
!71 = !DILocation(line: 64, column: 52, scope: !5)
!72 = !DILocation(line: 65, column: 39, scope: !5)
!73 = !DILocation(line: 65, column: 56, scope: !5)
!74 = !DILocation(line: 66, column: 35, scope: !5)
!75 = !DILocation(line: 66, column: 52, scope: !5)
!76 = !DILocation(line: 66, column: 112, scope: !5)
!77 = !DILocation(line: 67, column: 35, scope: !5)
!78 = !DILocation(line: 67, column: 52, scope: !5)
!79 = !DILocation(line: 67, column: 112, scope: !5)
!80 = !DILocation(line: 68, column: 35, scope: !5)
!81 = !DILocation(line: 68, column: 40, scope: !5)
!82 = !DILocation(line: 77, column: 24, scope: !5)
!83 = !DILocation(line: 79, column: 24, scope: !5)
!84 = !DILocation(line: 80, column: 24, scope: !5)
!85 = !DILocation(line: 83, column: 24, scope: !5)
!86 = !DILocation(line: 87, column: 24, scope: !5)
!87 = !DILocation(line: 88, column: 24, scope: !5)
!88 = !DILocation(line: 89, column: 24, scope: !5)
!89 = !DILocation(line: 91, column: 24, scope: !5)
!90 = !DILocation(line: 92, column: 24, scope: !5)
!91 = !DILocation(line: 93, column: 24, scope: !5)
!92 = !DILocation(line: 94, column: 24, scope: !5)
!93 = !DILocation(line: 95, column: 24, scope: !5)
!94 = !DILocation(line: 98, column: 48, scope: !5)
!95 = !DILocation(line: 99, column: 56, scope: !5)
!96 = !DILocation(line: 243, column: 36, scope: !46, inlinedAt: !97)
!97 = !DILocation(line: 100, column: 27, scope: !46)
!98 = !DILocation(line: 233, column: 15, scope: !44, inlinedAt: !99)
!99 = !DILocation(line: 243, column: 36, scope: !44, inlinedAt: !100)
!100 = !DILocation(line: 100, column: 27, scope: !44)
!101 = !DILocation(line: 113, column: 24, scope: !5)
!102 = !DILocation(line: 114, column: 24, scope: !5)
!103 = !DILocation(line: 115, column: 24, scope: !5)
!104 = !DILocation(line: 116, column: 24, scope: !5)
!105 = !DILocation(line: 118, column: 24, scope: !5)
!106 = !DILocation(line: 101, column: 36, scope: !5)
!107 = !DILocation(line: 102, column: 27, scope: !5)
!108 = !DILocation(line: 103, column: 25, scope: !5)
!109 = !DILocation(line: 105, column: 45, scope: !5)
!110 = !DILocation(line: 105, column: 39, scope: !5)
!111 = !DILocation(line: 105, column: 64, scope: !5)
!112 = !DILocation(line: 105, column: 56, scope: !5)
!113 = !DILocation(line: 106, column: 35, scope: !5)
!114 = !DILocation(line: 106, column: 40, scope: !5)
!115 = !DILocation(line: 107, column: 35, scope: !5)
!116 = !DILocation(line: 107, column: 52, scope: !5)
!117 = !DILocation(line: 107, column: 112, scope: !5)
!118 = !DILocation(line: 109, column: 24, scope: !5)
!119 = !DILocation(line: 110, column: 24, scope: !5)
!120 = !DILocation(line: 111, column: 24, scope: !5)
!121 = !DILocation(line: 120, column: 24, scope: !5)
!122 = !DILocation(line: 121, column: 24, scope: !5)
!123 = !DILocation(line: 122, column: 24, scope: !5)
!124 = !DILocation(line: 124, column: 29, scope: !5)
!125 = !DILocation(line: 124, column: 53, scope: !5)
!126 = !DILocation(line: 101, column: 4, scope: !5)
