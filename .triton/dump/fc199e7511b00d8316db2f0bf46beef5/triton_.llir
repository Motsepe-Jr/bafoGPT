; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %7 = shl i32 %6, 1, !dbg !8
  %8 = and i32 %7, 254, !dbg !8
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %10 = shl i32 %9, 8, !dbg !10
  %11 = or i32 %10, %8, !dbg !11
  %12 = icmp slt i32 %11, 2304, !dbg !12
  %13 = sext i32 %11 to i64, !dbg !13
  %14 = getelementptr i16, ptr addrspace(1) %0, i64 %13, !dbg !13
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %12) #1, !dbg !14
  %16 = trunc i32 %15 to i16, !dbg !14
  %extelt.offset = lshr i32 %15, 16, !dbg !14
  %17 = trunc i32 %extelt.offset to i16, !dbg !14
  %18 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %16) #1, !dbg !15
  %19 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %17) #1, !dbg !15
  %20 = getelementptr i16, ptr addrspace(1) %1, i64 %13, !dbg !16
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %12) #1, !dbg !17
  %22 = trunc i32 %21 to i16, !dbg !17
  %extelt.offset1 = lshr i32 %21, 16, !dbg !17
  %23 = trunc i32 %extelt.offset1 to i16, !dbg !17
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #1, !dbg !18
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #1, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %12) #1, !dbg !20
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %30 = add i32 %11, 2304, !dbg !21
  %31 = sext i32 %30 to i64, !dbg !22
  %32 = getelementptr i16, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %12) #1, !dbg !23
  %34 = trunc i32 %33 to i16, !dbg !23
  %extelt.offset2 = lshr i32 %33, 16, !dbg !23
  %35 = trunc i32 %extelt.offset2 to i16, !dbg !23
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #1, !dbg !24
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #1, !dbg !24
  %38 = getelementptr i16, ptr addrspace(1) %1, i64 %31, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %12) #1, !dbg !26
  %40 = trunc i32 %39 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %39, 16, !dbg !26
  %41 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #1, !dbg !27
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #1, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !28
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %12) #1, !dbg !29
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !29
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !29
  %48 = add i32 %11, 4608, !dbg !30
  %49 = sext i32 %48 to i64, !dbg !31
  %50 = getelementptr i16, ptr addrspace(1) %0, i64 %49, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %12) #1, !dbg !32
  %52 = trunc i32 %51 to i16, !dbg !32
  %extelt.offset4 = lshr i32 %51, 16, !dbg !32
  %53 = trunc i32 %extelt.offset4 to i16, !dbg !32
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #1, !dbg !33
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #1, !dbg !33
  %56 = getelementptr i16, ptr addrspace(1) %1, i64 %49, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %12) #1, !dbg !35
  %58 = trunc i32 %57 to i16, !dbg !35
  %extelt.offset5 = lshr i32 %57, 16, !dbg !35
  %59 = trunc i32 %extelt.offset5 to i16, !dbg !35
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #1, !dbg !36
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #1, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !37
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %12) #1, !dbg !38
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !38
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !38
  %66 = add i32 %11, 6912, !dbg !39
  %67 = sext i32 %66 to i64, !dbg !40
  %68 = getelementptr i16, ptr addrspace(1) %0, i64 %67, !dbg !40
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %12) #1, !dbg !41
  %70 = trunc i32 %69 to i16, !dbg !41
  %extelt.offset6 = lshr i32 %69, 16, !dbg !41
  %71 = trunc i32 %extelt.offset6 to i16, !dbg !41
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #1, !dbg !42
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #1, !dbg !42
  %74 = getelementptr i16, ptr addrspace(1) %1, i64 %67, !dbg !43
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %12) #1, !dbg !44
  %76 = trunc i32 %75 to i16, !dbg !44
  %extelt.offset7 = lshr i32 %75, 16, !dbg !44
  %77 = trunc i32 %extelt.offset7 to i16, !dbg !44
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #1, !dbg !45
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #1, !dbg !45
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !46
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %80, i1 %12) #1, !dbg !47
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !47
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !47
  %84 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !20
  %85 = insertelement <2 x i32> %84, i32 %46, i64 1, !dbg !20
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !20
  %87 = insertelement <2 x float> poison, float %18, i64 0, !dbg !48
  %88 = insertelement <2 x float> %87, float %36, i64 1, !dbg !48
  %89 = insertelement <2 x float> poison, float %24, i64 0, !dbg !48
  %90 = insertelement <2 x float> %89, float %42, i64 1, !dbg !48
  %91 = fadd <2 x float> %88, %90, !dbg !48
  %92 = fmul <2 x float> %91, %86, !dbg !49
  %93 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %94 = insertelement <2 x i32> %93, i32 %47, i64 1, !dbg !20
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !20
  %96 = insertelement <2 x float> poison, float %19, i64 0, !dbg !48
  %97 = insertelement <2 x float> %96, float %37, i64 1, !dbg !48
  %98 = insertelement <2 x float> poison, float %25, i64 0, !dbg !48
  %99 = insertelement <2 x float> %98, float %43, i64 1, !dbg !48
  %100 = fadd <2 x float> %97, %99, !dbg !48
  %101 = fmul <2 x float> %100, %95, !dbg !49
  %shift = shufflevector <2 x float> %92, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %102 = fadd <2 x float> %92, %shift, !dbg !50
  %shift8 = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %103 = fadd <2 x float> %101, %shift8, !dbg !50
  %104 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !38
  %105 = insertelement <2 x i32> %104, i32 %82, i64 1, !dbg !38
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !38
  %107 = insertelement <2 x float> poison, float %54, i64 0, !dbg !51
  %108 = insertelement <2 x float> %107, float %72, i64 1, !dbg !51
  %109 = insertelement <2 x float> poison, float %60, i64 0, !dbg !51
  %110 = insertelement <2 x float> %109, float %78, i64 1, !dbg !51
  %111 = fadd <2 x float> %108, %110, !dbg !51
  %112 = fmul <2 x float> %111, %106, !dbg !52
  %113 = fadd <2 x float> %102, %112, !dbg !53
  %114 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !38
  %115 = insertelement <2 x i32> %114, i32 %83, i64 1, !dbg !38
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !38
  %117 = insertelement <2 x float> poison, float %55, i64 0, !dbg !51
  %118 = insertelement <2 x float> %117, float %73, i64 1, !dbg !51
  %119 = insertelement <2 x float> poison, float %61, i64 0, !dbg !51
  %120 = insertelement <2 x float> %119, float %79, i64 1, !dbg !51
  %121 = fadd <2 x float> %118, %120, !dbg !51
  %122 = fmul <2 x float> %121, %116, !dbg !52
  %123 = fadd <2 x float> %103, %122, !dbg !53
  %shift9 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %124 = fadd <2 x float> %113, %shift9, !dbg !54
  %shift10 = shufflevector <2 x float> %122, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %125 = fadd <2 x float> %123, %shift10, !dbg !54
  %126 = getelementptr float, ptr addrspace(1) %3, i64 %13, !dbg !55
  %bc = bitcast <2 x float> %124 to <2 x i32>, !dbg !56
  %127 = extractelement <2 x i32> %bc, i64 0, !dbg !56
  %bc11 = bitcast <2 x float> %125 to <2 x i32>, !dbg !56
  %128 = extractelement <2 x i32> %bc11, i64 0, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 %12) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c74qrbkf22yfgujdjvokdvoxf4nnybn6xrywctswoc36xttmhqaf.py", directory: "/tmp/torchinductor_zeus/74")
!3 = !{ptr @triton__0d1d2d3d4de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de", linkageName: "triton__0d1d2d3d4de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 22, column: 21, scope: !5)
!13 = !DILocation(line: 24, column: 30, scope: !5)
!14 = !DILocation(line: 24, column: 35, scope: !5)
!15 = !DILocation(line: 24, column: 45, scope: !5)
!16 = !DILocation(line: 25, column: 30, scope: !5)
!17 = !DILocation(line: 25, column: 35, scope: !5)
!18 = !DILocation(line: 25, column: 45, scope: !5)
!19 = !DILocation(line: 26, column: 30, scope: !5)
!20 = !DILocation(line: 26, column: 35, scope: !5)
!21 = !DILocation(line: 27, column: 37, scope: !5)
!22 = !DILocation(line: 27, column: 30, scope: !5)
!23 = !DILocation(line: 27, column: 42, scope: !5)
!24 = !DILocation(line: 27, column: 52, scope: !5)
!25 = !DILocation(line: 28, column: 30, scope: !5)
!26 = !DILocation(line: 28, column: 42, scope: !5)
!27 = !DILocation(line: 28, column: 52, scope: !5)
!28 = !DILocation(line: 29, column: 31, scope: !5)
!29 = !DILocation(line: 29, column: 43, scope: !5)
!30 = !DILocation(line: 30, column: 38, scope: !5)
!31 = !DILocation(line: 30, column: 31, scope: !5)
!32 = !DILocation(line: 30, column: 43, scope: !5)
!33 = !DILocation(line: 30, column: 53, scope: !5)
!34 = !DILocation(line: 31, column: 31, scope: !5)
!35 = !DILocation(line: 31, column: 43, scope: !5)
!36 = !DILocation(line: 31, column: 53, scope: !5)
!37 = !DILocation(line: 32, column: 31, scope: !5)
!38 = !DILocation(line: 32, column: 43, scope: !5)
!39 = !DILocation(line: 33, column: 38, scope: !5)
!40 = !DILocation(line: 33, column: 31, scope: !5)
!41 = !DILocation(line: 33, column: 43, scope: !5)
!42 = !DILocation(line: 33, column: 53, scope: !5)
!43 = !DILocation(line: 34, column: 31, scope: !5)
!44 = !DILocation(line: 34, column: 43, scope: !5)
!45 = !DILocation(line: 34, column: 53, scope: !5)
!46 = !DILocation(line: 35, column: 31, scope: !5)
!47 = !DILocation(line: 35, column: 43, scope: !5)
!48 = !DILocation(line: 38, column: 18, scope: !5)
!49 = !DILocation(line: 39, column: 18, scope: !5)
!50 = !DILocation(line: 44, column: 19, scope: !5)
!51 = !DILocation(line: 47, column: 20, scope: !5)
!52 = !DILocation(line: 48, column: 20, scope: !5)
!53 = !DILocation(line: 49, column: 20, scope: !5)
!54 = !DILocation(line: 54, column: 20, scope: !5)
!55 = !DILocation(line: 55, column: 25, scope: !5)
!56 = !DILocation(line: 55, column: 37, scope: !5)
!57 = !DILocation(line: 55, column: 4, scope: !5)
