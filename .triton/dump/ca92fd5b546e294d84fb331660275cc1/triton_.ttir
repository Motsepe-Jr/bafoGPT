module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d910de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg9: i32, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c4_i32 = arith.constant 4 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_1 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_3 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c4_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %5 = arith.muli %0, %c2304_i32 : i32
    %6 = tt.splat %5 : (i32) -> tensor<1x2048xi32>
    %7 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %8 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %9 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %10 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %11 = scf.for %arg11 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg12 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %53 = tt.splat %arg11 : (i32) -> tensor<1x2048xi32>
      %54 = arith.addi %53, %4 : tensor<1x2048xi32>
      %55 = arith.cmpi slt, %54, %cst_3 : tensor<1x2048xi32>
      %56 = arith.addi %54, %6 : tensor<1x2048xi32>
      %57 = tt.addptr %7, %56 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %58 = arith.andi %55, %8 : tensor<1x2048xi1>
      %59 = tt.load %57, %58, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %60 = arith.extf %59 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %61 = tt.addptr %9, %54 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %62 = tt.load %61, %55, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %63 = tt.addptr %10, %56 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %64 = tt.load %63, %58, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %65 = arith.addf %62, %cst_2 : tensor<1x2048xf32>
      %66 = arith.mulf %60, %65 : tensor<1x2048xf32>
      %67 = arith.mulf %66, %64 : tensor<1x2048xf32>
      %68 = arith.addf %arg12, %67 : tensor<1x2048xf32>
      %69 = arith.select %58, %68, %arg12 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %69 : tensor<1x2048xf32>
    }
    %12 = "tt.reduce"(%11) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32, %arg12: f32):
      %53 = arith.addf %arg11, %arg12 : f32
      tt.reduce.return %53 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %13 = tt.expand_dims %12 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %14 = tt.addptr %arg4, %0 : !tt.ptr<f32, 1>, i32
    %15 = tt.splat %14 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %16 = tt.load %15, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %17 = arith.muli %0, %c2304_i32 : i32
    %18 = tt.splat %17 : (i32) -> tensor<1x2048xi32>
    %19 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %20 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %21 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %22 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %23 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %24 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %25 = tt.splat %arg6 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %26 = tt.broadcast %16 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %27 = arith.mulf %13, %cst_1 : tensor<1x1xf32>
    %28 = arith.mulf %16, %16 : tensor<1x1xf32>
    %29 = arith.mulf %28, %16 : tensor<1x1xf32>
    %30 = arith.mulf %27, %29 : tensor<1x1xf32>
    %31 = arith.divf %30, %cst_0 : tensor<1x1xf32>
    %32 = tt.broadcast %31 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %33 = scf.for %arg11 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg12 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %53 = tt.splat %arg11 : (i32) -> tensor<1x2048xi32>
      %54 = arith.addi %53, %4 : tensor<1x2048xi32>
      %55 = arith.cmpi slt, %54, %cst_3 : tensor<1x2048xi32>
      %56 = arith.addi %54, %18 : tensor<1x2048xi32>
      %57 = tt.addptr %19, %56 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %58 = arith.andi %55, %20 : tensor<1x2048xi1>
      %59 = tt.load %57, %58, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %60 = tt.addptr %21, %56 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %61 = tt.load %60, %58, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %62 = arith.extf %61 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %63 = tt.addptr %22, %54 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %64 = tt.load %63, %55, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %65 = tt.addptr %23, %56 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %66 = tt.load %65, %58, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %67 = tt.addptr %24, %54 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %68 = tt.load %67, %55, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %69 = tt.addptr %25, %56 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %70 = tt.load %69, %58, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %71 = arith.extf %70 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %72 = arith.addf %64, %cst_2 : tensor<1x2048xf32>
      %73 = arith.mulf %62, %72 : tensor<1x2048xf32>
      %74 = arith.mulf %73, %26 : tensor<1x2048xf32>
      %75 = arith.addf %59, %74 : tensor<1x2048xf32>
      %76 = arith.mulf %32, %66 : tensor<1x2048xf32>
      %77 = arith.addf %75, %76 : tensor<1x2048xf32>
      %78 = arith.addf %77, %76 : tensor<1x2048xf32>
      %79 = arith.addf %68, %cst_2 : tensor<1x2048xf32>
      %80 = arith.mulf %78, %79 : tensor<1x2048xf32>
      %81 = arith.mulf %80, %71 : tensor<1x2048xf32>
      %82 = arith.addf %arg12, %81 : tensor<1x2048xf32>
      %83 = arith.select %58, %82, %arg12 : tensor<1x2048xi1>, tensor<1x2048xf32>
      tt.store %57, %78, %58 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32>
      scf.yield %83 : tensor<1x2048xf32>
    }
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32, %arg12: f32):
      %53 = arith.addf %arg11, %arg12 : f32
      tt.reduce.return %53 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %35 = tt.expand_dims %34 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %36 = tt.addptr %arg7, %0 : !tt.ptr<f32, 1>, i32
    %37 = tt.splat %36 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %38 = tt.load %37, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %39 = arith.muli %0, %c2304_i32 : i32
    %40 = tt.splat %39 : (i32) -> tensor<1x2048xi32>
    %41 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %42 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %43 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %44 = tt.splat %arg6 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %45 = tt.broadcast %38 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %46 = arith.mulf %35, %cst_1 : tensor<1x1xf32>
    %47 = arith.mulf %38, %38 : tensor<1x1xf32>
    %48 = arith.mulf %47, %38 : tensor<1x1xf32>
    %49 = arith.mulf %46, %48 : tensor<1x1xf32>
    %50 = arith.divf %49, %cst_0 : tensor<1x1xf32>
    %51 = tt.broadcast %50 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %52 = tt.splat %arg8 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg11 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %53 = tt.splat %arg11 : (i32) -> tensor<1x2048xi32>
      %54 = arith.addi %53, %4 : tensor<1x2048xi32>
      %55 = arith.cmpi slt, %54, %cst_3 : tensor<1x2048xi32>
      %56 = arith.addi %54, %40 : tensor<1x2048xi32>
      %57 = tt.addptr %41, %56 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %58 = arith.andi %55, %42 : tensor<1x2048xi1>
      %59 = tt.load %57, %58, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %60 = tt.addptr %43, %54 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %61 = tt.load %60, %55, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %62 = tt.addptr %44, %56 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %63 = tt.load %62, %58, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %64 = arith.extf %63 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %65 = arith.addf %61, %cst_2 : tensor<1x2048xf32>
      %66 = arith.mulf %59, %65 : tensor<1x2048xf32>
      %67 = arith.mulf %66, %45 : tensor<1x2048xf32>
      %68 = arith.mulf %51, %64 : tensor<1x2048xf32>
      %69 = arith.addf %67, %68 : tensor<1x2048xf32>
      %70 = arith.addf %69, %68 : tensor<1x2048xf32>
      %71 = tt.addptr %52, %56 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %72 = arith.truncf %70 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %71, %72, %58 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
