module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xbf16>
    %cst_0 = arith.constant dense<196608> : tensor<1x32xi32>
    %cst_1 = arith.constant dense<128> : tensor<32x1xi32>
    %cst_2 = arith.constant dense<65536> : tensor<1x32xi32>
    %cst_3 = arith.constant dense<-128> : tensor<32x1xi32>
    %cst_4 = arith.constant dense<-65536> : tensor<1x32xi32>
    %cst_5 = arith.constant dense<128> : tensor<32x1xi64>
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<32x32xf32>
    %cst_7 = arith.constant dense<256> : tensor<32x1xi64>
    %cst_8 = arith.constant dense<131072> : tensor<1x32xi32>
    %cst_9 = arith.constant dense<256> : tensor<1x32xi32>
    %cst_10 = arith.constant dense<262144> : tensor<1x32xi32>
    %cst_11 = arith.constant dense<512> : tensor<32x1xi32>
    %cst_12 = arith.constant dense<512> : tensor<1x32xi32>
    %cst_13 = arith.constant dense<256> : tensor<32x1xi32>
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c32_i32 : i32
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %4 = tt.splat %1 : (i32) -> tensor<1x32xi32>
    %5 = arith.addi %4, %3 : tensor<1x32xi32>
    %6 = tt.get_program_id x : i32
    %7 = arith.muli %6, %c32_i32 : i32
    %8 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %9 = tt.splat %7 : (i32) -> tensor<32x1xi32>
    %10 = arith.addi %9, %8 : tensor<32x1xi32>
    %11 = arith.cmpi slt, %10, %cst_13 : tensor<32x1xi32>
    %12 = arith.remsi %5, %cst_12 : tensor<1x32xi32>
    %13 = arith.divsi %5, %cst_12 : tensor<1x32xi32>
    %14 = arith.muli %10, %cst_11 : tensor<32x1xi32>
    %15 = tt.broadcast %12 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %16 = tt.broadcast %14 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %17 = arith.addi %15, %16 : tensor<32x32xi32>
    %18 = arith.muli %13, %cst_10 : tensor<1x32xi32>
    %19 = tt.broadcast %18 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %20 = arith.addi %17, %19 : tensor<32x32xi32>
    %21 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<32x32x!tt.ptr<bf16, 1>>
    %22 = tt.addptr %21, %20 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %23 = tt.broadcast %11 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %24 = tt.load %22, %23 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %25 = arith.extf %24 : tensor<32x32xbf16> to tensor<32x32xf32>
    %26 = arith.muli %12, %cst_9 : tensor<1x32xi32>
    %27 = tt.broadcast %10 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %28 = tt.broadcast %26 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %29 = arith.addi %27, %28 : tensor<32x32xi32>
    %30 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<32x32x!tt.ptr<f32, 1>>
    %31 = tt.addptr %30, %29 : tensor<32x32x!tt.ptr<f32, 1>>, tensor<32x32xi32>
    %32 = tt.load %31, %23 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xf32>
    %33 = arith.addi %12, %cst_8 : tensor<1x32xi32>
    %34 = tt.broadcast %33 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %35 = arith.addi %34, %16 : tensor<32x32xi32>
    %36 = arith.addi %35, %19 : tensor<32x32xi32>
    %37 = tt.addptr %21, %36 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %38 = tt.load %37, %23 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %39 = arith.extf %38 : tensor<32x32xbf16> to tensor<32x32xf32>
    %40 = arith.extsi %10 : tensor<32x1xi32> to tensor<32x1xi64>
    %41 = arith.cmpi sge, %40, %cst_7 : tensor<32x1xi64>
    %42 = arith.andi %41, %11 : tensor<32x1xi1>
    %43 = tt.broadcast %42 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %44 = tt.load %22, %43, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %45 = arith.extf %44 : tensor<32x32xbf16> to tensor<32x32xf32>
    %46 = tt.broadcast %41 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %47 = arith.select %46, %45, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %48 = arith.mulf %25, %32 : tensor<32x32xf32>
    %49 = arith.cmpi sge, %40, %cst_5 : tensor<32x1xi64>
    %50 = arith.addi %12, %cst_4 : tensor<1x32xi32>
    %51 = tt.broadcast %50 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %52 = arith.addi %51, %16 : tensor<32x32xi32>
    %53 = arith.addi %52, %19 : tensor<32x32xi32>
    %54 = tt.addptr %21, %53 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %55 = arith.andi %49, %11 : tensor<32x1xi1>
    %56 = tt.broadcast %55 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %57 = tt.load %54, %56, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %58 = arith.extf %57 : tensor<32x32xbf16> to tensor<32x32xf32>
    %59 = arith.addi %10, %cst_3 : tensor<32x1xi32>
    %60 = tt.broadcast %59 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %61 = arith.addi %60, %28 : tensor<32x32xi32>
    %62 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<32x32x!tt.ptr<f32, 1>>
    %63 = tt.addptr %62, %61 : tensor<32x32x!tt.ptr<f32, 1>>, tensor<32x32xi32>
    %64 = tt.load %63, %56, %cst_6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xf32>
    %65 = arith.mulf %58, %64 : tensor<32x32xf32>
    %66 = arith.subf %cst_6, %65 : tensor<32x32xf32>
    %67 = tt.broadcast %49 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %68 = arith.select %67, %66, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %69 = arith.addf %48, %68 : tensor<32x32xf32>
    %70 = arith.cmpi slt, %40, %cst_5 : tensor<32x1xi64>
    %71 = arith.addi %12, %cst_2 : tensor<1x32xi32>
    %72 = tt.broadcast %71 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %73 = arith.addi %72, %16 : tensor<32x32xi32>
    %74 = arith.addi %73, %19 : tensor<32x32xi32>
    %75 = tt.addptr %21, %74 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %76 = arith.andi %70, %11 : tensor<32x1xi1>
    %77 = tt.broadcast %76 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %78 = tt.load %75, %77, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %79 = arith.extf %78 : tensor<32x32xbf16> to tensor<32x32xf32>
    %80 = arith.addi %10, %cst_1 : tensor<32x1xi32>
    %81 = tt.broadcast %80 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %82 = arith.addi %81, %28 : tensor<32x32xi32>
    %83 = tt.addptr %62, %82 : tensor<32x32x!tt.ptr<f32, 1>>, tensor<32x32xi32>
    %84 = tt.load %83, %77, %cst_6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xf32>
    %85 = arith.mulf %79, %84 : tensor<32x32xf32>
    %86 = tt.broadcast %70 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %87 = arith.select %86, %85, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %88 = arith.addf %69, %87 : tensor<32x32xf32>
    %89 = arith.addf %47, %88 : tensor<32x32xf32>
    %90 = tt.load %37, %43, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %91 = arith.extf %90 : tensor<32x32xbf16> to tensor<32x32xf32>
    %92 = arith.select %46, %91, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %93 = arith.mulf %39, %32 : tensor<32x32xf32>
    %94 = tt.load %75, %56, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %95 = arith.extf %94 : tensor<32x32xbf16> to tensor<32x32xf32>
    %96 = arith.mulf %95, %64 : tensor<32x32xf32>
    %97 = arith.subf %cst_6, %96 : tensor<32x32xf32>
    %98 = arith.select %67, %97, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %99 = arith.addf %93, %98 : tensor<32x32xf32>
    %100 = arith.addi %12, %cst_0 : tensor<1x32xi32>
    %101 = tt.broadcast %100 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %102 = arith.addi %101, %16 : tensor<32x32xi32>
    %103 = arith.addi %102, %19 : tensor<32x32xi32>
    %104 = tt.addptr %21, %103 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %105 = tt.load %104, %77, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %106 = arith.extf %105 : tensor<32x32xbf16> to tensor<32x32xf32>
    %107 = arith.mulf %106, %84 : tensor<32x32xf32>
    %108 = arith.select %86, %107, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %109 = arith.addf %99, %108 : tensor<32x32xf32>
    %110 = arith.addf %92, %109 : tensor<32x32xf32>
    %111 = arith.addf %89, %110 : tensor<32x32xf32>
    %112 = arith.muli %13, %cst_8 : tensor<1x32xi32>
    %113 = tt.broadcast %112 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %114 = arith.addi %17, %113 : tensor<32x32xi32>
    %115 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<32x32x!tt.ptr<f32, 1>>
    %116 = tt.addptr %115, %114 : tensor<32x32x!tt.ptr<f32, 1>>, tensor<32x32xi32>
    tt.store %116, %111, %23 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32>
    tt.return
  }
}
