; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d78de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %10, 255, !dbg !8
  %11 = shl nuw nsw i32 %urem, 3, !dbg !8
  %12 = or i32 %11, 4, !dbg !8
  %13 = shl nuw nsw i32 %urem, 2, !dbg !8
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %15 = icmp slt i32 %14, 4, !dbg !10
  %16 = mul i32 %14, 2304, !dbg !11
  %17 = lshr i32 %10, 5, !dbg !8
  %18 = add i32 %11, %16, !dbg !12
  %19 = add i32 %12, %16, !dbg !12
  %20 = sext i32 %18 to i64, !dbg !13
  %21 = getelementptr i16, ptr addrspace(1) %0, i64 %20, !dbg !13
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !14
  %27 = trunc i32 %23 to i16, !dbg !14
  %extelt.offset5 = lshr i32 %23, 16, !dbg !14
  %28 = trunc i32 %extelt.offset5 to i16, !dbg !14
  %29 = trunc i32 %24 to i16, !dbg !14
  %extelt.offset6 = lshr i32 %24, 16, !dbg !14
  %30 = trunc i32 %extelt.offset6 to i16, !dbg !14
  %31 = trunc i32 %25 to i16, !dbg !14
  %extelt.offset7 = lshr i32 %25, 16, !dbg !14
  %32 = trunc i32 %extelt.offset7 to i16, !dbg !14
  %33 = trunc i32 %26 to i16, !dbg !14
  %extelt.offset8 = lshr i32 %26, 16, !dbg !14
  %34 = trunc i32 %extelt.offset8 to i16, !dbg !14
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #3, !dbg !15
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #3, !dbg !15
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #3, !dbg !15
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #3, !dbg !15
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #3, !dbg !15
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #3, !dbg !15
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #3, !dbg !15
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #3, !dbg !15
  %43 = zext nneg i32 %11 to i64, !dbg !16
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !16
  %45 = zext nneg i32 %12 to i64, !dbg !16
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !16
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !17
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !17
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !17
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !17
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !17
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !17
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !17
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !17
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !17
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !17
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !18
  %58 = sext i32 %19 to i64, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !18
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !19
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !19
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !19
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !19
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !19
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !19
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !19
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !19
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !19
  %70 = insertelement <8 x i32> poison, i32 %48, i64 0, !dbg !17
  %71 = insertelement <8 x i32> %70, i32 %49, i64 1, !dbg !17
  %72 = insertelement <8 x i32> %71, i32 %50, i64 2, !dbg !17
  %73 = insertelement <8 x i32> %72, i32 %51, i64 3, !dbg !17
  %74 = insertelement <8 x i32> %73, i32 %53, i64 4, !dbg !17
  %75 = insertelement <8 x i32> %74, i32 %54, i64 5, !dbg !17
  %76 = insertelement <8 x i32> %75, i32 %55, i64 6, !dbg !17
  %77 = insertelement <8 x i32> %76, i32 %56, i64 7, !dbg !17
  %78 = bitcast <8 x i32> %77 to <8 x float>, !dbg !17
  %79 = insertelement <8 x i32> poison, i32 %61, i64 0, !dbg !19
  %80 = insertelement <8 x i32> %79, i32 %62, i64 1, !dbg !19
  %81 = insertelement <8 x i32> %80, i32 %63, i64 2, !dbg !19
  %82 = insertelement <8 x i32> %81, i32 %64, i64 3, !dbg !19
  %83 = insertelement <8 x i32> %82, i32 %66, i64 4, !dbg !19
  %84 = insertelement <8 x i32> %83, i32 %67, i64 5, !dbg !19
  %85 = insertelement <8 x i32> %84, i32 %68, i64 6, !dbg !19
  %86 = insertelement <8 x i32> %85, i32 %69, i64 7, !dbg !19
  %87 = bitcast <8 x i32> %86 to <8 x float>, !dbg !19
  %88 = fadd <8 x float> %78, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !20
  %89 = insertelement <8 x float> poison, float %35, i64 0, !dbg !21
  %90 = insertelement <8 x float> %89, float %36, i64 1, !dbg !21
  %91 = insertelement <8 x float> %90, float %37, i64 2, !dbg !21
  %92 = insertelement <8 x float> %91, float %38, i64 3, !dbg !21
  %93 = insertelement <8 x float> %92, float %39, i64 4, !dbg !21
  %94 = insertelement <8 x float> %93, float %40, i64 5, !dbg !21
  %95 = insertelement <8 x float> %94, float %41, i64 6, !dbg !21
  %96 = insertelement <8 x float> %95, float %42, i64 7, !dbg !21
  %97 = fmul <8 x float> %96, %88, !dbg !21
  %98 = fmul <8 x float> %87, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !22
  %99 = fmul <8 x float> %97, %98, !dbg !23
  %100 = insertelement <8 x i1> poison, i1 %15, i64 0, !dbg !24
  %101 = shufflevector <8 x i1> %100, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !24
  %102 = fadd <8 x float> %99, zeroinitializer, !dbg !24
  %103 = select <8 x i1> %101, <8 x float> %102, <8 x float> zeroinitializer, !dbg !24
  %104 = or i32 %11, 2048, !dbg !25
  %105 = or i32 %11, 2052, !dbg !25
  %106 = icmp ult i32 %104, 2304, !dbg !26
  %107 = add i32 %104, %16, !dbg !12
  %108 = add i32 %105, %16, !dbg !12
  %109 = sext i32 %107 to i64, !dbg !13
  %110 = getelementptr i16, ptr addrspace(1) %0, i64 %109, !dbg !13
  %111 = and i1 %15, %106, !dbg !27
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #3, !dbg !14
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !14
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !14
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !14
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !14
  %117 = trunc i32 %113 to i16, !dbg !14
  %extelt.offset5.1 = lshr i32 %113, 16, !dbg !14
  %118 = trunc i32 %extelt.offset5.1 to i16, !dbg !14
  %119 = trunc i32 %114 to i16, !dbg !14
  %extelt.offset6.1 = lshr i32 %114, 16, !dbg !14
  %120 = trunc i32 %extelt.offset6.1 to i16, !dbg !14
  %121 = trunc i32 %115 to i16, !dbg !14
  %extelt.offset7.1 = lshr i32 %115, 16, !dbg !14
  %122 = trunc i32 %extelt.offset7.1 to i16, !dbg !14
  %123 = trunc i32 %116 to i16, !dbg !14
  %extelt.offset8.1 = lshr i32 %116, 16, !dbg !14
  %124 = trunc i32 %extelt.offset8.1 to i16, !dbg !14
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %117) #3, !dbg !15
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #3, !dbg !15
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #3, !dbg !15
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #3, !dbg !15
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #3, !dbg !15
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #3, !dbg !15
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %123) #3, !dbg !15
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #3, !dbg !15
  %133 = zext nneg i32 %104 to i64, !dbg !16
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !16
  %135 = zext nneg i32 %105 to i64, !dbg !16
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !16
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %134, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !17
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !17
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !17
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !17
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !17
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %136, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !17
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !17
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !17
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !17
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !17
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !18
  %148 = sext i32 %108 to i64, !dbg !18
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !18
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %147, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #3, !dbg !19
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !19
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !19
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !19
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !19
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #3, !dbg !19
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !19
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !19
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !19
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !19
  %160 = insertelement <8 x i32> poison, i32 %138, i64 0, !dbg !17
  %161 = insertelement <8 x i32> %160, i32 %139, i64 1, !dbg !17
  %162 = insertelement <8 x i32> %161, i32 %140, i64 2, !dbg !17
  %163 = insertelement <8 x i32> %162, i32 %141, i64 3, !dbg !17
  %164 = insertelement <8 x i32> %163, i32 %143, i64 4, !dbg !17
  %165 = insertelement <8 x i32> %164, i32 %144, i64 5, !dbg !17
  %166 = insertelement <8 x i32> %165, i32 %145, i64 6, !dbg !17
  %167 = insertelement <8 x i32> %166, i32 %146, i64 7, !dbg !17
  %168 = bitcast <8 x i32> %167 to <8 x float>, !dbg !17
  %169 = insertelement <8 x i32> poison, i32 %151, i64 0, !dbg !19
  %170 = insertelement <8 x i32> %169, i32 %152, i64 1, !dbg !19
  %171 = insertelement <8 x i32> %170, i32 %153, i64 2, !dbg !19
  %172 = insertelement <8 x i32> %171, i32 %154, i64 3, !dbg !19
  %173 = insertelement <8 x i32> %172, i32 %156, i64 4, !dbg !19
  %174 = insertelement <8 x i32> %173, i32 %157, i64 5, !dbg !19
  %175 = insertelement <8 x i32> %174, i32 %158, i64 6, !dbg !19
  %176 = insertelement <8 x i32> %175, i32 %159, i64 7, !dbg !19
  %177 = bitcast <8 x i32> %176 to <8 x float>, !dbg !19
  %178 = fadd <8 x float> %168, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !20
  %179 = insertelement <8 x float> poison, float %125, i64 0, !dbg !21
  %180 = insertelement <8 x float> %179, float %126, i64 1, !dbg !21
  %181 = insertelement <8 x float> %180, float %127, i64 2, !dbg !21
  %182 = insertelement <8 x float> %181, float %128, i64 3, !dbg !21
  %183 = insertelement <8 x float> %182, float %129, i64 4, !dbg !21
  %184 = insertelement <8 x float> %183, float %130, i64 5, !dbg !21
  %185 = insertelement <8 x float> %184, float %131, i64 6, !dbg !21
  %186 = insertelement <8 x float> %185, float %132, i64 7, !dbg !21
  %187 = fmul <8 x float> %186, %178, !dbg !21
  %188 = fmul <8 x float> %177, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !22
  %189 = fmul <8 x float> %187, %188, !dbg !23
  %190 = insertelement <8 x i1> poison, i1 %111, i64 0, !dbg !24
  %191 = shufflevector <8 x i1> %190, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !24
  %192 = select <8 x i1> %191, <8 x float> %189, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !24
  %193 = fadd <8 x float> %103, %192, !dbg !24
  %194 = and i32 %10, 31, !dbg !8
  %195 = and i32 %17, 7, !dbg !8
  %196 = or i32 %13, 1024, !dbg !8
  %shift = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %197 = fadd <8 x float> %193, %shift, !dbg !28
  %shift30 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %198 = fadd <8 x float> %shift30, %197, !dbg !28
  %shift31 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %199 = fadd <8 x float> %shift31, %198, !dbg !28
  %shift32 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %200 = fadd <8 x float> %shift32, %199, !dbg !28
  %shift33 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %201 = fadd <8 x float> %shift33, %200, !dbg !28
  %shift34 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %202 = fadd <8 x float> %shift34, %201, !dbg !28
  %shift35 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %203 = fadd <8 x float> %shift35, %202, !dbg !28
  %204 = extractelement <8 x float> %203, i64 0, !dbg !28
  %205 = bitcast float %204 to i32, !dbg !34
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 16, i32 31), !dbg !34
  %207 = bitcast i32 %206 to float, !dbg !34
  %208 = fadd float %204, %207, !dbg !28
  %209 = bitcast float %208 to i32, !dbg !34
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 8, i32 31), !dbg !34
  %211 = bitcast i32 %210 to float, !dbg !34
  %212 = fadd float %208, %211, !dbg !28
  %213 = bitcast float %212 to i32, !dbg !34
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 4, i32 31), !dbg !34
  %215 = bitcast i32 %214 to float, !dbg !34
  %216 = fadd float %212, %215, !dbg !28
  %217 = bitcast float %216 to i32, !dbg !34
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 2, i32 31), !dbg !34
  %219 = bitcast i32 %218 to float, !dbg !34
  %220 = fadd float %216, %219, !dbg !28
  %221 = bitcast float %220 to i32, !dbg !34
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 1, i32 31), !dbg !34
  %223 = bitcast i32 %222 to float, !dbg !34
  %224 = fadd float %220, %223, !dbg !28
  %225 = icmp eq i32 %194, 0, !dbg !34
  %226 = zext nneg i32 %195 to i64, !dbg !34
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i64 %226, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, float %224, i1 %225) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %228 = icmp slt i32 %10, 8, !dbg !34
  %229 = sext i32 %10 to i64, !dbg !34
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i64 %229, !dbg !34
  %231 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %230, i1 %228) #3, !dbg !34
  %232 = bitcast float %231 to i32, !dbg !34
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 4, i32 31), !dbg !34
  %234 = bitcast i32 %233 to float, !dbg !34
  %235 = fadd float %231, %234, !dbg !28
  %236 = bitcast float %235 to i32, !dbg !34
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 2, i32 31), !dbg !34
  %238 = bitcast i32 %237 to float, !dbg !34
  %239 = fadd float %235, %238, !dbg !28
  %240 = bitcast float %239 to i32, !dbg !34
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 1, i32 31), !dbg !34
  %242 = bitcast i32 %241 to float, !dbg !34
  %243 = fadd float %239, %242, !dbg !28
  %244 = and i32 %10, 7, !dbg !34
  %245 = icmp eq i32 %244, 0, !dbg !34
  %246 = and i1 %228, %245, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, float %243, i1 %246) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %247 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !34
  %248 = sext i32 %14 to i64, !dbg !36
  %249 = getelementptr i64, ptr addrspace(1) %3, i64 %248, !dbg !36
  %250 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %251 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %252 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %253 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %254 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %255 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %256 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %257 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %258 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %259 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %260 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %261 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %249, i1 %15) #3, !dbg !37
  %262 = getelementptr float, ptr addrspace(1) %5, i64 %248, !dbg !38
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 %15) #3, !dbg !39
  %264 = bitcast i32 %263 to float, !dbg !39
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 %15) #3, !dbg !39
  %266 = bitcast i32 %265 to float, !dbg !39
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 %15) #3, !dbg !39
  %268 = bitcast i32 %267 to float, !dbg !39
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 %15) #3, !dbg !39
  %270 = bitcast i32 %269 to float, !dbg !39
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 %15) #3, !dbg !39
  %272 = bitcast i32 %271 to float, !dbg !39
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 %15) #3, !dbg !39
  %274 = bitcast i32 %273 to float, !dbg !39
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 %15) #3, !dbg !39
  %276 = bitcast i32 %275 to float, !dbg !39
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 %15) #3, !dbg !39
  %278 = bitcast i32 %277 to float, !dbg !39
  %279 = add i64 %258, 288256, !dbg !40
  %280 = icmp slt i64 %258, 0, !dbg !41
  %281 = select i1 %280, i64 %279, i64 %258, !dbg !42
  %282 = icmp eq i64 %250, -1, !dbg !43
  %283 = fmul float %247, -5.000000e-01, !dbg !44
  %284 = fmul float %264, %264, !dbg !45
  %285 = fmul float %266, %266, !dbg !45
  %286 = fmul float %268, %268, !dbg !45
  %287 = fmul float %270, %270, !dbg !45
  %288 = fmul float %272, %272, !dbg !45
  %289 = fmul float %274, %274, !dbg !45
  %290 = fmul float %276, %276, !dbg !45
  %291 = fmul float %278, %278, !dbg !45
  %292 = fmul float %284, %264, !dbg !46
  %293 = fmul float %285, %266, !dbg !46
  %294 = fmul float %286, %268, !dbg !46
  %295 = fmul float %287, %270, !dbg !46
  %296 = fmul float %288, %272, !dbg !46
  %297 = fmul float %289, %274, !dbg !46
  %298 = fmul float %290, %276, !dbg !46
  %299 = fmul float %291, %278, !dbg !46
  %300 = fmul float %283, %292, !dbg !47
  %301 = fmul float %283, %293, !dbg !47
  %302 = fmul float %283, %294, !dbg !47
  %303 = fmul float %283, %295, !dbg !47
  %304 = fmul float %283, %296, !dbg !47
  %305 = fmul float %283, %297, !dbg !47
  %306 = fmul float %283, %298, !dbg !47
  %307 = fmul float %283, %299, !dbg !47
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %300, float 2.304000e+03) #3, !dbg !48
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %301, float 2.304000e+03) #3, !dbg !48
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %302, float 2.304000e+03) #3, !dbg !48
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float 2.304000e+03) #3, !dbg !48
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float 2.304000e+03) #3, !dbg !48
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %305, float 2.304000e+03) #3, !dbg !48
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float 2.304000e+03) #3, !dbg !48
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #3, !dbg !48
  %316 = mul i64 %281, 2304, !dbg !49
  %317 = getelementptr float, ptr addrspace(1) %6, i64 %316
  %318 = zext nneg i32 %11 to i64
  %319 = getelementptr float, ptr addrspace(3) @global_smem, i64 %318
  %320 = zext nneg i32 %13 to i64
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320
  %322 = zext nneg i32 %196 to i64
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i64 %322
  %324 = insertelement <8 x i1> poison, i1 %282, i64 0, !dbg !50
  %325 = shufflevector <8 x i1> %324, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !50
  %326 = insertelement <8 x float> poison, float %308, i64 0, !dbg !51
  %327 = shufflevector <8 x float> %326, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !51
  %328 = insertelement <8 x float> poison, float %264, i64 0, !dbg !52
  %329 = shufflevector <8 x float> %328, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !52
  br label %330, !dbg !53

330:                                              ; preds = %9, %330
  %331 = phi i1 [ true, %9 ], [ false, %330 ]
  %332 = phi i32 [ 0, %9 ], [ 2048, %330 ]
  %333 = or i32 %332, %11, !dbg !54
  %334 = or i32 %332, %12, !dbg !54
  %335 = or i32 %332, %13, !dbg !54
  %336 = or i32 %335, 1, !dbg !54
  %337 = or i32 %335, 2, !dbg !54
  %338 = or i32 %335, 3, !dbg !54
  %339 = or i32 %332, %196, !dbg !54
  %340 = or i32 %335, 1025, !dbg !54
  %341 = or i32 %335, 1026, !dbg !54
  %342 = or i32 %335, 1027, !dbg !54
  %343 = icmp ult i32 %333, 2304, !dbg !55
  %344 = icmp ult i32 %335, 2304, !dbg !55
  %345 = icmp ult i32 %339, 2304, !dbg !55
  %346 = add i32 %333, %16, !dbg !56
  %347 = add i32 %334, %16, !dbg !56
  %348 = sext i32 %346 to i64, !dbg !57
  %349 = getelementptr float, ptr addrspace(1) %4, i64 %348, !dbg !57
  %350 = sext i32 %347 to i64, !dbg !57
  %351 = getelementptr float, ptr addrspace(1) %4, i64 %350, !dbg !57
  %352 = and i1 %15, %343, !dbg !58
  %353 = and i1 %15, %344, !dbg !58
  %354 = and i1 %15, %345, !dbg !58
  %355 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %349, i1 %352, i32 0, i1 %352, i32 0, i1 %352, i32 0, i1 %352, i32 0, i1 %352) #3, !dbg !59
  %356 = extractvalue { i32, i32, i32, i32 } %355, 0, !dbg !59
  %357 = extractvalue { i32, i32, i32, i32 } %355, 1, !dbg !59
  %358 = extractvalue { i32, i32, i32, i32 } %355, 2, !dbg !59
  %359 = extractvalue { i32, i32, i32, i32 } %355, 3, !dbg !59
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %351, i1 %352, i32 0, i1 %352, i32 0, i1 %352, i32 0, i1 %352, i32 0, i1 %352) #3, !dbg !59
  %361 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !59
  %362 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !59
  %363 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !59
  %364 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !59
  %365 = getelementptr i16, ptr addrspace(1) %0, i64 %348, !dbg !60
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %365, i1 %352, i32 0, i1 %352, i32 0, i1 %352, i32 0, i1 %352, i32 0, i1 %352) #3, !dbg !61
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !61
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !61
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !61
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !61
  %371 = trunc i32 %367 to i16, !dbg !61
  %extelt.offset = lshr i32 %367, 16, !dbg !61
  %372 = trunc i32 %extelt.offset to i16, !dbg !61
  %373 = trunc i32 %368 to i16, !dbg !61
  %extelt.offset2 = lshr i32 %368, 16, !dbg !61
  %374 = trunc i32 %extelt.offset2 to i16, !dbg !61
  %375 = trunc i32 %369 to i16, !dbg !61
  %extelt.offset3 = lshr i32 %369, 16, !dbg !61
  %376 = trunc i32 %extelt.offset3 to i16, !dbg !61
  %377 = trunc i32 %370 to i16, !dbg !61
  %extelt.offset4 = lshr i32 %370, 16, !dbg !61
  %378 = trunc i32 %extelt.offset4 to i16, !dbg !61
  %379 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %371) #3, !dbg !62
  %380 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %372) #3, !dbg !62
  %381 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %373) #3, !dbg !62
  %382 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %374) #3, !dbg !62
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #3, !dbg !62
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %376) #3, !dbg !62
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #3, !dbg !62
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %378) #3, !dbg !62
  %387 = zext nneg i32 %333 to i64, !dbg !63
  %388 = getelementptr float, ptr addrspace(1) %1, i64 %387, !dbg !63
  %389 = zext nneg i32 %334 to i64, !dbg !63
  %390 = getelementptr float, ptr addrspace(1) %1, i64 %389, !dbg !63
  %391 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %388, i1 %343, i32 0, i1 %343, i32 0, i1 %343, i32 0, i1 %343, i32 0, i1 %343) #3, !dbg !64
  %392 = extractvalue { i32, i32, i32, i32 } %391, 0, !dbg !64
  %393 = extractvalue { i32, i32, i32, i32 } %391, 1, !dbg !64
  %394 = extractvalue { i32, i32, i32, i32 } %391, 2, !dbg !64
  %395 = extractvalue { i32, i32, i32, i32 } %391, 3, !dbg !64
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %390, i1 %343, i32 0, i1 %343, i32 0, i1 %343, i32 0, i1 %343, i32 0, i1 %343) #3, !dbg !64
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !64
  %398 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !64
  %399 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !64
  %400 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !64
  %401 = getelementptr float, ptr addrspace(1) %2, i64 %348, !dbg !65
  %402 = getelementptr float, ptr addrspace(1) %2, i64 %350, !dbg !65
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %401, i1 %352, i32 0, i1 %352, i32 0, i1 %352, i32 0, i1 %352, i32 0, i1 %352) #3, !dbg !66
  %404 = extractvalue { i32, i32, i32, i32 } %403, 0, !dbg !66
  %405 = extractvalue { i32, i32, i32, i32 } %403, 1, !dbg !66
  %406 = extractvalue { i32, i32, i32, i32 } %403, 2, !dbg !66
  %407 = extractvalue { i32, i32, i32, i32 } %403, 3, !dbg !66
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %402, i1 %352, i32 0, i1 %352, i32 0, i1 %352, i32 0, i1 %352, i32 0, i1 %352) #3, !dbg !66
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !66
  %410 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !66
  %411 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !66
  %412 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !66
  %413 = insertelement <8 x i32> poison, i32 %356, i64 0, !dbg !59
  %414 = insertelement <8 x i32> %413, i32 %357, i64 1, !dbg !59
  %415 = insertelement <8 x i32> %414, i32 %358, i64 2, !dbg !59
  %416 = insertelement <8 x i32> %415, i32 %359, i64 3, !dbg !59
  %417 = insertelement <8 x i32> %416, i32 %361, i64 4, !dbg !59
  %418 = insertelement <8 x i32> %417, i32 %362, i64 5, !dbg !59
  %419 = insertelement <8 x i32> %418, i32 %363, i64 6, !dbg !59
  %420 = insertelement <8 x i32> %419, i32 %364, i64 7, !dbg !59
  %421 = bitcast <8 x i32> %420 to <8 x float>, !dbg !59
  %422 = insertelement <8 x i32> poison, i32 %392, i64 0, !dbg !64
  %423 = insertelement <8 x i32> %422, i32 %393, i64 1, !dbg !64
  %424 = insertelement <8 x i32> %423, i32 %394, i64 2, !dbg !64
  %425 = insertelement <8 x i32> %424, i32 %395, i64 3, !dbg !64
  %426 = insertelement <8 x i32> %425, i32 %397, i64 4, !dbg !64
  %427 = insertelement <8 x i32> %426, i32 %398, i64 5, !dbg !64
  %428 = insertelement <8 x i32> %427, i32 %399, i64 6, !dbg !64
  %429 = insertelement <8 x i32> %428, i32 %400, i64 7, !dbg !64
  %430 = bitcast <8 x i32> %429 to <8 x float>, !dbg !64
  %431 = insertelement <8 x i32> poison, i32 %404, i64 0, !dbg !66
  %432 = insertelement <8 x i32> %431, i32 %405, i64 1, !dbg !66
  %433 = insertelement <8 x i32> %432, i32 %406, i64 2, !dbg !66
  %434 = insertelement <8 x i32> %433, i32 %407, i64 3, !dbg !66
  %435 = insertelement <8 x i32> %434, i32 %409, i64 4, !dbg !66
  %436 = insertelement <8 x i32> %435, i32 %410, i64 5, !dbg !66
  %437 = insertelement <8 x i32> %436, i32 %411, i64 6, !dbg !66
  %438 = insertelement <8 x i32> %437, i32 %412, i64 7, !dbg !66
  %439 = bitcast <8 x i32> %438 to <8 x float>, !dbg !66
  %440 = fadd <8 x float> %430, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !67
  %441 = insertelement <8 x float> poison, float %379, i64 0, !dbg !68
  %442 = insertelement <8 x float> %441, float %380, i64 1, !dbg !68
  %443 = insertelement <8 x float> %442, float %381, i64 2, !dbg !68
  %444 = insertelement <8 x float> %443, float %382, i64 3, !dbg !68
  %445 = insertelement <8 x float> %444, float %383, i64 4, !dbg !68
  %446 = insertelement <8 x float> %445, float %384, i64 5, !dbg !68
  %447 = insertelement <8 x float> %446, float %385, i64 6, !dbg !68
  %448 = insertelement <8 x float> %447, float %386, i64 7, !dbg !68
  %449 = fmul <8 x float> %448, %440, !dbg !68
  %450 = fmul <8 x float> %449, %329, !dbg !52
  %451 = fadd <8 x float> %450, %421, !dbg !69
  %452 = fmul <8 x float> %439, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !70
  %453 = fmul <8 x float> %327, %452, !dbg !51
  %454 = fadd <8 x float> %451, %453, !dbg !71
  %455 = fadd <8 x float> %453, %454, !dbg !72
  %456 = fmul <8 x float> %455, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !73
  %457 = select <8 x i1> %325, <8 x float> zeroinitializer, <8 x float> %456, !dbg !50
  %458 = zext nneg i32 %335 to i64, !dbg !74
  %459 = zext nneg i32 %336 to i64, !dbg !74
  %460 = zext nneg i32 %337 to i64, !dbg !74
  %461 = zext nneg i32 %338 to i64, !dbg !74
  %462 = zext nneg i32 %339 to i64, !dbg !74
  %463 = zext nneg i32 %340 to i64, !dbg !74
  %464 = zext nneg i32 %341 to i64, !dbg !74
  %465 = zext nneg i32 %342 to i64, !dbg !74
  %466 = getelementptr float, ptr addrspace(1) %317, i64 %458, !dbg !75
  %467 = getelementptr float, ptr addrspace(1) %317, i64 %459, !dbg !75
  %468 = getelementptr float, ptr addrspace(1) %317, i64 %460, !dbg !75
  %469 = getelementptr float, ptr addrspace(1) %317, i64 %461, !dbg !75
  %470 = getelementptr float, ptr addrspace(1) %317, i64 %462, !dbg !75
  %471 = getelementptr float, ptr addrspace(1) %317, i64 %463, !dbg !75
  %472 = getelementptr float, ptr addrspace(1) %317, i64 %464, !dbg !75
  %473 = getelementptr float, ptr addrspace(1) %317, i64 %465, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  store <8 x float> %457, ptr addrspace(3) %319, align 32, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %474 = load <4 x float>, ptr addrspace(3) %321, align 16, !dbg !76
  %475 = load <4 x float>, ptr addrspace(3) %323, align 16, !dbg !76
  %476 = shufflevector <4 x float> %474, <4 x float> undef, <1 x i32> zeroinitializer, !dbg !76
  %477 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %466, <1 x float> %476, i1 %353) #3, !dbg !76
  %478 = shufflevector <4 x float> %474, <4 x float> undef, <1 x i32> <i32 1>, !dbg !76
  %479 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %467, <1 x float> %478, i1 %353) #3, !dbg !76
  %480 = shufflevector <4 x float> %474, <4 x float> undef, <1 x i32> <i32 2>, !dbg !76
  %481 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %468, <1 x float> %480, i1 %353) #3, !dbg !76
  %482 = shufflevector <4 x float> %474, <4 x float> undef, <1 x i32> <i32 3>, !dbg !76
  %483 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %469, <1 x float> %482, i1 %353) #3, !dbg !76
  %484 = shufflevector <4 x float> %475, <4 x float> undef, <1 x i32> zeroinitializer, !dbg !76
  %485 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %470, <1 x float> %484, i1 %354) #3, !dbg !76
  %486 = shufflevector <4 x float> %475, <4 x float> undef, <1 x i32> <i32 1>, !dbg !76
  %487 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %471, <1 x float> %486, i1 %354) #3, !dbg !76
  %488 = shufflevector <4 x float> %475, <4 x float> undef, <1 x i32> <i32 2>, !dbg !76
  %489 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %472, <1 x float> %488, i1 %354) #3, !dbg !76
  %490 = shufflevector <4 x float> %475, <4 x float> undef, <1 x i32> <i32 3>, !dbg !76
  %491 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %473, <1 x float> %490, i1 %354) #3, !dbg !76
  br i1 %331, label %330, label %492, !dbg !53

492:                                              ; preds = %330
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cgorfkbkejwlvo6d523l5x7xmx4hif4h7ylq6beknlc7ab6grytf.py", directory: "/tmp/torchinductor_zeus/go")
!3 = !{ptr @triton__0d1d2d3d4d5d6d78de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d78de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d78de", linkageName: "triton__0d1d2d3d4d5d6d78de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 31, column: 45, scope: !5)
!12 = !DILocation(line: 31, column: 40, scope: !5)
!13 = !DILocation(line: 31, column: 34, scope: !5)
!14 = !DILocation(line: 31, column: 51, scope: !5)
!15 = !DILocation(line: 31, column: 110, scope: !5)
!16 = !DILocation(line: 32, column: 34, scope: !5)
!17 = !DILocation(line: 32, column: 39, scope: !5)
!18 = !DILocation(line: 33, column: 34, scope: !5)
!19 = !DILocation(line: 33, column: 51, scope: !5)
!20 = !DILocation(line: 36, column: 22, scope: !5)
!21 = !DILocation(line: 37, column: 22, scope: !5)
!22 = !DILocation(line: 39, column: 22, scope: !5)
!23 = !DILocation(line: 40, column: 22, scope: !5)
!24 = !DILocation(line: 43, column: 48, scope: !5)
!25 = !DILocation(line: 28, column: 27, scope: !5)
!26 = !DILocation(line: 29, column: 25, scope: !5)
!27 = !DILocation(line: 31, column: 59, scope: !5)
!28 = !DILocation(line: 233, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !5, file: !30, discriminator: 0)
!32 = !DILocation(line: 243, column: 36, scope: !29, inlinedAt: !33)
!33 = !DILocation(line: 44, column: 27, scope: !29)
!34 = !DILocation(line: 243, column: 36, scope: !31, inlinedAt: !35)
!35 = !DILocation(line: 44, column: 27, scope: !31)
!36 = !DILocation(line: 45, column: 31, scope: !5)
!37 = !DILocation(line: 45, column: 36, scope: !5)
!38 = !DILocation(line: 46, column: 31, scope: !5)
!39 = !DILocation(line: 46, column: 36, scope: !5)
!40 = !DILocation(line: 55, column: 24, scope: !5)
!41 = !DILocation(line: 56, column: 24, scope: !5)
!42 = !DILocation(line: 57, column: 39, scope: !5)
!43 = !DILocation(line: 59, column: 25, scope: !5)
!44 = !DILocation(line: 67, column: 24, scope: !5)
!45 = !DILocation(line: 68, column: 24, scope: !5)
!46 = !DILocation(line: 69, column: 24, scope: !5)
!47 = !DILocation(line: 70, column: 24, scope: !5)
!48 = !DILocation(line: 72, column: 24, scope: !5)
!49 = !DILocation(line: 81, column: 61, scope: !5)
!50 = !DILocation(line: 80, column: 39, scope: !5)
!51 = !DILocation(line: 75, column: 24, scope: !5)
!52 = !DILocation(line: 64, column: 24, scope: !5)
!53 = !DILocation(line: 47, column: 36, scope: !5)
!54 = !DILocation(line: 48, column: 27, scope: !5)
!55 = !DILocation(line: 49, column: 25, scope: !5)
!56 = !DILocation(line: 51, column: 41, scope: !5)
!57 = !DILocation(line: 51, column: 35, scope: !5)
!58 = !DILocation(line: 51, column: 60, scope: !5)
!59 = !DILocation(line: 51, column: 52, scope: !5)
!60 = !DILocation(line: 52, column: 35, scope: !5)
!61 = !DILocation(line: 52, column: 52, scope: !5)
!62 = !DILocation(line: 52, column: 112, scope: !5)
!63 = !DILocation(line: 53, column: 35, scope: !5)
!64 = !DILocation(line: 53, column: 40, scope: !5)
!65 = !DILocation(line: 54, column: 35, scope: !5)
!66 = !DILocation(line: 54, column: 52, scope: !5)
!67 = !DILocation(line: 62, column: 24, scope: !5)
!68 = !DILocation(line: 63, column: 24, scope: !5)
!69 = !DILocation(line: 65, column: 24, scope: !5)
!70 = !DILocation(line: 74, column: 24, scope: !5)
!71 = !DILocation(line: 76, column: 24, scope: !5)
!72 = !DILocation(line: 77, column: 24, scope: !5)
!73 = !DILocation(line: 78, column: 24, scope: !5)
!74 = !DILocation(line: 81, column: 56, scope: !5)
!75 = !DILocation(line: 81, column: 34, scope: !5)
!76 = !DILocation(line: 81, column: 96, scope: !5)
!77 = !DILocation(line: 47, column: 4, scope: !5)
