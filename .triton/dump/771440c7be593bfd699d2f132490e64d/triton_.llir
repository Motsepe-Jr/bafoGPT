; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 5, !dbg !10
  %urem = and i32 %7, 255, !dbg !10
  %9 = shl nuw nsw i32 %urem, 3, !dbg !10
  %10 = shl nuw nsw i32 %urem, 2, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %12 = srem i32 %11, 8192, !dbg !12
  %13 = shl i32 %11, 13, !dbg !13
  %14 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !14
  %15 = shufflevector <2 x i32> %14, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !14
  %16 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !14
  %17 = shufflevector <4 x i32> %16, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !14
  br label %18, !dbg !15

18:                                               ; preds = %6, %__nv_tanhf.exit176
  %19 = phi float [ 0xFFF0000000000000, %6 ], [ %386, %__nv_tanhf.exit176 ]
  %20 = phi float [ 0xFFF0000000000000, %6 ], [ %387, %__nv_tanhf.exit176 ]
  %21 = phi i32 [ 0, %6 ], [ %416, %__nv_tanhf.exit176 ]
  %22 = phi <2 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000>, %6 ], [ %385, %__nv_tanhf.exit176 ]
  %23 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, %6 ], [ %388, %__nv_tanhf.exit176 ]
  %24 = or i32 %21, %9, !dbg !16
  %25 = or i32 %24, 1, !dbg !16
  %26 = or i32 %24, 2, !dbg !16
  %27 = or i32 %24, 3, !dbg !16
  %28 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !16
  %29 = shufflevector <4 x i32> %28, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !16
  %30 = or <4 x i32> %29, <i32 7, i32 6, i32 5, i32 4>, !dbg !16
  %31 = add i32 %24, %13, !dbg !17
  %32 = sext i32 %31 to i64, !dbg !18
  %33 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %39 = trunc i32 %35 to i16, !dbg !19
  %extelt.offset24 = lshr i32 %35, 16, !dbg !19
  %40 = trunc i32 %extelt.offset24 to i16, !dbg !19
  %41 = trunc i32 %36 to i16, !dbg !19
  %extelt.offset25 = lshr i32 %36, 16, !dbg !19
  %42 = trunc i32 %extelt.offset25 to i16, !dbg !19
  %43 = trunc i32 %37 to i16, !dbg !19
  %extelt.offset26 = lshr i32 %37, 16, !dbg !19
  %44 = trunc i32 %extelt.offset26 to i16, !dbg !19
  %45 = trunc i32 %38 to i16, !dbg !19
  %extelt.offset27 = lshr i32 %38, 16, !dbg !19
  %46 = trunc i32 %extelt.offset27 to i16, !dbg !19
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #6, !dbg !20
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #6, !dbg !20
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #6, !dbg !20
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #6, !dbg !20
  %51 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #6, !dbg !20
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #6, !dbg !20
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #6, !dbg !20
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #6, !dbg !20
  %55 = fmul float %47, 6.250000e-02, !dbg !21
  %56 = fmul float %48, 6.250000e-02, !dbg !21
  %57 = fmul float %49, 6.250000e-02, !dbg !21
  %58 = fmul float %50, 6.250000e-02, !dbg !21
  %59 = fmul float %51, 6.250000e-02, !dbg !21
  %60 = fmul float %52, 6.250000e-02, !dbg !21
  %61 = fmul float %53, 6.250000e-02, !dbg !21
  %62 = fmul float %54, 6.250000e-02, !dbg !21
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 5.000000e+01) #6, !dbg !22
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 5.000000e+01) #6, !dbg !22
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 5.000000e+01) #6, !dbg !22
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 5.000000e+01) #6, !dbg !22
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 5.000000e+01) #6, !dbg !22
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 5.000000e+01) #6, !dbg !22
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 5.000000e+01) #6, !dbg !22
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 5.000000e+01) #6, !dbg !22
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i = icmp eq i32 %71, 0, !dbg !23
  %72 = tail call float @llvm.nvvm.fabs.ftz.f(float %63) #6, !dbg !23
  %73 = tail call float @llvm.nvvm.fabs.f(float %63) #6, !dbg !23
  %.01.i = select i1 %.not.i, float %73, float %72, !dbg !23
  %74 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !23
  br i1 %74, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !23

__internal_fmad.exit1.i:                          ; preds = %18
  %75 = fmul float %.01.i, 0x4007154760000000, !dbg !23
  %76 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %75) #6, !dbg !23
  %77 = fadd float %76, 1.000000e+00, !dbg !23
  %78 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %77) #7, !dbg !23, !srcloc !24
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i = icmp eq i32 %79, 0, !dbg !23
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %78, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %78, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i = select i1 %.not6.i, float %81, float %80, !dbg !23
  %82 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !23
  %s.0.i = select i1 %82, float 1.000000e+00, float %.03.i, !dbg !23
  %83 = bitcast float %s.0.i to i32, !dbg !23
  %84 = bitcast float %63 to i32, !dbg !23
  %85 = and i32 %84, -2147483648, !dbg !23
  %86 = or i32 %85, %83, !dbg !23
  %87 = bitcast i32 %86 to float, !dbg !23
  br label %__nv_tanhf.exit, !dbg !23

__internal_fmad.exit3.i:                          ; preds = %18
  %88 = fmul float %63, %63, !dbg !23
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i = icmp eq i32 %89, 0, !dbg !23
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %88, float 0xBFAAC795C0000000) #6, !dbg !23
  %91 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %88, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i = select i1 %.not1.i, float %91, float %90, !dbg !23
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i = icmp eq i32 %92, 0, !dbg !23
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %88, float 0x3FC10B2820000000) #6, !dbg !23
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %88, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i = select i1 %.not2.i, float %94, float %93, !dbg !23
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i = icmp eq i32 %95, 0, !dbg !23
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %88, float 0xBFD5553DA0000000) #6, !dbg !23
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %88, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i = select i1 %.not3.i, float %97, float %96, !dbg !23
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i = icmp eq i32 %98, 0, !dbg !23
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %88, float 0.000000e+00) #6, !dbg !23
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %88, float 0.000000e+00) #6, !dbg !23
  %.04.i = select i1 %.not4.i, float %100, float %99, !dbg !23
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i = icmp eq i32 %101, 0, !dbg !23
  %102 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %63, float %63) #6, !dbg !23
  %103 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %63, float %63) #6, !dbg !23
  %.02.i = select i1 %.not5.i, float %103, float %102, !dbg !23
  br label %__nv_tanhf.exit, !dbg !23

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %87, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !23
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i44 = icmp eq i32 %104, 0, !dbg !23
  %105 = tail call float @llvm.nvvm.fabs.ftz.f(float %64) #6, !dbg !23
  %106 = tail call float @llvm.nvvm.fabs.f(float %64) #6, !dbg !23
  %.01.i45 = select i1 %.not.i44, float %106, float %105, !dbg !23
  %107 = fcmp ult float %.01.i45, 0x3FE3333340000000, !dbg !23
  br i1 %107, label %__internal_fmad.exit3.i51, label %__internal_fmad.exit1.i46, !dbg !23

__internal_fmad.exit1.i46:                        ; preds = %__nv_tanhf.exit
  %108 = fmul float %.01.i45, 0x4007154760000000, !dbg !23
  %109 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %108) #6, !dbg !23
  %110 = fadd float %109, 1.000000e+00, !dbg !23
  %111 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %110) #7, !dbg !23, !srcloc !24
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i47 = icmp eq i32 %112, 0, !dbg !23
  %113 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %111, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %114 = tail call float @llvm.nvvm.fma.rn.f(float %111, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i48 = select i1 %.not6.i47, float %114, float %113, !dbg !23
  %115 = fcmp oge float %.01.i45, 0x4022059680000000, !dbg !23
  %s.0.i49 = select i1 %115, float 1.000000e+00, float %.03.i48, !dbg !23
  %116 = bitcast float %s.0.i49 to i32, !dbg !23
  %117 = bitcast float %64 to i32, !dbg !23
  %118 = and i32 %117, -2147483648, !dbg !23
  %119 = or i32 %118, %116, !dbg !23
  %120 = bitcast i32 %119 to float, !dbg !23
  br label %__nv_tanhf.exit62, !dbg !23

__internal_fmad.exit3.i51:                        ; preds = %__nv_tanhf.exit
  %121 = fmul float %64, %64, !dbg !23
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i52 = icmp eq i32 %122, 0, !dbg !23
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %121, float 0xBFAAC795C0000000) #6, !dbg !23
  %124 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %121, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i53 = select i1 %.not1.i52, float %124, float %123, !dbg !23
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i54 = icmp eq i32 %125, 0, !dbg !23
  %126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i53, float %121, float 0x3FC10B2820000000) #6, !dbg !23
  %127 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i53, float %121, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i55 = select i1 %.not2.i54, float %127, float %126, !dbg !23
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i56 = icmp eq i32 %128, 0, !dbg !23
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i55, float %121, float 0xBFD5553DA0000000) #6, !dbg !23
  %130 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i55, float %121, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i57 = select i1 %.not3.i56, float %130, float %129, !dbg !23
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i58 = icmp eq i32 %131, 0, !dbg !23
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i57, float %121, float 0.000000e+00) #6, !dbg !23
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i57, float %121, float 0.000000e+00) #6, !dbg !23
  %.04.i59 = select i1 %.not4.i58, float %133, float %132, !dbg !23
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i60 = icmp eq i32 %134, 0, !dbg !23
  %135 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i59, float %64, float %64) #6, !dbg !23
  %136 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i59, float %64, float %64) #6, !dbg !23
  %.02.i61 = select i1 %.not5.i60, float %136, float %135, !dbg !23
  br label %__nv_tanhf.exit62, !dbg !23

__nv_tanhf.exit62:                                ; preds = %__internal_fmad.exit1.i46, %__internal_fmad.exit3.i51
  %s.1.i50 = phi float [ %120, %__internal_fmad.exit1.i46 ], [ %.02.i61, %__internal_fmad.exit3.i51 ], !dbg !23
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i63 = icmp eq i32 %137, 0, !dbg !23
  %138 = tail call float @llvm.nvvm.fabs.ftz.f(float %65) #6, !dbg !23
  %139 = tail call float @llvm.nvvm.fabs.f(float %65) #6, !dbg !23
  %.01.i64 = select i1 %.not.i63, float %139, float %138, !dbg !23
  %140 = fcmp ult float %.01.i64, 0x3FE3333340000000, !dbg !23
  br i1 %140, label %__internal_fmad.exit3.i70, label %__internal_fmad.exit1.i65, !dbg !23

__internal_fmad.exit1.i65:                        ; preds = %__nv_tanhf.exit62
  %141 = fmul float %.01.i64, 0x4007154760000000, !dbg !23
  %142 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %141) #6, !dbg !23
  %143 = fadd float %142, 1.000000e+00, !dbg !23
  %144 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %143) #7, !dbg !23, !srcloc !24
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i66 = icmp eq i32 %145, 0, !dbg !23
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %144, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %147 = tail call float @llvm.nvvm.fma.rn.f(float %144, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i67 = select i1 %.not6.i66, float %147, float %146, !dbg !23
  %148 = fcmp oge float %.01.i64, 0x4022059680000000, !dbg !23
  %s.0.i68 = select i1 %148, float 1.000000e+00, float %.03.i67, !dbg !23
  %149 = bitcast float %s.0.i68 to i32, !dbg !23
  %150 = bitcast float %65 to i32, !dbg !23
  %151 = and i32 %150, -2147483648, !dbg !23
  %152 = or i32 %151, %149, !dbg !23
  %153 = bitcast i32 %152 to float, !dbg !23
  br label %__nv_tanhf.exit81, !dbg !23

__internal_fmad.exit3.i70:                        ; preds = %__nv_tanhf.exit62
  %154 = fmul float %65, %65, !dbg !23
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i71 = icmp eq i32 %155, 0, !dbg !23
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %154, float 0xBFAAC795C0000000) #6, !dbg !23
  %157 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %154, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i72 = select i1 %.not1.i71, float %157, float %156, !dbg !23
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i73 = icmp eq i32 %158, 0, !dbg !23
  %159 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i72, float %154, float 0x3FC10B2820000000) #6, !dbg !23
  %160 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i72, float %154, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i74 = select i1 %.not2.i73, float %160, float %159, !dbg !23
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i75 = icmp eq i32 %161, 0, !dbg !23
  %162 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i74, float %154, float 0xBFD5553DA0000000) #6, !dbg !23
  %163 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i74, float %154, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i76 = select i1 %.not3.i75, float %163, float %162, !dbg !23
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i77 = icmp eq i32 %164, 0, !dbg !23
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i76, float %154, float 0.000000e+00) #6, !dbg !23
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i76, float %154, float 0.000000e+00) #6, !dbg !23
  %.04.i78 = select i1 %.not4.i77, float %166, float %165, !dbg !23
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i79 = icmp eq i32 %167, 0, !dbg !23
  %168 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i78, float %65, float %65) #6, !dbg !23
  %169 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i78, float %65, float %65) #6, !dbg !23
  %.02.i80 = select i1 %.not5.i79, float %169, float %168, !dbg !23
  br label %__nv_tanhf.exit81, !dbg !23

__nv_tanhf.exit81:                                ; preds = %__internal_fmad.exit1.i65, %__internal_fmad.exit3.i70
  %s.1.i69 = phi float [ %153, %__internal_fmad.exit1.i65 ], [ %.02.i80, %__internal_fmad.exit3.i70 ], !dbg !23
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i82 = icmp eq i32 %170, 0, !dbg !23
  %171 = tail call float @llvm.nvvm.fabs.ftz.f(float %66) #6, !dbg !23
  %172 = tail call float @llvm.nvvm.fabs.f(float %66) #6, !dbg !23
  %.01.i83 = select i1 %.not.i82, float %172, float %171, !dbg !23
  %173 = fcmp ult float %.01.i83, 0x3FE3333340000000, !dbg !23
  br i1 %173, label %__internal_fmad.exit3.i89, label %__internal_fmad.exit1.i84, !dbg !23

__internal_fmad.exit1.i84:                        ; preds = %__nv_tanhf.exit81
  %174 = fmul float %.01.i83, 0x4007154760000000, !dbg !23
  %175 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %174) #6, !dbg !23
  %176 = fadd float %175, 1.000000e+00, !dbg !23
  %177 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %176) #7, !dbg !23, !srcloc !24
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i85 = icmp eq i32 %178, 0, !dbg !23
  %179 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %177, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %180 = tail call float @llvm.nvvm.fma.rn.f(float %177, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i86 = select i1 %.not6.i85, float %180, float %179, !dbg !23
  %181 = fcmp oge float %.01.i83, 0x4022059680000000, !dbg !23
  %s.0.i87 = select i1 %181, float 1.000000e+00, float %.03.i86, !dbg !23
  %182 = bitcast float %s.0.i87 to i32, !dbg !23
  %183 = bitcast float %66 to i32, !dbg !23
  %184 = and i32 %183, -2147483648, !dbg !23
  %185 = or i32 %184, %182, !dbg !23
  %186 = bitcast i32 %185 to float, !dbg !23
  br label %__nv_tanhf.exit100, !dbg !23

__internal_fmad.exit3.i89:                        ; preds = %__nv_tanhf.exit81
  %187 = fmul float %66, %66, !dbg !23
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i90 = icmp eq i32 %188, 0, !dbg !23
  %189 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %187, float 0xBFAAC795C0000000) #6, !dbg !23
  %190 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %187, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i91 = select i1 %.not1.i90, float %190, float %189, !dbg !23
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i92 = icmp eq i32 %191, 0, !dbg !23
  %192 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i91, float %187, float 0x3FC10B2820000000) #6, !dbg !23
  %193 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i91, float %187, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i93 = select i1 %.not2.i92, float %193, float %192, !dbg !23
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i94 = icmp eq i32 %194, 0, !dbg !23
  %195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i93, float %187, float 0xBFD5553DA0000000) #6, !dbg !23
  %196 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i93, float %187, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i95 = select i1 %.not3.i94, float %196, float %195, !dbg !23
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i96 = icmp eq i32 %197, 0, !dbg !23
  %198 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i95, float %187, float 0.000000e+00) #6, !dbg !23
  %199 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i95, float %187, float 0.000000e+00) #6, !dbg !23
  %.04.i97 = select i1 %.not4.i96, float %199, float %198, !dbg !23
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i98 = icmp eq i32 %200, 0, !dbg !23
  %201 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i97, float %66, float %66) #6, !dbg !23
  %202 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i97, float %66, float %66) #6, !dbg !23
  %.02.i99 = select i1 %.not5.i98, float %202, float %201, !dbg !23
  br label %__nv_tanhf.exit100, !dbg !23

__nv_tanhf.exit100:                               ; preds = %__internal_fmad.exit1.i84, %__internal_fmad.exit3.i89
  %s.1.i88 = phi float [ %186, %__internal_fmad.exit1.i84 ], [ %.02.i99, %__internal_fmad.exit3.i89 ], !dbg !23
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i101 = icmp eq i32 %203, 0, !dbg !23
  %204 = tail call float @llvm.nvvm.fabs.ftz.f(float %67) #6, !dbg !23
  %205 = tail call float @llvm.nvvm.fabs.f(float %67) #6, !dbg !23
  %.01.i102 = select i1 %.not.i101, float %205, float %204, !dbg !23
  %206 = fcmp ult float %.01.i102, 0x3FE3333340000000, !dbg !23
  br i1 %206, label %__internal_fmad.exit3.i108, label %__internal_fmad.exit1.i103, !dbg !23

__internal_fmad.exit1.i103:                       ; preds = %__nv_tanhf.exit100
  %207 = fmul float %.01.i102, 0x4007154760000000, !dbg !23
  %208 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %207) #6, !dbg !23
  %209 = fadd float %208, 1.000000e+00, !dbg !23
  %210 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %209) #7, !dbg !23, !srcloc !24
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i104 = icmp eq i32 %211, 0, !dbg !23
  %212 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %210, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %213 = tail call float @llvm.nvvm.fma.rn.f(float %210, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i105 = select i1 %.not6.i104, float %213, float %212, !dbg !23
  %214 = fcmp oge float %.01.i102, 0x4022059680000000, !dbg !23
  %s.0.i106 = select i1 %214, float 1.000000e+00, float %.03.i105, !dbg !23
  %215 = bitcast float %s.0.i106 to i32, !dbg !23
  %216 = bitcast float %67 to i32, !dbg !23
  %217 = and i32 %216, -2147483648, !dbg !23
  %218 = or i32 %217, %215, !dbg !23
  %219 = bitcast i32 %218 to float, !dbg !23
  br label %__nv_tanhf.exit119, !dbg !23

__internal_fmad.exit3.i108:                       ; preds = %__nv_tanhf.exit100
  %220 = fmul float %67, %67, !dbg !23
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i109 = icmp eq i32 %221, 0, !dbg !23
  %222 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %220, float 0xBFAAC795C0000000) #6, !dbg !23
  %223 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %220, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i110 = select i1 %.not1.i109, float %223, float %222, !dbg !23
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i111 = icmp eq i32 %224, 0, !dbg !23
  %225 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i110, float %220, float 0x3FC10B2820000000) #6, !dbg !23
  %226 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i110, float %220, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i112 = select i1 %.not2.i111, float %226, float %225, !dbg !23
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i113 = icmp eq i32 %227, 0, !dbg !23
  %228 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i112, float %220, float 0xBFD5553DA0000000) #6, !dbg !23
  %229 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i112, float %220, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i114 = select i1 %.not3.i113, float %229, float %228, !dbg !23
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i115 = icmp eq i32 %230, 0, !dbg !23
  %231 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i114, float %220, float 0.000000e+00) #6, !dbg !23
  %232 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i114, float %220, float 0.000000e+00) #6, !dbg !23
  %.04.i116 = select i1 %.not4.i115, float %232, float %231, !dbg !23
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i117 = icmp eq i32 %233, 0, !dbg !23
  %234 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i116, float %67, float %67) #6, !dbg !23
  %235 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i116, float %67, float %67) #6, !dbg !23
  %.02.i118 = select i1 %.not5.i117, float %235, float %234, !dbg !23
  br label %__nv_tanhf.exit119, !dbg !23

__nv_tanhf.exit119:                               ; preds = %__internal_fmad.exit1.i103, %__internal_fmad.exit3.i108
  %s.1.i107 = phi float [ %219, %__internal_fmad.exit1.i103 ], [ %.02.i118, %__internal_fmad.exit3.i108 ], !dbg !23
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i120 = icmp eq i32 %236, 0, !dbg !23
  %237 = tail call float @llvm.nvvm.fabs.ftz.f(float %68) #6, !dbg !23
  %238 = tail call float @llvm.nvvm.fabs.f(float %68) #6, !dbg !23
  %.01.i121 = select i1 %.not.i120, float %238, float %237, !dbg !23
  %239 = fcmp ult float %.01.i121, 0x3FE3333340000000, !dbg !23
  br i1 %239, label %__internal_fmad.exit3.i127, label %__internal_fmad.exit1.i122, !dbg !23

__internal_fmad.exit1.i122:                       ; preds = %__nv_tanhf.exit119
  %240 = fmul float %.01.i121, 0x4007154760000000, !dbg !23
  %241 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %240) #6, !dbg !23
  %242 = fadd float %241, 1.000000e+00, !dbg !23
  %243 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %242) #7, !dbg !23, !srcloc !24
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i123 = icmp eq i32 %244, 0, !dbg !23
  %245 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %243, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %246 = tail call float @llvm.nvvm.fma.rn.f(float %243, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i124 = select i1 %.not6.i123, float %246, float %245, !dbg !23
  %247 = fcmp oge float %.01.i121, 0x4022059680000000, !dbg !23
  %s.0.i125 = select i1 %247, float 1.000000e+00, float %.03.i124, !dbg !23
  %248 = bitcast float %s.0.i125 to i32, !dbg !23
  %249 = bitcast float %68 to i32, !dbg !23
  %250 = and i32 %249, -2147483648, !dbg !23
  %251 = or i32 %250, %248, !dbg !23
  %252 = bitcast i32 %251 to float, !dbg !23
  br label %__nv_tanhf.exit138, !dbg !23

__internal_fmad.exit3.i127:                       ; preds = %__nv_tanhf.exit119
  %253 = fmul float %68, %68, !dbg !23
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i128 = icmp eq i32 %254, 0, !dbg !23
  %255 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %253, float 0xBFAAC795C0000000) #6, !dbg !23
  %256 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %253, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i129 = select i1 %.not1.i128, float %256, float %255, !dbg !23
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i130 = icmp eq i32 %257, 0, !dbg !23
  %258 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i129, float %253, float 0x3FC10B2820000000) #6, !dbg !23
  %259 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i129, float %253, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i131 = select i1 %.not2.i130, float %259, float %258, !dbg !23
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i132 = icmp eq i32 %260, 0, !dbg !23
  %261 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i131, float %253, float 0xBFD5553DA0000000) #6, !dbg !23
  %262 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i131, float %253, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i133 = select i1 %.not3.i132, float %262, float %261, !dbg !23
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i134 = icmp eq i32 %263, 0, !dbg !23
  %264 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i133, float %253, float 0.000000e+00) #6, !dbg !23
  %265 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i133, float %253, float 0.000000e+00) #6, !dbg !23
  %.04.i135 = select i1 %.not4.i134, float %265, float %264, !dbg !23
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i136 = icmp eq i32 %266, 0, !dbg !23
  %267 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i135, float %68, float %68) #6, !dbg !23
  %268 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i135, float %68, float %68) #6, !dbg !23
  %.02.i137 = select i1 %.not5.i136, float %268, float %267, !dbg !23
  br label %__nv_tanhf.exit138, !dbg !23

__nv_tanhf.exit138:                               ; preds = %__internal_fmad.exit1.i122, %__internal_fmad.exit3.i127
  %s.1.i126 = phi float [ %252, %__internal_fmad.exit1.i122 ], [ %.02.i137, %__internal_fmad.exit3.i127 ], !dbg !23
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i139 = icmp eq i32 %269, 0, !dbg !23
  %270 = tail call float @llvm.nvvm.fabs.ftz.f(float %69) #6, !dbg !23
  %271 = tail call float @llvm.nvvm.fabs.f(float %69) #6, !dbg !23
  %.01.i140 = select i1 %.not.i139, float %271, float %270, !dbg !23
  %272 = fcmp ult float %.01.i140, 0x3FE3333340000000, !dbg !23
  br i1 %272, label %__internal_fmad.exit3.i146, label %__internal_fmad.exit1.i141, !dbg !23

__internal_fmad.exit1.i141:                       ; preds = %__nv_tanhf.exit138
  %273 = fmul float %.01.i140, 0x4007154760000000, !dbg !23
  %274 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %273) #6, !dbg !23
  %275 = fadd float %274, 1.000000e+00, !dbg !23
  %276 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %275) #7, !dbg !23, !srcloc !24
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i142 = icmp eq i32 %277, 0, !dbg !23
  %278 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %276, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %279 = tail call float @llvm.nvvm.fma.rn.f(float %276, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i143 = select i1 %.not6.i142, float %279, float %278, !dbg !23
  %280 = fcmp oge float %.01.i140, 0x4022059680000000, !dbg !23
  %s.0.i144 = select i1 %280, float 1.000000e+00, float %.03.i143, !dbg !23
  %281 = bitcast float %s.0.i144 to i32, !dbg !23
  %282 = bitcast float %69 to i32, !dbg !23
  %283 = and i32 %282, -2147483648, !dbg !23
  %284 = or i32 %283, %281, !dbg !23
  %285 = bitcast i32 %284 to float, !dbg !23
  br label %__nv_tanhf.exit157, !dbg !23

__internal_fmad.exit3.i146:                       ; preds = %__nv_tanhf.exit138
  %286 = fmul float %69, %69, !dbg !23
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i147 = icmp eq i32 %287, 0, !dbg !23
  %288 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %286, float 0xBFAAC795C0000000) #6, !dbg !23
  %289 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %286, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i148 = select i1 %.not1.i147, float %289, float %288, !dbg !23
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i149 = icmp eq i32 %290, 0, !dbg !23
  %291 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i148, float %286, float 0x3FC10B2820000000) #6, !dbg !23
  %292 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i148, float %286, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i150 = select i1 %.not2.i149, float %292, float %291, !dbg !23
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i151 = icmp eq i32 %293, 0, !dbg !23
  %294 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i150, float %286, float 0xBFD5553DA0000000) #6, !dbg !23
  %295 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i150, float %286, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i152 = select i1 %.not3.i151, float %295, float %294, !dbg !23
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i153 = icmp eq i32 %296, 0, !dbg !23
  %297 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i152, float %286, float 0.000000e+00) #6, !dbg !23
  %298 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i152, float %286, float 0.000000e+00) #6, !dbg !23
  %.04.i154 = select i1 %.not4.i153, float %298, float %297, !dbg !23
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i155 = icmp eq i32 %299, 0, !dbg !23
  %300 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i154, float %69, float %69) #6, !dbg !23
  %301 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i154, float %69, float %69) #6, !dbg !23
  %.02.i156 = select i1 %.not5.i155, float %301, float %300, !dbg !23
  br label %__nv_tanhf.exit157, !dbg !23

__nv_tanhf.exit157:                               ; preds = %__internal_fmad.exit1.i141, %__internal_fmad.exit3.i146
  %s.1.i145 = phi float [ %285, %__internal_fmad.exit1.i141 ], [ %.02.i156, %__internal_fmad.exit3.i146 ], !dbg !23
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i158 = icmp eq i32 %302, 0, !dbg !23
  %303 = tail call float @llvm.nvvm.fabs.ftz.f(float %70) #6, !dbg !23
  %304 = tail call float @llvm.nvvm.fabs.f(float %70) #6, !dbg !23
  %.01.i159 = select i1 %.not.i158, float %304, float %303, !dbg !23
  %305 = fcmp ult float %.01.i159, 0x3FE3333340000000, !dbg !23
  br i1 %305, label %__internal_fmad.exit3.i165, label %__internal_fmad.exit1.i160, !dbg !23

__internal_fmad.exit1.i160:                       ; preds = %__nv_tanhf.exit157
  %306 = fmul float %.01.i159, 0x4007154760000000, !dbg !23
  %307 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %306) #6, !dbg !23
  %308 = fadd float %307, 1.000000e+00, !dbg !23
  %309 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %308) #7, !dbg !23, !srcloc !24
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i161 = icmp eq i32 %310, 0, !dbg !23
  %311 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %309, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %312 = tail call float @llvm.nvvm.fma.rn.f(float %309, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i162 = select i1 %.not6.i161, float %312, float %311, !dbg !23
  %313 = fcmp oge float %.01.i159, 0x4022059680000000, !dbg !23
  %s.0.i163 = select i1 %313, float 1.000000e+00, float %.03.i162, !dbg !23
  %314 = bitcast float %s.0.i163 to i32, !dbg !23
  %315 = bitcast float %70 to i32, !dbg !23
  %316 = and i32 %315, -2147483648, !dbg !23
  %317 = or i32 %316, %314, !dbg !23
  %318 = bitcast i32 %317 to float, !dbg !23
  br label %__nv_tanhf.exit176, !dbg !23

__internal_fmad.exit3.i165:                       ; preds = %__nv_tanhf.exit157
  %319 = fmul float %70, %70, !dbg !23
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i166 = icmp eq i32 %320, 0, !dbg !23
  %321 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %319, float 0xBFAAC795C0000000) #6, !dbg !23
  %322 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %319, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i167 = select i1 %.not1.i166, float %322, float %321, !dbg !23
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i168 = icmp eq i32 %323, 0, !dbg !23
  %324 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i167, float %319, float 0x3FC10B2820000000) #6, !dbg !23
  %325 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i167, float %319, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i169 = select i1 %.not2.i168, float %325, float %324, !dbg !23
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i170 = icmp eq i32 %326, 0, !dbg !23
  %327 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i169, float %319, float 0xBFD5553DA0000000) #6, !dbg !23
  %328 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i169, float %319, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i171 = select i1 %.not3.i170, float %328, float %327, !dbg !23
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i172 = icmp eq i32 %329, 0, !dbg !23
  %330 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i171, float %319, float 0.000000e+00) #6, !dbg !23
  %331 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i171, float %319, float 0.000000e+00) #6, !dbg !23
  %.04.i173 = select i1 %.not4.i172, float %331, float %330, !dbg !23
  %332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i174 = icmp eq i32 %332, 0, !dbg !23
  %333 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i173, float %70, float %70) #6, !dbg !23
  %334 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i173, float %70, float %70) #6, !dbg !23
  %.02.i175 = select i1 %.not5.i174, float %334, float %333, !dbg !23
  br label %__nv_tanhf.exit176, !dbg !23

__nv_tanhf.exit176:                               ; preds = %__internal_fmad.exit1.i160, %__internal_fmad.exit3.i165
  %s.1.i164 = phi float [ %318, %__internal_fmad.exit1.i160 ], [ %.02.i175, %__internal_fmad.exit3.i165 ], !dbg !23
  %335 = insertelement <2 x float> poison, float %s.1.i50, i64 0, !dbg !25
  %336 = insertelement <2 x float> %335, float %s.1.i, i64 1, !dbg !25
  %337 = fmul <2 x float> %336, <float 5.000000e+01, float 5.000000e+01>, !dbg !25
  %338 = fmul float %s.1.i69, 5.000000e+01, !dbg !25
  %339 = fmul float %s.1.i88, 5.000000e+01, !dbg !25
  %340 = insertelement <4 x float> poison, float %s.1.i164, i64 0, !dbg !25
  %341 = insertelement <4 x float> %340, float %s.1.i145, i64 1, !dbg !25
  %342 = insertelement <4 x float> %341, float %s.1.i126, i64 2, !dbg !25
  %343 = insertelement <4 x float> %342, float %s.1.i107, i64 3, !dbg !25
  %344 = fmul <4 x float> %343, <float 5.000000e+01, float 5.000000e+01, float 5.000000e+01, float 5.000000e+01>, !dbg !25
  %345 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !14
  %346 = insertelement <2 x i32> %345, i32 %24, i64 1, !dbg !14
  %347 = sub <2 x i32> %346, %15, !dbg !14
  %348 = sub i32 %26, %12, !dbg !14
  %349 = sub i32 %27, %12, !dbg !14
  %350 = sub <4 x i32> %30, %17, !dbg !14
  %351 = icmp sgt i32 %348, 0, !dbg !26
  %352 = icmp sgt i32 %349, 0, !dbg !26
  %353 = select i1 %351, float 0xFFF0000000000000, float 0.000000e+00, !dbg !27
  %354 = select i1 %352, float 0xFFF0000000000000, float 0.000000e+00, !dbg !27
  %355 = icmp slt i32 %348, -4095, !dbg !28
  %356 = icmp slt i32 %349, -4095, !dbg !28
  %357 = select i1 %355, float 0xFFF0000000000000, float 0.000000e+00, !dbg !29
  %358 = select i1 %356, float 0xFFF0000000000000, float 0.000000e+00, !dbg !29
  %359 = fadd float %353, %357, !dbg !30
  %360 = fadd float %354, %358, !dbg !30
  %361 = fadd float %359, %338, !dbg !31
  %362 = fadd float %360, %339, !dbg !31
  %363 = fcmp ule float %19, %361, !dbg !32
  %364 = fcmp ule float %20, %362, !dbg !32
  %365 = fcmp ord <2 x float> %22, zeroinitializer, !dbg !36
  %366 = fcmp ord float %19, 0.000000e+00, !dbg !36
  %367 = fcmp ord float %20, 0.000000e+00, !dbg !36
  %368 = fcmp ord <4 x float> %23, zeroinitializer, !dbg !36
  %369 = icmp sgt <2 x i32> %347, zeroinitializer, !dbg !26
  %370 = select <2 x i1> %369, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, <2 x float> zeroinitializer, !dbg !27
  %371 = icmp slt <2 x i32> %347, <i32 -4095, i32 -4095>, !dbg !28
  %372 = select <2 x i1> %371, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, <2 x float> zeroinitializer, !dbg !29
  %373 = fadd <2 x float> %370, %372, !dbg !30
  %374 = fadd <2 x float> %373, %337, !dbg !31
  %375 = fcmp ule <2 x float> %22, %374, !dbg !32
  %376 = and <2 x i1> %365, %375, !dbg !37
  %.not33 = and i1 %366, %363, !dbg !37
  %.not35 = and i1 %367, %364, !dbg !37
  %377 = icmp sgt <4 x i32> %350, zeroinitializer, !dbg !26
  %378 = select <4 x i1> %377, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> zeroinitializer, !dbg !27
  %379 = icmp slt <4 x i32> %350, <i32 -4095, i32 -4095, i32 -4095, i32 -4095>, !dbg !28
  %380 = select <4 x i1> %379, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> zeroinitializer, !dbg !29
  %381 = fadd <4 x float> %378, %380, !dbg !30
  %382 = fadd <4 x float> %381, %344, !dbg !31
  %383 = fcmp ule <4 x float> %23, %382, !dbg !32
  %384 = and <4 x i1> %368, %383, !dbg !38
  %385 = select <2 x i1> %376, <2 x float> %374, <2 x float> %22, !dbg !38
  %386 = select i1 %.not33, float %361, float %19, !dbg !38
  %387 = select i1 %.not35, float %362, float %20, !dbg !38
  %388 = select <4 x i1> %384, <4 x float> %382, <4 x float> %23, !dbg !38
  %389 = getelementptr i16, ptr addrspace(1) %1, i64 %32, !dbg !39
  %390 = extractelement <2 x float> %374, i64 1, !dbg !40
  %391 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %390) #6, !dbg !40
  %392 = extractelement <2 x float> %374, i64 0, !dbg !40
  %393 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %392) #6, !dbg !40
  %394 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %361) #6, !dbg !40
  %395 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %362) #6, !dbg !40
  %396 = extractelement <4 x float> %382, i64 3, !dbg !40
  %397 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %396) #6, !dbg !40
  %398 = extractelement <4 x float> %382, i64 2, !dbg !40
  %399 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %398) #6, !dbg !40
  %400 = extractelement <4 x float> %382, i64 1, !dbg !40
  %401 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %400) #6, !dbg !40
  %402 = extractelement <4 x float> %382, i64 0, !dbg !40
  %403 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %402) #6, !dbg !40
  %404 = insertelement <2 x i16> undef, i16 %391, i64 0, !dbg !40
  %405 = insertelement <2 x i16> %404, i16 %393, i64 1, !dbg !40
  %406 = bitcast <2 x i16> %405 to i32, !dbg !40
  %407 = insertelement <2 x i16> undef, i16 %394, i64 0, !dbg !40
  %408 = insertelement <2 x i16> %407, i16 %395, i64 1, !dbg !40
  %409 = bitcast <2 x i16> %408 to i32, !dbg !40
  %410 = insertelement <2 x i16> undef, i16 %397, i64 0, !dbg !40
  %411 = insertelement <2 x i16> %410, i16 %399, i64 1, !dbg !40
  %412 = bitcast <2 x i16> %411 to i32, !dbg !40
  %413 = insertelement <2 x i16> undef, i16 %401, i64 0, !dbg !40
  %414 = insertelement <2 x i16> %413, i16 %403, i64 1, !dbg !40
  %415 = bitcast <2 x i16> %414 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %406, i32 %409, i32 %412, i32 %415, ptr addrspace(1) %389, i1 true) #6, !dbg !40
  %416 = add nuw nsw i32 %21, 2048, !dbg !15
  %417 = icmp ult i32 %21, 6144, !dbg !15
  br i1 %417, label %18, label %418, !dbg !15

418:                                              ; preds = %__nv_tanhf.exit176
  %419 = and i32 %7, 31, !dbg !10
  %420 = and i32 %8, 7, !dbg !10
  %421 = shufflevector <2 x float> %385, <2 x float> <float poison, float 0.000000e+00>, <2 x i32> <i32 1, i32 3>, !dbg !41
  %422 = fcmp ogt <2 x float> %421, %385, !dbg !41
  %423 = fcmp uno <2 x float> %421, %385, !dbg !41
  %shift = shufflevector <2 x i1> %423, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %424 = or <2 x i1> %422, %shift, !dbg !45
  %425 = extractelement <2 x i1> %424, i64 0, !dbg !45
  %426 = extractelement <2 x float> %385, i64 0, !dbg !46
  %427 = extractelement <2 x float> %385, i64 1, !dbg !46
  %428 = select i1 %425, float %427, float %426, !dbg !46
  %429 = fcmp ogt float %428, %386, !dbg !41
  %430 = fcmp uno float %428, 0.000000e+00, !dbg !47
  %431 = or i1 %429, %430, !dbg !45
  %432 = select i1 %431, float %428, float %386, !dbg !46
  %433 = fcmp ogt float %432, %387, !dbg !41
  %434 = fcmp uno float %432, 0.000000e+00, !dbg !47
  %435 = or i1 %433, %434, !dbg !45
  %436 = select i1 %435, float %432, float %387, !dbg !46
  %437 = extractelement <4 x float> %388, i64 3, !dbg !41
  %438 = fcmp ogt float %436, %437, !dbg !41
  %439 = fcmp uno float %436, 0.000000e+00, !dbg !47
  %440 = or i1 %438, %439, !dbg !45
  %441 = select i1 %440, float %436, float %437, !dbg !46
  %442 = extractelement <4 x float> %388, i64 2, !dbg !41
  %443 = fcmp ogt float %441, %442, !dbg !41
  %444 = fcmp uno float %441, 0.000000e+00, !dbg !47
  %445 = or i1 %443, %444, !dbg !45
  %446 = select i1 %445, float %441, float %442, !dbg !46
  %447 = extractelement <4 x float> %388, i64 1, !dbg !41
  %448 = fcmp ogt float %446, %447, !dbg !41
  %449 = fcmp uno float %446, 0.000000e+00, !dbg !47
  %450 = or i1 %448, %449, !dbg !45
  %451 = select i1 %450, float %446, float %447, !dbg !46
  %452 = extractelement <4 x float> %388, i64 0, !dbg !41
  %453 = fcmp ogt float %451, %452, !dbg !41
  %454 = fcmp uno float %451, 0.000000e+00, !dbg !47
  %455 = or i1 %453, %454, !dbg !45
  %456 = select i1 %455, float %451, float %452, !dbg !46
  %457 = bitcast float %456 to i32, !dbg !48
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 16, i32 31), !dbg !48
  %459 = bitcast i32 %458 to float, !dbg !48
  %460 = fcmp ogt float %456, %459, !dbg !41
  %461 = fcmp uno float %456, 0.000000e+00, !dbg !47
  %462 = or i1 %461, %460, !dbg !45
  %463 = select i1 %462, float %456, float %459, !dbg !46
  %464 = bitcast float %463 to i32, !dbg !48
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 8, i32 31), !dbg !48
  %466 = bitcast i32 %465 to float, !dbg !48
  %467 = fcmp ogt float %463, %466, !dbg !41
  %468 = fcmp uno float %463, 0.000000e+00, !dbg !47
  %469 = or i1 %467, %468, !dbg !45
  %470 = select i1 %469, float %463, float %466, !dbg !46
  %471 = bitcast float %470 to i32, !dbg !48
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 4, i32 31), !dbg !48
  %473 = bitcast i32 %472 to float, !dbg !48
  %474 = fcmp ogt float %470, %473, !dbg !41
  %475 = fcmp uno float %470, 0.000000e+00, !dbg !47
  %476 = or i1 %474, %475, !dbg !45
  %477 = select i1 %476, float %470, float %473, !dbg !46
  %478 = bitcast float %477 to i32, !dbg !48
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 2, i32 31), !dbg !48
  %480 = bitcast i32 %479 to float, !dbg !48
  %481 = fcmp ogt float %477, %480, !dbg !41
  %482 = fcmp uno float %477, 0.000000e+00, !dbg !47
  %483 = or i1 %481, %482, !dbg !45
  %484 = select i1 %483, float %477, float %480, !dbg !46
  %485 = bitcast float %484 to i32, !dbg !48
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 1, i32 31), !dbg !48
  %487 = bitcast i32 %486 to float, !dbg !48
  %488 = fcmp ogt float %484, %487, !dbg !41
  %489 = fcmp uno float %484, 0.000000e+00, !dbg !47
  %490 = or i1 %488, %489, !dbg !45
  %491 = select i1 %490, float %484, float %487, !dbg !46
  %492 = icmp eq i32 %419, 0, !dbg !48
  %493 = zext nneg i32 %420 to i64, !dbg !48
  %494 = getelementptr float, ptr addrspace(3) @global_smem, i64 %493, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %494, float %491, i1 %492) #6, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %495 = icmp slt i32 %7, 8, !dbg !48
  %496 = sext i32 %7 to i64, !dbg !48
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i64 %496, !dbg !48
  %498 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %497, i1 %495) #6, !dbg !48
  %499 = bitcast float %498 to i32, !dbg !48
  %500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %499, i32 4, i32 31), !dbg !48
  %501 = bitcast i32 %500 to float, !dbg !48
  %502 = fcmp ogt float %498, %501, !dbg !41
  %503 = fcmp uno float %498, 0.000000e+00, !dbg !47
  %504 = or i1 %503, %502, !dbg !45
  %505 = select i1 %504, float %498, float %501, !dbg !46
  %506 = bitcast float %505 to i32, !dbg !48
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 2, i32 31), !dbg !48
  %508 = bitcast i32 %507 to float, !dbg !48
  %509 = fcmp ogt float %505, %508, !dbg !41
  %510 = fcmp uno float %505, 0.000000e+00, !dbg !47
  %511 = or i1 %509, %510, !dbg !45
  %512 = select i1 %511, float %505, float %508, !dbg !46
  %513 = bitcast float %512 to i32, !dbg !48
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 1, i32 31), !dbg !48
  %515 = bitcast i32 %514 to float, !dbg !48
  %516 = fcmp ogt float %512, %515, !dbg !41
  %517 = fcmp uno float %512, 0.000000e+00, !dbg !47
  %518 = or i1 %516, %517, !dbg !45
  %519 = select i1 %518, float %512, float %515, !dbg !46
  %520 = and i32 %7, 7, !dbg !48
  %521 = icmp eq i32 %520, 0, !dbg !48
  %522 = and i1 %495, %521, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, float %519, i1 %522) #6, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %523 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !48
  br label %524, !dbg !50

524:                                              ; preds = %418, %524
  %525 = phi float [ 0.000000e+00, %418 ], [ %583, %524 ]
  %526 = phi float [ 0.000000e+00, %418 ], [ %584, %524 ]
  %527 = phi float [ 0.000000e+00, %418 ], [ %585, %524 ]
  %528 = phi float [ 0.000000e+00, %418 ], [ %586, %524 ]
  %529 = phi float [ 0.000000e+00, %418 ], [ %587, %524 ]
  %530 = phi float [ 0.000000e+00, %418 ], [ %588, %524 ]
  %531 = phi float [ 0.000000e+00, %418 ], [ %589, %524 ]
  %532 = phi float [ 0.000000e+00, %418 ], [ %590, %524 ]
  %533 = phi i32 [ 0, %418 ], [ %591, %524 ]
  %534 = or i32 %533, %9, !dbg !51
  %535 = add i32 %534, %13, !dbg !52
  %536 = sext i32 %535 to i64, !dbg !53
  %537 = getelementptr i16, ptr addrspace(1) %1, i64 %536, !dbg !53
  %538 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %537, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !54
  %539 = extractvalue { i32, i32, i32, i32 } %538, 0, !dbg !54
  %540 = extractvalue { i32, i32, i32, i32 } %538, 1, !dbg !54
  %541 = extractvalue { i32, i32, i32, i32 } %538, 2, !dbg !54
  %542 = extractvalue { i32, i32, i32, i32 } %538, 3, !dbg !54
  %543 = trunc i32 %539 to i16, !dbg !54
  %extelt.offset20 = lshr i32 %539, 16, !dbg !54
  %544 = trunc i32 %extelt.offset20 to i16, !dbg !54
  %545 = trunc i32 %540 to i16, !dbg !54
  %extelt.offset21 = lshr i32 %540, 16, !dbg !54
  %546 = trunc i32 %extelt.offset21 to i16, !dbg !54
  %547 = trunc i32 %541 to i16, !dbg !54
  %extelt.offset22 = lshr i32 %541, 16, !dbg !54
  %548 = trunc i32 %extelt.offset22 to i16, !dbg !54
  %549 = trunc i32 %542 to i16, !dbg !54
  %extelt.offset23 = lshr i32 %542, 16, !dbg !54
  %550 = trunc i32 %extelt.offset23 to i16, !dbg !54
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %543) #6, !dbg !55
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %544) #6, !dbg !55
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %545) #6, !dbg !55
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %546) #6, !dbg !55
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %547) #6, !dbg !55
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %548) #6, !dbg !55
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %549) #6, !dbg !55
  %558 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %550) #6, !dbg !55
  %559 = fsub float %551, %523, !dbg !56
  %560 = fsub float %552, %523, !dbg !56
  %561 = fsub float %553, %523, !dbg !56
  %562 = fsub float %554, %523, !dbg !56
  %563 = fsub float %555, %523, !dbg !56
  %564 = fsub float %556, %523, !dbg !56
  %565 = fsub float %557, %523, !dbg !56
  %566 = fsub float %558, %523, !dbg !56
  %567 = fmul float %559, 0x3FF7154760000000, !dbg !57
  %568 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %567) #6, !dbg !57
  %569 = fmul float %560, 0x3FF7154760000000, !dbg !57
  %570 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %569) #6, !dbg !57
  %571 = fmul float %561, 0x3FF7154760000000, !dbg !57
  %572 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %571) #6, !dbg !57
  %573 = fmul float %562, 0x3FF7154760000000, !dbg !57
  %574 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %573) #6, !dbg !57
  %575 = fmul float %563, 0x3FF7154760000000, !dbg !57
  %576 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %575) #6, !dbg !57
  %577 = fmul float %564, 0x3FF7154760000000, !dbg !57
  %578 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %577) #6, !dbg !57
  %579 = fmul float %565, 0x3FF7154760000000, !dbg !57
  %580 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %579) #6, !dbg !57
  %581 = fmul float %566, 0x3FF7154760000000, !dbg !57
  %582 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %581) #6, !dbg !57
  %583 = fadd float %525, %568, !dbg !58
  %584 = fadd float %526, %570, !dbg !58
  %585 = fadd float %527, %572, !dbg !58
  %586 = fadd float %528, %574, !dbg !58
  %587 = fadd float %529, %576, !dbg !58
  %588 = fadd float %530, %578, !dbg !58
  %589 = fadd float %531, %580, !dbg !58
  %590 = fadd float %532, %582, !dbg !58
  %591 = add nuw nsw i32 %533, 2048, !dbg !50
  %592 = icmp ult i32 %533, 6144, !dbg !50
  br i1 %592, label %524, label %593, !dbg !50

593:                                              ; preds = %524
  %594 = or i32 %10, 1024, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %595 = fadd float %583, %584, !dbg !63
  %596 = fadd float %585, %595, !dbg !63
  %597 = fadd float %586, %596, !dbg !63
  %598 = fadd float %587, %597, !dbg !63
  %599 = fadd float %588, %598, !dbg !63
  %600 = fadd float %589, %599, !dbg !63
  %601 = fadd float %590, %600, !dbg !63
  %602 = bitcast float %601 to i32, !dbg !59
  %603 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %602, i32 16, i32 31), !dbg !59
  %604 = bitcast i32 %603 to float, !dbg !59
  %605 = fadd float %601, %604, !dbg !63
  %606 = bitcast float %605 to i32, !dbg !59
  %607 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %606, i32 8, i32 31), !dbg !59
  %608 = bitcast i32 %607 to float, !dbg !59
  %609 = fadd float %605, %608, !dbg !63
  %610 = bitcast float %609 to i32, !dbg !59
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %610, i32 4, i32 31), !dbg !59
  %612 = bitcast i32 %611 to float, !dbg !59
  %613 = fadd float %609, %612, !dbg !63
  %614 = bitcast float %613 to i32, !dbg !59
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 2, i32 31), !dbg !59
  %616 = bitcast i32 %615 to float, !dbg !59
  %617 = fadd float %613, %616, !dbg !63
  %618 = bitcast float %617 to i32, !dbg !59
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %618, i32 1, i32 31), !dbg !59
  %620 = bitcast i32 %619 to float, !dbg !59
  %621 = fadd float %617, %620, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %494, float %621, i1 %492) #6, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %622 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %497, i1 %495) #6, !dbg !59
  %623 = bitcast float %622 to i32, !dbg !59
  %624 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %623, i32 4, i32 31), !dbg !59
  %625 = bitcast i32 %624 to float, !dbg !59
  %626 = fadd float %622, %625, !dbg !63
  %627 = bitcast float %626 to i32, !dbg !59
  %628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %627, i32 2, i32 31), !dbg !59
  %629 = bitcast i32 %628 to float, !dbg !59
  %630 = fadd float %626, %629, !dbg !63
  %631 = bitcast float %630 to i32, !dbg !59
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 1, i32 31), !dbg !59
  %633 = bitcast i32 %632 to float, !dbg !59
  %634 = fadd float %630, %633, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, float %634, i1 %522) #6, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %635 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !59
  %636 = zext nneg i32 %9 to i64
  %637 = getelementptr float, ptr addrspace(3) @global_smem, i64 %636
  %638 = zext nneg i32 %10 to i64
  %639 = getelementptr float, ptr addrspace(3) @global_smem, i64 %638
  %640 = zext nneg i32 %594 to i64
  %641 = getelementptr float, ptr addrspace(3) @global_smem, i64 %640
  %642 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %639, i64 0, i64 1
  %643 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %639, i64 0, i64 2
  %644 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %639, i64 0, i64 3
  br label %645, !dbg !67

645:                                              ; preds = %593, %645
  %646 = phi i32 [ 0, %593 ], [ %742, %645 ]
  %647 = or i32 %646, %9, !dbg !68
  %648 = or i32 %646, %10, !dbg !68
  %649 = or i32 %646, %594, !dbg !68
  %650 = add i32 %647, %13, !dbg !69
  %651 = add i32 %648, %13, !dbg !69
  %652 = add i32 %649, %13, !dbg !69
  %653 = sext i32 %650 to i64, !dbg !70
  %654 = getelementptr i16, ptr addrspace(1) %1, i64 %653, !dbg !70
  %655 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %654, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !71
  %656 = extractvalue { i32, i32, i32, i32 } %655, 0, !dbg !71
  %657 = extractvalue { i32, i32, i32, i32 } %655, 1, !dbg !71
  %658 = extractvalue { i32, i32, i32, i32 } %655, 2, !dbg !71
  %659 = extractvalue { i32, i32, i32, i32 } %655, 3, !dbg !71
  %660 = trunc i32 %656 to i16, !dbg !71
  %extelt.offset = lshr i32 %656, 16, !dbg !71
  %661 = trunc i32 %extelt.offset to i16, !dbg !71
  %662 = trunc i32 %657 to i16, !dbg !71
  %extelt.offset3 = lshr i32 %657, 16, !dbg !71
  %663 = trunc i32 %extelt.offset3 to i16, !dbg !71
  %664 = trunc i32 %658 to i16, !dbg !71
  %extelt.offset4 = lshr i32 %658, 16, !dbg !71
  %665 = trunc i32 %extelt.offset4 to i16, !dbg !71
  %666 = trunc i32 %659 to i16, !dbg !71
  %extelt.offset5 = lshr i32 %659, 16, !dbg !71
  %667 = trunc i32 %extelt.offset5 to i16, !dbg !71
  %668 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %660) #6, !dbg !72
  %669 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %661) #6, !dbg !72
  %670 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %662) #6, !dbg !72
  %671 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %663) #6, !dbg !72
  %672 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %664) #6, !dbg !72
  %673 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %665) #6, !dbg !72
  %674 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %666) #6, !dbg !72
  %675 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %667) #6, !dbg !72
  %676 = fsub float %668, %523, !dbg !73
  %677 = fsub float %669, %523, !dbg !73
  %678 = fsub float %670, %523, !dbg !73
  %679 = fsub float %671, %523, !dbg !73
  %680 = fsub float %672, %523, !dbg !73
  %681 = fsub float %673, %523, !dbg !73
  %682 = fsub float %674, %523, !dbg !73
  %683 = fsub float %675, %523, !dbg !73
  %684 = fmul float %676, 0x3FF7154760000000, !dbg !74
  %685 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %684) #6, !dbg !74
  %686 = fmul float %677, 0x3FF7154760000000, !dbg !74
  %687 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %686) #6, !dbg !74
  %688 = fmul float %678, 0x3FF7154760000000, !dbg !74
  %689 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %688) #6, !dbg !74
  %690 = fmul float %679, 0x3FF7154760000000, !dbg !74
  %691 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %690) #6, !dbg !74
  %692 = fmul float %680, 0x3FF7154760000000, !dbg !74
  %693 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %692) #6, !dbg !74
  %694 = fmul float %681, 0x3FF7154760000000, !dbg !74
  %695 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %694) #6, !dbg !74
  %696 = fmul float %682, 0x3FF7154760000000, !dbg !74
  %697 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %696) #6, !dbg !74
  %698 = fmul float %683, 0x3FF7154760000000, !dbg !74
  %699 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %698) #6, !dbg !74
  %700 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %685, float %635) #6, !dbg !75
  %701 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %687, float %635) #6, !dbg !75
  %702 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %689, float %635) #6, !dbg !75
  %703 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %691, float %635) #6, !dbg !75
  %704 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %693, float %635) #6, !dbg !75
  %705 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %695, float %635) #6, !dbg !75
  %706 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %697, float %635) #6, !dbg !75
  %707 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %699, float %635) #6, !dbg !75
  %708 = getelementptr i16, ptr addrspace(1) %2, i64 %653, !dbg !76
  %709 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %700) #6, !dbg !77
  %710 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %701) #6, !dbg !77
  %711 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %702) #6, !dbg !77
  %712 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %703) #6, !dbg !77
  %713 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %704) #6, !dbg !77
  %714 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %705) #6, !dbg !77
  %715 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %706) #6, !dbg !77
  %716 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %707) #6, !dbg !77
  %717 = insertelement <2 x i16> undef, i16 %709, i64 0, !dbg !77
  %718 = insertelement <2 x i16> %717, i16 %710, i64 1, !dbg !77
  %719 = bitcast <2 x i16> %718 to i32, !dbg !77
  %720 = insertelement <2 x i16> undef, i16 %711, i64 0, !dbg !77
  %721 = insertelement <2 x i16> %720, i16 %712, i64 1, !dbg !77
  %722 = bitcast <2 x i16> %721 to i32, !dbg !77
  %723 = insertelement <2 x i16> undef, i16 %713, i64 0, !dbg !77
  %724 = insertelement <2 x i16> %723, i16 %714, i64 1, !dbg !77
  %725 = bitcast <2 x i16> %724 to i32, !dbg !77
  %726 = insertelement <2 x i16> undef, i16 %715, i64 0, !dbg !77
  %727 = insertelement <2 x i16> %726, i16 %716, i64 1, !dbg !77
  %728 = bitcast <2 x i16> %727 to i32, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %719, i32 %722, i32 %725, i32 %728, ptr addrspace(1) %708, i1 true) #6, !dbg !77
  %729 = sext i32 %651 to i64, !dbg !78
  %730 = getelementptr float, ptr addrspace(1) %3, i64 %729, !dbg !78
  %731 = sext i32 %652 to i64, !dbg !78
  %732 = getelementptr float, ptr addrspace(1) %3, i64 %731, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %733 = insertelement <8 x float> undef, float %700, i64 0, !dbg !79
  %734 = insertelement <8 x float> %733, float %701, i64 1, !dbg !79
  %735 = insertelement <8 x float> %734, float %702, i64 2, !dbg !79
  %736 = insertelement <8 x float> %735, float %703, i64 3, !dbg !79
  %737 = insertelement <8 x float> %736, float %704, i64 4, !dbg !79
  %738 = insertelement <8 x float> %737, float %705, i64 5, !dbg !79
  %739 = insertelement <8 x float> %738, float %706, i64 6, !dbg !79
  %740 = insertelement <8 x float> %739, float %707, i64 7, !dbg !79
  store <8 x float> %740, ptr addrspace(3) %637, align 32, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %741 = load <4 x i32>, ptr addrspace(3) %641, align 16, !dbg !79
  %.extract = load i32, ptr addrspace(3) %639, align 16, !dbg !79
  %.extract7 = load i32, ptr addrspace(3) %642, align 4, !dbg !79
  %.extract9 = load i32, ptr addrspace(3) %643, align 8, !dbg !79
  %.extract11 = load i32, ptr addrspace(3) %644, align 4, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract9, i32 %.extract11, ptr addrspace(1) %730, i1 true) #6, !dbg !79
  %.extract13 = extractelement <4 x i32> %741, i64 0, !dbg !79
  %.extract15 = extractelement <4 x i32> %741, i64 1, !dbg !79
  %.extract17 = extractelement <4 x i32> %741, i64 2, !dbg !79
  %.extract19 = extractelement <4 x i32> %741, i64 3, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract15, i32 %.extract17, i32 %.extract19, ptr addrspace(1) %732, i1 true) #6, !dbg !79
  %742 = add nuw nsw i32 %646, 2048, !dbg !67
  %743 = icmp ult i32 %646, 6144, !dbg !67
  br i1 %743, label %645, label %744, !dbg !67

744:                                              ; preds = %645
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_tanhf(float %a) local_unnamed_addr #3 {
__nv_fabsf.exit:
  %0 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %0, 0
  %1 = tail call float @llvm.nvvm.fabs.ftz.f(float %a) #6
  %2 = tail call float @llvm.nvvm.fabs.f(float %a) #6
  %.01 = select i1 %.not, float %2, float %1
  %3 = fcmp ult float %.01, 0x3FE3333340000000
  br i1 %3, label %__internal_fmad.exit3, label %__internal_fmad.exit1

__internal_fmad.exit1:                            ; preds = %__nv_fabsf.exit
  %4 = fmul float %.01, 0x4007154760000000
  %5 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %4) #6
  %6 = fadd float %5, 1.000000e+00
  %7 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %6) #7, !srcloc !24
  %8 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not6 = icmp eq i32 %8, 0
  %9 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %7, float -2.000000e+00, float 1.000000e+00) #6
  %10 = tail call float @llvm.nvvm.fma.rn.f(float %7, float -2.000000e+00, float 1.000000e+00) #6
  %.03 = select i1 %.not6, float %10, float %9
  %11 = fcmp oge float %.01, 0x4022059680000000
  %s.0 = select i1 %11, float 1.000000e+00, float %.03
  %12 = bitcast float %s.0 to i32
  %13 = bitcast float %a to i32
  %14 = and i32 %13, -2147483648
  %15 = or i32 %14, %12
  %16 = bitcast i32 %15 to float
  br label %33

__internal_fmad.exit3:                            ; preds = %__nv_fabsf.exit
  %17 = fmul float %a, %a
  %18 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not1 = icmp eq i32 %18, 0
  %19 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #6
  %20 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #6
  %.06 = select i1 %.not1, float %20, float %19
  %21 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not2 = icmp eq i32 %21, 0
  %22 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06, float %17, float 0x3FC10B2820000000) #6
  %23 = tail call float @llvm.nvvm.fma.rn.f(float %.06, float %17, float 0x3FC10B2820000000) #6
  %.05 = select i1 %.not2, float %23, float %22
  %24 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not3 = icmp eq i32 %24, 0
  %25 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05, float %17, float 0xBFD5553DA0000000) #6
  %26 = tail call float @llvm.nvvm.fma.rn.f(float %.05, float %17, float 0xBFD5553DA0000000) #6
  %.0 = select i1 %.not3, float %26, float %25
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not4 = icmp eq i32 %27, 0
  %28 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0, float %17, float 0.000000e+00) #6
  %29 = tail call float @llvm.nvvm.fma.rn.f(float %.0, float %17, float 0.000000e+00) #6
  %.04 = select i1 %.not4, float %29, float %28
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not5 = icmp eq i32 %30, 0
  %31 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04, float %a, float %a) #6
  %32 = tail call float @llvm.nvvm.fma.rn.f(float %.04, float %a, float %a) #6
  %.02 = select i1 %.not5, float %32, float %31
  br label %33

33:                                               ; preds = %__internal_fmad.exit3, %__internal_fmad.exit1
  %s.1 = phi float [ %16, %__internal_fmad.exit1 ], [ %.02, %__internal_fmad.exit3 ]
  ret float %s.1
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }
attributes #7 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ceajnqmdtbnmpaev7gpcb5kgv73iimo5fjbq72cabd7au6266s4x.py", directory: "/tmp/torchinductor_zeus/ea")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 26, column: 18, scope: !7)
!13 = !DILocation(line: 32, column: 45, scope: !7)
!14 = !DILocation(line: 39, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 36, scope: !7)
!16 = !DILocation(line: 29, column: 27, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 32, column: 103, scope: !7)
!21 = !DILocation(line: 34, column: 22, scope: !7)
!22 = !DILocation(line: 36, column: 22, scope: !7)
!23 = !DILocation(line: 37, column: 28, scope: !7)
!24 = !{i32 21046}
!25 = !DILocation(line: 38, column: 22, scope: !7)
!26 = !DILocation(line: 41, column: 23, scope: !7)
!27 = !DILocation(line: 47, column: 39, scope: !7)
!28 = !DILocation(line: 49, column: 24, scope: !7)
!29 = !DILocation(line: 52, column: 39, scope: !7)
!30 = !DILocation(line: 53, column: 24, scope: !7)
!31 = !DILocation(line: 54, column: 23, scope: !7)
!32 = !DILocation(line: 36, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor")
!35 = !DILocation(line: 57, column: 47, scope: !33)
!36 = !DILocation(line: 38, column: 21, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 38, column: 16, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 0, scope: !7)
!39 = !DILocation(line: 59, column: 29, scope: !7)
!40 = !DILocation(line: 59, column: 53, scope: !7)
!41 = !DILocation(line: 36, column: 15, scope: !42, inlinedAt: !43)
!42 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!43 = !DILocation(line: 49, column: 29, scope: !42, inlinedAt: !44)
!44 = !DILocation(line: 60, column: 40, scope: !42)
!45 = !DILocation(line: 38, column: 16, scope: !42, inlinedAt: !43)
!46 = !DILocation(line: 39, column: 29, scope: !42, inlinedAt: !43)
!47 = !DILocation(line: 38, column: 21, scope: !42, inlinedAt: !43)
!48 = !DILocation(line: 49, column: 29, scope: !33, inlinedAt: !49)
!49 = !DILocation(line: 60, column: 40, scope: !33)
!50 = !DILocation(line: 62, column: 36, scope: !7)
!51 = !DILocation(line: 63, column: 27, scope: !7)
!52 = !DILocation(line: 66, column: 42, scope: !7)
!53 = !DILocation(line: 66, column: 36, scope: !7)
!54 = !DILocation(line: 66, column: 53, scope: !7)
!55 = !DILocation(line: 66, column: 104, scope: !7)
!56 = !DILocation(line: 68, column: 24, scope: !7)
!57 = !DILocation(line: 69, column: 23, scope: !7)
!58 = !DILocation(line: 72, column: 40, scope: !7)
!59 = !DILocation(line: 243, column: 36, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!62 = !DILocation(line: 73, column: 27, scope: !60)
!63 = !DILocation(line: 233, column: 15, scope: !64, inlinedAt: !65)
!64 = distinct !DILexicalBlockFile(scope: !60, file: !61, discriminator: 0)
!65 = !DILocation(line: 243, column: 36, scope: !64, inlinedAt: !66)
!66 = !DILocation(line: 73, column: 27, scope: !64)
!67 = !DILocation(line: 74, column: 36, scope: !7)
!68 = !DILocation(line: 75, column: 27, scope: !7)
!69 = !DILocation(line: 78, column: 42, scope: !7)
!70 = !DILocation(line: 78, column: 36, scope: !7)
!71 = !DILocation(line: 78, column: 53, scope: !7)
!72 = !DILocation(line: 78, column: 105, scope: !7)
!73 = !DILocation(line: 80, column: 24, scope: !7)
!74 = !DILocation(line: 81, column: 23, scope: !7)
!75 = !DILocation(line: 82, column: 24, scope: !7)
!76 = !DILocation(line: 84, column: 29, scope: !7)
!77 = !DILocation(line: 84, column: 53, scope: !7)
!78 = !DILocation(line: 85, column: 29, scope: !7)
!79 = !DILocation(line: 85, column: 53, scope: !7)
!80 = !DILocation(line: 74, column: 4, scope: !7)
