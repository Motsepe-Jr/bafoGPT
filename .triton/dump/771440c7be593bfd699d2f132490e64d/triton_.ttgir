#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<1x2048xf32, #blocked>
    %cst_0 = arith.constant dense<8192> : tensor<1x2048xi32, #blocked>
    %cst_1 = arith.constant dense<8192> : tensor<1x2048xi32, #blocked1>
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_3 = arith.constant dense<1> : tensor<1x2048xi64, #blocked>
    %cst_4 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_5 = arith.constant dense<-4096> : tensor<1x2048xi64, #blocked>
    %c-1_i32 = arith.constant -1 : i32
    %c8192_i32 = arith.constant 8192 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_6 = arith.constant dense<true> : tensor<1x2048xi1, #blocked>
    %cst_7 = arith.constant dense<5.000000e+01> : tensor<1x2048xf32, #blocked>
    %cst_8 = arith.constant dense<6.250000e-02> : tensor<1x2048xf32, #blocked>
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %3 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x2048xi32, #blocked1>
    %5 = arith.remsi %0, %c8192_i32 : i32
    %6 = arith.muli %0, %c8192_i32 : i32
    %7 = tt.splat %6 : (i32) -> tensor<1x2048xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %9 = arith.muli %5, %c-1_i32 : i32
    %10 = tt.splat %9 : (i32) -> tensor<1x2048xi32, #blocked>
    %11 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %12 = scf.for %arg6 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg7 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %23 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32, #blocked>
      %24 = arith.addi %23, %3 : tensor<1x2048xi32, #blocked>
      %25 = arith.cmpi slt, %24, %cst_0 : tensor<1x2048xi32, #blocked>
      %26 = arith.addi %24, %7 : tensor<1x2048xi32, #blocked>
      %27 = tt.addptr %8, %26 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %28 = tt.load %27, %25, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %29 = arith.extf %28 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %30 = arith.mulf %29, %cst_8 : tensor<1x2048xf32, #blocked>
      %31 = arith.divf %30, %cst_7 : tensor<1x2048xf32, #blocked>
      %32 = tt.extern_elementwise %31 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %33 = arith.mulf %32, %cst_7 : tensor<1x2048xf32, #blocked>
      %34 = arith.addi %24, %10 : tensor<1x2048xi32, #blocked>
      %35 = arith.extsi %34 : tensor<1x2048xi32, #blocked> to tensor<1x2048xi64, #blocked>
      %36 = arith.cmpi sge, %35, %cst_3 : tensor<1x2048xi64, #blocked>
      %37 = arith.select %36, %cst_4, %cst_2 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %38 = arith.cmpf une, %37, %cst_2 : tensor<1x2048xf32, #blocked>
      %39 = arith.select %38, %cst, %37 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %40 = arith.cmpi sle, %35, %cst_5 : tensor<1x2048xi64, #blocked>
      %41 = arith.select %40, %cst_4, %cst_2 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %42 = arith.cmpf une, %41, %cst_2 : tensor<1x2048xf32, #blocked>
      %43 = arith.select %42, %cst, %41 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %44 = arith.addf %39, %43 : tensor<1x2048xf32, #blocked>
      %45 = arith.addf %33, %44 : tensor<1x2048xf32, #blocked>
      %46 = arith.cmpf ogt, %arg7, %45 : tensor<1x2048xf32, #blocked>
      %47 = arith.cmpf une, %arg7, %arg7 : tensor<1x2048xf32, #blocked>
      %48 = arith.ori %46, %47 : tensor<1x2048xi1, #blocked>
      %49 = arith.xori %48, %cst_6 : tensor<1x2048xi1, #blocked>
      %50 = arith.andi %25, %49 : tensor<1x2048xi1, #blocked>
      %51 = arith.select %50, %45, %arg7 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %52 = tt.addptr %11, %26 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %53 = arith.truncf %45 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
      tt.store %52, %53, %25 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
      scf.yield %51 : tensor<1x2048xf32, #blocked>
    }
    %13 = "tt.reduce"(%12) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %23 = arith.cmpf ogt, %arg6, %arg7 : f32
      %24 = arith.cmpf une, %arg6, %arg6 : f32
      %25 = arith.ori %23, %24 : i1
      %26 = arith.select %25, %arg6, %arg7 : f32
      tt.reduce.return %26 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %14 = tt.expand_dims %13 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %15 = tt.broadcast %14 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %16 = scf.for %arg6 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg7 = %cst_2) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %23 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32, #blocked>
      %24 = arith.addi %23, %3 : tensor<1x2048xi32, #blocked>
      %25 = arith.cmpi slt, %24, %cst_0 : tensor<1x2048xi32, #blocked>
      %26 = arith.addi %24, %7 : tensor<1x2048xi32, #blocked>
      %27 = tt.addptr %11, %26 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %28 = tt.load %27, %25, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %29 = arith.extf %28 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %30 = arith.subf %29, %15 : tensor<1x2048xf32, #blocked>
      %31 = math.exp %30 : tensor<1x2048xf32, #blocked>
      %32 = arith.addf %arg7, %31 : tensor<1x2048xf32, #blocked>
      %33 = arith.select %25, %32, %arg7 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %33 : tensor<1x2048xf32, #blocked>
    }
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %23 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %23 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %18 = tt.expand_dims %17 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %19 = tt.splat %6 : (i32) -> tensor<1x2048xi32, #blocked1>
    %20 = tt.broadcast %18 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %21 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %22 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>
    scf.for %arg6 = %c0_i32 to %c8192_i32 step %c2048_i32  : i32 {
      %23 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32, #blocked>
      %24 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32, #blocked1>
      %25 = arith.addi %23, %3 : tensor<1x2048xi32, #blocked>
      %26 = arith.addi %24, %4 : tensor<1x2048xi32, #blocked1>
      %27 = arith.cmpi slt, %25, %cst_0 : tensor<1x2048xi32, #blocked>
      %28 = arith.cmpi slt, %26, %cst_1 : tensor<1x2048xi32, #blocked1>
      %29 = arith.addi %25, %7 : tensor<1x2048xi32, #blocked>
      %30 = arith.addi %26, %19 : tensor<1x2048xi32, #blocked1>
      %31 = tt.addptr %11, %29 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %32 = tt.load %31, %27, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %33 = arith.extf %32 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %34 = arith.subf %33, %15 : tensor<1x2048xf32, #blocked>
      %35 = math.exp %34 : tensor<1x2048xf32, #blocked>
      %36 = arith.divf %35, %20 : tensor<1x2048xf32, #blocked>
      %37 = tt.addptr %21, %29 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %38 = arith.truncf %36 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
      tt.store %37, %38, %27 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
      %39 = tt.addptr %22, %30 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xi32, #blocked1>
      %40 = triton_gpu.convert_layout %36 : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked1>
      tt.store %39, %40, %28 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32, #blocked1>
    }
    tt.return
  }
}
