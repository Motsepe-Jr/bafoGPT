#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10d11de12de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked>
    %cst_0 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_1 = arith.constant dense<2304> : tensor<1x1024xi32, #blocked1>
    %c0_i32 = arith.constant 0 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %c512_i32 = arith.constant 512 : i32
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x1024xbf16, #blocked1>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32, #blocked1>
    %cst_4 = arith.constant dense<4.800000e+01> : tensor<1x1024xf32, #blocked1>
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<1x1024xf32, #blocked1>
    %cst_6 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked1>
    %cst_7 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c512_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x1024xi32, #blocked1>
    %4 = arith.muli %0, %c2304_i32 : i32
    %5 = tt.splat %4 : (i32) -> tensor<1x1024xi32, #blocked1>
    %6 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>
    %7 = tt.splat %1 : (i1) -> tensor<1x1024xi1, #blocked1>
    %8 = scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg14 = %cst_3) -> (tensor<1x1024xf32, #blocked1>)  : i32 {
      %49 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32, #blocked1>
      %50 = arith.addi %49, %3 : tensor<1x1024xi32, #blocked1>
      %51 = arith.cmpi slt, %50, %cst_1 : tensor<1x1024xi32, #blocked1>
      %52 = arith.addi %50, %5 : tensor<1x1024xi32, #blocked1>
      %53 = tt.addptr %6, %52 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
      %54 = arith.andi %51, %7 : tensor<1x1024xi1, #blocked1>
      %55 = tt.load %53, %54, %cst_2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked1>
      %56 = arith.extf %55 : tensor<1x1024xbf16, #blocked1> to tensor<1x1024xf32, #blocked1>
      %57 = arith.mulf %56, %56 : tensor<1x1024xf32, #blocked1>
      %58 = arith.addf %arg14, %57 : tensor<1x1024xf32, #blocked1>
      %59 = arith.select %54, %58, %arg14 : tensor<1x1024xi1, #blocked1>, tensor<1x1024xf32, #blocked1>
      scf.yield %59 : tensor<1x1024xf32, #blocked1>
    }
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32, %arg14: f32):
      %49 = arith.addf %arg13, %arg14 : f32
      tt.reduce.return %49 : f32
    }) : (tensor<1x1024xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %10 = triton_gpu.convert_layout %9 : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %11 = tt.expand_dims %10 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %12 = tt.expand_dims %9 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<1x1xf32, #blocked1>
    %13 = arith.divf %11, %cst_0 : tensor<1x1xf32, #blocked>
    %14 = arith.divf %12, %cst_6 : tensor<1x1xf32, #blocked1>
    %15 = arith.addf %13, %cst : tensor<1x1xf32, #blocked>
    %16 = arith.addf %14, %cst_7 : tensor<1x1xf32, #blocked1>
    %17 = tt.extern_elementwise %15 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
    %18 = tt.extern_elementwise %16 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1>
    gpu.barrier
    %19 = tt.addptr %arg0, %0 : !tt.ptr<f32, 1>, i32
    %20 = tt.splat %19 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %21 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked>
    tt.store %20, %17, %21 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32, #blocked>
    %22 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %23 = tt.splat %22 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked1>
    %24 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked1>
    %25 = tt.load %23, %24 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked1>
    %26 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>
    %27 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>
    %28 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>
    %29 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>
    %30 = tt.broadcast %18 : (tensor<1x1xf32, #blocked1>) -> tensor<1x1024xf32, #blocked1>
    %31 = tt.broadcast %25 : (tensor<1x1xf32, #blocked1>) -> tensor<1x1024xf32, #blocked1>
    %32 = tt.splat %arg9 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>
    %33 = scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg14 = %cst_3) -> (tensor<1x1024xf32, #blocked1>)  : i32 {
      %49 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32, #blocked1>
      %50 = arith.addi %49, %3 : tensor<1x1024xi32, #blocked1>
      %51 = arith.cmpi slt, %50, %cst_1 : tensor<1x1024xi32, #blocked1>
      %52 = arith.addi %50, %5 : tensor<1x1024xi32, #blocked1>
      %53 = tt.addptr %6, %52 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
      %54 = arith.andi %51, %7 : tensor<1x1024xi1, #blocked1>
      %55 = tt.load %53, %54, %cst_2 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked1>
      %56 = arith.extf %55 : tensor<1x1024xbf16, #blocked1> to tensor<1x1024xf32, #blocked1>
      %57 = tt.addptr %26, %50 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
      %58 = tt.load %57, %51, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked1>
      %59 = tt.addptr %27, %52 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
      %60 = tt.load %59, %54, %cst_2 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked1>
      %61 = arith.extf %60 : tensor<1x1024xbf16, #blocked1> to tensor<1x1024xf32, #blocked1>
      %62 = tt.addptr %28, %50 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
      %63 = tt.load %62, %51, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked1>
      %64 = tt.addptr %29, %52 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
      %65 = tt.load %64, %54, %cst_3 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked1>
      %66 = arith.mulf %56, %30 : tensor<1x1024xf32, #blocked1>
      %67 = arith.addf %58, %cst_5 : tensor<1x1024xf32, #blocked1>
      %68 = arith.mulf %66, %67 : tensor<1x1024xf32, #blocked1>
      %69 = arith.mulf %61, %31 : tensor<1x1024xf32, #blocked1>
      %70 = arith.addf %63, %cst_5 : tensor<1x1024xf32, #blocked1>
      %71 = arith.mulf %69, %70 : tensor<1x1024xf32, #blocked1>
      %72 = arith.mulf %65, %cst_4 : tensor<1x1024xf32, #blocked1>
      %73 = arith.addf %71, %72 : tensor<1x1024xf32, #blocked1>
      %74 = arith.addf %68, %73 : tensor<1x1024xf32, #blocked1>
      %75 = arith.mulf %74, %74 : tensor<1x1024xf32, #blocked1>
      %76 = arith.addf %arg14, %75 : tensor<1x1024xf32, #blocked1>
      %77 = arith.select %54, %76, %arg14 : tensor<1x1024xi1, #blocked1>, tensor<1x1024xf32, #blocked1>
      %78 = tt.addptr %32, %52 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
      tt.store %78, %74, %54 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xf32, #blocked1>
      scf.yield %77 : tensor<1x1024xf32, #blocked1>
    }
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32, %arg14: f32):
      %49 = arith.addf %arg13, %arg14 : f32
      tt.reduce.return %49 : f32
    }) : (tensor<1x1024xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %35 = triton_gpu.convert_layout %34 : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %36 = tt.expand_dims %35 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %37 = tt.expand_dims %34 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<1x1xf32, #blocked1>
    %38 = arith.divf %36, %cst_0 : tensor<1x1xf32, #blocked>
    %39 = arith.divf %37, %cst_6 : tensor<1x1xf32, #blocked1>
    %40 = arith.addf %38, %cst : tensor<1x1xf32, #blocked>
    %41 = arith.addf %39, %cst_7 : tensor<1x1xf32, #blocked1>
    %42 = tt.extern_elementwise %40 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
    %43 = tt.extern_elementwise %41 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1>
    gpu.barrier
    %44 = tt.addptr %arg1, %0 : !tt.ptr<f32, 1>, i32
    %45 = tt.splat %44 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    tt.store %45, %42, %21 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32, #blocked>
    %46 = tt.splat %arg8 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>
    %47 = tt.broadcast %43 : (tensor<1x1xf32, #blocked1>) -> tensor<1x1024xf32, #blocked1>
    %48 = tt.splat %arg10 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>
    scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32  : i32 {
      %49 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32, #blocked1>
      %50 = arith.addi %49, %3 : tensor<1x1024xi32, #blocked1>
      %51 = arith.cmpi slt, %50, %cst_1 : tensor<1x1024xi32, #blocked1>
      %52 = arith.addi %50, %5 : tensor<1x1024xi32, #blocked1>
      %53 = tt.addptr %32, %52 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
      %54 = arith.andi %51, %7 : tensor<1x1024xi1, #blocked1>
      %55 = tt.load %53, %54, %cst_3 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked1>
      %56 = tt.addptr %46, %50 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
      %57 = tt.load %56, %51, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked1>
      %58 = arith.mulf %55, %47 : tensor<1x1024xf32, #blocked1>
      %59 = arith.addf %57, %cst_5 : tensor<1x1024xf32, #blocked1>
      %60 = arith.mulf %58, %59 : tensor<1x1024xf32, #blocked1>
      %61 = tt.addptr %48, %52 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1x1024xi32, #blocked1>
      %62 = arith.truncf %60 : tensor<1x1024xf32, #blocked1> to tensor<1x1024xbf16, #blocked1>
      tt.store %61, %62, %54 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xbf16, #blocked1>
    }
    tt.return
  }
}
