; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d9d10d11de12de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %15 = and i32 %14, 31, !dbg !10
  %16 = lshr i32 %14, 5, !dbg !10
  %17 = and i32 %16, 7, !dbg !10
  %urem = and i32 %14, 255, !dbg !10
  %18 = shl nuw nsw i32 %urem, 2, !dbg !10
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %.fr38 = freeze i32 %19, !dbg !12
  %20 = icmp slt i32 %.fr38, 512, !dbg !12
  %21 = mul i32 %.fr38, 2304, !dbg !13
  %22 = add i32 %18, %21, !dbg !14
  %23 = sext i32 %22 to i64, !dbg !15
  %24 = getelementptr i16, ptr addrspace(1) %2, i64 %23, !dbg !15
  br i1 %20, label %.split.preheader, label %.split.us.preheader

.split.us.preheader:                              ; preds = %13
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !16
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !16
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !16
  %28 = trunc i32 %26 to i16, !dbg !16
  %extelt.offset6.us = lshr i32 %26, 16, !dbg !16
  %29 = trunc i32 %extelt.offset6.us to i16, !dbg !16
  %30 = trunc i32 %27 to i16, !dbg !16
  %extelt.offset7.us = lshr i32 %27, 16, !dbg !16
  %31 = trunc i32 %extelt.offset7.us to i16, !dbg !16
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !17
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !17
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !17
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !17
  %36 = or i32 %18, 1024, !dbg !18
  %37 = add i32 %36, %21, !dbg !14
  %38 = sext i32 %37 to i64, !dbg !15
  %39 = getelementptr i16, ptr addrspace(1) %2, i64 %38, !dbg !15
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !16
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !16
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !16
  %43 = trunc i32 %41 to i16, !dbg !16
  %extelt.offset6.us.1 = lshr i32 %41, 16, !dbg !16
  %44 = trunc i32 %extelt.offset6.us.1 to i16, !dbg !16
  %45 = trunc i32 %42 to i16, !dbg !16
  %extelt.offset7.us.1 = lshr i32 %42, 16, !dbg !16
  %46 = trunc i32 %extelt.offset7.us.1 to i16, !dbg !16
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #6, !dbg !17
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #6, !dbg !17
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #6, !dbg !17
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #6, !dbg !17
  %51 = or i32 %18, 2048, !dbg !18
  %52 = add i32 %51, %21, !dbg !14
  %53 = sext i32 %52 to i64, !dbg !15
  %54 = getelementptr i16, ptr addrspace(1) %2, i64 %53, !dbg !15
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !16
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !16
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !16
  %58 = trunc i32 %56 to i16, !dbg !16
  %extelt.offset6.us.2 = lshr i32 %56, 16, !dbg !16
  %59 = trunc i32 %extelt.offset6.us.2 to i16, !dbg !16
  %60 = trunc i32 %57 to i16, !dbg !16
  %extelt.offset7.us.2 = lshr i32 %57, 16, !dbg !16
  %61 = trunc i32 %extelt.offset7.us.2 to i16, !dbg !16
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #6, !dbg !17
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #6, !dbg !17
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #6, !dbg !17
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #6, !dbg !17
  br label %.split37.us, !dbg !19

.split.preheader:                                 ; preds = %13
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !16
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !16
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !16
  %69 = trunc i32 %67 to i16, !dbg !16
  %extelt.offset6 = lshr i32 %67, 16, !dbg !16
  %70 = trunc i32 %extelt.offset6 to i16, !dbg !16
  %71 = trunc i32 %68 to i16, !dbg !16
  %extelt.offset7 = lshr i32 %68, 16, !dbg !16
  %72 = trunc i32 %extelt.offset7 to i16, !dbg !16
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #6, !dbg !17
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #6, !dbg !17
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #6, !dbg !17
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #6, !dbg !17
  %77 = or i32 %18, 1024, !dbg !18
  %78 = add i32 %77, %21, !dbg !14
  %79 = sext i32 %78 to i64, !dbg !15
  %80 = getelementptr i16, ptr addrspace(1) %2, i64 %79, !dbg !15
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %80, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !16
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !16
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !16
  %84 = trunc i32 %82 to i16, !dbg !16
  %extelt.offset6.1 = lshr i32 %82, 16, !dbg !16
  %85 = trunc i32 %extelt.offset6.1 to i16, !dbg !16
  %86 = trunc i32 %83 to i16, !dbg !16
  %extelt.offset7.1 = lshr i32 %83, 16, !dbg !16
  %87 = trunc i32 %extelt.offset7.1 to i16, !dbg !16
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #6, !dbg !17
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #6, !dbg !17
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #6, !dbg !17
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #6, !dbg !17
  %92 = or i32 %18, 2048, !dbg !18
  %93 = icmp ult i32 %92, 2304, !dbg !23
  %94 = add i32 %92, %21, !dbg !14
  %95 = sext i32 %94 to i64, !dbg !15
  %96 = getelementptr i16, ptr addrspace(1) %2, i64 %95, !dbg !15
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #6, !dbg !16
  %98 = extractvalue { i32, i32 } %97, 0, !dbg !16
  %99 = extractvalue { i32, i32 } %97, 1, !dbg !16
  %100 = trunc i32 %98 to i16, !dbg !16
  %extelt.offset6.2 = lshr i32 %98, 16, !dbg !16
  %101 = trunc i32 %extelt.offset6.2 to i16, !dbg !16
  %102 = trunc i32 %99 to i16, !dbg !16
  %extelt.offset7.2 = lshr i32 %99, 16, !dbg !16
  %103 = trunc i32 %extelt.offset7.2 to i16, !dbg !16
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #6, !dbg !17
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #6, !dbg !17
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #6, !dbg !17
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #6, !dbg !17
  %108 = insertelement <2 x float> poison, float %73, i64 0, !dbg !24
  %109 = insertelement <2 x float> %108, float %74, i64 1, !dbg !24
  %110 = fmul <2 x float> %109, %109, !dbg !24
  %111 = insertelement <2 x float> poison, float %88, i64 0, !dbg !24
  %112 = insertelement <2 x float> %111, float %89, i64 1, !dbg !24
  %113 = fmul <2 x float> %112, %112, !dbg !24
  %114 = fadd <2 x float> %110, %113, !dbg !25
  %115 = insertelement <2 x float> poison, float %104, i64 0, !dbg !24
  %116 = insertelement <2 x float> %115, float %105, i64 1, !dbg !24
  %117 = fmul <2 x float> %116, %116, !dbg !24
  %118 = insertelement <2 x i1> poison, i1 %93, i64 0, !dbg !25
  %119 = shufflevector <2 x i1> %118, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !25
  %120 = select <2 x i1> %119, <2 x float> %117, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !25
  %121 = fadd <2 x float> %114, %120, !dbg !25
  %122 = insertelement <2 x float> poison, float %76, i64 0, !dbg !24
  %123 = insertelement <2 x float> %122, float %75, i64 1, !dbg !24
  %124 = fmul <2 x float> %123, %123, !dbg !24
  %125 = insertelement <2 x float> poison, float %91, i64 0, !dbg !24
  %126 = insertelement <2 x float> %125, float %90, i64 1, !dbg !24
  %127 = fmul <2 x float> %126, %126, !dbg !24
  %128 = fadd <2 x float> %124, %127, !dbg !25
  %129 = insertelement <2 x float> poison, float %107, i64 0, !dbg !24
  %130 = insertelement <2 x float> %129, float %106, i64 1, !dbg !24
  %131 = fmul <2 x float> %130, %130, !dbg !24
  %132 = select <2 x i1> %119, <2 x float> %131, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !25
  %133 = fadd <2 x float> %128, %132, !dbg !25
  %shift = shufflevector <2 x float> %121, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %134 = fadd <2 x float> %121, %shift, !dbg !19
  %shift51 = shufflevector <2 x float> %133, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %135 = fadd <2 x float> %shift51, %134, !dbg !19
  %136 = fadd <2 x float> %133, %135, !dbg !19
  %137 = extractelement <2 x float> %136, i64 0, !dbg !19
  br label %.split37.us, !dbg !19

.split37.us:                                      ; preds = %.split.us.preheader, %.split.preheader
  %138 = phi float [ %137, %.split.preheader ], [ 0.000000e+00, %.split.us.preheader ], !dbg !26
  %139 = bitcast float %138 to i32, !dbg !19
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 16, i32 31), !dbg !19
  %141 = bitcast i32 %140 to float, !dbg !19
  %142 = fadd float %138, %141, !dbg !26
  %143 = bitcast float %142 to i32, !dbg !19
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !19
  %145 = bitcast i32 %144 to float, !dbg !19
  %146 = fadd float %142, %145, !dbg !26
  %147 = bitcast float %146 to i32, !dbg !19
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !19
  %149 = bitcast i32 %148 to float, !dbg !19
  %150 = fadd float %146, %149, !dbg !26
  %151 = bitcast float %150 to i32, !dbg !19
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !19
  %153 = bitcast i32 %152 to float, !dbg !19
  %154 = fadd float %150, %153, !dbg !26
  %155 = bitcast float %154 to i32, !dbg !19
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !19
  %157 = bitcast i32 %156 to float, !dbg !19
  %158 = fadd float %154, %157, !dbg !26
  %159 = icmp eq i32 %15, 0, !dbg !19
  %160 = zext nneg i32 %17 to i64, !dbg !19
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i64 %160, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, float %158, i1 %159) #6, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %162 = icmp slt i32 %14, 8, !dbg !19
  %163 = sext i32 %14 to i64, !dbg !19
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i64 %163, !dbg !19
  %165 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %164, i1 %162) #6, !dbg !19
  %166 = bitcast float %165 to i32, !dbg !19
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !19
  %168 = bitcast i32 %167 to float, !dbg !19
  %169 = fadd float %165, %168, !dbg !26
  %170 = bitcast float %169 to i32, !dbg !19
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !19
  %172 = bitcast i32 %171 to float, !dbg !19
  %173 = fadd float %169, %172, !dbg !26
  %174 = bitcast float %173 to i32, !dbg !19
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !19
  %176 = bitcast i32 %175 to float, !dbg !19
  %177 = fadd float %173, %176, !dbg !26
  %178 = and i32 %14, 7, !dbg !19
  %179 = icmp eq i32 %178, 0, !dbg !19
  %180 = and i1 %162, %179, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, float %177, i1 %180) #6, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %181 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %182 = insertelement <1 x float> undef, float %181, i64 0, !dbg !30
  store <1 x float> %182, ptr addrspace(3) @global_smem, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %183 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !30
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float 2.304000e+03) #6, !dbg !31
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float 2.304000e+03) #6, !dbg !31
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float 2.304000e+03) #6, !dbg !31
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float 2.304000e+03) #6, !dbg !31
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float 2.304000e+03) #6, !dbg !31
  %189 = fadd float %184, 0x3EE4F8B580000000, !dbg !32
  %190 = fadd float %185, 0x3EE4F8B580000000, !dbg !32
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %.not.i = icmp eq i32 %191, 0, !dbg !30
  br i1 %.not.i, label %194, label %192, !dbg !30

192:                                              ; preds = %.split37.us
  %193 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %189), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

194:                                              ; preds = %.split37.us
  %195 = tail call float @llvm.nvvm.rsqrt.approx.f(float %189), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

__nv_rsqrtf.exit:                                 ; preds = %192, %194
  %.0.i = phi float [ %193, %192 ], [ %195, %194 ], !dbg !30
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %.not.i8 = icmp eq i32 %196, 0, !dbg !30
  br i1 %.not.i8, label %199, label %197, !dbg !30

197:                                              ; preds = %__nv_rsqrtf.exit
  %198 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %190), !dbg !30
  br label %__nv_rsqrtf.exit10, !dbg !30

199:                                              ; preds = %__nv_rsqrtf.exit
  %200 = tail call float @llvm.nvvm.rsqrt.approx.f(float %190), !dbg !30
  br label %__nv_rsqrtf.exit10, !dbg !30

__nv_rsqrtf.exit10:                               ; preds = %197, %199
  %.0.i9 = phi float [ %198, %197 ], [ %200, %199 ], !dbg !30
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %204 = sext i32 %.fr38 to i64, !dbg !34
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !34
  %206 = icmp eq i32 %urem, 0, !dbg !35
  %207 = bitcast float %.0.i to i32, !dbg !35
  %208 = and i1 %206, %20, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %205, i1 %208) #6, !dbg !35
  %209 = getelementptr float, ptr addrspace(1) %5, i64 %204, !dbg !36
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %20) #6, !dbg !37
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %20) #6, !dbg !37
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %20) #6, !dbg !37
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %20) #6, !dbg !37
  %214 = insertelement <4 x float> poison, float %.0.i9, i64 0, !dbg !38
  %215 = shufflevector <4 x float> %214, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %216 = insertelement <4 x i32> undef, i32 %210, i64 0, !dbg !39
  %217 = bitcast <4 x i32> %216 to <4 x float>, !dbg !39
  %218 = shufflevector <4 x float> %217, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !39
  br label %219, !dbg !40

219:                                              ; preds = %__nv_rsqrtf.exit10, %219
  %220 = phi i32 [ 0, %__nv_rsqrtf.exit10 ], [ %312, %219 ]
  %221 = phi <4 x float> [ zeroinitializer, %__nv_rsqrtf.exit10 ], [ %306, %219 ]
  %222 = or i32 %220, %18, !dbg !41
  %223 = icmp ult i32 %222, 2304, !dbg !42
  %224 = add i32 %222, %21, !dbg !43
  %225 = sext i32 %224 to i64, !dbg !44
  %226 = getelementptr i16, ptr addrspace(1) %2, i64 %225, !dbg !44
  %227 = and i1 %20, %223, !dbg !45
  %228 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %226, i1 %227, i32 0, i1 %227, i32 0, i1 %227) #6, !dbg !46
  %229 = extractvalue { i32, i32 } %228, 0, !dbg !46
  %230 = extractvalue { i32, i32 } %228, 1, !dbg !46
  %231 = trunc i32 %229 to i16, !dbg !46
  %extelt.offset = lshr i32 %229, 16, !dbg !46
  %232 = trunc i32 %extelt.offset to i16, !dbg !46
  %233 = trunc i32 %230 to i16, !dbg !46
  %extelt.offset3 = lshr i32 %230, 16, !dbg !46
  %234 = trunc i32 %extelt.offset3 to i16, !dbg !46
  %235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #6, !dbg !47
  %236 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #6, !dbg !47
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #6, !dbg !47
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #6, !dbg !47
  %239 = zext nneg i32 %222 to i64, !dbg !48
  %240 = getelementptr float, ptr addrspace(1) %3, i64 %239, !dbg !48
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %240, i1 %223, i32 0, i1 %223, i32 0, i1 %223, i32 0, i1 %223, i32 0, i1 %223) #6, !dbg !49
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !49
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !49
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !49
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !49
  %246 = getelementptr i16, ptr addrspace(1) %4, i64 %225, !dbg !50
  %247 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %246, i1 %227, i32 0, i1 %227, i32 0, i1 %227) #6, !dbg !51
  %248 = extractvalue { i32, i32 } %247, 0, !dbg !51
  %249 = extractvalue { i32, i32 } %247, 1, !dbg !51
  %250 = trunc i32 %248 to i16, !dbg !51
  %extelt.offset4 = lshr i32 %248, 16, !dbg !51
  %251 = trunc i32 %extelt.offset4 to i16, !dbg !51
  %252 = trunc i32 %249 to i16, !dbg !51
  %extelt.offset5 = lshr i32 %249, 16, !dbg !51
  %253 = trunc i32 %extelt.offset5 to i16, !dbg !51
  %254 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %250) #6, !dbg !52
  %255 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %251) #6, !dbg !52
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %252) #6, !dbg !52
  %257 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %253) #6, !dbg !52
  %258 = getelementptr float, ptr addrspace(1) %6, i64 %239, !dbg !53
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %258, i1 %223, i32 0, i1 %223, i32 0, i1 %223, i32 0, i1 %223, i32 0, i1 %223) #6, !dbg !54
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !54
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !54
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !54
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !54
  %264 = getelementptr float, ptr addrspace(1) %7, i64 %225, !dbg !55
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %264, i1 %227, i32 0, i1 %227, i32 0, i1 %227, i32 0, i1 %227, i32 0, i1 %227) #6, !dbg !56
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !56
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !56
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !56
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !56
  %270 = insertelement <4 x i32> poison, i32 %242, i64 0, !dbg !49
  %271 = insertelement <4 x i32> %270, i32 %243, i64 1, !dbg !49
  %272 = insertelement <4 x i32> %271, i32 %244, i64 2, !dbg !49
  %273 = insertelement <4 x i32> %272, i32 %245, i64 3, !dbg !49
  %274 = bitcast <4 x i32> %273 to <4 x float>, !dbg !49
  %275 = insertelement <4 x i32> poison, i32 %260, i64 0, !dbg !54
  %276 = insertelement <4 x i32> %275, i32 %261, i64 1, !dbg !54
  %277 = insertelement <4 x i32> %276, i32 %262, i64 2, !dbg !54
  %278 = insertelement <4 x i32> %277, i32 %263, i64 3, !dbg !54
  %279 = bitcast <4 x i32> %278 to <4 x float>, !dbg !54
  %280 = insertelement <4 x i32> poison, i32 %266, i64 0, !dbg !56
  %281 = insertelement <4 x i32> %280, i32 %267, i64 1, !dbg !56
  %282 = insertelement <4 x i32> %281, i32 %268, i64 2, !dbg !56
  %283 = insertelement <4 x i32> %282, i32 %269, i64 3, !dbg !56
  %284 = bitcast <4 x i32> %283 to <4 x float>, !dbg !56
  %285 = insertelement <4 x float> poison, float %235, i64 0, !dbg !38
  %286 = insertelement <4 x float> %285, float %236, i64 1, !dbg !38
  %287 = insertelement <4 x float> %286, float %237, i64 2, !dbg !38
  %288 = insertelement <4 x float> %287, float %238, i64 3, !dbg !38
  %289 = fmul <4 x float> %215, %288, !dbg !38
  %290 = fadd <4 x float> %274, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !57
  %291 = fmul <4 x float> %289, %290, !dbg !58
  %292 = insertelement <4 x float> poison, float %254, i64 0, !dbg !39
  %293 = insertelement <4 x float> %292, float %255, i64 1, !dbg !39
  %294 = insertelement <4 x float> %293, float %256, i64 2, !dbg !39
  %295 = insertelement <4 x float> %294, float %257, i64 3, !dbg !39
  %296 = fmul <4 x float> %295, %218, !dbg !39
  %297 = fadd <4 x float> %279, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !59
  %298 = fmul <4 x float> %296, %297, !dbg !60
  %299 = fmul <4 x float> %284, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !61
  %300 = fadd <4 x float> %298, %299, !dbg !62
  %301 = fadd <4 x float> %291, %300, !dbg !63
  %302 = fmul <4 x float> %301, %301, !dbg !64
  %303 = insertelement <4 x i1> poison, i1 %227, i64 0, !dbg !65
  %304 = shufflevector <4 x i1> %303, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !65
  %305 = select <4 x i1> %304, <4 x float> %302, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !65
  %306 = fadd <4 x float> %221, %305, !dbg !65
  %307 = getelementptr float, ptr addrspace(1) %9, i64 %225, !dbg !66
  %bc = bitcast <4 x float> %301 to <4 x i32>, !dbg !67
  %308 = extractelement <4 x i32> %bc, i64 0, !dbg !67
  %bc55 = bitcast <4 x float> %301 to <4 x i32>, !dbg !67
  %309 = extractelement <4 x i32> %bc55, i64 1, !dbg !67
  %bc56 = bitcast <4 x float> %301 to <4 x i32>, !dbg !67
  %310 = extractelement <4 x i32> %bc56, i64 2, !dbg !67
  %bc57 = bitcast <4 x float> %301 to <4 x i32>, !dbg !67
  %311 = extractelement <4 x i32> %bc57, i64 3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %308, i32 %309, i32 %310, i32 %311, ptr addrspace(1) %307, i1 %227) #6, !dbg !67
  %312 = add nuw nsw i32 %220, 1024, !dbg !40
  %313 = icmp ult i32 %220, 1280, !dbg !40
  br i1 %313, label %219, label %314, !dbg !40

314:                                              ; preds = %219
  %shift52 = shufflevector <4 x float> %306, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !68
  %315 = fadd <4 x float> %306, %shift52, !dbg !68
  %shift53 = shufflevector <4 x float> %306, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !68
  %316 = fadd <4 x float> %shift53, %315, !dbg !68
  %shift54 = shufflevector <4 x float> %306, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !68
  %317 = fadd <4 x float> %shift54, %316, !dbg !68
  %318 = extractelement <4 x float> %317, i64 0, !dbg !68
  %319 = bitcast float %318 to i32, !dbg !71
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 16, i32 31), !dbg !71
  %321 = bitcast i32 %320 to float, !dbg !71
  %322 = fadd float %318, %321, !dbg !68
  %323 = bitcast float %322 to i32, !dbg !71
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 8, i32 31), !dbg !71
  %325 = bitcast i32 %324 to float, !dbg !71
  %326 = fadd float %322, %325, !dbg !68
  %327 = bitcast float %326 to i32, !dbg !71
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 4, i32 31), !dbg !71
  %329 = bitcast i32 %328 to float, !dbg !71
  %330 = fadd float %326, %329, !dbg !68
  %331 = bitcast float %330 to i32, !dbg !71
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 2, i32 31), !dbg !71
  %333 = bitcast i32 %332 to float, !dbg !71
  %334 = fadd float %330, %333, !dbg !68
  %335 = bitcast float %334 to i32, !dbg !71
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 1, i32 31), !dbg !71
  %337 = bitcast i32 %336 to float, !dbg !71
  %338 = fadd float %334, %337, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, float %338, i1 %159) #6, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %339 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %164, i1 %162) #6, !dbg !71
  %340 = bitcast float %339 to i32, !dbg !71
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !71
  %342 = bitcast i32 %341 to float, !dbg !71
  %343 = fadd float %339, %342, !dbg !68
  %344 = bitcast float %343 to i32, !dbg !71
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 2, i32 31), !dbg !71
  %346 = bitcast i32 %345 to float, !dbg !71
  %347 = fadd float %343, %346, !dbg !68
  %348 = bitcast float %347 to i32, !dbg !71
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 1, i32 31), !dbg !71
  %350 = bitcast i32 %349 to float, !dbg !71
  %351 = fadd float %347, %350, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, float %351, i1 %180) #6, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %352 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %353 = insertelement <1 x float> undef, float %352, i64 0, !dbg !73
  store <1 x float> %353, ptr addrspace(3) @global_smem, align 4, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %354 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !73
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float 2.304000e+03) #6, !dbg !74
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 2.304000e+03) #6, !dbg !74
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 2.304000e+03) #6, !dbg !74
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 2.304000e+03) #6, !dbg !74
  %359 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 2.304000e+03) #6, !dbg !74
  %360 = fadd float %355, 0x3EE4F8B580000000, !dbg !75
  %361 = fadd float %356, 0x3EE4F8B580000000, !dbg !75
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %.not.i20 = icmp eq i32 %362, 0, !dbg !73
  br i1 %.not.i20, label %365, label %363, !dbg !73

363:                                              ; preds = %314
  %364 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %360), !dbg !73
  br label %__nv_rsqrtf.exit22, !dbg !73

365:                                              ; preds = %314
  %366 = tail call float @llvm.nvvm.rsqrt.approx.f(float %360), !dbg !73
  br label %__nv_rsqrtf.exit22, !dbg !73

__nv_rsqrtf.exit22:                               ; preds = %363, %365
  %.0.i21 = phi float [ %364, %363 ], [ %366, %365 ], !dbg !73
  %367 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %.not.i23 = icmp eq i32 %367, 0, !dbg !73
  br i1 %.not.i23, label %370, label %368, !dbg !73

368:                                              ; preds = %__nv_rsqrtf.exit22
  %369 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %361), !dbg !73
  br label %__nv_rsqrtf.exit25, !dbg !73

370:                                              ; preds = %__nv_rsqrtf.exit22
  %371 = tail call float @llvm.nvvm.rsqrt.approx.f(float %361), !dbg !73
  br label %__nv_rsqrtf.exit25, !dbg !73

__nv_rsqrtf.exit25:                               ; preds = %368, %370
  %.0.i24 = phi float [ %369, %368 ], [ %371, %370 ], !dbg !73
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %375 = getelementptr float, ptr addrspace(1) %1, i64 %204, !dbg !77
  %376 = bitcast float %.0.i21 to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %376, ptr addrspace(1) %375, i1 %208) #6, !dbg !78
  %377 = add i32 %18, %21, !dbg !79
  %378 = sext i32 %377 to i64, !dbg !80
  %379 = getelementptr float, ptr addrspace(1) %9, i64 %378, !dbg !80
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %379, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #6, !dbg !81
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !81
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !81
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !81
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !81
  %385 = bitcast i32 %381 to float, !dbg !81
  %386 = bitcast i32 %382 to float, !dbg !81
  %387 = bitcast i32 %383 to float, !dbg !81
  %388 = bitcast i32 %384 to float, !dbg !81
  %389 = zext nneg i32 %18 to i64, !dbg !82
  %390 = getelementptr float, ptr addrspace(1) %8, i64 %389, !dbg !82
  %391 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %390, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !83
  %392 = extractvalue { i32, i32, i32, i32 } %391, 0, !dbg !83
  %393 = extractvalue { i32, i32, i32, i32 } %391, 1, !dbg !83
  %394 = extractvalue { i32, i32, i32, i32 } %391, 2, !dbg !83
  %395 = extractvalue { i32, i32, i32, i32 } %391, 3, !dbg !83
  %396 = bitcast i32 %392 to float, !dbg !83
  %397 = bitcast i32 %393 to float, !dbg !83
  %398 = bitcast i32 %394 to float, !dbg !83
  %399 = bitcast i32 %395 to float, !dbg !83
  %400 = fmul float %.0.i24, %385, !dbg !84
  %401 = fmul float %.0.i24, %386, !dbg !84
  %402 = fmul float %.0.i24, %387, !dbg !84
  %403 = fmul float %.0.i24, %388, !dbg !84
  %404 = fadd float %396, 1.000000e+00, !dbg !85
  %405 = fadd float %397, 1.000000e+00, !dbg !85
  %406 = fadd float %398, 1.000000e+00, !dbg !85
  %407 = fadd float %399, 1.000000e+00, !dbg !85
  %408 = fmul float %400, %404, !dbg !86
  %409 = fmul float %401, %405, !dbg !86
  %410 = fmul float %402, %406, !dbg !86
  %411 = fmul float %403, %407, !dbg !86
  %412 = getelementptr i16, ptr addrspace(1) %10, i64 %378, !dbg !87
  %413 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %408) #6, !dbg !88
  %414 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %409) #6, !dbg !88
  %415 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %410) #6, !dbg !88
  %416 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %411) #6, !dbg !88
  %417 = insertelement <2 x i16> undef, i16 %413, i64 0, !dbg !88
  %418 = insertelement <2 x i16> %417, i16 %414, i64 1, !dbg !88
  %419 = bitcast <2 x i16> %418 to i32, !dbg !88
  %420 = insertelement <2 x i16> undef, i16 %415, i64 0, !dbg !88
  %421 = insertelement <2 x i16> %420, i16 %416, i64 1, !dbg !88
  %422 = bitcast <2 x i16> %421 to i32, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %419, i32 %422, ptr addrspace(1) %412, i1 %20) #6, !dbg !88
  %423 = or i32 %18, 1024, !dbg !89
  %424 = add i32 %423, %21, !dbg !79
  %425 = sext i32 %424 to i64, !dbg !80
  %426 = getelementptr float, ptr addrspace(1) %9, i64 %425, !dbg !80
  %427 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %426, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #6, !dbg !81
  %428 = extractvalue { i32, i32, i32, i32 } %427, 0, !dbg !81
  %429 = extractvalue { i32, i32, i32, i32 } %427, 1, !dbg !81
  %430 = extractvalue { i32, i32, i32, i32 } %427, 2, !dbg !81
  %431 = extractvalue { i32, i32, i32, i32 } %427, 3, !dbg !81
  %432 = bitcast i32 %428 to float, !dbg !81
  %433 = bitcast i32 %429 to float, !dbg !81
  %434 = bitcast i32 %430 to float, !dbg !81
  %435 = bitcast i32 %431 to float, !dbg !81
  %436 = zext nneg i32 %423 to i64, !dbg !82
  %437 = getelementptr float, ptr addrspace(1) %8, i64 %436, !dbg !82
  %438 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %437, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !83
  %439 = extractvalue { i32, i32, i32, i32 } %438, 0, !dbg !83
  %440 = extractvalue { i32, i32, i32, i32 } %438, 1, !dbg !83
  %441 = extractvalue { i32, i32, i32, i32 } %438, 2, !dbg !83
  %442 = extractvalue { i32, i32, i32, i32 } %438, 3, !dbg !83
  %443 = bitcast i32 %439 to float, !dbg !83
  %444 = bitcast i32 %440 to float, !dbg !83
  %445 = bitcast i32 %441 to float, !dbg !83
  %446 = bitcast i32 %442 to float, !dbg !83
  %447 = fmul float %.0.i24, %432, !dbg !84
  %448 = fmul float %.0.i24, %433, !dbg !84
  %449 = fmul float %.0.i24, %434, !dbg !84
  %450 = fmul float %.0.i24, %435, !dbg !84
  %451 = fadd float %443, 1.000000e+00, !dbg !85
  %452 = fadd float %444, 1.000000e+00, !dbg !85
  %453 = fadd float %445, 1.000000e+00, !dbg !85
  %454 = fadd float %446, 1.000000e+00, !dbg !85
  %455 = fmul float %447, %451, !dbg !86
  %456 = fmul float %448, %452, !dbg !86
  %457 = fmul float %449, %453, !dbg !86
  %458 = fmul float %450, %454, !dbg !86
  %459 = getelementptr i16, ptr addrspace(1) %10, i64 %425, !dbg !87
  %460 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %455) #6, !dbg !88
  %461 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %456) #6, !dbg !88
  %462 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %457) #6, !dbg !88
  %463 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %458) #6, !dbg !88
  %464 = insertelement <2 x i16> undef, i16 %460, i64 0, !dbg !88
  %465 = insertelement <2 x i16> %464, i16 %461, i64 1, !dbg !88
  %466 = bitcast <2 x i16> %465 to i32, !dbg !88
  %467 = insertelement <2 x i16> undef, i16 %462, i64 0, !dbg !88
  %468 = insertelement <2 x i16> %467, i16 %463, i64 1, !dbg !88
  %469 = bitcast <2 x i16> %468 to i32, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %466, i32 %469, ptr addrspace(1) %459, i1 %20) #6, !dbg !88
  %470 = or i32 %18, 2048, !dbg !89
  %471 = icmp ult i32 %470, 2304, !dbg !90
  %472 = add i32 %470, %21, !dbg !79
  %473 = sext i32 %472 to i64, !dbg !80
  %474 = getelementptr float, ptr addrspace(1) %9, i64 %473, !dbg !80
  %475 = and i1 %20, %471, !dbg !91
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %474, i1 %475, i32 0, i1 %475, i32 0, i1 %475, i32 0, i1 %475, i32 0, i1 %475) #6, !dbg !81
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !81
  %478 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !81
  %479 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !81
  %480 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !81
  %481 = bitcast i32 %477 to float, !dbg !81
  %482 = bitcast i32 %478 to float, !dbg !81
  %483 = bitcast i32 %479 to float, !dbg !81
  %484 = bitcast i32 %480 to float, !dbg !81
  %485 = zext nneg i32 %470 to i64, !dbg !82
  %486 = getelementptr float, ptr addrspace(1) %8, i64 %485, !dbg !82
  %487 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %486, i1 %471, i32 0, i1 %471, i32 0, i1 %471, i32 0, i1 %471, i32 0, i1 %471) #6, !dbg !83
  %488 = extractvalue { i32, i32, i32, i32 } %487, 0, !dbg !83
  %489 = extractvalue { i32, i32, i32, i32 } %487, 1, !dbg !83
  %490 = extractvalue { i32, i32, i32, i32 } %487, 2, !dbg !83
  %491 = extractvalue { i32, i32, i32, i32 } %487, 3, !dbg !83
  %492 = bitcast i32 %488 to float, !dbg !83
  %493 = bitcast i32 %489 to float, !dbg !83
  %494 = bitcast i32 %490 to float, !dbg !83
  %495 = bitcast i32 %491 to float, !dbg !83
  %496 = fmul float %.0.i24, %481, !dbg !84
  %497 = fmul float %.0.i24, %482, !dbg !84
  %498 = fmul float %.0.i24, %483, !dbg !84
  %499 = fmul float %.0.i24, %484, !dbg !84
  %500 = fadd float %492, 1.000000e+00, !dbg !85
  %501 = fadd float %493, 1.000000e+00, !dbg !85
  %502 = fadd float %494, 1.000000e+00, !dbg !85
  %503 = fadd float %495, 1.000000e+00, !dbg !85
  %504 = fmul float %496, %500, !dbg !86
  %505 = fmul float %497, %501, !dbg !86
  %506 = fmul float %498, %502, !dbg !86
  %507 = fmul float %499, %503, !dbg !86
  %508 = getelementptr i16, ptr addrspace(1) %10, i64 %473, !dbg !87
  %509 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %504) #6, !dbg !88
  %510 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #6, !dbg !88
  %511 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #6, !dbg !88
  %512 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %507) #6, !dbg !88
  %513 = insertelement <2 x i16> undef, i16 %509, i64 0, !dbg !88
  %514 = insertelement <2 x i16> %513, i16 %510, i64 1, !dbg !88
  %515 = bitcast <2 x i16> %514 to i32, !dbg !88
  %516 = insertelement <2 x i16> undef, i16 %511, i64 0, !dbg !88
  %517 = insertelement <2 x i16> %516, i16 %512, i64 1, !dbg !88
  %518 = bitcast <2 x i16> %517 to i32, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %515, i32 %518, ptr addrspace(1) %508, i1 %475) #6, !dbg !88
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cexjbmou45lexgpazvubgja6ew5d25inpl3pvlktuxtsywzgjxs6.py", directory: "/tmp/torchinductor_zeus/ex")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11de12de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11de12de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10d11de12de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10d11de12de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 110, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 243, column: 36, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!22 = !DILocation(line: 37, column: 25, scope: !20)
!23 = !DILocation(line: 29, column: 25, scope: !7)
!24 = !DILocation(line: 33, column: 22, scope: !7)
!25 = !DILocation(line: 36, column: 46, scope: !7)
!26 = !DILocation(line: 233, column: 15, scope: !27, inlinedAt: !28)
!27 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!28 = !DILocation(line: 243, column: 36, scope: !27, inlinedAt: !29)
!29 = !DILocation(line: 37, column: 25, scope: !27)
!30 = !DILocation(line: 42, column: 26, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 4, scope: !7)
!34 = !DILocation(line: 44, column: 28, scope: !7)
!35 = !DILocation(line: 44, column: 40, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 36, scope: !7)
!38 = !DILocation(line: 57, column: 24, scope: !7)
!39 = !DILocation(line: 64, column: 24, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 48, column: 27, scope: !7)
!42 = !DILocation(line: 49, column: 25, scope: !7)
!43 = !DILocation(line: 51, column: 41, scope: !7)
!44 = !DILocation(line: 51, column: 35, scope: !7)
!45 = !DILocation(line: 51, column: 60, scope: !7)
!46 = !DILocation(line: 51, column: 52, scope: !7)
!47 = !DILocation(line: 51, column: 112, scope: !7)
!48 = !DILocation(line: 52, column: 35, scope: !7)
!49 = !DILocation(line: 52, column: 40, scope: !7)
!50 = !DILocation(line: 53, column: 35, scope: !7)
!51 = !DILocation(line: 53, column: 52, scope: !7)
!52 = !DILocation(line: 53, column: 112, scope: !7)
!53 = !DILocation(line: 54, column: 35, scope: !7)
!54 = !DILocation(line: 54, column: 40, scope: !7)
!55 = !DILocation(line: 55, column: 35, scope: !7)
!56 = !DILocation(line: 55, column: 52, scope: !7)
!57 = !DILocation(line: 59, column: 24, scope: !7)
!58 = !DILocation(line: 60, column: 24, scope: !7)
!59 = !DILocation(line: 65, column: 24, scope: !7)
!60 = !DILocation(line: 66, column: 24, scope: !7)
!61 = !DILocation(line: 70, column: 24, scope: !7)
!62 = !DILocation(line: 71, column: 24, scope: !7)
!63 = !DILocation(line: 72, column: 24, scope: !7)
!64 = !DILocation(line: 73, column: 24, scope: !7)
!65 = !DILocation(line: 76, column: 48, scope: !7)
!66 = !DILocation(line: 77, column: 29, scope: !7)
!67 = !DILocation(line: 77, column: 53, scope: !7)
!68 = !DILocation(line: 233, column: 15, scope: !27, inlinedAt: !69)
!69 = !DILocation(line: 243, column: 36, scope: !27, inlinedAt: !70)
!70 = !DILocation(line: 78, column: 27, scope: !27)
!71 = !DILocation(line: 243, column: 36, scope: !20, inlinedAt: !72)
!72 = !DILocation(line: 78, column: 27, scope: !20)
!73 = !DILocation(line: 83, column: 26, scope: !7)
!74 = !DILocation(line: 80, column: 20, scope: !7)
!75 = !DILocation(line: 82, column: 20, scope: !7)
!76 = !DILocation(line: 84, column: 4, scope: !7)
!77 = !DILocation(line: 85, column: 28, scope: !7)
!78 = !DILocation(line: 85, column: 40, scope: !7)
!79 = !DILocation(line: 90, column: 42, scope: !7)
!80 = !DILocation(line: 90, column: 36, scope: !7)
!81 = !DILocation(line: 90, column: 53, scope: !7)
!82 = !DILocation(line: 91, column: 35, scope: !7)
!83 = !DILocation(line: 91, column: 40, scope: !7)
!84 = !DILocation(line: 92, column: 24, scope: !7)
!85 = !DILocation(line: 94, column: 24, scope: !7)
!86 = !DILocation(line: 95, column: 24, scope: !7)
!87 = !DILocation(line: 97, column: 29, scope: !7)
!88 = !DILocation(line: 97, column: 53, scope: !7)
!89 = !DILocation(line: 87, column: 27, scope: !7)
!90 = !DILocation(line: 88, column: 25, scope: !7)
!91 = !DILocation(line: 90, column: 61, scope: !7)
!92 = !DILocation(line: 86, column: 4, scope: !7)
