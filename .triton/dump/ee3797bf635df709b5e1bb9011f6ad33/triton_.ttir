module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10d11d1213de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg11: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg12: i32, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c4_i32 = arith.constant 4 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_1 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_3 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c4_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %5 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %6 = tt.splat %5 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %7 = tt.load %6, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %8 = tt.addptr %arg8, %0 : !tt.ptr<f32, 1>, i32
    %9 = tt.splat %8 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %10 = tt.load %9, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %11 = arith.muli %0, %c2304_i32 : i32
    %12 = tt.splat %11 : (i32) -> tensor<1x2048xi32>
    %13 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %14 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %15 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %16 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %17 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %18 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %19 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %20 = tt.broadcast %7 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %21 = tt.broadcast %10 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %22 = tt.splat %arg10 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %23 = scf.for %arg14 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg15 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %62 = tt.splat %arg14 : (i32) -> tensor<1x2048xi32>
      %63 = arith.addi %62, %4 : tensor<1x2048xi32>
      %64 = arith.cmpi slt, %63, %cst_3 : tensor<1x2048xi32>
      %65 = arith.addi %63, %12 : tensor<1x2048xi32>
      %66 = tt.addptr %13, %65 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %67 = arith.andi %64, %14 : tensor<1x2048xi1>
      %68 = tt.load %66, %67, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %69 = arith.extf %68 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %70 = tt.addptr %15, %65 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %71 = tt.load %70, %67, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %72 = arith.extf %71 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %73 = tt.addptr %16, %63 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %74 = tt.load %73, %64, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %75 = tt.addptr %17, %65 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %76 = tt.load %75, %67, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %77 = arith.extf %76 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %78 = tt.addptr %18, %63 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %79 = tt.load %78, %64, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %80 = tt.addptr %19, %65 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %81 = tt.load %80, %67, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %82 = arith.addf %69, %72 : tensor<1x2048xf32>
      %83 = arith.addf %74, %cst_2 : tensor<1x2048xf32>
      %84 = arith.mulf %82, %83 : tensor<1x2048xf32>
      %85 = arith.mulf %77, %20 : tensor<1x2048xf32>
      %86 = arith.addf %79, %cst_2 : tensor<1x2048xf32>
      %87 = arith.mulf %85, %86 : tensor<1x2048xf32>
      %88 = arith.addf %87, %81 : tensor<1x2048xf32>
      %89 = arith.mulf %84, %88 : tensor<1x2048xf32>
      %90 = arith.addf %arg15, %89 : tensor<1x2048xf32>
      %91 = arith.select %67, %90, %arg15 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %92 = arith.mulf %88, %21 : tensor<1x2048xf32>
      %93 = tt.addptr %22, %65 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      tt.store %93, %92, %67 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32>
      scf.yield %91 : tensor<1x2048xf32>
    }
    %24 = "tt.reduce"(%23) <{axis = 1 : i32}> ({
    ^bb0(%arg14: f32, %arg15: f32):
      %62 = arith.addf %arg14, %arg15 : f32
      tt.reduce.return %62 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %25 = tt.expand_dims %24 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %26 = arith.muli %0, %c2304_i32 : i32
    %27 = tt.splat %26 : (i32) -> tensor<1x2048xi32>
    %28 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %29 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %30 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %31 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %32 = tt.splat %arg9 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %33 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %34 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %35 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %36 = arith.mulf %25, %cst_1 : tensor<1x1xf32>
    %37 = arith.mulf %10, %10 : tensor<1x1xf32>
    %38 = arith.mulf %37, %10 : tensor<1x1xf32>
    %39 = arith.mulf %36, %38 : tensor<1x1xf32>
    %40 = arith.divf %39, %cst_0 : tensor<1x1xf32>
    %41 = tt.broadcast %7 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %42 = tt.broadcast %40 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %43 = tt.broadcast %10 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %44 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %45 = scf.for %arg14 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg15 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %62 = tt.splat %arg14 : (i32) -> tensor<1x2048xi32>
      %63 = arith.addi %62, %4 : tensor<1x2048xi32>
      %64 = arith.cmpi slt, %63, %cst_3 : tensor<1x2048xi32>
      %65 = arith.addi %63, %27 : tensor<1x2048xi32>
      %66 = tt.addptr %28, %65 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %67 = arith.andi %64, %29 : tensor<1x2048xi1>
      %68 = tt.load %66, %67, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %69 = arith.extf %68 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %70 = tt.addptr %30, %63 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %71 = tt.load %70, %64, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %72 = tt.addptr %31, %65 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %73 = tt.load %72, %67, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %74 = tt.addptr %32, %65 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %75 = tt.load %74, %67, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %76 = tt.addptr %33, %65 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %77 = tt.load %76, %67, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %78 = arith.extf %77 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %79 = tt.addptr %34, %65 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %80 = tt.load %79, %67, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %81 = arith.extf %80 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %82 = tt.addptr %35, %63 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %83 = tt.load %82, %64, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %84 = arith.mulf %69, %41 : tensor<1x2048xf32>
      %85 = arith.addf %71, %cst_2 : tensor<1x2048xf32>
      %86 = arith.mulf %84, %85 : tensor<1x2048xf32>
      %87 = arith.addf %86, %73 : tensor<1x2048xf32>
      %88 = arith.mulf %42, %87 : tensor<1x2048xf32>
      %89 = arith.addf %78, %81 : tensor<1x2048xf32>
      %90 = arith.addf %83, %cst_2 : tensor<1x2048xf32>
      %91 = arith.mulf %89, %90 : tensor<1x2048xf32>
      %92 = arith.mulf %91, %43 : tensor<1x2048xf32>
      %93 = arith.addf %75, %92 : tensor<1x2048xf32>
      %94 = arith.addf %93, %88 : tensor<1x2048xf32>
      %95 = arith.addf %94, %88 : tensor<1x2048xf32>
      %96 = arith.mulf %95, %85 : tensor<1x2048xf32>
      %97 = arith.mulf %96, %69 : tensor<1x2048xf32>
      %98 = arith.addf %arg15, %97 : tensor<1x2048xf32>
      %99 = arith.select %67, %98, %arg15 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %100 = tt.addptr %44, %65 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      tt.store %100, %95, %67 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32>
      scf.yield %99 : tensor<1x2048xf32>
    }
    %46 = "tt.reduce"(%45) <{axis = 1 : i32}> ({
    ^bb0(%arg14: f32, %arg15: f32):
      %62 = arith.addf %arg14, %arg15 : f32
      tt.reduce.return %62 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %47 = tt.expand_dims %46 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %48 = arith.muli %0, %c2304_i32 : i32
    %49 = tt.splat %48 : (i32) -> tensor<1x2048xi32>
    %50 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %51 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %52 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %53 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %54 = tt.broadcast %7 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %55 = arith.mulf %47, %cst_1 : tensor<1x1xf32>
    %56 = arith.mulf %7, %7 : tensor<1x1xf32>
    %57 = arith.mulf %56, %7 : tensor<1x1xf32>
    %58 = arith.mulf %55, %57 : tensor<1x1xf32>
    %59 = arith.divf %58, %cst_0 : tensor<1x1xf32>
    %60 = tt.broadcast %59 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %61 = tt.splat %arg11 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg14 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %62 = tt.splat %arg14 : (i32) -> tensor<1x2048xi32>
      %63 = arith.addi %62, %4 : tensor<1x2048xi32>
      %64 = arith.cmpi slt, %63, %cst_3 : tensor<1x2048xi32>
      %65 = arith.addi %63, %49 : tensor<1x2048xi32>
      %66 = tt.addptr %50, %65 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %67 = arith.andi %64, %51 : tensor<1x2048xi1>
      %68 = tt.load %66, %67, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %69 = tt.addptr %52, %63 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %70 = tt.load %69, %64, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %71 = tt.addptr %53, %65 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %72 = tt.load %71, %67, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %73 = arith.extf %72 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %74 = arith.addf %70, %cst_2 : tensor<1x2048xf32>
      %75 = arith.mulf %68, %74 : tensor<1x2048xf32>
      %76 = arith.mulf %75, %54 : tensor<1x2048xf32>
      %77 = arith.mulf %60, %73 : tensor<1x2048xf32>
      %78 = arith.addf %76, %77 : tensor<1x2048xf32>
      %79 = arith.addf %78, %77 : tensor<1x2048xf32>
      %80 = tt.addptr %61, %65 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %81 = arith.truncf %79 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %80, %81, %67 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
