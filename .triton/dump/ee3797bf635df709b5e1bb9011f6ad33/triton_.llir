; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d10d11d1213de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !5 {
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %16 = lshr i32 %15, 5, !dbg !8
  %urem = and i32 %15, 255, !dbg !8
  %17 = shl nuw nsw i32 %urem, 3, !dbg !8
  %18 = or i32 %17, 4, !dbg !8
  %19 = shl nuw nsw i32 %urem, 2, !dbg !8
  %20 = or i32 %19, 1024, !dbg !8
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %22 = icmp slt i32 %21, 4, !dbg !10
  %23 = sext i32 %21 to i64, !dbg !11
  %24 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !11
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %26 = bitcast i32 %25 to float, !dbg !12
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %34 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !13
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !14
  %36 = bitcast i32 %35 to float, !dbg !14
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !14
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !14
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !14
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !14
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !14
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !14
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !14
  %44 = mul i32 %21, 2304, !dbg !15
  %45 = zext nneg i32 %17 to i64
  %46 = getelementptr float, ptr addrspace(3) @global_smem, i64 %45
  %47 = zext nneg i32 %19 to i64
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i64 %47
  %49 = zext nneg i32 %20 to i64
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i64 %49
  %51 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %48, i64 0, i64 1
  %52 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %48, i64 0, i64 2
  %53 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %48, i64 0, i64 3
  %54 = insertelement <8 x float> poison, float %26, i64 0, !dbg !16
  %55 = shufflevector <8 x float> %54, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !16
  %56 = insertelement <8 x float> poison, float %36, i64 0, !dbg !17
  %57 = shufflevector <8 x float> %56, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %58, !dbg !18

58:                                               ; preds = %14, %58
  %59 = phi i1 [ true, %14 ], [ false, %58 ]
  %60 = phi i32 [ 0, %14 ], [ 2048, %58 ]
  %61 = phi <8 x float> [ zeroinitializer, %14 ], [ %244, %58 ]
  %62 = or i32 %60, %17, !dbg !19
  %63 = or i32 %60, %18, !dbg !19
  %64 = or i32 %60, %19, !dbg !19
  %65 = or i32 %60, %20, !dbg !19
  %66 = icmp ult i32 %62, 2304, !dbg !20
  %67 = icmp ult i32 %64, 2304, !dbg !20
  %68 = icmp ult i32 %65, 2304, !dbg !20
  %69 = add i32 %62, %44, !dbg !21
  %70 = add i32 %63, %44, !dbg !21
  %71 = add i32 %64, %44, !dbg !21
  %72 = add i32 %65, %44, !dbg !21
  %73 = sext i32 %69 to i64, !dbg !22
  %74 = getelementptr i16, ptr addrspace(1) %1, i64 %73, !dbg !22
  %75 = and i1 %22, %66, !dbg !23
  %76 = and i1 %22, %67, !dbg !23
  %77 = and i1 %22, %68, !dbg !23
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !24
  %83 = trunc i32 %79 to i16, !dbg !24
  %extelt.offset32 = lshr i32 %79, 16, !dbg !24
  %84 = trunc i32 %extelt.offset32 to i16, !dbg !24
  %85 = trunc i32 %80 to i16, !dbg !24
  %extelt.offset33 = lshr i32 %80, 16, !dbg !24
  %86 = trunc i32 %extelt.offset33 to i16, !dbg !24
  %87 = trunc i32 %81 to i16, !dbg !24
  %extelt.offset34 = lshr i32 %81, 16, !dbg !24
  %88 = trunc i32 %extelt.offset34 to i16, !dbg !24
  %89 = trunc i32 %82 to i16, !dbg !24
  %extelt.offset35 = lshr i32 %82, 16, !dbg !24
  %90 = trunc i32 %extelt.offset35 to i16, !dbg !24
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #3, !dbg !25
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #3, !dbg !25
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #3, !dbg !25
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #3, !dbg !25
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #3, !dbg !25
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #3, !dbg !25
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #3, !dbg !25
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #3, !dbg !25
  %99 = getelementptr i16, ptr addrspace(1) %2, i64 %73, !dbg !26
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !27
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !27
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !27
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !27
  %105 = trunc i32 %101 to i16, !dbg !27
  %extelt.offset36 = lshr i32 %101, 16, !dbg !27
  %106 = trunc i32 %extelt.offset36 to i16, !dbg !27
  %107 = trunc i32 %102 to i16, !dbg !27
  %extelt.offset37 = lshr i32 %102, 16, !dbg !27
  %108 = trunc i32 %extelt.offset37 to i16, !dbg !27
  %109 = trunc i32 %103 to i16, !dbg !27
  %extelt.offset38 = lshr i32 %103, 16, !dbg !27
  %110 = trunc i32 %extelt.offset38 to i16, !dbg !27
  %111 = trunc i32 %104 to i16, !dbg !27
  %extelt.offset39 = lshr i32 %104, 16, !dbg !27
  %112 = trunc i32 %extelt.offset39 to i16, !dbg !27
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #3, !dbg !28
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #3, !dbg !28
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #3, !dbg !28
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #3, !dbg !28
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %109) #3, !dbg !28
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #3, !dbg !28
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %111) #3, !dbg !28
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #3, !dbg !28
  %121 = zext nneg i32 %62 to i64, !dbg !29
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !29
  %123 = zext nneg i32 %63 to i64, !dbg !29
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !29
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #3, !dbg !30
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !30
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #3, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !30
  %135 = getelementptr i16, ptr addrspace(1) %4, i64 %73, !dbg !31
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !32
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !32
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !32
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !32
  %141 = trunc i32 %137 to i16, !dbg !32
  %extelt.offset40 = lshr i32 %137, 16, !dbg !32
  %142 = trunc i32 %extelt.offset40 to i16, !dbg !32
  %143 = trunc i32 %138 to i16, !dbg !32
  %extelt.offset41 = lshr i32 %138, 16, !dbg !32
  %144 = trunc i32 %extelt.offset41 to i16, !dbg !32
  %145 = trunc i32 %139 to i16, !dbg !32
  %extelt.offset42 = lshr i32 %139, 16, !dbg !32
  %146 = trunc i32 %extelt.offset42 to i16, !dbg !32
  %147 = trunc i32 %140 to i16, !dbg !32
  %extelt.offset43 = lshr i32 %140, 16, !dbg !32
  %148 = trunc i32 %extelt.offset43 to i16, !dbg !32
  %149 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %141) #3, !dbg !33
  %150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %142) #3, !dbg !33
  %151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %143) #3, !dbg !33
  %152 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #3, !dbg !33
  %153 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #3, !dbg !33
  %154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #3, !dbg !33
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %147) #3, !dbg !33
  %156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %148) #3, !dbg !33
  %157 = getelementptr float, ptr addrspace(1) %6, i64 %121, !dbg !34
  %158 = getelementptr float, ptr addrspace(1) %6, i64 %123, !dbg !34
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %157, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #3, !dbg !35
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !35
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !35
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !35
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #3, !dbg !35
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !35
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !35
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !35
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !35
  %169 = getelementptr float, ptr addrspace(1) %7, i64 %73, !dbg !36
  %170 = sext i32 %70 to i64, !dbg !36
  %171 = getelementptr float, ptr addrspace(1) %7, i64 %170, !dbg !36
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %169, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !37
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !37
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !37
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !37
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !37
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %171, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !37
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !37
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !37
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !37
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !37
  %182 = insertelement <8 x i32> poison, i32 %126, i64 0, !dbg !30
  %183 = insertelement <8 x i32> %182, i32 %127, i64 1, !dbg !30
  %184 = insertelement <8 x i32> %183, i32 %128, i64 2, !dbg !30
  %185 = insertelement <8 x i32> %184, i32 %129, i64 3, !dbg !30
  %186 = insertelement <8 x i32> %185, i32 %131, i64 4, !dbg !30
  %187 = insertelement <8 x i32> %186, i32 %132, i64 5, !dbg !30
  %188 = insertelement <8 x i32> %187, i32 %133, i64 6, !dbg !30
  %189 = insertelement <8 x i32> %188, i32 %134, i64 7, !dbg !30
  %190 = bitcast <8 x i32> %189 to <8 x float>, !dbg !30
  %191 = insertelement <8 x i32> poison, i32 %160, i64 0, !dbg !35
  %192 = insertelement <8 x i32> %191, i32 %161, i64 1, !dbg !35
  %193 = insertelement <8 x i32> %192, i32 %162, i64 2, !dbg !35
  %194 = insertelement <8 x i32> %193, i32 %163, i64 3, !dbg !35
  %195 = insertelement <8 x i32> %194, i32 %165, i64 4, !dbg !35
  %196 = insertelement <8 x i32> %195, i32 %166, i64 5, !dbg !35
  %197 = insertelement <8 x i32> %196, i32 %167, i64 6, !dbg !35
  %198 = insertelement <8 x i32> %197, i32 %168, i64 7, !dbg !35
  %199 = bitcast <8 x i32> %198 to <8 x float>, !dbg !35
  %200 = insertelement <8 x i32> poison, i32 %173, i64 0, !dbg !37
  %201 = insertelement <8 x i32> %200, i32 %174, i64 1, !dbg !37
  %202 = insertelement <8 x i32> %201, i32 %175, i64 2, !dbg !37
  %203 = insertelement <8 x i32> %202, i32 %176, i64 3, !dbg !37
  %204 = insertelement <8 x i32> %203, i32 %178, i64 4, !dbg !37
  %205 = insertelement <8 x i32> %204, i32 %179, i64 5, !dbg !37
  %206 = insertelement <8 x i32> %205, i32 %180, i64 6, !dbg !37
  %207 = insertelement <8 x i32> %206, i32 %181, i64 7, !dbg !37
  %208 = bitcast <8 x i32> %207 to <8 x float>, !dbg !37
  %209 = insertelement <8 x float> poison, float %91, i64 0, !dbg !38
  %210 = insertelement <8 x float> %209, float %92, i64 1, !dbg !38
  %211 = insertelement <8 x float> %210, float %93, i64 2, !dbg !38
  %212 = insertelement <8 x float> %211, float %94, i64 3, !dbg !38
  %213 = insertelement <8 x float> %212, float %95, i64 4, !dbg !38
  %214 = insertelement <8 x float> %213, float %96, i64 5, !dbg !38
  %215 = insertelement <8 x float> %214, float %97, i64 6, !dbg !38
  %216 = insertelement <8 x float> %215, float %98, i64 7, !dbg !38
  %217 = insertelement <8 x float> poison, float %113, i64 0, !dbg !38
  %218 = insertelement <8 x float> %217, float %114, i64 1, !dbg !38
  %219 = insertelement <8 x float> %218, float %115, i64 2, !dbg !38
  %220 = insertelement <8 x float> %219, float %116, i64 3, !dbg !38
  %221 = insertelement <8 x float> %220, float %117, i64 4, !dbg !38
  %222 = insertelement <8 x float> %221, float %118, i64 5, !dbg !38
  %223 = insertelement <8 x float> %222, float %119, i64 6, !dbg !38
  %224 = insertelement <8 x float> %223, float %120, i64 7, !dbg !38
  %225 = fadd <8 x float> %216, %224, !dbg !38
  %226 = fadd <8 x float> %190, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !39
  %227 = fmul <8 x float> %225, %226, !dbg !40
  %228 = insertelement <8 x float> poison, float %149, i64 0, !dbg !16
  %229 = insertelement <8 x float> %228, float %150, i64 1, !dbg !16
  %230 = insertelement <8 x float> %229, float %151, i64 2, !dbg !16
  %231 = insertelement <8 x float> %230, float %152, i64 3, !dbg !16
  %232 = insertelement <8 x float> %231, float %153, i64 4, !dbg !16
  %233 = insertelement <8 x float> %232, float %154, i64 5, !dbg !16
  %234 = insertelement <8 x float> %233, float %155, i64 6, !dbg !16
  %235 = insertelement <8 x float> %234, float %156, i64 7, !dbg !16
  %236 = fmul <8 x float> %235, %55, !dbg !16
  %237 = fadd <8 x float> %199, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !41
  %238 = fmul <8 x float> %236, %237, !dbg !42
  %239 = fadd <8 x float> %238, %208, !dbg !43
  %240 = fmul <8 x float> %227, %239, !dbg !44
  %241 = insertelement <8 x i1> poison, i1 %75, i64 0, !dbg !45
  %242 = shufflevector <8 x i1> %241, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !45
  %243 = select <8 x i1> %242, <8 x float> %240, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !45
  %244 = fadd <8 x float> %61, %243, !dbg !45
  %245 = fmul <8 x float> %239, %57, !dbg !17
  %246 = sext i32 %71 to i64, !dbg !46
  %247 = getelementptr float, ptr addrspace(1) %10, i64 %246, !dbg !46
  %248 = sext i32 %72 to i64, !dbg !46
  %249 = getelementptr float, ptr addrspace(1) %10, i64 %248, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  store <8 x float> %245, ptr addrspace(3) %46, align 32, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %250 = load <4 x i32>, ptr addrspace(3) %50, align 16, !dbg !47
  %.extract45 = load i32, ptr addrspace(3) %48, align 16, !dbg !47
  %.extract47 = load i32, ptr addrspace(3) %51, align 4, !dbg !47
  %.extract49 = load i32, ptr addrspace(3) %52, align 8, !dbg !47
  %.extract51 = load i32, ptr addrspace(3) %53, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract45, i32 %.extract47, i32 %.extract49, i32 %.extract51, ptr addrspace(1) %247, i1 %76) #3, !dbg !47
  %.extract53 = extractelement <4 x i32> %250, i64 0, !dbg !47
  %.extract55 = extractelement <4 x i32> %250, i64 1, !dbg !47
  %.extract57 = extractelement <4 x i32> %250, i64 2, !dbg !47
  %.extract59 = extractelement <4 x i32> %250, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract53, i32 %.extract55, i32 %.extract57, i32 %.extract59, ptr addrspace(1) %249, i1 %77) #3, !dbg !47
  br i1 %59, label %58, label %251, !dbg !18

251:                                              ; preds = %58
  %252 = and i32 %15, 31, !dbg !8
  %253 = and i32 %16, 7, !dbg !8
  %254 = bitcast i32 %28 to float, !dbg !12
  %255 = bitcast i32 %30 to float, !dbg !12
  %256 = bitcast i32 %32 to float, !dbg !12
  %257 = bitcast i32 %37 to float, !dbg !14
  %258 = bitcast i32 %38 to float, !dbg !14
  %259 = bitcast i32 %39 to float, !dbg !14
  %260 = bitcast i32 %40 to float, !dbg !14
  %261 = bitcast i32 %41 to float, !dbg !14
  %262 = bitcast i32 %42 to float, !dbg !14
  %263 = bitcast i32 %43 to float, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %shift = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %264 = fadd <8 x float> %244, %shift, !dbg !52
  %shift109 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %265 = fadd <8 x float> %shift109, %264, !dbg !52
  %shift110 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %266 = fadd <8 x float> %shift110, %265, !dbg !52
  %shift111 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %267 = fadd <8 x float> %shift111, %266, !dbg !52
  %shift112 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %268 = fadd <8 x float> %shift112, %267, !dbg !52
  %shift113 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %269 = fadd <8 x float> %shift113, %268, !dbg !52
  %shift114 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %270 = fadd <8 x float> %shift114, %269, !dbg !52
  %271 = extractelement <8 x float> %270, i64 0, !dbg !52
  %272 = bitcast float %271 to i32, !dbg !48
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 16, i32 31), !dbg !48
  %274 = bitcast i32 %273 to float, !dbg !48
  %275 = fadd float %271, %274, !dbg !52
  %276 = bitcast float %275 to i32, !dbg !48
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 8, i32 31), !dbg !48
  %278 = bitcast i32 %277 to float, !dbg !48
  %279 = fadd float %275, %278, !dbg !52
  %280 = bitcast float %279 to i32, !dbg !48
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !48
  %282 = bitcast i32 %281 to float, !dbg !48
  %283 = fadd float %279, %282, !dbg !52
  %284 = bitcast float %283 to i32, !dbg !48
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !48
  %286 = bitcast i32 %285 to float, !dbg !48
  %287 = fadd float %283, %286, !dbg !52
  %288 = bitcast float %287 to i32, !dbg !48
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 1, i32 31), !dbg !48
  %290 = bitcast i32 %289 to float, !dbg !48
  %291 = fadd float %287, %290, !dbg !52
  %292 = icmp eq i32 %252, 0, !dbg !48
  %293 = zext nneg i32 %253 to i64, !dbg !48
  %294 = getelementptr float, ptr addrspace(3) @global_smem, i64 %293, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, float %291, i1 %292) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %295 = icmp slt i32 %15, 8, !dbg !48
  %296 = sext i32 %15 to i64, !dbg !48
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i64 %296, !dbg !48
  %298 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %297, i1 %295) #3, !dbg !48
  %299 = bitcast float %298 to i32, !dbg !48
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 4, i32 31), !dbg !48
  %301 = bitcast i32 %300 to float, !dbg !48
  %302 = fadd float %298, %301, !dbg !52
  %303 = bitcast float %302 to i32, !dbg !48
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 2, i32 31), !dbg !48
  %305 = bitcast i32 %304 to float, !dbg !48
  %306 = fadd float %302, %305, !dbg !52
  %307 = bitcast float %306 to i32, !dbg !48
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 1, i32 31), !dbg !48
  %309 = bitcast i32 %308 to float, !dbg !48
  %310 = fadd float %306, %309, !dbg !52
  %311 = and i32 %15, 7, !dbg !48
  %312 = icmp eq i32 %311, 0, !dbg !48
  %313 = and i1 %295, %312, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, float %310, i1 %313) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %314 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !48
  %315 = fmul float %314, -5.000000e-01, !dbg !56
  %316 = fmul float %36, %36, !dbg !57
  %317 = fmul float %257, %257, !dbg !57
  %318 = fmul float %258, %258, !dbg !57
  %319 = fmul float %259, %259, !dbg !57
  %320 = fmul float %260, %260, !dbg !57
  %321 = fmul float %261, %261, !dbg !57
  %322 = fmul float %262, %262, !dbg !57
  %323 = fmul float %263, %263, !dbg !57
  %324 = fmul float %316, %36, !dbg !58
  %325 = fmul float %317, %257, !dbg !58
  %326 = fmul float %318, %258, !dbg !58
  %327 = fmul float %319, %259, !dbg !58
  %328 = fmul float %320, %260, !dbg !58
  %329 = fmul float %321, %261, !dbg !58
  %330 = fmul float %322, %262, !dbg !58
  %331 = fmul float %323, %263, !dbg !58
  %332 = fmul float %324, %315, !dbg !59
  %333 = fmul float %325, %315, !dbg !59
  %334 = fmul float %326, %315, !dbg !59
  %335 = fmul float %327, %315, !dbg !59
  %336 = fmul float %328, %315, !dbg !59
  %337 = fmul float %329, %315, !dbg !59
  %338 = fmul float %330, %315, !dbg !59
  %339 = fmul float %331, %315, !dbg !59
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float 2.304000e+03) #3, !dbg !60
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %333, float 2.304000e+03) #3, !dbg !60
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %334, float 2.304000e+03) #3, !dbg !60
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %335, float 2.304000e+03) #3, !dbg !60
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %336, float 2.304000e+03) #3, !dbg !60
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %337, float 2.304000e+03) #3, !dbg !60
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %338, float 2.304000e+03) #3, !dbg !60
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %339, float 2.304000e+03) #3, !dbg !60
  %348 = insertelement <8 x float> poison, float %340, i64 0, !dbg !61
  %349 = shufflevector <8 x float> %348, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !61
  br label %350, !dbg !62

350:                                              ; preds = %251, %350
  %351 = phi i1 [ true, %251 ], [ false, %350 ]
  %352 = phi i32 [ 0, %251 ], [ 2048, %350 ]
  %353 = phi <8 x float> [ zeroinitializer, %251 ], [ %563, %350 ]
  %354 = or i32 %352, %17, !dbg !63
  %355 = or i32 %352, %18, !dbg !63
  %356 = or i32 %352, %19, !dbg !63
  %357 = or i32 %352, %20, !dbg !63
  %358 = icmp ult i32 %354, 2304, !dbg !64
  %359 = icmp ult i32 %356, 2304, !dbg !64
  %360 = icmp ult i32 %357, 2304, !dbg !64
  %361 = add i32 %354, %44, !dbg !65
  %362 = add i32 %355, %44, !dbg !65
  %363 = add i32 %356, %44, !dbg !65
  %364 = add i32 %357, %44, !dbg !65
  %365 = sext i32 %361 to i64, !dbg !66
  %366 = getelementptr i16, ptr addrspace(1) %4, i64 %365, !dbg !66
  %367 = and i1 %22, %358, !dbg !67
  %368 = and i1 %22, %359, !dbg !67
  %369 = and i1 %22, %360, !dbg !67
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %366, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #3, !dbg !68
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !68
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !68
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !68
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !68
  %375 = trunc i32 %371 to i16, !dbg !68
  %extelt.offset6 = lshr i32 %371, 16, !dbg !68
  %376 = trunc i32 %extelt.offset6 to i16, !dbg !68
  %377 = trunc i32 %372 to i16, !dbg !68
  %extelt.offset7 = lshr i32 %372, 16, !dbg !68
  %378 = trunc i32 %extelt.offset7 to i16, !dbg !68
  %379 = trunc i32 %373 to i16, !dbg !68
  %extelt.offset8 = lshr i32 %373, 16, !dbg !68
  %380 = trunc i32 %extelt.offset8 to i16, !dbg !68
  %381 = trunc i32 %374 to i16, !dbg !68
  %extelt.offset9 = lshr i32 %374, 16, !dbg !68
  %382 = trunc i32 %extelt.offset9 to i16, !dbg !68
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #3, !dbg !69
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %376) #3, !dbg !69
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #3, !dbg !69
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %378) #3, !dbg !69
  %387 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #3, !dbg !69
  %388 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #3, !dbg !69
  %389 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #3, !dbg !69
  %390 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #3, !dbg !69
  %391 = zext nneg i32 %354 to i64, !dbg !70
  %392 = getelementptr float, ptr addrspace(1) %6, i64 %391, !dbg !70
  %393 = zext nneg i32 %355 to i64, !dbg !70
  %394 = getelementptr float, ptr addrspace(1) %6, i64 %393, !dbg !70
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %392, i1 %358, i32 0, i1 %358, i32 0, i1 %358, i32 0, i1 %358, i32 0, i1 %358) #3, !dbg !71
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !71
  %397 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !71
  %398 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !71
  %399 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !71
  %400 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %394, i1 %358, i32 0, i1 %358, i32 0, i1 %358, i32 0, i1 %358, i32 0, i1 %358) #3, !dbg !71
  %401 = extractvalue { i32, i32, i32, i32 } %400, 0, !dbg !71
  %402 = extractvalue { i32, i32, i32, i32 } %400, 1, !dbg !71
  %403 = extractvalue { i32, i32, i32, i32 } %400, 2, !dbg !71
  %404 = extractvalue { i32, i32, i32, i32 } %400, 3, !dbg !71
  %405 = getelementptr float, ptr addrspace(1) %7, i64 %365, !dbg !72
  %406 = sext i32 %362 to i64, !dbg !72
  %407 = getelementptr float, ptr addrspace(1) %7, i64 %406, !dbg !72
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %405, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #3, !dbg !73
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !73
  %410 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !73
  %411 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !73
  %412 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !73
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %407, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #3, !dbg !73
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !73
  %415 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !73
  %416 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !73
  %417 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !73
  %418 = getelementptr float, ptr addrspace(1) %9, i64 %365, !dbg !74
  %419 = getelementptr float, ptr addrspace(1) %9, i64 %406, !dbg !74
  %420 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %418, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #3, !dbg !75
  %421 = extractvalue { i32, i32, i32, i32 } %420, 0, !dbg !75
  %422 = extractvalue { i32, i32, i32, i32 } %420, 1, !dbg !75
  %423 = extractvalue { i32, i32, i32, i32 } %420, 2, !dbg !75
  %424 = extractvalue { i32, i32, i32, i32 } %420, 3, !dbg !75
  %425 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %419, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #3, !dbg !75
  %426 = extractvalue { i32, i32, i32, i32 } %425, 0, !dbg !75
  %427 = extractvalue { i32, i32, i32, i32 } %425, 1, !dbg !75
  %428 = extractvalue { i32, i32, i32, i32 } %425, 2, !dbg !75
  %429 = extractvalue { i32, i32, i32, i32 } %425, 3, !dbg !75
  %430 = getelementptr i16, ptr addrspace(1) %1, i64 %365, !dbg !76
  %431 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %430, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #3, !dbg !77
  %432 = extractvalue { i32, i32, i32, i32 } %431, 0, !dbg !77
  %433 = extractvalue { i32, i32, i32, i32 } %431, 1, !dbg !77
  %434 = extractvalue { i32, i32, i32, i32 } %431, 2, !dbg !77
  %435 = extractvalue { i32, i32, i32, i32 } %431, 3, !dbg !77
  %436 = trunc i32 %432 to i16, !dbg !77
  %extelt.offset10 = lshr i32 %432, 16, !dbg !77
  %437 = trunc i32 %extelt.offset10 to i16, !dbg !77
  %438 = trunc i32 %433 to i16, !dbg !77
  %extelt.offset11 = lshr i32 %433, 16, !dbg !77
  %439 = trunc i32 %extelt.offset11 to i16, !dbg !77
  %440 = trunc i32 %434 to i16, !dbg !77
  %extelt.offset12 = lshr i32 %434, 16, !dbg !77
  %441 = trunc i32 %extelt.offset12 to i16, !dbg !77
  %442 = trunc i32 %435 to i16, !dbg !77
  %extelt.offset13 = lshr i32 %435, 16, !dbg !77
  %443 = trunc i32 %extelt.offset13 to i16, !dbg !77
  %444 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #3, !dbg !78
  %445 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #3, !dbg !78
  %446 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #3, !dbg !78
  %447 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %439) #3, !dbg !78
  %448 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %440) #3, !dbg !78
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %441) #3, !dbg !78
  %450 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #3, !dbg !78
  %451 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #3, !dbg !78
  %452 = getelementptr i16, ptr addrspace(1) %2, i64 %365, !dbg !79
  %453 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %452, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #3, !dbg !80
  %454 = extractvalue { i32, i32, i32, i32 } %453, 0, !dbg !80
  %455 = extractvalue { i32, i32, i32, i32 } %453, 1, !dbg !80
  %456 = extractvalue { i32, i32, i32, i32 } %453, 2, !dbg !80
  %457 = extractvalue { i32, i32, i32, i32 } %453, 3, !dbg !80
  %458 = trunc i32 %454 to i16, !dbg !80
  %extelt.offset14 = lshr i32 %454, 16, !dbg !80
  %459 = trunc i32 %extelt.offset14 to i16, !dbg !80
  %460 = trunc i32 %455 to i16, !dbg !80
  %extelt.offset15 = lshr i32 %455, 16, !dbg !80
  %461 = trunc i32 %extelt.offset15 to i16, !dbg !80
  %462 = trunc i32 %456 to i16, !dbg !80
  %extelt.offset16 = lshr i32 %456, 16, !dbg !80
  %463 = trunc i32 %extelt.offset16 to i16, !dbg !80
  %464 = trunc i32 %457 to i16, !dbg !80
  %extelt.offset17 = lshr i32 %457, 16, !dbg !80
  %465 = trunc i32 %extelt.offset17 to i16, !dbg !80
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #3, !dbg !81
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #3, !dbg !81
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #3, !dbg !81
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %461) #3, !dbg !81
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #3, !dbg !81
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #3, !dbg !81
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #3, !dbg !81
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %465) #3, !dbg !81
  %474 = getelementptr float, ptr addrspace(1) %3, i64 %391, !dbg !82
  %475 = getelementptr float, ptr addrspace(1) %3, i64 %393, !dbg !82
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %474, i1 %358, i32 0, i1 %358, i32 0, i1 %358, i32 0, i1 %358, i32 0, i1 %358) #3, !dbg !83
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !83
  %478 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !83
  %479 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !83
  %480 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !83
  %481 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %475, i1 %358, i32 0, i1 %358, i32 0, i1 %358, i32 0, i1 %358, i32 0, i1 %358) #3, !dbg !83
  %482 = extractvalue { i32, i32, i32, i32 } %481, 0, !dbg !83
  %483 = extractvalue { i32, i32, i32, i32 } %481, 1, !dbg !83
  %484 = extractvalue { i32, i32, i32, i32 } %481, 2, !dbg !83
  %485 = extractvalue { i32, i32, i32, i32 } %481, 3, !dbg !83
  %486 = insertelement <8 x i32> poison, i32 %396, i64 0, !dbg !71
  %487 = insertelement <8 x i32> %486, i32 %397, i64 1, !dbg !71
  %488 = insertelement <8 x i32> %487, i32 %398, i64 2, !dbg !71
  %489 = insertelement <8 x i32> %488, i32 %399, i64 3, !dbg !71
  %490 = insertelement <8 x i32> %489, i32 %401, i64 4, !dbg !71
  %491 = insertelement <8 x i32> %490, i32 %402, i64 5, !dbg !71
  %492 = insertelement <8 x i32> %491, i32 %403, i64 6, !dbg !71
  %493 = insertelement <8 x i32> %492, i32 %404, i64 7, !dbg !71
  %494 = bitcast <8 x i32> %493 to <8 x float>, !dbg !71
  %495 = insertelement <8 x i32> poison, i32 %409, i64 0, !dbg !73
  %496 = insertelement <8 x i32> %495, i32 %410, i64 1, !dbg !73
  %497 = insertelement <8 x i32> %496, i32 %411, i64 2, !dbg !73
  %498 = insertelement <8 x i32> %497, i32 %412, i64 3, !dbg !73
  %499 = insertelement <8 x i32> %498, i32 %414, i64 4, !dbg !73
  %500 = insertelement <8 x i32> %499, i32 %415, i64 5, !dbg !73
  %501 = insertelement <8 x i32> %500, i32 %416, i64 6, !dbg !73
  %502 = insertelement <8 x i32> %501, i32 %417, i64 7, !dbg !73
  %503 = bitcast <8 x i32> %502 to <8 x float>, !dbg !73
  %504 = insertelement <8 x i32> poison, i32 %421, i64 0, !dbg !75
  %505 = insertelement <8 x i32> %504, i32 %422, i64 1, !dbg !75
  %506 = insertelement <8 x i32> %505, i32 %423, i64 2, !dbg !75
  %507 = insertelement <8 x i32> %506, i32 %424, i64 3, !dbg !75
  %508 = insertelement <8 x i32> %507, i32 %426, i64 4, !dbg !75
  %509 = insertelement <8 x i32> %508, i32 %427, i64 5, !dbg !75
  %510 = insertelement <8 x i32> %509, i32 %428, i64 6, !dbg !75
  %511 = insertelement <8 x i32> %510, i32 %429, i64 7, !dbg !75
  %512 = bitcast <8 x i32> %511 to <8 x float>, !dbg !75
  %513 = insertelement <8 x i32> poison, i32 %477, i64 0, !dbg !83
  %514 = insertelement <8 x i32> %513, i32 %478, i64 1, !dbg !83
  %515 = insertelement <8 x i32> %514, i32 %479, i64 2, !dbg !83
  %516 = insertelement <8 x i32> %515, i32 %480, i64 3, !dbg !83
  %517 = insertelement <8 x i32> %516, i32 %482, i64 4, !dbg !83
  %518 = insertelement <8 x i32> %517, i32 %483, i64 5, !dbg !83
  %519 = insertelement <8 x i32> %518, i32 %484, i64 6, !dbg !83
  %520 = insertelement <8 x i32> %519, i32 %485, i64 7, !dbg !83
  %521 = bitcast <8 x i32> %520 to <8 x float>, !dbg !83
  %522 = insertelement <8 x float> poison, float %383, i64 0, !dbg !84
  %523 = insertelement <8 x float> %522, float %384, i64 1, !dbg !84
  %524 = insertelement <8 x float> %523, float %385, i64 2, !dbg !84
  %525 = insertelement <8 x float> %524, float %386, i64 3, !dbg !84
  %526 = insertelement <8 x float> %525, float %387, i64 4, !dbg !84
  %527 = insertelement <8 x float> %526, float %388, i64 5, !dbg !84
  %528 = insertelement <8 x float> %527, float %389, i64 6, !dbg !84
  %529 = insertelement <8 x float> %528, float %390, i64 7, !dbg !84
  %530 = fmul <8 x float> %529, %55, !dbg !84
  %531 = fadd <8 x float> %494, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !85
  %532 = fmul <8 x float> %530, %531, !dbg !86
  %533 = fadd <8 x float> %532, %503, !dbg !87
  %534 = fmul <8 x float> %349, %533, !dbg !61
  %535 = insertelement <8 x float> poison, float %444, i64 0, !dbg !88
  %536 = insertelement <8 x float> %535, float %445, i64 1, !dbg !88
  %537 = insertelement <8 x float> %536, float %446, i64 2, !dbg !88
  %538 = insertelement <8 x float> %537, float %447, i64 3, !dbg !88
  %539 = insertelement <8 x float> %538, float %448, i64 4, !dbg !88
  %540 = insertelement <8 x float> %539, float %449, i64 5, !dbg !88
  %541 = insertelement <8 x float> %540, float %450, i64 6, !dbg !88
  %542 = insertelement <8 x float> %541, float %451, i64 7, !dbg !88
  %543 = insertelement <8 x float> poison, float %466, i64 0, !dbg !88
  %544 = insertelement <8 x float> %543, float %467, i64 1, !dbg !88
  %545 = insertelement <8 x float> %544, float %468, i64 2, !dbg !88
  %546 = insertelement <8 x float> %545, float %469, i64 3, !dbg !88
  %547 = insertelement <8 x float> %546, float %470, i64 4, !dbg !88
  %548 = insertelement <8 x float> %547, float %471, i64 5, !dbg !88
  %549 = insertelement <8 x float> %548, float %472, i64 6, !dbg !88
  %550 = insertelement <8 x float> %549, float %473, i64 7, !dbg !88
  %551 = fadd <8 x float> %542, %550, !dbg !88
  %552 = fadd <8 x float> %521, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !89
  %553 = fmul <8 x float> %551, %552, !dbg !90
  %554 = fmul <8 x float> %553, %57, !dbg !91
  %555 = fadd <8 x float> %554, %512, !dbg !92
  %556 = fadd <8 x float> %534, %555, !dbg !93
  %557 = fadd <8 x float> %534, %556, !dbg !94
  %558 = fmul <8 x float> %531, %557, !dbg !95
  %559 = fmul <8 x float> %529, %558, !dbg !96
  %560 = insertelement <8 x i1> poison, i1 %367, i64 0, !dbg !97
  %561 = shufflevector <8 x i1> %560, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !97
  %562 = select <8 x i1> %561, <8 x float> %559, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !97
  %563 = fadd <8 x float> %353, %562, !dbg !97
  %564 = sext i32 %363 to i64, !dbg !98
  %565 = getelementptr float, ptr addrspace(1) %0, i64 %564, !dbg !98
  %566 = sext i32 %364 to i64, !dbg !98
  %567 = getelementptr float, ptr addrspace(1) %0, i64 %566, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  store <8 x float> %557, ptr addrspace(3) %46, align 32, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %568 = load <4 x i32>, ptr addrspace(3) %50, align 16, !dbg !99
  %.extract = load i32, ptr addrspace(3) %48, align 16, !dbg !99
  %.extract19 = load i32, ptr addrspace(3) %51, align 4, !dbg !99
  %.extract21 = load i32, ptr addrspace(3) %52, align 8, !dbg !99
  %.extract23 = load i32, ptr addrspace(3) %53, align 4, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract21, i32 %.extract23, ptr addrspace(1) %565, i1 %368) #3, !dbg !99
  %.extract25 = extractelement <4 x i32> %568, i64 0, !dbg !99
  %.extract27 = extractelement <4 x i32> %568, i64 1, !dbg !99
  %.extract29 = extractelement <4 x i32> %568, i64 2, !dbg !99
  %.extract31 = extractelement <4 x i32> %568, i64 3, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract27, i32 %.extract29, i32 %.extract31, ptr addrspace(1) %567, i1 %369) #3, !dbg !99
  br i1 %351, label %350, label %569, !dbg !62

569:                                              ; preds = %350
  %570 = bitcast i32 %27 to float, !dbg !12
  %571 = bitcast i32 %29 to float, !dbg !12
  %572 = bitcast i32 %31 to float, !dbg !12
  %573 = bitcast i32 %33 to float, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %shift115 = shufflevector <8 x float> %563, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !102
  %574 = fadd <8 x float> %563, %shift115, !dbg !102
  %shift116 = shufflevector <8 x float> %563, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !102
  %575 = fadd <8 x float> %shift116, %574, !dbg !102
  %shift117 = shufflevector <8 x float> %563, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !102
  %576 = fadd <8 x float> %shift117, %575, !dbg !102
  %shift118 = shufflevector <8 x float> %563, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !102
  %577 = fadd <8 x float> %shift118, %576, !dbg !102
  %shift119 = shufflevector <8 x float> %563, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !102
  %578 = fadd <8 x float> %shift119, %577, !dbg !102
  %shift120 = shufflevector <8 x float> %563, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !102
  %579 = fadd <8 x float> %shift120, %578, !dbg !102
  %shift121 = shufflevector <8 x float> %563, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !102
  %580 = fadd <8 x float> %shift121, %579, !dbg !102
  %581 = extractelement <8 x float> %580, i64 0, !dbg !102
  %582 = bitcast float %581 to i32, !dbg !100
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 16, i32 31), !dbg !100
  %584 = bitcast i32 %583 to float, !dbg !100
  %585 = fadd float %581, %584, !dbg !102
  %586 = bitcast float %585 to i32, !dbg !100
  %587 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %586, i32 8, i32 31), !dbg !100
  %588 = bitcast i32 %587 to float, !dbg !100
  %589 = fadd float %585, %588, !dbg !102
  %590 = bitcast float %589 to i32, !dbg !100
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 4, i32 31), !dbg !100
  %592 = bitcast i32 %591 to float, !dbg !100
  %593 = fadd float %589, %592, !dbg !102
  %594 = bitcast float %593 to i32, !dbg !100
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 2, i32 31), !dbg !100
  %596 = bitcast i32 %595 to float, !dbg !100
  %597 = fadd float %593, %596, !dbg !102
  %598 = bitcast float %597 to i32, !dbg !100
  %599 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %598, i32 1, i32 31), !dbg !100
  %600 = bitcast i32 %599 to float, !dbg !100
  %601 = fadd float %597, %600, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, float %601, i1 %292) #3, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %602 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %297, i1 %295) #3, !dbg !100
  %603 = bitcast float %602 to i32, !dbg !100
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %603, i32 4, i32 31), !dbg !100
  %605 = bitcast i32 %604 to float, !dbg !100
  %606 = fadd float %602, %605, !dbg !102
  %607 = bitcast float %606 to i32, !dbg !100
  %608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %607, i32 2, i32 31), !dbg !100
  %609 = bitcast i32 %608 to float, !dbg !100
  %610 = fadd float %606, %609, !dbg !102
  %611 = bitcast float %610 to i32, !dbg !100
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 1, i32 31), !dbg !100
  %613 = bitcast i32 %612 to float, !dbg !100
  %614 = fadd float %610, %613, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, float %614, i1 %313) #3, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %615 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !100
  %616 = fmul float %615, -5.000000e-01, !dbg !105
  %617 = fmul float %26, %26, !dbg !106
  %618 = fmul float %570, %570, !dbg !106
  %619 = fmul float %254, %254, !dbg !106
  %620 = fmul float %571, %571, !dbg !106
  %621 = fmul float %255, %255, !dbg !106
  %622 = fmul float %572, %572, !dbg !106
  %623 = fmul float %256, %256, !dbg !106
  %624 = fmul float %573, %573, !dbg !106
  %625 = fmul float %617, %26, !dbg !107
  %626 = fmul float %618, %570, !dbg !107
  %627 = fmul float %619, %254, !dbg !107
  %628 = fmul float %620, %571, !dbg !107
  %629 = fmul float %621, %255, !dbg !107
  %630 = fmul float %622, %572, !dbg !107
  %631 = fmul float %623, %256, !dbg !107
  %632 = fmul float %624, %573, !dbg !107
  %633 = fmul float %625, %616, !dbg !108
  %634 = fmul float %626, %616, !dbg !108
  %635 = fmul float %627, %616, !dbg !108
  %636 = fmul float %628, %616, !dbg !108
  %637 = fmul float %629, %616, !dbg !108
  %638 = fmul float %630, %616, !dbg !108
  %639 = fmul float %631, %616, !dbg !108
  %640 = fmul float %632, %616, !dbg !108
  %641 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %633, float 2.304000e+03) #3, !dbg !109
  %642 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %634, float 2.304000e+03) #3, !dbg !109
  %643 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %635, float 2.304000e+03) #3, !dbg !109
  %644 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %636, float 2.304000e+03) #3, !dbg !109
  %645 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %637, float 2.304000e+03) #3, !dbg !109
  %646 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %638, float 2.304000e+03) #3, !dbg !109
  %647 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %639, float 2.304000e+03) #3, !dbg !109
  %648 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %640, float 2.304000e+03) #3, !dbg !109
  br label %649, !dbg !110

649:                                              ; preds = %569, %649
  %650 = phi i1 [ true, %569 ], [ false, %649 ]
  %651 = phi i32 [ 0, %569 ], [ 2048, %649 ]
  %652 = or i32 %651, %17, !dbg !111
  %653 = or i32 %651, %18, !dbg !111
  %654 = icmp ult i32 %652, 2304, !dbg !112
  %655 = add i32 %652, %44, !dbg !113
  %656 = add i32 %653, %44, !dbg !113
  %657 = sext i32 %655 to i64, !dbg !114
  %658 = getelementptr float, ptr addrspace(1) %0, i64 %657, !dbg !114
  %659 = sext i32 %656 to i64, !dbg !114
  %660 = getelementptr float, ptr addrspace(1) %0, i64 %659, !dbg !114
  %661 = and i1 %22, %654, !dbg !115
  %662 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %658, i1 %661, i32 0, i1 %661, i32 0, i1 %661, i32 0, i1 %661, i32 0, i1 %661) #3, !dbg !116
  %663 = extractvalue { i32, i32, i32, i32 } %662, 0, !dbg !116
  %664 = extractvalue { i32, i32, i32, i32 } %662, 1, !dbg !116
  %665 = extractvalue { i32, i32, i32, i32 } %662, 2, !dbg !116
  %666 = extractvalue { i32, i32, i32, i32 } %662, 3, !dbg !116
  %667 = bitcast i32 %663 to float, !dbg !116
  %668 = bitcast i32 %664 to float, !dbg !116
  %669 = bitcast i32 %665 to float, !dbg !116
  %670 = bitcast i32 %666 to float, !dbg !116
  %671 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %660, i1 %661, i32 0, i1 %661, i32 0, i1 %661, i32 0, i1 %661, i32 0, i1 %661) #3, !dbg !116
  %672 = extractvalue { i32, i32, i32, i32 } %671, 0, !dbg !116
  %673 = extractvalue { i32, i32, i32, i32 } %671, 1, !dbg !116
  %674 = extractvalue { i32, i32, i32, i32 } %671, 2, !dbg !116
  %675 = extractvalue { i32, i32, i32, i32 } %671, 3, !dbg !116
  %676 = bitcast i32 %672 to float, !dbg !116
  %677 = bitcast i32 %673 to float, !dbg !116
  %678 = bitcast i32 %674 to float, !dbg !116
  %679 = bitcast i32 %675 to float, !dbg !116
  %680 = zext nneg i32 %652 to i64, !dbg !117
  %681 = getelementptr float, ptr addrspace(1) %6, i64 %680, !dbg !117
  %682 = zext nneg i32 %653 to i64, !dbg !117
  %683 = getelementptr float, ptr addrspace(1) %6, i64 %682, !dbg !117
  %684 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %681, i1 %654, i32 0, i1 %654, i32 0, i1 %654, i32 0, i1 %654, i32 0, i1 %654) #3, !dbg !118
  %685 = extractvalue { i32, i32, i32, i32 } %684, 0, !dbg !118
  %686 = extractvalue { i32, i32, i32, i32 } %684, 1, !dbg !118
  %687 = extractvalue { i32, i32, i32, i32 } %684, 2, !dbg !118
  %688 = extractvalue { i32, i32, i32, i32 } %684, 3, !dbg !118
  %689 = bitcast i32 %685 to float, !dbg !118
  %690 = bitcast i32 %686 to float, !dbg !118
  %691 = bitcast i32 %687 to float, !dbg !118
  %692 = bitcast i32 %688 to float, !dbg !118
  %693 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %683, i1 %654, i32 0, i1 %654, i32 0, i1 %654, i32 0, i1 %654, i32 0, i1 %654) #3, !dbg !118
  %694 = extractvalue { i32, i32, i32, i32 } %693, 0, !dbg !118
  %695 = extractvalue { i32, i32, i32, i32 } %693, 1, !dbg !118
  %696 = extractvalue { i32, i32, i32, i32 } %693, 2, !dbg !118
  %697 = extractvalue { i32, i32, i32, i32 } %693, 3, !dbg !118
  %698 = bitcast i32 %694 to float, !dbg !118
  %699 = bitcast i32 %695 to float, !dbg !118
  %700 = bitcast i32 %696 to float, !dbg !118
  %701 = bitcast i32 %697 to float, !dbg !118
  %702 = getelementptr i16, ptr addrspace(1) %4, i64 %657, !dbg !119
  %703 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %702, i1 %661, i32 0, i1 %661, i32 0, i1 %661, i32 0, i1 %661, i32 0, i1 %661) #3, !dbg !120
  %704 = extractvalue { i32, i32, i32, i32 } %703, 0, !dbg !120
  %705 = extractvalue { i32, i32, i32, i32 } %703, 1, !dbg !120
  %706 = extractvalue { i32, i32, i32, i32 } %703, 2, !dbg !120
  %707 = extractvalue { i32, i32, i32, i32 } %703, 3, !dbg !120
  %708 = trunc i32 %704 to i16, !dbg !120
  %extelt.offset = lshr i32 %704, 16, !dbg !120
  %709 = trunc i32 %extelt.offset to i16, !dbg !120
  %710 = trunc i32 %705 to i16, !dbg !120
  %extelt.offset3 = lshr i32 %705, 16, !dbg !120
  %711 = trunc i32 %extelt.offset3 to i16, !dbg !120
  %712 = trunc i32 %706 to i16, !dbg !120
  %extelt.offset4 = lshr i32 %706, 16, !dbg !120
  %713 = trunc i32 %extelt.offset4 to i16, !dbg !120
  %714 = trunc i32 %707 to i16, !dbg !120
  %extelt.offset5 = lshr i32 %707, 16, !dbg !120
  %715 = trunc i32 %extelt.offset5 to i16, !dbg !120
  %716 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %708) #3, !dbg !121
  %717 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %709) #3, !dbg !121
  %718 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %710) #3, !dbg !121
  %719 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %711) #3, !dbg !121
  %720 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %712) #3, !dbg !121
  %721 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %713) #3, !dbg !121
  %722 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %714) #3, !dbg !121
  %723 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %715) #3, !dbg !121
  %724 = fadd float %689, 1.000000e+00, !dbg !122
  %725 = fadd float %690, 1.000000e+00, !dbg !122
  %726 = fadd float %691, 1.000000e+00, !dbg !122
  %727 = fadd float %692, 1.000000e+00, !dbg !122
  %728 = fadd float %698, 1.000000e+00, !dbg !122
  %729 = fadd float %699, 1.000000e+00, !dbg !122
  %730 = fadd float %700, 1.000000e+00, !dbg !122
  %731 = fadd float %701, 1.000000e+00, !dbg !122
  %732 = fmul float %724, %667, !dbg !123
  %733 = fmul float %725, %668, !dbg !123
  %734 = fmul float %726, %669, !dbg !123
  %735 = fmul float %727, %670, !dbg !123
  %736 = fmul float %728, %676, !dbg !123
  %737 = fmul float %729, %677, !dbg !123
  %738 = fmul float %730, %678, !dbg !123
  %739 = fmul float %731, %679, !dbg !123
  %740 = fmul float %732, %26, !dbg !124
  %741 = fmul float %733, %26, !dbg !124
  %742 = fmul float %734, %26, !dbg !124
  %743 = fmul float %735, %26, !dbg !124
  %744 = fmul float %736, %26, !dbg !124
  %745 = fmul float %737, %26, !dbg !124
  %746 = fmul float %738, %26, !dbg !124
  %747 = fmul float %739, %26, !dbg !124
  %748 = fmul float %641, %716, !dbg !125
  %749 = fmul float %641, %717, !dbg !125
  %750 = fmul float %641, %718, !dbg !125
  %751 = fmul float %641, %719, !dbg !125
  %752 = fmul float %641, %720, !dbg !125
  %753 = fmul float %641, %721, !dbg !125
  %754 = fmul float %641, %722, !dbg !125
  %755 = fmul float %641, %723, !dbg !125
  %756 = fadd float %748, %740, !dbg !126
  %757 = fadd float %741, %749, !dbg !126
  %758 = fadd float %742, %750, !dbg !126
  %759 = fadd float %743, %751, !dbg !126
  %760 = fadd float %744, %752, !dbg !126
  %761 = fadd float %745, %753, !dbg !126
  %762 = fadd float %746, %754, !dbg !126
  %763 = fadd float %747, %755, !dbg !126
  %764 = fadd float %748, %756, !dbg !127
  %765 = fadd float %749, %757, !dbg !127
  %766 = fadd float %750, %758, !dbg !127
  %767 = fadd float %751, %759, !dbg !127
  %768 = fadd float %752, %760, !dbg !127
  %769 = fadd float %753, %761, !dbg !127
  %770 = fadd float %754, %762, !dbg !127
  %771 = fadd float %755, %763, !dbg !127
  %772 = getelementptr i16, ptr addrspace(1) %11, i64 %657, !dbg !128
  %773 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %764) #3, !dbg !129
  %774 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %765) #3, !dbg !129
  %775 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %766) #3, !dbg !129
  %776 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %767) #3, !dbg !129
  %777 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %768) #3, !dbg !129
  %778 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %769) #3, !dbg !129
  %779 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %770) #3, !dbg !129
  %780 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %771) #3, !dbg !129
  %781 = insertelement <2 x i16> undef, i16 %773, i64 0, !dbg !129
  %782 = insertelement <2 x i16> %781, i16 %774, i64 1, !dbg !129
  %783 = bitcast <2 x i16> %782 to i32, !dbg !129
  %784 = insertelement <2 x i16> undef, i16 %775, i64 0, !dbg !129
  %785 = insertelement <2 x i16> %784, i16 %776, i64 1, !dbg !129
  %786 = bitcast <2 x i16> %785 to i32, !dbg !129
  %787 = insertelement <2 x i16> undef, i16 %777, i64 0, !dbg !129
  %788 = insertelement <2 x i16> %787, i16 %778, i64 1, !dbg !129
  %789 = bitcast <2 x i16> %788 to i32, !dbg !129
  %790 = insertelement <2 x i16> undef, i16 %779, i64 0, !dbg !129
  %791 = insertelement <2 x i16> %790, i16 %780, i64 1, !dbg !129
  %792 = bitcast <2 x i16> %791 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %783, i32 %786, i32 %789, i32 %792, ptr addrspace(1) %772, i1 %661) #3, !dbg !129
  br i1 %650, label %649, label %793, !dbg !110

793:                                              ; preds = %649
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cwncxslgwppq3ddop3ltkkiwtqnalpybtbg27v7ifnpnbon63p5a.py", directory: "/tmp/torchinductor_zeus/wn")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d1213de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d1213de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10d11d1213de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10d11d1213de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 26, column: 31, scope: !5)
!12 = !DILocation(line: 26, column: 36, scope: !5)
!13 = !DILocation(line: 28, column: 31, scope: !5)
!14 = !DILocation(line: 28, column: 36, scope: !5)
!15 = !DILocation(line: 33, column: 45, scope: !5)
!16 = !DILocation(line: 46, column: 24, scope: !5)
!17 = !DILocation(line: 56, column: 24, scope: !5)
!18 = !DILocation(line: 29, column: 36, scope: !5)
!19 = !DILocation(line: 30, column: 27, scope: !5)
!20 = !DILocation(line: 31, column: 25, scope: !5)
!21 = !DILocation(line: 33, column: 40, scope: !5)
!22 = !DILocation(line: 33, column: 34, scope: !5)
!23 = !DILocation(line: 33, column: 59, scope: !5)
!24 = !DILocation(line: 33, column: 51, scope: !5)
!25 = !DILocation(line: 33, column: 110, scope: !5)
!26 = !DILocation(line: 34, column: 34, scope: !5)
!27 = !DILocation(line: 34, column: 51, scope: !5)
!28 = !DILocation(line: 34, column: 110, scope: !5)
!29 = !DILocation(line: 35, column: 34, scope: !5)
!30 = !DILocation(line: 35, column: 39, scope: !5)
!31 = !DILocation(line: 36, column: 34, scope: !5)
!32 = !DILocation(line: 36, column: 51, scope: !5)
!33 = !DILocation(line: 36, column: 110, scope: !5)
!34 = !DILocation(line: 37, column: 35, scope: !5)
!35 = !DILocation(line: 37, column: 40, scope: !5)
!36 = !DILocation(line: 38, column: 35, scope: !5)
!37 = !DILocation(line: 38, column: 52, scope: !5)
!38 = !DILocation(line: 41, column: 22, scope: !5)
!39 = !DILocation(line: 43, column: 22, scope: !5)
!40 = !DILocation(line: 44, column: 22, scope: !5)
!41 = !DILocation(line: 47, column: 24, scope: !5)
!42 = !DILocation(line: 48, column: 24, scope: !5)
!43 = !DILocation(line: 51, column: 24, scope: !5)
!44 = !DILocation(line: 52, column: 23, scope: !5)
!45 = !DILocation(line: 55, column: 48, scope: !5)
!46 = !DILocation(line: 57, column: 29, scope: !5)
!47 = !DILocation(line: 57, column: 53, scope: !5)
!48 = !DILocation(line: 243, column: 36, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !5, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!51 = !DILocation(line: 58, column: 27, scope: !49)
!52 = !DILocation(line: 233, column: 15, scope: !53, inlinedAt: !54)
!53 = distinct !DILexicalBlockFile(scope: !49, file: !50, discriminator: 0)
!54 = !DILocation(line: 243, column: 36, scope: !53, inlinedAt: !55)
!55 = !DILocation(line: 58, column: 27, scope: !53)
!56 = !DILocation(line: 72, column: 24, scope: !5)
!57 = !DILocation(line: 73, column: 24, scope: !5)
!58 = !DILocation(line: 74, column: 24, scope: !5)
!59 = !DILocation(line: 75, column: 24, scope: !5)
!60 = !DILocation(line: 77, column: 24, scope: !5)
!61 = !DILocation(line: 86, column: 24, scope: !5)
!62 = !DILocation(line: 60, column: 36, scope: !5)
!63 = !DILocation(line: 61, column: 27, scope: !5)
!64 = !DILocation(line: 62, column: 25, scope: !5)
!65 = !DILocation(line: 64, column: 41, scope: !5)
!66 = !DILocation(line: 64, column: 35, scope: !5)
!67 = !DILocation(line: 64, column: 60, scope: !5)
!68 = !DILocation(line: 64, column: 52, scope: !5)
!69 = !DILocation(line: 64, column: 111, scope: !5)
!70 = !DILocation(line: 65, column: 35, scope: !5)
!71 = !DILocation(line: 65, column: 40, scope: !5)
!72 = !DILocation(line: 66, column: 35, scope: !5)
!73 = !DILocation(line: 66, column: 52, scope: !5)
!74 = !DILocation(line: 67, column: 35, scope: !5)
!75 = !DILocation(line: 67, column: 52, scope: !5)
!76 = !DILocation(line: 68, column: 35, scope: !5)
!77 = !DILocation(line: 68, column: 52, scope: !5)
!78 = !DILocation(line: 68, column: 112, scope: !5)
!79 = !DILocation(line: 69, column: 35, scope: !5)
!80 = !DILocation(line: 69, column: 52, scope: !5)
!81 = !DILocation(line: 69, column: 112, scope: !5)
!82 = !DILocation(line: 70, column: 35, scope: !5)
!83 = !DILocation(line: 70, column: 40, scope: !5)
!84 = !DILocation(line: 79, column: 24, scope: !5)
!85 = !DILocation(line: 81, column: 24, scope: !5)
!86 = !DILocation(line: 82, column: 24, scope: !5)
!87 = !DILocation(line: 85, column: 24, scope: !5)
!88 = !DILocation(line: 89, column: 24, scope: !5)
!89 = !DILocation(line: 90, column: 24, scope: !5)
!90 = !DILocation(line: 91, column: 24, scope: !5)
!91 = !DILocation(line: 92, column: 24, scope: !5)
!92 = !DILocation(line: 93, column: 24, scope: !5)
!93 = !DILocation(line: 94, column: 24, scope: !5)
!94 = !DILocation(line: 95, column: 24, scope: !5)
!95 = !DILocation(line: 96, column: 24, scope: !5)
!96 = !DILocation(line: 97, column: 24, scope: !5)
!97 = !DILocation(line: 100, column: 48, scope: !5)
!98 = !DILocation(line: 101, column: 32, scope: !5)
!99 = !DILocation(line: 101, column: 56, scope: !5)
!100 = !DILocation(line: 243, column: 36, scope: !49, inlinedAt: !101)
!101 = !DILocation(line: 102, column: 27, scope: !49)
!102 = !DILocation(line: 233, column: 15, scope: !53, inlinedAt: !103)
!103 = !DILocation(line: 243, column: 36, scope: !53, inlinedAt: !104)
!104 = !DILocation(line: 102, column: 27, scope: !53)
!105 = !DILocation(line: 115, column: 24, scope: !5)
!106 = !DILocation(line: 116, column: 24, scope: !5)
!107 = !DILocation(line: 117, column: 24, scope: !5)
!108 = !DILocation(line: 118, column: 24, scope: !5)
!109 = !DILocation(line: 120, column: 24, scope: !5)
!110 = !DILocation(line: 103, column: 36, scope: !5)
!111 = !DILocation(line: 104, column: 27, scope: !5)
!112 = !DILocation(line: 105, column: 25, scope: !5)
!113 = !DILocation(line: 107, column: 45, scope: !5)
!114 = !DILocation(line: 107, column: 39, scope: !5)
!115 = !DILocation(line: 107, column: 64, scope: !5)
!116 = !DILocation(line: 107, column: 56, scope: !5)
!117 = !DILocation(line: 108, column: 35, scope: !5)
!118 = !DILocation(line: 108, column: 40, scope: !5)
!119 = !DILocation(line: 109, column: 35, scope: !5)
!120 = !DILocation(line: 109, column: 52, scope: !5)
!121 = !DILocation(line: 109, column: 112, scope: !5)
!122 = !DILocation(line: 111, column: 24, scope: !5)
!123 = !DILocation(line: 112, column: 24, scope: !5)
!124 = !DILocation(line: 113, column: 24, scope: !5)
!125 = !DILocation(line: 122, column: 24, scope: !5)
!126 = !DILocation(line: 123, column: 24, scope: !5)
!127 = !DILocation(line: 124, column: 24, scope: !5)
!128 = !DILocation(line: 126, column: 29, scope: !5)
!129 = !DILocation(line: 126, column: 53, scope: !5)
!130 = !DILocation(line: 103, column: 4, scope: !5)
