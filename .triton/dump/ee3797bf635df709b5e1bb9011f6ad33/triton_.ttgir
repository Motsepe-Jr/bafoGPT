#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10d11d1213de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg11: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg12: i32, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x2048xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<1x2048xi32, #blocked1>
    %c0_i32 = arith.constant 0 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %c4_i32 = arith.constant 4 : i32
    %cst_1 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_2 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32, #blocked>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c4_i32 : i32
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %5 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x2048xi32, #blocked1>
    %6 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %7 = tt.splat %6 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %8 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked>
    %9 = tt.load %7, %8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked>
    %10 = tt.addptr %arg8, %0 : !tt.ptr<f32, 1>, i32
    %11 = tt.splat %10 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %12 = tt.load %11, %8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked>
    %13 = arith.muli %0, %c2304_i32 : i32
    %14 = tt.splat %13 : (i32) -> tensor<1x2048xi32, #blocked>
    %15 = tt.splat %13 : (i32) -> tensor<1x2048xi32, #blocked1>
    %16 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %17 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked>
    %18 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked1>
    %19 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %20 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %21 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %22 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %23 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %24 = tt.broadcast %9 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %25 = tt.broadcast %12 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %26 = tt.splat %arg10 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>
    %27 = scf.for %arg14 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg15 = %cst_4) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %49 = tt.splat %arg14 : (i32) -> tensor<1x2048xi32, #blocked>
      %50 = tt.splat %arg14 : (i32) -> tensor<1x2048xi32, #blocked1>
      %51 = arith.addi %49, %4 : tensor<1x2048xi32, #blocked>
      %52 = arith.addi %50, %5 : tensor<1x2048xi32, #blocked1>
      %53 = arith.cmpi slt, %51, %cst : tensor<1x2048xi32, #blocked>
      %54 = arith.cmpi slt, %52, %cst_0 : tensor<1x2048xi32, #blocked1>
      %55 = arith.addi %51, %14 : tensor<1x2048xi32, #blocked>
      %56 = arith.addi %52, %15 : tensor<1x2048xi32, #blocked1>
      %57 = tt.addptr %16, %55 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %58 = arith.andi %53, %17 : tensor<1x2048xi1, #blocked>
      %59 = arith.andi %54, %18 : tensor<1x2048xi1, #blocked1>
      %60 = tt.load %57, %58, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %61 = arith.extf %60 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %62 = tt.addptr %19, %55 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %63 = tt.load %62, %58, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %64 = arith.extf %63 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %65 = tt.addptr %20, %51 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %66 = tt.load %65, %53, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %67 = tt.addptr %21, %55 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %68 = tt.load %67, %58, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %69 = arith.extf %68 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %70 = tt.addptr %22, %51 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %71 = tt.load %70, %53, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %72 = tt.addptr %23, %55 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %73 = tt.load %72, %58, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %74 = arith.addf %61, %64 : tensor<1x2048xf32, #blocked>
      %75 = arith.addf %66, %cst_3 : tensor<1x2048xf32, #blocked>
      %76 = arith.mulf %74, %75 : tensor<1x2048xf32, #blocked>
      %77 = arith.mulf %69, %24 : tensor<1x2048xf32, #blocked>
      %78 = arith.addf %71, %cst_3 : tensor<1x2048xf32, #blocked>
      %79 = arith.mulf %77, %78 : tensor<1x2048xf32, #blocked>
      %80 = arith.addf %79, %73 : tensor<1x2048xf32, #blocked>
      %81 = arith.mulf %76, %80 : tensor<1x2048xf32, #blocked>
      %82 = arith.addf %arg15, %81 : tensor<1x2048xf32, #blocked>
      %83 = arith.select %58, %82, %arg15 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %84 = arith.mulf %80, %25 : tensor<1x2048xf32, #blocked>
      %85 = tt.addptr %26, %56 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xi32, #blocked1>
      %86 = triton_gpu.convert_layout %84 : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked1>
      tt.store %85, %86, %59 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32, #blocked1>
      scf.yield %83 : tensor<1x2048xf32, #blocked>
    }
    %28 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg14: f32, %arg15: f32):
      %49 = arith.addf %arg14, %arg15 : f32
      tt.reduce.return %49 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %29 = tt.expand_dims %28 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %30 = tt.splat %arg9 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %31 = arith.mulf %29, %cst_2 : tensor<1x1xf32, #blocked>
    %32 = arith.mulf %12, %12 : tensor<1x1xf32, #blocked>
    %33 = arith.mulf %32, %12 : tensor<1x1xf32, #blocked>
    %34 = arith.mulf %31, %33 : tensor<1x1xf32, #blocked>
    %35 = arith.divf %34, %cst_1 : tensor<1x1xf32, #blocked>
    %36 = tt.broadcast %35 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %37 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>
    %38 = scf.for %arg14 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg15 = %cst_4) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %49 = tt.splat %arg14 : (i32) -> tensor<1x2048xi32, #blocked>
      %50 = tt.splat %arg14 : (i32) -> tensor<1x2048xi32, #blocked1>
      %51 = arith.addi %49, %4 : tensor<1x2048xi32, #blocked>
      %52 = arith.addi %50, %5 : tensor<1x2048xi32, #blocked1>
      %53 = arith.cmpi slt, %51, %cst : tensor<1x2048xi32, #blocked>
      %54 = arith.cmpi slt, %52, %cst_0 : tensor<1x2048xi32, #blocked1>
      %55 = arith.addi %51, %14 : tensor<1x2048xi32, #blocked>
      %56 = arith.addi %52, %15 : tensor<1x2048xi32, #blocked1>
      %57 = tt.addptr %21, %55 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %58 = arith.andi %53, %17 : tensor<1x2048xi1, #blocked>
      %59 = arith.andi %54, %18 : tensor<1x2048xi1, #blocked1>
      %60 = tt.load %57, %58, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %61 = arith.extf %60 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %62 = tt.addptr %22, %51 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %63 = tt.load %62, %53, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %64 = tt.addptr %23, %55 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %65 = tt.load %64, %58, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %66 = tt.addptr %30, %55 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %67 = tt.load %66, %58, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %68 = tt.addptr %16, %55 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %69 = tt.load %68, %58, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %70 = arith.extf %69 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %71 = tt.addptr %19, %55 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %72 = tt.load %71, %58, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %73 = arith.extf %72 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %74 = tt.addptr %20, %51 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %75 = tt.load %74, %53, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %76 = arith.mulf %61, %24 : tensor<1x2048xf32, #blocked>
      %77 = arith.addf %63, %cst_3 : tensor<1x2048xf32, #blocked>
      %78 = arith.mulf %76, %77 : tensor<1x2048xf32, #blocked>
      %79 = arith.addf %78, %65 : tensor<1x2048xf32, #blocked>
      %80 = arith.mulf %36, %79 : tensor<1x2048xf32, #blocked>
      %81 = arith.addf %70, %73 : tensor<1x2048xf32, #blocked>
      %82 = arith.addf %75, %cst_3 : tensor<1x2048xf32, #blocked>
      %83 = arith.mulf %81, %82 : tensor<1x2048xf32, #blocked>
      %84 = arith.mulf %83, %25 : tensor<1x2048xf32, #blocked>
      %85 = arith.addf %67, %84 : tensor<1x2048xf32, #blocked>
      %86 = arith.addf %85, %80 : tensor<1x2048xf32, #blocked>
      %87 = arith.addf %86, %80 : tensor<1x2048xf32, #blocked>
      %88 = arith.mulf %87, %77 : tensor<1x2048xf32, #blocked>
      %89 = arith.mulf %88, %61 : tensor<1x2048xf32, #blocked>
      %90 = arith.addf %arg15, %89 : tensor<1x2048xf32, #blocked>
      %91 = arith.select %58, %90, %arg15 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %92 = tt.addptr %37, %56 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xi32, #blocked1>
      %93 = triton_gpu.convert_layout %87 : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked1>
      tt.store %92, %93, %59 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32, #blocked1>
      scf.yield %91 : tensor<1x2048xf32, #blocked>
    }
    %39 = "tt.reduce"(%38) <{axis = 1 : i32}> ({
    ^bb0(%arg14: f32, %arg15: f32):
      %49 = arith.addf %arg14, %arg15 : f32
      tt.reduce.return %49 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %40 = tt.expand_dims %39 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %41 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %42 = arith.mulf %40, %cst_2 : tensor<1x1xf32, #blocked>
    %43 = arith.mulf %9, %9 : tensor<1x1xf32, #blocked>
    %44 = arith.mulf %43, %9 : tensor<1x1xf32, #blocked>
    %45 = arith.mulf %42, %44 : tensor<1x1xf32, #blocked>
    %46 = arith.divf %45, %cst_1 : tensor<1x1xf32, #blocked>
    %47 = tt.broadcast %46 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %48 = tt.splat %arg11 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg14 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %49 = tt.splat %arg14 : (i32) -> tensor<1x2048xi32, #blocked>
      %50 = arith.addi %49, %4 : tensor<1x2048xi32, #blocked>
      %51 = arith.cmpi slt, %50, %cst : tensor<1x2048xi32, #blocked>
      %52 = arith.addi %50, %14 : tensor<1x2048xi32, #blocked>
      %53 = tt.addptr %41, %52 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %54 = arith.andi %51, %17 : tensor<1x2048xi1, #blocked>
      %55 = tt.load %53, %54, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %56 = tt.addptr %22, %50 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %57 = tt.load %56, %51, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %58 = tt.addptr %21, %52 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %59 = tt.load %58, %54, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %60 = arith.extf %59 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %61 = arith.addf %57, %cst_3 : tensor<1x2048xf32, #blocked>
      %62 = arith.mulf %55, %61 : tensor<1x2048xf32, #blocked>
      %63 = arith.mulf %62, %24 : tensor<1x2048xf32, #blocked>
      %64 = arith.mulf %47, %60 : tensor<1x2048xf32, #blocked>
      %65 = arith.addf %63, %64 : tensor<1x2048xf32, #blocked>
      %66 = arith.addf %65, %64 : tensor<1x2048xf32, #blocked>
      %67 = tt.addptr %48, %52 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %68 = arith.truncf %66 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
      tt.store %67, %68, %54 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    }
    tt.return
  }
}
