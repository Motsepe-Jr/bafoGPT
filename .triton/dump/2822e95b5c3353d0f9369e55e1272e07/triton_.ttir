module {
  tt.func public @triton__0d1d2d3d4d5d6de7de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32
    %c4_i32 = arith.constant 4 : i32
    %c3_i64 = arith.constant 3 : i64
    %c2_i64 = arith.constant 2 : i64
    %c16_i32 = arith.constant 16 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c256_i32 = arith.constant 256 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<256x1xbf16>
    %cst_0 = arith.constant dense<1024> : tensor<256x1xi32>
    %cst_1 = arith.constant dense<4> : tensor<256x1xi32>
    %cst_2 = arith.constant dense<128> : tensor<256x1xi32>
    %cst_3 = arith.constant dense<-128> : tensor<256x1xi32>
    %cst_4 = arith.constant dense<128> : tensor<256x1xi64>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<256x1xf32>
    %cst_6 = arith.constant dense<256> : tensor<256x1xi64>
    %cst_7 = arith.constant dense<256> : tensor<256x1xi32>
    %0 = tt.get_program_id y : i32
    %1 = arith.cmpi slt, %0, %c64_i32 : i32
    %2 = tt.get_program_id x : i32
    %3 = arith.muli %2, %c256_i32 : i32
    %4 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32>
    %5 = tt.expand_dims %4 {axis = 1 : i32} : (tensor<256xi32>) -> tensor<256x1xi32>
    %6 = tt.splat %3 : (i32) -> tensor<256x1xi32>
    %7 = arith.addi %6, %5 : tensor<256x1xi32>
    %8 = arith.cmpi slt, %7, %cst_7 : tensor<256x1xi32>
    %9 = arith.divsi %0, %c4_i32 : i32
    %10 = arith.remsi %9, %c4_i32 : i32
    %11 = arith.divsi %0, %c16_i32 : i32
    %12 = arith.remsi %0, %c16_i32 : i32
    %13 = arith.remsi %0, %c4_i32 : i32
    %14 = arith.extsi %10 : i32 to i64
    %15 = arith.cmpi slt, %14, %c2_i64 : i64
    %16 = arith.extsi %7 : tensor<256x1xi32> to tensor<256x1xi64>
    %17 = arith.cmpi sge, %16, %cst_6 : tensor<256x1xi64>
    %18 = tt.splat %15 : (i1) -> tensor<256x1xi1>
    %19 = arith.andi %17, %18 : tensor<256x1xi1>
    %20 = arith.muli %12, %c256_i32 : i32
    %21 = tt.splat %20 : (i32) -> tensor<256x1xi32>
    %22 = arith.addi %7, %21 : tensor<256x1xi32>
    %23 = arith.muli %11, %c2048_i32 : i32
    %24 = tt.splat %23 : (i32) -> tensor<256x1xi32>
    %25 = arith.addi %22, %24 : tensor<256x1xi32>
    %26 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<256x1x!tt.ptr<bf16, 1>>
    %27 = tt.addptr %26, %25 : tensor<256x1x!tt.ptr<bf16, 1>>, tensor<256x1xi32>
    %28 = arith.andi %19, %8 : tensor<256x1xi1>
    %29 = tt.splat %1 : (i1) -> tensor<256x1xi1>
    %30 = arith.andi %28, %29 : tensor<256x1xi1>
    %31 = tt.load %27, %30, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %32 = arith.extf %31 : tensor<256x1xbf16> to tensor<256x1xf32>
    %33 = arith.select %19, %32, %cst_5 : tensor<256x1xi1>, tensor<256x1xf32>
    %34 = arith.andi %18, %8 : tensor<256x1xi1>
    %35 = arith.andi %34, %29 : tensor<256x1xi1>
    %36 = tt.load %27, %35, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %37 = arith.extf %36 : tensor<256x1xbf16> to tensor<256x1xf32>
    %38 = arith.muli %13, %c256_i32 : i32
    %39 = tt.splat %38 : (i32) -> tensor<256x1xi32>
    %40 = arith.addi %7, %39 : tensor<256x1xi32>
    %41 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<256x1x!tt.ptr<f32, 1>>
    %42 = tt.addptr %41, %40 : tensor<256x1x!tt.ptr<f32, 1>>, tensor<256x1xi32>
    %43 = tt.load %42, %35, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xf32>
    %44 = arith.mulf %37, %43 : tensor<256x1xf32>
    %45 = arith.cmpi sge, %16, %cst_4 : tensor<256x1xi64>
    %46 = arith.andi %45, %18 : tensor<256x1xi1>
    %47 = arith.addi %7, %cst_3 : tensor<256x1xi32>
    %48 = arith.addi %47, %21 : tensor<256x1xi32>
    %49 = arith.addi %48, %24 : tensor<256x1xi32>
    %50 = tt.addptr %26, %49 : tensor<256x1x!tt.ptr<bf16, 1>>, tensor<256x1xi32>
    %51 = arith.andi %46, %8 : tensor<256x1xi1>
    %52 = arith.andi %51, %29 : tensor<256x1xi1>
    %53 = tt.load %50, %52, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %54 = arith.extf %53 : tensor<256x1xbf16> to tensor<256x1xf32>
    %55 = arith.addi %47, %39 : tensor<256x1xi32>
    %56 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<256x1x!tt.ptr<f32, 1>>
    %57 = tt.addptr %56, %55 : tensor<256x1x!tt.ptr<f32, 1>>, tensor<256x1xi32>
    %58 = tt.load %57, %52, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xf32>
    %59 = arith.mulf %54, %58 : tensor<256x1xf32>
    %60 = arith.subf %cst_5, %59 : tensor<256x1xf32>
    %61 = arith.select %46, %60, %cst_5 : tensor<256x1xi1>, tensor<256x1xf32>
    %62 = arith.addf %44, %61 : tensor<256x1xf32>
    %63 = arith.cmpi slt, %16, %cst_4 : tensor<256x1xi64>
    %64 = arith.andi %63, %18 : tensor<256x1xi1>
    %65 = arith.addi %7, %cst_2 : tensor<256x1xi32>
    %66 = arith.addi %65, %21 : tensor<256x1xi32>
    %67 = arith.addi %66, %24 : tensor<256x1xi32>
    %68 = tt.addptr %26, %67 : tensor<256x1x!tt.ptr<bf16, 1>>, tensor<256x1xi32>
    %69 = arith.andi %64, %8 : tensor<256x1xi1>
    %70 = arith.andi %69, %29 : tensor<256x1xi1>
    %71 = tt.load %68, %70, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %72 = arith.extf %71 : tensor<256x1xbf16> to tensor<256x1xf32>
    %73 = arith.addi %65, %39 : tensor<256x1xi32>
    %74 = tt.addptr %56, %73 : tensor<256x1x!tt.ptr<f32, 1>>, tensor<256x1xi32>
    %75 = tt.load %74, %70, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xf32>
    %76 = arith.mulf %72, %75 : tensor<256x1xf32>
    %77 = arith.select %64, %76, %cst_5 : tensor<256x1xi1>, tensor<256x1xf32>
    %78 = arith.addf %62, %77 : tensor<256x1xf32>
    %79 = arith.addf %33, %78 : tensor<256x1xf32>
    %80 = arith.select %18, %79, %cst_5 : tensor<256x1xi1>, tensor<256x1xf32>
    %81 = arith.cmpi sge, %14, %c2_i64 : i64
    %82 = arith.cmpi slt, %14, %c3_i64 : i64
    %83 = arith.andi %81, %82 : i1
    %84 = arith.muli %7, %cst_1 : tensor<256x1xi32>
    %85 = tt.splat %13 : (i32) -> tensor<256x1xi32>
    %86 = arith.addi %85, %84 : tensor<256x1xi32>
    %87 = arith.muli %11, %c1024_i32 : i32
    %88 = tt.splat %87 : (i32) -> tensor<256x1xi32>
    %89 = arith.addi %86, %88 : tensor<256x1xi32>
    %90 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<256x1x!tt.ptr<f32, 1>>
    %91 = tt.addptr %90, %89 : tensor<256x1x!tt.ptr<f32, 1>>, tensor<256x1xi32>
    %92 = tt.splat %83 : (i1) -> tensor<256x1xi1>
    %93 = arith.andi %92, %8 : tensor<256x1xi1>
    %94 = arith.andi %93, %29 : tensor<256x1xi1>
    %95 = tt.load %91, %94, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xf32>
    %96 = arith.select %92, %95, %cst_5 : tensor<256x1xi1>, tensor<256x1xf32>
    %97 = arith.cmpi sge, %14, %c3_i64 : i64
    %98 = arith.addi %40, %24 : tensor<256x1xi32>
    %99 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<256x1x!tt.ptr<bf16, 1>>
    %100 = tt.addptr %99, %98 : tensor<256x1x!tt.ptr<bf16, 1>>, tensor<256x1xi32>
    %101 = tt.splat %97 : (i1) -> tensor<256x1xi1>
    %102 = arith.andi %101, %8 : tensor<256x1xi1>
    %103 = arith.andi %102, %29 : tensor<256x1xi1>
    %104 = tt.load %100, %103, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %105 = arith.extf %104 : tensor<256x1xbf16> to tensor<256x1xf32>
    %106 = arith.addi %7, %cst_0 : tensor<256x1xi32>
    %107 = arith.addi %106, %39 : tensor<256x1xi32>
    %108 = arith.addi %107, %24 : tensor<256x1xi32>
    %109 = tt.addptr %99, %108 : tensor<256x1x!tt.ptr<bf16, 1>>, tensor<256x1xi32>
    %110 = tt.load %109, %103, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %111 = arith.extf %110 : tensor<256x1xbf16> to tensor<256x1xf32>
    %112 = arith.addf %105, %111 : tensor<256x1xf32>
    %113 = arith.select %101, %112, %cst_5 : tensor<256x1xi1>, tensor<256x1xf32>
    %114 = arith.select %92, %96, %113 : tensor<256x1xi1>, tensor<256x1xf32>
    %115 = arith.select %18, %80, %114 : tensor<256x1xi1>, tensor<256x1xf32>
    %116 = arith.muli %0, %c256_i32 : i32
    %117 = tt.splat %116 : (i32) -> tensor<256x1xi32>
    %118 = arith.addi %7, %117 : tensor<256x1xi32>
    %119 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<256x1x!tt.ptr<bf16, 1>>
    %120 = tt.addptr %119, %118 : tensor<256x1x!tt.ptr<bf16, 1>>, tensor<256x1xi32>
    %121 = arith.andi %8, %29 : tensor<256x1xi1>
    %122 = arith.truncf %115 : tensor<256x1xf32> to tensor<256x1xbf16>
    tt.store %120, %122, %121 {cache = 1 : i32, evict = 1 : i32} : tensor<256x1xbf16>
    tt.return
  }
}
