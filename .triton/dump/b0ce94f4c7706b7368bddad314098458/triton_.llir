; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9de10de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !5 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %12, 255, !dbg !8
  %13 = shl nuw nsw i32 %urem, 3, !dbg !8
  %14 = or i32 %13, 4, !dbg !8
  %15 = shl nuw nsw i32 %urem, 2, !dbg !8
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %17 = mul i32 %16, 2304, !dbg !10
  %18 = lshr i32 %12, 5, !dbg !8
  %19 = add i32 %13, %17, !dbg !11
  %20 = add i32 %14, %17, !dbg !11
  %21 = sext i32 %19 to i64, !dbg !12
  %22 = getelementptr i16, ptr addrspace(1) %1, i64 %21, !dbg !12
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !13
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !13
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !13
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !13
  %28 = trunc i32 %24 to i16, !dbg !13
  %extelt.offset28 = lshr i32 %24, 16, !dbg !13
  %29 = trunc i32 %extelt.offset28 to i16, !dbg !13
  %30 = trunc i32 %25 to i16, !dbg !13
  %extelt.offset29 = lshr i32 %25, 16, !dbg !13
  %31 = trunc i32 %extelt.offset29 to i16, !dbg !13
  %32 = trunc i32 %26 to i16, !dbg !13
  %extelt.offset30 = lshr i32 %26, 16, !dbg !13
  %33 = trunc i32 %extelt.offset30 to i16, !dbg !13
  %34 = trunc i32 %27 to i16, !dbg !13
  %extelt.offset31 = lshr i32 %27, 16, !dbg !13
  %35 = trunc i32 %extelt.offset31 to i16, !dbg !13
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #3, !dbg !14
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #3, !dbg !14
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #3, !dbg !14
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #3, !dbg !14
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #3, !dbg !14
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #3, !dbg !14
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #3, !dbg !14
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #3, !dbg !14
  %44 = zext nneg i32 %13 to i64, !dbg !15
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !15
  %46 = zext nneg i32 %14 to i64, !dbg !15
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !15
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !16
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !16
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !16
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !16
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !16
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !16
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !16
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !16
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !17
  %59 = sext i32 %20 to i64, !dbg !17
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !17
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !18
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !18
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !18
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !18
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !18
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !18
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !18
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !18
  %71 = insertelement <8 x i32> poison, i32 %49, i64 0, !dbg !16
  %72 = insertelement <8 x i32> %71, i32 %50, i64 1, !dbg !16
  %73 = insertelement <8 x i32> %72, i32 %51, i64 2, !dbg !16
  %74 = insertelement <8 x i32> %73, i32 %52, i64 3, !dbg !16
  %75 = insertelement <8 x i32> %74, i32 %54, i64 4, !dbg !16
  %76 = insertelement <8 x i32> %75, i32 %55, i64 5, !dbg !16
  %77 = insertelement <8 x i32> %76, i32 %56, i64 6, !dbg !16
  %78 = insertelement <8 x i32> %77, i32 %57, i64 7, !dbg !16
  %79 = bitcast <8 x i32> %78 to <8 x float>, !dbg !16
  %80 = insertelement <8 x i32> poison, i32 %62, i64 0, !dbg !18
  %81 = insertelement <8 x i32> %80, i32 %63, i64 1, !dbg !18
  %82 = insertelement <8 x i32> %81, i32 %64, i64 2, !dbg !18
  %83 = insertelement <8 x i32> %82, i32 %65, i64 3, !dbg !18
  %84 = insertelement <8 x i32> %83, i32 %67, i64 4, !dbg !18
  %85 = insertelement <8 x i32> %84, i32 %68, i64 5, !dbg !18
  %86 = insertelement <8 x i32> %85, i32 %69, i64 6, !dbg !18
  %87 = insertelement <8 x i32> %86, i32 %70, i64 7, !dbg !18
  %88 = bitcast <8 x i32> %87 to <8 x float>, !dbg !18
  %89 = fadd <8 x float> %79, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !19
  %90 = insertelement <8 x float> poison, float %36, i64 0, !dbg !20
  %91 = insertelement <8 x float> %90, float %37, i64 1, !dbg !20
  %92 = insertelement <8 x float> %91, float %38, i64 2, !dbg !20
  %93 = insertelement <8 x float> %92, float %39, i64 3, !dbg !20
  %94 = insertelement <8 x float> %93, float %40, i64 4, !dbg !20
  %95 = insertelement <8 x float> %94, float %41, i64 5, !dbg !20
  %96 = insertelement <8 x float> %95, float %42, i64 6, !dbg !20
  %97 = insertelement <8 x float> %96, float %43, i64 7, !dbg !20
  %98 = fmul <8 x float> %97, %89, !dbg !20
  %99 = fmul <8 x float> %98, %88, !dbg !21
  %100 = fadd <8 x float> %99, zeroinitializer, !dbg !22
  %101 = or i32 %13, 2048, !dbg !23
  %102 = or i32 %13, 2052, !dbg !23
  %103 = icmp ult i32 %101, 2304, !dbg !24
  %104 = add i32 %101, %17, !dbg !11
  %105 = add i32 %102, %17, !dbg !11
  %106 = sext i32 %104 to i64, !dbg !12
  %107 = getelementptr i16, ptr addrspace(1) %1, i64 %106, !dbg !12
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !13
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !13
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !13
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !13
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !13
  %113 = trunc i32 %109 to i16, !dbg !13
  %extelt.offset28.1 = lshr i32 %109, 16, !dbg !13
  %114 = trunc i32 %extelt.offset28.1 to i16, !dbg !13
  %115 = trunc i32 %110 to i16, !dbg !13
  %extelt.offset29.1 = lshr i32 %110, 16, !dbg !13
  %116 = trunc i32 %extelt.offset29.1 to i16, !dbg !13
  %117 = trunc i32 %111 to i16, !dbg !13
  %extelt.offset30.1 = lshr i32 %111, 16, !dbg !13
  %118 = trunc i32 %extelt.offset30.1 to i16, !dbg !13
  %119 = trunc i32 %112 to i16, !dbg !13
  %extelt.offset31.1 = lshr i32 %112, 16, !dbg !13
  %120 = trunc i32 %extelt.offset31.1 to i16, !dbg !13
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #3, !dbg !14
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #3, !dbg !14
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #3, !dbg !14
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #3, !dbg !14
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %117) #3, !dbg !14
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #3, !dbg !14
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #3, !dbg !14
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #3, !dbg !14
  %129 = zext nneg i32 %101 to i64, !dbg !15
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !15
  %131 = zext nneg i32 %102 to i64, !dbg !15
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !15
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %130, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !16
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !16
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !16
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !16
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !16
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %132, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !16
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !16
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !16
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !16
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !16
  %143 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !17
  %144 = sext i32 %105 to i64, !dbg !17
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !17
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !18
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !18
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !18
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !18
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !18
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %145, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !18
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !18
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !18
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !18
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !18
  %156 = insertelement <8 x i32> poison, i32 %134, i64 0, !dbg !16
  %157 = insertelement <8 x i32> %156, i32 %135, i64 1, !dbg !16
  %158 = insertelement <8 x i32> %157, i32 %136, i64 2, !dbg !16
  %159 = insertelement <8 x i32> %158, i32 %137, i64 3, !dbg !16
  %160 = insertelement <8 x i32> %159, i32 %139, i64 4, !dbg !16
  %161 = insertelement <8 x i32> %160, i32 %140, i64 5, !dbg !16
  %162 = insertelement <8 x i32> %161, i32 %141, i64 6, !dbg !16
  %163 = insertelement <8 x i32> %162, i32 %142, i64 7, !dbg !16
  %164 = bitcast <8 x i32> %163 to <8 x float>, !dbg !16
  %165 = insertelement <8 x i32> poison, i32 %147, i64 0, !dbg !18
  %166 = insertelement <8 x i32> %165, i32 %148, i64 1, !dbg !18
  %167 = insertelement <8 x i32> %166, i32 %149, i64 2, !dbg !18
  %168 = insertelement <8 x i32> %167, i32 %150, i64 3, !dbg !18
  %169 = insertelement <8 x i32> %168, i32 %152, i64 4, !dbg !18
  %170 = insertelement <8 x i32> %169, i32 %153, i64 5, !dbg !18
  %171 = insertelement <8 x i32> %170, i32 %154, i64 6, !dbg !18
  %172 = insertelement <8 x i32> %171, i32 %155, i64 7, !dbg !18
  %173 = bitcast <8 x i32> %172 to <8 x float>, !dbg !18
  %174 = fadd <8 x float> %164, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !19
  %175 = insertelement <8 x float> poison, float %121, i64 0, !dbg !20
  %176 = insertelement <8 x float> %175, float %122, i64 1, !dbg !20
  %177 = insertelement <8 x float> %176, float %123, i64 2, !dbg !20
  %178 = insertelement <8 x float> %177, float %124, i64 3, !dbg !20
  %179 = insertelement <8 x float> %178, float %125, i64 4, !dbg !20
  %180 = insertelement <8 x float> %179, float %126, i64 5, !dbg !20
  %181 = insertelement <8 x float> %180, float %127, i64 6, !dbg !20
  %182 = insertelement <8 x float> %181, float %128, i64 7, !dbg !20
  %183 = fmul <8 x float> %182, %174, !dbg !20
  %184 = fmul <8 x float> %183, %173, !dbg !21
  %185 = insertelement <8 x i1> poison, i1 %103, i64 0, !dbg !22
  %186 = shufflevector <8 x i1> %185, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !22
  %187 = select <8 x i1> %186, <8 x float> %184, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !22
  %188 = fadd <8 x float> %100, %187, !dbg !22
  %189 = and i32 %12, 31, !dbg !8
  %190 = and i32 %18, 7, !dbg !8
  %191 = or i32 %15, 1024, !dbg !8
  %shift = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %192 = fadd <8 x float> %188, %shift, !dbg !25
  %shift78 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %193 = fadd <8 x float> %shift78, %192, !dbg !25
  %shift79 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %194 = fadd <8 x float> %shift79, %193, !dbg !25
  %shift80 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %195 = fadd <8 x float> %shift80, %194, !dbg !25
  %shift81 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %196 = fadd <8 x float> %shift81, %195, !dbg !25
  %shift82 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %197 = fadd <8 x float> %shift82, %196, !dbg !25
  %shift83 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %198 = fadd <8 x float> %shift83, %197, !dbg !25
  %199 = extractelement <8 x float> %198, i64 0, !dbg !25
  %200 = bitcast float %199 to i32, !dbg !31
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 16, i32 31), !dbg !31
  %202 = bitcast i32 %201 to float, !dbg !31
  %203 = fadd float %199, %202, !dbg !25
  %204 = bitcast float %203 to i32, !dbg !31
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !31
  %206 = bitcast i32 %205 to float, !dbg !31
  %207 = fadd float %203, %206, !dbg !25
  %208 = bitcast float %207 to i32, !dbg !31
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 4, i32 31), !dbg !31
  %210 = bitcast i32 %209 to float, !dbg !31
  %211 = fadd float %207, %210, !dbg !25
  %212 = bitcast float %211 to i32, !dbg !31
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 2, i32 31), !dbg !31
  %214 = bitcast i32 %213 to float, !dbg !31
  %215 = fadd float %211, %214, !dbg !25
  %216 = bitcast float %215 to i32, !dbg !31
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !31
  %218 = bitcast i32 %217 to float, !dbg !31
  %219 = fadd float %215, %218, !dbg !25
  %220 = icmp eq i32 %189, 0, !dbg !31
  %221 = zext nneg i32 %190 to i64, !dbg !31
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i64 %221, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, float %219, i1 %220) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %223 = icmp slt i32 %12, 8, !dbg !31
  %224 = sext i32 %12 to i64, !dbg !31
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i64 %224, !dbg !31
  %226 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %225, i1 %223) #3, !dbg !31
  %227 = bitcast float %226 to i32, !dbg !31
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 4, i32 31), !dbg !31
  %229 = bitcast i32 %228 to float, !dbg !31
  %230 = fadd float %226, %229, !dbg !25
  %231 = bitcast float %230 to i32, !dbg !31
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 2, i32 31), !dbg !31
  %233 = bitcast i32 %232 to float, !dbg !31
  %234 = fadd float %230, %233, !dbg !25
  %235 = bitcast float %234 to i32, !dbg !31
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 1, i32 31), !dbg !31
  %237 = bitcast i32 %236 to float, !dbg !31
  %238 = fadd float %234, %237, !dbg !25
  %239 = and i32 %12, 7, !dbg !31
  %240 = icmp eq i32 %239, 0, !dbg !31
  %241 = and i1 %223, %240, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, float %238, i1 %241) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %242 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !31
  %243 = sext i32 %16 to i64, !dbg !33
  %244 = getelementptr float, ptr addrspace(1) %4, i64 %243, !dbg !33
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !34
  %246 = bitcast i32 %245 to float, !dbg !34
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !34
  %248 = bitcast i32 %247 to float, !dbg !34
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !34
  %250 = bitcast i32 %249 to float, !dbg !34
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !34
  %252 = bitcast i32 %251 to float, !dbg !34
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !34
  %254 = bitcast i32 %253 to float, !dbg !34
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !34
  %256 = bitcast i32 %255 to float, !dbg !34
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !34
  %258 = bitcast i32 %257 to float, !dbg !34
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !34
  %260 = bitcast i32 %259 to float, !dbg !34
  %261 = fmul float %242, -5.000000e-01, !dbg !35
  %262 = fmul float %246, %246, !dbg !36
  %263 = fmul float %248, %248, !dbg !36
  %264 = fmul float %250, %250, !dbg !36
  %265 = fmul float %252, %252, !dbg !36
  %266 = fmul float %254, %254, !dbg !36
  %267 = fmul float %256, %256, !dbg !36
  %268 = fmul float %258, %258, !dbg !36
  %269 = fmul float %260, %260, !dbg !36
  %270 = fmul float %262, %246, !dbg !37
  %271 = fmul float %263, %248, !dbg !37
  %272 = fmul float %264, %250, !dbg !37
  %273 = fmul float %265, %252, !dbg !37
  %274 = fmul float %266, %254, !dbg !37
  %275 = fmul float %267, %256, !dbg !37
  %276 = fmul float %268, %258, !dbg !37
  %277 = fmul float %269, %260, !dbg !37
  %278 = fmul float %261, %270, !dbg !38
  %279 = fmul float %261, %271, !dbg !38
  %280 = fmul float %261, %272, !dbg !38
  %281 = fmul float %261, %273, !dbg !38
  %282 = fmul float %261, %274, !dbg !38
  %283 = fmul float %261, %275, !dbg !38
  %284 = fmul float %261, %276, !dbg !38
  %285 = fmul float %261, %277, !dbg !38
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float 2.304000e+03) #3, !dbg !39
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %279, float 2.304000e+03) #3, !dbg !39
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float 2.304000e+03) #3, !dbg !39
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %281, float 2.304000e+03) #3, !dbg !39
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %282, float 2.304000e+03) #3, !dbg !39
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float 2.304000e+03) #3, !dbg !39
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float 2.304000e+03) #3, !dbg !39
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float 2.304000e+03) #3, !dbg !39
  %294 = zext nneg i32 %13 to i64
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i64 %294
  %296 = zext nneg i32 %15 to i64
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i64 %296
  %298 = zext nneg i32 %191 to i64
  %299 = getelementptr float, ptr addrspace(3) @global_smem, i64 %298
  %300 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %297, i64 0, i64 1
  %301 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %297, i64 0, i64 2
  %302 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %297, i64 0, i64 3
  %303 = insertelement <8 x float> poison, float %286, i64 0, !dbg !40
  %304 = shufflevector <8 x float> %303, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !40
  %305 = insertelement <8 x float> poison, float %246, i64 0, !dbg !41
  %306 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !41
  br label %307, !dbg !42

307:                                              ; preds = %11, %307
  %308 = phi i1 [ true, %11 ], [ false, %307 ]
  %309 = phi i32 [ 0, %11 ], [ 2048, %307 ]
  %310 = phi <8 x float> [ zeroinitializer, %11 ], [ %487, %307 ]
  %311 = or i32 %309, %13, !dbg !43
  %312 = or i32 %309, %14, !dbg !43
  %313 = or i32 %309, %15, !dbg !43
  %314 = or i32 %309, %191, !dbg !43
  %315 = icmp ult i32 %311, 2304, !dbg !44
  %316 = icmp ult i32 %313, 2304, !dbg !44
  %317 = icmp ult i32 %314, 2304, !dbg !44
  %318 = add i32 %311, %17, !dbg !45
  %319 = add i32 %312, %17, !dbg !45
  %320 = add i32 %313, %17, !dbg !45
  %321 = add i32 %314, %17, !dbg !45
  %322 = sext i32 %318 to i64, !dbg !46
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !46
  %324 = sext i32 %319 to i64, !dbg !46
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !46
  %326 = sext i32 %320 to i64, !dbg !46
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !46
  %328 = sext i32 %321 to i64, !dbg !46
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !46
  %330 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %323, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315) #3, !dbg !47
  %331 = extractvalue { i32, i32, i32, i32 } %330, 0, !dbg !47
  %332 = extractvalue { i32, i32, i32, i32 } %330, 1, !dbg !47
  %333 = extractvalue { i32, i32, i32, i32 } %330, 2, !dbg !47
  %334 = extractvalue { i32, i32, i32, i32 } %330, 3, !dbg !47
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %325, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315) #3, !dbg !47
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !47
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !47
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !47
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !47
  %340 = getelementptr i16, ptr addrspace(1) %1, i64 %322, !dbg !48
  %341 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %340, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315) #3, !dbg !49
  %342 = extractvalue { i32, i32, i32, i32 } %341, 0, !dbg !49
  %343 = extractvalue { i32, i32, i32, i32 } %341, 1, !dbg !49
  %344 = extractvalue { i32, i32, i32, i32 } %341, 2, !dbg !49
  %345 = extractvalue { i32, i32, i32, i32 } %341, 3, !dbg !49
  %346 = trunc i32 %342 to i16, !dbg !49
  %extelt.offset6 = lshr i32 %342, 16, !dbg !49
  %347 = trunc i32 %extelt.offset6 to i16, !dbg !49
  %348 = trunc i32 %343 to i16, !dbg !49
  %extelt.offset7 = lshr i32 %343, 16, !dbg !49
  %349 = trunc i32 %extelt.offset7 to i16, !dbg !49
  %350 = trunc i32 %344 to i16, !dbg !49
  %extelt.offset8 = lshr i32 %344, 16, !dbg !49
  %351 = trunc i32 %extelt.offset8 to i16, !dbg !49
  %352 = trunc i32 %345 to i16, !dbg !49
  %extelt.offset9 = lshr i32 %345, 16, !dbg !49
  %353 = trunc i32 %extelt.offset9 to i16, !dbg !49
  %354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #3, !dbg !50
  %355 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %347) #3, !dbg !50
  %356 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %348) #3, !dbg !50
  %357 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %349) #3, !dbg !50
  %358 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %350) #3, !dbg !50
  %359 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %351) #3, !dbg !50
  %360 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %352) #3, !dbg !50
  %361 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %353) #3, !dbg !50
  %362 = zext nneg i32 %311 to i64, !dbg !51
  %363 = getelementptr float, ptr addrspace(1) %2, i64 %362, !dbg !51
  %364 = zext nneg i32 %312 to i64, !dbg !51
  %365 = getelementptr float, ptr addrspace(1) %2, i64 %364, !dbg !51
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %363, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315) #3, !dbg !52
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !52
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !52
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !52
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !52
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %365, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315) #3, !dbg !52
  %372 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !52
  %373 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !52
  %374 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !52
  %375 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !52
  %376 = getelementptr float, ptr addrspace(1) %3, i64 %322, !dbg !53
  %377 = getelementptr float, ptr addrspace(1) %3, i64 %324, !dbg !53
  %378 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %376, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315) #3, !dbg !54
  %379 = extractvalue { i32, i32, i32, i32 } %378, 0, !dbg !54
  %380 = extractvalue { i32, i32, i32, i32 } %378, 1, !dbg !54
  %381 = extractvalue { i32, i32, i32, i32 } %378, 2, !dbg !54
  %382 = extractvalue { i32, i32, i32, i32 } %378, 3, !dbg !54
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %377, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315) #3, !dbg !54
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !54
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !54
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !54
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !54
  %388 = getelementptr float, ptr addrspace(1) %5, i64 %362, !dbg !55
  %389 = getelementptr float, ptr addrspace(1) %5, i64 %364, !dbg !55
  %390 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %388, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315) #3, !dbg !56
  %391 = extractvalue { i32, i32, i32, i32 } %390, 0, !dbg !56
  %392 = extractvalue { i32, i32, i32, i32 } %390, 1, !dbg !56
  %393 = extractvalue { i32, i32, i32, i32 } %390, 2, !dbg !56
  %394 = extractvalue { i32, i32, i32, i32 } %390, 3, !dbg !56
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %389, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315) #3, !dbg !56
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !56
  %397 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !56
  %398 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !56
  %399 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !56
  %400 = getelementptr i16, ptr addrspace(1) %6, i64 %322, !dbg !57
  %401 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %400, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315, i32 0, i1 %315) #3, !dbg !58
  %402 = extractvalue { i32, i32, i32, i32 } %401, 0, !dbg !58
  %403 = extractvalue { i32, i32, i32, i32 } %401, 1, !dbg !58
  %404 = extractvalue { i32, i32, i32, i32 } %401, 2, !dbg !58
  %405 = extractvalue { i32, i32, i32, i32 } %401, 3, !dbg !58
  %406 = trunc i32 %402 to i16, !dbg !58
  %extelt.offset10 = lshr i32 %402, 16, !dbg !58
  %407 = trunc i32 %extelt.offset10 to i16, !dbg !58
  %408 = trunc i32 %403 to i16, !dbg !58
  %extelt.offset11 = lshr i32 %403, 16, !dbg !58
  %409 = trunc i32 %extelt.offset11 to i16, !dbg !58
  %410 = trunc i32 %404 to i16, !dbg !58
  %extelt.offset12 = lshr i32 %404, 16, !dbg !58
  %411 = trunc i32 %extelt.offset12 to i16, !dbg !58
  %412 = trunc i32 %405 to i16, !dbg !58
  %extelt.offset13 = lshr i32 %405, 16, !dbg !58
  %413 = trunc i32 %extelt.offset13 to i16, !dbg !58
  %414 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %406) #3, !dbg !59
  %415 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %407) #3, !dbg !59
  %416 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %408) #3, !dbg !59
  %417 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %409) #3, !dbg !59
  %418 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %410) #3, !dbg !59
  %419 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %411) #3, !dbg !59
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %412) #3, !dbg !59
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %413) #3, !dbg !59
  %422 = insertelement <8 x i32> poison, i32 %331, i64 0, !dbg !47
  %423 = insertelement <8 x i32> %422, i32 %332, i64 1, !dbg !47
  %424 = insertelement <8 x i32> %423, i32 %333, i64 2, !dbg !47
  %425 = insertelement <8 x i32> %424, i32 %334, i64 3, !dbg !47
  %426 = insertelement <8 x i32> %425, i32 %336, i64 4, !dbg !47
  %427 = insertelement <8 x i32> %426, i32 %337, i64 5, !dbg !47
  %428 = insertelement <8 x i32> %427, i32 %338, i64 6, !dbg !47
  %429 = insertelement <8 x i32> %428, i32 %339, i64 7, !dbg !47
  %430 = bitcast <8 x i32> %429 to <8 x float>, !dbg !47
  %431 = insertelement <8 x i32> poison, i32 %367, i64 0, !dbg !52
  %432 = insertelement <8 x i32> %431, i32 %368, i64 1, !dbg !52
  %433 = insertelement <8 x i32> %432, i32 %369, i64 2, !dbg !52
  %434 = insertelement <8 x i32> %433, i32 %370, i64 3, !dbg !52
  %435 = insertelement <8 x i32> %434, i32 %372, i64 4, !dbg !52
  %436 = insertelement <8 x i32> %435, i32 %373, i64 5, !dbg !52
  %437 = insertelement <8 x i32> %436, i32 %374, i64 6, !dbg !52
  %438 = insertelement <8 x i32> %437, i32 %375, i64 7, !dbg !52
  %439 = bitcast <8 x i32> %438 to <8 x float>, !dbg !52
  %440 = insertelement <8 x i32> poison, i32 %379, i64 0, !dbg !54
  %441 = insertelement <8 x i32> %440, i32 %380, i64 1, !dbg !54
  %442 = insertelement <8 x i32> %441, i32 %381, i64 2, !dbg !54
  %443 = insertelement <8 x i32> %442, i32 %382, i64 3, !dbg !54
  %444 = insertelement <8 x i32> %443, i32 %384, i64 4, !dbg !54
  %445 = insertelement <8 x i32> %444, i32 %385, i64 5, !dbg !54
  %446 = insertelement <8 x i32> %445, i32 %386, i64 6, !dbg !54
  %447 = insertelement <8 x i32> %446, i32 %387, i64 7, !dbg !54
  %448 = bitcast <8 x i32> %447 to <8 x float>, !dbg !54
  %449 = insertelement <8 x i32> poison, i32 %391, i64 0, !dbg !56
  %450 = insertelement <8 x i32> %449, i32 %392, i64 1, !dbg !56
  %451 = insertelement <8 x i32> %450, i32 %393, i64 2, !dbg !56
  %452 = insertelement <8 x i32> %451, i32 %394, i64 3, !dbg !56
  %453 = insertelement <8 x i32> %452, i32 %396, i64 4, !dbg !56
  %454 = insertelement <8 x i32> %453, i32 %397, i64 5, !dbg !56
  %455 = insertelement <8 x i32> %454, i32 %398, i64 6, !dbg !56
  %456 = insertelement <8 x i32> %455, i32 %399, i64 7, !dbg !56
  %457 = bitcast <8 x i32> %456 to <8 x float>, !dbg !56
  %458 = fadd <8 x float> %439, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !60
  %459 = insertelement <8 x float> poison, float %354, i64 0, !dbg !61
  %460 = insertelement <8 x float> %459, float %355, i64 1, !dbg !61
  %461 = insertelement <8 x float> %460, float %356, i64 2, !dbg !61
  %462 = insertelement <8 x float> %461, float %357, i64 3, !dbg !61
  %463 = insertelement <8 x float> %462, float %358, i64 4, !dbg !61
  %464 = insertelement <8 x float> %463, float %359, i64 5, !dbg !61
  %465 = insertelement <8 x float> %464, float %360, i64 6, !dbg !61
  %466 = insertelement <8 x float> %465, float %361, i64 7, !dbg !61
  %467 = fmul <8 x float> %466, %458, !dbg !61
  %468 = fmul <8 x float> %467, %306, !dbg !41
  %469 = fadd <8 x float> %468, %430, !dbg !62
  %470 = fmul <8 x float> %304, %448, !dbg !40
  %471 = fadd <8 x float> %470, %469, !dbg !63
  %472 = fadd <8 x float> %470, %471, !dbg !64
  %473 = fadd <8 x float> %457, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !65
  %474 = fmul <8 x float> %473, %472, !dbg !66
  %475 = insertelement <8 x float> poison, float %414, i64 0, !dbg !67
  %476 = insertelement <8 x float> %475, float %415, i64 1, !dbg !67
  %477 = insertelement <8 x float> %476, float %416, i64 2, !dbg !67
  %478 = insertelement <8 x float> %477, float %417, i64 3, !dbg !67
  %479 = insertelement <8 x float> %478, float %418, i64 4, !dbg !67
  %480 = insertelement <8 x float> %479, float %419, i64 5, !dbg !67
  %481 = insertelement <8 x float> %480, float %420, i64 6, !dbg !67
  %482 = insertelement <8 x float> %481, float %421, i64 7, !dbg !67
  %483 = fmul <8 x float> %482, %474, !dbg !67
  %484 = insertelement <8 x i1> poison, i1 %315, i64 0, !dbg !68
  %485 = shufflevector <8 x i1> %484, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !68
  %486 = select <8 x i1> %485, <8 x float> %483, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !68
  %487 = fadd <8 x float> %310, %486, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  store <8 x float> %472, ptr addrspace(3) %295, align 32, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %488 = load <4 x i32>, ptr addrspace(3) %299, align 16, !dbg !69
  %.extract = load i32, ptr addrspace(3) %297, align 16, !dbg !69
  %.extract15 = load i32, ptr addrspace(3) %300, align 4, !dbg !69
  %.extract17 = load i32, ptr addrspace(3) %301, align 8, !dbg !69
  %.extract19 = load i32, ptr addrspace(3) %302, align 4, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract17, i32 %.extract19, ptr addrspace(1) %327, i1 %316) #3, !dbg !69
  %.extract21 = extractelement <4 x i32> %488, i64 0, !dbg !69
  %.extract23 = extractelement <4 x i32> %488, i64 1, !dbg !69
  %.extract25 = extractelement <4 x i32> %488, i64 2, !dbg !69
  %.extract27 = extractelement <4 x i32> %488, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract23, i32 %.extract25, i32 %.extract27, ptr addrspace(1) %329, i1 %317) #3, !dbg !69
  br i1 %308, label %307, label %489, !dbg !42

489:                                              ; preds = %307
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %shift84 = shufflevector <8 x float> %487, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %490 = fadd <8 x float> %487, %shift84, !dbg !72
  %shift85 = shufflevector <8 x float> %487, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %491 = fadd <8 x float> %shift85, %490, !dbg !72
  %shift86 = shufflevector <8 x float> %487, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %492 = fadd <8 x float> %shift86, %491, !dbg !72
  %shift87 = shufflevector <8 x float> %487, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %493 = fadd <8 x float> %shift87, %492, !dbg !72
  %shift88 = shufflevector <8 x float> %487, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %494 = fadd <8 x float> %shift88, %493, !dbg !72
  %shift89 = shufflevector <8 x float> %487, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %495 = fadd <8 x float> %shift89, %494, !dbg !72
  %shift90 = shufflevector <8 x float> %487, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %496 = fadd <8 x float> %shift90, %495, !dbg !72
  %497 = extractelement <8 x float> %496, i64 0, !dbg !72
  %498 = bitcast float %497 to i32, !dbg !70
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 16, i32 31), !dbg !70
  %500 = bitcast i32 %499 to float, !dbg !70
  %501 = fadd float %497, %500, !dbg !72
  %502 = bitcast float %501 to i32, !dbg !70
  %503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 8, i32 31), !dbg !70
  %504 = bitcast i32 %503 to float, !dbg !70
  %505 = fadd float %501, %504, !dbg !72
  %506 = bitcast float %505 to i32, !dbg !70
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 4, i32 31), !dbg !70
  %508 = bitcast i32 %507 to float, !dbg !70
  %509 = fadd float %505, %508, !dbg !72
  %510 = bitcast float %509 to i32, !dbg !70
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 2, i32 31), !dbg !70
  %512 = bitcast i32 %511 to float, !dbg !70
  %513 = fadd float %509, %512, !dbg !72
  %514 = bitcast float %513 to i32, !dbg !70
  %515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %514, i32 1, i32 31), !dbg !70
  %516 = bitcast i32 %515 to float, !dbg !70
  %517 = fadd float %513, %516, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, float %517, i1 %220) #3, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %518 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %225, i1 %223) #3, !dbg !70
  %519 = bitcast float %518 to i32, !dbg !70
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 4, i32 31), !dbg !70
  %521 = bitcast i32 %520 to float, !dbg !70
  %522 = fadd float %518, %521, !dbg !72
  %523 = bitcast float %522 to i32, !dbg !70
  %524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %523, i32 2, i32 31), !dbg !70
  %525 = bitcast i32 %524 to float, !dbg !70
  %526 = fadd float %522, %525, !dbg !72
  %527 = bitcast float %526 to i32, !dbg !70
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 1, i32 31), !dbg !70
  %529 = bitcast i32 %528 to float, !dbg !70
  %530 = fadd float %526, %529, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, float %530, i1 %241) #3, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %531 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !70
  %532 = getelementptr float, ptr addrspace(1) %7, i64 %243, !dbg !75
  %533 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 true) #3, !dbg !76
  %534 = bitcast i32 %533 to float, !dbg !76
  %535 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 true) #3, !dbg !76
  %536 = bitcast i32 %535 to float, !dbg !76
  %537 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 true) #3, !dbg !76
  %538 = bitcast i32 %537 to float, !dbg !76
  %539 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 true) #3, !dbg !76
  %540 = bitcast i32 %539 to float, !dbg !76
  %541 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 true) #3, !dbg !76
  %542 = bitcast i32 %541 to float, !dbg !76
  %543 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 true) #3, !dbg !76
  %544 = bitcast i32 %543 to float, !dbg !76
  %545 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 true) #3, !dbg !76
  %546 = bitcast i32 %545 to float, !dbg !76
  %547 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 true) #3, !dbg !76
  %548 = bitcast i32 %547 to float, !dbg !76
  %549 = fmul float %531, -5.000000e-01, !dbg !77
  %550 = fmul float %534, %534, !dbg !78
  %551 = fmul float %536, %536, !dbg !78
  %552 = fmul float %538, %538, !dbg !78
  %553 = fmul float %540, %540, !dbg !78
  %554 = fmul float %542, %542, !dbg !78
  %555 = fmul float %544, %544, !dbg !78
  %556 = fmul float %546, %546, !dbg !78
  %557 = fmul float %548, %548, !dbg !78
  %558 = fmul float %550, %534, !dbg !79
  %559 = fmul float %551, %536, !dbg !79
  %560 = fmul float %552, %538, !dbg !79
  %561 = fmul float %553, %540, !dbg !79
  %562 = fmul float %554, %542, !dbg !79
  %563 = fmul float %555, %544, !dbg !79
  %564 = fmul float %556, %546, !dbg !79
  %565 = fmul float %557, %548, !dbg !79
  %566 = fmul float %549, %558, !dbg !80
  %567 = fmul float %549, %559, !dbg !80
  %568 = fmul float %549, %560, !dbg !80
  %569 = fmul float %549, %561, !dbg !80
  %570 = fmul float %549, %562, !dbg !80
  %571 = fmul float %549, %563, !dbg !80
  %572 = fmul float %549, %564, !dbg !80
  %573 = fmul float %549, %565, !dbg !80
  %574 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %566, float 2.304000e+03) #3, !dbg !81
  %575 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %567, float 2.304000e+03) #3, !dbg !81
  %576 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %568, float 2.304000e+03) #3, !dbg !81
  %577 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %569, float 2.304000e+03) #3, !dbg !81
  %578 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %570, float 2.304000e+03) #3, !dbg !81
  %579 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %571, float 2.304000e+03) #3, !dbg !81
  %580 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %572, float 2.304000e+03) #3, !dbg !81
  %581 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %573, float 2.304000e+03) #3, !dbg !81
  br label %582, !dbg !82

582:                                              ; preds = %489, %582
  %583 = phi i1 [ true, %489 ], [ false, %582 ]
  %584 = phi i32 [ 0, %489 ], [ 2048, %582 ]
  %585 = or i32 %584, %13, !dbg !83
  %586 = or i32 %584, %14, !dbg !83
  %587 = icmp ult i32 %585, 2304, !dbg !84
  %588 = add i32 %585, %17, !dbg !85
  %589 = add i32 %586, %17, !dbg !85
  %590 = sext i32 %588 to i64, !dbg !86
  %591 = getelementptr float, ptr addrspace(1) %0, i64 %590, !dbg !86
  %592 = sext i32 %589 to i64, !dbg !86
  %593 = getelementptr float, ptr addrspace(1) %0, i64 %592, !dbg !86
  %594 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %591, i1 %587, i32 0, i1 %587, i32 0, i1 %587, i32 0, i1 %587, i32 0, i1 %587) #3, !dbg !87
  %595 = extractvalue { i32, i32, i32, i32 } %594, 0, !dbg !87
  %596 = extractvalue { i32, i32, i32, i32 } %594, 1, !dbg !87
  %597 = extractvalue { i32, i32, i32, i32 } %594, 2, !dbg !87
  %598 = extractvalue { i32, i32, i32, i32 } %594, 3, !dbg !87
  %599 = bitcast i32 %595 to float, !dbg !87
  %600 = bitcast i32 %596 to float, !dbg !87
  %601 = bitcast i32 %597 to float, !dbg !87
  %602 = bitcast i32 %598 to float, !dbg !87
  %603 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %593, i1 %587, i32 0, i1 %587, i32 0, i1 %587, i32 0, i1 %587, i32 0, i1 %587) #3, !dbg !87
  %604 = extractvalue { i32, i32, i32, i32 } %603, 0, !dbg !87
  %605 = extractvalue { i32, i32, i32, i32 } %603, 1, !dbg !87
  %606 = extractvalue { i32, i32, i32, i32 } %603, 2, !dbg !87
  %607 = extractvalue { i32, i32, i32, i32 } %603, 3, !dbg !87
  %608 = bitcast i32 %604 to float, !dbg !87
  %609 = bitcast i32 %605 to float, !dbg !87
  %610 = bitcast i32 %606 to float, !dbg !87
  %611 = bitcast i32 %607 to float, !dbg !87
  %612 = zext nneg i32 %585 to i64, !dbg !88
  %613 = getelementptr float, ptr addrspace(1) %5, i64 %612, !dbg !88
  %614 = zext nneg i32 %586 to i64, !dbg !88
  %615 = getelementptr float, ptr addrspace(1) %5, i64 %614, !dbg !88
  %616 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %613, i1 %587, i32 0, i1 %587, i32 0, i1 %587, i32 0, i1 %587, i32 0, i1 %587) #3, !dbg !89
  %617 = extractvalue { i32, i32, i32, i32 } %616, 0, !dbg !89
  %618 = extractvalue { i32, i32, i32, i32 } %616, 1, !dbg !89
  %619 = extractvalue { i32, i32, i32, i32 } %616, 2, !dbg !89
  %620 = extractvalue { i32, i32, i32, i32 } %616, 3, !dbg !89
  %621 = bitcast i32 %617 to float, !dbg !89
  %622 = bitcast i32 %618 to float, !dbg !89
  %623 = bitcast i32 %619 to float, !dbg !89
  %624 = bitcast i32 %620 to float, !dbg !89
  %625 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %615, i1 %587, i32 0, i1 %587, i32 0, i1 %587, i32 0, i1 %587, i32 0, i1 %587) #3, !dbg !89
  %626 = extractvalue { i32, i32, i32, i32 } %625, 0, !dbg !89
  %627 = extractvalue { i32, i32, i32, i32 } %625, 1, !dbg !89
  %628 = extractvalue { i32, i32, i32, i32 } %625, 2, !dbg !89
  %629 = extractvalue { i32, i32, i32, i32 } %625, 3, !dbg !89
  %630 = bitcast i32 %626 to float, !dbg !89
  %631 = bitcast i32 %627 to float, !dbg !89
  %632 = bitcast i32 %628 to float, !dbg !89
  %633 = bitcast i32 %629 to float, !dbg !89
  %634 = getelementptr i16, ptr addrspace(1) %6, i64 %590, !dbg !90
  %635 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %634, i1 %587, i32 0, i1 %587, i32 0, i1 %587, i32 0, i1 %587, i32 0, i1 %587) #3, !dbg !91
  %636 = extractvalue { i32, i32, i32, i32 } %635, 0, !dbg !91
  %637 = extractvalue { i32, i32, i32, i32 } %635, 1, !dbg !91
  %638 = extractvalue { i32, i32, i32, i32 } %635, 2, !dbg !91
  %639 = extractvalue { i32, i32, i32, i32 } %635, 3, !dbg !91
  %640 = trunc i32 %636 to i16, !dbg !91
  %extelt.offset = lshr i32 %636, 16, !dbg !91
  %641 = trunc i32 %extelt.offset to i16, !dbg !91
  %642 = trunc i32 %637 to i16, !dbg !91
  %extelt.offset3 = lshr i32 %637, 16, !dbg !91
  %643 = trunc i32 %extelt.offset3 to i16, !dbg !91
  %644 = trunc i32 %638 to i16, !dbg !91
  %extelt.offset4 = lshr i32 %638, 16, !dbg !91
  %645 = trunc i32 %extelt.offset4 to i16, !dbg !91
  %646 = trunc i32 %639 to i16, !dbg !91
  %extelt.offset5 = lshr i32 %639, 16, !dbg !91
  %647 = trunc i32 %extelt.offset5 to i16, !dbg !91
  %648 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %640) #3, !dbg !92
  %649 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %641) #3, !dbg !92
  %650 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %642) #3, !dbg !92
  %651 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %643) #3, !dbg !92
  %652 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %644) #3, !dbg !92
  %653 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %645) #3, !dbg !92
  %654 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %646) #3, !dbg !92
  %655 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %647) #3, !dbg !92
  %656 = fadd float %621, 1.000000e+00, !dbg !93
  %657 = fadd float %622, 1.000000e+00, !dbg !93
  %658 = fadd float %623, 1.000000e+00, !dbg !93
  %659 = fadd float %624, 1.000000e+00, !dbg !93
  %660 = fadd float %630, 1.000000e+00, !dbg !93
  %661 = fadd float %631, 1.000000e+00, !dbg !93
  %662 = fadd float %632, 1.000000e+00, !dbg !93
  %663 = fadd float %633, 1.000000e+00, !dbg !93
  %664 = fmul float %656, %599, !dbg !94
  %665 = fmul float %657, %600, !dbg !94
  %666 = fmul float %658, %601, !dbg !94
  %667 = fmul float %659, %602, !dbg !94
  %668 = fmul float %660, %608, !dbg !94
  %669 = fmul float %661, %609, !dbg !94
  %670 = fmul float %662, %610, !dbg !94
  %671 = fmul float %663, %611, !dbg !94
  %672 = fmul float %664, %534, !dbg !95
  %673 = fmul float %665, %534, !dbg !95
  %674 = fmul float %666, %534, !dbg !95
  %675 = fmul float %667, %534, !dbg !95
  %676 = fmul float %668, %534, !dbg !95
  %677 = fmul float %669, %534, !dbg !95
  %678 = fmul float %670, %534, !dbg !95
  %679 = fmul float %671, %534, !dbg !95
  %680 = fmul float %574, %648, !dbg !96
  %681 = fmul float %574, %649, !dbg !96
  %682 = fmul float %574, %650, !dbg !96
  %683 = fmul float %574, %651, !dbg !96
  %684 = fmul float %574, %652, !dbg !96
  %685 = fmul float %574, %653, !dbg !96
  %686 = fmul float %574, %654, !dbg !96
  %687 = fmul float %574, %655, !dbg !96
  %688 = fadd float %680, %672, !dbg !97
  %689 = fadd float %673, %681, !dbg !97
  %690 = fadd float %674, %682, !dbg !97
  %691 = fadd float %675, %683, !dbg !97
  %692 = fadd float %676, %684, !dbg !97
  %693 = fadd float %677, %685, !dbg !97
  %694 = fadd float %678, %686, !dbg !97
  %695 = fadd float %679, %687, !dbg !97
  %696 = fadd float %680, %688, !dbg !98
  %697 = fadd float %681, %689, !dbg !98
  %698 = fadd float %682, %690, !dbg !98
  %699 = fadd float %683, %691, !dbg !98
  %700 = fadd float %684, %692, !dbg !98
  %701 = fadd float %685, %693, !dbg !98
  %702 = fadd float %686, %694, !dbg !98
  %703 = fadd float %687, %695, !dbg !98
  %704 = getelementptr i16, ptr addrspace(1) %8, i64 %590, !dbg !99
  %705 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %696) #3, !dbg !100
  %706 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %697) #3, !dbg !100
  %707 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %698) #3, !dbg !100
  %708 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %699) #3, !dbg !100
  %709 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %700) #3, !dbg !100
  %710 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %701) #3, !dbg !100
  %711 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %702) #3, !dbg !100
  %712 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %703) #3, !dbg !100
  %713 = insertelement <2 x i16> undef, i16 %705, i64 0, !dbg !100
  %714 = insertelement <2 x i16> %713, i16 %706, i64 1, !dbg !100
  %715 = bitcast <2 x i16> %714 to i32, !dbg !100
  %716 = insertelement <2 x i16> undef, i16 %707, i64 0, !dbg !100
  %717 = insertelement <2 x i16> %716, i16 %708, i64 1, !dbg !100
  %718 = bitcast <2 x i16> %717 to i32, !dbg !100
  %719 = insertelement <2 x i16> undef, i16 %709, i64 0, !dbg !100
  %720 = insertelement <2 x i16> %719, i16 %710, i64 1, !dbg !100
  %721 = bitcast <2 x i16> %720 to i32, !dbg !100
  %722 = insertelement <2 x i16> undef, i16 %711, i64 0, !dbg !100
  %723 = insertelement <2 x i16> %722, i16 %712, i64 1, !dbg !100
  %724 = bitcast <2 x i16> %723 to i32, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %715, i32 %718, i32 %721, i32 %724, ptr addrspace(1) %704, i1 %587) #3, !dbg !100
  br i1 %583, label %582, label %725, !dbg !82

725:                                              ; preds = %582
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c4c7vevur5y3g5org5kuuvulisftjjitjxh56234z6qpy3c35heu.py", directory: "/tmp/torchinductor_zeus/4c")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9de10de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9de10de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9de10de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9de10de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 31, column: 45, scope: !5)
!11 = !DILocation(line: 31, column: 40, scope: !5)
!12 = !DILocation(line: 31, column: 34, scope: !5)
!13 = !DILocation(line: 31, column: 51, scope: !5)
!14 = !DILocation(line: 31, column: 102, scope: !5)
!15 = !DILocation(line: 32, column: 34, scope: !5)
!16 = !DILocation(line: 32, column: 39, scope: !5)
!17 = !DILocation(line: 33, column: 34, scope: !5)
!18 = !DILocation(line: 33, column: 51, scope: !5)
!19 = !DILocation(line: 36, column: 22, scope: !5)
!20 = !DILocation(line: 37, column: 22, scope: !5)
!21 = !DILocation(line: 38, column: 22, scope: !5)
!22 = !DILocation(line: 41, column: 39, scope: !5)
!23 = !DILocation(line: 28, column: 27, scope: !5)
!24 = !DILocation(line: 29, column: 25, scope: !5)
!25 = !DILocation(line: 233, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !5, file: !27, discriminator: 0)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 42, column: 25, scope: !26)
!31 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !32)
!32 = !DILocation(line: 42, column: 25, scope: !28)
!33 = !DILocation(line: 43, column: 31, scope: !5)
!34 = !DILocation(line: 43, column: 36, scope: !5)
!35 = !DILocation(line: 62, column: 23, scope: !5)
!36 = !DILocation(line: 63, column: 24, scope: !5)
!37 = !DILocation(line: 64, column: 24, scope: !5)
!38 = !DILocation(line: 65, column: 24, scope: !5)
!39 = !DILocation(line: 67, column: 24, scope: !5)
!40 = !DILocation(line: 68, column: 24, scope: !5)
!41 = !DILocation(line: 59, column: 24, scope: !5)
!42 = !DILocation(line: 45, column: 36, scope: !5)
!43 = !DILocation(line: 46, column: 27, scope: !5)
!44 = !DILocation(line: 47, column: 25, scope: !5)
!45 = !DILocation(line: 49, column: 45, scope: !5)
!46 = !DILocation(line: 49, column: 39, scope: !5)
!47 = !DILocation(line: 49, column: 56, scope: !5)
!48 = !DILocation(line: 50, column: 35, scope: !5)
!49 = !DILocation(line: 50, column: 52, scope: !5)
!50 = !DILocation(line: 50, column: 104, scope: !5)
!51 = !DILocation(line: 51, column: 35, scope: !5)
!52 = !DILocation(line: 51, column: 40, scope: !5)
!53 = !DILocation(line: 52, column: 35, scope: !5)
!54 = !DILocation(line: 52, column: 52, scope: !5)
!55 = !DILocation(line: 53, column: 35, scope: !5)
!56 = !DILocation(line: 53, column: 40, scope: !5)
!57 = !DILocation(line: 54, column: 35, scope: !5)
!58 = !DILocation(line: 54, column: 52, scope: !5)
!59 = !DILocation(line: 54, column: 103, scope: !5)
!60 = !DILocation(line: 57, column: 24, scope: !5)
!61 = !DILocation(line: 58, column: 24, scope: !5)
!62 = !DILocation(line: 60, column: 24, scope: !5)
!63 = !DILocation(line: 69, column: 24, scope: !5)
!64 = !DILocation(line: 70, column: 24, scope: !5)
!65 = !DILocation(line: 71, column: 24, scope: !5)
!66 = !DILocation(line: 72, column: 24, scope: !5)
!67 = !DILocation(line: 74, column: 24, scope: !5)
!68 = !DILocation(line: 77, column: 40, scope: !5)
!69 = !DILocation(line: 78, column: 56, scope: !5)
!70 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !71)
!71 = !DILocation(line: 79, column: 27, scope: !28)
!72 = !DILocation(line: 233, column: 15, scope: !26, inlinedAt: !73)
!73 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !74)
!74 = !DILocation(line: 79, column: 27, scope: !26)
!75 = !DILocation(line: 80, column: 31, scope: !5)
!76 = !DILocation(line: 80, column: 36, scope: !5)
!77 = !DILocation(line: 93, column: 24, scope: !5)
!78 = !DILocation(line: 94, column: 24, scope: !5)
!79 = !DILocation(line: 95, column: 24, scope: !5)
!80 = !DILocation(line: 96, column: 24, scope: !5)
!81 = !DILocation(line: 98, column: 24, scope: !5)
!82 = !DILocation(line: 81, column: 36, scope: !5)
!83 = !DILocation(line: 82, column: 27, scope: !5)
!84 = !DILocation(line: 83, column: 25, scope: !5)
!85 = !DILocation(line: 85, column: 45, scope: !5)
!86 = !DILocation(line: 85, column: 39, scope: !5)
!87 = !DILocation(line: 85, column: 56, scope: !5)
!88 = !DILocation(line: 86, column: 35, scope: !5)
!89 = !DILocation(line: 86, column: 40, scope: !5)
!90 = !DILocation(line: 87, column: 35, scope: !5)
!91 = !DILocation(line: 87, column: 52, scope: !5)
!92 = !DILocation(line: 87, column: 104, scope: !5)
!93 = !DILocation(line: 89, column: 24, scope: !5)
!94 = !DILocation(line: 90, column: 24, scope: !5)
!95 = !DILocation(line: 91, column: 24, scope: !5)
!96 = !DILocation(line: 100, column: 24, scope: !5)
!97 = !DILocation(line: 101, column: 24, scope: !5)
!98 = !DILocation(line: 102, column: 24, scope: !5)
!99 = !DILocation(line: 104, column: 29, scope: !5)
!100 = !DILocation(line: 104, column: 53, scope: !5)
!101 = !DILocation(line: 81, column: 4, scope: !5)
