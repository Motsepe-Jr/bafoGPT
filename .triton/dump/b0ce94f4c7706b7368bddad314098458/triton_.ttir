module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9de10de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_1 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_3 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %3 = arith.muli %0, %c2304_i32 : i32
    %4 = tt.splat %3 : (i32) -> tensor<1x2048xi32>
    %5 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %6 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %7 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %8 = scf.for %arg11 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg12 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %48 = tt.splat %arg11 : (i32) -> tensor<1x2048xi32>
      %49 = arith.addi %48, %2 : tensor<1x2048xi32>
      %50 = arith.cmpi slt, %49, %cst_3 : tensor<1x2048xi32>
      %51 = arith.addi %49, %4 : tensor<1x2048xi32>
      %52 = tt.addptr %5, %51 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %53 = tt.load %52, %50, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %54 = arith.extf %53 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %55 = tt.addptr %6, %49 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %56 = tt.load %55, %50, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %57 = tt.addptr %7, %51 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %58 = tt.load %57, %50, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %59 = arith.addf %56, %cst_2 : tensor<1x2048xf32>
      %60 = arith.mulf %54, %59 : tensor<1x2048xf32>
      %61 = arith.mulf %60, %58 : tensor<1x2048xf32>
      %62 = arith.addf %arg12, %61 : tensor<1x2048xf32>
      %63 = arith.select %50, %62, %arg12 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %63 : tensor<1x2048xf32>
    }
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32, %arg12: f32):
      %48 = arith.addf %arg11, %arg12 : f32
      tt.reduce.return %48 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %10 = tt.expand_dims %9 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %11 = tt.addptr %arg4, %0 : !tt.ptr<f32, 1>, i32
    %12 = tt.splat %11 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %13 = tt.load %12 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %14 = arith.muli %0, %c2304_i32 : i32
    %15 = tt.splat %14 : (i32) -> tensor<1x2048xi32>
    %16 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %17 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %18 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %19 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %20 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %21 = tt.splat %arg6 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %22 = tt.broadcast %13 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %23 = arith.mulf %10, %cst_1 : tensor<1x1xf32>
    %24 = arith.mulf %13, %13 : tensor<1x1xf32>
    %25 = arith.mulf %24, %13 : tensor<1x1xf32>
    %26 = arith.mulf %23, %25 : tensor<1x1xf32>
    %27 = arith.divf %26, %cst_0 : tensor<1x1xf32>
    %28 = tt.broadcast %27 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %29 = scf.for %arg11 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg12 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %48 = tt.splat %arg11 : (i32) -> tensor<1x2048xi32>
      %49 = arith.addi %48, %2 : tensor<1x2048xi32>
      %50 = arith.cmpi slt, %49, %cst_3 : tensor<1x2048xi32>
      %51 = arith.addi %49, %15 : tensor<1x2048xi32>
      %52 = tt.addptr %16, %51 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %53 = tt.load %52, %50, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %54 = tt.addptr %17, %51 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %55 = tt.load %54, %50, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %56 = arith.extf %55 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %57 = tt.addptr %18, %49 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %58 = tt.load %57, %50, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %59 = tt.addptr %19, %51 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %60 = tt.load %59, %50, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %61 = tt.addptr %20, %49 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %62 = tt.load %61, %50, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %63 = tt.addptr %21, %51 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %64 = tt.load %63, %50, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %65 = arith.extf %64 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %66 = arith.addf %58, %cst_2 : tensor<1x2048xf32>
      %67 = arith.mulf %56, %66 : tensor<1x2048xf32>
      %68 = arith.mulf %67, %22 : tensor<1x2048xf32>
      %69 = arith.addf %53, %68 : tensor<1x2048xf32>
      %70 = arith.mulf %28, %60 : tensor<1x2048xf32>
      %71 = arith.addf %69, %70 : tensor<1x2048xf32>
      %72 = arith.addf %71, %70 : tensor<1x2048xf32>
      %73 = arith.addf %62, %cst_2 : tensor<1x2048xf32>
      %74 = arith.mulf %72, %73 : tensor<1x2048xf32>
      %75 = arith.mulf %74, %65 : tensor<1x2048xf32>
      %76 = arith.addf %arg12, %75 : tensor<1x2048xf32>
      %77 = arith.select %50, %76, %arg12 : tensor<1x2048xi1>, tensor<1x2048xf32>
      tt.store %52, %72, %50 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32>
      scf.yield %77 : tensor<1x2048xf32>
    }
    %30 = "tt.reduce"(%29) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32, %arg12: f32):
      %48 = arith.addf %arg11, %arg12 : f32
      tt.reduce.return %48 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %31 = tt.expand_dims %30 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %32 = tt.addptr %arg7, %0 : !tt.ptr<f32, 1>, i32
    %33 = tt.splat %32 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %34 = tt.load %33 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %35 = arith.muli %0, %c2304_i32 : i32
    %36 = tt.splat %35 : (i32) -> tensor<1x2048xi32>
    %37 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %38 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %39 = tt.splat %arg6 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %40 = tt.broadcast %34 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %41 = arith.mulf %31, %cst_1 : tensor<1x1xf32>
    %42 = arith.mulf %34, %34 : tensor<1x1xf32>
    %43 = arith.mulf %42, %34 : tensor<1x1xf32>
    %44 = arith.mulf %41, %43 : tensor<1x1xf32>
    %45 = arith.divf %44, %cst_0 : tensor<1x1xf32>
    %46 = tt.broadcast %45 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %47 = tt.splat %arg8 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg11 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %48 = tt.splat %arg11 : (i32) -> tensor<1x2048xi32>
      %49 = arith.addi %48, %2 : tensor<1x2048xi32>
      %50 = arith.cmpi slt, %49, %cst_3 : tensor<1x2048xi32>
      %51 = arith.addi %49, %36 : tensor<1x2048xi32>
      %52 = tt.addptr %37, %51 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %53 = tt.load %52, %50, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %54 = tt.addptr %38, %49 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %55 = tt.load %54, %50, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %56 = tt.addptr %39, %51 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %57 = tt.load %56, %50, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %58 = arith.extf %57 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %59 = arith.addf %55, %cst_2 : tensor<1x2048xf32>
      %60 = arith.mulf %53, %59 : tensor<1x2048xf32>
      %61 = arith.mulf %60, %40 : tensor<1x2048xf32>
      %62 = arith.mulf %46, %58 : tensor<1x2048xf32>
      %63 = arith.addf %61, %62 : tensor<1x2048xf32>
      %64 = arith.addf %63, %62 : tensor<1x2048xf32>
      %65 = tt.addptr %47, %51 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %66 = arith.truncf %64 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %65, %66, %50 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
