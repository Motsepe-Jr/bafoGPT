; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3de4de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = lshr i32 %6, 5, !dbg !10
  %urem = shl i32 %6, 2, !dbg !10
  %8 = and i32 %urem, 1020, !dbg !10
  %9 = or i32 %8, 1024, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %11 = mul i32 %10, 3584, !dbg !12
  %12 = add i32 %8, %11, !dbg !13
  %13 = add i32 %9, %11, !dbg !13
  %14 = sext i32 %12 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = sext i32 %13 to i64, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !14
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !15
  %28 = or i32 %8, 2048, !dbg !16
  %29 = or i32 %8, 3072, !dbg !16
  %30 = icmp ult i32 %29, 3584, !dbg !17
  %31 = add i32 %28, %11, !dbg !13
  %32 = add i32 %29, %11, !dbg !13
  %33 = sext i32 %31 to i64, !dbg !14
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !14
  %35 = sext i32 %32 to i64, !dbg !14
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !14
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !15
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !15
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !15
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #6, !dbg !15
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !15
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !15
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !15
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !15
  %47 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !15
  %48 = insertelement <2 x i32> %47, i32 %20, i64 1, !dbg !15
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !15
  %50 = fmul <2 x float> %49, %49, !dbg !18
  %51 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !15
  %52 = insertelement <2 x i32> %51, i32 %39, i64 1, !dbg !15
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !15
  %54 = fmul <2 x float> %53, %53, !dbg !18
  %55 = fadd <2 x float> %50, %54, !dbg !19
  %56 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !15
  %57 = insertelement <2 x i32> %56, i32 %21, i64 1, !dbg !15
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !15
  %59 = fmul <2 x float> %58, %58, !dbg !18
  %60 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !15
  %61 = insertelement <2 x i32> %60, i32 %40, i64 1, !dbg !15
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !15
  %63 = fmul <2 x float> %62, %62, !dbg !18
  %64 = fadd <2 x float> %59, %63, !dbg !19
  %65 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !15
  %66 = insertelement <2 x i32> %65, i32 %24, i64 1, !dbg !15
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !15
  %68 = fmul <2 x float> %67, %67, !dbg !18
  %69 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !15
  %70 = insertelement <2 x i32> %69, i32 %43, i64 1, !dbg !15
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !15
  %72 = fmul <2 x float> %71, %71, !dbg !18
  %73 = insertelement <2 x i1> poison, i1 %30, i64 0, !dbg !19
  %74 = shufflevector <2 x i1> %73, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !19
  %75 = select <2 x i1> %74, <2 x float> %72, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %76 = fadd <2 x float> %68, %75, !dbg !19
  %77 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !15
  %78 = insertelement <2 x i32> %77, i32 %26, i64 1, !dbg !15
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !15
  %80 = fmul <2 x float> %79, %79, !dbg !18
  %81 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !15
  %82 = insertelement <2 x i32> %81, i32 %45, i64 1, !dbg !15
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !15
  %84 = fmul <2 x float> %83, %83, !dbg !18
  %85 = select <2 x i1> %74, <2 x float> %84, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %86 = fadd <2 x float> %80, %85, !dbg !19
  %87 = and i32 %6, 31, !dbg !10
  %88 = and i32 %7, 7, !dbg !10
  %shift = shufflevector <2 x float> %55, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %89 = fadd <2 x float> %55, %shift, !dbg !20
  %shift18 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %90 = fadd <2 x float> %shift18, %89, !dbg !20
  %91 = fadd <2 x float> %64, %90, !dbg !20
  %shift19 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %92 = fadd <2 x float> %shift19, %91, !dbg !20
  %93 = fadd <2 x float> %76, %92, !dbg !20
  %shift20 = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %94 = fadd <2 x float> %shift20, %93, !dbg !20
  %95 = fadd <2 x float> %86, %94, !dbg !20
  %96 = extractelement <2 x float> %95, i64 0, !dbg !20
  %97 = bitcast float %96 to i32, !dbg !26
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 16, i32 31), !dbg !26
  %99 = bitcast i32 %98 to float, !dbg !26
  %100 = fadd float %96, %99, !dbg !20
  %101 = bitcast float %100 to i32, !dbg !26
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 8, i32 31), !dbg !26
  %103 = bitcast i32 %102 to float, !dbg !26
  %104 = fadd float %100, %103, !dbg !20
  %105 = bitcast float %104 to i32, !dbg !26
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !26
  %107 = bitcast i32 %106 to float, !dbg !26
  %108 = fadd float %104, %107, !dbg !20
  %109 = bitcast float %108 to i32, !dbg !26
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !26
  %111 = bitcast i32 %110 to float, !dbg !26
  %112 = fadd float %108, %111, !dbg !20
  %113 = bitcast float %112 to i32, !dbg !26
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !26
  %115 = bitcast i32 %114 to float, !dbg !26
  %116 = fadd float %112, %115, !dbg !20
  %117 = icmp eq i32 %87, 0, !dbg !26
  %118 = zext nneg i32 %88 to i64, !dbg !26
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i64 %118, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, float %116, i1 %117) #6, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %120 = icmp slt i32 %6, 8, !dbg !26
  %121 = sext i32 %6 to i64, !dbg !26
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i64 %121, !dbg !26
  %123 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %122, i1 %120) #6, !dbg !26
  %124 = bitcast float %123 to i32, !dbg !26
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 4, i32 31), !dbg !26
  %126 = bitcast i32 %125 to float, !dbg !26
  %127 = fadd float %123, %126, !dbg !20
  %128 = bitcast float %127 to i32, !dbg !26
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !26
  %130 = bitcast i32 %129 to float, !dbg !26
  %131 = fadd float %127, %130, !dbg !20
  %132 = bitcast float %131 to i32, !dbg !26
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !26
  %134 = bitcast i32 %133 to float, !dbg !26
  %135 = fadd float %131, %134, !dbg !20
  %136 = and i32 %6, 7, !dbg !26
  %137 = icmp eq i32 %136, 0, !dbg !26
  %138 = and i1 %120, %137, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, float %135, i1 %138) #6, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %139 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !26
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #6, !dbg !28
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #6, !dbg !28
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #6, !dbg !28
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #6, !dbg !28
  %144 = fadd float %140, 0x3EE4F8B580000000, !dbg !29
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !30
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !30
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !30
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !30
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !30
  %150 = bitcast i32 %146 to float, !dbg !30
  %151 = bitcast i32 %147 to float, !dbg !30
  %152 = bitcast i32 %148 to float, !dbg !30
  %153 = bitcast i32 %149 to float, !dbg !30
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !30
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !30
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !30
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !30
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !30
  %159 = bitcast i32 %155 to float, !dbg !30
  %160 = bitcast i32 %156 to float, !dbg !30
  %161 = bitcast i32 %157 to float, !dbg !30
  %162 = bitcast i32 %158 to float, !dbg !30
  %163 = zext nneg i32 %8 to i64, !dbg !31
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !31
  %165 = zext nneg i32 %9 to i64, !dbg !31
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !31
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %164, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !32
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !32
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !32
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !32
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !32
  %172 = bitcast i32 %168 to float, !dbg !32
  %173 = bitcast i32 %169 to float, !dbg !32
  %174 = bitcast i32 %170 to float, !dbg !32
  %175 = bitcast i32 %171 to float, !dbg !32
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %166, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !32
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !32
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !32
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !32
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !32
  %181 = bitcast i32 %177 to float, !dbg !32
  %182 = bitcast i32 %178 to float, !dbg !32
  %183 = bitcast i32 %179 to float, !dbg !32
  %184 = bitcast i32 %180 to float, !dbg !32
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %.not.i = icmp eq i32 %185, 0, !dbg !33
  br i1 %.not.i, label %188, label %186, !dbg !33

186:                                              ; preds = %5
  %187 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

188:                                              ; preds = %5
  %189 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %186, %188
  %.0.i = phi float [ %187, %186 ], [ %189, %188 ], !dbg !33
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %193 = fmul float %.0.i, %150, !dbg !34
  %194 = fmul float %.0.i, %151, !dbg !34
  %195 = fmul float %.0.i, %152, !dbg !34
  %196 = fmul float %.0.i, %153, !dbg !34
  %197 = fmul float %.0.i, %159, !dbg !34
  %198 = fmul float %.0.i, %160, !dbg !34
  %199 = fmul float %.0.i, %161, !dbg !34
  %200 = fmul float %.0.i, %162, !dbg !34
  %201 = fadd float %172, 1.000000e+00, !dbg !35
  %202 = fadd float %173, 1.000000e+00, !dbg !35
  %203 = fadd float %174, 1.000000e+00, !dbg !35
  %204 = fadd float %175, 1.000000e+00, !dbg !35
  %205 = fadd float %181, 1.000000e+00, !dbg !35
  %206 = fadd float %182, 1.000000e+00, !dbg !35
  %207 = fadd float %183, 1.000000e+00, !dbg !35
  %208 = fadd float %184, 1.000000e+00, !dbg !35
  %209 = fmul float %201, %193, !dbg !36
  %210 = fmul float %202, %194, !dbg !36
  %211 = fmul float %203, %195, !dbg !36
  %212 = fmul float %204, %196, !dbg !36
  %213 = fmul float %205, %197, !dbg !36
  %214 = fmul float %206, %198, !dbg !36
  %215 = fmul float %207, %199, !dbg !36
  %216 = fmul float %208, %200, !dbg !36
  %217 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !37
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !37
  %219 = bitcast float %209 to i32, !dbg !38
  %220 = bitcast float %210 to i32, !dbg !38
  %221 = bitcast float %211 to i32, !dbg !38
  %222 = bitcast float %212 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %220, i32 %221, i32 %222, ptr addrspace(1) %217, i1 true) #6, !dbg !38
  %223 = bitcast float %213 to i32, !dbg !38
  %224 = bitcast float %214 to i32, !dbg !38
  %225 = bitcast float %215 to i32, !dbg !38
  %226 = bitcast float %216 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %223, i32 %224, i32 %225, i32 %226, ptr addrspace(1) %218, i1 true) #6, !dbg !38
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !30
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #6, !dbg !30
  %229 = zext nneg i32 %28 to i64, !dbg !31
  %230 = getelementptr float, ptr addrspace(1) %1, i64 %229, !dbg !31
  %231 = zext nneg i32 %29 to i64, !dbg !31
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %231, !dbg !31
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %230, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !32
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %232, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #6, !dbg !32
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %.not.i.1 = icmp eq i32 %235, 0, !dbg !33
  br i1 %.not.i.1, label %238, label %236, !dbg !33

236:                                              ; preds = %__nv_rsqrtf.exit
  %237 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !33
  br label %__nv_rsqrtf.exit.1, !dbg !33

238:                                              ; preds = %__nv_rsqrtf.exit
  %239 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !33
  br label %__nv_rsqrtf.exit.1, !dbg !33

__nv_rsqrtf.exit.1:                               ; preds = %238, %236
  %.0.i.1 = phi float [ %237, %236 ], [ %239, %238 ], !dbg !33
  %240 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !32
  %241 = bitcast i32 %240 to float, !dbg !32
  %242 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !32
  %243 = bitcast i32 %242 to float, !dbg !32
  %244 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !32
  %245 = bitcast i32 %244 to float, !dbg !32
  %246 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !32
  %247 = bitcast i32 %246 to float, !dbg !32
  %248 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !32
  %249 = bitcast i32 %248 to float, !dbg !32
  %250 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !32
  %251 = bitcast i32 %250 to float, !dbg !32
  %252 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !32
  %253 = bitcast i32 %252 to float, !dbg !32
  %254 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !32
  %255 = bitcast i32 %254 to float, !dbg !32
  %256 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !30
  %257 = bitcast i32 %256 to float, !dbg !30
  %258 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !30
  %259 = bitcast i32 %258 to float, !dbg !30
  %260 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !30
  %261 = bitcast i32 %260 to float, !dbg !30
  %262 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !30
  %263 = bitcast i32 %262 to float, !dbg !30
  %264 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !30
  %265 = bitcast i32 %264 to float, !dbg !30
  %266 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !30
  %267 = bitcast i32 %266 to float, !dbg !30
  %268 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !30
  %269 = bitcast i32 %268 to float, !dbg !30
  %270 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !30
  %271 = bitcast i32 %270 to float, !dbg !30
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %275 = fmul float %.0.i.1, %271, !dbg !34
  %276 = fmul float %.0.i.1, %269, !dbg !34
  %277 = fmul float %.0.i.1, %267, !dbg !34
  %278 = fmul float %.0.i.1, %265, !dbg !34
  %279 = fmul float %.0.i.1, %263, !dbg !34
  %280 = fmul float %.0.i.1, %261, !dbg !34
  %281 = fmul float %.0.i.1, %259, !dbg !34
  %282 = fmul float %.0.i.1, %257, !dbg !34
  %283 = fadd float %255, 1.000000e+00, !dbg !35
  %284 = fadd float %253, 1.000000e+00, !dbg !35
  %285 = fadd float %251, 1.000000e+00, !dbg !35
  %286 = fadd float %249, 1.000000e+00, !dbg !35
  %287 = fadd float %247, 1.000000e+00, !dbg !35
  %288 = fadd float %245, 1.000000e+00, !dbg !35
  %289 = fadd float %243, 1.000000e+00, !dbg !35
  %290 = fadd float %241, 1.000000e+00, !dbg !35
  %291 = fmul float %283, %275, !dbg !36
  %292 = fmul float %284, %276, !dbg !36
  %293 = fmul float %285, %277, !dbg !36
  %294 = fmul float %286, %278, !dbg !36
  %295 = fmul float %287, %279, !dbg !36
  %296 = fmul float %288, %280, !dbg !36
  %297 = fmul float %289, %281, !dbg !36
  %298 = fmul float %290, %282, !dbg !36
  %299 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !37
  %300 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !37
  %301 = bitcast float %291 to i32, !dbg !38
  %302 = bitcast float %292 to i32, !dbg !38
  %303 = bitcast float %293 to i32, !dbg !38
  %304 = bitcast float %294 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %302, i32 %303, i32 %304, ptr addrspace(1) %299, i1 true) #6, !dbg !38
  %305 = bitcast float %295 to i32, !dbg !38
  %306 = bitcast float %296 to i32, !dbg !38
  %307 = bitcast float %297 to i32, !dbg !38
  %308 = bitcast float %298 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %305, i32 %306, i32 %307, i32 %308, ptr addrspace(1) %300, i1 %30) #6, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c4lextplliukahwwqkng5ablboo7hbtjrnzcf3r7qsdxtyjv6gh5.py", directory: "/tmp/torchinductor_zeus/4l")
!4 = !{ptr @triton__0d1d2d3de4de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3de4de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3de4de", linkageName: "triton__0d1d2d3de4de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 28, column: 27, scope: !7)
!17 = !DILocation(line: 29, column: 25, scope: !7)
!18 = !DILocation(line: 32, column: 22, scope: !7)
!19 = !DILocation(line: 35, column: 38, scope: !7)
!20 = !DILocation(line: 233, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 243, column: 36, scope: !21, inlinedAt: !25)
!25 = !DILocation(line: 36, column: 25, scope: !21)
!26 = !DILocation(line: 243, column: 36, scope: !23, inlinedAt: !27)
!27 = !DILocation(line: 36, column: 25, scope: !23)
!28 = !DILocation(line: 44, column: 22, scope: !7)
!29 = !DILocation(line: 46, column: 22, scope: !7)
!30 = !DILocation(line: 41, column: 51, scope: !7)
!31 = !DILocation(line: 42, column: 35, scope: !7)
!32 = !DILocation(line: 42, column: 40, scope: !7)
!33 = !DILocation(line: 47, column: 30, scope: !7)
!34 = !DILocation(line: 48, column: 23, scope: !7)
!35 = !DILocation(line: 50, column: 24, scope: !7)
!36 = !DILocation(line: 51, column: 24, scope: !7)
!37 = !DILocation(line: 52, column: 29, scope: !7)
!38 = !DILocation(line: 52, column: 53, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
