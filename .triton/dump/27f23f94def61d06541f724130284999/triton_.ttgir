#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<1x2048xf32, #blocked>
    %cst_0 = arith.constant dense<2048> : tensor<1x2048xi32, #blocked>
    %cst_1 = arith.constant dense<1> : tensor<1x2048xi64, #blocked>
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %c-1_i32 = arith.constant -1 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %cst_4 = arith.constant dense<true> : tensor<1x2048xi1, #blocked>
    %cst_5 = arith.constant dense<5.000000e+01> : tensor<1x2048xf32, #blocked>
    %cst_6 = arith.constant dense<6.250000e-02> : tensor<1x2048xf32, #blocked>
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %3 = arith.remsi %0, %c2048_i32 : i32
    %4 = arith.cmpi slt, %2, %cst_0 : tensor<1x2048xi32, #blocked>
    %5 = arith.muli %0, %c2048_i32 : i32
    %6 = tt.splat %5 : (i32) -> tensor<1x2048xi32, #blocked>
    %7 = arith.addi %2, %6 : tensor<1x2048xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %9 = tt.addptr %8, %7 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %10 = tt.load %9, %4, %cst_7 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
    %11 = arith.extf %10 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
    %12 = arith.mulf %11, %cst_6 : tensor<1x2048xf32, #blocked>
    %13 = arith.divf %12, %cst_5 : tensor<1x2048xf32, #blocked>
    %14 = tt.extern_elementwise %13 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %15 = arith.mulf %14, %cst_5 : tensor<1x2048xf32, #blocked>
    %16 = arith.muli %3, %c-1_i32 : i32
    %17 = tt.splat %16 : (i32) -> tensor<1x2048xi32, #blocked>
    %18 = arith.addi %2, %17 : tensor<1x2048xi32, #blocked>
    %19 = arith.extsi %18 : tensor<1x2048xi32, #blocked> to tensor<1x2048xi64, #blocked>
    %20 = arith.cmpi sge, %19, %cst_1 : tensor<1x2048xi64, #blocked>
    %21 = arith.select %20, %cst_2, %cst_3 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
    %22 = arith.cmpf une, %21, %cst_3 : tensor<1x2048xf32, #blocked>
    %23 = arith.select %22, %cst, %21 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
    %24 = arith.addf %15, %23 : tensor<1x2048xf32, #blocked>
    %25 = arith.cmpf ogt, %cst, %24 : tensor<1x2048xf32, #blocked>
    %26 = arith.xori %25, %cst_4 : tensor<1x2048xi1, #blocked>
    %27 = arith.andi %4, %26 : tensor<1x2048xi1, #blocked>
    %28 = arith.select %27, %24, %cst : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
    %29 = "tt.reduce"(%28) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %67 = arith.cmpf ogt, %arg6, %arg7 : f32
      %68 = arith.cmpf une, %arg6, %arg6 : f32
      %69 = arith.ori %67, %68 : i1
      %70 = arith.select %69, %arg6, %arg7 : f32
      tt.reduce.return %70 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %30 = triton_gpu.convert_layout %29 : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %31 = tt.expand_dims %30 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<1x1xf32, #blocked1>
    %32 = tt.expand_dims %29 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %33 = tt.addptr %arg1, %0 : !tt.ptr<f32, 1>, i32
    %34 = tt.splat %33 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked1>
    tt.store %34, %31 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32, #blocked1>
    %35 = tt.load %9, %4, %cst_7 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
    %36 = arith.extf %35 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
    %37 = arith.mulf %36, %cst_6 : tensor<1x2048xf32, #blocked>
    %38 = arith.divf %37, %cst_5 : tensor<1x2048xf32, #blocked>
    %39 = tt.extern_elementwise %38 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %40 = arith.mulf %39, %cst_5 : tensor<1x2048xf32, #blocked>
    %41 = arith.addf %40, %23 : tensor<1x2048xf32, #blocked>
    %42 = tt.broadcast %32 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %43 = arith.subf %41, %42 : tensor<1x2048xf32, #blocked>
    %44 = math.exp %43 : tensor<1x2048xf32, #blocked>
    %45 = arith.addf %44, %cst_3 : tensor<1x2048xf32, #blocked>
    %46 = arith.select %4, %45, %cst_3 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
    %47 = "tt.reduce"(%46) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %67 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %67 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %48 = triton_gpu.convert_layout %47 : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %49 = tt.expand_dims %48 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<1x1xf32, #blocked1>
    %50 = tt.expand_dims %47 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %51 = tt.addptr %arg2, %0 : !tt.ptr<f32, 1>, i32
    %52 = tt.splat %51 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked1>
    tt.store %52, %49 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32, #blocked1>
    %53 = tt.load %9, %4, %cst_7 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
    %54 = arith.extf %53 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
    %55 = arith.mulf %54, %cst_6 : tensor<1x2048xf32, #blocked>
    %56 = arith.divf %55, %cst_5 : tensor<1x2048xf32, #blocked>
    %57 = tt.extern_elementwise %56 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %58 = arith.mulf %57, %cst_5 : tensor<1x2048xf32, #blocked>
    %59 = arith.addf %58, %23 : tensor<1x2048xf32, #blocked>
    %60 = arith.subf %59, %42 : tensor<1x2048xf32, #blocked>
    %61 = math.exp %60 : tensor<1x2048xf32, #blocked>
    %62 = tt.broadcast %50 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %63 = arith.divf %61, %62 : tensor<1x2048xf32, #blocked>
    %64 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %65 = tt.addptr %64, %7 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %66 = arith.truncf %63 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
    tt.store %65, %66, %4 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    tt.return
  }
}
