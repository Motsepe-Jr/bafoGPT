; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = shl i32 %7, 3, !dbg !8
  %11 = and i32 %10, 56, !dbg !8
  %12 = and i32 %9, 7, !dbg !8
  %13 = lshr i32 %8, 3, !dbg !8
  %14 = shl nuw nsw i32 %12, 2, !dbg !8
  %15 = or i32 %14, %13, !dbg !8
  %16 = or i32 %15, 32, !dbg !8
  %17 = shl i32 %7, 2, !dbg !8
  %18 = and i32 %17, 60, !dbg !8
  %19 = lshr i32 %8, 4, !dbg !9
  %20 = shl nuw nsw i32 %12, 1, !dbg !9
  %21 = or i32 %20, %19, !dbg !9
  %22 = or i32 %21, 16, !dbg !9
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %24 = shl i32 %23, 6, !dbg !11
  %25 = or i32 %24, %11, !dbg !12
  %26 = or i32 %24, %15, !dbg !12
  %27 = or i32 %24, %16, !dbg !12
  %28 = or i32 %24, %18, !dbg !12
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %30 = shl i32 %29, 6, !dbg !14
  %31 = or i32 %30, %15, !dbg !15
  %32 = or i32 %30, %16, !dbg !15
  %33 = or i32 %30, %21, !dbg !15
  %34 = or i32 %30, %22, !dbg !15
  %35 = or i32 %33, 32, !dbg !15
  %36 = or i32 %33, 48, !dbg !15
  %37 = or i32 %30, %11, !dbg !15
  %38 = icmp slt i32 %31, 256, !dbg !16
  %39 = icmp slt i32 %32, 256, !dbg !16
  %40 = icmp slt i32 %37, 256, !dbg !16
  %41 = icmp slt i32 %33, 256, !dbg !16
  %42 = icmp slt i32 %34, 256, !dbg !16
  %43 = icmp slt i32 %35, 256, !dbg !16
  %44 = icmp slt i32 %36, 256, !dbg !16
  %.frozen = freeze i32 %25
  %45 = sdiv i32 %.frozen, 512, !dbg !17
  %46 = mul i32 %45, 512
  %.decomposed = sub i32 %.frozen, %46
  %47 = srem i32 %26, 512, !dbg !18
  %48 = srem i32 %27, 512, !dbg !18
  %.frozen118 = freeze i32 %28
  %49 = sdiv i32 %.frozen118, 512, !dbg !17
  %50 = mul i32 %49, 512
  %.decomposed119 = sub i32 %.frozen118, %50
  %51 = shl i32 %31, 9, !dbg !19
  %52 = shl i32 %32, 9, !dbg !19
  %53 = shl i32 %33, 9, !dbg !19
  %54 = shl i32 %34, 9, !dbg !19
  %55 = shl i32 %35, 9, !dbg !19
  %56 = shl i32 %36, 9, !dbg !19
  %57 = shl i32 %45, 18, !dbg !20
  %58 = add i32 %57, %51, !dbg !21
  %59 = add i32 %58, %.decomposed, !dbg !22
  %60 = add i32 %57, %52, !dbg !21
  %61 = add nsw i32 %60, %.decomposed, !dbg !22
  %62 = sext i32 %59 to i64, !dbg !23
  %63 = getelementptr i16, ptr addrspace(1) %0, i64 %62, !dbg !23
  %64 = sext i32 %61 to i64, !dbg !23
  %65 = getelementptr i16, ptr addrspace(1) %0, i64 %64, !dbg !23
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %38) #2, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !24
  %71 = trunc i32 %67 to i16, !dbg !24
  %extelt.offset = lshr i32 %67, 16, !dbg !24
  %72 = trunc i32 %extelt.offset to i16, !dbg !24
  %73 = trunc i32 %68 to i16, !dbg !24
  %extelt.offset1 = lshr i32 %68, 16, !dbg !24
  %74 = trunc i32 %extelt.offset1 to i16, !dbg !24
  %75 = trunc i32 %69 to i16, !dbg !24
  %extelt.offset2 = lshr i32 %69, 16, !dbg !24
  %76 = trunc i32 %extelt.offset2 to i16, !dbg !24
  %77 = trunc i32 %70 to i16, !dbg !24
  %extelt.offset3 = lshr i32 %70, 16, !dbg !24
  %78 = trunc i32 %extelt.offset3 to i16, !dbg !24
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %39) #2, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !24
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !24
  %84 = trunc i32 %80 to i16, !dbg !24
  %extelt.offset4 = lshr i32 %80, 16, !dbg !24
  %85 = trunc i32 %extelt.offset4 to i16, !dbg !24
  %86 = trunc i32 %81 to i16, !dbg !24
  %extelt.offset5 = lshr i32 %81, 16, !dbg !24
  %87 = trunc i32 %extelt.offset5 to i16, !dbg !24
  %88 = trunc i32 %82 to i16, !dbg !24
  %extelt.offset6 = lshr i32 %82, 16, !dbg !24
  %89 = trunc i32 %extelt.offset6 to i16, !dbg !24
  %90 = trunc i32 %83 to i16, !dbg !24
  %extelt.offset7 = lshr i32 %83, 16, !dbg !24
  %91 = trunc i32 %extelt.offset7 to i16, !dbg !24
  %92 = mul nuw nsw i32 %11, 65, !dbg !25
  %93 = add nuw nsw i32 %15, %92, !dbg !25
  %94 = zext nneg i32 %93 to i64, !dbg !25
  %95 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %94, !dbg !25
  %96 = insertelement <1 x i16> undef, i16 %71, i64 0, !dbg !25
  store <1 x i16> %96, ptr addrspace(3) %95, align 2, !dbg !25
  %97 = or i32 %11, 1, !dbg !25
  %98 = mul nuw nsw i32 %97, 65, !dbg !25
  %99 = add nuw nsw i32 %98, %15, !dbg !25
  %100 = zext nneg i32 %99 to i64, !dbg !25
  %101 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %100, !dbg !25
  %102 = insertelement <1 x i16> undef, i16 %72, i64 0, !dbg !25
  store <1 x i16> %102, ptr addrspace(3) %101, align 2, !dbg !25
  %103 = or i32 %11, 2, !dbg !25
  %104 = mul nuw nsw i32 %103, 65, !dbg !25
  %105 = add nuw nsw i32 %104, %15, !dbg !25
  %106 = zext nneg i32 %105 to i64, !dbg !25
  %107 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %106, !dbg !25
  %108 = insertelement <1 x i16> undef, i16 %73, i64 0, !dbg !25
  store <1 x i16> %108, ptr addrspace(3) %107, align 2, !dbg !25
  %109 = or i32 %11, 3, !dbg !25
  %110 = mul nuw nsw i32 %109, 65, !dbg !25
  %111 = add nuw nsw i32 %110, %15, !dbg !25
  %112 = zext nneg i32 %111 to i64, !dbg !25
  %113 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %112, !dbg !25
  %114 = insertelement <1 x i16> undef, i16 %74, i64 0, !dbg !25
  store <1 x i16> %114, ptr addrspace(3) %113, align 2, !dbg !25
  %115 = or i32 %11, 4, !dbg !25
  %116 = mul nuw nsw i32 %115, 65, !dbg !25
  %117 = add nuw nsw i32 %116, %15, !dbg !25
  %118 = zext nneg i32 %117 to i64, !dbg !25
  %119 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %118, !dbg !25
  %120 = insertelement <1 x i16> undef, i16 %75, i64 0, !dbg !25
  store <1 x i16> %120, ptr addrspace(3) %119, align 2, !dbg !25
  %121 = or i32 %11, 5, !dbg !25
  %122 = mul nuw nsw i32 %121, 65, !dbg !25
  %123 = add nuw nsw i32 %122, %15, !dbg !25
  %124 = zext nneg i32 %123 to i64, !dbg !25
  %125 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %124, !dbg !25
  %126 = insertelement <1 x i16> undef, i16 %76, i64 0, !dbg !25
  store <1 x i16> %126, ptr addrspace(3) %125, align 2, !dbg !25
  %127 = or i32 %11, 6, !dbg !25
  %128 = mul nuw nsw i32 %127, 65, !dbg !25
  %129 = add nuw nsw i32 %128, %15, !dbg !25
  %130 = zext nneg i32 %129 to i64, !dbg !25
  %131 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %130, !dbg !25
  %132 = insertelement <1 x i16> undef, i16 %77, i64 0, !dbg !25
  store <1 x i16> %132, ptr addrspace(3) %131, align 2, !dbg !25
  %133 = or i32 %11, 7, !dbg !25
  %134 = mul nuw nsw i32 %133, 65, !dbg !25
  %135 = add nuw nsw i32 %134, %15, !dbg !25
  %136 = zext nneg i32 %135 to i64, !dbg !25
  %137 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %136, !dbg !25
  %138 = insertelement <1 x i16> undef, i16 %78, i64 0, !dbg !25
  store <1 x i16> %138, ptr addrspace(3) %137, align 2, !dbg !25
  %139 = add nuw nsw i32 %16, %92, !dbg !25
  %140 = zext nneg i32 %139 to i64, !dbg !25
  %141 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %140, !dbg !25
  %142 = insertelement <1 x i16> undef, i16 %84, i64 0, !dbg !25
  store <1 x i16> %142, ptr addrspace(3) %141, align 2, !dbg !25
  %143 = add nuw nsw i32 %16, %98, !dbg !25
  %144 = zext nneg i32 %143 to i64, !dbg !25
  %145 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %144, !dbg !25
  %146 = insertelement <1 x i16> undef, i16 %85, i64 0, !dbg !25
  store <1 x i16> %146, ptr addrspace(3) %145, align 2, !dbg !25
  %147 = add nuw nsw i32 %16, %104, !dbg !25
  %148 = zext nneg i32 %147 to i64, !dbg !25
  %149 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %148, !dbg !25
  %150 = insertelement <1 x i16> undef, i16 %86, i64 0, !dbg !25
  store <1 x i16> %150, ptr addrspace(3) %149, align 2, !dbg !25
  %151 = add nuw nsw i32 %16, %110, !dbg !25
  %152 = zext nneg i32 %151 to i64, !dbg !25
  %153 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %152, !dbg !25
  %154 = insertelement <1 x i16> undef, i16 %87, i64 0, !dbg !25
  store <1 x i16> %154, ptr addrspace(3) %153, align 2, !dbg !25
  %155 = add nuw nsw i32 %16, %116, !dbg !25
  %156 = zext nneg i32 %155 to i64, !dbg !25
  %157 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %156, !dbg !25
  %158 = insertelement <1 x i16> undef, i16 %88, i64 0, !dbg !25
  store <1 x i16> %158, ptr addrspace(3) %157, align 2, !dbg !25
  %159 = add nuw nsw i32 %16, %122, !dbg !25
  %160 = zext nneg i32 %159 to i64, !dbg !25
  %161 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %160, !dbg !25
  %162 = insertelement <1 x i16> undef, i16 %89, i64 0, !dbg !25
  store <1 x i16> %162, ptr addrspace(3) %161, align 2, !dbg !25
  %163 = add nuw nsw i32 %16, %128, !dbg !25
  %164 = zext nneg i32 %163 to i64, !dbg !25
  %165 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %164, !dbg !25
  %166 = insertelement <1 x i16> undef, i16 %90, i64 0, !dbg !25
  store <1 x i16> %166, ptr addrspace(3) %165, align 2, !dbg !25
  %167 = add nuw nsw i32 %16, %134, !dbg !25
  %168 = zext nneg i32 %167 to i64, !dbg !25
  %169 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %168, !dbg !25
  %170 = insertelement <1 x i16> undef, i16 %91, i64 0, !dbg !25
  store <1 x i16> %170, ptr addrspace(3) %169, align 2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %171 = mul nuw nsw i32 %15, 65, !dbg !25
  %172 = add nuw nsw i32 %171, %11, !dbg !25
  %173 = zext nneg i32 %172 to i64, !dbg !25
  %174 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %173, !dbg !25
  %175 = load i16, ptr addrspace(3) %174, align 2, !dbg !25
  %176 = add nuw nsw i32 %171, %97, !dbg !25
  %177 = zext nneg i32 %176 to i64, !dbg !25
  %178 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %177, !dbg !25
  %179 = load i16, ptr addrspace(3) %178, align 2, !dbg !25
  %180 = add nuw nsw i32 %171, %103, !dbg !25
  %181 = zext nneg i32 %180 to i64, !dbg !25
  %182 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %181, !dbg !25
  %183 = load i16, ptr addrspace(3) %182, align 2, !dbg !25
  %184 = add nuw nsw i32 %171, %109, !dbg !25
  %185 = zext nneg i32 %184 to i64, !dbg !25
  %186 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %185, !dbg !25
  %187 = load i16, ptr addrspace(3) %186, align 2, !dbg !25
  %188 = add nuw nsw i32 %171, %115, !dbg !25
  %189 = zext nneg i32 %188 to i64, !dbg !25
  %190 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %189, !dbg !25
  %191 = load i16, ptr addrspace(3) %190, align 2, !dbg !25
  %192 = add nuw nsw i32 %171, %121, !dbg !25
  %193 = zext nneg i32 %192 to i64, !dbg !25
  %194 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %193, !dbg !25
  %195 = load i16, ptr addrspace(3) %194, align 2, !dbg !25
  %196 = add nuw nsw i32 %171, %127, !dbg !25
  %197 = zext nneg i32 %196 to i64, !dbg !25
  %198 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %197, !dbg !25
  %199 = load i16, ptr addrspace(3) %198, align 2, !dbg !25
  %200 = add nuw nsw i32 %171, %133, !dbg !25
  %201 = zext nneg i32 %200 to i64, !dbg !25
  %202 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %201, !dbg !25
  %203 = load i16, ptr addrspace(3) %202, align 2, !dbg !25
  %204 = mul nuw nsw i32 %16, 65, !dbg !25
  %205 = add nuw nsw i32 %204, %11, !dbg !25
  %206 = zext nneg i32 %205 to i64, !dbg !25
  %207 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %206, !dbg !25
  %208 = load i16, ptr addrspace(3) %207, align 2, !dbg !25
  %209 = add nuw nsw i32 %204, %97, !dbg !25
  %210 = zext nneg i32 %209 to i64, !dbg !25
  %211 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %210, !dbg !25
  %212 = load i16, ptr addrspace(3) %211, align 2, !dbg !25
  %213 = add nuw nsw i32 %204, %103, !dbg !25
  %214 = zext nneg i32 %213 to i64, !dbg !25
  %215 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %214, !dbg !25
  %216 = load i16, ptr addrspace(3) %215, align 2, !dbg !25
  %217 = add nuw nsw i32 %204, %109, !dbg !25
  %218 = zext nneg i32 %217 to i64, !dbg !25
  %219 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %218, !dbg !25
  %220 = load i16, ptr addrspace(3) %219, align 2, !dbg !25
  %221 = add nuw nsw i32 %204, %115, !dbg !25
  %222 = zext nneg i32 %221 to i64, !dbg !25
  %223 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %222, !dbg !25
  %224 = load i16, ptr addrspace(3) %223, align 2, !dbg !25
  %225 = add nuw nsw i32 %204, %121, !dbg !25
  %226 = zext nneg i32 %225 to i64, !dbg !25
  %227 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %226, !dbg !25
  %228 = load i16, ptr addrspace(3) %227, align 2, !dbg !25
  %229 = add nuw nsw i32 %204, %127, !dbg !25
  %230 = zext nneg i32 %229 to i64, !dbg !25
  %231 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %230, !dbg !25
  %232 = load i16, ptr addrspace(3) %231, align 2, !dbg !25
  %233 = add nuw nsw i32 %204, %133, !dbg !25
  %234 = zext nneg i32 %233 to i64, !dbg !25
  %235 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %234, !dbg !25
  %236 = load i16, ptr addrspace(3) %235, align 2, !dbg !25
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %175) #2, !dbg !25
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %179) #2, !dbg !25
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %183) #2, !dbg !25
  %240 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %187) #2, !dbg !25
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %191) #2, !dbg !25
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %195) #2, !dbg !25
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %199) #2, !dbg !25
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %203) #2, !dbg !25
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %208) #2, !dbg !25
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %212) #2, !dbg !25
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %216) #2, !dbg !25
  %248 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %220) #2, !dbg !25
  %249 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %224) #2, !dbg !25
  %250 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #2, !dbg !25
  %251 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #2, !dbg !25
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #2, !dbg !25
  %253 = shl nsw i32 %47, 8, !dbg !26
  %254 = shl nsw i32 %48, 8, !dbg !26
  %255 = add i32 %253, %37, !dbg !27
  %256 = add i32 %254, %37, !dbg !27
  %257 = sext i32 %255 to i64, !dbg !28
  %258 = getelementptr i16, ptr addrspace(1) %1, i64 %257, !dbg !28
  %259 = sext i32 %256 to i64, !dbg !28
  %260 = getelementptr i16, ptr addrspace(1) %1, i64 %259, !dbg !28
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %258, i1 %40) #2, !dbg !29
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !29
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !29
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !29
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !29
  %266 = trunc i32 %262 to i16, !dbg !29
  %extelt.offset8 = lshr i32 %262, 16, !dbg !29
  %267 = trunc i32 %extelt.offset8 to i16, !dbg !29
  %268 = trunc i32 %263 to i16, !dbg !29
  %extelt.offset9 = lshr i32 %263, 16, !dbg !29
  %269 = trunc i32 %extelt.offset9 to i16, !dbg !29
  %270 = trunc i32 %264 to i16, !dbg !29
  %extelt.offset10 = lshr i32 %264, 16, !dbg !29
  %271 = trunc i32 %extelt.offset10 to i16, !dbg !29
  %272 = trunc i32 %265 to i16, !dbg !29
  %extelt.offset11 = lshr i32 %265, 16, !dbg !29
  %273 = trunc i32 %extelt.offset11 to i16, !dbg !29
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %260, i1 %40) #2, !dbg !29
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !29
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !29
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !29
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !29
  %279 = trunc i32 %275 to i16, !dbg !29
  %extelt.offset12 = lshr i32 %275, 16, !dbg !29
  %280 = trunc i32 %extelt.offset12 to i16, !dbg !29
  %281 = trunc i32 %276 to i16, !dbg !29
  %extelt.offset13 = lshr i32 %276, 16, !dbg !29
  %282 = trunc i32 %extelt.offset13 to i16, !dbg !29
  %283 = trunc i32 %277 to i16, !dbg !29
  %extelt.offset14 = lshr i32 %277, 16, !dbg !29
  %284 = trunc i32 %extelt.offset14 to i16, !dbg !29
  %285 = trunc i32 %278 to i16, !dbg !29
  %extelt.offset15 = lshr i32 %278, 16, !dbg !29
  %286 = trunc i32 %extelt.offset15 to i16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %287 = mul nuw nsw i32 %11, 72, !dbg !30
  %288 = or i32 %15, %287, !dbg !30
  %289 = zext nneg i32 %288 to i64, !dbg !30
  %290 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %289, !dbg !30
  %291 = insertelement <1 x i16> undef, i16 %266, i64 0, !dbg !30
  store <1 x i16> %291, ptr addrspace(3) %290, align 2, !dbg !30
  %292 = mul nuw nsw i32 %97, 72, !dbg !30
  %293 = add nuw nsw i32 %292, %15, !dbg !30
  %294 = zext nneg i32 %293 to i64, !dbg !30
  %295 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %294, !dbg !30
  %296 = insertelement <1 x i16> undef, i16 %267, i64 0, !dbg !30
  store <1 x i16> %296, ptr addrspace(3) %295, align 2, !dbg !30
  %297 = mul nuw nsw i32 %103, 72, !dbg !30
  %298 = add nuw nsw i32 %297, %15, !dbg !30
  %299 = zext nneg i32 %298 to i64, !dbg !30
  %300 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %299, !dbg !30
  %301 = insertelement <1 x i16> undef, i16 %268, i64 0, !dbg !30
  store <1 x i16> %301, ptr addrspace(3) %300, align 2, !dbg !30
  %302 = mul nuw nsw i32 %109, 72, !dbg !30
  %303 = add nuw nsw i32 %302, %15, !dbg !30
  %304 = zext nneg i32 %303 to i64, !dbg !30
  %305 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %304, !dbg !30
  %306 = insertelement <1 x i16> undef, i16 %269, i64 0, !dbg !30
  store <1 x i16> %306, ptr addrspace(3) %305, align 2, !dbg !30
  %307 = mul nuw nsw i32 %115, 72, !dbg !30
  %308 = or i32 %307, %15, !dbg !30
  %309 = zext nneg i32 %308 to i64, !dbg !30
  %310 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %309, !dbg !30
  %311 = insertelement <1 x i16> undef, i16 %270, i64 0, !dbg !30
  store <1 x i16> %311, ptr addrspace(3) %310, align 2, !dbg !30
  %312 = mul nuw nsw i32 %121, 72, !dbg !30
  %313 = add nuw nsw i32 %312, %15, !dbg !30
  %314 = zext nneg i32 %313 to i64, !dbg !30
  %315 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %314, !dbg !30
  %316 = insertelement <1 x i16> undef, i16 %271, i64 0, !dbg !30
  store <1 x i16> %316, ptr addrspace(3) %315, align 2, !dbg !30
  %317 = mul nuw nsw i32 %127, 72, !dbg !30
  %318 = add nuw nsw i32 %317, %15, !dbg !30
  %319 = zext nneg i32 %318 to i64, !dbg !30
  %320 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %319, !dbg !30
  %321 = insertelement <1 x i16> undef, i16 %272, i64 0, !dbg !30
  store <1 x i16> %321, ptr addrspace(3) %320, align 2, !dbg !30
  %322 = mul nuw nsw i32 %133, 72, !dbg !30
  %323 = add nuw nsw i32 %322, %15, !dbg !30
  %324 = zext nneg i32 %323 to i64, !dbg !30
  %325 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %324, !dbg !30
  %326 = insertelement <1 x i16> undef, i16 %273, i64 0, !dbg !30
  store <1 x i16> %326, ptr addrspace(3) %325, align 2, !dbg !30
  %327 = or i32 %16, %287, !dbg !30
  %328 = zext nneg i32 %327 to i64, !dbg !30
  %329 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %328, !dbg !30
  %330 = insertelement <1 x i16> undef, i16 %279, i64 0, !dbg !30
  store <1 x i16> %330, ptr addrspace(3) %329, align 2, !dbg !30
  %331 = add nuw nsw i32 %16, %292, !dbg !30
  %332 = zext nneg i32 %331 to i64, !dbg !30
  %333 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %332, !dbg !30
  %334 = insertelement <1 x i16> undef, i16 %280, i64 0, !dbg !30
  store <1 x i16> %334, ptr addrspace(3) %333, align 2, !dbg !30
  %335 = add nuw nsw i32 %16, %297, !dbg !30
  %336 = zext nneg i32 %335 to i64, !dbg !30
  %337 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %336, !dbg !30
  %338 = insertelement <1 x i16> undef, i16 %281, i64 0, !dbg !30
  store <1 x i16> %338, ptr addrspace(3) %337, align 2, !dbg !30
  %339 = add nuw nsw i32 %16, %302, !dbg !30
  %340 = zext nneg i32 %339 to i64, !dbg !30
  %341 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %340, !dbg !30
  %342 = insertelement <1 x i16> undef, i16 %282, i64 0, !dbg !30
  store <1 x i16> %342, ptr addrspace(3) %341, align 2, !dbg !30
  %343 = add nuw nsw i32 %16, %307, !dbg !30
  %344 = zext nneg i32 %343 to i64, !dbg !30
  %345 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %344, !dbg !30
  %346 = insertelement <1 x i16> undef, i16 %283, i64 0, !dbg !30
  store <1 x i16> %346, ptr addrspace(3) %345, align 2, !dbg !30
  %347 = add nuw nsw i32 %16, %312, !dbg !30
  %348 = zext nneg i32 %347 to i64, !dbg !30
  %349 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %348, !dbg !30
  %350 = insertelement <1 x i16> undef, i16 %284, i64 0, !dbg !30
  store <1 x i16> %350, ptr addrspace(3) %349, align 2, !dbg !30
  %351 = add nuw nsw i32 %16, %317, !dbg !30
  %352 = zext nneg i32 %351 to i64, !dbg !30
  %353 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %352, !dbg !30
  %354 = insertelement <1 x i16> undef, i16 %285, i64 0, !dbg !30
  store <1 x i16> %354, ptr addrspace(3) %353, align 2, !dbg !30
  %355 = add nuw nsw i32 %16, %322, !dbg !30
  %356 = zext nneg i32 %355 to i64, !dbg !30
  %357 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %356, !dbg !30
  %358 = insertelement <1 x i16> undef, i16 %286, i64 0, !dbg !30
  store <1 x i16> %358, ptr addrspace(3) %357, align 2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %359 = mul nuw nsw i32 %15, 72, !dbg !30
  %360 = add nuw nsw i32 %359, %11, !dbg !30
  %361 = zext nneg i32 %360 to i64, !dbg !30
  %362 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %361, !dbg !30
  %363 = load i16, ptr addrspace(3) %362, align 16, !dbg !30
  %364 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %362, i64 0, i64 1, !dbg !30
  %365 = load i16, ptr addrspace(3) %364, align 2, !dbg !30
  %366 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %362, i64 0, i64 2, !dbg !30
  %367 = load i16, ptr addrspace(3) %366, align 4, !dbg !30
  %368 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %362, i64 0, i64 3, !dbg !30
  %369 = load i16, ptr addrspace(3) %368, align 2, !dbg !30
  %370 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %362, i64 0, i64 4, !dbg !30
  %371 = load i16, ptr addrspace(3) %370, align 8, !dbg !30
  %372 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %362, i64 0, i64 5, !dbg !30
  %373 = load i16, ptr addrspace(3) %372, align 2, !dbg !30
  %374 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %362, i64 0, i64 6, !dbg !30
  %375 = load i16, ptr addrspace(3) %374, align 4, !dbg !30
  %376 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %362, i64 0, i64 7, !dbg !30
  %377 = load i16, ptr addrspace(3) %376, align 2, !dbg !30
  %378 = mul nuw nsw i32 %16, 72, !dbg !30
  %379 = add nuw nsw i32 %378, %11, !dbg !30
  %380 = zext nneg i32 %379 to i64, !dbg !30
  %381 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %380, !dbg !30
  %382 = load i16, ptr addrspace(3) %381, align 16, !dbg !30
  %383 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %381, i64 0, i64 1, !dbg !30
  %384 = load i16, ptr addrspace(3) %383, align 2, !dbg !30
  %385 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %381, i64 0, i64 2, !dbg !30
  %386 = load i16, ptr addrspace(3) %385, align 4, !dbg !30
  %387 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %381, i64 0, i64 3, !dbg !30
  %388 = load i16, ptr addrspace(3) %387, align 2, !dbg !30
  %389 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %381, i64 0, i64 4, !dbg !30
  %390 = load i16, ptr addrspace(3) %389, align 8, !dbg !30
  %391 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %381, i64 0, i64 5, !dbg !30
  %392 = load i16, ptr addrspace(3) %391, align 2, !dbg !30
  %393 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %381, i64 0, i64 6, !dbg !30
  %394 = load i16, ptr addrspace(3) %393, align 4, !dbg !30
  %395 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %381, i64 0, i64 7, !dbg !30
  %396 = load i16, ptr addrspace(3) %395, align 2, !dbg !30
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #2, !dbg !30
  %398 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #2, !dbg !30
  %399 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %367) #2, !dbg !30
  %400 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %369) #2, !dbg !30
  %401 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %371) #2, !dbg !30
  %402 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %373) #2, !dbg !30
  %403 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #2, !dbg !30
  %404 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #2, !dbg !30
  %405 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #2, !dbg !30
  %406 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %384) #2, !dbg !30
  %407 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %386) #2, !dbg !30
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %388) #2, !dbg !30
  %409 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %390) #2, !dbg !30
  %410 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %392) #2, !dbg !30
  %411 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %394) #2, !dbg !30
  %412 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %396) #2, !dbg !30
  %413 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #2, !dbg !30
  %414 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #2, !dbg !30
  %415 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #2, !dbg !30
  %416 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %269) #2, !dbg !30
  %417 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %270) #2, !dbg !30
  %418 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %271) #2, !dbg !30
  %419 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %272) #2, !dbg !30
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %273) #2, !dbg !30
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %279) #2, !dbg !30
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %280) #2, !dbg !30
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %281) #2, !dbg !30
  %424 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %282) #2, !dbg !30
  %425 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %283) #2, !dbg !30
  %426 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %284) #2, !dbg !30
  %427 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #2, !dbg !30
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #2, !dbg !30
  %429 = add nsw i32 %.decomposed, 131072, !dbg !31
  %430 = add i32 %58, %429, !dbg !32
  %431 = add i32 %60, %429, !dbg !32
  %432 = sext i32 %430 to i64, !dbg !33
  %433 = getelementptr i16, ptr addrspace(1) %0, i64 %432, !dbg !33
  %434 = sext i32 %431 to i64, !dbg !33
  %435 = getelementptr i16, ptr addrspace(1) %0, i64 %434, !dbg !33
  %436 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %433, i1 %38) #2, !dbg !34
  %437 = extractvalue { i32, i32, i32, i32 } %436, 0, !dbg !34
  %438 = extractvalue { i32, i32, i32, i32 } %436, 1, !dbg !34
  %439 = extractvalue { i32, i32, i32, i32 } %436, 2, !dbg !34
  %440 = extractvalue { i32, i32, i32, i32 } %436, 3, !dbg !34
  %441 = trunc i32 %437 to i16, !dbg !34
  %extelt.offset16 = lshr i32 %437, 16, !dbg !34
  %442 = trunc i32 %extelt.offset16 to i16, !dbg !34
  %443 = trunc i32 %438 to i16, !dbg !34
  %extelt.offset17 = lshr i32 %438, 16, !dbg !34
  %444 = trunc i32 %extelt.offset17 to i16, !dbg !34
  %445 = trunc i32 %439 to i16, !dbg !34
  %extelt.offset18 = lshr i32 %439, 16, !dbg !34
  %446 = trunc i32 %extelt.offset18 to i16, !dbg !34
  %447 = trunc i32 %440 to i16, !dbg !34
  %extelt.offset19 = lshr i32 %440, 16, !dbg !34
  %448 = trunc i32 %extelt.offset19 to i16, !dbg !34
  %449 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %435, i1 %39) #2, !dbg !34
  %450 = extractvalue { i32, i32, i32, i32 } %449, 0, !dbg !34
  %451 = extractvalue { i32, i32, i32, i32 } %449, 1, !dbg !34
  %452 = extractvalue { i32, i32, i32, i32 } %449, 2, !dbg !34
  %453 = extractvalue { i32, i32, i32, i32 } %449, 3, !dbg !34
  %454 = trunc i32 %450 to i16, !dbg !34
  %extelt.offset20 = lshr i32 %450, 16, !dbg !34
  %455 = trunc i32 %extelt.offset20 to i16, !dbg !34
  %456 = trunc i32 %451 to i16, !dbg !34
  %extelt.offset21 = lshr i32 %451, 16, !dbg !34
  %457 = trunc i32 %extelt.offset21 to i16, !dbg !34
  %458 = trunc i32 %452 to i16, !dbg !34
  %extelt.offset22 = lshr i32 %452, 16, !dbg !34
  %459 = trunc i32 %extelt.offset22 to i16, !dbg !34
  %460 = trunc i32 %453 to i16, !dbg !34
  %extelt.offset23 = lshr i32 %453, 16, !dbg !34
  %461 = trunc i32 %extelt.offset23 to i16, !dbg !34
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %441) #2, !dbg !35
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #2, !dbg !35
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #2, !dbg !35
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #2, !dbg !35
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #2, !dbg !35
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #2, !dbg !35
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #2, !dbg !35
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #2, !dbg !35
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %454) #2, !dbg !35
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %455) #2, !dbg !35
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %456) #2, !dbg !35
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %457) #2, !dbg !35
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #2, !dbg !35
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #2, !dbg !35
  %476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #2, !dbg !35
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %461) #2, !dbg !35
  %478 = icmp sgt i32 %31, 255, !dbg !36
  %479 = icmp sgt i32 %32, 255, !dbg !36
  %480 = icmp sgt i32 %37, 255, !dbg !36
  %481 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !37
  %482 = extractvalue { i32, i32, i32, i32 } %481, 0, !dbg !37
  %483 = extractvalue { i32, i32, i32, i32 } %481, 1, !dbg !37
  %484 = extractvalue { i32, i32, i32, i32 } %481, 2, !dbg !37
  %485 = extractvalue { i32, i32, i32, i32 } %481, 3, !dbg !37
  %486 = trunc i32 %482 to i16, !dbg !37
  %extelt.offset24 = lshr i32 %482, 16, !dbg !37
  %487 = trunc i32 %extelt.offset24 to i16, !dbg !37
  %488 = trunc i32 %483 to i16, !dbg !37
  %extelt.offset25 = lshr i32 %483, 16, !dbg !37
  %489 = trunc i32 %extelt.offset25 to i16, !dbg !37
  %490 = trunc i32 %484 to i16, !dbg !37
  %extelt.offset26 = lshr i32 %484, 16, !dbg !37
  %491 = trunc i32 %extelt.offset26 to i16, !dbg !37
  %492 = trunc i32 %485 to i16, !dbg !37
  %extelt.offset27 = lshr i32 %485, 16, !dbg !37
  %493 = trunc i32 %extelt.offset27 to i16, !dbg !37
  %494 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !37
  %495 = extractvalue { i32, i32, i32, i32 } %494, 0, !dbg !37
  %496 = extractvalue { i32, i32, i32, i32 } %494, 1, !dbg !37
  %497 = extractvalue { i32, i32, i32, i32 } %494, 2, !dbg !37
  %498 = extractvalue { i32, i32, i32, i32 } %494, 3, !dbg !37
  %499 = trunc i32 %495 to i16, !dbg !37
  %extelt.offset28 = lshr i32 %495, 16, !dbg !37
  %500 = trunc i32 %extelt.offset28 to i16, !dbg !37
  %501 = trunc i32 %496 to i16, !dbg !37
  %extelt.offset29 = lshr i32 %496, 16, !dbg !37
  %502 = trunc i32 %extelt.offset29 to i16, !dbg !37
  %503 = trunc i32 %497 to i16, !dbg !37
  %extelt.offset30 = lshr i32 %497, 16, !dbg !37
  %504 = trunc i32 %extelt.offset30 to i16, !dbg !37
  %505 = trunc i32 %498 to i16, !dbg !37
  %extelt.offset31 = lshr i32 %498, 16, !dbg !37
  %506 = trunc i32 %extelt.offset31 to i16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %507 = insertelement <1 x i16> undef, i16 %486, i64 0, !dbg !38
  store <1 x i16> %507, ptr addrspace(3) %95, align 2, !dbg !38
  %508 = insertelement <1 x i16> undef, i16 %487, i64 0, !dbg !38
  store <1 x i16> %508, ptr addrspace(3) %101, align 2, !dbg !38
  %509 = insertelement <1 x i16> undef, i16 %488, i64 0, !dbg !38
  store <1 x i16> %509, ptr addrspace(3) %107, align 2, !dbg !38
  %510 = insertelement <1 x i16> undef, i16 %489, i64 0, !dbg !38
  store <1 x i16> %510, ptr addrspace(3) %113, align 2, !dbg !38
  %511 = insertelement <1 x i16> undef, i16 %490, i64 0, !dbg !38
  store <1 x i16> %511, ptr addrspace(3) %119, align 2, !dbg !38
  %512 = insertelement <1 x i16> undef, i16 %491, i64 0, !dbg !38
  store <1 x i16> %512, ptr addrspace(3) %125, align 2, !dbg !38
  %513 = insertelement <1 x i16> undef, i16 %492, i64 0, !dbg !38
  store <1 x i16> %513, ptr addrspace(3) %131, align 2, !dbg !38
  %514 = insertelement <1 x i16> undef, i16 %493, i64 0, !dbg !38
  store <1 x i16> %514, ptr addrspace(3) %137, align 2, !dbg !38
  %515 = insertelement <1 x i16> undef, i16 %499, i64 0, !dbg !38
  store <1 x i16> %515, ptr addrspace(3) %141, align 2, !dbg !38
  %516 = insertelement <1 x i16> undef, i16 %500, i64 0, !dbg !38
  store <1 x i16> %516, ptr addrspace(3) %145, align 2, !dbg !38
  %517 = insertelement <1 x i16> undef, i16 %501, i64 0, !dbg !38
  store <1 x i16> %517, ptr addrspace(3) %149, align 2, !dbg !38
  %518 = insertelement <1 x i16> undef, i16 %502, i64 0, !dbg !38
  store <1 x i16> %518, ptr addrspace(3) %153, align 2, !dbg !38
  %519 = insertelement <1 x i16> undef, i16 %503, i64 0, !dbg !38
  store <1 x i16> %519, ptr addrspace(3) %157, align 2, !dbg !38
  %520 = insertelement <1 x i16> undef, i16 %504, i64 0, !dbg !38
  store <1 x i16> %520, ptr addrspace(3) %161, align 2, !dbg !38
  %521 = insertelement <1 x i16> undef, i16 %505, i64 0, !dbg !38
  store <1 x i16> %521, ptr addrspace(3) %165, align 2, !dbg !38
  %522 = insertelement <1 x i16> undef, i16 %506, i64 0, !dbg !38
  store <1 x i16> %522, ptr addrspace(3) %169, align 2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %523 = load i16, ptr addrspace(3) %174, align 2, !dbg !38
  %524 = load i16, ptr addrspace(3) %178, align 2, !dbg !38
  %525 = load i16, ptr addrspace(3) %182, align 2, !dbg !38
  %526 = load i16, ptr addrspace(3) %186, align 2, !dbg !38
  %527 = load i16, ptr addrspace(3) %190, align 2, !dbg !38
  %528 = load i16, ptr addrspace(3) %194, align 2, !dbg !38
  %529 = load i16, ptr addrspace(3) %198, align 2, !dbg !38
  %530 = load i16, ptr addrspace(3) %202, align 2, !dbg !38
  %531 = load i16, ptr addrspace(3) %207, align 2, !dbg !38
  %532 = load i16, ptr addrspace(3) %211, align 2, !dbg !38
  %533 = load i16, ptr addrspace(3) %215, align 2, !dbg !38
  %534 = load i16, ptr addrspace(3) %219, align 2, !dbg !38
  %535 = load i16, ptr addrspace(3) %223, align 2, !dbg !38
  %536 = load i16, ptr addrspace(3) %227, align 2, !dbg !38
  %537 = load i16, ptr addrspace(3) %231, align 2, !dbg !38
  %538 = load i16, ptr addrspace(3) %235, align 2, !dbg !38
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %523) #2, !dbg !39
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %524) #2, !dbg !39
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %525) #2, !dbg !39
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %526) #2, !dbg !39
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %527) #2, !dbg !39
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %528) #2, !dbg !39
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %529) #2, !dbg !39
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %530) #2, !dbg !39
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %531) #2, !dbg !39
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %532) #2, !dbg !39
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %533) #2, !dbg !39
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %534) #2, !dbg !39
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %535) #2, !dbg !39
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %536) #2, !dbg !39
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %537) #2, !dbg !39
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %538) #2, !dbg !39
  %555 = select i1 %480, float %539, float 0.000000e+00, !dbg !38
  %556 = select i1 %480, float %540, float 0.000000e+00, !dbg !38
  %557 = select i1 %480, float %541, float 0.000000e+00, !dbg !38
  %558 = select i1 %480, float %542, float 0.000000e+00, !dbg !38
  %559 = select i1 %480, float %543, float 0.000000e+00, !dbg !38
  %560 = select i1 %480, float %544, float 0.000000e+00, !dbg !38
  %561 = select i1 %480, float %545, float 0.000000e+00, !dbg !38
  %562 = select i1 %480, float %546, float 0.000000e+00, !dbg !38
  %563 = select i1 %480, float %547, float 0.000000e+00, !dbg !38
  %564 = select i1 %480, float %548, float 0.000000e+00, !dbg !38
  %565 = select i1 %480, float %549, float 0.000000e+00, !dbg !38
  %566 = select i1 %480, float %550, float 0.000000e+00, !dbg !38
  %567 = select i1 %480, float %551, float 0.000000e+00, !dbg !38
  %568 = select i1 %480, float %552, float 0.000000e+00, !dbg !38
  %569 = select i1 %480, float %553, float 0.000000e+00, !dbg !38
  %570 = select i1 %480, float %554, float 0.000000e+00, !dbg !38
  %571 = fmul float %237, %413, !dbg !40
  %572 = fmul float %238, %414, !dbg !40
  %573 = fmul float %239, %415, !dbg !40
  %574 = fmul float %240, %416, !dbg !40
  %575 = fmul float %241, %417, !dbg !40
  %576 = fmul float %242, %418, !dbg !40
  %577 = fmul float %243, %419, !dbg !40
  %578 = fmul float %244, %420, !dbg !40
  %579 = fmul float %245, %421, !dbg !40
  %580 = fmul float %246, %422, !dbg !40
  %581 = fmul float %247, %423, !dbg !40
  %582 = fmul float %248, %424, !dbg !40
  %583 = fmul float %249, %425, !dbg !40
  %584 = fmul float %250, %426, !dbg !40
  %585 = fmul float %251, %427, !dbg !40
  %586 = fmul float %252, %428, !dbg !40
  %587 = icmp sgt i32 %31, 127, !dbg !41
  %588 = icmp sgt i32 %32, 127, !dbg !41
  %589 = icmp sgt i32 %37, 127, !dbg !41
  %590 = add nsw i32 %.decomposed, -65536, !dbg !42
  %591 = add i32 %58, %590, !dbg !43
  %592 = add i32 %60, %590, !dbg !43
  %593 = sext i32 %591 to i64, !dbg !44
  %594 = getelementptr i16, ptr addrspace(1) %0, i64 %593, !dbg !44
  %595 = sext i32 %592 to i64, !dbg !44
  %596 = getelementptr i16, ptr addrspace(1) %0, i64 %595, !dbg !44
  %597 = and i32 %29, 67108862, !dbg !45
  %598 = icmp eq i32 %597, 2, !dbg !45
  %599 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %594, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598) #2, !dbg !46
  %600 = extractvalue { i32, i32, i32, i32 } %599, 0, !dbg !46
  %601 = extractvalue { i32, i32, i32, i32 } %599, 1, !dbg !46
  %602 = extractvalue { i32, i32, i32, i32 } %599, 2, !dbg !46
  %603 = extractvalue { i32, i32, i32, i32 } %599, 3, !dbg !46
  %604 = trunc i32 %600 to i16, !dbg !46
  %extelt.offset32 = lshr i32 %600, 16, !dbg !46
  %605 = trunc i32 %extelt.offset32 to i16, !dbg !46
  %606 = trunc i32 %601 to i16, !dbg !46
  %extelt.offset33 = lshr i32 %601, 16, !dbg !46
  %607 = trunc i32 %extelt.offset33 to i16, !dbg !46
  %608 = trunc i32 %602 to i16, !dbg !46
  %extelt.offset34 = lshr i32 %602, 16, !dbg !46
  %609 = trunc i32 %extelt.offset34 to i16, !dbg !46
  %610 = trunc i32 %603 to i16, !dbg !46
  %extelt.offset35 = lshr i32 %603, 16, !dbg !46
  %611 = trunc i32 %extelt.offset35 to i16, !dbg !46
  %612 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %596, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598) #2, !dbg !46
  %613 = extractvalue { i32, i32, i32, i32 } %612, 0, !dbg !46
  %614 = extractvalue { i32, i32, i32, i32 } %612, 1, !dbg !46
  %615 = extractvalue { i32, i32, i32, i32 } %612, 2, !dbg !46
  %616 = extractvalue { i32, i32, i32, i32 } %612, 3, !dbg !46
  %617 = trunc i32 %613 to i16, !dbg !46
  %extelt.offset36 = lshr i32 %613, 16, !dbg !46
  %618 = trunc i32 %extelt.offset36 to i16, !dbg !46
  %619 = trunc i32 %614 to i16, !dbg !46
  %extelt.offset37 = lshr i32 %614, 16, !dbg !46
  %620 = trunc i32 %extelt.offset37 to i16, !dbg !46
  %621 = trunc i32 %615 to i16, !dbg !46
  %extelt.offset38 = lshr i32 %615, 16, !dbg !46
  %622 = trunc i32 %extelt.offset38 to i16, !dbg !46
  %623 = trunc i32 %616 to i16, !dbg !46
  %extelt.offset39 = lshr i32 %616, 16, !dbg !46
  %624 = trunc i32 %extelt.offset39 to i16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %625 = insertelement <1 x i16> undef, i16 %604, i64 0, !dbg !47
  store <1 x i16> %625, ptr addrspace(3) %95, align 2, !dbg !47
  %626 = insertelement <1 x i16> undef, i16 %605, i64 0, !dbg !47
  store <1 x i16> %626, ptr addrspace(3) %101, align 2, !dbg !47
  %627 = insertelement <1 x i16> undef, i16 %606, i64 0, !dbg !47
  store <1 x i16> %627, ptr addrspace(3) %107, align 2, !dbg !47
  %628 = insertelement <1 x i16> undef, i16 %607, i64 0, !dbg !47
  store <1 x i16> %628, ptr addrspace(3) %113, align 2, !dbg !47
  %629 = insertelement <1 x i16> undef, i16 %608, i64 0, !dbg !47
  store <1 x i16> %629, ptr addrspace(3) %119, align 2, !dbg !47
  %630 = insertelement <1 x i16> undef, i16 %609, i64 0, !dbg !47
  store <1 x i16> %630, ptr addrspace(3) %125, align 2, !dbg !47
  %631 = insertelement <1 x i16> undef, i16 %610, i64 0, !dbg !47
  store <1 x i16> %631, ptr addrspace(3) %131, align 2, !dbg !47
  %632 = insertelement <1 x i16> undef, i16 %611, i64 0, !dbg !47
  store <1 x i16> %632, ptr addrspace(3) %137, align 2, !dbg !47
  %633 = insertelement <1 x i16> undef, i16 %617, i64 0, !dbg !47
  store <1 x i16> %633, ptr addrspace(3) %141, align 2, !dbg !47
  %634 = insertelement <1 x i16> undef, i16 %618, i64 0, !dbg !47
  store <1 x i16> %634, ptr addrspace(3) %145, align 2, !dbg !47
  %635 = insertelement <1 x i16> undef, i16 %619, i64 0, !dbg !47
  store <1 x i16> %635, ptr addrspace(3) %149, align 2, !dbg !47
  %636 = insertelement <1 x i16> undef, i16 %620, i64 0, !dbg !47
  store <1 x i16> %636, ptr addrspace(3) %153, align 2, !dbg !47
  %637 = insertelement <1 x i16> undef, i16 %621, i64 0, !dbg !47
  store <1 x i16> %637, ptr addrspace(3) %157, align 2, !dbg !47
  %638 = insertelement <1 x i16> undef, i16 %622, i64 0, !dbg !47
  store <1 x i16> %638, ptr addrspace(3) %161, align 2, !dbg !47
  %639 = insertelement <1 x i16> undef, i16 %623, i64 0, !dbg !47
  store <1 x i16> %639, ptr addrspace(3) %165, align 2, !dbg !47
  %640 = insertelement <1 x i16> undef, i16 %624, i64 0, !dbg !47
  store <1 x i16> %640, ptr addrspace(3) %169, align 2, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %641 = load i16, ptr addrspace(3) %174, align 2, !dbg !47
  %642 = load i16, ptr addrspace(3) %178, align 2, !dbg !47
  %643 = load i16, ptr addrspace(3) %182, align 2, !dbg !47
  %644 = load i16, ptr addrspace(3) %186, align 2, !dbg !47
  %645 = load i16, ptr addrspace(3) %190, align 2, !dbg !47
  %646 = load i16, ptr addrspace(3) %194, align 2, !dbg !47
  %647 = load i16, ptr addrspace(3) %198, align 2, !dbg !47
  %648 = load i16, ptr addrspace(3) %202, align 2, !dbg !47
  %649 = load i16, ptr addrspace(3) %207, align 2, !dbg !47
  %650 = load i16, ptr addrspace(3) %211, align 2, !dbg !47
  %651 = load i16, ptr addrspace(3) %215, align 2, !dbg !47
  %652 = load i16, ptr addrspace(3) %219, align 2, !dbg !47
  %653 = load i16, ptr addrspace(3) %223, align 2, !dbg !47
  %654 = load i16, ptr addrspace(3) %227, align 2, !dbg !47
  %655 = load i16, ptr addrspace(3) %231, align 2, !dbg !47
  %656 = load i16, ptr addrspace(3) %235, align 2, !dbg !47
  %657 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %641) #2, !dbg !47
  %658 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %642) #2, !dbg !47
  %659 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %643) #2, !dbg !47
  %660 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %644) #2, !dbg !47
  %661 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %645) #2, !dbg !47
  %662 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %646) #2, !dbg !47
  %663 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %647) #2, !dbg !47
  %664 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %648) #2, !dbg !47
  %665 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %649) #2, !dbg !47
  %666 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %650) #2, !dbg !47
  %667 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %651) #2, !dbg !47
  %668 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %652) #2, !dbg !47
  %669 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %653) #2, !dbg !47
  %670 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %654) #2, !dbg !47
  %671 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %655) #2, !dbg !47
  %672 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %656) #2, !dbg !47
  %673 = add i32 %37, -128, !dbg !48
  %674 = add i32 %673, %253, !dbg !49
  %675 = add i32 %673, %254, !dbg !49
  %676 = sext i32 %674 to i64, !dbg !50
  %677 = getelementptr i16, ptr addrspace(1) %2, i64 %676, !dbg !50
  %678 = sext i32 %675 to i64, !dbg !50
  %679 = getelementptr i16, ptr addrspace(1) %2, i64 %678, !dbg !50
  %680 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %677, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598) #2, !dbg !51
  %681 = extractvalue { i32, i32, i32, i32 } %680, 0, !dbg !51
  %682 = extractvalue { i32, i32, i32, i32 } %680, 1, !dbg !51
  %683 = extractvalue { i32, i32, i32, i32 } %680, 2, !dbg !51
  %684 = extractvalue { i32, i32, i32, i32 } %680, 3, !dbg !51
  %685 = trunc i32 %681 to i16, !dbg !51
  %extelt.offset40 = lshr i32 %681, 16, !dbg !51
  %686 = trunc i32 %extelt.offset40 to i16, !dbg !51
  %687 = trunc i32 %682 to i16, !dbg !51
  %extelt.offset41 = lshr i32 %682, 16, !dbg !51
  %688 = trunc i32 %extelt.offset41 to i16, !dbg !51
  %689 = trunc i32 %683 to i16, !dbg !51
  %extelt.offset42 = lshr i32 %683, 16, !dbg !51
  %690 = trunc i32 %extelt.offset42 to i16, !dbg !51
  %691 = trunc i32 %684 to i16, !dbg !51
  %extelt.offset43 = lshr i32 %684, 16, !dbg !51
  %692 = trunc i32 %extelt.offset43 to i16, !dbg !51
  %693 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %679, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598) #2, !dbg !51
  %694 = extractvalue { i32, i32, i32, i32 } %693, 0, !dbg !51
  %695 = extractvalue { i32, i32, i32, i32 } %693, 1, !dbg !51
  %696 = extractvalue { i32, i32, i32, i32 } %693, 2, !dbg !51
  %697 = extractvalue { i32, i32, i32, i32 } %693, 3, !dbg !51
  %698 = trunc i32 %694 to i16, !dbg !51
  %extelt.offset44 = lshr i32 %694, 16, !dbg !51
  %699 = trunc i32 %extelt.offset44 to i16, !dbg !51
  %700 = trunc i32 %695 to i16, !dbg !51
  %extelt.offset45 = lshr i32 %695, 16, !dbg !51
  %701 = trunc i32 %extelt.offset45 to i16, !dbg !51
  %702 = trunc i32 %696 to i16, !dbg !51
  %extelt.offset46 = lshr i32 %696, 16, !dbg !51
  %703 = trunc i32 %extelt.offset46 to i16, !dbg !51
  %704 = trunc i32 %697 to i16, !dbg !51
  %extelt.offset47 = lshr i32 %697, 16, !dbg !51
  %705 = trunc i32 %extelt.offset47 to i16, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %706 = insertelement <1 x i16> undef, i16 %685, i64 0, !dbg !52
  store <1 x i16> %706, ptr addrspace(3) %290, align 2, !dbg !52
  %707 = insertelement <1 x i16> undef, i16 %686, i64 0, !dbg !52
  store <1 x i16> %707, ptr addrspace(3) %295, align 2, !dbg !52
  %708 = insertelement <1 x i16> undef, i16 %687, i64 0, !dbg !52
  store <1 x i16> %708, ptr addrspace(3) %300, align 2, !dbg !52
  %709 = insertelement <1 x i16> undef, i16 %688, i64 0, !dbg !52
  store <1 x i16> %709, ptr addrspace(3) %305, align 2, !dbg !52
  %710 = insertelement <1 x i16> undef, i16 %689, i64 0, !dbg !52
  store <1 x i16> %710, ptr addrspace(3) %310, align 2, !dbg !52
  %711 = insertelement <1 x i16> undef, i16 %690, i64 0, !dbg !52
  store <1 x i16> %711, ptr addrspace(3) %315, align 2, !dbg !52
  %712 = insertelement <1 x i16> undef, i16 %691, i64 0, !dbg !52
  store <1 x i16> %712, ptr addrspace(3) %320, align 2, !dbg !52
  %713 = insertelement <1 x i16> undef, i16 %692, i64 0, !dbg !52
  store <1 x i16> %713, ptr addrspace(3) %325, align 2, !dbg !52
  %714 = insertelement <1 x i16> undef, i16 %698, i64 0, !dbg !52
  store <1 x i16> %714, ptr addrspace(3) %329, align 2, !dbg !52
  %715 = insertelement <1 x i16> undef, i16 %699, i64 0, !dbg !52
  store <1 x i16> %715, ptr addrspace(3) %333, align 2, !dbg !52
  %716 = insertelement <1 x i16> undef, i16 %700, i64 0, !dbg !52
  store <1 x i16> %716, ptr addrspace(3) %337, align 2, !dbg !52
  %717 = insertelement <1 x i16> undef, i16 %701, i64 0, !dbg !52
  store <1 x i16> %717, ptr addrspace(3) %341, align 2, !dbg !52
  %718 = insertelement <1 x i16> undef, i16 %702, i64 0, !dbg !52
  store <1 x i16> %718, ptr addrspace(3) %345, align 2, !dbg !52
  %719 = insertelement <1 x i16> undef, i16 %703, i64 0, !dbg !52
  store <1 x i16> %719, ptr addrspace(3) %349, align 2, !dbg !52
  %720 = insertelement <1 x i16> undef, i16 %704, i64 0, !dbg !52
  store <1 x i16> %720, ptr addrspace(3) %353, align 2, !dbg !52
  %721 = insertelement <1 x i16> undef, i16 %705, i64 0, !dbg !52
  store <1 x i16> %721, ptr addrspace(3) %357, align 2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %722 = load i16, ptr addrspace(3) %362, align 16, !dbg !52
  %723 = load i16, ptr addrspace(3) %364, align 2, !dbg !52
  %724 = load i16, ptr addrspace(3) %366, align 4, !dbg !52
  %725 = load i16, ptr addrspace(3) %368, align 2, !dbg !52
  %726 = load i16, ptr addrspace(3) %370, align 8, !dbg !52
  %727 = load i16, ptr addrspace(3) %372, align 2, !dbg !52
  %728 = load i16, ptr addrspace(3) %374, align 4, !dbg !52
  %729 = load i16, ptr addrspace(3) %376, align 2, !dbg !52
  %730 = load i16, ptr addrspace(3) %381, align 16, !dbg !52
  %731 = load i16, ptr addrspace(3) %383, align 2, !dbg !52
  %732 = load i16, ptr addrspace(3) %385, align 4, !dbg !52
  %733 = load i16, ptr addrspace(3) %387, align 2, !dbg !52
  %734 = load i16, ptr addrspace(3) %389, align 8, !dbg !52
  %735 = load i16, ptr addrspace(3) %391, align 2, !dbg !52
  %736 = load i16, ptr addrspace(3) %393, align 4, !dbg !52
  %737 = load i16, ptr addrspace(3) %395, align 2, !dbg !52
  %738 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %722) #2, !dbg !52
  %739 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %723) #2, !dbg !52
  %740 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %724) #2, !dbg !52
  %741 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %725) #2, !dbg !52
  %742 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %726) #2, !dbg !52
  %743 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %727) #2, !dbg !52
  %744 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %728) #2, !dbg !52
  %745 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %729) #2, !dbg !52
  %746 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %730) #2, !dbg !52
  %747 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %731) #2, !dbg !52
  %748 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %732) #2, !dbg !52
  %749 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %733) #2, !dbg !52
  %750 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %734) #2, !dbg !52
  %751 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %735) #2, !dbg !52
  %752 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %736) #2, !dbg !52
  %753 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %737) #2, !dbg !52
  %754 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %685) #2, !dbg !52
  %755 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %686) #2, !dbg !52
  %756 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %687) #2, !dbg !52
  %757 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %688) #2, !dbg !52
  %758 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %689) #2, !dbg !52
  %759 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %690) #2, !dbg !52
  %760 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %691) #2, !dbg !52
  %761 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %692) #2, !dbg !52
  %762 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %698) #2, !dbg !52
  %763 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %699) #2, !dbg !52
  %764 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %700) #2, !dbg !52
  %765 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %701) #2, !dbg !52
  %766 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %702) #2, !dbg !52
  %767 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %703) #2, !dbg !52
  %768 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %704) #2, !dbg !52
  %769 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %705) #2, !dbg !52
  %770 = fmul float %657, %754, !dbg !53
  %771 = fmul float %658, %755, !dbg !53
  %772 = fmul float %659, %756, !dbg !53
  %773 = fmul float %660, %757, !dbg !53
  %774 = fmul float %661, %758, !dbg !53
  %775 = fmul float %662, %759, !dbg !53
  %776 = fmul float %663, %760, !dbg !53
  %777 = fmul float %664, %761, !dbg !53
  %778 = fmul float %665, %762, !dbg !53
  %779 = fmul float %666, %763, !dbg !53
  %780 = fmul float %667, %764, !dbg !53
  %781 = fmul float %668, %765, !dbg !53
  %782 = fmul float %669, %766, !dbg !53
  %783 = fmul float %670, %767, !dbg !53
  %784 = fmul float %671, %768, !dbg !53
  %785 = fmul float %672, %769, !dbg !53
  %786 = fsub float 0.000000e+00, %770, !dbg !54
  %787 = fsub float 0.000000e+00, %771, !dbg !54
  %788 = fsub float 0.000000e+00, %772, !dbg !54
  %789 = fsub float 0.000000e+00, %773, !dbg !54
  %790 = fsub float 0.000000e+00, %774, !dbg !54
  %791 = fsub float 0.000000e+00, %775, !dbg !54
  %792 = fsub float 0.000000e+00, %776, !dbg !54
  %793 = fsub float 0.000000e+00, %777, !dbg !54
  %794 = fsub float 0.000000e+00, %778, !dbg !54
  %795 = fsub float 0.000000e+00, %779, !dbg !54
  %796 = fsub float 0.000000e+00, %780, !dbg !54
  %797 = fsub float 0.000000e+00, %781, !dbg !54
  %798 = fsub float 0.000000e+00, %782, !dbg !54
  %799 = fsub float 0.000000e+00, %783, !dbg !54
  %800 = fsub float 0.000000e+00, %784, !dbg !54
  %801 = fsub float 0.000000e+00, %785, !dbg !54
  %802 = select i1 %589, float %786, float 0.000000e+00, !dbg !38
  %803 = select i1 %589, float %787, float 0.000000e+00, !dbg !38
  %804 = select i1 %589, float %788, float 0.000000e+00, !dbg !38
  %805 = select i1 %589, float %789, float 0.000000e+00, !dbg !38
  %806 = select i1 %589, float %790, float 0.000000e+00, !dbg !38
  %807 = select i1 %589, float %791, float 0.000000e+00, !dbg !38
  %808 = select i1 %589, float %792, float 0.000000e+00, !dbg !38
  %809 = select i1 %589, float %793, float 0.000000e+00, !dbg !38
  %810 = select i1 %589, float %794, float 0.000000e+00, !dbg !38
  %811 = select i1 %589, float %795, float 0.000000e+00, !dbg !38
  %812 = select i1 %589, float %796, float 0.000000e+00, !dbg !38
  %813 = select i1 %589, float %797, float 0.000000e+00, !dbg !38
  %814 = select i1 %589, float %798, float 0.000000e+00, !dbg !38
  %815 = select i1 %589, float %799, float 0.000000e+00, !dbg !38
  %816 = select i1 %589, float %800, float 0.000000e+00, !dbg !38
  %817 = select i1 %589, float %801, float 0.000000e+00, !dbg !38
  %818 = fadd float %571, %802, !dbg !55
  %819 = fadd float %572, %803, !dbg !55
  %820 = fadd float %573, %804, !dbg !55
  %821 = fadd float %574, %805, !dbg !55
  %822 = fadd float %575, %806, !dbg !55
  %823 = fadd float %576, %807, !dbg !55
  %824 = fadd float %577, %808, !dbg !55
  %825 = fadd float %578, %809, !dbg !55
  %826 = fadd float %579, %810, !dbg !55
  %827 = fadd float %580, %811, !dbg !55
  %828 = fadd float %581, %812, !dbg !55
  %829 = fadd float %582, %813, !dbg !55
  %830 = fadd float %583, %814, !dbg !55
  %831 = fadd float %584, %815, !dbg !55
  %832 = fadd float %585, %816, !dbg !55
  %833 = fadd float %586, %817, !dbg !55
  %834 = icmp slt i32 %31, 128, !dbg !56
  %835 = icmp slt i32 %32, 128, !dbg !56
  %836 = icmp slt i32 %37, 128, !dbg !56
  %837 = add nsw i32 %.decomposed, 65536, !dbg !57
  %838 = add i32 %58, %837, !dbg !58
  %839 = add i32 %60, %837, !dbg !58
  %840 = sext i32 %838 to i64, !dbg !59
  %841 = getelementptr i16, ptr addrspace(1) %0, i64 %840, !dbg !59
  %842 = sext i32 %839 to i64, !dbg !59
  %843 = getelementptr i16, ptr addrspace(1) %0, i64 %842, !dbg !59
  %844 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %841, i1 %834, i32 0, i1 %834, i32 0, i1 %834, i32 0, i1 %834, i32 0, i1 %834) #2, !dbg !60
  %845 = extractvalue { i32, i32, i32, i32 } %844, 0, !dbg !60
  %846 = extractvalue { i32, i32, i32, i32 } %844, 1, !dbg !60
  %847 = extractvalue { i32, i32, i32, i32 } %844, 2, !dbg !60
  %848 = extractvalue { i32, i32, i32, i32 } %844, 3, !dbg !60
  %849 = trunc i32 %845 to i16, !dbg !60
  %extelt.offset48 = lshr i32 %845, 16, !dbg !60
  %850 = trunc i32 %extelt.offset48 to i16, !dbg !60
  %851 = trunc i32 %846 to i16, !dbg !60
  %extelt.offset49 = lshr i32 %846, 16, !dbg !60
  %852 = trunc i32 %extelt.offset49 to i16, !dbg !60
  %853 = trunc i32 %847 to i16, !dbg !60
  %extelt.offset50 = lshr i32 %847, 16, !dbg !60
  %854 = trunc i32 %extelt.offset50 to i16, !dbg !60
  %855 = trunc i32 %848 to i16, !dbg !60
  %extelt.offset51 = lshr i32 %848, 16, !dbg !60
  %856 = trunc i32 %extelt.offset51 to i16, !dbg !60
  %857 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %843, i1 %835, i32 0, i1 %835, i32 0, i1 %835, i32 0, i1 %835, i32 0, i1 %835) #2, !dbg !60
  %858 = extractvalue { i32, i32, i32, i32 } %857, 0, !dbg !60
  %859 = extractvalue { i32, i32, i32, i32 } %857, 1, !dbg !60
  %860 = extractvalue { i32, i32, i32, i32 } %857, 2, !dbg !60
  %861 = extractvalue { i32, i32, i32, i32 } %857, 3, !dbg !60
  %862 = trunc i32 %858 to i16, !dbg !60
  %extelt.offset52 = lshr i32 %858, 16, !dbg !60
  %863 = trunc i32 %extelt.offset52 to i16, !dbg !60
  %864 = trunc i32 %859 to i16, !dbg !60
  %extelt.offset53 = lshr i32 %859, 16, !dbg !60
  %865 = trunc i32 %extelt.offset53 to i16, !dbg !60
  %866 = trunc i32 %860 to i16, !dbg !60
  %extelt.offset54 = lshr i32 %860, 16, !dbg !60
  %867 = trunc i32 %extelt.offset54 to i16, !dbg !60
  %868 = trunc i32 %861 to i16, !dbg !60
  %extelt.offset55 = lshr i32 %861, 16, !dbg !60
  %869 = trunc i32 %extelt.offset55 to i16, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %870 = insertelement <1 x i16> undef, i16 %849, i64 0, !dbg !61
  store <1 x i16> %870, ptr addrspace(3) %95, align 2, !dbg !61
  %871 = insertelement <1 x i16> undef, i16 %850, i64 0, !dbg !61
  store <1 x i16> %871, ptr addrspace(3) %101, align 2, !dbg !61
  %872 = insertelement <1 x i16> undef, i16 %851, i64 0, !dbg !61
  store <1 x i16> %872, ptr addrspace(3) %107, align 2, !dbg !61
  %873 = insertelement <1 x i16> undef, i16 %852, i64 0, !dbg !61
  store <1 x i16> %873, ptr addrspace(3) %113, align 2, !dbg !61
  %874 = insertelement <1 x i16> undef, i16 %853, i64 0, !dbg !61
  store <1 x i16> %874, ptr addrspace(3) %119, align 2, !dbg !61
  %875 = insertelement <1 x i16> undef, i16 %854, i64 0, !dbg !61
  store <1 x i16> %875, ptr addrspace(3) %125, align 2, !dbg !61
  %876 = insertelement <1 x i16> undef, i16 %855, i64 0, !dbg !61
  store <1 x i16> %876, ptr addrspace(3) %131, align 2, !dbg !61
  %877 = insertelement <1 x i16> undef, i16 %856, i64 0, !dbg !61
  store <1 x i16> %877, ptr addrspace(3) %137, align 2, !dbg !61
  %878 = insertelement <1 x i16> undef, i16 %862, i64 0, !dbg !61
  store <1 x i16> %878, ptr addrspace(3) %141, align 2, !dbg !61
  %879 = insertelement <1 x i16> undef, i16 %863, i64 0, !dbg !61
  store <1 x i16> %879, ptr addrspace(3) %145, align 2, !dbg !61
  %880 = insertelement <1 x i16> undef, i16 %864, i64 0, !dbg !61
  store <1 x i16> %880, ptr addrspace(3) %149, align 2, !dbg !61
  %881 = insertelement <1 x i16> undef, i16 %865, i64 0, !dbg !61
  store <1 x i16> %881, ptr addrspace(3) %153, align 2, !dbg !61
  %882 = insertelement <1 x i16> undef, i16 %866, i64 0, !dbg !61
  store <1 x i16> %882, ptr addrspace(3) %157, align 2, !dbg !61
  %883 = insertelement <1 x i16> undef, i16 %867, i64 0, !dbg !61
  store <1 x i16> %883, ptr addrspace(3) %161, align 2, !dbg !61
  %884 = insertelement <1 x i16> undef, i16 %868, i64 0, !dbg !61
  store <1 x i16> %884, ptr addrspace(3) %165, align 2, !dbg !61
  %885 = insertelement <1 x i16> undef, i16 %869, i64 0, !dbg !61
  store <1 x i16> %885, ptr addrspace(3) %169, align 2, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %886 = load i16, ptr addrspace(3) %174, align 2, !dbg !61
  %887 = load i16, ptr addrspace(3) %178, align 2, !dbg !61
  %888 = load i16, ptr addrspace(3) %182, align 2, !dbg !61
  %889 = load i16, ptr addrspace(3) %186, align 2, !dbg !61
  %890 = load i16, ptr addrspace(3) %190, align 2, !dbg !61
  %891 = load i16, ptr addrspace(3) %194, align 2, !dbg !61
  %892 = load i16, ptr addrspace(3) %198, align 2, !dbg !61
  %893 = load i16, ptr addrspace(3) %202, align 2, !dbg !61
  %894 = load i16, ptr addrspace(3) %207, align 2, !dbg !61
  %895 = load i16, ptr addrspace(3) %211, align 2, !dbg !61
  %896 = load i16, ptr addrspace(3) %215, align 2, !dbg !61
  %897 = load i16, ptr addrspace(3) %219, align 2, !dbg !61
  %898 = load i16, ptr addrspace(3) %223, align 2, !dbg !61
  %899 = load i16, ptr addrspace(3) %227, align 2, !dbg !61
  %900 = load i16, ptr addrspace(3) %231, align 2, !dbg !61
  %901 = load i16, ptr addrspace(3) %235, align 2, !dbg !61
  %902 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %886) #2, !dbg !61
  %903 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %887) #2, !dbg !61
  %904 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %888) #2, !dbg !61
  %905 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %889) #2, !dbg !61
  %906 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %890) #2, !dbg !61
  %907 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %891) #2, !dbg !61
  %908 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %892) #2, !dbg !61
  %909 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %893) #2, !dbg !61
  %910 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %894) #2, !dbg !61
  %911 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %895) #2, !dbg !61
  %912 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %896) #2, !dbg !61
  %913 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %897) #2, !dbg !61
  %914 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %898) #2, !dbg !61
  %915 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %899) #2, !dbg !61
  %916 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %900) #2, !dbg !61
  %917 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %901) #2, !dbg !61
  %918 = add i32 %37, 128, !dbg !62
  %919 = add i32 %918, %253, !dbg !63
  %920 = add i32 %918, %254, !dbg !63
  %921 = sext i32 %919 to i64, !dbg !64
  %922 = getelementptr i16, ptr addrspace(1) %2, i64 %921, !dbg !64
  %923 = sext i32 %920 to i64, !dbg !64
  %924 = getelementptr i16, ptr addrspace(1) %2, i64 %923, !dbg !64
  %925 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %922, i1 %836, i32 0, i1 %836, i32 0, i1 %836, i32 0, i1 %836, i32 0, i1 %836) #2, !dbg !65
  %926 = extractvalue { i32, i32, i32, i32 } %925, 0, !dbg !65
  %927 = extractvalue { i32, i32, i32, i32 } %925, 1, !dbg !65
  %928 = extractvalue { i32, i32, i32, i32 } %925, 2, !dbg !65
  %929 = extractvalue { i32, i32, i32, i32 } %925, 3, !dbg !65
  %930 = trunc i32 %926 to i16, !dbg !65
  %extelt.offset56 = lshr i32 %926, 16, !dbg !65
  %931 = trunc i32 %extelt.offset56 to i16, !dbg !65
  %932 = trunc i32 %927 to i16, !dbg !65
  %extelt.offset57 = lshr i32 %927, 16, !dbg !65
  %933 = trunc i32 %extelt.offset57 to i16, !dbg !65
  %934 = trunc i32 %928 to i16, !dbg !65
  %extelt.offset58 = lshr i32 %928, 16, !dbg !65
  %935 = trunc i32 %extelt.offset58 to i16, !dbg !65
  %936 = trunc i32 %929 to i16, !dbg !65
  %extelt.offset59 = lshr i32 %929, 16, !dbg !65
  %937 = trunc i32 %extelt.offset59 to i16, !dbg !65
  %938 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %924, i1 %836, i32 0, i1 %836, i32 0, i1 %836, i32 0, i1 %836, i32 0, i1 %836) #2, !dbg !65
  %939 = extractvalue { i32, i32, i32, i32 } %938, 0, !dbg !65
  %940 = extractvalue { i32, i32, i32, i32 } %938, 1, !dbg !65
  %941 = extractvalue { i32, i32, i32, i32 } %938, 2, !dbg !65
  %942 = extractvalue { i32, i32, i32, i32 } %938, 3, !dbg !65
  %943 = trunc i32 %939 to i16, !dbg !65
  %extelt.offset60 = lshr i32 %939, 16, !dbg !65
  %944 = trunc i32 %extelt.offset60 to i16, !dbg !65
  %945 = trunc i32 %940 to i16, !dbg !65
  %extelt.offset61 = lshr i32 %940, 16, !dbg !65
  %946 = trunc i32 %extelt.offset61 to i16, !dbg !65
  %947 = trunc i32 %941 to i16, !dbg !65
  %extelt.offset62 = lshr i32 %941, 16, !dbg !65
  %948 = trunc i32 %extelt.offset62 to i16, !dbg !65
  %949 = trunc i32 %942 to i16, !dbg !65
  %extelt.offset63 = lshr i32 %942, 16, !dbg !65
  %950 = trunc i32 %extelt.offset63 to i16, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %951 = insertelement <1 x i16> undef, i16 %930, i64 0, !dbg !66
  store <1 x i16> %951, ptr addrspace(3) %290, align 2, !dbg !66
  %952 = insertelement <1 x i16> undef, i16 %931, i64 0, !dbg !66
  store <1 x i16> %952, ptr addrspace(3) %295, align 2, !dbg !66
  %953 = insertelement <1 x i16> undef, i16 %932, i64 0, !dbg !66
  store <1 x i16> %953, ptr addrspace(3) %300, align 2, !dbg !66
  %954 = insertelement <1 x i16> undef, i16 %933, i64 0, !dbg !66
  store <1 x i16> %954, ptr addrspace(3) %305, align 2, !dbg !66
  %955 = insertelement <1 x i16> undef, i16 %934, i64 0, !dbg !66
  store <1 x i16> %955, ptr addrspace(3) %310, align 2, !dbg !66
  %956 = insertelement <1 x i16> undef, i16 %935, i64 0, !dbg !66
  store <1 x i16> %956, ptr addrspace(3) %315, align 2, !dbg !66
  %957 = insertelement <1 x i16> undef, i16 %936, i64 0, !dbg !66
  store <1 x i16> %957, ptr addrspace(3) %320, align 2, !dbg !66
  %958 = insertelement <1 x i16> undef, i16 %937, i64 0, !dbg !66
  store <1 x i16> %958, ptr addrspace(3) %325, align 2, !dbg !66
  %959 = insertelement <1 x i16> undef, i16 %943, i64 0, !dbg !66
  store <1 x i16> %959, ptr addrspace(3) %329, align 2, !dbg !66
  %960 = insertelement <1 x i16> undef, i16 %944, i64 0, !dbg !66
  store <1 x i16> %960, ptr addrspace(3) %333, align 2, !dbg !66
  %961 = insertelement <1 x i16> undef, i16 %945, i64 0, !dbg !66
  store <1 x i16> %961, ptr addrspace(3) %337, align 2, !dbg !66
  %962 = insertelement <1 x i16> undef, i16 %946, i64 0, !dbg !66
  store <1 x i16> %962, ptr addrspace(3) %341, align 2, !dbg !66
  %963 = insertelement <1 x i16> undef, i16 %947, i64 0, !dbg !66
  store <1 x i16> %963, ptr addrspace(3) %345, align 2, !dbg !66
  %964 = insertelement <1 x i16> undef, i16 %948, i64 0, !dbg !66
  store <1 x i16> %964, ptr addrspace(3) %349, align 2, !dbg !66
  %965 = insertelement <1 x i16> undef, i16 %949, i64 0, !dbg !66
  store <1 x i16> %965, ptr addrspace(3) %353, align 2, !dbg !66
  %966 = insertelement <1 x i16> undef, i16 %950, i64 0, !dbg !66
  store <1 x i16> %966, ptr addrspace(3) %357, align 2, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %967 = load i16, ptr addrspace(3) %362, align 16, !dbg !66
  %968 = load i16, ptr addrspace(3) %364, align 2, !dbg !66
  %969 = load i16, ptr addrspace(3) %366, align 4, !dbg !66
  %970 = load i16, ptr addrspace(3) %368, align 2, !dbg !66
  %971 = load i16, ptr addrspace(3) %370, align 8, !dbg !66
  %972 = load i16, ptr addrspace(3) %372, align 2, !dbg !66
  %973 = load i16, ptr addrspace(3) %374, align 4, !dbg !66
  %974 = load i16, ptr addrspace(3) %376, align 2, !dbg !66
  %975 = load i16, ptr addrspace(3) %381, align 16, !dbg !66
  %976 = load i16, ptr addrspace(3) %383, align 2, !dbg !66
  %977 = load i16, ptr addrspace(3) %385, align 4, !dbg !66
  %978 = load i16, ptr addrspace(3) %387, align 2, !dbg !66
  %979 = load i16, ptr addrspace(3) %389, align 8, !dbg !66
  %980 = load i16, ptr addrspace(3) %391, align 2, !dbg !66
  %981 = load i16, ptr addrspace(3) %393, align 4, !dbg !66
  %982 = load i16, ptr addrspace(3) %395, align 2, !dbg !66
  %983 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %967) #2, !dbg !66
  %984 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %968) #2, !dbg !66
  %985 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %969) #2, !dbg !66
  %986 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %970) #2, !dbg !66
  %987 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %971) #2, !dbg !66
  %988 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %972) #2, !dbg !66
  %989 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %973) #2, !dbg !66
  %990 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %974) #2, !dbg !66
  %991 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %975) #2, !dbg !66
  %992 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %976) #2, !dbg !66
  %993 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %977) #2, !dbg !66
  %994 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %978) #2, !dbg !66
  %995 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %979) #2, !dbg !66
  %996 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %980) #2, !dbg !66
  %997 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %981) #2, !dbg !66
  %998 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %982) #2, !dbg !66
  %999 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %930) #2, !dbg !66
  %1000 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %931) #2, !dbg !66
  %1001 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %932) #2, !dbg !66
  %1002 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %933) #2, !dbg !66
  %1003 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %934) #2, !dbg !66
  %1004 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %935) #2, !dbg !66
  %1005 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %936) #2, !dbg !66
  %1006 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %937) #2, !dbg !66
  %1007 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %943) #2, !dbg !66
  %1008 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %944) #2, !dbg !66
  %1009 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %945) #2, !dbg !66
  %1010 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %946) #2, !dbg !66
  %1011 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %947) #2, !dbg !66
  %1012 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %948) #2, !dbg !66
  %1013 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %949) #2, !dbg !66
  %1014 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %950) #2, !dbg !66
  %1015 = fmul float %902, %999, !dbg !67
  %1016 = fmul float %903, %1000, !dbg !67
  %1017 = fmul float %904, %1001, !dbg !67
  %1018 = fmul float %905, %1002, !dbg !67
  %1019 = fmul float %906, %1003, !dbg !67
  %1020 = fmul float %907, %1004, !dbg !67
  %1021 = fmul float %908, %1005, !dbg !67
  %1022 = fmul float %909, %1006, !dbg !67
  %1023 = fmul float %910, %1007, !dbg !67
  %1024 = fmul float %911, %1008, !dbg !67
  %1025 = fmul float %912, %1009, !dbg !67
  %1026 = fmul float %913, %1010, !dbg !67
  %1027 = fmul float %914, %1011, !dbg !67
  %1028 = fmul float %915, %1012, !dbg !67
  %1029 = fmul float %916, %1013, !dbg !67
  %1030 = fmul float %917, %1014, !dbg !67
  %1031 = select i1 %836, float %1015, float 0.000000e+00, !dbg !38
  %1032 = select i1 %836, float %1016, float 0.000000e+00, !dbg !38
  %1033 = select i1 %836, float %1017, float 0.000000e+00, !dbg !38
  %1034 = select i1 %836, float %1018, float 0.000000e+00, !dbg !38
  %1035 = select i1 %836, float %1019, float 0.000000e+00, !dbg !38
  %1036 = select i1 %836, float %1020, float 0.000000e+00, !dbg !38
  %1037 = select i1 %836, float %1021, float 0.000000e+00, !dbg !38
  %1038 = select i1 %836, float %1022, float 0.000000e+00, !dbg !38
  %1039 = select i1 %836, float %1023, float 0.000000e+00, !dbg !38
  %1040 = select i1 %836, float %1024, float 0.000000e+00, !dbg !38
  %1041 = select i1 %836, float %1025, float 0.000000e+00, !dbg !38
  %1042 = select i1 %836, float %1026, float 0.000000e+00, !dbg !38
  %1043 = select i1 %836, float %1027, float 0.000000e+00, !dbg !38
  %1044 = select i1 %836, float %1028, float 0.000000e+00, !dbg !38
  %1045 = select i1 %836, float %1029, float 0.000000e+00, !dbg !38
  %1046 = select i1 %836, float %1030, float 0.000000e+00, !dbg !38
  %1047 = fadd float %818, %1031, !dbg !68
  %1048 = fadd float %819, %1032, !dbg !68
  %1049 = fadd float %820, %1033, !dbg !68
  %1050 = fadd float %821, %1034, !dbg !68
  %1051 = fadd float %822, %1035, !dbg !68
  %1052 = fadd float %823, %1036, !dbg !68
  %1053 = fadd float %824, %1037, !dbg !68
  %1054 = fadd float %825, %1038, !dbg !68
  %1055 = fadd float %826, %1039, !dbg !68
  %1056 = fadd float %827, %1040, !dbg !68
  %1057 = fadd float %828, %1041, !dbg !68
  %1058 = fadd float %829, %1042, !dbg !68
  %1059 = fadd float %830, %1043, !dbg !68
  %1060 = fadd float %831, %1044, !dbg !68
  %1061 = fadd float %832, %1045, !dbg !68
  %1062 = fadd float %833, %1046, !dbg !68
  %1063 = fadd float %555, %1047, !dbg !69
  %1064 = fadd float %556, %1048, !dbg !69
  %1065 = fadd float %557, %1049, !dbg !69
  %1066 = fadd float %558, %1050, !dbg !69
  %1067 = fadd float %559, %1051, !dbg !69
  %1068 = fadd float %560, %1052, !dbg !69
  %1069 = fadd float %561, %1053, !dbg !69
  %1070 = fadd float %562, %1054, !dbg !69
  %1071 = fadd float %563, %1055, !dbg !69
  %1072 = fadd float %564, %1056, !dbg !69
  %1073 = fadd float %565, %1057, !dbg !69
  %1074 = fadd float %566, %1058, !dbg !69
  %1075 = fadd float %567, %1059, !dbg !69
  %1076 = fadd float %568, %1060, !dbg !69
  %1077 = fadd float %569, %1061, !dbg !69
  %1078 = fadd float %570, %1062, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %1079 = getelementptr float, ptr addrspace(3) @global_smem, i64 %289, !dbg !69
  %1080 = insertelement <1 x float> undef, float %1063, i64 0, !dbg !69
  store <1 x float> %1080, ptr addrspace(3) %1079, align 4, !dbg !69
  %1081 = getelementptr float, ptr addrspace(3) @global_smem, i64 %294, !dbg !69
  %1082 = insertelement <1 x float> undef, float %1064, i64 0, !dbg !69
  store <1 x float> %1082, ptr addrspace(3) %1081, align 4, !dbg !69
  %1083 = getelementptr float, ptr addrspace(3) @global_smem, i64 %299, !dbg !69
  %1084 = insertelement <1 x float> undef, float %1065, i64 0, !dbg !69
  store <1 x float> %1084, ptr addrspace(3) %1083, align 4, !dbg !69
  %1085 = getelementptr float, ptr addrspace(3) @global_smem, i64 %304, !dbg !69
  %1086 = insertelement <1 x float> undef, float %1066, i64 0, !dbg !69
  store <1 x float> %1086, ptr addrspace(3) %1085, align 4, !dbg !69
  %1087 = getelementptr float, ptr addrspace(3) @global_smem, i64 %309, !dbg !69
  %1088 = insertelement <1 x float> undef, float %1067, i64 0, !dbg !69
  store <1 x float> %1088, ptr addrspace(3) %1087, align 4, !dbg !69
  %1089 = getelementptr float, ptr addrspace(3) @global_smem, i64 %314, !dbg !69
  %1090 = insertelement <1 x float> undef, float %1068, i64 0, !dbg !69
  store <1 x float> %1090, ptr addrspace(3) %1089, align 4, !dbg !69
  %1091 = getelementptr float, ptr addrspace(3) @global_smem, i64 %319, !dbg !69
  %1092 = insertelement <1 x float> undef, float %1069, i64 0, !dbg !69
  store <1 x float> %1092, ptr addrspace(3) %1091, align 4, !dbg !69
  %1093 = getelementptr float, ptr addrspace(3) @global_smem, i64 %324, !dbg !69
  %1094 = insertelement <1 x float> undef, float %1070, i64 0, !dbg !69
  store <1 x float> %1094, ptr addrspace(3) %1093, align 4, !dbg !69
  %1095 = getelementptr float, ptr addrspace(3) @global_smem, i64 %328, !dbg !69
  %1096 = insertelement <1 x float> undef, float %1071, i64 0, !dbg !69
  store <1 x float> %1096, ptr addrspace(3) %1095, align 4, !dbg !69
  %1097 = getelementptr float, ptr addrspace(3) @global_smem, i64 %332, !dbg !69
  %1098 = insertelement <1 x float> undef, float %1072, i64 0, !dbg !69
  store <1 x float> %1098, ptr addrspace(3) %1097, align 4, !dbg !69
  %1099 = getelementptr float, ptr addrspace(3) @global_smem, i64 %336, !dbg !69
  %1100 = insertelement <1 x float> undef, float %1073, i64 0, !dbg !69
  store <1 x float> %1100, ptr addrspace(3) %1099, align 4, !dbg !69
  %1101 = getelementptr float, ptr addrspace(3) @global_smem, i64 %340, !dbg !69
  %1102 = insertelement <1 x float> undef, float %1074, i64 0, !dbg !69
  store <1 x float> %1102, ptr addrspace(3) %1101, align 4, !dbg !69
  %1103 = getelementptr float, ptr addrspace(3) @global_smem, i64 %344, !dbg !69
  %1104 = insertelement <1 x float> undef, float %1075, i64 0, !dbg !69
  store <1 x float> %1104, ptr addrspace(3) %1103, align 4, !dbg !69
  %1105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %348, !dbg !69
  %1106 = insertelement <1 x float> undef, float %1076, i64 0, !dbg !69
  store <1 x float> %1106, ptr addrspace(3) %1105, align 4, !dbg !69
  %1107 = getelementptr float, ptr addrspace(3) @global_smem, i64 %352, !dbg !69
  %1108 = insertelement <1 x float> undef, float %1077, i64 0, !dbg !69
  store <1 x float> %1108, ptr addrspace(3) %1107, align 4, !dbg !69
  %1109 = getelementptr float, ptr addrspace(3) @global_smem, i64 %356, !dbg !69
  %1110 = insertelement <1 x float> undef, float %1078, i64 0, !dbg !69
  store <1 x float> %1110, ptr addrspace(3) %1109, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %1111 = getelementptr float, ptr addrspace(3) @global_smem, i64 %361, !dbg !69
  %1112 = getelementptr float, ptr addrspace(3) @global_smem, i64 %380, !dbg !69
  %1113 = add nsw i32 %.decomposed, 196608, !dbg !70
  %1114 = add i32 %58, %1113, !dbg !71
  %1115 = add i32 %60, %1113, !dbg !71
  %1116 = sext i32 %1114 to i64, !dbg !72
  %1117 = getelementptr i16, ptr addrspace(1) %0, i64 %1116, !dbg !72
  %1118 = sext i32 %1115 to i64, !dbg !72
  %1119 = getelementptr i16, ptr addrspace(1) %0, i64 %1118, !dbg !72
  %1120 = load <8 x float>, ptr addrspace(3) %1111, align 32, !dbg !69
  %1121 = insertelement <8 x i1> poison, i1 %478, i64 0, !dbg !38
  %1122 = shufflevector <8 x i1> %1121, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !38
  %1123 = insertelement <8 x float> poison, float %397, i64 0, !dbg !73
  %1124 = insertelement <8 x float> %1123, float %398, i64 1, !dbg !73
  %1125 = insertelement <8 x float> %1124, float %399, i64 2, !dbg !73
  %1126 = insertelement <8 x float> %1125, float %400, i64 3, !dbg !73
  %1127 = insertelement <8 x float> %1126, float %401, i64 4, !dbg !73
  %1128 = insertelement <8 x float> %1127, float %402, i64 5, !dbg !73
  %1129 = insertelement <8 x float> %1128, float %403, i64 6, !dbg !73
  %1130 = insertelement <8 x float> %1129, float %404, i64 7, !dbg !73
  %1131 = insertelement <8 x float> poison, float %462, i64 0, !dbg !73
  %1132 = insertelement <8 x float> %1131, float %463, i64 1, !dbg !73
  %1133 = insertelement <8 x float> %1132, float %464, i64 2, !dbg !73
  %1134 = insertelement <8 x float> %1133, float %465, i64 3, !dbg !73
  %1135 = insertelement <8 x float> %1134, float %466, i64 4, !dbg !73
  %1136 = insertelement <8 x float> %1135, float %467, i64 5, !dbg !73
  %1137 = insertelement <8 x float> %1136, float %468, i64 6, !dbg !73
  %1138 = insertelement <8 x float> %1137, float %469, i64 7, !dbg !73
  %1139 = fmul <8 x float> %1130, %1138, !dbg !73
  %1140 = insertelement <8 x float> poison, float %738, i64 0, !dbg !74
  %1141 = insertelement <8 x float> %1140, float %739, i64 1, !dbg !74
  %1142 = insertelement <8 x float> %1141, float %740, i64 2, !dbg !74
  %1143 = insertelement <8 x float> %1142, float %741, i64 3, !dbg !74
  %1144 = insertelement <8 x float> %1143, float %742, i64 4, !dbg !74
  %1145 = insertelement <8 x float> %1144, float %743, i64 5, !dbg !74
  %1146 = insertelement <8 x float> %1145, float %744, i64 6, !dbg !74
  %1147 = insertelement <8 x float> %1146, float %745, i64 7, !dbg !74
  %1148 = insertelement <8 x i1> poison, i1 %587, i64 0, !dbg !38
  %1149 = shufflevector <8 x i1> %1148, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !38
  %1150 = insertelement <8 x float> poison, float %983, i64 0, !dbg !75
  %1151 = insertelement <8 x float> %1150, float %984, i64 1, !dbg !75
  %1152 = insertelement <8 x float> %1151, float %985, i64 2, !dbg !75
  %1153 = insertelement <8 x float> %1152, float %986, i64 3, !dbg !75
  %1154 = insertelement <8 x float> %1153, float %987, i64 4, !dbg !75
  %1155 = insertelement <8 x float> %1154, float %988, i64 5, !dbg !75
  %1156 = insertelement <8 x float> %1155, float %989, i64 6, !dbg !75
  %1157 = insertelement <8 x float> %1156, float %990, i64 7, !dbg !75
  %1158 = insertelement <8 x i1> poison, i1 %834, i64 0, !dbg !38
  %1159 = shufflevector <8 x i1> %1158, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !38
  %1160 = load <8 x float>, ptr addrspace(3) %1112, align 32, !dbg !69
  %1161 = insertelement <8 x float> poison, float %405, i64 0, !dbg !73
  %1162 = insertelement <8 x float> %1161, float %406, i64 1, !dbg !73
  %1163 = insertelement <8 x float> %1162, float %407, i64 2, !dbg !73
  %1164 = insertelement <8 x float> %1163, float %408, i64 3, !dbg !73
  %1165 = insertelement <8 x float> %1164, float %409, i64 4, !dbg !73
  %1166 = insertelement <8 x float> %1165, float %410, i64 5, !dbg !73
  %1167 = insertelement <8 x float> %1166, float %411, i64 6, !dbg !73
  %1168 = insertelement <8 x float> %1167, float %412, i64 7, !dbg !73
  %1169 = insertelement <8 x float> poison, float %470, i64 0, !dbg !73
  %1170 = insertelement <8 x float> %1169, float %471, i64 1, !dbg !73
  %1171 = insertelement <8 x float> %1170, float %472, i64 2, !dbg !73
  %1172 = insertelement <8 x float> %1171, float %473, i64 3, !dbg !73
  %1173 = insertelement <8 x float> %1172, float %474, i64 4, !dbg !73
  %1174 = insertelement <8 x float> %1173, float %475, i64 5, !dbg !73
  %1175 = insertelement <8 x float> %1174, float %476, i64 6, !dbg !73
  %1176 = insertelement <8 x float> %1175, float %477, i64 7, !dbg !73
  %1177 = fmul <8 x float> %1168, %1176, !dbg !73
  %1178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %433, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !76
  %1179 = extractvalue { i32, i32, i32, i32 } %1178, 0, !dbg !76
  %1180 = extractvalue { i32, i32, i32, i32 } %1178, 1, !dbg !76
  %1181 = extractvalue { i32, i32, i32, i32 } %1178, 2, !dbg !76
  %1182 = extractvalue { i32, i32, i32, i32 } %1178, 3, !dbg !76
  %1183 = trunc i32 %1179 to i16, !dbg !76
  %extelt.offset64 = lshr i32 %1179, 16, !dbg !76
  %1184 = trunc i32 %extelt.offset64 to i16, !dbg !76
  %1185 = trunc i32 %1180 to i16, !dbg !76
  %extelt.offset65 = lshr i32 %1180, 16, !dbg !76
  %1186 = trunc i32 %extelt.offset65 to i16, !dbg !76
  %1187 = trunc i32 %1181 to i16, !dbg !76
  %extelt.offset66 = lshr i32 %1181, 16, !dbg !76
  %1188 = trunc i32 %extelt.offset66 to i16, !dbg !76
  %1189 = trunc i32 %1182 to i16, !dbg !76
  %extelt.offset67 = lshr i32 %1182, 16, !dbg !76
  %1190 = trunc i32 %extelt.offset67 to i16, !dbg !76
  %1191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %435, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !76
  %1192 = extractvalue { i32, i32, i32, i32 } %1191, 0, !dbg !76
  %1193 = extractvalue { i32, i32, i32, i32 } %1191, 1, !dbg !76
  %1194 = extractvalue { i32, i32, i32, i32 } %1191, 2, !dbg !76
  %1195 = extractvalue { i32, i32, i32, i32 } %1191, 3, !dbg !76
  %1196 = trunc i32 %1192 to i16, !dbg !76
  %extelt.offset68 = lshr i32 %1192, 16, !dbg !76
  %1197 = trunc i32 %extelt.offset68 to i16, !dbg !76
  %1198 = trunc i32 %1193 to i16, !dbg !76
  %extelt.offset69 = lshr i32 %1193, 16, !dbg !76
  %1199 = trunc i32 %extelt.offset69 to i16, !dbg !76
  %1200 = trunc i32 %1194 to i16, !dbg !76
  %extelt.offset70 = lshr i32 %1194, 16, !dbg !76
  %1201 = trunc i32 %extelt.offset70 to i16, !dbg !76
  %1202 = trunc i32 %1195 to i16, !dbg !76
  %extelt.offset71 = lshr i32 %1195, 16, !dbg !76
  %1203 = trunc i32 %extelt.offset71 to i16, !dbg !76
  %1204 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1183) #2, !dbg !77
  %1205 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1184) #2, !dbg !77
  %1206 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1185) #2, !dbg !77
  %1207 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1186) #2, !dbg !77
  %1208 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1187) #2, !dbg !77
  %1209 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1188) #2, !dbg !77
  %1210 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1189) #2, !dbg !77
  %1211 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1190) #2, !dbg !77
  %1212 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1196) #2, !dbg !77
  %1213 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1197) #2, !dbg !77
  %1214 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1198) #2, !dbg !77
  %1215 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1199) #2, !dbg !77
  %1216 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1200) #2, !dbg !77
  %1217 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1201) #2, !dbg !77
  %1218 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1202) #2, !dbg !77
  %1219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1203) #2, !dbg !77
  %1220 = insertelement <8 x float> poison, float %1204, i64 0, !dbg !38
  %1221 = insertelement <8 x float> %1220, float %1205, i64 1, !dbg !38
  %1222 = insertelement <8 x float> %1221, float %1206, i64 2, !dbg !38
  %1223 = insertelement <8 x float> %1222, float %1207, i64 3, !dbg !38
  %1224 = insertelement <8 x float> %1223, float %1208, i64 4, !dbg !38
  %1225 = insertelement <8 x float> %1224, float %1209, i64 5, !dbg !38
  %1226 = insertelement <8 x float> %1225, float %1210, i64 6, !dbg !38
  %1227 = insertelement <8 x float> %1226, float %1211, i64 7, !dbg !38
  %1228 = select <8 x i1> %1122, <8 x float> %1227, <8 x float> zeroinitializer, !dbg !38
  %1229 = insertelement <8 x i1> poison, i1 %479, i64 0, !dbg !38
  %1230 = shufflevector <8 x i1> %1229, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !38
  %1231 = insertelement <8 x float> poison, float %1212, i64 0, !dbg !38
  %1232 = insertelement <8 x float> %1231, float %1213, i64 1, !dbg !38
  %1233 = insertelement <8 x float> %1232, float %1214, i64 2, !dbg !38
  %1234 = insertelement <8 x float> %1233, float %1215, i64 3, !dbg !38
  %1235 = insertelement <8 x float> %1234, float %1216, i64 4, !dbg !38
  %1236 = insertelement <8 x float> %1235, float %1217, i64 5, !dbg !38
  %1237 = insertelement <8 x float> %1236, float %1218, i64 6, !dbg !38
  %1238 = insertelement <8 x float> %1237, float %1219, i64 7, !dbg !38
  %1239 = select <8 x i1> %1230, <8 x float> %1238, <8 x float> zeroinitializer, !dbg !38
  %1240 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %841, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598) #2, !dbg !78
  %1241 = extractvalue { i32, i32, i32, i32 } %1240, 0, !dbg !78
  %1242 = extractvalue { i32, i32, i32, i32 } %1240, 1, !dbg !78
  %1243 = extractvalue { i32, i32, i32, i32 } %1240, 2, !dbg !78
  %1244 = extractvalue { i32, i32, i32, i32 } %1240, 3, !dbg !78
  %1245 = trunc i32 %1241 to i16, !dbg !78
  %extelt.offset72 = lshr i32 %1241, 16, !dbg !78
  %1246 = trunc i32 %extelt.offset72 to i16, !dbg !78
  %1247 = trunc i32 %1242 to i16, !dbg !78
  %extelt.offset73 = lshr i32 %1242, 16, !dbg !78
  %1248 = trunc i32 %extelt.offset73 to i16, !dbg !78
  %1249 = trunc i32 %1243 to i16, !dbg !78
  %extelt.offset74 = lshr i32 %1243, 16, !dbg !78
  %1250 = trunc i32 %extelt.offset74 to i16, !dbg !78
  %1251 = trunc i32 %1244 to i16, !dbg !78
  %extelt.offset75 = lshr i32 %1244, 16, !dbg !78
  %1252 = trunc i32 %extelt.offset75 to i16, !dbg !78
  %1253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %843, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598, i32 0, i1 %598) #2, !dbg !78
  %1254 = extractvalue { i32, i32, i32, i32 } %1253, 0, !dbg !78
  %1255 = extractvalue { i32, i32, i32, i32 } %1253, 1, !dbg !78
  %1256 = extractvalue { i32, i32, i32, i32 } %1253, 2, !dbg !78
  %1257 = extractvalue { i32, i32, i32, i32 } %1253, 3, !dbg !78
  %1258 = trunc i32 %1254 to i16, !dbg !78
  %extelt.offset76 = lshr i32 %1254, 16, !dbg !78
  %1259 = trunc i32 %extelt.offset76 to i16, !dbg !78
  %1260 = trunc i32 %1255 to i16, !dbg !78
  %extelt.offset77 = lshr i32 %1255, 16, !dbg !78
  %1261 = trunc i32 %extelt.offset77 to i16, !dbg !78
  %1262 = trunc i32 %1256 to i16, !dbg !78
  %extelt.offset78 = lshr i32 %1256, 16, !dbg !78
  %1263 = trunc i32 %extelt.offset78 to i16, !dbg !78
  %1264 = trunc i32 %1257 to i16, !dbg !78
  %extelt.offset79 = lshr i32 %1257, 16, !dbg !78
  %1265 = trunc i32 %extelt.offset79 to i16, !dbg !78
  %1266 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1245) #2, !dbg !79
  %1267 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1246) #2, !dbg !79
  %1268 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1247) #2, !dbg !79
  %1269 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1248) #2, !dbg !79
  %1270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1249) #2, !dbg !79
  %1271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1250) #2, !dbg !79
  %1272 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1251) #2, !dbg !79
  %1273 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1252) #2, !dbg !79
  %1274 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1258) #2, !dbg !79
  %1275 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1259) #2, !dbg !79
  %1276 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1260) #2, !dbg !79
  %1277 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1261) #2, !dbg !79
  %1278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1262) #2, !dbg !79
  %1279 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1263) #2, !dbg !79
  %1280 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1264) #2, !dbg !79
  %1281 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1265) #2, !dbg !79
  %1282 = insertelement <8 x float> poison, float %1266, i64 0, !dbg !74
  %1283 = insertelement <8 x float> %1282, float %1267, i64 1, !dbg !74
  %1284 = insertelement <8 x float> %1283, float %1268, i64 2, !dbg !74
  %1285 = insertelement <8 x float> %1284, float %1269, i64 3, !dbg !74
  %1286 = insertelement <8 x float> %1285, float %1270, i64 4, !dbg !74
  %1287 = insertelement <8 x float> %1286, float %1271, i64 5, !dbg !74
  %1288 = insertelement <8 x float> %1287, float %1272, i64 6, !dbg !74
  %1289 = insertelement <8 x float> %1288, float %1273, i64 7, !dbg !74
  %1290 = fmul <8 x float> %1147, %1289, !dbg !74
  %1291 = insertelement <8 x float> poison, float %746, i64 0, !dbg !74
  %1292 = insertelement <8 x float> %1291, float %747, i64 1, !dbg !74
  %1293 = insertelement <8 x float> %1292, float %748, i64 2, !dbg !74
  %1294 = insertelement <8 x float> %1293, float %749, i64 3, !dbg !74
  %1295 = insertelement <8 x float> %1294, float %750, i64 4, !dbg !74
  %1296 = insertelement <8 x float> %1295, float %751, i64 5, !dbg !74
  %1297 = insertelement <8 x float> %1296, float %752, i64 6, !dbg !74
  %1298 = insertelement <8 x float> %1297, float %753, i64 7, !dbg !74
  %1299 = insertelement <8 x float> poison, float %1274, i64 0, !dbg !74
  %1300 = insertelement <8 x float> %1299, float %1275, i64 1, !dbg !74
  %1301 = insertelement <8 x float> %1300, float %1276, i64 2, !dbg !74
  %1302 = insertelement <8 x float> %1301, float %1277, i64 3, !dbg !74
  %1303 = insertelement <8 x float> %1302, float %1278, i64 4, !dbg !74
  %1304 = insertelement <8 x float> %1303, float %1279, i64 5, !dbg !74
  %1305 = insertelement <8 x float> %1304, float %1280, i64 6, !dbg !74
  %1306 = insertelement <8 x float> %1305, float %1281, i64 7, !dbg !74
  %1307 = fmul <8 x float> %1298, %1306, !dbg !74
  %1308 = fsub <8 x float> zeroinitializer, %1290, !dbg !80
  %1309 = fsub <8 x float> zeroinitializer, %1307, !dbg !80
  %1310 = select <8 x i1> %1149, <8 x float> %1308, <8 x float> zeroinitializer, !dbg !38
  %1311 = insertelement <8 x i1> poison, i1 %588, i64 0, !dbg !38
  %1312 = shufflevector <8 x i1> %1311, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !38
  %1313 = select <8 x i1> %1312, <8 x float> %1309, <8 x float> zeroinitializer, !dbg !38
  %1314 = fadd <8 x float> %1139, %1310, !dbg !81
  %1315 = fadd <8 x float> %1177, %1313, !dbg !81
  %1316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1117, i1 %834, i32 0, i1 %834, i32 0, i1 %834, i32 0, i1 %834, i32 0, i1 %834) #2, !dbg !82
  %1317 = extractvalue { i32, i32, i32, i32 } %1316, 0, !dbg !82
  %1318 = extractvalue { i32, i32, i32, i32 } %1316, 1, !dbg !82
  %1319 = extractvalue { i32, i32, i32, i32 } %1316, 2, !dbg !82
  %1320 = extractvalue { i32, i32, i32, i32 } %1316, 3, !dbg !82
  %1321 = trunc i32 %1317 to i16, !dbg !82
  %extelt.offset80 = lshr i32 %1317, 16, !dbg !82
  %1322 = trunc i32 %extelt.offset80 to i16, !dbg !82
  %1323 = trunc i32 %1318 to i16, !dbg !82
  %extelt.offset81 = lshr i32 %1318, 16, !dbg !82
  %1324 = trunc i32 %extelt.offset81 to i16, !dbg !82
  %1325 = trunc i32 %1319 to i16, !dbg !82
  %extelt.offset82 = lshr i32 %1319, 16, !dbg !82
  %1326 = trunc i32 %extelt.offset82 to i16, !dbg !82
  %1327 = trunc i32 %1320 to i16, !dbg !82
  %extelt.offset83 = lshr i32 %1320, 16, !dbg !82
  %1328 = trunc i32 %extelt.offset83 to i16, !dbg !82
  %1329 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1119, i1 %835, i32 0, i1 %835, i32 0, i1 %835, i32 0, i1 %835, i32 0, i1 %835) #2, !dbg !82
  %1330 = extractvalue { i32, i32, i32, i32 } %1329, 0, !dbg !82
  %1331 = extractvalue { i32, i32, i32, i32 } %1329, 1, !dbg !82
  %1332 = extractvalue { i32, i32, i32, i32 } %1329, 2, !dbg !82
  %1333 = extractvalue { i32, i32, i32, i32 } %1329, 3, !dbg !82
  %1334 = trunc i32 %1330 to i16, !dbg !82
  %extelt.offset84 = lshr i32 %1330, 16, !dbg !82
  %1335 = trunc i32 %extelt.offset84 to i16, !dbg !82
  %1336 = trunc i32 %1331 to i16, !dbg !82
  %extelt.offset85 = lshr i32 %1331, 16, !dbg !82
  %1337 = trunc i32 %extelt.offset85 to i16, !dbg !82
  %1338 = trunc i32 %1332 to i16, !dbg !82
  %extelt.offset86 = lshr i32 %1332, 16, !dbg !82
  %1339 = trunc i32 %extelt.offset86 to i16, !dbg !82
  %1340 = trunc i32 %1333 to i16, !dbg !82
  %extelt.offset87 = lshr i32 %1333, 16, !dbg !82
  %1341 = trunc i32 %extelt.offset87 to i16, !dbg !82
  %1342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1321) #2, !dbg !83
  %1343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1322) #2, !dbg !83
  %1344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1323) #2, !dbg !83
  %1345 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1324) #2, !dbg !83
  %1346 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1325) #2, !dbg !83
  %1347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1326) #2, !dbg !83
  %1348 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1327) #2, !dbg !83
  %1349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1328) #2, !dbg !83
  %1350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1334) #2, !dbg !83
  %1351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1335) #2, !dbg !83
  %1352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1336) #2, !dbg !83
  %1353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1337) #2, !dbg !83
  %1354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1338) #2, !dbg !83
  %1355 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1339) #2, !dbg !83
  %1356 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1340) #2, !dbg !83
  %1357 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1341) #2, !dbg !83
  %1358 = insertelement <8 x float> poison, float %1342, i64 0, !dbg !75
  %1359 = insertelement <8 x float> %1358, float %1343, i64 1, !dbg !75
  %1360 = insertelement <8 x float> %1359, float %1344, i64 2, !dbg !75
  %1361 = insertelement <8 x float> %1360, float %1345, i64 3, !dbg !75
  %1362 = insertelement <8 x float> %1361, float %1346, i64 4, !dbg !75
  %1363 = insertelement <8 x float> %1362, float %1347, i64 5, !dbg !75
  %1364 = insertelement <8 x float> %1363, float %1348, i64 6, !dbg !75
  %1365 = insertelement <8 x float> %1364, float %1349, i64 7, !dbg !75
  %1366 = fmul <8 x float> %1157, %1365, !dbg !75
  %1367 = insertelement <8 x float> poison, float %991, i64 0, !dbg !75
  %1368 = insertelement <8 x float> %1367, float %992, i64 1, !dbg !75
  %1369 = insertelement <8 x float> %1368, float %993, i64 2, !dbg !75
  %1370 = insertelement <8 x float> %1369, float %994, i64 3, !dbg !75
  %1371 = insertelement <8 x float> %1370, float %995, i64 4, !dbg !75
  %1372 = insertelement <8 x float> %1371, float %996, i64 5, !dbg !75
  %1373 = insertelement <8 x float> %1372, float %997, i64 6, !dbg !75
  %1374 = insertelement <8 x float> %1373, float %998, i64 7, !dbg !75
  %1375 = insertelement <8 x float> poison, float %1350, i64 0, !dbg !75
  %1376 = insertelement <8 x float> %1375, float %1351, i64 1, !dbg !75
  %1377 = insertelement <8 x float> %1376, float %1352, i64 2, !dbg !75
  %1378 = insertelement <8 x float> %1377, float %1353, i64 3, !dbg !75
  %1379 = insertelement <8 x float> %1378, float %1354, i64 4, !dbg !75
  %1380 = insertelement <8 x float> %1379, float %1355, i64 5, !dbg !75
  %1381 = insertelement <8 x float> %1380, float %1356, i64 6, !dbg !75
  %1382 = insertelement <8 x float> %1381, float %1357, i64 7, !dbg !75
  %1383 = fmul <8 x float> %1374, %1382, !dbg !75
  %1384 = select <8 x i1> %1159, <8 x float> %1366, <8 x float> zeroinitializer, !dbg !38
  %1385 = insertelement <8 x i1> poison, i1 %835, i64 0, !dbg !38
  %1386 = shufflevector <8 x i1> %1385, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !38
  %1387 = select <8 x i1> %1386, <8 x float> %1383, <8 x float> zeroinitializer, !dbg !38
  %1388 = fadd <8 x float> %1314, %1384, !dbg !84
  %1389 = fadd <8 x float> %1315, %1387, !dbg !84
  %1390 = fadd <8 x float> %1228, %1388, !dbg !85
  %1391 = fadd <8 x float> %1239, %1389, !dbg !85
  %1392 = fadd <8 x float> %1120, %1390, !dbg !86
  %1393 = fadd <8 x float> %1160, %1391, !dbg !86
  %1394 = shl i32 %49, 17, !dbg !87
  %1395 = add i32 %1394, %.decomposed119, !dbg !21
  %1396 = add i32 %1395, %53, !dbg !88
  %1397 = add i32 %1395, %54, !dbg !88
  %1398 = add i32 %1395, %55, !dbg !88
  %1399 = add i32 %1395, %56, !dbg !88
  %1400 = sext i32 %1396 to i64, !dbg !89
  %1401 = getelementptr float, ptr addrspace(1) %3, i64 %1400, !dbg !89
  %1402 = sext i32 %1397 to i64, !dbg !89
  %1403 = getelementptr float, ptr addrspace(1) %3, i64 %1402, !dbg !89
  %1404 = sext i32 %1398 to i64, !dbg !89
  %1405 = getelementptr float, ptr addrspace(1) %3, i64 %1404, !dbg !89
  %1406 = sext i32 %1399 to i64, !dbg !89
  %1407 = getelementptr float, ptr addrspace(1) %3, i64 %1406, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  store <8 x float> %1392, ptr addrspace(3) %1111, align 32, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %1408 = mul nuw nsw i32 %21, 72, !dbg !90
  %1409 = add nuw nsw i32 %1408, %18, !dbg !90
  %1410 = zext nneg i32 %1409 to i64, !dbg !90
  %1411 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1410, !dbg !90
  %1412 = load <4 x i32>, ptr addrspace(3) %1411, align 16, !dbg !90
  %1413 = mul nuw nsw i32 %22, 72, !dbg !90
  %1414 = add nuw nsw i32 %1413, %18, !dbg !90
  %1415 = zext nneg i32 %1414 to i64, !dbg !90
  %1416 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1415, !dbg !90
  %1417 = load <4 x i32>, ptr addrspace(3) %1416, align 16, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  store <8 x float> %1393, ptr addrspace(3) %1111, align 32, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %1418 = load <4 x i32>, ptr addrspace(3) %1411, align 16, !dbg !90
  %1419 = load <4 x i32>, ptr addrspace(3) %1416, align 16, !dbg !90
  %.extract = extractelement <4 x i32> %1412, i64 0, !dbg !90
  %.extract89 = extractelement <4 x i32> %1412, i64 1, !dbg !90
  %.extract91 = extractelement <4 x i32> %1412, i64 2, !dbg !90
  %.extract93 = extractelement <4 x i32> %1412, i64 3, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract89, i32 %.extract91, i32 %.extract93, ptr addrspace(1) %1401, i1 %41) #2, !dbg !90
  %.extract95 = extractelement <4 x i32> %1417, i64 0, !dbg !90
  %.extract97 = extractelement <4 x i32> %1417, i64 1, !dbg !90
  %.extract99 = extractelement <4 x i32> %1417, i64 2, !dbg !90
  %.extract101 = extractelement <4 x i32> %1417, i64 3, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract95, i32 %.extract97, i32 %.extract99, i32 %.extract101, ptr addrspace(1) %1403, i1 %42) #2, !dbg !90
  %.extract103 = extractelement <4 x i32> %1418, i64 0, !dbg !90
  %.extract105 = extractelement <4 x i32> %1418, i64 1, !dbg !90
  %.extract107 = extractelement <4 x i32> %1418, i64 2, !dbg !90
  %.extract109 = extractelement <4 x i32> %1418, i64 3, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract103, i32 %.extract105, i32 %.extract107, i32 %.extract109, ptr addrspace(1) %1405, i1 %43) #2, !dbg !90
  %.extract111 = extractelement <4 x i32> %1419, i64 0, !dbg !90
  %.extract113 = extractelement <4 x i32> %1419, i64 1, !dbg !90
  %.extract115 = extractelement <4 x i32> %1419, i64 2, !dbg !90
  %.extract117 = extractelement <4 x i32> %1419, i64 3, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract111, i32 %.extract113, i32 %.extract115, i32 %.extract117, ptr addrspace(1) %1407, i1 %44) #2, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cig4gg6ncoygy52ddkn2fif52ujktuc47s4muvbitesznnx54cch.py", directory: "/tmp/torchinductor_zeus/ig")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 24, column: 28, scope: !5)
!14 = !DILocation(line: 24, column: 33, scope: !5)
!15 = !DILocation(line: 25, column: 23, scope: !5)
!16 = !DILocation(line: 26, column: 21, scope: !5)
!17 = !DILocation(line: 29, column: 20, scope: !5)
!18 = !DILocation(line: 28, column: 18, scope: !5)
!19 = !DILocation(line: 30, column: 40, scope: !5)
!20 = !DILocation(line: 30, column: 54, scope: !5)
!21 = !DILocation(line: 30, column: 36, scope: !5)
!22 = !DILocation(line: 30, column: 47, scope: !5)
!23 = !DILocation(line: 30, column: 30, scope: !5)
!24 = !DILocation(line: 30, column: 60, scope: !5)
!25 = !DILocation(line: 30, column: 100, scope: !5)
!26 = !DILocation(line: 31, column: 40, scope: !5)
!27 = !DILocation(line: 31, column: 36, scope: !5)
!28 = !DILocation(line: 31, column: 30, scope: !5)
!29 = !DILocation(line: 31, column: 46, scope: !5)
!30 = !DILocation(line: 31, column: 86, scope: !5)
!31 = !DILocation(line: 32, column: 40, scope: !5)
!32 = !DILocation(line: 32, column: 57, scope: !5)
!33 = !DILocation(line: 32, column: 31, scope: !5)
!34 = !DILocation(line: 32, column: 70, scope: !5)
!35 = !DILocation(line: 32, column: 110, scope: !5)
!36 = !DILocation(line: 35, column: 19, scope: !5)
!37 = !DILocation(line: 36, column: 60, scope: !5)
!38 = !DILocation(line: 0, scope: !5)
!39 = !DILocation(line: 36, column: 118, scope: !5)
!40 = !DILocation(line: 41, column: 19, scope: !5)
!41 = !DILocation(line: 43, column: 20, scope: !5)
!42 = !DILocation(line: 44, column: 42, scope: !5)
!43 = !DILocation(line: 44, column: 59, scope: !5)
!44 = !DILocation(line: 44, column: 31, scope: !5)
!45 = !DILocation(line: 44, column: 80, scope: !5)
!46 = !DILocation(line: 44, column: 72, scope: !5)
!47 = !DILocation(line: 44, column: 131, scope: !5)
!48 = !DILocation(line: 45, column: 40, scope: !5)
!49 = !DILocation(line: 45, column: 46, scope: !5)
!50 = !DILocation(line: 45, column: 31, scope: !5)
!51 = !DILocation(line: 45, column: 56, scope: !5)
!52 = !DILocation(line: 45, column: 115, scope: !5)
!53 = !DILocation(line: 46, column: 20, scope: !5)
!54 = !DILocation(line: 47, column: 13, scope: !5)
!55 = !DILocation(line: 51, column: 20, scope: !5)
!56 = !DILocation(line: 52, column: 19, scope: !5)
!57 = !DILocation(line: 53, column: 39, scope: !5)
!58 = !DILocation(line: 53, column: 56, scope: !5)
!59 = !DILocation(line: 53, column: 31, scope: !5)
!60 = !DILocation(line: 53, column: 69, scope: !5)
!61 = !DILocation(line: 53, column: 128, scope: !5)
!62 = !DILocation(line: 54, column: 37, scope: !5)
!63 = !DILocation(line: 54, column: 43, scope: !5)
!64 = !DILocation(line: 54, column: 31, scope: !5)
!65 = !DILocation(line: 54, column: 53, scope: !5)
!66 = !DILocation(line: 54, column: 112, scope: !5)
!67 = !DILocation(line: 55, column: 20, scope: !5)
!68 = !DILocation(line: 59, column: 20, scope: !5)
!69 = !DILocation(line: 60, column: 19, scope: !5)
!70 = !DILocation(line: 74, column: 40, scope: !5)
!71 = !DILocation(line: 74, column: 57, scope: !5)
!72 = !DILocation(line: 74, column: 31, scope: !5)
!73 = !DILocation(line: 66, column: 20, scope: !5)
!74 = !DILocation(line: 68, column: 20, scope: !5)
!75 = !DILocation(line: 75, column: 20, scope: !5)
!76 = !DILocation(line: 62, column: 70, scope: !5)
!77 = !DILocation(line: 62, column: 128, scope: !5)
!78 = !DILocation(line: 67, column: 69, scope: !5)
!79 = !DILocation(line: 67, column: 128, scope: !5)
!80 = !DILocation(line: 69, column: 13, scope: !5)
!81 = !DILocation(line: 73, column: 20, scope: !5)
!82 = !DILocation(line: 74, column: 70, scope: !5)
!83 = !DILocation(line: 74, column: 129, scope: !5)
!84 = !DILocation(line: 79, column: 20, scope: !5)
!85 = !DILocation(line: 80, column: 20, scope: !5)
!86 = !DILocation(line: 82, column: 20, scope: !5)
!87 = !DILocation(line: 83, column: 49, scope: !5)
!88 = !DILocation(line: 83, column: 42, scope: !5)
!89 = !DILocation(line: 83, column: 25, scope: !5)
!90 = !DILocation(line: 83, column: 62, scope: !5)
!91 = !DILocation(line: 83, column: 4, scope: !5)
