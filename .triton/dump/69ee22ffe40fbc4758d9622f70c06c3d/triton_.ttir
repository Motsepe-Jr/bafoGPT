module {
  tt.func public @triton__0d1d2d3d4d5d6de7de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<256> : tensor<256x1xi64>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<256x4xbf16>
    %cst_1 = arith.constant dense<128> : tensor<256x1xi64>
    %cst_2 = arith.constant dense<524288> : tensor<256x1xi32>
    %cst_3 = arith.constant dense<524288> : tensor<1x4xi32>
    %cst_4 = arith.constant dense<2048> : tensor<256x1xi32>
    %cst_5 = arith.constant dense<3> : tensor<1x4xi64>
    %cst_6 = arith.constant dense<128> : tensor<256x1xi32>
    %cst_7 = arith.constant dense<-128> : tensor<256x1xi32>
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<256x4xf32>
    %cst_9 = arith.constant dense<1048576> : tensor<1x4xi32>
    %cst_10 = arith.constant dense<256> : tensor<1x4xi32>
    %cst_11 = arith.constant dense<2> : tensor<1x4xi64>
    %cst_12 = arith.constant dense<8192> : tensor<1x4xi32>
    %cst_13 = arith.constant dense<4> : tensor<1x4xi32>
    %cst_14 = arith.constant dense<2048> : tensor<1x4xi32>
    %cst_15 = arith.constant dense<256> : tensor<256x1xi32>
    %c4_i32 = arith.constant 4 : i32
    %c256_i32 = arith.constant 256 : i32
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c4_i32 : i32
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<4xi32>) -> tensor<1x4xi32>
    %4 = tt.splat %1 : (i32) -> tensor<1x4xi32>
    %5 = arith.addi %4, %3 : tensor<1x4xi32>
    %6 = tt.get_program_id x : i32
    %7 = arith.muli %6, %c256_i32 : i32
    %8 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32>
    %9 = tt.expand_dims %8 {axis = 1 : i32} : (tensor<256xi32>) -> tensor<256x1xi32>
    %10 = tt.splat %7 : (i32) -> tensor<256x1xi32>
    %11 = arith.addi %10, %9 : tensor<256x1xi32>
    %12 = arith.cmpi slt, %11, %cst_15 : tensor<256x1xi32>
    %13 = arith.divsi %5, %cst_14 : tensor<1x4xi32>
    %14 = arith.remsi %13, %cst_13 : tensor<1x4xi32>
    %15 = arith.divsi %5, %cst_12 : tensor<1x4xi32>
    %16 = arith.remsi %5, %cst_12 : tensor<1x4xi32>
    %17 = arith.remsi %5, %cst_14 : tensor<1x4xi32>
    %18 = arith.extsi %14 : tensor<1x4xi32> to tensor<1x4xi64>
    %19 = arith.cmpi slt, %18, %cst_11 : tensor<1x4xi64>
    %20 = arith.extsi %11 : tensor<256x1xi32> to tensor<256x1xi64>
    %21 = arith.cmpi sge, %20, %cst : tensor<256x1xi64>
    %22 = tt.broadcast %21 : (tensor<256x1xi1>) -> tensor<256x4xi1>
    %23 = tt.broadcast %19 : (tensor<1x4xi1>) -> tensor<256x4xi1>
    %24 = arith.andi %22, %23 : tensor<256x4xi1>
    %25 = arith.muli %16, %cst_10 : tensor<1x4xi32>
    %26 = tt.broadcast %11 : (tensor<256x1xi32>) -> tensor<256x4xi32>
    %27 = tt.broadcast %25 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %28 = arith.addi %26, %27 : tensor<256x4xi32>
    %29 = arith.muli %15, %cst_9 : tensor<1x4xi32>
    %30 = tt.broadcast %29 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %31 = arith.addi %28, %30 : tensor<256x4xi32>
    %32 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<256x4x!tt.ptr<bf16, 1>>
    %33 = tt.addptr %32, %31 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %34 = tt.broadcast %12 : (tensor<256x1xi1>) -> tensor<256x4xi1>
    %35 = arith.andi %24, %34 : tensor<256x4xi1>
    %36 = tt.load %33, %35, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %37 = arith.extf %36 : tensor<256x4xbf16> to tensor<256x4xf32>
    %38 = arith.select %24, %37, %cst_8 : tensor<256x4xi1>, tensor<256x4xf32>
    %39 = arith.andi %23, %34 : tensor<256x4xi1>
    %40 = tt.load %33, %39, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %41 = arith.extf %40 : tensor<256x4xbf16> to tensor<256x4xf32>
    %42 = arith.muli %17, %cst_10 : tensor<1x4xi32>
    %43 = tt.broadcast %42 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %44 = arith.addi %26, %43 : tensor<256x4xi32>
    %45 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<256x4x!tt.ptr<f32, 1>>
    %46 = tt.addptr %45, %44 : tensor<256x4x!tt.ptr<f32, 1>>, tensor<256x4xi32>
    %47 = tt.load %46, %39, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xf32>
    %48 = arith.mulf %41, %47 : tensor<256x4xf32>
    %49 = arith.cmpi sge, %20, %cst_1 : tensor<256x1xi64>
    %50 = tt.broadcast %49 : (tensor<256x1xi1>) -> tensor<256x4xi1>
    %51 = arith.andi %50, %23 : tensor<256x4xi1>
    %52 = arith.addi %11, %cst_7 : tensor<256x1xi32>
    %53 = tt.broadcast %52 : (tensor<256x1xi32>) -> tensor<256x4xi32>
    %54 = arith.addi %53, %27 : tensor<256x4xi32>
    %55 = arith.addi %54, %30 : tensor<256x4xi32>
    %56 = tt.addptr %32, %55 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %57 = arith.andi %51, %34 : tensor<256x4xi1>
    %58 = tt.load %56, %57, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %59 = arith.extf %58 : tensor<256x4xbf16> to tensor<256x4xf32>
    %60 = arith.addi %53, %43 : tensor<256x4xi32>
    %61 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<256x4x!tt.ptr<f32, 1>>
    %62 = tt.addptr %61, %60 : tensor<256x4x!tt.ptr<f32, 1>>, tensor<256x4xi32>
    %63 = tt.load %62, %57, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xf32>
    %64 = arith.mulf %59, %63 : tensor<256x4xf32>
    %65 = arith.subf %cst_8, %64 : tensor<256x4xf32>
    %66 = arith.select %51, %65, %cst_8 : tensor<256x4xi1>, tensor<256x4xf32>
    %67 = arith.addf %48, %66 : tensor<256x4xf32>
    %68 = arith.cmpi slt, %20, %cst_1 : tensor<256x1xi64>
    %69 = tt.broadcast %68 : (tensor<256x1xi1>) -> tensor<256x4xi1>
    %70 = arith.andi %69, %23 : tensor<256x4xi1>
    %71 = arith.addi %11, %cst_6 : tensor<256x1xi32>
    %72 = tt.broadcast %71 : (tensor<256x1xi32>) -> tensor<256x4xi32>
    %73 = arith.addi %72, %27 : tensor<256x4xi32>
    %74 = arith.addi %73, %30 : tensor<256x4xi32>
    %75 = tt.addptr %32, %74 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %76 = arith.andi %70, %34 : tensor<256x4xi1>
    %77 = tt.load %75, %76, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %78 = arith.extf %77 : tensor<256x4xbf16> to tensor<256x4xf32>
    %79 = arith.addi %72, %43 : tensor<256x4xi32>
    %80 = tt.addptr %61, %79 : tensor<256x4x!tt.ptr<f32, 1>>, tensor<256x4xi32>
    %81 = tt.load %80, %76, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xf32>
    %82 = arith.mulf %78, %81 : tensor<256x4xf32>
    %83 = arith.select %70, %82, %cst_8 : tensor<256x4xi1>, tensor<256x4xf32>
    %84 = arith.addf %67, %83 : tensor<256x4xf32>
    %85 = arith.addf %38, %84 : tensor<256x4xf32>
    %86 = arith.select %23, %85, %cst_8 : tensor<256x4xi1>, tensor<256x4xf32>
    %87 = arith.cmpi sge, %18, %cst_11 : tensor<1x4xi64>
    %88 = arith.cmpi slt, %18, %cst_5 : tensor<1x4xi64>
    %89 = arith.andi %87, %88 : tensor<1x4xi1>
    %90 = arith.muli %11, %cst_4 : tensor<256x1xi32>
    %91 = tt.broadcast %17 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %92 = tt.broadcast %90 : (tensor<256x1xi32>) -> tensor<256x4xi32>
    %93 = arith.addi %91, %92 : tensor<256x4xi32>
    %94 = arith.muli %15, %cst_3 : tensor<1x4xi32>
    %95 = tt.broadcast %94 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %96 = arith.addi %93, %95 : tensor<256x4xi32>
    %97 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<256x4x!tt.ptr<f32, 1>>
    %98 = tt.addptr %97, %96 : tensor<256x4x!tt.ptr<f32, 1>>, tensor<256x4xi32>
    %99 = tt.broadcast %89 : (tensor<1x4xi1>) -> tensor<256x4xi1>
    %100 = arith.andi %99, %34 : tensor<256x4xi1>
    %101 = tt.load %98, %100, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xf32>
    %102 = arith.select %99, %101, %cst_8 : tensor<256x4xi1>, tensor<256x4xf32>
    %103 = arith.cmpi sge, %18, %cst_5 : tensor<1x4xi64>
    %104 = arith.addi %44, %30 : tensor<256x4xi32>
    %105 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<256x4x!tt.ptr<bf16, 1>>
    %106 = tt.addptr %105, %104 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %107 = tt.broadcast %103 : (tensor<1x4xi1>) -> tensor<256x4xi1>
    %108 = arith.andi %107, %34 : tensor<256x4xi1>
    %109 = tt.load %106, %108, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %110 = arith.extf %109 : tensor<256x4xbf16> to tensor<256x4xf32>
    %111 = arith.addi %11, %cst_2 : tensor<256x1xi32>
    %112 = tt.broadcast %111 : (tensor<256x1xi32>) -> tensor<256x4xi32>
    %113 = arith.addi %112, %43 : tensor<256x4xi32>
    %114 = arith.addi %113, %30 : tensor<256x4xi32>
    %115 = tt.addptr %105, %114 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %116 = tt.load %115, %108, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %117 = arith.extf %116 : tensor<256x4xbf16> to tensor<256x4xf32>
    %118 = arith.addf %110, %117 : tensor<256x4xf32>
    %119 = arith.select %107, %118, %cst_8 : tensor<256x4xi1>, tensor<256x4xf32>
    %120 = arith.select %99, %102, %119 : tensor<256x4xi1>, tensor<256x4xf32>
    %121 = arith.select %23, %86, %120 : tensor<256x4xi1>, tensor<256x4xf32>
    %122 = arith.muli %5, %cst_10 : tensor<1x4xi32>
    %123 = tt.broadcast %122 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %124 = arith.addi %26, %123 : tensor<256x4xi32>
    %125 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<256x4x!tt.ptr<bf16, 1>>
    %126 = tt.addptr %125, %124 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %127 = arith.truncf %121 : tensor<256x4xf32> to tensor<256x4xbf16>
    tt.store %126, %127, %34 {cache = 1 : i32, evict = 1 : i32} : tensor<256x4xbf16>
    tt.return
  }
}
