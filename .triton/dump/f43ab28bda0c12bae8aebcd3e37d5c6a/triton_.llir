; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3de4de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = lshr i32 %6, 5, !dbg !10
  %urem = shl i32 %6, 2, !dbg !10
  %8 = and i32 %urem, 1020, !dbg !10
  %9 = or i32 %8, 1024, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %11 = mul i32 %10, 2304, !dbg !12
  %12 = add i32 %8, %11, !dbg !13
  %13 = add i32 %9, %11, !dbg !13
  %14 = sext i32 %12 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = sext i32 %13 to i64, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !14
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !15
  %28 = bitcast i32 %24 to float, !dbg !15
  %29 = bitcast i32 %25 to float, !dbg !15
  %30 = bitcast i32 %26 to float, !dbg !15
  %31 = bitcast i32 %27 to float, !dbg !15
  %32 = fmul float %28, %28, !dbg !16
  %33 = fmul float %29, %29, !dbg !16
  %34 = fmul float %30, %30, !dbg !16
  %35 = fmul float %31, %31, !dbg !16
  %36 = or i32 %8, 2048, !dbg !17
  %37 = or i32 %8, 3072, !dbg !17
  %38 = icmp ult i32 %36, 2304, !dbg !18
  %39 = add i32 %36, %11, !dbg !13
  %40 = add i32 %37, %11, !dbg !13
  %41 = sext i32 %39 to i64, !dbg !14
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !14
  %43 = sext i32 %40 to i64, !dbg !14
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !14
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #6, !dbg !15
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !15
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !15
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !15
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !15
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !15
  %51 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !15
  %52 = insertelement <2 x i32> %51, i32 %20, i64 1, !dbg !15
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !15
  %54 = fmul <2 x float> %53, %53, !dbg !16
  %55 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !15
  %56 = insertelement <2 x i32> %55, i32 %47, i64 1, !dbg !15
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !15
  %58 = fmul <2 x float> %57, %57, !dbg !16
  %59 = insertelement <2 x i1> poison, i1 %38, i64 0, !dbg !19
  %60 = shufflevector <2 x i1> %59, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !19
  %61 = select <2 x i1> %60, <2 x float> %58, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %62 = fadd <2 x float> %54, %61, !dbg !19
  %63 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !15
  %64 = insertelement <2 x i32> %63, i32 %21, i64 1, !dbg !15
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !15
  %66 = fmul <2 x float> %65, %65, !dbg !16
  %67 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !15
  %68 = insertelement <2 x i32> %67, i32 %48, i64 1, !dbg !15
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !15
  %70 = fmul <2 x float> %69, %69, !dbg !16
  %71 = select <2 x i1> %60, <2 x float> %70, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %72 = fadd <2 x float> %66, %71, !dbg !19
  %73 = and i32 %6, 31, !dbg !10
  %74 = and i32 %7, 7, !dbg !10
  %shift = shufflevector <2 x float> %62, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %75 = fadd <2 x float> %62, %shift, !dbg !20
  %shift18 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %76 = fadd <2 x float> %shift18, %75, !dbg !20
  %77 = fadd <2 x float> %72, %76, !dbg !20
  %78 = extractelement <2 x float> %77, i64 0, !dbg !20
  %79 = fadd float %32, %78, !dbg !20
  %80 = fadd float %33, %79, !dbg !20
  %81 = fadd float %34, %80, !dbg !20
  %82 = fadd float %35, %81, !dbg !20
  %83 = bitcast float %82 to i32, !dbg !26
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !26
  %85 = bitcast i32 %84 to float, !dbg !26
  %86 = fadd float %82, %85, !dbg !20
  %87 = bitcast float %86 to i32, !dbg !26
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !26
  %89 = bitcast i32 %88 to float, !dbg !26
  %90 = fadd float %86, %89, !dbg !20
  %91 = bitcast float %90 to i32, !dbg !26
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !26
  %93 = bitcast i32 %92 to float, !dbg !26
  %94 = fadd float %90, %93, !dbg !20
  %95 = bitcast float %94 to i32, !dbg !26
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !26
  %97 = bitcast i32 %96 to float, !dbg !26
  %98 = fadd float %94, %97, !dbg !20
  %99 = bitcast float %98 to i32, !dbg !26
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !26
  %101 = bitcast i32 %100 to float, !dbg !26
  %102 = fadd float %98, %101, !dbg !20
  %103 = icmp eq i32 %73, 0, !dbg !26
  %104 = zext nneg i32 %74 to i64, !dbg !26
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %104, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, float %102, i1 %103) #6, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %106 = icmp slt i32 %6, 8, !dbg !26
  %107 = sext i32 %6 to i64, !dbg !26
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i64 %107, !dbg !26
  %109 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %106) #6, !dbg !26
  %110 = bitcast float %109 to i32, !dbg !26
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !26
  %112 = bitcast i32 %111 to float, !dbg !26
  %113 = fadd float %109, %112, !dbg !20
  %114 = bitcast float %113 to i32, !dbg !26
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !26
  %116 = bitcast i32 %115 to float, !dbg !26
  %117 = fadd float %113, %116, !dbg !20
  %118 = bitcast float %117 to i32, !dbg !26
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !26
  %120 = bitcast i32 %119 to float, !dbg !26
  %121 = fadd float %117, %120, !dbg !20
  %122 = and i32 %6, 7, !dbg !26
  %123 = icmp eq i32 %122, 0, !dbg !26
  %124 = and i1 %106, %123, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, float %121, i1 %124) #6, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %125 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !26
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 2.304000e+03) #6, !dbg !28
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 2.304000e+03) #6, !dbg !28
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 2.304000e+03) #6, !dbg !28
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 2.304000e+03) #6, !dbg !28
  %130 = fadd float %126, 0x3EE4F8B580000000, !dbg !29
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !30
  %136 = bitcast i32 %132 to float, !dbg !30
  %137 = bitcast i32 %133 to float, !dbg !30
  %138 = bitcast i32 %134 to float, !dbg !30
  %139 = bitcast i32 %135 to float, !dbg !30
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !30
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !30
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !30
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !30
  %145 = bitcast i32 %141 to float, !dbg !30
  %146 = bitcast i32 %142 to float, !dbg !30
  %147 = bitcast i32 %143 to float, !dbg !30
  %148 = bitcast i32 %144 to float, !dbg !30
  %149 = zext nneg i32 %8 to i64, !dbg !31
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !31
  %151 = zext nneg i32 %9 to i64, !dbg !31
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !31
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !32
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !32
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !32
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !32
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !32
  %158 = bitcast i32 %154 to float, !dbg !32
  %159 = bitcast i32 %155 to float, !dbg !32
  %160 = bitcast i32 %156 to float, !dbg !32
  %161 = bitcast i32 %157 to float, !dbg !32
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !32
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !32
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !32
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !32
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !32
  %167 = bitcast i32 %163 to float, !dbg !32
  %168 = bitcast i32 %164 to float, !dbg !32
  %169 = bitcast i32 %165 to float, !dbg !32
  %170 = bitcast i32 %166 to float, !dbg !32
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %.not.i = icmp eq i32 %171, 0, !dbg !33
  br i1 %.not.i, label %174, label %172, !dbg !33

172:                                              ; preds = %5
  %173 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %130), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

174:                                              ; preds = %5
  %175 = tail call float @llvm.nvvm.rsqrt.approx.f(float %130), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %172, %174
  %.0.i = phi float [ %173, %172 ], [ %175, %174 ], !dbg !33
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %179 = fmul float %.0.i, %136, !dbg !34
  %180 = fmul float %.0.i, %137, !dbg !34
  %181 = fmul float %.0.i, %138, !dbg !34
  %182 = fmul float %.0.i, %139, !dbg !34
  %183 = fmul float %.0.i, %145, !dbg !34
  %184 = fmul float %.0.i, %146, !dbg !34
  %185 = fmul float %.0.i, %147, !dbg !34
  %186 = fmul float %.0.i, %148, !dbg !34
  %187 = fadd float %158, 1.000000e+00, !dbg !35
  %188 = fadd float %159, 1.000000e+00, !dbg !35
  %189 = fadd float %160, 1.000000e+00, !dbg !35
  %190 = fadd float %161, 1.000000e+00, !dbg !35
  %191 = fadd float %167, 1.000000e+00, !dbg !35
  %192 = fadd float %168, 1.000000e+00, !dbg !35
  %193 = fadd float %169, 1.000000e+00, !dbg !35
  %194 = fadd float %170, 1.000000e+00, !dbg !35
  %195 = fmul float %187, %179, !dbg !36
  %196 = fmul float %188, %180, !dbg !36
  %197 = fmul float %189, %181, !dbg !36
  %198 = fmul float %190, %182, !dbg !36
  %199 = fmul float %191, %183, !dbg !36
  %200 = fmul float %192, %184, !dbg !36
  %201 = fmul float %193, %185, !dbg !36
  %202 = fmul float %194, %186, !dbg !36
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !37
  %204 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !37
  %205 = bitcast float %195 to i32, !dbg !38
  %206 = bitcast float %196 to i32, !dbg !38
  %207 = bitcast float %197 to i32, !dbg !38
  %208 = bitcast float %198 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %205, i32 %206, i32 %207, i32 %208, ptr addrspace(1) %203, i1 true) #6, !dbg !38
  %209 = bitcast float %199 to i32, !dbg !38
  %210 = bitcast float %200 to i32, !dbg !38
  %211 = bitcast float %201 to i32, !dbg !38
  %212 = bitcast float %202 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %209, i32 %210, i32 %211, i32 %212, ptr addrspace(1) %204, i1 true) #6, !dbg !38
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #6, !dbg !30
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !30
  %215 = zext nneg i32 %36 to i64, !dbg !31
  %216 = getelementptr float, ptr addrspace(1) %1, i64 %215, !dbg !31
  %217 = zext nneg i32 %37 to i64, !dbg !31
  %218 = getelementptr float, ptr addrspace(1) %1, i64 %217, !dbg !31
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %216, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #6, !dbg !32
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %218, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !32
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %.not.i.1 = icmp eq i32 %221, 0, !dbg !33
  br i1 %.not.i.1, label %224, label %222, !dbg !33

222:                                              ; preds = %__nv_rsqrtf.exit
  %223 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %130), !dbg !33
  br label %__nv_rsqrtf.exit.1, !dbg !33

224:                                              ; preds = %__nv_rsqrtf.exit
  %225 = tail call float @llvm.nvvm.rsqrt.approx.f(float %130), !dbg !33
  br label %__nv_rsqrtf.exit.1, !dbg !33

__nv_rsqrtf.exit.1:                               ; preds = %224, %222
  %.0.i.1 = phi float [ %223, %222 ], [ %225, %224 ], !dbg !33
  %226 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !32
  %227 = bitcast i32 %226 to float, !dbg !32
  %228 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !32
  %229 = bitcast i32 %228 to float, !dbg !32
  %230 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !32
  %231 = bitcast i32 %230 to float, !dbg !32
  %232 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !32
  %233 = bitcast i32 %232 to float, !dbg !32
  %234 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !32
  %235 = bitcast i32 %234 to float, !dbg !32
  %236 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !32
  %237 = bitcast i32 %236 to float, !dbg !32
  %238 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !32
  %239 = bitcast i32 %238 to float, !dbg !32
  %240 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !32
  %241 = bitcast i32 %240 to float, !dbg !32
  %242 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !30
  %243 = bitcast i32 %242 to float, !dbg !30
  %244 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !30
  %245 = bitcast i32 %244 to float, !dbg !30
  %246 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !30
  %247 = bitcast i32 %246 to float, !dbg !30
  %248 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !30
  %249 = bitcast i32 %248 to float, !dbg !30
  %250 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !30
  %251 = bitcast i32 %250 to float, !dbg !30
  %252 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !30
  %253 = bitcast i32 %252 to float, !dbg !30
  %254 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !30
  %255 = bitcast i32 %254 to float, !dbg !30
  %256 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !30
  %257 = bitcast i32 %256 to float, !dbg !30
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !33
  %261 = fmul float %.0.i.1, %257, !dbg !34
  %262 = fmul float %.0.i.1, %255, !dbg !34
  %263 = fmul float %.0.i.1, %253, !dbg !34
  %264 = fmul float %.0.i.1, %251, !dbg !34
  %265 = fmul float %.0.i.1, %249, !dbg !34
  %266 = fmul float %.0.i.1, %247, !dbg !34
  %267 = fmul float %.0.i.1, %245, !dbg !34
  %268 = fmul float %.0.i.1, %243, !dbg !34
  %269 = fadd float %241, 1.000000e+00, !dbg !35
  %270 = fadd float %239, 1.000000e+00, !dbg !35
  %271 = fadd float %237, 1.000000e+00, !dbg !35
  %272 = fadd float %235, 1.000000e+00, !dbg !35
  %273 = fadd float %233, 1.000000e+00, !dbg !35
  %274 = fadd float %231, 1.000000e+00, !dbg !35
  %275 = fadd float %229, 1.000000e+00, !dbg !35
  %276 = fadd float %227, 1.000000e+00, !dbg !35
  %277 = fmul float %269, %261, !dbg !36
  %278 = fmul float %270, %262, !dbg !36
  %279 = fmul float %271, %263, !dbg !36
  %280 = fmul float %272, %264, !dbg !36
  %281 = fmul float %273, %265, !dbg !36
  %282 = fmul float %274, %266, !dbg !36
  %283 = fmul float %275, %267, !dbg !36
  %284 = fmul float %276, %268, !dbg !36
  %285 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !37
  %286 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !37
  %287 = bitcast float %277 to i32, !dbg !38
  %288 = bitcast float %278 to i32, !dbg !38
  %289 = bitcast float %279 to i32, !dbg !38
  %290 = bitcast float %280 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %287, i32 %288, i32 %289, i32 %290, ptr addrspace(1) %285, i1 %38) #6, !dbg !38
  %291 = bitcast float %281 to i32, !dbg !38
  %292 = bitcast float %282 to i32, !dbg !38
  %293 = bitcast float %283 to i32, !dbg !38
  %294 = bitcast float %284 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %292, i32 %293, i32 %294, ptr addrspace(1) %286, i1 false) #6, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cnjbqlpxknf7q7h25idbhi6z62vfmbqc66pqlnk5divqtsmjnqvi.py", directory: "/tmp/torchinductor_zeus/nj")
!4 = !{ptr @triton__0d1d2d3de4de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3de4de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3de4de", linkageName: "triton__0d1d2d3de4de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 32, column: 22, scope: !7)
!17 = !DILocation(line: 28, column: 27, scope: !7)
!18 = !DILocation(line: 29, column: 25, scope: !7)
!19 = !DILocation(line: 35, column: 38, scope: !7)
!20 = !DILocation(line: 233, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 243, column: 36, scope: !21, inlinedAt: !25)
!25 = !DILocation(line: 36, column: 25, scope: !21)
!26 = !DILocation(line: 243, column: 36, scope: !23, inlinedAt: !27)
!27 = !DILocation(line: 36, column: 25, scope: !23)
!28 = !DILocation(line: 44, column: 22, scope: !7)
!29 = !DILocation(line: 46, column: 22, scope: !7)
!30 = !DILocation(line: 41, column: 51, scope: !7)
!31 = !DILocation(line: 42, column: 35, scope: !7)
!32 = !DILocation(line: 42, column: 40, scope: !7)
!33 = !DILocation(line: 47, column: 30, scope: !7)
!34 = !DILocation(line: 48, column: 23, scope: !7)
!35 = !DILocation(line: 50, column: 24, scope: !7)
!36 = !DILocation(line: 51, column: 24, scope: !7)
!37 = !DILocation(line: 52, column: 29, scope: !7)
!38 = !DILocation(line: 52, column: 53, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
