; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_1 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_1 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_1 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp13 < 288256"
@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 3, !dbg !10
  %9 = and i32 %8, 31, !dbg !10
  %10 = and i32 %7, 63, !dbg !10
  %11 = shl i32 %7, 3, !dbg !11
  %12 = and i32 %11, 56, !dbg !11
  %13 = or i32 %12, 4, !dbg !11
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %15 = shl i32 %14, 6, !dbg !13
  %16 = or i32 %15, %9, !dbg !14
  %17 = or i32 %16, 32, !dbg !14
  %18 = or i32 %15, %10, !dbg !14
  %19 = sext i32 %16 to i64, !dbg !15
  %20 = getelementptr i64, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = sext i32 %17 to i64, !dbg !15
  %22 = getelementptr i64, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = sext i32 %18 to i64, !dbg !15
  %24 = getelementptr i64, ptr addrspace(1) %0, i64 %23, !dbg !15
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !16
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !16
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !16
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !16
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !16
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !16
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !16
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !16
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !16
  %42 = add i64 %25, 288256, !dbg !17
  %43 = add i64 %33, 288256, !dbg !17
  %44 = add i64 %41, 288256, !dbg !17
  %45 = icmp slt i64 %25, 0, !dbg !18
  %46 = icmp slt i64 %33, 0, !dbg !18
  %47 = icmp slt i64 %41, 0, !dbg !18
  %48 = select i1 %45, i64 %42, i64 %25, !dbg !19
  %49 = select i1 %46, i64 %43, i64 %33, !dbg !19
  %50 = select i1 %47, i64 %44, i64 %41, !dbg !19
  %51 = icmp ugt i64 %50, 288255, !dbg !20
  %52 = mul i64 %48, 3584, !dbg !21
  %53 = mul i64 %49, 3584, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %52
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %53
  br label %56, !dbg !22

56:                                               ; preds = %6, %62
  %57 = phi i32 [ 0, %6 ], [ %109, %62 ]
  %58 = phi <16 x float> [ zeroinitializer, %6 ], [ %108, %62 ]
  %59 = or i32 %57, %12, !dbg !23
  %60 = or i32 %57, %13, !dbg !23
  br i1 %51, label %61, label %62, !dbg !24

61:                                               ; preds = %56
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !24
  br label %62, !dbg !24

62:                                               ; preds = %61, %56
  %63 = zext nneg i32 %59 to i64, !dbg !25
  %64 = zext nneg i32 %60 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %54, i64 %63, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %54, i64 %64, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %55, i64 %63, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %55, i64 %64, !dbg !26
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !27
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !27
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !27
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !27
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !27
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !27
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !27
  %89 = insertelement <16 x i32> poison, i32 %70, i64 0, !dbg !27
  %90 = insertelement <16 x i32> %89, i32 %71, i64 1, !dbg !27
  %91 = insertelement <16 x i32> %90, i32 %72, i64 2, !dbg !27
  %92 = insertelement <16 x i32> %91, i32 %73, i64 3, !dbg !27
  %93 = insertelement <16 x i32> %92, i32 %75, i64 4, !dbg !27
  %94 = insertelement <16 x i32> %93, i32 %76, i64 5, !dbg !27
  %95 = insertelement <16 x i32> %94, i32 %77, i64 6, !dbg !27
  %96 = insertelement <16 x i32> %95, i32 %78, i64 7, !dbg !27
  %97 = insertelement <16 x i32> %96, i32 %80, i64 8, !dbg !27
  %98 = insertelement <16 x i32> %97, i32 %81, i64 9, !dbg !27
  %99 = insertelement <16 x i32> %98, i32 %82, i64 10, !dbg !27
  %100 = insertelement <16 x i32> %99, i32 %83, i64 11, !dbg !27
  %101 = insertelement <16 x i32> %100, i32 %85, i64 12, !dbg !27
  %102 = insertelement <16 x i32> %101, i32 %86, i64 13, !dbg !27
  %103 = insertelement <16 x i32> %102, i32 %87, i64 14, !dbg !27
  %104 = insertelement <16 x i32> %103, i32 %88, i64 15, !dbg !27
  %105 = bitcast <16 x i32> %104 to <16 x float>, !dbg !27
  %106 = fmul <16 x float> %105, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !28
  %107 = fmul <16 x float> %106, %106, !dbg !29
  %108 = fadd <16 x float> %58, %107, !dbg !30
  %109 = add nuw nsw i32 %57, 64, !dbg !22
  %110 = icmp ult i32 %57, 3520, !dbg !22
  br i1 %110, label %56, label %111, !dbg !22

111:                                              ; preds = %62
  %shift = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %112 = fadd <16 x float> %108, %shift, !dbg !31
  %shift92 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %113 = fadd <16 x float> %shift92, %112, !dbg !31
  %shift93 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %114 = fadd <16 x float> %shift93, %113, !dbg !31
  %shift94 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %115 = fadd <16 x float> %shift94, %114, !dbg !31
  %shift95 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %116 = fadd <16 x float> %shift95, %115, !dbg !31
  %shift96 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %117 = fadd <16 x float> %shift96, %116, !dbg !31
  %shift97 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %118 = fadd <16 x float> %shift97, %117, !dbg !31
  %119 = extractelement <16 x float> %118, i64 0, !dbg !31
  %shift98 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %120 = fadd <16 x float> %108, %shift98, !dbg !31
  %shift99 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 10, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %121 = fadd <16 x float> %shift99, %120, !dbg !31
  %shift100 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 11, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %122 = fadd <16 x float> %shift100, %121, !dbg !31
  %shift101 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 12, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %123 = fadd <16 x float> %shift101, %122, !dbg !31
  %shift102 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 13, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %124 = fadd <16 x float> %shift102, %123, !dbg !31
  %shift103 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 14, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %125 = fadd <16 x float> %shift103, %124, !dbg !31
  %shift104 = shufflevector <16 x float> %108, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %126 = fadd <16 x float> %shift104, %125, !dbg !31
  %127 = extractelement <16 x float> %126, i64 8, !dbg !31
  %128 = bitcast float %119 to i32, !dbg !37
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !37
  %130 = bitcast i32 %129 to float, !dbg !37
  %131 = fadd float %119, %130, !dbg !31
  %132 = bitcast float %131 to i32, !dbg !37
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !37
  %134 = bitcast i32 %133 to float, !dbg !37
  %135 = fadd float %131, %134, !dbg !31
  %136 = bitcast float %135 to i32, !dbg !37
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !37
  %138 = bitcast i32 %137 to float, !dbg !37
  %139 = fadd float %135, %138, !dbg !31
  %140 = bitcast float %127 to i32, !dbg !37
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 4, i32 31), !dbg !37
  %142 = bitcast i32 %141 to float, !dbg !37
  %143 = fadd float %127, %142, !dbg !31
  %144 = bitcast float %143 to i32, !dbg !37
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 2, i32 31), !dbg !37
  %146 = bitcast i32 %145 to float, !dbg !37
  %147 = fadd float %143, %146, !dbg !31
  %148 = bitcast float %147 to i32, !dbg !37
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !37
  %150 = bitcast i32 %149 to float, !dbg !37
  %151 = fadd float %147, %150, !dbg !31
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #5, !dbg !39
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #5, !dbg !39
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #5, !dbg !39
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #5, !dbg !39
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #5, !dbg !39
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #5, !dbg !39
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #5, !dbg !39
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.584000e+03) #5, !dbg !39
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #5, !dbg !39
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #5, !dbg !39
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #5, !dbg !39
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #5, !dbg !39
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #5, !dbg !39
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #5, !dbg !39
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #5, !dbg !39
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #5, !dbg !39
  %168 = fadd float %152, 0x3EE4F8B580000000, !dbg !40
  %169 = fadd float %160, 0x3EE4F8B580000000, !dbg !40
  %170 = mul i32 %16, 3584, !dbg !41
  %171 = mul i32 %17, 3584, !dbg !41
  br label %172, !dbg !42

172:                                              ; preds = %111, %__nv_rsqrtf.exit25
  %173 = phi i32 [ 0, %111 ], [ %366, %__nv_rsqrtf.exit25 ]
  %174 = or i32 %173, %12, !dbg !43
  %175 = or i32 %173, %13, !dbg !43
  %176 = zext nneg i32 %174 to i64, !dbg !44
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %176, !dbg !44
  %178 = zext nneg i32 %175 to i64, !dbg !44
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %178, !dbg !44
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !45
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !45
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !45
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !45
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !45
  %185 = bitcast i32 %181 to float, !dbg !45
  %186 = bitcast i32 %182 to float, !dbg !45
  %187 = bitcast i32 %183 to float, !dbg !45
  %188 = bitcast i32 %184 to float, !dbg !45
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !45
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !45
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !45
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !45
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !45
  %194 = bitcast i32 %190 to float, !dbg !45
  %195 = bitcast i32 %191 to float, !dbg !45
  %196 = bitcast i32 %192 to float, !dbg !45
  %197 = bitcast i32 %193 to float, !dbg !45
  br i1 %51, label %198, label %199, !dbg !46

198:                                              ; preds = %172
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 883, ptr nonnull @assertFunc_1, i64 1), !dbg !46
  br label %199, !dbg !46

199:                                              ; preds = %198, %172
  %200 = getelementptr float, ptr addrspace(1) %54, i64 %176, !dbg !47
  %201 = getelementptr float, ptr addrspace(1) %54, i64 %178, !dbg !47
  %202 = getelementptr float, ptr addrspace(1) %55, i64 %176, !dbg !47
  %203 = getelementptr float, ptr addrspace(1) %55, i64 %178, !dbg !47
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !48
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !48
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !48
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !48
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !48
  %209 = bitcast i32 %205 to float, !dbg !48
  %210 = bitcast i32 %206 to float, !dbg !48
  %211 = bitcast i32 %207 to float, !dbg !48
  %212 = bitcast i32 %208 to float, !dbg !48
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !48
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !48
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !48
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !48
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !48
  %218 = bitcast i32 %214 to float, !dbg !48
  %219 = bitcast i32 %215 to float, !dbg !48
  %220 = bitcast i32 %216 to float, !dbg !48
  %221 = bitcast i32 %217 to float, !dbg !48
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %202, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !48
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !48
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !48
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !48
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !48
  %227 = bitcast i32 %223 to float, !dbg !48
  %228 = bitcast i32 %224 to float, !dbg !48
  %229 = bitcast i32 %225 to float, !dbg !48
  %230 = bitcast i32 %226 to float, !dbg !48
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %203, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !48
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !48
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !48
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !48
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !48
  %236 = bitcast i32 %232 to float, !dbg !48
  %237 = bitcast i32 %233 to float, !dbg !48
  %238 = bitcast i32 %234 to float, !dbg !48
  %239 = bitcast i32 %235 to float, !dbg !48
  %240 = fmul float %209, 0x404DEEEA20000000, !dbg !49
  %241 = fmul float %210, 0x404DEEEA20000000, !dbg !49
  %242 = fmul float %211, 0x404DEEEA20000000, !dbg !49
  %243 = fmul float %212, 0x404DEEEA20000000, !dbg !49
  %244 = fmul float %218, 0x404DEEEA20000000, !dbg !49
  %245 = fmul float %219, 0x404DEEEA20000000, !dbg !49
  %246 = fmul float %220, 0x404DEEEA20000000, !dbg !49
  %247 = fmul float %221, 0x404DEEEA20000000, !dbg !49
  %248 = fmul float %227, 0x404DEEEA20000000, !dbg !49
  %249 = fmul float %228, 0x404DEEEA20000000, !dbg !49
  %250 = fmul float %229, 0x404DEEEA20000000, !dbg !49
  %251 = fmul float %230, 0x404DEEEA20000000, !dbg !49
  %252 = fmul float %236, 0x404DEEEA20000000, !dbg !49
  %253 = fmul float %237, 0x404DEEEA20000000, !dbg !49
  %254 = fmul float %238, 0x404DEEEA20000000, !dbg !49
  %255 = fmul float %239, 0x404DEEEA20000000, !dbg !49
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %256, 0, !dbg !50
  br i1 %.not.i, label %259, label %257, !dbg !50

257:                                              ; preds = %199
  %258 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %168), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

259:                                              ; preds = %199
  %260 = tail call float @llvm.nvvm.rsqrt.approx.f(float %168), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %257, %259
  %.0.i = phi float [ %258, %257 ], [ %260, %259 ], !dbg !50
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i23 = icmp eq i32 %268, 0, !dbg !50
  br i1 %.not.i23, label %271, label %269, !dbg !50

269:                                              ; preds = %__nv_rsqrtf.exit
  %270 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %169), !dbg !50
  br label %__nv_rsqrtf.exit25, !dbg !50

271:                                              ; preds = %__nv_rsqrtf.exit
  %272 = tail call float @llvm.nvvm.rsqrt.approx.f(float %169), !dbg !50
  br label %__nv_rsqrtf.exit25, !dbg !50

__nv_rsqrtf.exit25:                               ; preds = %269, %271
  %.0.i24 = phi float [ %270, %269 ], [ %272, %271 ], !dbg !50
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %280 = fmul float %240, %.0.i, !dbg !51
  %281 = fmul float %241, %.0.i, !dbg !51
  %282 = fmul float %242, %.0.i, !dbg !51
  %283 = fmul float %243, %.0.i, !dbg !51
  %284 = fmul float %244, %.0.i, !dbg !51
  %285 = fmul float %245, %.0.i, !dbg !51
  %286 = fmul float %246, %.0.i, !dbg !51
  %287 = fmul float %247, %.0.i, !dbg !51
  %288 = fmul float %248, %.0.i24, !dbg !51
  %289 = fmul float %249, %.0.i24, !dbg !51
  %290 = fmul float %250, %.0.i24, !dbg !51
  %291 = fmul float %251, %.0.i24, !dbg !51
  %292 = fmul float %252, %.0.i24, !dbg !51
  %293 = fmul float %253, %.0.i24, !dbg !51
  %294 = fmul float %254, %.0.i24, !dbg !51
  %295 = fmul float %255, %.0.i24, !dbg !51
  %296 = fadd float %185, 1.000000e+00, !dbg !52
  %297 = fadd float %186, 1.000000e+00, !dbg !52
  %298 = fadd float %187, 1.000000e+00, !dbg !52
  %299 = fadd float %188, 1.000000e+00, !dbg !52
  %300 = fadd float %194, 1.000000e+00, !dbg !52
  %301 = fadd float %195, 1.000000e+00, !dbg !52
  %302 = fadd float %196, 1.000000e+00, !dbg !52
  %303 = fadd float %197, 1.000000e+00, !dbg !52
  %304 = fmul float %296, %280, !dbg !53
  %305 = fmul float %297, %281, !dbg !53
  %306 = fmul float %298, %282, !dbg !53
  %307 = fmul float %299, %283, !dbg !53
  %308 = fmul float %300, %284, !dbg !53
  %309 = fmul float %301, %285, !dbg !53
  %310 = fmul float %302, %286, !dbg !53
  %311 = fmul float %303, %287, !dbg !53
  %312 = fmul float %296, %288, !dbg !53
  %313 = fmul float %297, %289, !dbg !53
  %314 = fmul float %298, %290, !dbg !53
  %315 = fmul float %299, %291, !dbg !53
  %316 = fmul float %300, %292, !dbg !53
  %317 = fmul float %301, %293, !dbg !53
  %318 = fmul float %302, %294, !dbg !53
  %319 = fmul float %303, %295, !dbg !53
  %320 = add i32 %174, %170, !dbg !54
  %321 = add i32 %174, %171, !dbg !54
  %322 = sext i32 %320 to i64, !dbg !55
  %323 = getelementptr i16, ptr addrspace(1) %3, i64 %322, !dbg !55
  %324 = sext i32 %321 to i64, !dbg !55
  %325 = getelementptr i16, ptr addrspace(1) %3, i64 %324, !dbg !55
  %326 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %304) #5, !dbg !56
  %327 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %305) #5, !dbg !56
  %328 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %306) #5, !dbg !56
  %329 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %307) #5, !dbg !56
  %330 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %308) #5, !dbg !56
  %331 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %309) #5, !dbg !56
  %332 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %310) #5, !dbg !56
  %333 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %311) #5, !dbg !56
  %334 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %312) #5, !dbg !56
  %335 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %313) #5, !dbg !56
  %336 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %314) #5, !dbg !56
  %337 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %315) #5, !dbg !56
  %338 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %316) #5, !dbg !56
  %339 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %317) #5, !dbg !56
  %340 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %318) #5, !dbg !56
  %341 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %319) #5, !dbg !56
  %342 = insertelement <2 x i16> undef, i16 %326, i64 0, !dbg !56
  %343 = insertelement <2 x i16> %342, i16 %327, i64 1, !dbg !56
  %344 = bitcast <2 x i16> %343 to i32, !dbg !56
  %345 = insertelement <2 x i16> undef, i16 %328, i64 0, !dbg !56
  %346 = insertelement <2 x i16> %345, i16 %329, i64 1, !dbg !56
  %347 = bitcast <2 x i16> %346 to i32, !dbg !56
  %348 = insertelement <2 x i16> undef, i16 %330, i64 0, !dbg !56
  %349 = insertelement <2 x i16> %348, i16 %331, i64 1, !dbg !56
  %350 = bitcast <2 x i16> %349 to i32, !dbg !56
  %351 = insertelement <2 x i16> undef, i16 %332, i64 0, !dbg !56
  %352 = insertelement <2 x i16> %351, i16 %333, i64 1, !dbg !56
  %353 = bitcast <2 x i16> %352 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %347, i32 %350, i32 %353, ptr addrspace(1) %323, i1 true) #5, !dbg !56
  %354 = insertelement <2 x i16> undef, i16 %334, i64 0, !dbg !56
  %355 = insertelement <2 x i16> %354, i16 %335, i64 1, !dbg !56
  %356 = bitcast <2 x i16> %355 to i32, !dbg !56
  %357 = insertelement <2 x i16> undef, i16 %336, i64 0, !dbg !56
  %358 = insertelement <2 x i16> %357, i16 %337, i64 1, !dbg !56
  %359 = bitcast <2 x i16> %358 to i32, !dbg !56
  %360 = insertelement <2 x i16> undef, i16 %338, i64 0, !dbg !56
  %361 = insertelement <2 x i16> %360, i16 %339, i64 1, !dbg !56
  %362 = bitcast <2 x i16> %361 to i32, !dbg !56
  %363 = insertelement <2 x i16> undef, i16 %340, i64 0, !dbg !56
  %364 = insertelement <2 x i16> %363, i16 %341, i64 1, !dbg !56
  %365 = bitcast <2 x i16> %364 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %356, i32 %359, i32 %362, i32 %365, ptr addrspace(1) %325, i1 true) #5, !dbg !56
  %366 = add nuw nsw i32 %173, 64, !dbg !42
  %367 = icmp ult i32 %173, 3520, !dbg !42
  br i1 %367, label %172, label %368, !dbg !42

368:                                              ; preds = %__nv_rsqrtf.exit25
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #2 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cdsnvvi5dejthdgnbnva7xbn653jzpevgdurkwhkdf5kctlq2exo.py", directory: "/tmp/torchinductor_zeus/ds")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 44, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 28, scope: !7)
!13 = !DILocation(line: 21, column: 33, scope: !7)
!14 = !DILocation(line: 22, column: 23, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 32, column: 22, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 34, column: 36, scope: !7)
!20 = !DILocation(line: 35, column: 40, scope: !7)
!21 = !DILocation(line: 36, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 36, scope: !7)
!23 = !DILocation(line: 29, column: 27, scope: !7)
!24 = !DILocation(line: 35, column: 56, scope: !7)
!25 = !DILocation(line: 36, column: 40, scope: !7)
!26 = !DILocation(line: 36, column: 34, scope: !7)
!27 = !DILocation(line: 36, column: 53, scope: !7)
!28 = !DILocation(line: 38, column: 22, scope: !7)
!29 = !DILocation(line: 39, column: 22, scope: !7)
!30 = !DILocation(line: 42, column: 39, scope: !7)
!31 = !DILocation(line: 233, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 243, column: 36, scope: !32, inlinedAt: !36)
!36 = !DILocation(line: 43, column: 25, scope: !32)
!37 = !DILocation(line: 243, column: 36, scope: !34, inlinedAt: !38)
!38 = !DILocation(line: 43, column: 25, scope: !34)
!39 = !DILocation(line: 57, column: 23, scope: !7)
!40 = !DILocation(line: 59, column: 24, scope: !7)
!41 = !DILocation(line: 66, column: 40, scope: !7)
!42 = !DILocation(line: 44, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 27, scope: !7)
!44 = !DILocation(line: 48, column: 35, scope: !7)
!45 = !DILocation(line: 48, column: 40, scope: !7)
!46 = !DILocation(line: 52, column: 58, scope: !7)
!47 = !DILocation(line: 53, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 55, scope: !7)
!49 = !DILocation(line: 55, column: 24, scope: !7)
!50 = !DILocation(line: 60, column: 30, scope: !7)
!51 = !DILocation(line: 61, column: 24, scope: !7)
!52 = !DILocation(line: 63, column: 24, scope: !7)
!53 = !DILocation(line: 64, column: 24, scope: !7)
!54 = !DILocation(line: 66, column: 35, scope: !7)
!55 = !DILocation(line: 66, column: 29, scope: !7)
!56 = !DILocation(line: 66, column: 53, scope: !7)
!57 = !DILocation(line: 44, column: 4, scope: !7)
