; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %7 = shl i32 %6, 1, !dbg !8
  %8 = and i32 %7, 254, !dbg !8
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %10 = shl i32 %9, 8, !dbg !10
  %11 = or i32 %10, %8, !dbg !11
  %12 = icmp slt i32 %11, 2304, !dbg !12
  %13 = sext i32 %11 to i64, !dbg !13
  %14 = getelementptr i16, ptr addrspace(1) %0, i64 %13, !dbg !13
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %12) #1, !dbg !14
  %16 = trunc i32 %15 to i16, !dbg !14
  %extelt.offset = lshr i32 %15, 16, !dbg !14
  %17 = trunc i32 %extelt.offset to i16, !dbg !14
  %18 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %16) #1, !dbg !15
  %19 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %17) #1, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !16
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %12) #1, !dbg !17
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !17
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !18
  %25 = add i32 %11, 2304, !dbg !19
  %26 = sext i32 %25 to i64, !dbg !20
  %27 = getelementptr i16, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %12) #1, !dbg !21
  %29 = trunc i32 %28 to i16, !dbg !21
  %extelt.offset1 = lshr i32 %28, 16, !dbg !21
  %30 = trunc i32 %extelt.offset1 to i16, !dbg !21
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #1, !dbg !22
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #1, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !23
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %12) #1, !dbg !24
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !24
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %2, i64 1, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !26
  %39 = add i32 %11, 4608, !dbg !27
  %40 = sext i32 %39 to i64, !dbg !28
  %41 = getelementptr i16, ptr addrspace(1) %0, i64 %40, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %12) #1, !dbg !29
  %43 = trunc i32 %42 to i16, !dbg !29
  %extelt.offset2 = lshr i32 %42, 16, !dbg !29
  %44 = trunc i32 %extelt.offset2 to i16, !dbg !29
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #1, !dbg !30
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #1, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !31
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %12) #1, !dbg !32
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !32
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %2, i64 2, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !34
  %53 = add i32 %11, 6912, !dbg !35
  %54 = sext i32 %53 to i64, !dbg !36
  %55 = getelementptr i16, ptr addrspace(1) %0, i64 %54, !dbg !36
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %12) #1, !dbg !37
  %57 = trunc i32 %56 to i16, !dbg !37
  %extelt.offset3 = lshr i32 %56, 16, !dbg !37
  %58 = trunc i32 %extelt.offset3 to i16, !dbg !37
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #1, !dbg !38
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #1, !dbg !38
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !39
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %12) #1, !dbg !40
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !40
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !40
  %65 = getelementptr float, ptr addrspace(1) %2, i64 3, !dbg !41
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !42
  %67 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !17
  %68 = insertelement <2 x i32> %67, i32 %35, i64 1, !dbg !17
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !17
  %70 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !18
  %71 = insertelement <2 x i32> %70, i32 %38, i64 1, !dbg !18
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !18
  %73 = fmul <2 x float> %69, <float 4.800000e+01, float 4.800000e+01>, !dbg !43
  %74 = fmul <2 x float> %73, %72, !dbg !44
  %75 = insertelement <2 x float> poison, float %18, i64 0, !dbg !45
  %76 = insertelement <2 x float> %75, float %31, i64 1, !dbg !45
  %77 = fmul <2 x float> %76, %74, !dbg !45
  %78 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !17
  %79 = insertelement <2 x i32> %78, i32 %36, i64 1, !dbg !17
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !17
  %81 = fmul <2 x float> %80, <float 4.800000e+01, float 4.800000e+01>, !dbg !43
  %82 = fmul <2 x float> %81, %72, !dbg !44
  %83 = insertelement <2 x float> poison, float %19, i64 0, !dbg !45
  %84 = insertelement <2 x float> %83, float %32, i64 1, !dbg !45
  %85 = fmul <2 x float> %84, %82, !dbg !45
  %shift = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %86 = fadd <2 x float> %77, %shift, !dbg !46
  %shift4 = shufflevector <2 x float> %85, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %87 = fadd <2 x float> %85, %shift4, !dbg !46
  %88 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !32
  %89 = insertelement <2 x i32> %88, i32 %63, i64 1, !dbg !32
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !32
  %91 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !34
  %92 = insertelement <2 x i32> %91, i32 %66, i64 1, !dbg !34
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !34
  %94 = fmul <2 x float> %90, <float 4.800000e+01, float 4.800000e+01>, !dbg !47
  %95 = fmul <2 x float> %94, %93, !dbg !48
  %96 = insertelement <2 x float> poison, float %45, i64 0, !dbg !49
  %97 = insertelement <2 x float> %96, float %59, i64 1, !dbg !49
  %98 = fmul <2 x float> %97, %95, !dbg !49
  %99 = fadd <2 x float> %86, %98, !dbg !50
  %100 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !32
  %101 = insertelement <2 x i32> %100, i32 %64, i64 1, !dbg !32
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !32
  %103 = fmul <2 x float> %102, <float 4.800000e+01, float 4.800000e+01>, !dbg !47
  %104 = fmul <2 x float> %103, %93, !dbg !48
  %105 = insertelement <2 x float> poison, float %46, i64 0, !dbg !49
  %106 = insertelement <2 x float> %105, float %60, i64 1, !dbg !49
  %107 = fmul <2 x float> %106, %104, !dbg !49
  %108 = fadd <2 x float> %87, %107, !dbg !50
  %shift5 = shufflevector <2 x float> %98, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %109 = fadd <2 x float> %99, %shift5, !dbg !51
  %shift6 = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %110 = fadd <2 x float> %108, %shift6, !dbg !51
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %13, !dbg !52
  %bc = bitcast <2 x float> %109 to <2 x i32>, !dbg !53
  %112 = extractelement <2 x i32> %bc, i64 0, !dbg !53
  %bc7 = bitcast <2 x float> %110 to <2 x i32>, !dbg !53
  %113 = extractelement <2 x i32> %bc7, i64 0, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %112, i32 %113, ptr addrspace(1) %111, i1 %12) #1, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c43d325oq66rzbtz3gszzeq3xfue23lqwb52rl2bc35q5kzpa7qs.py", directory: "/tmp/torchinductor_zeus/43")
!3 = !{ptr @triton__0d1d2d3d4de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de", linkageName: "triton__0d1d2d3d4de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 22, column: 21, scope: !5)
!13 = !DILocation(line: 24, column: 30, scope: !5)
!14 = !DILocation(line: 24, column: 35, scope: !5)
!15 = !DILocation(line: 24, column: 45, scope: !5)
!16 = !DILocation(line: 25, column: 30, scope: !5)
!17 = !DILocation(line: 25, column: 35, scope: !5)
!18 = !DILocation(line: 26, column: 19, scope: !5)
!19 = !DILocation(line: 28, column: 37, scope: !5)
!20 = !DILocation(line: 28, column: 30, scope: !5)
!21 = !DILocation(line: 28, column: 42, scope: !5)
!22 = !DILocation(line: 28, column: 52, scope: !5)
!23 = !DILocation(line: 29, column: 31, scope: !5)
!24 = !DILocation(line: 29, column: 43, scope: !5)
!25 = !DILocation(line: 30, column: 31, scope: !5)
!26 = !DILocation(line: 30, column: 20, scope: !5)
!27 = !DILocation(line: 32, column: 38, scope: !5)
!28 = !DILocation(line: 32, column: 31, scope: !5)
!29 = !DILocation(line: 32, column: 43, scope: !5)
!30 = !DILocation(line: 32, column: 53, scope: !5)
!31 = !DILocation(line: 33, column: 31, scope: !5)
!32 = !DILocation(line: 33, column: 43, scope: !5)
!33 = !DILocation(line: 34, column: 31, scope: !5)
!34 = !DILocation(line: 34, column: 20, scope: !5)
!35 = !DILocation(line: 36, column: 38, scope: !5)
!36 = !DILocation(line: 36, column: 31, scope: !5)
!37 = !DILocation(line: 36, column: 43, scope: !5)
!38 = !DILocation(line: 36, column: 53, scope: !5)
!39 = !DILocation(line: 37, column: 31, scope: !5)
!40 = !DILocation(line: 37, column: 43, scope: !5)
!41 = !DILocation(line: 38, column: 31, scope: !5)
!42 = !DILocation(line: 38, column: 20, scope: !5)
!43 = !DILocation(line: 42, column: 18, scope: !5)
!44 = !DILocation(line: 43, column: 18, scope: !5)
!45 = !DILocation(line: 44, column: 18, scope: !5)
!46 = !DILocation(line: 49, column: 19, scope: !5)
!47 = !DILocation(line: 51, column: 20, scope: !5)
!48 = !DILocation(line: 52, column: 20, scope: !5)
!49 = !DILocation(line: 53, column: 20, scope: !5)
!50 = !DILocation(line: 54, column: 20, scope: !5)
!51 = !DILocation(line: 59, column: 20, scope: !5)
!52 = !DILocation(line: 60, column: 25, scope: !5)
!53 = !DILocation(line: 60, column: 37, scope: !5)
!54 = !DILocation(line: 60, column: 4, scope: !5)
