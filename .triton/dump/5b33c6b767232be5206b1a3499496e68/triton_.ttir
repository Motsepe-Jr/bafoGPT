module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %c1536_i32 = arith.constant 1536 : i32
    %c512_i32 = arith.constant 512 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c256_i32 = arith.constant 256 : i32
    %c-512_i32 = arith.constant -512 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<256x1xbf16>
    %cst_0 = arith.constant dense<128> : tensor<256x1xi32>
    %cst_1 = arith.constant dense<-128> : tensor<256x1xi32>
    %cst_2 = arith.constant dense<128> : tensor<256x1xi64>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<256x1xf32>
    %cst_4 = arith.constant dense<256> : tensor<256x1xi64>
    %cst_5 = arith.constant dense<4> : tensor<256x1xi32>
    %cst_6 = arith.constant dense<256> : tensor<256x1xi32>
    %0 = tt.get_program_id y : i32
    %1 = arith.cmpi slt, %0, %c16_i32 : i32
    %2 = tt.get_program_id x : i32
    %3 = arith.muli %2, %c256_i32 : i32
    %4 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32>
    %5 = tt.expand_dims %4 {axis = 1 : i32} : (tensor<256xi32>) -> tensor<256x1xi32>
    %6 = tt.splat %3 : (i32) -> tensor<256x1xi32>
    %7 = arith.addi %6, %5 : tensor<256x1xi32>
    %8 = arith.cmpi slt, %7, %cst_6 : tensor<256x1xi32>
    %9 = arith.remsi %0, %c4_i32 : i32
    %10 = arith.divsi %0, %c4_i32 : i32
    %11 = arith.muli %7, %cst_5 : tensor<256x1xi32>
    %12 = tt.splat %9 : (i32) -> tensor<256x1xi32>
    %13 = arith.addi %12, %11 : tensor<256x1xi32>
    %14 = arith.muli %10, %c2048_i32 : i32
    %15 = tt.splat %14 : (i32) -> tensor<256x1xi32>
    %16 = arith.addi %13, %15 : tensor<256x1xi32>
    %17 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<256x1x!tt.ptr<bf16, 1>>
    %18 = tt.addptr %17, %16 : tensor<256x1x!tt.ptr<bf16, 1>>, tensor<256x1xi32>
    %19 = tt.splat %1 : (i1) -> tensor<256x1xi1>
    %20 = arith.andi %8, %19 : tensor<256x1xi1>
    %21 = tt.load %18, %20 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %22 = arith.extf %21 : tensor<256x1xbf16> to tensor<256x1xf32>
    %23 = arith.muli %9, %c256_i32 : i32
    %24 = tt.splat %23 : (i32) -> tensor<256x1xi32>
    %25 = arith.addi %7, %24 : tensor<256x1xi32>
    %26 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<256x1x!tt.ptr<f32, 1>>
    %27 = tt.addptr %26, %25 : tensor<256x1x!tt.ptr<f32, 1>>, tensor<256x1xi32>
    %28 = tt.load %27, %20 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xf32>
    %29 = arith.addi %9, %c1024_i32 : i32
    %30 = tt.splat %29 : (i32) -> tensor<256x1xi32>
    %31 = arith.addi %30, %11 : tensor<256x1xi32>
    %32 = arith.addi %31, %15 : tensor<256x1xi32>
    %33 = tt.addptr %17, %32 : tensor<256x1x!tt.ptr<bf16, 1>>, tensor<256x1xi32>
    %34 = tt.load %33, %20 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %35 = arith.extf %34 : tensor<256x1xbf16> to tensor<256x1xf32>
    %36 = arith.extsi %7 : tensor<256x1xi32> to tensor<256x1xi64>
    %37 = arith.cmpi sge, %36, %cst_4 : tensor<256x1xi64>
    %38 = arith.andi %37, %8 : tensor<256x1xi1>
    %39 = arith.andi %38, %19 : tensor<256x1xi1>
    %40 = tt.load %18, %39, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %41 = arith.extf %40 : tensor<256x1xbf16> to tensor<256x1xf32>
    %42 = arith.select %37, %41, %cst_3 : tensor<256x1xi1>, tensor<256x1xf32>
    %43 = arith.mulf %22, %28 : tensor<256x1xf32>
    %44 = arith.cmpi sge, %36, %cst_2 : tensor<256x1xi64>
    %45 = arith.addi %9, %c-512_i32 : i32
    %46 = tt.splat %45 : (i32) -> tensor<256x1xi32>
    %47 = arith.addi %46, %11 : tensor<256x1xi32>
    %48 = arith.addi %47, %15 : tensor<256x1xi32>
    %49 = tt.addptr %17, %48 : tensor<256x1x!tt.ptr<bf16, 1>>, tensor<256x1xi32>
    %50 = arith.andi %44, %8 : tensor<256x1xi1>
    %51 = arith.andi %50, %19 : tensor<256x1xi1>
    %52 = tt.load %49, %51, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %53 = arith.extf %52 : tensor<256x1xbf16> to tensor<256x1xf32>
    %54 = arith.addi %7, %cst_1 : tensor<256x1xi32>
    %55 = arith.addi %54, %24 : tensor<256x1xi32>
    %56 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<256x1x!tt.ptr<f32, 1>>
    %57 = tt.addptr %56, %55 : tensor<256x1x!tt.ptr<f32, 1>>, tensor<256x1xi32>
    %58 = tt.load %57, %51, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xf32>
    %59 = arith.mulf %53, %58 : tensor<256x1xf32>
    %60 = arith.subf %cst_3, %59 : tensor<256x1xf32>
    %61 = arith.select %44, %60, %cst_3 : tensor<256x1xi1>, tensor<256x1xf32>
    %62 = arith.addf %43, %61 : tensor<256x1xf32>
    %63 = arith.cmpi slt, %36, %cst_2 : tensor<256x1xi64>
    %64 = arith.addi %9, %c512_i32 : i32
    %65 = tt.splat %64 : (i32) -> tensor<256x1xi32>
    %66 = arith.addi %65, %11 : tensor<256x1xi32>
    %67 = arith.addi %66, %15 : tensor<256x1xi32>
    %68 = tt.addptr %17, %67 : tensor<256x1x!tt.ptr<bf16, 1>>, tensor<256x1xi32>
    %69 = arith.andi %63, %8 : tensor<256x1xi1>
    %70 = arith.andi %69, %19 : tensor<256x1xi1>
    %71 = tt.load %68, %70, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %72 = arith.extf %71 : tensor<256x1xbf16> to tensor<256x1xf32>
    %73 = arith.addi %7, %cst_0 : tensor<256x1xi32>
    %74 = arith.addi %73, %24 : tensor<256x1xi32>
    %75 = tt.addptr %56, %74 : tensor<256x1x!tt.ptr<f32, 1>>, tensor<256x1xi32>
    %76 = tt.load %75, %70, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xf32>
    %77 = arith.mulf %72, %76 : tensor<256x1xf32>
    %78 = arith.select %63, %77, %cst_3 : tensor<256x1xi1>, tensor<256x1xf32>
    %79 = arith.addf %62, %78 : tensor<256x1xf32>
    %80 = arith.addf %42, %79 : tensor<256x1xf32>
    %81 = tt.load %33, %39, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %82 = arith.extf %81 : tensor<256x1xbf16> to tensor<256x1xf32>
    %83 = arith.select %37, %82, %cst_3 : tensor<256x1xi1>, tensor<256x1xf32>
    %84 = arith.mulf %35, %28 : tensor<256x1xf32>
    %85 = tt.load %68, %51, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %86 = arith.extf %85 : tensor<256x1xbf16> to tensor<256x1xf32>
    %87 = arith.mulf %86, %58 : tensor<256x1xf32>
    %88 = arith.subf %cst_3, %87 : tensor<256x1xf32>
    %89 = arith.select %44, %88, %cst_3 : tensor<256x1xi1>, tensor<256x1xf32>
    %90 = arith.addf %84, %89 : tensor<256x1xf32>
    %91 = arith.addi %9, %c1536_i32 : i32
    %92 = tt.splat %91 : (i32) -> tensor<256x1xi32>
    %93 = arith.addi %92, %11 : tensor<256x1xi32>
    %94 = arith.addi %93, %15 : tensor<256x1xi32>
    %95 = tt.addptr %17, %94 : tensor<256x1x!tt.ptr<bf16, 1>>, tensor<256x1xi32>
    %96 = tt.load %95, %70, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16>
    %97 = arith.extf %96 : tensor<256x1xbf16> to tensor<256x1xf32>
    %98 = arith.mulf %97, %76 : tensor<256x1xf32>
    %99 = arith.select %63, %98, %cst_3 : tensor<256x1xi1>, tensor<256x1xf32>
    %100 = arith.addf %90, %99 : tensor<256x1xf32>
    %101 = arith.addf %83, %100 : tensor<256x1xf32>
    %102 = arith.addf %80, %101 : tensor<256x1xf32>
    %103 = arith.muli %10, %c1024_i32 : i32
    %104 = tt.splat %103 : (i32) -> tensor<256x1xi32>
    %105 = arith.addi %13, %104 : tensor<256x1xi32>
    %106 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<256x1x!tt.ptr<f32, 1>>
    %107 = tt.addptr %106, %105 : tensor<256x1x!tt.ptr<f32, 1>>, tensor<256x1xi32>
    tt.store %107, %102, %20 {cache = 1 : i32, evict = 1 : i32} : tensor<256x1xf32>
    tt.return
  }
}
