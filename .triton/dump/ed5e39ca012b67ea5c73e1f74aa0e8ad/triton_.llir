; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_1 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_1 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_1 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp13 < 288256"
@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d45de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = lshr i32 %7, 6, !dbg !10
  %11 = and i32 %10, 3, !dbg !10
  %12 = and i32 %7, 3, !dbg !10
  %13 = and i32 %9, 1, !dbg !11
  %urem = and i32 %7, 63, !dbg !11
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !12
  %.fr12 = freeze i32 %14, !dbg !13
  %15 = shl i32 %.fr12, 2, !dbg !13
  %16 = or i32 %15, %11, !dbg !14
  %17 = or i32 %15, %12, !dbg !14
  %18 = icmp slt i32 %16, 4, !dbg !15
  %19 = icmp slt i32 %17, 4, !dbg !15
  %20 = sext i32 %16 to i64, !dbg !16
  %21 = getelementptr i64, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = sext i32 %17 to i64, !dbg !16
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 %18) #6, !dbg !17
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %19) #6, !dbg !17
  %26 = add i64 %24, 288256, !dbg !18
  %27 = add i64 %25, 288256, !dbg !18
  %28 = icmp slt i64 %24, 0, !dbg !19
  %29 = icmp slt i64 %25, 0, !dbg !19
  %30 = select i1 %28, i64 %26, i64 %24, !dbg !20
  %31 = select i1 %29, i64 %27, i64 %25, !dbg !20
  %32 = icmp ugt i64 %31, 288255, !dbg !21
  %.not2 = and i1 %19, %32, !dbg !22
  %33 = mul i64 %30, 2304, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33
  br i1 %.not2, label %.split.us, label %.split, !dbg !23

.split.us:                                        ; preds = %6
  br i1 %18, label %.split.us.split, label %.split.us.split.us

.split.us.split.us:                               ; preds = %.split.us, %.split.us.split.us
  %35 = phi i32 [ %40, %.split.us.split.us ], [ 0, %.split.us ]
  %36 = or i32 %35, %urem, !dbg !24
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  %37 = zext nneg i32 %36 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %34, i64 %37, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 false, i32 0, i1 false) #6, !dbg !27
  %40 = add nuw nsw i32 %35, 64, !dbg !28
  %41 = icmp ult i32 %35, 2240, !dbg !28
  br i1 %41, label %.split.us.split.us, label %.split4.us, !dbg !28

.split.us.split:                                  ; preds = %.split.us, %.split.us.split
  %42 = phi float [ %51, %.split.us.split ], [ 0.000000e+00, %.split.us ]
  %43 = phi i32 [ %52, %.split.us.split ], [ 0, %.split.us ]
  %44 = or i32 %43, %urem, !dbg !24
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  %45 = zext nneg i32 %44 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %34, i64 %45, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 true, i32 0, i1 true) #6, !dbg !27
  %48 = bitcast i32 %47 to float, !dbg !27
  %49 = fmul float %48, 4.800000e+01, !dbg !29
  %50 = fmul float %49, %49, !dbg !30
  %51 = fadd float %42, %50, !dbg !31
  %52 = add nuw nsw i32 %43, 64, !dbg !28
  %53 = icmp ult i32 %43, 2240, !dbg !28
  br i1 %53, label %.split.us.split, label %.split4.us, !dbg !28

.split:                                           ; preds = %6
  br i1 %18, label %.split.split, label %.split.split.us

.split.split.us:                                  ; preds = %.split, %.split.split.us
  %54 = phi i32 [ %59, %.split.split.us ], [ 0, %.split ]
  %55 = or i32 %54, %urem, !dbg !24
  %56 = zext nneg i32 %55 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %34, i64 %56, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 false, i32 0, i1 false) #6, !dbg !27
  %59 = add nuw nsw i32 %54, 64, !dbg !28
  %60 = icmp ult i32 %54, 2240, !dbg !28
  br i1 %60, label %.split.split.us, label %.split4.us, !dbg !28

.split.split:                                     ; preds = %.split, %.split.split
  %61 = phi float [ %70, %.split.split ], [ 0.000000e+00, %.split ]
  %62 = phi i32 [ %71, %.split.split ], [ 0, %.split ]
  %63 = or i32 %62, %urem, !dbg !24
  %64 = zext nneg i32 %63 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %34, i64 %64, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 true, i32 0, i1 true) #6, !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = fmul float %67, 4.800000e+01, !dbg !29
  %69 = fmul float %68, %68, !dbg !30
  %70 = fadd float %61, %69, !dbg !31
  %71 = add nuw nsw i32 %62, 64, !dbg !28
  %72 = icmp ult i32 %62, 2240, !dbg !28
  br i1 %72, label %.split.split, label %.split4.us, !dbg !28

.split4.us:                                       ; preds = %.split.split.us, %.split.split, %.split.us.split.us, %.split.us.split
  %.us-phi = phi float [ %51, %.split.us.split ], [ 0.000000e+00, %.split.us.split.us ], [ %70, %.split.split ], [ 0.000000e+00, %.split.split.us ]
  %73 = bitcast float %.us-phi to i32, !dbg !32
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !32
  %75 = bitcast i32 %74 to float, !dbg !32
  %76 = fadd float %.us-phi, %75, !dbg !36
  %77 = bitcast float %76 to i32, !dbg !32
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !32
  %79 = bitcast i32 %78 to float, !dbg !32
  %80 = fadd float %76, %79, !dbg !36
  %81 = bitcast float %80 to i32, !dbg !32
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !32
  %83 = bitcast i32 %82 to float, !dbg !32
  %84 = fadd float %80, %83, !dbg !36
  %85 = bitcast float %84 to i32, !dbg !32
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = fadd float %84, %87, !dbg !36
  %89 = bitcast float %88 to i32, !dbg !32
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !32
  %91 = bitcast i32 %90 to float, !dbg !32
  %92 = fadd float %88, %91, !dbg !36
  %93 = icmp eq i32 %8, 0, !dbg !32
  %94 = shl nuw nsw i32 %11, 1, !dbg !32
  %95 = or i32 %94, %13, !dbg !32
  %96 = zext nneg i32 %95 to i64, !dbg !32
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i64 %96, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, float %92, i1 %93) #6, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %98 = icmp slt i32 %7, 8, !dbg !32
  %99 = sext i32 %7 to i64, !dbg !32
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i64 %99, !dbg !32
  %101 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %100, i1 %98) #6, !dbg !32
  %102 = bitcast float %101 to i32, !dbg !32
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !32
  %104 = bitcast i32 %103 to float, !dbg !32
  %105 = fadd float %101, %104, !dbg !36
  %106 = and i32 %7, 1, !dbg !32
  %107 = icmp eq i32 %106, 0, !dbg !32
  %108 = and i1 %98, %107, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, float %105, i1 %108) #6, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %109 = zext nneg i32 %94 to i64, !dbg !32
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i64 %109, !dbg !32
  %111 = load float, ptr addrspace(3) %110, align 4, !dbg !32
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 2.304000e+03) #6, !dbg !40
  %113 = fadd float %112, 0x3EE4F8B580000000, !dbg !41
  %114 = mul i32 %16, 2304, !dbg !42
  br label %115, !dbg !43

115:                                              ; preds = %.split4.us, %__nv_rsqrtf.exit
  %116 = phi i32 [ 0, %.split4.us ], [ %140, %__nv_rsqrtf.exit ]
  %117 = or i32 %116, %urem, !dbg !44
  %118 = zext nneg i32 %117 to i64, !dbg !45
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !45
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 true, i32 0, i1 true) #6, !dbg !46
  %121 = bitcast i32 %120 to float, !dbg !46
  br i1 %.not2, label %122, label %123, !dbg !47

122:                                              ; preds = %115
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 883, ptr nonnull @assertFunc_1, i64 1), !dbg !47
  br label %123, !dbg !47

123:                                              ; preds = %122, %115
  %124 = getelementptr float, ptr addrspace(1) %34, i64 %118, !dbg !48
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %18, i32 0, i1 %18) #6, !dbg !49
  %126 = bitcast i32 %125 to float, !dbg !49
  %127 = fmul float %126, 4.800000e+01, !dbg !50
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i = icmp eq i32 %128, 0, !dbg !51
  br i1 %.not.i, label %131, label %129, !dbg !51

129:                                              ; preds = %123
  %130 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %113), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

131:                                              ; preds = %123
  %132 = tail call float @llvm.nvvm.rsqrt.approx.f(float %113), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %129, %131
  %.0.i = phi float [ %130, %129 ], [ %132, %131 ], !dbg !51
  %133 = fmul float %127, %.0.i, !dbg !52
  %134 = fadd float %121, 1.000000e+00, !dbg !53
  %135 = fmul float %134, %133, !dbg !54
  %136 = add i32 %117, %114, !dbg !55
  %137 = sext i32 %136 to i64, !dbg !56
  %138 = getelementptr i16, ptr addrspace(1) %3, i64 %137, !dbg !56
  %139 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %135) #6, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %139, ptr addrspace(1) %138, i1 %18) #6, !dbg !57
  %140 = add nuw nsw i32 %116, 64, !dbg !43
  %141 = icmp ult i32 %116, 2240, !dbg !43
  br i1 %141, label %115, label %142, !dbg !43

142:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cbc6pweon6mczytveh5urbq7gpgbvt5eq2vg2chiiag42zvj7t77.py", directory: "/tmp/torchinductor_zeus/bc")
!4 = !{ptr @triton__0d1d2d3d45de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d45de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d45de", linkageName: "triton__0d1d2d3d45de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 44, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 28, scope: !7)
!13 = !DILocation(line: 21, column: 33, scope: !7)
!14 = !DILocation(line: 22, column: 23, scope: !7)
!15 = !DILocation(line: 23, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 22, scope: !7)
!19 = !DILocation(line: 33, column: 22, scope: !7)
!20 = !DILocation(line: 34, column: 36, scope: !7)
!21 = !DILocation(line: 35, column: 41, scope: !7)
!22 = !DILocation(line: 36, column: 45, scope: !7)
!23 = !DILocation(line: 35, column: 67, scope: !7)
!24 = !DILocation(line: 29, column: 27, scope: !7)
!25 = !DILocation(line: 36, column: 40, scope: !7)
!26 = !DILocation(line: 36, column: 34, scope: !7)
!27 = !DILocation(line: 36, column: 53, scope: !7)
!28 = !DILocation(line: 28, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 22, scope: !7)
!30 = !DILocation(line: 39, column: 22, scope: !7)
!31 = !DILocation(line: 42, column: 47, scope: !7)
!32 = !DILocation(line: 243, column: 36, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!35 = !DILocation(line: 43, column: 25, scope: !33)
!36 = !DILocation(line: 233, column: 15, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!38 = !DILocation(line: 243, column: 36, scope: !37, inlinedAt: !39)
!39 = !DILocation(line: 43, column: 25, scope: !37)
!40 = !DILocation(line: 57, column: 23, scope: !7)
!41 = !DILocation(line: 59, column: 24, scope: !7)
!42 = !DILocation(line: 66, column: 40, scope: !7)
!43 = !DILocation(line: 44, column: 36, scope: !7)
!44 = !DILocation(line: 45, column: 27, scope: !7)
!45 = !DILocation(line: 48, column: 35, scope: !7)
!46 = !DILocation(line: 48, column: 40, scope: !7)
!47 = !DILocation(line: 52, column: 69, scope: !7)
!48 = !DILocation(line: 53, column: 35, scope: !7)
!49 = !DILocation(line: 53, column: 55, scope: !7)
!50 = !DILocation(line: 55, column: 24, scope: !7)
!51 = !DILocation(line: 60, column: 30, scope: !7)
!52 = !DILocation(line: 61, column: 24, scope: !7)
!53 = !DILocation(line: 63, column: 24, scope: !7)
!54 = !DILocation(line: 64, column: 24, scope: !7)
!55 = !DILocation(line: 66, column: 35, scope: !7)
!56 = !DILocation(line: 66, column: 29, scope: !7)
!57 = !DILocation(line: 66, column: 53, scope: !7)
!58 = !DILocation(line: 44, column: 4, scope: !7)
