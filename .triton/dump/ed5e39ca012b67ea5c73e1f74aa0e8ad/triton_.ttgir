#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [4, 2], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [8, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d45de(%arg0: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<4> : tensor<4x1xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<4x1xi32, #blocked>
    %cst_1 = arith.constant dense<2304> : tensor<4x1xi64, #blocked>
    %cst_2 = arith.constant dense<0> : tensor<4x1xi64, #blocked>
    %cst_3 = arith.constant dense<288256> : tensor<4x1xi64, #blocked>
    %cst_4 = arith.constant dense<1.000000e+00> : tensor<1x64xf32, #blocked>
    %cst_5 = arith.constant dense<288256> : tensor<4x1xi64, #blocked1>
    %cst_6 = arith.constant dense<0> : tensor<4x1xi64, #blocked1>
    %c0_i32 = arith.constant 0 : i32
    %c64_i32 = arith.constant 64 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked>
    %cst_8 = arith.constant dense<4.800000e+01> : tensor<4x64xf32, #blocked>
    %cst_9 = arith.constant dense<true> : tensor<4x1xi1, #blocked1>
    %cst_10 = arith.constant dense<2304> : tensor<1x64xi32, #blocked>
    %cst_11 = arith.constant dense<0.000000e+00> : tensor<4x64xf32, #blocked>
    %cst_12 = arith.constant dense<9.99999974E-6> : tensor<4x1xf32, #blocked>
    %cst_13 = arith.constant dense<2.304000e+03> : tensor<4x1xf32, #blocked>
    %c4_i32 = arith.constant 4 : i32
    %cst_14 = arith.constant dense<4> : tensor<4x1xi32, #blocked1>
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c4_i32 : i32
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %3 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %4 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<4x1xi32, #blocked>
    %5 = tt.expand_dims %3 {axis = 1 : i32} : (tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<4x1xi32, #blocked1>
    %6 = tt.splat %1 : (i32) -> tensor<4x1xi32, #blocked>
    %7 = tt.splat %1 : (i32) -> tensor<4x1xi32, #blocked1>
    %8 = arith.addi %6, %4 : tensor<4x1xi32, #blocked>
    %9 = arith.addi %7, %5 : tensor<4x1xi32, #blocked1>
    %10 = arith.cmpi slt, %8, %cst : tensor<4x1xi32, #blocked>
    %11 = arith.cmpi slt, %9, %cst_14 : tensor<4x1xi32, #blocked1>
    %12 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %13 = tt.expand_dims %12 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked>
    %14 = tt.splat %arg0 : (!tt.ptr<i64, 1>) -> tensor<4x1x!tt.ptr<i64, 1>, #blocked>
    %15 = tt.splat %arg0 : (!tt.ptr<i64, 1>) -> tensor<4x1x!tt.ptr<i64, 1>, #blocked1>
    %16 = tt.addptr %14, %8 : tensor<4x1x!tt.ptr<i64, 1>, #blocked>, tensor<4x1xi32, #blocked>
    %17 = tt.addptr %15, %9 : tensor<4x1x!tt.ptr<i64, 1>, #blocked1>, tensor<4x1xi32, #blocked1>
    %18 = tt.load %16, %10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<4x1xi64, #blocked>
    %19 = tt.load %17, %11 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<4x1xi64, #blocked1>
    %20 = arith.addi %18, %cst_3 : tensor<4x1xi64, #blocked>
    %21 = arith.addi %19, %cst_5 : tensor<4x1xi64, #blocked1>
    %22 = arith.cmpi slt, %18, %cst_2 : tensor<4x1xi64, #blocked>
    %23 = arith.cmpi slt, %19, %cst_6 : tensor<4x1xi64, #blocked1>
    %24 = arith.select %22, %20, %18 : tensor<4x1xi1, #blocked>, tensor<4x1xi64, #blocked>
    %25 = arith.select %23, %21, %19 : tensor<4x1xi1, #blocked1>, tensor<4x1xi64, #blocked1>
    %26 = arith.cmpi sge, %25, %cst_6 : tensor<4x1xi64, #blocked1>
    %27 = arith.cmpi slt, %25, %cst_5 : tensor<4x1xi64, #blocked1>
    %28 = arith.andi %26, %27 : tensor<4x1xi1, #blocked1>
    %29 = arith.xori %11, %cst_9 : tensor<4x1xi1, #blocked1>
    %30 = arith.ori %28, %29 : tensor<4x1xi1, #blocked1>
    %31 = arith.muli %24, %cst_1 : tensor<4x1xi64, #blocked>
    %32 = tt.broadcast %31 : (tensor<4x1xi64, #blocked>) -> tensor<4x64xi64, #blocked>
    %33 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<4x64x!tt.ptr<f32, 1>, #blocked>
    %34 = tt.broadcast %10 : (tensor<4x1xi1, #blocked>) -> tensor<4x64xi1, #blocked>
    %35 = scf.for %arg6 = %c0_i32 to %c2304_i32 step %c64_i32 iter_args(%arg7 = %cst_11) -> (tensor<4x64xf32, #blocked>)  : i32 {
      %44 = tt.splat %arg6 : (i32) -> tensor<1x64xi32, #blocked>
      %45 = arith.addi %44, %13 : tensor<1x64xi32, #blocked>
      %46 = arith.cmpi slt, %45, %cst_10 : tensor<1x64xi32, #blocked>
      tt.assert %30, "index out of bounds: 0 <= tmp3 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<4x1xi1, #blocked1>
      %47 = arith.extsi %45 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked>
      %48 = tt.broadcast %47 : (tensor<1x64xi64, #blocked>) -> tensor<4x64xi64, #blocked>
      %49 = arith.addi %48, %32 : tensor<4x64xi64, #blocked>
      %50 = tt.addptr %33, %49 : tensor<4x64x!tt.ptr<f32, 1>, #blocked>, tensor<4x64xi64, #blocked>
      %51 = tt.broadcast %46 : (tensor<1x64xi1, #blocked>) -> tensor<4x64xi1, #blocked>
      %52 = arith.andi %51, %34 : tensor<4x64xi1, #blocked>
      %53 = tt.load %50, %52, %cst_11 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<4x64xf32, #blocked>
      %54 = arith.mulf %53, %cst_8 : tensor<4x64xf32, #blocked>
      %55 = arith.mulf %54, %54 : tensor<4x64xf32, #blocked>
      %56 = arith.addf %arg7, %55 : tensor<4x64xf32, #blocked>
      %57 = arith.select %52, %56, %arg7 : tensor<4x64xi1, #blocked>, tensor<4x64xf32, #blocked>
      scf.yield %57 : tensor<4x64xf32, #blocked>
    }
    %36 = "tt.reduce"(%35) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %44 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %44 : f32
    }) : (tensor<4x64xf32, #blocked>) -> tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %37 = tt.expand_dims %36 {axis = 1 : i32} : (tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<4x1xf32, #blocked>
    %38 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x64x!tt.ptr<f32, 1>, #blocked>
    %39 = arith.divf %37, %cst_13 : tensor<4x1xf32, #blocked>
    %40 = arith.addf %39, %cst_12 : tensor<4x1xf32, #blocked>
    %41 = arith.muli %8, %cst_0 : tensor<4x1xi32, #blocked>
    %42 = tt.broadcast %41 : (tensor<4x1xi32, #blocked>) -> tensor<4x64xi32, #blocked>
    %43 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<4x64x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg6 = %c0_i32 to %c2304_i32 step %c64_i32  : i32 {
      %44 = tt.splat %arg6 : (i32) -> tensor<1x64xi32, #blocked>
      %45 = arith.addi %44, %13 : tensor<1x64xi32, #blocked>
      %46 = arith.cmpi slt, %45, %cst_10 : tensor<1x64xi32, #blocked>
      %47 = tt.addptr %38, %45 : tensor<1x64x!tt.ptr<f32, 1>, #blocked>, tensor<1x64xi32, #blocked>
      %48 = tt.load %47, %46, %cst_7 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x64xf32, #blocked>
      tt.assert %30, "index out of bounds: 0 <= tmp13 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<4x1xi1, #blocked1>
      %49 = arith.extsi %45 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked>
      %50 = tt.broadcast %49 : (tensor<1x64xi64, #blocked>) -> tensor<4x64xi64, #blocked>
      %51 = arith.addi %50, %32 : tensor<4x64xi64, #blocked>
      %52 = tt.addptr %33, %51 : tensor<4x64x!tt.ptr<f32, 1>, #blocked>, tensor<4x64xi64, #blocked>
      %53 = tt.broadcast %46 : (tensor<1x64xi1, #blocked>) -> tensor<4x64xi1, #blocked>
      %54 = arith.andi %53, %34 : tensor<4x64xi1, #blocked>
      %55 = tt.load %52, %54, %cst_11 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<4x64xf32, #blocked>
      %56 = arith.mulf %55, %cst_8 : tensor<4x64xf32, #blocked>
      %57 = tt.extern_elementwise %40 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<4x1xf32, #blocked>) -> tensor<4x1xf32, #blocked>
      %58 = tt.broadcast %57 : (tensor<4x1xf32, #blocked>) -> tensor<4x64xf32, #blocked>
      %59 = arith.mulf %56, %58 : tensor<4x64xf32, #blocked>
      %60 = arith.addf %48, %cst_4 : tensor<1x64xf32, #blocked>
      %61 = tt.broadcast %60 : (tensor<1x64xf32, #blocked>) -> tensor<4x64xf32, #blocked>
      %62 = arith.mulf %59, %61 : tensor<4x64xf32, #blocked>
      %63 = tt.broadcast %45 : (tensor<1x64xi32, #blocked>) -> tensor<4x64xi32, #blocked>
      %64 = arith.addi %63, %42 : tensor<4x64xi32, #blocked>
      %65 = tt.addptr %43, %64 : tensor<4x64x!tt.ptr<bf16, 1>, #blocked>, tensor<4x64xi32, #blocked>
      %66 = arith.truncf %62 : tensor<4x64xf32, #blocked> to tensor<4x64xbf16, #blocked>
      tt.store %65, %66, %54 {cache = 1 : i32, evict = 1 : i32} : tensor<4x64xbf16, #blocked>
    }
    tt.return
  }
}
