; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5de6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %urem = and i32 %8, 255, !dbg !10
  %9 = shl nuw nsw i32 %urem, 3, !dbg !10
  %10 = or i32 %9, 4, !dbg !10
  %11 = shl nuw nsw i32 %urem, 2, !dbg !10
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %13 = icmp slt i32 %12, 512, !dbg !12
  %14 = mul i32 %12, 2304, !dbg !13
  %15 = lshr i32 %8, 5, !dbg !10
  %16 = add i32 %9, %14, !dbg !14
  %17 = add i32 %10, %14, !dbg !14
  %18 = sext i32 %16 to i64, !dbg !15
  %19 = getelementptr i16, ptr addrspace(1) %1, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #6, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %25 = trunc i32 %21 to i16, !dbg !16
  %extelt.offset19 = lshr i32 %21, 16, !dbg !16
  %26 = trunc i32 %extelt.offset19 to i16, !dbg !16
  %27 = trunc i32 %22 to i16, !dbg !16
  %extelt.offset20 = lshr i32 %22, 16, !dbg !16
  %28 = trunc i32 %extelt.offset20 to i16, !dbg !16
  %29 = trunc i32 %23 to i16, !dbg !16
  %extelt.offset21 = lshr i32 %23, 16, !dbg !16
  %30 = trunc i32 %extelt.offset21 to i16, !dbg !16
  %31 = trunc i32 %24 to i16, !dbg !16
  %extelt.offset22 = lshr i32 %24, 16, !dbg !16
  %32 = trunc i32 %extelt.offset22 to i16, !dbg !16
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !17
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !17
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !17
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !17
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !17
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !17
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !17
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #6, !dbg !17
  %41 = zext nneg i32 %9 to i64, !dbg !18
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !18
  %43 = zext nneg i32 %10 to i64, !dbg !18
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !18
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !19
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !19
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !19
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !19
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !20
  %56 = sext i32 %17 to i64, !dbg !20
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !20
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #6, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !21
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !21
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !21
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #6, !dbg !21
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !21
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !21
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !21
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !21
  %68 = insertelement <8 x i32> poison, i32 %46, i64 0, !dbg !19
  %69 = insertelement <8 x i32> %68, i32 %47, i64 1, !dbg !19
  %70 = insertelement <8 x i32> %69, i32 %48, i64 2, !dbg !19
  %71 = insertelement <8 x i32> %70, i32 %49, i64 3, !dbg !19
  %72 = insertelement <8 x i32> %71, i32 %51, i64 4, !dbg !19
  %73 = insertelement <8 x i32> %72, i32 %52, i64 5, !dbg !19
  %74 = insertelement <8 x i32> %73, i32 %53, i64 6, !dbg !19
  %75 = insertelement <8 x i32> %74, i32 %54, i64 7, !dbg !19
  %76 = bitcast <8 x i32> %75 to <8 x float>, !dbg !19
  %77 = insertelement <8 x i32> poison, i32 %59, i64 0, !dbg !21
  %78 = insertelement <8 x i32> %77, i32 %60, i64 1, !dbg !21
  %79 = insertelement <8 x i32> %78, i32 %61, i64 2, !dbg !21
  %80 = insertelement <8 x i32> %79, i32 %62, i64 3, !dbg !21
  %81 = insertelement <8 x i32> %80, i32 %64, i64 4, !dbg !21
  %82 = insertelement <8 x i32> %81, i32 %65, i64 5, !dbg !21
  %83 = insertelement <8 x i32> %82, i32 %66, i64 6, !dbg !21
  %84 = insertelement <8 x i32> %83, i32 %67, i64 7, !dbg !21
  %85 = bitcast <8 x i32> %84 to <8 x float>, !dbg !21
  %86 = fadd <8 x float> %76, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !22
  %87 = insertelement <8 x float> poison, float %33, i64 0, !dbg !23
  %88 = insertelement <8 x float> %87, float %34, i64 1, !dbg !23
  %89 = insertelement <8 x float> %88, float %35, i64 2, !dbg !23
  %90 = insertelement <8 x float> %89, float %36, i64 3, !dbg !23
  %91 = insertelement <8 x float> %90, float %37, i64 4, !dbg !23
  %92 = insertelement <8 x float> %91, float %38, i64 5, !dbg !23
  %93 = insertelement <8 x float> %92, float %39, i64 6, !dbg !23
  %94 = insertelement <8 x float> %93, float %40, i64 7, !dbg !23
  %95 = fmul <8 x float> %94, %86, !dbg !23
  %96 = fmul <8 x float> %95, %85, !dbg !24
  %97 = insertelement <8 x i1> poison, i1 %13, i64 0, !dbg !25
  %98 = shufflevector <8 x i1> %97, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !25
  %99 = fadd <8 x float> %96, zeroinitializer, !dbg !25
  %100 = select <8 x i1> %98, <8 x float> %99, <8 x float> zeroinitializer, !dbg !25
  %101 = or i32 %9, 2048, !dbg !26
  %102 = or i32 %9, 2052, !dbg !26
  %103 = icmp ult i32 %101, 2304, !dbg !27
  %104 = add i32 %101, %14, !dbg !14
  %105 = add i32 %102, %14, !dbg !14
  %106 = sext i32 %104 to i64, !dbg !15
  %107 = getelementptr i16, ptr addrspace(1) %1, i64 %106, !dbg !15
  %108 = and i1 %13, %103, !dbg !28
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #6, !dbg !16
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !16
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !16
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !16
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !16
  %114 = trunc i32 %110 to i16, !dbg !16
  %extelt.offset19.1 = lshr i32 %110, 16, !dbg !16
  %115 = trunc i32 %extelt.offset19.1 to i16, !dbg !16
  %116 = trunc i32 %111 to i16, !dbg !16
  %extelt.offset20.1 = lshr i32 %111, 16, !dbg !16
  %117 = trunc i32 %extelt.offset20.1 to i16, !dbg !16
  %118 = trunc i32 %112 to i16, !dbg !16
  %extelt.offset21.1 = lshr i32 %112, 16, !dbg !16
  %119 = trunc i32 %extelt.offset21.1 to i16, !dbg !16
  %120 = trunc i32 %113 to i16, !dbg !16
  %extelt.offset22.1 = lshr i32 %113, 16, !dbg !16
  %121 = trunc i32 %extelt.offset22.1 to i16, !dbg !16
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #6, !dbg !17
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #6, !dbg !17
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #6, !dbg !17
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %117) #6, !dbg !17
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #6, !dbg !17
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #6, !dbg !17
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #6, !dbg !17
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #6, !dbg !17
  %130 = zext nneg i32 %101 to i64, !dbg !18
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !18
  %132 = zext nneg i32 %102 to i64, !dbg !18
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !18
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %131, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #6, !dbg !19
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !19
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !19
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !19
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !19
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %133, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #6, !dbg !19
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !19
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !19
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !19
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !19
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !20
  %145 = sext i32 %105 to i64, !dbg !20
  %146 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !20
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #6, !dbg !21
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !21
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !21
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !21
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !21
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #6, !dbg !21
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !21
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !21
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !21
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !21
  %157 = insertelement <8 x i32> poison, i32 %135, i64 0, !dbg !19
  %158 = insertelement <8 x i32> %157, i32 %136, i64 1, !dbg !19
  %159 = insertelement <8 x i32> %158, i32 %137, i64 2, !dbg !19
  %160 = insertelement <8 x i32> %159, i32 %138, i64 3, !dbg !19
  %161 = insertelement <8 x i32> %160, i32 %140, i64 4, !dbg !19
  %162 = insertelement <8 x i32> %161, i32 %141, i64 5, !dbg !19
  %163 = insertelement <8 x i32> %162, i32 %142, i64 6, !dbg !19
  %164 = insertelement <8 x i32> %163, i32 %143, i64 7, !dbg !19
  %165 = bitcast <8 x i32> %164 to <8 x float>, !dbg !19
  %166 = insertelement <8 x i32> poison, i32 %148, i64 0, !dbg !21
  %167 = insertelement <8 x i32> %166, i32 %149, i64 1, !dbg !21
  %168 = insertelement <8 x i32> %167, i32 %150, i64 2, !dbg !21
  %169 = insertelement <8 x i32> %168, i32 %151, i64 3, !dbg !21
  %170 = insertelement <8 x i32> %169, i32 %153, i64 4, !dbg !21
  %171 = insertelement <8 x i32> %170, i32 %154, i64 5, !dbg !21
  %172 = insertelement <8 x i32> %171, i32 %155, i64 6, !dbg !21
  %173 = insertelement <8 x i32> %172, i32 %156, i64 7, !dbg !21
  %174 = bitcast <8 x i32> %173 to <8 x float>, !dbg !21
  %175 = fadd <8 x float> %165, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !22
  %176 = insertelement <8 x float> poison, float %122, i64 0, !dbg !23
  %177 = insertelement <8 x float> %176, float %123, i64 1, !dbg !23
  %178 = insertelement <8 x float> %177, float %124, i64 2, !dbg !23
  %179 = insertelement <8 x float> %178, float %125, i64 3, !dbg !23
  %180 = insertelement <8 x float> %179, float %126, i64 4, !dbg !23
  %181 = insertelement <8 x float> %180, float %127, i64 5, !dbg !23
  %182 = insertelement <8 x float> %181, float %128, i64 6, !dbg !23
  %183 = insertelement <8 x float> %182, float %129, i64 7, !dbg !23
  %184 = fmul <8 x float> %183, %175, !dbg !23
  %185 = fmul <8 x float> %184, %174, !dbg !24
  %186 = insertelement <8 x i1> poison, i1 %108, i64 0, !dbg !25
  %187 = shufflevector <8 x i1> %186, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !25
  %188 = select <8 x i1> %187, <8 x float> %185, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !25
  %189 = fadd <8 x float> %100, %188, !dbg !25
  %190 = and i32 %8, 31, !dbg !10
  %191 = and i32 %15, 7, !dbg !10
  %192 = or i32 %11, 1024, !dbg !10
  %shift = shufflevector <8 x float> %189, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %193 = fadd <8 x float> %189, %shift, !dbg !29
  %shift65 = shufflevector <8 x float> %189, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %194 = fadd <8 x float> %shift65, %193, !dbg !29
  %shift66 = shufflevector <8 x float> %189, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %195 = fadd <8 x float> %shift66, %194, !dbg !29
  %shift67 = shufflevector <8 x float> %189, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %196 = fadd <8 x float> %shift67, %195, !dbg !29
  %shift68 = shufflevector <8 x float> %189, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %197 = fadd <8 x float> %shift68, %196, !dbg !29
  %shift69 = shufflevector <8 x float> %189, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %198 = fadd <8 x float> %shift69, %197, !dbg !29
  %shift70 = shufflevector <8 x float> %189, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %199 = fadd <8 x float> %shift70, %198, !dbg !29
  %200 = extractelement <8 x float> %199, i64 0, !dbg !29
  %201 = bitcast float %200 to i32, !dbg !35
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 16, i32 31), !dbg !35
  %203 = bitcast i32 %202 to float, !dbg !35
  %204 = fadd float %200, %203, !dbg !29
  %205 = bitcast float %204 to i32, !dbg !35
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 8, i32 31), !dbg !35
  %207 = bitcast i32 %206 to float, !dbg !35
  %208 = fadd float %204, %207, !dbg !29
  %209 = bitcast float %208 to i32, !dbg !35
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 4, i32 31), !dbg !35
  %211 = bitcast i32 %210 to float, !dbg !35
  %212 = fadd float %208, %211, !dbg !29
  %213 = bitcast float %212 to i32, !dbg !35
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !35
  %215 = bitcast i32 %214 to float, !dbg !35
  %216 = fadd float %212, %215, !dbg !29
  %217 = bitcast float %216 to i32, !dbg !35
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 1, i32 31), !dbg !35
  %219 = bitcast i32 %218 to float, !dbg !35
  %220 = fadd float %216, %219, !dbg !29
  %221 = icmp eq i32 %190, 0, !dbg !35
  %222 = zext nneg i32 %191 to i64, !dbg !35
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i64 %222, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, float %220, i1 %221) #6, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %224 = icmp slt i32 %8, 8, !dbg !35
  %225 = sext i32 %8 to i64, !dbg !35
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i64 %225, !dbg !35
  %227 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %226, i1 %224) #6, !dbg !35
  %228 = bitcast float %227 to i32, !dbg !35
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !35
  %230 = bitcast i32 %229 to float, !dbg !35
  %231 = fadd float %227, %230, !dbg !29
  %232 = bitcast float %231 to i32, !dbg !35
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 2, i32 31), !dbg !35
  %234 = bitcast i32 %233 to float, !dbg !35
  %235 = fadd float %231, %234, !dbg !29
  %236 = bitcast float %235 to i32, !dbg !35
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !35
  %238 = bitcast i32 %237 to float, !dbg !35
  %239 = fadd float %235, %238, !dbg !29
  %240 = and i32 %8, 7, !dbg !35
  %241 = icmp eq i32 %240, 0, !dbg !35
  %242 = and i1 %224, %241, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, float %239, i1 %242) #6, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %243 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !35
  %244 = sext i32 %12 to i64, !dbg !37
  %245 = getelementptr float, ptr addrspace(1) %4, i64 %244, !dbg !37
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %13) #6, !dbg !38
  %247 = bitcast i32 %246 to float, !dbg !38
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %13) #6, !dbg !38
  %249 = bitcast i32 %248 to float, !dbg !38
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %13) #6, !dbg !38
  %251 = bitcast i32 %250 to float, !dbg !38
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %13) #6, !dbg !38
  %253 = bitcast i32 %252 to float, !dbg !38
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %13) #6, !dbg !38
  %255 = bitcast i32 %254 to float, !dbg !38
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %13) #6, !dbg !38
  %257 = bitcast i32 %256 to float, !dbg !38
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %13) #6, !dbg !38
  %259 = bitcast i32 %258 to float, !dbg !38
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %13) #6, !dbg !38
  %261 = bitcast i32 %260 to float, !dbg !38
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float 2.304000e+03) #6, !dbg !39
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float 2.304000e+03) #6, !dbg !39
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float 2.304000e+03) #6, !dbg !39
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %253, float 2.304000e+03) #6, !dbg !39
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float 2.304000e+03) #6, !dbg !39
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %257, float 2.304000e+03) #6, !dbg !39
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float 2.304000e+03) #6, !dbg !39
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %261, float 2.304000e+03) #6, !dbg !39
  %270 = fadd float %262, 0x3EE4F8B580000000, !dbg !40
  %271 = fadd float %263, 0x3EE4F8B580000000, !dbg !40
  %272 = fadd float %264, 0x3EE4F8B580000000, !dbg !40
  %273 = fadd float %265, 0x3EE4F8B580000000, !dbg !40
  %274 = fadd float %266, 0x3EE4F8B580000000, !dbg !40
  %275 = fadd float %267, 0x3EE4F8B580000000, !dbg !40
  %276 = fadd float %268, 0x3EE4F8B580000000, !dbg !40
  %277 = fadd float %269, 0x3EE4F8B580000000, !dbg !40
  %278 = fmul float %243, -5.000000e-01, !dbg !41
  %279 = zext nneg i32 %9 to i64
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i64 %279
  %281 = zext nneg i32 %11 to i64
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i64 %281
  %283 = zext nneg i32 %192 to i64
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i64 %283
  %285 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %282, i64 0, i64 1
  %286 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %282, i64 0, i64 2
  %287 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %282, i64 0, i64 3
  br label %288, !dbg !42

288:                                              ; preds = %7, %__nv_rsqrtf.exit43
  %289 = phi i1 [ true, %7 ], [ false, %__nv_rsqrtf.exit43 ]
  %290 = phi i32 [ 0, %7 ], [ 2048, %__nv_rsqrtf.exit43 ]
  %291 = or i32 %290, %9, !dbg !43
  %292 = or i32 %290, %10, !dbg !43
  %293 = or i32 %290, %11, !dbg !43
  %294 = or i32 %290, %192, !dbg !43
  %295 = icmp ult i32 %291, 2304, !dbg !44
  %296 = icmp ult i32 %293, 2304, !dbg !44
  %297 = icmp ult i32 %294, 2304, !dbg !44
  %298 = add i32 %291, %14, !dbg !45
  %299 = add i32 %292, %14, !dbg !45
  %300 = add i32 %293, %14, !dbg !45
  %301 = add i32 %294, %14, !dbg !45
  %302 = sext i32 %298 to i64, !dbg !46
  %303 = getelementptr float, ptr addrspace(1) %0, i64 %302, !dbg !46
  %304 = sext i32 %299 to i64, !dbg !46
  %305 = getelementptr float, ptr addrspace(1) %0, i64 %304, !dbg !46
  %306 = sext i32 %300 to i64, !dbg !46
  %307 = getelementptr float, ptr addrspace(1) %0, i64 %306, !dbg !46
  %308 = sext i32 %301 to i64, !dbg !46
  %309 = getelementptr float, ptr addrspace(1) %0, i64 %308, !dbg !46
  %310 = and i1 %13, %295, !dbg !47
  %311 = and i1 %13, %296, !dbg !47
  %312 = and i1 %13, %297, !dbg !47
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %303, i1 %310, i32 0, i1 %310, i32 0, i1 %310, i32 0, i1 %310, i32 0, i1 %310) #6, !dbg !48
  %314 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !48
  %315 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !48
  %316 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !48
  %317 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !48
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %305, i1 %310, i32 0, i1 %310, i32 0, i1 %310, i32 0, i1 %310, i32 0, i1 %310) #6, !dbg !48
  %319 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !48
  %320 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !48
  %321 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !48
  %322 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !48
  %323 = insertelement <8 x i32> poison, i32 %314, i64 0, !dbg !48
  %324 = insertelement <8 x i32> %323, i32 %315, i64 1, !dbg !48
  %325 = insertelement <8 x i32> %324, i32 %316, i64 2, !dbg !48
  %326 = insertelement <8 x i32> %325, i32 %317, i64 3, !dbg !48
  %327 = insertelement <8 x i32> %326, i32 %319, i64 4, !dbg !48
  %328 = insertelement <8 x i32> %327, i32 %320, i64 5, !dbg !48
  %329 = insertelement <8 x i32> %328, i32 %321, i64 6, !dbg !48
  %330 = insertelement <8 x i32> %329, i32 %322, i64 7, !dbg !48
  %331 = bitcast <8 x i32> %330 to <8 x float>, !dbg !48
  %332 = getelementptr i16, ptr addrspace(1) %1, i64 %302, !dbg !49
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %332, i1 %310, i32 0, i1 %310, i32 0, i1 %310, i32 0, i1 %310, i32 0, i1 %310) #6, !dbg !50
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !50
  %335 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !50
  %336 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !50
  %337 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !50
  %338 = trunc i32 %334 to i16, !dbg !50
  %extelt.offset = lshr i32 %334, 16, !dbg !50
  %339 = trunc i32 %extelt.offset to i16, !dbg !50
  %340 = trunc i32 %335 to i16, !dbg !50
  %extelt.offset2 = lshr i32 %335, 16, !dbg !50
  %341 = trunc i32 %extelt.offset2 to i16, !dbg !50
  %342 = trunc i32 %336 to i16, !dbg !50
  %extelt.offset3 = lshr i32 %336, 16, !dbg !50
  %343 = trunc i32 %extelt.offset3 to i16, !dbg !50
  %344 = trunc i32 %337 to i16, !dbg !50
  %extelt.offset4 = lshr i32 %337, 16, !dbg !50
  %345 = trunc i32 %extelt.offset4 to i16, !dbg !50
  %346 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #6, !dbg !51
  %347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #6, !dbg !51
  %348 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %340) #6, !dbg !51
  %349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %341) #6, !dbg !51
  %350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %342) #6, !dbg !51
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %343) #6, !dbg !51
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %344) #6, !dbg !51
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #6, !dbg !51
  %354 = zext nneg i32 %291 to i64, !dbg !52
  %355 = getelementptr float, ptr addrspace(1) %2, i64 %354, !dbg !52
  %356 = zext nneg i32 %292 to i64, !dbg !52
  %357 = getelementptr float, ptr addrspace(1) %2, i64 %356, !dbg !52
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %355, i1 %295, i32 0, i1 %295, i32 0, i1 %295, i32 0, i1 %295, i32 0, i1 %295) #6, !dbg !53
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !53
  %360 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !53
  %361 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !53
  %362 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !53
  %363 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %357, i1 %295, i32 0, i1 %295, i32 0, i1 %295, i32 0, i1 %295, i32 0, i1 %295) #6, !dbg !53
  %364 = extractvalue { i32, i32, i32, i32 } %363, 0, !dbg !53
  %365 = extractvalue { i32, i32, i32, i32 } %363, 1, !dbg !53
  %366 = extractvalue { i32, i32, i32, i32 } %363, 2, !dbg !53
  %367 = extractvalue { i32, i32, i32, i32 } %363, 3, !dbg !53
  %368 = getelementptr float, ptr addrspace(1) %3, i64 %302, !dbg !54
  %369 = getelementptr float, ptr addrspace(1) %3, i64 %304, !dbg !54
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %368, i1 %310, i32 0, i1 %310, i32 0, i1 %310, i32 0, i1 %310, i32 0, i1 %310) #6, !dbg !55
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !55
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !55
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !55
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !55
  %375 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %369, i1 %310, i32 0, i1 %310, i32 0, i1 %310, i32 0, i1 %310, i32 0, i1 %310) #6, !dbg !55
  %376 = extractvalue { i32, i32, i32, i32 } %375, 0, !dbg !55
  %377 = extractvalue { i32, i32, i32, i32 } %375, 1, !dbg !55
  %378 = extractvalue { i32, i32, i32, i32 } %375, 2, !dbg !55
  %379 = extractvalue { i32, i32, i32, i32 } %375, 3, !dbg !55
  %380 = insertelement <8 x i32> poison, i32 %371, i64 0, !dbg !55
  %381 = insertelement <8 x i32> %380, i32 %372, i64 1, !dbg !55
  %382 = insertelement <8 x i32> %381, i32 %373, i64 2, !dbg !55
  %383 = insertelement <8 x i32> %382, i32 %374, i64 3, !dbg !55
  %384 = insertelement <8 x i32> %383, i32 %376, i64 4, !dbg !55
  %385 = insertelement <8 x i32> %384, i32 %377, i64 5, !dbg !55
  %386 = insertelement <8 x i32> %385, i32 %378, i64 6, !dbg !55
  %387 = insertelement <8 x i32> %386, i32 %379, i64 7, !dbg !55
  %388 = bitcast <8 x i32> %387 to <8 x float>, !dbg !55
  %389 = insertelement <8 x i32> poison, i32 %359, i64 0, !dbg !53
  %390 = insertelement <8 x i32> %389, i32 %360, i64 1, !dbg !53
  %391 = insertelement <8 x i32> %390, i32 %361, i64 2, !dbg !53
  %392 = insertelement <8 x i32> %391, i32 %362, i64 3, !dbg !53
  %393 = insertelement <8 x i32> %392, i32 %364, i64 4, !dbg !53
  %394 = insertelement <8 x i32> %393, i32 %365, i64 5, !dbg !53
  %395 = insertelement <8 x i32> %394, i32 %366, i64 6, !dbg !53
  %396 = insertelement <8 x i32> %395, i32 %367, i64 7, !dbg !53
  %397 = bitcast <8 x i32> %396 to <8 x float>, !dbg !53
  %398 = fadd <8 x float> %397, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !56
  %399 = insertelement <8 x float> poison, float %346, i64 0, !dbg !57
  %400 = insertelement <8 x float> %399, float %347, i64 1, !dbg !57
  %401 = insertelement <8 x float> %400, float %348, i64 2, !dbg !57
  %402 = insertelement <8 x float> %401, float %349, i64 3, !dbg !57
  %403 = insertelement <8 x float> %402, float %350, i64 4, !dbg !57
  %404 = insertelement <8 x float> %403, float %351, i64 5, !dbg !57
  %405 = insertelement <8 x float> %404, float %352, i64 6, !dbg !57
  %406 = insertelement <8 x float> %405, float %353, i64 7, !dbg !57
  %407 = fmul <8 x float> %406, %398, !dbg !57
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %.not.i = icmp eq i32 %408, 0, !dbg !58
  br i1 %.not.i, label %411, label %409, !dbg !58

409:                                              ; preds = %288
  %410 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %270), !dbg !58
  br label %__nv_rsqrtf.exit, !dbg !58

411:                                              ; preds = %288
  %412 = tail call float @llvm.nvvm.rsqrt.approx.f(float %270), !dbg !58
  br label %__nv_rsqrtf.exit, !dbg !58

__nv_rsqrtf.exit:                                 ; preds = %409, %411
  %.0.i = phi float [ %410, %409 ], [ %412, %411 ], !dbg !58
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %.not.i23 = icmp eq i32 %413, 0, !dbg !58
  br i1 %.not.i23, label %416, label %414, !dbg !58

414:                                              ; preds = %__nv_rsqrtf.exit
  %415 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %271), !dbg !58
  br label %__nv_rsqrtf.exit25, !dbg !58

416:                                              ; preds = %__nv_rsqrtf.exit
  %417 = tail call float @llvm.nvvm.rsqrt.approx.f(float %271), !dbg !58
  br label %__nv_rsqrtf.exit25, !dbg !58

__nv_rsqrtf.exit25:                               ; preds = %414, %416
  %.0.i24 = phi float [ %415, %414 ], [ %417, %416 ], !dbg !58
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %.not.i26 = icmp eq i32 %418, 0, !dbg !58
  br i1 %.not.i26, label %421, label %419, !dbg !58

419:                                              ; preds = %__nv_rsqrtf.exit25
  %420 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %272), !dbg !58
  br label %__nv_rsqrtf.exit28, !dbg !58

421:                                              ; preds = %__nv_rsqrtf.exit25
  %422 = tail call float @llvm.nvvm.rsqrt.approx.f(float %272), !dbg !58
  br label %__nv_rsqrtf.exit28, !dbg !58

__nv_rsqrtf.exit28:                               ; preds = %419, %421
  %.0.i27 = phi float [ %420, %419 ], [ %422, %421 ], !dbg !58
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %.not.i29 = icmp eq i32 %423, 0, !dbg !58
  br i1 %.not.i29, label %426, label %424, !dbg !58

424:                                              ; preds = %__nv_rsqrtf.exit28
  %425 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %273), !dbg !58
  br label %__nv_rsqrtf.exit31, !dbg !58

426:                                              ; preds = %__nv_rsqrtf.exit28
  %427 = tail call float @llvm.nvvm.rsqrt.approx.f(float %273), !dbg !58
  br label %__nv_rsqrtf.exit31, !dbg !58

__nv_rsqrtf.exit31:                               ; preds = %424, %426
  %.0.i30 = phi float [ %425, %424 ], [ %427, %426 ], !dbg !58
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %.not.i32 = icmp eq i32 %428, 0, !dbg !58
  br i1 %.not.i32, label %431, label %429, !dbg !58

429:                                              ; preds = %__nv_rsqrtf.exit31
  %430 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %274), !dbg !58
  br label %__nv_rsqrtf.exit34, !dbg !58

431:                                              ; preds = %__nv_rsqrtf.exit31
  %432 = tail call float @llvm.nvvm.rsqrt.approx.f(float %274), !dbg !58
  br label %__nv_rsqrtf.exit34, !dbg !58

__nv_rsqrtf.exit34:                               ; preds = %429, %431
  %.0.i33 = phi float [ %430, %429 ], [ %432, %431 ], !dbg !58
  %433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %.not.i35 = icmp eq i32 %433, 0, !dbg !58
  br i1 %.not.i35, label %436, label %434, !dbg !58

434:                                              ; preds = %__nv_rsqrtf.exit34
  %435 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %275), !dbg !58
  br label %__nv_rsqrtf.exit37, !dbg !58

436:                                              ; preds = %__nv_rsqrtf.exit34
  %437 = tail call float @llvm.nvvm.rsqrt.approx.f(float %275), !dbg !58
  br label %__nv_rsqrtf.exit37, !dbg !58

__nv_rsqrtf.exit37:                               ; preds = %434, %436
  %.0.i36 = phi float [ %435, %434 ], [ %437, %436 ], !dbg !58
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %.not.i38 = icmp eq i32 %438, 0, !dbg !58
  br i1 %.not.i38, label %441, label %439, !dbg !58

439:                                              ; preds = %__nv_rsqrtf.exit37
  %440 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %276), !dbg !58
  br label %__nv_rsqrtf.exit40, !dbg !58

441:                                              ; preds = %__nv_rsqrtf.exit37
  %442 = tail call float @llvm.nvvm.rsqrt.approx.f(float %276), !dbg !58
  br label %__nv_rsqrtf.exit40, !dbg !58

__nv_rsqrtf.exit40:                               ; preds = %439, %441
  %.0.i39 = phi float [ %440, %439 ], [ %442, %441 ], !dbg !58
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %.not.i41 = icmp eq i32 %443, 0, !dbg !58
  br i1 %.not.i41, label %446, label %444, !dbg !58

444:                                              ; preds = %__nv_rsqrtf.exit40
  %445 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %277), !dbg !58
  br label %__nv_rsqrtf.exit43, !dbg !58

446:                                              ; preds = %__nv_rsqrtf.exit40
  %447 = tail call float @llvm.nvvm.rsqrt.approx.f(float %277), !dbg !58
  br label %__nv_rsqrtf.exit43, !dbg !58

__nv_rsqrtf.exit43:                               ; preds = %444, %446
  %.0.i42 = phi float [ %445, %444 ], [ %447, %446 ], !dbg !58
  %448 = insertelement <8 x float> poison, float %.0.i, i64 0, !dbg !59
  %449 = shufflevector <8 x float> %448, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !59
  %450 = fmul <8 x float> %407, %449, !dbg !59
  %451 = fmul float %.0.i, %.0.i, !dbg !60
  %452 = fmul float %.0.i24, %.0.i24, !dbg !60
  %453 = fmul float %.0.i27, %.0.i27, !dbg !60
  %454 = fmul float %.0.i30, %.0.i30, !dbg !60
  %455 = fmul float %.0.i33, %.0.i33, !dbg !60
  %456 = fmul float %.0.i36, %.0.i36, !dbg !60
  %457 = fmul float %.0.i39, %.0.i39, !dbg !60
  %458 = fmul float %.0.i42, %.0.i42, !dbg !60
  %459 = fmul float %.0.i, %451, !dbg !61
  %460 = fmul float %.0.i24, %452, !dbg !61
  %461 = fmul float %.0.i27, %453, !dbg !61
  %462 = fmul float %.0.i30, %454, !dbg !61
  %463 = fmul float %.0.i33, %455, !dbg !61
  %464 = fmul float %.0.i36, %456, !dbg !61
  %465 = fmul float %.0.i39, %457, !dbg !61
  %466 = fmul float %.0.i42, %458, !dbg !61
  %467 = fmul float %278, %459, !dbg !62
  %468 = fmul float %278, %460, !dbg !62
  %469 = fmul float %278, %461, !dbg !62
  %470 = fmul float %278, %462, !dbg !62
  %471 = fmul float %278, %463, !dbg !62
  %472 = fmul float %278, %464, !dbg !62
  %473 = fmul float %278, %465, !dbg !62
  %474 = fmul float %278, %466, !dbg !62
  %475 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %467, float 2.304000e+03) #6, !dbg !63
  %476 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %468, float 2.304000e+03) #6, !dbg !63
  %477 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %469, float 2.304000e+03) #6, !dbg !63
  %478 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %470, float 2.304000e+03) #6, !dbg !63
  %479 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %471, float 2.304000e+03) #6, !dbg !63
  %480 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %472, float 2.304000e+03) #6, !dbg !63
  %481 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %473, float 2.304000e+03) #6, !dbg !63
  %482 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %474, float 2.304000e+03) #6, !dbg !63
  %483 = fadd <8 x float> %450, %331, !dbg !64
  %484 = insertelement <8 x float> poison, float %475, i64 0, !dbg !65
  %485 = shufflevector <8 x float> %484, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !65
  %486 = fmul <8 x float> %485, %388, !dbg !65
  %487 = fadd <8 x float> %483, %486, !dbg !66
  %488 = fadd <8 x float> %486, %487, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  store <8 x float> %488, ptr addrspace(3) %280, align 32, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %489 = load <4 x i32>, ptr addrspace(3) %284, align 16, !dbg !68
  %.extract = load i32, ptr addrspace(3) %282, align 16, !dbg !68
  %.extract6 = load i32, ptr addrspace(3) %285, align 4, !dbg !68
  %.extract8 = load i32, ptr addrspace(3) %286, align 8, !dbg !68
  %.extract10 = load i32, ptr addrspace(3) %287, align 4, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract6, i32 %.extract8, i32 %.extract10, ptr addrspace(1) %307, i1 %311) #6, !dbg !68
  %.extract12 = extractelement <4 x i32> %489, i64 0, !dbg !68
  %.extract14 = extractelement <4 x i32> %489, i64 1, !dbg !68
  %.extract16 = extractelement <4 x i32> %489, i64 2, !dbg !68
  %.extract18 = extractelement <4 x i32> %489, i64 3, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract14, i32 %.extract16, i32 %.extract18, ptr addrspace(1) %309, i1 %312) #6, !dbg !68
  br i1 %289, label %288, label %490, !dbg !42

490:                                              ; preds = %__nv_rsqrtf.exit43
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ctptqkiukdoaxjcm2xrh7g7f3ow24gdyuy5jwiohwbzdiqd4zvp2.py", directory: "/tmp/torchinductor_zeus/tp")
!4 = !{ptr @triton__0d1d2d3d4d5de6de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5de6de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6de", linkageName: "triton__0d1d2d3d4d5de6de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 110, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 51, scope: !7)
!22 = !DILocation(line: 36, column: 22, scope: !7)
!23 = !DILocation(line: 37, column: 22, scope: !7)
!24 = !DILocation(line: 38, column: 22, scope: !7)
!25 = !DILocation(line: 41, column: 47, scope: !7)
!26 = !DILocation(line: 28, column: 27, scope: !7)
!27 = !DILocation(line: 29, column: 25, scope: !7)
!28 = !DILocation(line: 31, column: 59, scope: !7)
!29 = !DILocation(line: 233, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 243, column: 36, scope: !30, inlinedAt: !34)
!34 = !DILocation(line: 42, column: 25, scope: !30)
!35 = !DILocation(line: 243, column: 36, scope: !32, inlinedAt: !36)
!36 = !DILocation(line: 42, column: 25, scope: !32)
!37 = !DILocation(line: 43, column: 31, scope: !7)
!38 = !DILocation(line: 43, column: 36, scope: !7)
!39 = !DILocation(line: 57, column: 24, scope: !7)
!40 = !DILocation(line: 59, column: 24, scope: !7)
!41 = !DILocation(line: 64, column: 23, scope: !7)
!42 = !DILocation(line: 44, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 27, scope: !7)
!44 = !DILocation(line: 46, column: 25, scope: !7)
!45 = !DILocation(line: 48, column: 45, scope: !7)
!46 = !DILocation(line: 48, column: 39, scope: !7)
!47 = !DILocation(line: 48, column: 64, scope: !7)
!48 = !DILocation(line: 48, column: 56, scope: !7)
!49 = !DILocation(line: 49, column: 35, scope: !7)
!50 = !DILocation(line: 49, column: 52, scope: !7)
!51 = !DILocation(line: 49, column: 112, scope: !7)
!52 = !DILocation(line: 50, column: 35, scope: !7)
!53 = !DILocation(line: 50, column: 40, scope: !7)
!54 = !DILocation(line: 51, column: 35, scope: !7)
!55 = !DILocation(line: 51, column: 52, scope: !7)
!56 = !DILocation(line: 54, column: 24, scope: !7)
!57 = !DILocation(line: 55, column: 24, scope: !7)
!58 = !DILocation(line: 60, column: 30, scope: !7)
!59 = !DILocation(line: 61, column: 24, scope: !7)
!60 = !DILocation(line: 65, column: 24, scope: !7)
!61 = !DILocation(line: 66, column: 24, scope: !7)
!62 = !DILocation(line: 67, column: 24, scope: !7)
!63 = !DILocation(line: 68, column: 24, scope: !7)
!64 = !DILocation(line: 62, column: 24, scope: !7)
!65 = !DILocation(line: 69, column: 24, scope: !7)
!66 = !DILocation(line: 70, column: 24, scope: !7)
!67 = !DILocation(line: 71, column: 24, scope: !7)
!68 = !DILocation(line: 72, column: 56, scope: !7)
!69 = !DILocation(line: 44, column: 4, scope: !7)
