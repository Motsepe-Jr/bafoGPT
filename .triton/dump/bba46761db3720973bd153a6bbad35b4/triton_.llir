; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = shl i32 %6, 1, !dbg !10
  %8 = and i32 %7, 510, !dbg !10
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %10 = shl i32 %9, 9, !dbg !12
  %11 = or i32 %10, %8, !dbg !13
  %12 = sext i32 %11 to i64, !dbg !14
  %13 = getelementptr i16, ptr addrspace(1) %1, i64 %12, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #4, !dbg !15
  %15 = trunc i32 %14 to i16, !dbg !15
  %extelt.offset = lshr i32 %14, 16, !dbg !15
  %16 = trunc i32 %extelt.offset to i16, !dbg !15
  %17 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %15) #4, !dbg !16
  %18 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %16) #4, !dbg !16
  %19 = getelementptr i16, ptr addrspace(1) %2, i64 %12, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #4, !dbg !18
  %21 = trunc i32 %20 to i16, !dbg !18
  %extelt.offset1 = lshr i32 %20, 16, !dbg !18
  %22 = trunc i32 %extelt.offset1 to i16, !dbg !18
  %23 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #4, !dbg !19
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #4, !dbg !19
  %25 = getelementptr i16, ptr addrspace(1) %0, i64 %12, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !21
  %27 = trunc i32 %26 to i16, !dbg !21
  %extelt.offset2 = lshr i32 %26, 16, !dbg !21
  %28 = trunc i32 %extelt.offset2 to i16, !dbg !21
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #4, !dbg !22
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #4, !dbg !22
  %31 = fmul float %23, %23, !dbg !23
  %32 = fmul float %24, %24, !dbg !23
  %33 = fmul float %23, %31, !dbg !24
  %34 = fmul float %24, %32, !dbg !24
  %35 = fmul float %33, 0x3FA6E4E260000000, !dbg !25
  %36 = fmul float %34, 0x3FA6E4E260000000, !dbg !25
  %37 = fadd float %23, %35, !dbg !26
  %38 = fadd float %24, %36, !dbg !26
  %39 = fmul float %37, 0x3FE9884540000000, !dbg !27
  %40 = fmul float %38, 0x3FE9884540000000, !dbg !27
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i = icmp eq i32 %41, 0, !dbg !28
  %42 = tail call float @llvm.nvvm.fabs.ftz.f(float %39) #4, !dbg !28
  %43 = tail call float @llvm.nvvm.fabs.f(float %39) #4, !dbg !28
  %.01.i = select i1 %.not.i, float %43, float %42, !dbg !28
  %44 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !28
  br i1 %44, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !28

__internal_fmad.exit1.i:                          ; preds = %5
  %45 = fmul float %.01.i, 0x4007154760000000, !dbg !28
  %46 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %45) #4, !dbg !28
  %47 = fadd float %46, 1.000000e+00, !dbg !28
  %48 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %47) #5, !dbg !28, !srcloc !29
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not6.i = icmp eq i32 %49, 0, !dbg !28
  %50 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %48, float -2.000000e+00, float 1.000000e+00) #4, !dbg !28
  %51 = tail call float @llvm.nvvm.fma.rn.f(float %48, float -2.000000e+00, float 1.000000e+00) #4, !dbg !28
  %.03.i = select i1 %.not6.i, float %51, float %50, !dbg !28
  %52 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !28
  %s.0.i = select i1 %52, float 1.000000e+00, float %.03.i, !dbg !28
  %53 = bitcast float %s.0.i to i32, !dbg !28
  %54 = bitcast float %39 to i32, !dbg !28
  %55 = and i32 %54, -2147483648, !dbg !28
  %56 = or i32 %55, %53, !dbg !28
  %57 = bitcast i32 %56 to float, !dbg !28
  br label %__nv_tanhf.exit, !dbg !28

__internal_fmad.exit3.i:                          ; preds = %5
  %58 = fmul float %39, %39, !dbg !28
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not1.i = icmp eq i32 %59, 0, !dbg !28
  %60 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %58, float 0xBFAAC795C0000000) #4, !dbg !28
  %61 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %58, float 0xBFAAC795C0000000) #4, !dbg !28
  %.06.i = select i1 %.not1.i, float %61, float %60, !dbg !28
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not2.i = icmp eq i32 %62, 0, !dbg !28
  %63 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %58, float 0x3FC10B2820000000) #4, !dbg !28
  %64 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %58, float 0x3FC10B2820000000) #4, !dbg !28
  %.05.i = select i1 %.not2.i, float %64, float %63, !dbg !28
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not3.i = icmp eq i32 %65, 0, !dbg !28
  %66 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %58, float 0xBFD5553DA0000000) #4, !dbg !28
  %67 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %58, float 0xBFD5553DA0000000) #4, !dbg !28
  %.0.i = select i1 %.not3.i, float %67, float %66, !dbg !28
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not4.i = icmp eq i32 %68, 0, !dbg !28
  %69 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %58, float 0.000000e+00) #4, !dbg !28
  %70 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %58, float 0.000000e+00) #4, !dbg !28
  %.04.i = select i1 %.not4.i, float %70, float %69, !dbg !28
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not5.i = icmp eq i32 %71, 0, !dbg !28
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %39, float %39) #4, !dbg !28
  %73 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %39, float %39) #4, !dbg !28
  %.02.i = select i1 %.not5.i, float %73, float %72, !dbg !28
  br label %__nv_tanhf.exit, !dbg !28

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %57, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !28
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i3 = icmp eq i32 %74, 0, !dbg !28
  %75 = tail call float @llvm.nvvm.fabs.ftz.f(float %40) #4, !dbg !28
  %76 = tail call float @llvm.nvvm.fabs.f(float %40) #4, !dbg !28
  %.01.i4 = select i1 %.not.i3, float %76, float %75, !dbg !28
  %77 = fcmp ult float %.01.i4, 0x3FE3333340000000, !dbg !28
  br i1 %77, label %__internal_fmad.exit3.i10, label %__internal_fmad.exit1.i5, !dbg !28

__internal_fmad.exit1.i5:                         ; preds = %__nv_tanhf.exit
  %78 = fmul float %.01.i4, 0x4007154760000000, !dbg !28
  %79 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %78) #4, !dbg !28
  %80 = fadd float %79, 1.000000e+00, !dbg !28
  %81 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %80) #5, !dbg !28, !srcloc !29
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not6.i6 = icmp eq i32 %82, 0, !dbg !28
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %81, float -2.000000e+00, float 1.000000e+00) #4, !dbg !28
  %84 = tail call float @llvm.nvvm.fma.rn.f(float %81, float -2.000000e+00, float 1.000000e+00) #4, !dbg !28
  %.03.i7 = select i1 %.not6.i6, float %84, float %83, !dbg !28
  %85 = fcmp oge float %.01.i4, 0x4022059680000000, !dbg !28
  %s.0.i8 = select i1 %85, float 1.000000e+00, float %.03.i7, !dbg !28
  %86 = bitcast float %s.0.i8 to i32, !dbg !28
  %87 = bitcast float %40 to i32, !dbg !28
  %88 = and i32 %87, -2147483648, !dbg !28
  %89 = or i32 %88, %86, !dbg !28
  %90 = bitcast i32 %89 to float, !dbg !28
  br label %__nv_tanhf.exit21, !dbg !28

__internal_fmad.exit3.i10:                        ; preds = %__nv_tanhf.exit
  %91 = fmul float %40, %40, !dbg !28
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not1.i11 = icmp eq i32 %92, 0, !dbg !28
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %91, float 0xBFAAC795C0000000) #4, !dbg !28
  %94 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %91, float 0xBFAAC795C0000000) #4, !dbg !28
  %.06.i12 = select i1 %.not1.i11, float %94, float %93, !dbg !28
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not2.i13 = icmp eq i32 %95, 0, !dbg !28
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i12, float %91, float 0x3FC10B2820000000) #4, !dbg !28
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i12, float %91, float 0x3FC10B2820000000) #4, !dbg !28
  %.05.i14 = select i1 %.not2.i13, float %97, float %96, !dbg !28
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not3.i15 = icmp eq i32 %98, 0, !dbg !28
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %91, float 0xBFD5553DA0000000) #4, !dbg !28
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %91, float 0xBFD5553DA0000000) #4, !dbg !28
  %.0.i16 = select i1 %.not3.i15, float %100, float %99, !dbg !28
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not4.i17 = icmp eq i32 %101, 0, !dbg !28
  %102 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i16, float %91, float 0.000000e+00) #4, !dbg !28
  %103 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i16, float %91, float 0.000000e+00) #4, !dbg !28
  %.04.i18 = select i1 %.not4.i17, float %103, float %102, !dbg !28
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not5.i19 = icmp eq i32 %104, 0, !dbg !28
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %40, float %40) #4, !dbg !28
  %106 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %40, float %40) #4, !dbg !28
  %.02.i20 = select i1 %.not5.i19, float %106, float %105, !dbg !28
  br label %__nv_tanhf.exit21, !dbg !28

__nv_tanhf.exit21:                                ; preds = %__internal_fmad.exit1.i5, %__internal_fmad.exit3.i10
  %s.1.i9 = phi float [ %90, %__internal_fmad.exit1.i5 ], [ %.02.i20, %__internal_fmad.exit3.i10 ], !dbg !28
  %107 = fmul float %24, 5.000000e-01, !dbg !30
  %108 = fmul float %23, 5.000000e-01, !dbg !30
  %109 = fadd float %s.1.i, 1.000000e+00, !dbg !31
  %110 = fadd float %s.1.i9, 1.000000e+00, !dbg !31
  %111 = fmul float %108, %109, !dbg !32
  %112 = fmul float %107, %110, !dbg !32
  %113 = fmul float %17, %111, !dbg !33
  %114 = fmul float %18, %112, !dbg !33
  %115 = fmul float %s.1.i, %s.1.i, !dbg !34
  %116 = fmul float %s.1.i9, %s.1.i9, !dbg !34
  %117 = fsub float 1.000000e+00, %115, !dbg !35
  %118 = fsub float 1.000000e+00, %116, !dbg !35
  %119 = fmul float %108, %117, !dbg !36
  %120 = fmul float %107, %118, !dbg !36
  %121 = fmul float %31, 0x3FC12BA9E0000000, !dbg !37
  %122 = fmul float %32, 0x3FC12BA9E0000000, !dbg !37
  %123 = fadd float %121, 1.000000e+00, !dbg !38
  %124 = fadd float %122, 1.000000e+00, !dbg !38
  %125 = fmul float %123, 0x3FE9884540000000, !dbg !39
  %126 = fmul float %124, 0x3FE9884540000000, !dbg !39
  %127 = fmul float %125, %119, !dbg !40
  %128 = fmul float %126, %120, !dbg !40
  %129 = fmul float %17, %29, !dbg !41
  %130 = fmul float %18, %30, !dbg !41
  %131 = fmul float %109, 5.000000e-01, !dbg !42
  %132 = fmul float %110, 5.000000e-01, !dbg !42
  %133 = fadd float %131, %127, !dbg !43
  %134 = fadd float %132, %128, !dbg !43
  %135 = fmul float %129, %133, !dbg !44
  %136 = fmul float %130, %134, !dbg !44
  %137 = getelementptr i16, ptr addrspace(1) %3, i64 %12, !dbg !45
  %138 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %113) #4, !dbg !46
  %139 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %114) #4, !dbg !46
  %140 = insertelement <2 x i16> undef, i16 %138, i64 0, !dbg !46
  %141 = insertelement <2 x i16> %140, i16 %139, i64 1, !dbg !46
  %142 = bitcast <2 x i16> %141 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %137, i1 true) #4, !dbg !46
  %143 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %135) #4, !dbg !47
  %144 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %136) #4, !dbg !47
  %145 = insertelement <2 x i16> undef, i16 %143, i64 0, !dbg !47
  %146 = insertelement <2 x i16> %145, i16 %144, i64 1, !dbg !47
  %147 = bitcast <2 x i16> %146 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %25, i1 true) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: alwaysinline nounwind
define float @__nv_tanhf(float %a) local_unnamed_addr #1 {
__nv_fabsf.exit:
  %0 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not = icmp eq i32 %0, 0
  %1 = tail call float @llvm.nvvm.fabs.ftz.f(float %a) #4
  %2 = tail call float @llvm.nvvm.fabs.f(float %a) #4
  %.01 = select i1 %.not, float %2, float %1
  %3 = fcmp ult float %.01, 0x3FE3333340000000
  br i1 %3, label %__internal_fmad.exit3, label %__internal_fmad.exit1

__internal_fmad.exit1:                            ; preds = %__nv_fabsf.exit
  %4 = fmul float %.01, 0x4007154760000000
  %5 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %4) #4
  %6 = fadd float %5, 1.000000e+00
  %7 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %6) #5, !srcloc !29
  %8 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not6 = icmp eq i32 %8, 0
  %9 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %7, float -2.000000e+00, float 1.000000e+00) #4
  %10 = tail call float @llvm.nvvm.fma.rn.f(float %7, float -2.000000e+00, float 1.000000e+00) #4
  %.03 = select i1 %.not6, float %10, float %9
  %11 = fcmp oge float %.01, 0x4022059680000000
  %s.0 = select i1 %11, float 1.000000e+00, float %.03
  %12 = bitcast float %s.0 to i32
  %13 = bitcast float %a to i32
  %14 = and i32 %13, -2147483648
  %15 = or i32 %14, %12
  %16 = bitcast i32 %15 to float
  br label %33

__internal_fmad.exit3:                            ; preds = %__nv_fabsf.exit
  %17 = fmul float %a, %a
  %18 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not1 = icmp eq i32 %18, 0
  %19 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #4
  %20 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #4
  %.06 = select i1 %.not1, float %20, float %19
  %21 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not2 = icmp eq i32 %21, 0
  %22 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06, float %17, float 0x3FC10B2820000000) #4
  %23 = tail call float @llvm.nvvm.fma.rn.f(float %.06, float %17, float 0x3FC10B2820000000) #4
  %.05 = select i1 %.not2, float %23, float %22
  %24 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not3 = icmp eq i32 %24, 0
  %25 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05, float %17, float 0xBFD5553DA0000000) #4
  %26 = tail call float @llvm.nvvm.fma.rn.f(float %.05, float %17, float 0xBFD5553DA0000000) #4
  %.0 = select i1 %.not3, float %26, float %25
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not4 = icmp eq i32 %27, 0
  %28 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0, float %17, float 0.000000e+00) #4
  %29 = tail call float @llvm.nvvm.fma.rn.f(float %.0, float %17, float 0.000000e+00) #4
  %.04 = select i1 %.not4, float %29, float %28
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not5 = icmp eq i32 %30, 0
  %31 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04, float %a, float %a) #4
  %32 = tail call float @llvm.nvvm.fma.rn.f(float %.04, float %a, float %a) #4
  %.02 = select i1 %.not5, float %32, float %31
  br label %33

33:                                               ; preds = %__internal_fmad.exit3, %__internal_fmad.exit1
  %s.1 = phi float [ %16, %__internal_fmad.exit1 ], [ %.02, %__internal_fmad.exit3 ]
  ret float %s.1
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c5rsqemvsv3qhwnb4nvmgp43mczz3kwymoribsxeg45u4wme7yww.py", directory: "/tmp/torchinductor_zeus/5r")
!4 = !{ptr @triton__0d1d2d3d4de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de", linkageName: "triton__0d1d2d3d4de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 36, scope: !7)
!11 = !DILocation(line: 20, column: 28, scope: !7)
!12 = !DILocation(line: 20, column: 33, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 30, scope: !7)
!15 = !DILocation(line: 24, column: 35, scope: !7)
!16 = !DILocation(line: 24, column: 44, scope: !7)
!17 = !DILocation(line: 25, column: 30, scope: !7)
!18 = !DILocation(line: 25, column: 35, scope: !7)
!19 = !DILocation(line: 25, column: 44, scope: !7)
!20 = !DILocation(line: 26, column: 35, scope: !7)
!21 = !DILocation(line: 26, column: 40, scope: !7)
!22 = !DILocation(line: 26, column: 49, scope: !7)
!23 = !DILocation(line: 30, column: 18, scope: !7)
!24 = !DILocation(line: 31, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 19, scope: !7)
!28 = !DILocation(line: 37, column: 25, scope: !7)
!29 = !{i32 21046}
!30 = !DILocation(line: 29, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 20, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 19, scope: !7)
!34 = !DILocation(line: 43, column: 20, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 19, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 19, scope: !7)
!42 = !DILocation(line: 53, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 25, scope: !7)
!46 = !DILocation(line: 57, column: 37, scope: !7)
!47 = !DILocation(line: 58, column: 40, scope: !7)
!48 = !DILocation(line: 58, column: 4, scope: !7)
