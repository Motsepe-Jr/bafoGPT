; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !5 {
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %17 = and i32 %16, 31, !dbg !8
  %18 = lshr i32 %16, 5, !dbg !8
  %19 = and i32 %18, 3, !dbg !8
  %urem = and i32 %16, 127, !dbg !8
  %20 = shl nuw nsw i32 %urem, 2, !dbg !8
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %22 = icmp slt i32 %21, 2304, !dbg !10
  %23 = mul nuw nsw i32 %urem, 9216, !dbg !11
  %24 = add i32 %21, %23, !dbg !12
  %25 = add i32 %24, 2304, !dbg !12
  %26 = add i32 %24, 4608, !dbg !12
  %27 = add i32 %24, 6912, !dbg !12
  %28 = sext i32 %24 to i64, !dbg !13
  %29 = getelementptr i16, ptr addrspace(1) %0, i64 %28, !dbg !13
  %30 = sext i32 %25 to i64, !dbg !13
  %31 = getelementptr i16, ptr addrspace(1) %0, i64 %30, !dbg !13
  %32 = sext i32 %26 to i64, !dbg !13
  %33 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !13
  %34 = sext i32 %27 to i64, !dbg !13
  %35 = getelementptr i16, ptr addrspace(1) %0, i64 %34, !dbg !13
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %29, i1 %22, i16 0, i1 %22) #3, !dbg !14
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %31, i1 %22, i16 0, i1 %22) #3, !dbg !14
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %33, i1 %22, i16 0, i1 %22) #3, !dbg !14
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %35, i1 %22, i16 0, i1 %22) #3, !dbg !14
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #3, !dbg !15
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #3, !dbg !15
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !15
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #3, !dbg !15
  %44 = getelementptr i16, ptr addrspace(1) %1, i64 %28, !dbg !16
  %45 = getelementptr i16, ptr addrspace(1) %1, i64 %30, !dbg !16
  %46 = getelementptr i16, ptr addrspace(1) %1, i64 %32, !dbg !16
  %47 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %44, i1 %22, i16 0, i1 %22) #3, !dbg !17
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %45, i1 %22, i16 0, i1 %22) #3, !dbg !17
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %46, i1 %22, i16 0, i1 %22) #3, !dbg !17
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %47, i1 %22, i16 0, i1 %22) #3, !dbg !17
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #3, !dbg !18
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #3, !dbg !18
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #3, !dbg !18
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !18
  %56 = getelementptr i16, ptr addrspace(1) %2, i64 %28, !dbg !19
  %57 = getelementptr i16, ptr addrspace(1) %2, i64 %30, !dbg !19
  %58 = getelementptr i16, ptr addrspace(1) %2, i64 %32, !dbg !19
  %59 = getelementptr i16, ptr addrspace(1) %2, i64 %34, !dbg !19
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %56, i1 %22, i16 0, i1 %22) #3, !dbg !20
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %57, i1 %22, i16 0, i1 %22) #3, !dbg !20
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %58, i1 %22, i16 0, i1 %22) #3, !dbg !20
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %59, i1 %22, i16 0, i1 %22) #3, !dbg !20
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #3, !dbg !21
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #3, !dbg !21
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #3, !dbg !21
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #3, !dbg !21
  %68 = zext nneg i32 %20 to i64, !dbg !22
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !22
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !23
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !23
  %75 = sext i32 %21 to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %22) #3, !dbg !25
  %78 = bitcast i32 %77 to float, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %22) #3, !dbg !25
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %22) #3, !dbg !25
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %22) #3, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !26
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %22, i32 0, i1 %22) #3, !dbg !27
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %22, i32 0, i1 %22) #3, !dbg !27
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %22, i32 0, i1 %22) #3, !dbg !27
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %22, i32 0, i1 %22) #3, !dbg !27
  %90 = getelementptr float, ptr addrspace(1) %6, i64 %68, !dbg !28
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !29
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !29
  %96 = getelementptr i16, ptr addrspace(1) %7, i64 %28, !dbg !30
  %97 = getelementptr i16, ptr addrspace(1) %7, i64 %30, !dbg !30
  %98 = getelementptr i16, ptr addrspace(1) %7, i64 %32, !dbg !30
  %99 = getelementptr i16, ptr addrspace(1) %7, i64 %34, !dbg !30
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %96, i1 %22, i16 0, i1 %22) #3, !dbg !31
  %101 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %97, i1 %22, i16 0, i1 %22) #3, !dbg !31
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %98, i1 %22, i16 0, i1 %22) #3, !dbg !31
  %103 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %99, i1 %22, i16 0, i1 %22) #3, !dbg !31
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #3, !dbg !32
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #3, !dbg !32
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #3, !dbg !32
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #3, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %8, i64 %68, !dbg !33
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !34
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !34
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !34
  %114 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !35
  %115 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !35
  %116 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !35
  %117 = getelementptr float, ptr addrspace(1) %9, i64 %34, !dbg !35
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %22, i32 0, i1 %22) #3, !dbg !36
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %22, i32 0, i1 %22) #3, !dbg !36
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %22, i32 0, i1 %22) #3, !dbg !36
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %22, i32 0, i1 %22) #3, !dbg !36
  %122 = fadd float %78, 1.000000e+00, !dbg !37
  %123 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !23
  %124 = insertelement <2 x i32> %123, i32 %72, i64 1, !dbg !23
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !23
  %126 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !27
  %127 = insertelement <2 x i32> %126, i32 %87, i64 1, !dbg !27
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !27
  %129 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !29
  %130 = insertelement <2 x i32> %129, i32 %93, i64 1, !dbg !29
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !29
  %132 = insertelement <2 x float> poison, float %40, i64 0, !dbg !38
  %133 = insertelement <2 x float> %132, float %41, i64 1, !dbg !38
  %134 = insertelement <2 x float> poison, float %52, i64 0, !dbg !38
  %135 = insertelement <2 x float> %134, float %53, i64 1, !dbg !38
  %136 = fadd <2 x float> %133, %135, !dbg !38
  %137 = insertelement <2 x float> poison, float %64, i64 0, !dbg !39
  %138 = insertelement <2 x float> %137, float %65, i64 1, !dbg !39
  %139 = fmul <2 x float> %138, %125, !dbg !39
  %140 = insertelement <2 x float> poison, float %122, i64 0, !dbg !40
  %141 = shufflevector <2 x float> %140, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %142 = fmul <2 x float> %139, %141, !dbg !40
  %143 = fadd <2 x float> %142, %128, !dbg !41
  %144 = fmul <2 x float> %143, %131, !dbg !42
  %145 = fmul <2 x float> %136, %144, !dbg !43
  %146 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !23
  %147 = insertelement <2 x i32> %146, i32 %73, i64 1, !dbg !23
  %148 = bitcast <2 x i32> %147 to <2 x float>, !dbg !23
  %149 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !27
  %150 = insertelement <2 x i32> %149, i32 %88, i64 1, !dbg !27
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !27
  %152 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !29
  %153 = insertelement <2 x i32> %152, i32 %94, i64 1, !dbg !29
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !29
  %155 = insertelement <2 x float> poison, float %43, i64 0, !dbg !38
  %156 = insertelement <2 x float> %155, float %42, i64 1, !dbg !38
  %157 = insertelement <2 x float> poison, float %55, i64 0, !dbg !38
  %158 = insertelement <2 x float> %157, float %54, i64 1, !dbg !38
  %159 = fadd <2 x float> %156, %158, !dbg !38
  %160 = insertelement <2 x float> poison, float %67, i64 0, !dbg !39
  %161 = insertelement <2 x float> %160, float %66, i64 1, !dbg !39
  %162 = fmul <2 x float> %161, %148, !dbg !39
  %163 = fmul <2 x float> %162, %141, !dbg !40
  %164 = fadd <2 x float> %163, %151, !dbg !41
  %165 = fmul <2 x float> %164, %154, !dbg !42
  %166 = fmul <2 x float> %159, %165, !dbg !43
  %shift = shufflevector <2 x float> %145, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %167 = fadd <2 x float> %145, %shift, !dbg !44
  %shift1 = shufflevector <2 x float> %166, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %168 = fadd <2 x float> %shift1, %167, !dbg !44
  %169 = fadd <2 x float> %166, %168, !dbg !44
  %170 = extractelement <2 x float> %169, i64 0, !dbg !44
  %171 = select i1 %22, float %170, float 0.000000e+00, !dbg !44
  %172 = bitcast float %171 to i32, !dbg !50
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 16, i32 31), !dbg !50
  %174 = bitcast i32 %173 to float, !dbg !50
  %175 = fadd float %171, %174, !dbg !44
  %176 = bitcast float %175 to i32, !dbg !50
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 8, i32 31), !dbg !50
  %178 = bitcast i32 %177 to float, !dbg !50
  %179 = fadd float %175, %178, !dbg !44
  %180 = bitcast float %179 to i32, !dbg !50
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 4, i32 31), !dbg !50
  %182 = bitcast i32 %181 to float, !dbg !50
  %183 = fadd float %179, %182, !dbg !44
  %184 = bitcast float %183 to i32, !dbg !50
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !50
  %186 = bitcast i32 %185 to float, !dbg !50
  %187 = fadd float %183, %186, !dbg !44
  %188 = bitcast float %187 to i32, !dbg !50
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !50
  %190 = bitcast i32 %189 to float, !dbg !50
  %191 = fadd float %187, %190, !dbg !44
  %192 = icmp eq i32 %17, 0, !dbg !50
  %193 = zext nneg i32 %19 to i64, !dbg !50
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i64 %193, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, float %191, i1 %192) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %195 = icmp slt i32 %16, 4, !dbg !50
  %196 = sext i32 %16 to i64, !dbg !50
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i64 %196, !dbg !50
  %198 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %197, i1 %195) #3, !dbg !50
  %199 = bitcast float %198 to i32, !dbg !50
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 2, i32 31), !dbg !50
  %201 = bitcast i32 %200 to float, !dbg !50
  %202 = fadd float %198, %201, !dbg !44
  %203 = bitcast float %202 to i32, !dbg !50
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 1, i32 31), !dbg !50
  %205 = bitcast i32 %204 to float, !dbg !50
  %206 = fadd float %202, %205, !dbg !44
  %207 = and i32 %16, 3, !dbg !50
  %208 = icmp eq i32 %207, 0, !dbg !50
  %209 = and i1 %195, %208, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, float %206, i1 %209) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %210 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !50
  %211 = fadd float %210, 0.000000e+00, !dbg !52
  %212 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !34
  %213 = insertelement <2 x i32> %212, i32 %111, i64 1, !dbg !34
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !34
  %215 = fmul <2 x float> %128, %214, !dbg !56
  %216 = insertelement <2 x float> poison, float %104, i64 0, !dbg !57
  %217 = insertelement <2 x float> %216, float %105, i64 1, !dbg !57
  %218 = fmul <2 x float> %217, %215, !dbg !57
  %219 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !34
  %220 = insertelement <2 x i32> %219, i32 %112, i64 1, !dbg !34
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !34
  %222 = fmul <2 x float> %151, %221, !dbg !56
  %223 = insertelement <2 x float> poison, float %107, i64 0, !dbg !57
  %224 = insertelement <2 x float> %223, float %106, i64 1, !dbg !57
  %225 = fmul <2 x float> %224, %222, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %shift2 = shufflevector <2 x float> %218, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %226 = fadd <2 x float> %218, %shift2, !dbg !60
  %shift3 = shufflevector <2 x float> %225, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %227 = fadd <2 x float> %shift3, %226, !dbg !60
  %228 = fadd <2 x float> %225, %227, !dbg !60
  %229 = extractelement <2 x float> %228, i64 0, !dbg !60
  %230 = select i1 %22, float %229, float 0.000000e+00, !dbg !60
  %231 = bitcast float %230 to i32, !dbg !58
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 16, i32 31), !dbg !58
  %233 = bitcast i32 %232 to float, !dbg !58
  %234 = fadd float %230, %233, !dbg !60
  %235 = bitcast float %234 to i32, !dbg !58
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !58
  %237 = bitcast i32 %236 to float, !dbg !58
  %238 = fadd float %234, %237, !dbg !60
  %239 = bitcast float %238 to i32, !dbg !58
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 4, i32 31), !dbg !58
  %241 = bitcast i32 %240 to float, !dbg !58
  %242 = fadd float %238, %241, !dbg !60
  %243 = bitcast float %242 to i32, !dbg !58
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !58
  %245 = bitcast i32 %244 to float, !dbg !58
  %246 = fadd float %242, %245, !dbg !60
  %247 = bitcast float %246 to i32, !dbg !58
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 1, i32 31), !dbg !58
  %249 = bitcast i32 %248 to float, !dbg !58
  %250 = fadd float %246, %249, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, float %250, i1 %192) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %251 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %197, i1 %195) #3, !dbg !58
  %252 = bitcast float %251 to i32, !dbg !58
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !58
  %254 = bitcast i32 %253 to float, !dbg !58
  %255 = fadd float %251, %254, !dbg !60
  %256 = bitcast float %255 to i32, !dbg !58
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 1, i32 31), !dbg !58
  %258 = bitcast i32 %257 to float, !dbg !58
  %259 = fadd float %255, %258, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, float %259, i1 %209) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %260 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !58
  %261 = fadd float %260, 0.000000e+00, !dbg !63
  %262 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !36
  %263 = insertelement <2 x i32> %262, i32 %119, i64 1, !dbg !36
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !36
  %265 = fmul <2 x float> %139, %264, !dbg !65
  %266 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !36
  %267 = insertelement <2 x i32> %266, i32 %120, i64 1, !dbg !36
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !36
  %269 = fmul <2 x float> %162, %268, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %shift4 = shufflevector <2 x float> %265, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !68
  %270 = fadd <2 x float> %265, %shift4, !dbg !68
  %shift5 = shufflevector <2 x float> %269, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !68
  %271 = fadd <2 x float> %270, %shift5, !dbg !68
  %272 = fadd <2 x float> %271, %269, !dbg !68
  %273 = extractelement <2 x float> %272, i64 0, !dbg !68
  %274 = select i1 %22, float %273, float 0.000000e+00, !dbg !68
  %275 = bitcast float %274 to i32, !dbg !66
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 16, i32 31), !dbg !66
  %277 = bitcast i32 %276 to float, !dbg !66
  %278 = fadd float %274, %277, !dbg !68
  %279 = bitcast float %278 to i32, !dbg !66
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 8, i32 31), !dbg !66
  %281 = bitcast i32 %280 to float, !dbg !66
  %282 = fadd float %278, %281, !dbg !68
  %283 = bitcast float %282 to i32, !dbg !66
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 4, i32 31), !dbg !66
  %285 = bitcast i32 %284 to float, !dbg !66
  %286 = fadd float %282, %285, !dbg !68
  %287 = bitcast float %286 to i32, !dbg !66
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 2, i32 31), !dbg !66
  %289 = bitcast i32 %288 to float, !dbg !66
  %290 = fadd float %286, %289, !dbg !68
  %291 = bitcast float %290 to i32, !dbg !66
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 1, i32 31), !dbg !66
  %293 = bitcast i32 %292 to float, !dbg !66
  %294 = fadd float %290, %293, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, float %294, i1 %192) #3, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %295 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %197, i1 %195) #3, !dbg !66
  %296 = bitcast float %295 to i32, !dbg !66
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 2, i32 31), !dbg !66
  %298 = bitcast i32 %297 to float, !dbg !66
  %299 = fadd float %295, %298, !dbg !68
  %300 = bitcast float %299 to i32, !dbg !66
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 1, i32 31), !dbg !66
  %302 = bitcast i32 %301 to float, !dbg !66
  %303 = fadd float %299, %302, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, float %303, i1 %209) #3, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %304 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !66
  %305 = fadd float %304, 0.000000e+00, !dbg !71
  %306 = getelementptr float, ptr addrspace(1) %10, i64 %75, !dbg !73
  %307 = icmp eq i32 %urem, 0, !dbg !74
  %308 = bitcast float %211 to i32, !dbg !74
  %309 = and i1 %307, %22, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %308, ptr addrspace(1) %306, i1 %309) #3, !dbg !74
  %310 = getelementptr float, ptr addrspace(1) %11, i64 %75, !dbg !75
  %311 = bitcast float %261 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %311, ptr addrspace(1) %310, i1 %309) #3, !dbg !76
  %312 = getelementptr float, ptr addrspace(1) %12, i64 %75, !dbg !77
  %313 = bitcast float %305 to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %313, ptr addrspace(1) %312, i1 %309) #3, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cdx6jd7zz66jgi3wdx5347bavwudeerbqecyfupy62yilz6x3y6r.py", directory: "/tmp/torchinductor_zeus/dx")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 26, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 25, column: 21, scope: !5)
!11 = !DILocation(line: 30, column: 41, scope: !5)
!12 = !DILocation(line: 30, column: 36, scope: !5)
!13 = !DILocation(line: 30, column: 30, scope: !5)
!14 = !DILocation(line: 30, column: 47, scope: !5)
!15 = !DILocation(line: 30, column: 76, scope: !5)
!16 = !DILocation(line: 31, column: 30, scope: !5)
!17 = !DILocation(line: 31, column: 47, scope: !5)
!18 = !DILocation(line: 31, column: 76, scope: !5)
!19 = !DILocation(line: 32, column: 30, scope: !5)
!20 = !DILocation(line: 32, column: 47, scope: !5)
!21 = !DILocation(line: 32, column: 76, scope: !5)
!22 = !DILocation(line: 33, column: 30, scope: !5)
!23 = !DILocation(line: 33, column: 35, scope: !5)
!24 = !DILocation(line: 34, column: 30, scope: !5)
!25 = !DILocation(line: 34, column: 35, scope: !5)
!26 = !DILocation(line: 35, column: 31, scope: !5)
!27 = !DILocation(line: 35, column: 48, scope: !5)
!28 = !DILocation(line: 36, column: 31, scope: !5)
!29 = !DILocation(line: 36, column: 36, scope: !5)
!30 = !DILocation(line: 37, column: 31, scope: !5)
!31 = !DILocation(line: 37, column: 48, scope: !5)
!32 = !DILocation(line: 37, column: 77, scope: !5)
!33 = !DILocation(line: 38, column: 31, scope: !5)
!34 = !DILocation(line: 38, column: 36, scope: !5)
!35 = !DILocation(line: 39, column: 31, scope: !5)
!36 = !DILocation(line: 39, column: 48, scope: !5)
!37 = !DILocation(line: 46, column: 19, scope: !5)
!38 = !DILocation(line: 42, column: 18, scope: !5)
!39 = !DILocation(line: 44, column: 18, scope: !5)
!40 = !DILocation(line: 47, column: 19, scope: !5)
!41 = !DILocation(line: 50, column: 20, scope: !5)
!42 = !DILocation(line: 51, column: 20, scope: !5)
!43 = !DILocation(line: 52, column: 19, scope: !5)
!44 = !DILocation(line: 233, column: 15, scope: !45, inlinedAt: !48)
!45 = distinct !DILexicalBlockFile(scope: !47, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!47 = distinct !DILexicalBlockFile(scope: !5, file: !46, discriminator: 0)
!48 = !DILocation(line: 243, column: 36, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 55, column: 59, scope: !45)
!50 = !DILocation(line: 243, column: 36, scope: !47, inlinedAt: !51)
!51 = !DILocation(line: 55, column: 59, scope: !47)
!52 = !DILocation(line: 8, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !5, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor")
!55 = !DILocation(line: 55, column: 45, scope: !53)
!56 = !DILocation(line: 57, column: 20, scope: !5)
!57 = !DILocation(line: 58, column: 20, scope: !5)
!58 = !DILocation(line: 243, column: 36, scope: !47, inlinedAt: !59)
!59 = !DILocation(line: 61, column: 59, scope: !47)
!60 = !DILocation(line: 233, column: 15, scope: !45, inlinedAt: !61)
!61 = !DILocation(line: 243, column: 36, scope: !45, inlinedAt: !62)
!62 = !DILocation(line: 61, column: 59, scope: !45)
!63 = !DILocation(line: 8, column: 15, scope: !53, inlinedAt: !64)
!64 = !DILocation(line: 61, column: 45, scope: !53)
!65 = !DILocation(line: 62, column: 20, scope: !5)
!66 = !DILocation(line: 243, column: 36, scope: !47, inlinedAt: !67)
!67 = !DILocation(line: 65, column: 59, scope: !47)
!68 = !DILocation(line: 233, column: 15, scope: !45, inlinedAt: !69)
!69 = !DILocation(line: 243, column: 36, scope: !45, inlinedAt: !70)
!70 = !DILocation(line: 65, column: 59, scope: !45)
!71 = !DILocation(line: 8, column: 15, scope: !53, inlinedAt: !72)
!72 = !DILocation(line: 65, column: 45, scope: !53)
!73 = !DILocation(line: 66, column: 25, scope: !5)
!74 = !DILocation(line: 66, column: 37, scope: !5)
!75 = !DILocation(line: 67, column: 25, scope: !5)
!76 = !DILocation(line: 67, column: 37, scope: !5)
!77 = !DILocation(line: 68, column: 25, scope: !5)
!78 = !DILocation(line: 68, column: 37, scope: !5)
!79 = !DILocation(line: 68, column: 4, scope: !5)
