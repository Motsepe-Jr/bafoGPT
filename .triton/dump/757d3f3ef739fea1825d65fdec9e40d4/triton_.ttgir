#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg11: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg12: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg14: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<512> : tensor<512xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<512xi32, #blocked>
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1xf32, #blocked>
    %cst_2 = arith.constant 0.000000e+00 : f32
    %c2304_i32 = arith.constant 2304 : i32
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<512xf32, #blocked>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<512xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c2304_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1xi1, #blocked>
    %3 = tt.splat %1 : (i1) -> tensor<1xi1, #blocked1>
    %4 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked>
    %5 = arith.cmpi slt, %4, %cst : tensor<512xi32, #blocked>
    %6 = arith.muli %4, %cst_0 : tensor<512xi32, #blocked>
    %7 = tt.splat %0 : (i32) -> tensor<512xi32, #blocked>
    %8 = arith.addi %7, %6 : tensor<512xi32, #blocked>
    %9 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %10 = tt.addptr %9, %8 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %11 = tt.splat %1 : (i1) -> tensor<512xi1, #blocked>
    %12 = arith.andi %5, %11 : tensor<512xi1, #blocked>
    %13 = tt.load %10, %12, %cst_4 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %14 = arith.extf %13 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %15 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %16 = tt.addptr %15, %8 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %17 = tt.load %16, %12, %cst_4 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %18 = arith.extf %17 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %19 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %20 = tt.addptr %19, %8 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %21 = tt.load %20, %12, %cst_4 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %22 = arith.extf %21 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %23 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %24 = tt.addptr %23, %4 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi32, #blocked>
    %25 = tt.load %24, %5, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %26 = tt.addptr %arg4, %0 : !tt.ptr<f32, 1>, i32
    %27 = tt.splat %26 : (!tt.ptr<f32, 1>) -> tensor<1x!tt.ptr<f32, 1>, #blocked>
    %28 = tt.load %27, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1xf32, #blocked>
    %29 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %30 = tt.addptr %29, %8 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi32, #blocked>
    %31 = tt.load %30, %12, %cst_3 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %32 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %33 = tt.addptr %32, %4 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi32, #blocked>
    %34 = tt.load %33, %5, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %35 = tt.splat %arg7 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %36 = tt.addptr %35, %8 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %37 = tt.load %36, %12, %cst_4 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %38 = arith.extf %37 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %39 = tt.splat %arg8 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %40 = tt.addptr %39, %4 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi32, #blocked>
    %41 = tt.load %40, %5, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %42 = tt.splat %arg9 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %43 = tt.addptr %42, %8 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi32, #blocked>
    %44 = tt.load %43, %12, %cst_3 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %45 = arith.addf %14, %18 : tensor<512xf32, #blocked>
    %46 = arith.mulf %22, %25 : tensor<512xf32, #blocked>
    %47 = arith.addf %28, %cst_1 : tensor<1xf32, #blocked>
    %48 = tt.broadcast %47 : (tensor<1xf32, #blocked>) -> tensor<512xf32, #blocked>
    %49 = arith.mulf %46, %48 : tensor<512xf32, #blocked>
    %50 = arith.addf %49, %31 : tensor<512xf32, #blocked>
    %51 = arith.mulf %50, %34 : tensor<512xf32, #blocked>
    %52 = arith.mulf %45, %51 : tensor<512xf32, #blocked>
    %53 = arith.select %12, %52, %cst_3 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %54 = "tt.reduce"(%53) <{axis = 0 : i32}> ({
    ^bb0(%arg15: f32, %arg16: f32):
      %74 = arith.addf %arg15, %arg16 : f32
      tt.reduce.return %74 : f32
    }) : (tensor<512xf32, #blocked>) -> f32
    %55 = arith.addf %54, %cst_2 : f32
    %56 = tt.splat %55 : (f32) -> tensor<1xf32, #blocked1>
    %57 = arith.mulf %31, %41 : tensor<512xf32, #blocked>
    %58 = arith.mulf %38, %57 : tensor<512xf32, #blocked>
    %59 = arith.select %12, %58, %cst_3 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %60 = "tt.reduce"(%59) <{axis = 0 : i32}> ({
    ^bb0(%arg15: f32, %arg16: f32):
      %74 = arith.addf %arg15, %arg16 : f32
      tt.reduce.return %74 : f32
    }) : (tensor<512xf32, #blocked>) -> f32
    %61 = arith.addf %60, %cst_2 : f32
    %62 = tt.splat %61 : (f32) -> tensor<1xf32, #blocked1>
    %63 = arith.mulf %44, %46 : tensor<512xf32, #blocked>
    %64 = arith.select %12, %63, %cst_3 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %65 = "tt.reduce"(%64) <{axis = 0 : i32}> ({
    ^bb0(%arg15: f32, %arg16: f32):
      %74 = arith.addf %arg15, %arg16 : f32
      tt.reduce.return %74 : f32
    }) : (tensor<512xf32, #blocked>) -> f32
    %66 = arith.addf %65, %cst_2 : f32
    %67 = tt.splat %66 : (f32) -> tensor<1xf32, #blocked1>
    %68 = tt.addptr %arg10, %0 : !tt.ptr<f32, 1>, i32
    %69 = tt.splat %68 : (!tt.ptr<f32, 1>) -> tensor<1x!tt.ptr<f32, 1>, #blocked1>
    tt.store %69, %56, %3 {cache = 1 : i32, evict = 1 : i32} : tensor<1xf32, #blocked1>
    %70 = tt.addptr %arg11, %0 : !tt.ptr<f32, 1>, i32
    %71 = tt.splat %70 : (!tt.ptr<f32, 1>) -> tensor<1x!tt.ptr<f32, 1>, #blocked1>
    tt.store %71, %62, %3 {cache = 1 : i32, evict = 1 : i32} : tensor<1xf32, #blocked1>
    %72 = tt.addptr %arg12, %0 : !tt.ptr<f32, 1>, i32
    %73 = tt.splat %72 : (!tt.ptr<f32, 1>) -> tensor<1x!tt.ptr<f32, 1>, #blocked1>
    tt.store %73, %67, %3 {cache = 1 : i32, evict = 1 : i32} : tensor<1xf32, #blocked1>
    tt.return
  }
}
