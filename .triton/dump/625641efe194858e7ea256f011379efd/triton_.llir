; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %7 = shl i32 %6, 1, !dbg !8
  %8 = and i32 %7, 254, !dbg !8
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %10 = shl i32 %9, 8, !dbg !10
  %11 = or i32 %10, %8, !dbg !11
  %12 = icmp slt i32 %11, 2304, !dbg !12
  %13 = sext i32 %11 to i64, !dbg !13
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !13
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 %12) #1, !dbg !14
  %16 = extractvalue { i32, i32 } %15, 0, !dbg !14
  %17 = extractvalue { i32, i32 } %15, 1, !dbg !14
  %18 = bitcast i32 %16 to float, !dbg !14
  %19 = bitcast i32 %17 to float, !dbg !14
  %20 = getelementptr i16, ptr addrspace(1) %1, i64 %13, !dbg !15
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %12) #1, !dbg !16
  %22 = trunc i32 %21 to i16, !dbg !16
  %extelt.offset = lshr i32 %21, 16, !dbg !16
  %23 = trunc i32 %extelt.offset to i16, !dbg !16
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #1, !dbg !17
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #1, !dbg !17
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !18
  %27 = bitcast i32 %26 to float, !dbg !18
  %28 = add i32 %11, 2304, !dbg !19
  %29 = sext i32 %28 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %12) #1, !dbg !21
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !21
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !21
  %34 = bitcast i32 %32 to float, !dbg !21
  %35 = bitcast i32 %33 to float, !dbg !21
  %36 = getelementptr i16, ptr addrspace(1) %1, i64 %29, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %12) #1, !dbg !23
  %38 = trunc i32 %37 to i16, !dbg !23
  %extelt.offset1 = lshr i32 %37, 16, !dbg !23
  %39 = trunc i32 %extelt.offset1 to i16, !dbg !23
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #1, !dbg !24
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #1, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %2, i64 1, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !26
  %44 = bitcast i32 %43 to float, !dbg !26
  %45 = add i32 %11, 4608, !dbg !27
  %46 = sext i32 %45 to i64, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !28
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %12) #1, !dbg !29
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !29
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !29
  %51 = bitcast i32 %49 to float, !dbg !29
  %52 = bitcast i32 %50 to float, !dbg !29
  %53 = getelementptr i16, ptr addrspace(1) %1, i64 %46, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %12) #1, !dbg !31
  %55 = trunc i32 %54 to i16, !dbg !31
  %extelt.offset2 = lshr i32 %54, 16, !dbg !31
  %56 = trunc i32 %extelt.offset2 to i16, !dbg !31
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #1, !dbg !32
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #1, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %2, i64 2, !dbg !33
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !34
  %61 = bitcast i32 %60 to float, !dbg !34
  %62 = add i32 %11, 6912, !dbg !35
  %63 = sext i32 %62 to i64, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !36
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %12) #1, !dbg !37
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !37
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !37
  %68 = bitcast i32 %66 to float, !dbg !37
  %69 = bitcast i32 %67 to float, !dbg !37
  %70 = getelementptr i16, ptr addrspace(1) %1, i64 %63, !dbg !38
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %12) #1, !dbg !39
  %72 = trunc i32 %71 to i16, !dbg !39
  %extelt.offset3 = lshr i32 %71, 16, !dbg !39
  %73 = trunc i32 %extelt.offset3 to i16, !dbg !39
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #1, !dbg !40
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #1, !dbg !40
  %76 = getelementptr float, ptr addrspace(1) %2, i64 3, !dbg !41
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !42
  %78 = bitcast i32 %77 to float, !dbg !42
  %79 = fmul float %24, %27, !dbg !43
  %80 = fmul float %25, %27, !dbg !43
  %81 = fmul float %79, %18, !dbg !44
  %82 = fmul float %80, %19, !dbg !44
  %83 = fmul float %40, %44, !dbg !45
  %84 = fmul float %41, %44, !dbg !45
  %85 = fmul float %83, %34, !dbg !46
  %86 = fmul float %84, %35, !dbg !46
  %87 = fadd float %81, %85, !dbg !47
  %88 = fadd float %82, %86, !dbg !47
  %89 = fmul float %57, %61, !dbg !48
  %90 = fmul float %58, %61, !dbg !48
  %91 = fmul float %89, %51, !dbg !49
  %92 = fmul float %90, %52, !dbg !49
  %93 = fadd float %87, %91, !dbg !50
  %94 = fadd float %88, %92, !dbg !50
  %95 = fmul float %74, %78, !dbg !51
  %96 = fmul float %75, %78, !dbg !51
  %97 = fmul float %95, %68, !dbg !52
  %98 = fmul float %96, %69, !dbg !52
  %99 = fadd float %93, %97, !dbg !53
  %100 = fadd float %94, %98, !dbg !53
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %13, !dbg !54
  %102 = bitcast float %99 to i32, !dbg !55
  %103 = bitcast float %100 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %103, ptr addrspace(1) %101, i1 %12) #1, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c3peivmgmn6ctwtc3fbvoxpi5sxrqitu4uvyi4u7ufrdr4cdltmo.py", directory: "/tmp/torchinductor_zeus/3p")
!3 = !{ptr @triton__0d1d2d3d4de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de", linkageName: "triton__0d1d2d3d4de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 22, column: 21, scope: !5)
!13 = !DILocation(line: 24, column: 30, scope: !5)
!14 = !DILocation(line: 24, column: 35, scope: !5)
!15 = !DILocation(line: 25, column: 30, scope: !5)
!16 = !DILocation(line: 25, column: 35, scope: !5)
!17 = !DILocation(line: 25, column: 45, scope: !5)
!18 = !DILocation(line: 26, column: 19, scope: !5)
!19 = !DILocation(line: 28, column: 37, scope: !5)
!20 = !DILocation(line: 28, column: 30, scope: !5)
!21 = !DILocation(line: 28, column: 42, scope: !5)
!22 = !DILocation(line: 29, column: 30, scope: !5)
!23 = !DILocation(line: 29, column: 42, scope: !5)
!24 = !DILocation(line: 29, column: 52, scope: !5)
!25 = !DILocation(line: 30, column: 31, scope: !5)
!26 = !DILocation(line: 30, column: 20, scope: !5)
!27 = !DILocation(line: 32, column: 38, scope: !5)
!28 = !DILocation(line: 32, column: 31, scope: !5)
!29 = !DILocation(line: 32, column: 43, scope: !5)
!30 = !DILocation(line: 33, column: 31, scope: !5)
!31 = !DILocation(line: 33, column: 43, scope: !5)
!32 = !DILocation(line: 33, column: 53, scope: !5)
!33 = !DILocation(line: 34, column: 31, scope: !5)
!34 = !DILocation(line: 34, column: 20, scope: !5)
!35 = !DILocation(line: 36, column: 38, scope: !5)
!36 = !DILocation(line: 36, column: 31, scope: !5)
!37 = !DILocation(line: 36, column: 43, scope: !5)
!38 = !DILocation(line: 37, column: 31, scope: !5)
!39 = !DILocation(line: 37, column: 43, scope: !5)
!40 = !DILocation(line: 37, column: 53, scope: !5)
!41 = !DILocation(line: 38, column: 31, scope: !5)
!42 = !DILocation(line: 38, column: 20, scope: !5)
!43 = !DILocation(line: 41, column: 18, scope: !5)
!44 = !DILocation(line: 42, column: 18, scope: !5)
!45 = !DILocation(line: 44, column: 19, scope: !5)
!46 = !DILocation(line: 45, column: 19, scope: !5)
!47 = !DILocation(line: 46, column: 19, scope: !5)
!48 = !DILocation(line: 48, column: 20, scope: !5)
!49 = !DILocation(line: 49, column: 20, scope: !5)
!50 = !DILocation(line: 50, column: 20, scope: !5)
!51 = !DILocation(line: 52, column: 20, scope: !5)
!52 = !DILocation(line: 53, column: 20, scope: !5)
!53 = !DILocation(line: 54, column: 20, scope: !5)
!54 = !DILocation(line: 55, column: 25, scope: !5)
!55 = !DILocation(line: 55, column: 37, scope: !5)
!56 = !DILocation(line: 55, column: 4, scope: !5)
