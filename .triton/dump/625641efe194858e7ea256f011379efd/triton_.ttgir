#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<6912> : tensor<256xi32, #blocked>
    %cst_0 = arith.constant dense<4608> : tensor<256xi32, #blocked>
    %cst_1 = arith.constant dense<2304> : tensor<256xi32, #blocked>
    %c256_i32 = arith.constant 256 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c256_i32 : i32
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<256xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked>
    %5 = arith.cmpi slt, %4, %cst_1 : tensor<256xi32, #blocked>
    %6 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<256x!tt.ptr<f32, 1>, #blocked>
    %7 = tt.addptr %6, %4 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %8 = tt.load %7, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %9 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<256x!tt.ptr<bf16, 1>, #blocked>
    %10 = tt.addptr %9, %4 : tensor<256x!tt.ptr<bf16, 1>, #blocked>, tensor<256xi32, #blocked>
    %11 = tt.load %10, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xbf16, #blocked>
    %12 = arith.extf %11 : tensor<256xbf16, #blocked> to tensor<256xf32, #blocked>
    %13 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32, 1>, i32
    %14 = tt.load %13 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %15 = tt.splat %14 : (f32) -> tensor<256xf32, #blocked>
    %16 = arith.addi %4, %cst_1 : tensor<256xi32, #blocked>
    %17 = tt.addptr %6, %16 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %18 = tt.load %17, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %19 = tt.addptr %9, %16 : tensor<256x!tt.ptr<bf16, 1>, #blocked>, tensor<256xi32, #blocked>
    %20 = tt.load %19, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xbf16, #blocked>
    %21 = arith.extf %20 : tensor<256xbf16, #blocked> to tensor<256xf32, #blocked>
    %22 = tt.addptr %arg2, %c1_i32 : !tt.ptr<f32, 1>, i32
    %23 = tt.load %22 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %24 = tt.splat %23 : (f32) -> tensor<256xf32, #blocked>
    %25 = arith.addi %4, %cst_0 : tensor<256xi32, #blocked>
    %26 = tt.addptr %6, %25 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %27 = tt.load %26, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %28 = tt.addptr %9, %25 : tensor<256x!tt.ptr<bf16, 1>, #blocked>, tensor<256xi32, #blocked>
    %29 = tt.load %28, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xbf16, #blocked>
    %30 = arith.extf %29 : tensor<256xbf16, #blocked> to tensor<256xf32, #blocked>
    %31 = tt.addptr %arg2, %c2_i32 : !tt.ptr<f32, 1>, i32
    %32 = tt.load %31 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %33 = tt.splat %32 : (f32) -> tensor<256xf32, #blocked>
    %34 = arith.addi %4, %cst : tensor<256xi32, #blocked>
    %35 = tt.addptr %6, %34 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %36 = tt.load %35, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %37 = tt.addptr %9, %34 : tensor<256x!tt.ptr<bf16, 1>, #blocked>, tensor<256xi32, #blocked>
    %38 = tt.load %37, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xbf16, #blocked>
    %39 = arith.extf %38 : tensor<256xbf16, #blocked> to tensor<256xf32, #blocked>
    %40 = tt.addptr %arg2, %c3_i32 : !tt.ptr<f32, 1>, i32
    %41 = tt.load %40 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %42 = tt.splat %41 : (f32) -> tensor<256xf32, #blocked>
    %43 = arith.mulf %12, %15 : tensor<256xf32, #blocked>
    %44 = arith.mulf %8, %43 : tensor<256xf32, #blocked>
    %45 = arith.mulf %21, %24 : tensor<256xf32, #blocked>
    %46 = arith.mulf %18, %45 : tensor<256xf32, #blocked>
    %47 = arith.addf %44, %46 : tensor<256xf32, #blocked>
    %48 = arith.mulf %30, %33 : tensor<256xf32, #blocked>
    %49 = arith.mulf %27, %48 : tensor<256xf32, #blocked>
    %50 = arith.addf %47, %49 : tensor<256xf32, #blocked>
    %51 = arith.mulf %39, %42 : tensor<256xf32, #blocked>
    %52 = arith.mulf %36, %51 : tensor<256xf32, #blocked>
    %53 = arith.addf %50, %52 : tensor<256xf32, #blocked>
    %54 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<256x!tt.ptr<f32, 1>, #blocked>
    %55 = tt.addptr %54, %4 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    tt.store %55, %53, %5 {cache = 1 : i32, evict = 1 : i32} : tensor<256xf32, #blocked>
    tt.return
  }
}
