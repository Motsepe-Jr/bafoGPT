; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d10de11de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !5 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %14 = lshr i32 %13, 5, !dbg !8
  %urem = shl i32 %13, 2, !dbg !8
  %15 = and i32 %urem, 1020, !dbg !8
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %17 = sext i32 %16 to i64, !dbg !10
  %18 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !10
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !11
  %20 = bitcast i32 %19 to float, !dbg !11
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !11
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !11
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !11
  %24 = mul i32 %16, 2304, !dbg !12
  %25 = insertelement <4 x float> poison, float %20, i64 0, !dbg !13
  %26 = shufflevector <4 x float> %25, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !13
  br label %27, !dbg !14

27:                                               ; preds = %12, %27
  %28 = phi i32 [ 0, %12 ], [ %128, %27 ]
  %29 = phi <4 x float> [ zeroinitializer, %12 ], [ %127, %27 ]
  %30 = or i32 %28, %15, !dbg !15
  %31 = icmp ult i32 %30, 2304, !dbg !16
  %32 = add i32 %30, %24, !dbg !17
  %33 = sext i32 %32 to i64, !dbg !18
  %34 = getelementptr i16, ptr addrspace(1) %1, i64 %33, !dbg !18
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !19
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !19
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !19
  %38 = trunc i32 %36 to i16, !dbg !19
  %extelt.offset10 = lshr i32 %36, 16, !dbg !19
  %39 = trunc i32 %extelt.offset10 to i16, !dbg !19
  %40 = trunc i32 %37 to i16, !dbg !19
  %extelt.offset11 = lshr i32 %37, 16, !dbg !19
  %41 = trunc i32 %extelt.offset11 to i16, !dbg !19
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !20
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #3, !dbg !20
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !20
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #3, !dbg !20
  %46 = getelementptr i16, ptr addrspace(1) %2, i64 %33, !dbg !21
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !22
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !22
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !22
  %50 = trunc i32 %48 to i16, !dbg !22
  %extelt.offset12 = lshr i32 %48, 16, !dbg !22
  %51 = trunc i32 %extelt.offset12 to i16, !dbg !22
  %52 = trunc i32 %49 to i16, !dbg !22
  %extelt.offset13 = lshr i32 %49, 16, !dbg !22
  %53 = trunc i32 %extelt.offset13 to i16, !dbg !22
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #3, !dbg !23
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !23
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #3, !dbg !23
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #3, !dbg !23
  %58 = zext nneg i32 %30 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !24
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %65 = getelementptr i16, ptr addrspace(1) %4, i64 %33, !dbg !26
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !27
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !27
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !27
  %69 = trunc i32 %67 to i16, !dbg !27
  %extelt.offset14 = lshr i32 %67, 16, !dbg !27
  %70 = trunc i32 %extelt.offset14 to i16, !dbg !27
  %71 = trunc i32 %68 to i16, !dbg !27
  %extelt.offset15 = lshr i32 %68, 16, !dbg !27
  %72 = trunc i32 %extelt.offset15 to i16, !dbg !27
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #3, !dbg !28
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #3, !dbg !28
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #3, !dbg !28
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #3, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %6, i64 %58, !dbg !29
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %77, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !30
  %83 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !31
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !32
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !32
  %89 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !25
  %90 = insertelement <4 x i32> %89, i32 %62, i64 1, !dbg !25
  %91 = insertelement <4 x i32> %90, i32 %63, i64 2, !dbg !25
  %92 = insertelement <4 x i32> %91, i32 %64, i64 3, !dbg !25
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !25
  %94 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !30
  %95 = insertelement <4 x i32> %94, i32 %80, i64 1, !dbg !30
  %96 = insertelement <4 x i32> %95, i32 %81, i64 2, !dbg !30
  %97 = insertelement <4 x i32> %96, i32 %82, i64 3, !dbg !30
  %98 = bitcast <4 x i32> %97 to <4 x float>, !dbg !30
  %99 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !32
  %100 = insertelement <4 x i32> %99, i32 %86, i64 1, !dbg !32
  %101 = insertelement <4 x i32> %100, i32 %87, i64 2, !dbg !32
  %102 = insertelement <4 x i32> %101, i32 %88, i64 3, !dbg !32
  %103 = bitcast <4 x i32> %102 to <4 x float>, !dbg !32
  %104 = insertelement <4 x float> poison, float %42, i64 0, !dbg !33
  %105 = insertelement <4 x float> %104, float %43, i64 1, !dbg !33
  %106 = insertelement <4 x float> %105, float %44, i64 2, !dbg !33
  %107 = insertelement <4 x float> %106, float %45, i64 3, !dbg !33
  %108 = insertelement <4 x float> poison, float %54, i64 0, !dbg !33
  %109 = insertelement <4 x float> %108, float %55, i64 1, !dbg !33
  %110 = insertelement <4 x float> %109, float %56, i64 2, !dbg !33
  %111 = insertelement <4 x float> %110, float %57, i64 3, !dbg !33
  %112 = fadd <4 x float> %107, %111, !dbg !33
  %113 = fadd <4 x float> %93, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !34
  %114 = fmul <4 x float> %112, %113, !dbg !35
  %115 = insertelement <4 x float> poison, float %73, i64 0, !dbg !13
  %116 = insertelement <4 x float> %115, float %74, i64 1, !dbg !13
  %117 = insertelement <4 x float> %116, float %75, i64 2, !dbg !13
  %118 = insertelement <4 x float> %117, float %76, i64 3, !dbg !13
  %119 = fmul <4 x float> %118, %26, !dbg !13
  %120 = fadd <4 x float> %98, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !36
  %121 = fmul <4 x float> %119, %120, !dbg !37
  %122 = fadd <4 x float> %121, %103, !dbg !38
  %123 = fmul <4 x float> %114, %122, !dbg !39
  %124 = insertelement <4 x i1> poison, i1 %31, i64 0, !dbg !40
  %125 = shufflevector <4 x i1> %124, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !40
  %126 = select <4 x i1> %125, <4 x float> %123, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !40
  %127 = fadd <4 x float> %29, %126, !dbg !40
  %128 = add nuw nsw i32 %28, 1024, !dbg !14
  %129 = icmp ult i32 %28, 1280, !dbg !14
  br i1 %129, label %27, label %130, !dbg !14

130:                                              ; preds = %27
  %131 = and i32 %13, 31, !dbg !8
  %132 = and i32 %14, 7, !dbg !8
  %133 = bitcast i32 %22 to float, !dbg !11
  %shift = shufflevector <4 x float> %127, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !41
  %134 = fadd <4 x float> %127, %shift, !dbg !41
  %shift38 = shufflevector <4 x float> %127, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !41
  %135 = fadd <4 x float> %shift38, %134, !dbg !41
  %shift39 = shufflevector <4 x float> %127, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !41
  %136 = fadd <4 x float> %shift39, %135, !dbg !41
  %137 = extractelement <4 x float> %136, i64 0, !dbg !41
  %138 = bitcast float %137 to i32, !dbg !47
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 16, i32 31), !dbg !47
  %140 = bitcast i32 %139 to float, !dbg !47
  %141 = fadd float %137, %140, !dbg !41
  %142 = bitcast float %141 to i32, !dbg !47
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 8, i32 31), !dbg !47
  %144 = bitcast i32 %143 to float, !dbg !47
  %145 = fadd float %141, %144, !dbg !41
  %146 = bitcast float %145 to i32, !dbg !47
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 4, i32 31), !dbg !47
  %148 = bitcast i32 %147 to float, !dbg !47
  %149 = fadd float %145, %148, !dbg !41
  %150 = bitcast float %149 to i32, !dbg !47
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 2, i32 31), !dbg !47
  %152 = bitcast i32 %151 to float, !dbg !47
  %153 = fadd float %149, %152, !dbg !41
  %154 = bitcast float %153 to i32, !dbg !47
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 1, i32 31), !dbg !47
  %156 = bitcast i32 %155 to float, !dbg !47
  %157 = fadd float %153, %156, !dbg !41
  %158 = icmp eq i32 %131, 0, !dbg !47
  %159 = zext nneg i32 %132 to i64, !dbg !47
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i64 %159, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, float %157, i1 %158) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %161 = icmp slt i32 %13, 8, !dbg !47
  %162 = sext i32 %13 to i64, !dbg !47
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i64 %162, !dbg !47
  %164 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %163, i1 %161) #3, !dbg !47
  %165 = bitcast float %164 to i32, !dbg !47
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 4, i32 31), !dbg !47
  %167 = bitcast i32 %166 to float, !dbg !47
  %168 = fadd float %164, %167, !dbg !41
  %169 = bitcast float %168 to i32, !dbg !47
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !47
  %171 = bitcast i32 %170 to float, !dbg !47
  %172 = fadd float %168, %171, !dbg !41
  %173 = bitcast float %172 to i32, !dbg !47
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !47
  %175 = bitcast i32 %174 to float, !dbg !47
  %176 = fadd float %172, %175, !dbg !41
  %177 = and i32 %13, 7, !dbg !47
  %178 = icmp eq i32 %177, 0, !dbg !47
  %179 = and i1 %161, %178, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, float %176, i1 %179) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %180 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !47
  %181 = getelementptr float, ptr addrspace(1) %8, i64 %17, !dbg !49
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #3, !dbg !50
  %183 = bitcast i32 %182 to float, !dbg !50
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #3, !dbg !50
  %185 = bitcast i32 %184 to float, !dbg !50
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #3, !dbg !50
  %187 = bitcast i32 %186 to float, !dbg !50
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #3, !dbg !50
  %189 = bitcast i32 %188 to float, !dbg !50
  %190 = fmul float %180, -5.000000e-01, !dbg !51
  %191 = fmul float %183, %183, !dbg !52
  %192 = fmul float %185, %185, !dbg !52
  %193 = fmul float %187, %187, !dbg !52
  %194 = fmul float %189, %189, !dbg !52
  %195 = fmul float %191, %183, !dbg !53
  %196 = fmul float %192, %185, !dbg !53
  %197 = fmul float %193, %187, !dbg !53
  %198 = fmul float %194, %189, !dbg !53
  %199 = fmul float %190, %195, !dbg !54
  %200 = fmul float %190, %196, !dbg !54
  %201 = fmul float %190, %197, !dbg !54
  %202 = fmul float %190, %198, !dbg !54
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float 2.304000e+03) #3, !dbg !55
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float 2.304000e+03) #3, !dbg !55
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float 2.304000e+03) #3, !dbg !55
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float 2.304000e+03) #3, !dbg !55
  %207 = insertelement <4 x float> poison, float %203, i64 0, !dbg !56
  %208 = shufflevector <4 x float> %207, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !56
  %209 = insertelement <4 x float> poison, float %183, i64 0, !dbg !57
  %210 = shufflevector <4 x float> %209, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !57
  br label %211, !dbg !58

211:                                              ; preds = %130, %211
  %212 = phi i32 [ 0, %130 ], [ %333, %211 ]
  %213 = phi <4 x float> [ zeroinitializer, %130 ], [ %328, %211 ]
  %214 = or i32 %212, %15, !dbg !59
  %215 = icmp ult i32 %214, 2304, !dbg !60
  %216 = add i32 %214, %24, !dbg !61
  %217 = sext i32 %216 to i64, !dbg !62
  %218 = getelementptr i16, ptr addrspace(1) %4, i64 %217, !dbg !62
  %219 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %218, i1 %215, i32 0, i1 %215, i32 0, i1 %215) #3, !dbg !63
  %220 = extractvalue { i32, i32 } %219, 0, !dbg !63
  %221 = extractvalue { i32, i32 } %219, 1, !dbg !63
  %222 = trunc i32 %220 to i16, !dbg !63
  %extelt.offset4 = lshr i32 %220, 16, !dbg !63
  %223 = trunc i32 %extelt.offset4 to i16, !dbg !63
  %224 = trunc i32 %221 to i16, !dbg !63
  %extelt.offset5 = lshr i32 %221, 16, !dbg !63
  %225 = trunc i32 %extelt.offset5 to i16, !dbg !63
  %226 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %222) #3, !dbg !64
  %227 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %223) #3, !dbg !64
  %228 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %224) #3, !dbg !64
  %229 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %225) #3, !dbg !64
  %230 = zext nneg i32 %214 to i64, !dbg !65
  %231 = getelementptr float, ptr addrspace(1) %6, i64 %230, !dbg !65
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %231, i1 %215, i32 0, i1 %215, i32 0, i1 %215, i32 0, i1 %215, i32 0, i1 %215) #3, !dbg !66
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !66
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !66
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !66
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !66
  %237 = getelementptr float, ptr addrspace(1) %7, i64 %217, !dbg !67
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %237, i1 %215, i32 0, i1 %215, i32 0, i1 %215, i32 0, i1 %215, i32 0, i1 %215) #3, !dbg !68
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !68
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !68
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !68
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !68
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !69
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %243, i1 %215, i32 0, i1 %215, i32 0, i1 %215, i32 0, i1 %215, i32 0, i1 %215) #3, !dbg !70
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !70
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !70
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !70
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !70
  %249 = getelementptr i16, ptr addrspace(1) %1, i64 %217, !dbg !71
  %250 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %249, i1 %215, i32 0, i1 %215, i32 0, i1 %215) #3, !dbg !72
  %251 = extractvalue { i32, i32 } %250, 0, !dbg !72
  %252 = extractvalue { i32, i32 } %250, 1, !dbg !72
  %253 = trunc i32 %251 to i16, !dbg !72
  %extelt.offset6 = lshr i32 %251, 16, !dbg !72
  %254 = trunc i32 %extelt.offset6 to i16, !dbg !72
  %255 = trunc i32 %252 to i16, !dbg !72
  %extelt.offset7 = lshr i32 %252, 16, !dbg !72
  %256 = trunc i32 %extelt.offset7 to i16, !dbg !72
  %257 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %253) #3, !dbg !73
  %258 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %254) #3, !dbg !73
  %259 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %255) #3, !dbg !73
  %260 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %256) #3, !dbg !73
  %261 = getelementptr i16, ptr addrspace(1) %2, i64 %217, !dbg !74
  %262 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %261, i1 %215, i32 0, i1 %215, i32 0, i1 %215) #3, !dbg !75
  %263 = extractvalue { i32, i32 } %262, 0, !dbg !75
  %264 = extractvalue { i32, i32 } %262, 1, !dbg !75
  %265 = trunc i32 %263 to i16, !dbg !75
  %extelt.offset8 = lshr i32 %263, 16, !dbg !75
  %266 = trunc i32 %extelt.offset8 to i16, !dbg !75
  %267 = trunc i32 %264 to i16, !dbg !75
  %extelt.offset9 = lshr i32 %264, 16, !dbg !75
  %268 = trunc i32 %extelt.offset9 to i16, !dbg !75
  %269 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #3, !dbg !76
  %270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #3, !dbg !76
  %271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #3, !dbg !76
  %272 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #3, !dbg !76
  %273 = getelementptr float, ptr addrspace(1) %3, i64 %230, !dbg !77
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %273, i1 %215, i32 0, i1 %215, i32 0, i1 %215, i32 0, i1 %215, i32 0, i1 %215) #3, !dbg !78
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !78
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !78
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !78
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !78
  %279 = insertelement <4 x i32> poison, i32 %233, i64 0, !dbg !66
  %280 = insertelement <4 x i32> %279, i32 %234, i64 1, !dbg !66
  %281 = insertelement <4 x i32> %280, i32 %235, i64 2, !dbg !66
  %282 = insertelement <4 x i32> %281, i32 %236, i64 3, !dbg !66
  %283 = bitcast <4 x i32> %282 to <4 x float>, !dbg !66
  %284 = insertelement <4 x i32> poison, i32 %239, i64 0, !dbg !68
  %285 = insertelement <4 x i32> %284, i32 %240, i64 1, !dbg !68
  %286 = insertelement <4 x i32> %285, i32 %241, i64 2, !dbg !68
  %287 = insertelement <4 x i32> %286, i32 %242, i64 3, !dbg !68
  %288 = bitcast <4 x i32> %287 to <4 x float>, !dbg !68
  %289 = insertelement <4 x i32> poison, i32 %245, i64 0, !dbg !70
  %290 = insertelement <4 x i32> %289, i32 %246, i64 1, !dbg !70
  %291 = insertelement <4 x i32> %290, i32 %247, i64 2, !dbg !70
  %292 = insertelement <4 x i32> %291, i32 %248, i64 3, !dbg !70
  %293 = bitcast <4 x i32> %292 to <4 x float>, !dbg !70
  %294 = insertelement <4 x i32> poison, i32 %275, i64 0, !dbg !78
  %295 = insertelement <4 x i32> %294, i32 %276, i64 1, !dbg !78
  %296 = insertelement <4 x i32> %295, i32 %277, i64 2, !dbg !78
  %297 = insertelement <4 x i32> %296, i32 %278, i64 3, !dbg !78
  %298 = bitcast <4 x i32> %297 to <4 x float>, !dbg !78
  %299 = insertelement <4 x float> poison, float %226, i64 0, !dbg !79
  %300 = insertelement <4 x float> %299, float %227, i64 1, !dbg !79
  %301 = insertelement <4 x float> %300, float %228, i64 2, !dbg !79
  %302 = insertelement <4 x float> %301, float %229, i64 3, !dbg !79
  %303 = fmul <4 x float> %302, %26, !dbg !79
  %304 = fadd <4 x float> %283, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !80
  %305 = fmul <4 x float> %303, %304, !dbg !81
  %306 = fadd <4 x float> %305, %288, !dbg !82
  %307 = fmul <4 x float> %208, %306, !dbg !56
  %308 = insertelement <4 x float> poison, float %257, i64 0, !dbg !83
  %309 = insertelement <4 x float> %308, float %258, i64 1, !dbg !83
  %310 = insertelement <4 x float> %309, float %259, i64 2, !dbg !83
  %311 = insertelement <4 x float> %310, float %260, i64 3, !dbg !83
  %312 = insertelement <4 x float> poison, float %269, i64 0, !dbg !83
  %313 = insertelement <4 x float> %312, float %270, i64 1, !dbg !83
  %314 = insertelement <4 x float> %313, float %271, i64 2, !dbg !83
  %315 = insertelement <4 x float> %314, float %272, i64 3, !dbg !83
  %316 = fadd <4 x float> %311, %315, !dbg !83
  %317 = fadd <4 x float> %298, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !84
  %318 = fmul <4 x float> %316, %317, !dbg !85
  %319 = fmul <4 x float> %318, %210, !dbg !57
  %320 = fadd <4 x float> %319, %293, !dbg !86
  %321 = fadd <4 x float> %307, %320, !dbg !87
  %322 = fadd <4 x float> %307, %321, !dbg !88
  %323 = fmul <4 x float> %304, %322, !dbg !89
  %324 = fmul <4 x float> %302, %323, !dbg !90
  %325 = insertelement <4 x i1> poison, i1 %215, i64 0, !dbg !91
  %326 = shufflevector <4 x i1> %325, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !91
  %327 = select <4 x i1> %326, <4 x float> %324, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !91
  %328 = fadd <4 x float> %213, %327, !dbg !91
  %bc = bitcast <4 x float> %322 to <4 x i32>, !dbg !92
  %329 = extractelement <4 x i32> %bc, i64 0, !dbg !92
  %bc43 = bitcast <4 x float> %322 to <4 x i32>, !dbg !92
  %330 = extractelement <4 x i32> %bc43, i64 1, !dbg !92
  %bc44 = bitcast <4 x float> %322 to <4 x i32>, !dbg !92
  %331 = extractelement <4 x i32> %bc44, i64 2, !dbg !92
  %bc45 = bitcast <4 x float> %322 to <4 x i32>, !dbg !92
  %332 = extractelement <4 x i32> %bc45, i64 3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %330, i32 %331, i32 %332, ptr addrspace(1) %243, i1 %215) #3, !dbg !92
  %333 = add nuw nsw i32 %212, 1024, !dbg !58
  %334 = icmp ult i32 %212, 1280, !dbg !58
  br i1 %334, label %211, label %335, !dbg !58

335:                                              ; preds = %211
  %336 = bitcast i32 %21 to float, !dbg !11
  %337 = bitcast i32 %23 to float, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %shift40 = shufflevector <4 x float> %328, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !95
  %338 = fadd <4 x float> %328, %shift40, !dbg !95
  %shift41 = shufflevector <4 x float> %328, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !95
  %339 = fadd <4 x float> %shift41, %338, !dbg !95
  %shift42 = shufflevector <4 x float> %328, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !95
  %340 = fadd <4 x float> %shift42, %339, !dbg !95
  %341 = extractelement <4 x float> %340, i64 0, !dbg !95
  %342 = bitcast float %341 to i32, !dbg !93
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 16, i32 31), !dbg !93
  %344 = bitcast i32 %343 to float, !dbg !93
  %345 = fadd float %341, %344, !dbg !95
  %346 = bitcast float %345 to i32, !dbg !93
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 8, i32 31), !dbg !93
  %348 = bitcast i32 %347 to float, !dbg !93
  %349 = fadd float %345, %348, !dbg !95
  %350 = bitcast float %349 to i32, !dbg !93
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 4, i32 31), !dbg !93
  %352 = bitcast i32 %351 to float, !dbg !93
  %353 = fadd float %349, %352, !dbg !95
  %354 = bitcast float %353 to i32, !dbg !93
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 2, i32 31), !dbg !93
  %356 = bitcast i32 %355 to float, !dbg !93
  %357 = fadd float %353, %356, !dbg !95
  %358 = bitcast float %357 to i32, !dbg !93
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 1, i32 31), !dbg !93
  %360 = bitcast i32 %359 to float, !dbg !93
  %361 = fadd float %357, %360, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, float %361, i1 %158) #3, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %362 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %163, i1 %161) #3, !dbg !93
  %363 = bitcast float %362 to i32, !dbg !93
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 4, i32 31), !dbg !93
  %365 = bitcast i32 %364 to float, !dbg !93
  %366 = fadd float %362, %365, !dbg !95
  %367 = bitcast float %366 to i32, !dbg !93
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 2, i32 31), !dbg !93
  %369 = bitcast i32 %368 to float, !dbg !93
  %370 = fadd float %366, %369, !dbg !95
  %371 = bitcast float %370 to i32, !dbg !93
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 1, i32 31), !dbg !93
  %373 = bitcast i32 %372 to float, !dbg !93
  %374 = fadd float %370, %373, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, float %374, i1 %179) #3, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %375 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !93
  %376 = fmul float %375, -5.000000e-01, !dbg !98
  %377 = fmul float %20, %20, !dbg !99
  %378 = fmul float %336, %336, !dbg !99
  %379 = fmul float %133, %133, !dbg !99
  %380 = fmul float %337, %337, !dbg !99
  %381 = fmul float %377, %20, !dbg !100
  %382 = fmul float %378, %336, !dbg !100
  %383 = fmul float %379, %133, !dbg !100
  %384 = fmul float %380, %337, !dbg !100
  %385 = fmul float %381, %376, !dbg !101
  %386 = fmul float %382, %376, !dbg !101
  %387 = fmul float %383, %376, !dbg !101
  %388 = fmul float %384, %376, !dbg !101
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %385, float 2.304000e+03) #3, !dbg !102
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %386, float 2.304000e+03) #3, !dbg !102
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %387, float 2.304000e+03) #3, !dbg !102
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %388, float 2.304000e+03) #3, !dbg !102
  br label %393, !dbg !103

393:                                              ; preds = %335, %393
  %394 = phi i32 [ 0, %335 ], [ %467, %393 ]
  %395 = or i32 %394, %15, !dbg !104
  %396 = icmp ult i32 %395, 2304, !dbg !105
  %397 = add i32 %395, %24, !dbg !106
  %398 = sext i32 %397 to i64, !dbg !107
  %399 = getelementptr float, ptr addrspace(1) %0, i64 %398, !dbg !107
  %400 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %399, i1 %396, i32 0, i1 %396, i32 0, i1 %396, i32 0, i1 %396, i32 0, i1 %396) #3, !dbg !108
  %401 = extractvalue { i32, i32, i32, i32 } %400, 0, !dbg !108
  %402 = extractvalue { i32, i32, i32, i32 } %400, 1, !dbg !108
  %403 = extractvalue { i32, i32, i32, i32 } %400, 2, !dbg !108
  %404 = extractvalue { i32, i32, i32, i32 } %400, 3, !dbg !108
  %405 = bitcast i32 %401 to float, !dbg !108
  %406 = bitcast i32 %402 to float, !dbg !108
  %407 = bitcast i32 %403 to float, !dbg !108
  %408 = bitcast i32 %404 to float, !dbg !108
  %409 = zext nneg i32 %395 to i64, !dbg !109
  %410 = getelementptr float, ptr addrspace(1) %6, i64 %409, !dbg !109
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %410, i1 %396, i32 0, i1 %396, i32 0, i1 %396, i32 0, i1 %396, i32 0, i1 %396) #3, !dbg !110
  %412 = extractvalue { i32, i32, i32, i32 } %411, 0, !dbg !110
  %413 = extractvalue { i32, i32, i32, i32 } %411, 1, !dbg !110
  %414 = extractvalue { i32, i32, i32, i32 } %411, 2, !dbg !110
  %415 = extractvalue { i32, i32, i32, i32 } %411, 3, !dbg !110
  %416 = bitcast i32 %412 to float, !dbg !110
  %417 = bitcast i32 %413 to float, !dbg !110
  %418 = bitcast i32 %414 to float, !dbg !110
  %419 = bitcast i32 %415 to float, !dbg !110
  %420 = getelementptr i16, ptr addrspace(1) %4, i64 %398, !dbg !111
  %421 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %420, i1 %396, i32 0, i1 %396, i32 0, i1 %396) #3, !dbg !112
  %422 = extractvalue { i32, i32 } %421, 0, !dbg !112
  %423 = extractvalue { i32, i32 } %421, 1, !dbg !112
  %424 = trunc i32 %422 to i16, !dbg !112
  %extelt.offset = lshr i32 %422, 16, !dbg !112
  %425 = trunc i32 %extelt.offset to i16, !dbg !112
  %426 = trunc i32 %423 to i16, !dbg !112
  %extelt.offset3 = lshr i32 %423, 16, !dbg !112
  %427 = trunc i32 %extelt.offset3 to i16, !dbg !112
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #3, !dbg !113
  %429 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #3, !dbg !113
  %430 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #3, !dbg !113
  %431 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %427) #3, !dbg !113
  %432 = fadd float %416, 1.000000e+00, !dbg !114
  %433 = fadd float %417, 1.000000e+00, !dbg !114
  %434 = fadd float %418, 1.000000e+00, !dbg !114
  %435 = fadd float %419, 1.000000e+00, !dbg !114
  %436 = fmul float %432, %405, !dbg !115
  %437 = fmul float %433, %406, !dbg !115
  %438 = fmul float %434, %407, !dbg !115
  %439 = fmul float %435, %408, !dbg !115
  %440 = fmul float %436, %20, !dbg !116
  %441 = fmul float %437, %20, !dbg !116
  %442 = fmul float %438, %20, !dbg !116
  %443 = fmul float %439, %20, !dbg !116
  %444 = fmul float %389, %428, !dbg !117
  %445 = fmul float %389, %429, !dbg !117
  %446 = fmul float %389, %430, !dbg !117
  %447 = fmul float %389, %431, !dbg !117
  %448 = fadd float %444, %440, !dbg !118
  %449 = fadd float %445, %441, !dbg !118
  %450 = fadd float %442, %446, !dbg !118
  %451 = fadd float %443, %447, !dbg !118
  %452 = fadd float %444, %448, !dbg !119
  %453 = fadd float %445, %449, !dbg !119
  %454 = fadd float %446, %450, !dbg !119
  %455 = fadd float %447, %451, !dbg !119
  %456 = getelementptr i16, ptr addrspace(1) %9, i64 %398, !dbg !120
  %457 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %452) #3, !dbg !121
  %458 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %453) #3, !dbg !121
  %459 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %454) #3, !dbg !121
  %460 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %455) #3, !dbg !121
  %461 = insertelement <2 x i16> undef, i16 %457, i64 0, !dbg !121
  %462 = insertelement <2 x i16> %461, i16 %458, i64 1, !dbg !121
  %463 = bitcast <2 x i16> %462 to i32, !dbg !121
  %464 = insertelement <2 x i16> undef, i16 %459, i64 0, !dbg !121
  %465 = insertelement <2 x i16> %464, i16 %460, i64 1, !dbg !121
  %466 = bitcast <2 x i16> %465 to i32, !dbg !121
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %463, i32 %466, ptr addrspace(1) %456, i1 %396) #3, !dbg !121
  %467 = add nuw nsw i32 %394, 1024, !dbg !103
  %468 = icmp ult i32 %394, 1280, !dbg !103
  br i1 %468, label %393, label %469, !dbg !103

469:                                              ; preds = %393
  ret void, !dbg !122
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "chusqupbcfbh7abdsrjb732wtjkkcgqytg25zwh45ebtlerrb6w2.py", directory: "/tmp/torchinductor_zeus/hu")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 26, column: 31, scope: !5)
!11 = !DILocation(line: 26, column: 36, scope: !5)
!12 = !DILocation(line: 32, column: 45, scope: !5)
!13 = !DILocation(line: 45, column: 24, scope: !5)
!14 = !DILocation(line: 28, column: 36, scope: !5)
!15 = !DILocation(line: 29, column: 27, scope: !5)
!16 = !DILocation(line: 30, column: 25, scope: !5)
!17 = !DILocation(line: 32, column: 40, scope: !5)
!18 = !DILocation(line: 32, column: 34, scope: !5)
!19 = !DILocation(line: 32, column: 51, scope: !5)
!20 = !DILocation(line: 32, column: 102, scope: !5)
!21 = !DILocation(line: 33, column: 34, scope: !5)
!22 = !DILocation(line: 33, column: 51, scope: !5)
!23 = !DILocation(line: 33, column: 102, scope: !5)
!24 = !DILocation(line: 34, column: 34, scope: !5)
!25 = !DILocation(line: 34, column: 39, scope: !5)
!26 = !DILocation(line: 35, column: 34, scope: !5)
!27 = !DILocation(line: 35, column: 51, scope: !5)
!28 = !DILocation(line: 35, column: 102, scope: !5)
!29 = !DILocation(line: 36, column: 35, scope: !5)
!30 = !DILocation(line: 36, column: 40, scope: !5)
!31 = !DILocation(line: 37, column: 35, scope: !5)
!32 = !DILocation(line: 37, column: 52, scope: !5)
!33 = !DILocation(line: 40, column: 22, scope: !5)
!34 = !DILocation(line: 42, column: 22, scope: !5)
!35 = !DILocation(line: 43, column: 22, scope: !5)
!36 = !DILocation(line: 46, column: 24, scope: !5)
!37 = !DILocation(line: 47, column: 24, scope: !5)
!38 = !DILocation(line: 50, column: 24, scope: !5)
!39 = !DILocation(line: 51, column: 23, scope: !5)
!40 = !DILocation(line: 54, column: 40, scope: !5)
!41 = !DILocation(line: 233, column: 15, scope: !42, inlinedAt: !45)
!42 = distinct !DILexicalBlockFile(scope: !44, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!44 = distinct !DILexicalBlockFile(scope: !5, file: !43, discriminator: 0)
!45 = !DILocation(line: 243, column: 36, scope: !42, inlinedAt: !46)
!46 = !DILocation(line: 55, column: 27, scope: !42)
!47 = !DILocation(line: 243, column: 36, scope: !44, inlinedAt: !48)
!48 = !DILocation(line: 55, column: 27, scope: !44)
!49 = !DILocation(line: 56, column: 31, scope: !5)
!50 = !DILocation(line: 56, column: 36, scope: !5)
!51 = !DILocation(line: 70, column: 24, scope: !5)
!52 = !DILocation(line: 71, column: 24, scope: !5)
!53 = !DILocation(line: 72, column: 24, scope: !5)
!54 = !DILocation(line: 73, column: 24, scope: !5)
!55 = !DILocation(line: 75, column: 24, scope: !5)
!56 = !DILocation(line: 84, column: 24, scope: !5)
!57 = !DILocation(line: 90, column: 24, scope: !5)
!58 = !DILocation(line: 58, column: 36, scope: !5)
!59 = !DILocation(line: 59, column: 27, scope: !5)
!60 = !DILocation(line: 60, column: 25, scope: !5)
!61 = !DILocation(line: 62, column: 41, scope: !5)
!62 = !DILocation(line: 62, column: 35, scope: !5)
!63 = !DILocation(line: 62, column: 52, scope: !5)
!64 = !DILocation(line: 62, column: 103, scope: !5)
!65 = !DILocation(line: 63, column: 35, scope: !5)
!66 = !DILocation(line: 63, column: 40, scope: !5)
!67 = !DILocation(line: 64, column: 35, scope: !5)
!68 = !DILocation(line: 64, column: 52, scope: !5)
!69 = !DILocation(line: 65, column: 39, scope: !5)
!70 = !DILocation(line: 65, column: 56, scope: !5)
!71 = !DILocation(line: 66, column: 35, scope: !5)
!72 = !DILocation(line: 66, column: 52, scope: !5)
!73 = !DILocation(line: 66, column: 104, scope: !5)
!74 = !DILocation(line: 67, column: 35, scope: !5)
!75 = !DILocation(line: 67, column: 52, scope: !5)
!76 = !DILocation(line: 67, column: 104, scope: !5)
!77 = !DILocation(line: 68, column: 35, scope: !5)
!78 = !DILocation(line: 68, column: 40, scope: !5)
!79 = !DILocation(line: 77, column: 24, scope: !5)
!80 = !DILocation(line: 79, column: 24, scope: !5)
!81 = !DILocation(line: 80, column: 24, scope: !5)
!82 = !DILocation(line: 83, column: 24, scope: !5)
!83 = !DILocation(line: 87, column: 24, scope: !5)
!84 = !DILocation(line: 88, column: 24, scope: !5)
!85 = !DILocation(line: 89, column: 24, scope: !5)
!86 = !DILocation(line: 91, column: 24, scope: !5)
!87 = !DILocation(line: 92, column: 24, scope: !5)
!88 = !DILocation(line: 93, column: 24, scope: !5)
!89 = !DILocation(line: 94, column: 24, scope: !5)
!90 = !DILocation(line: 95, column: 24, scope: !5)
!91 = !DILocation(line: 98, column: 40, scope: !5)
!92 = !DILocation(line: 99, column: 56, scope: !5)
!93 = !DILocation(line: 243, column: 36, scope: !44, inlinedAt: !94)
!94 = !DILocation(line: 100, column: 27, scope: !44)
!95 = !DILocation(line: 233, column: 15, scope: !42, inlinedAt: !96)
!96 = !DILocation(line: 243, column: 36, scope: !42, inlinedAt: !97)
!97 = !DILocation(line: 100, column: 27, scope: !42)
!98 = !DILocation(line: 113, column: 24, scope: !5)
!99 = !DILocation(line: 114, column: 24, scope: !5)
!100 = !DILocation(line: 115, column: 24, scope: !5)
!101 = !DILocation(line: 116, column: 24, scope: !5)
!102 = !DILocation(line: 118, column: 24, scope: !5)
!103 = !DILocation(line: 101, column: 36, scope: !5)
!104 = !DILocation(line: 102, column: 27, scope: !5)
!105 = !DILocation(line: 103, column: 25, scope: !5)
!106 = !DILocation(line: 105, column: 45, scope: !5)
!107 = !DILocation(line: 105, column: 39, scope: !5)
!108 = !DILocation(line: 105, column: 56, scope: !5)
!109 = !DILocation(line: 106, column: 35, scope: !5)
!110 = !DILocation(line: 106, column: 40, scope: !5)
!111 = !DILocation(line: 107, column: 35, scope: !5)
!112 = !DILocation(line: 107, column: 52, scope: !5)
!113 = !DILocation(line: 107, column: 104, scope: !5)
!114 = !DILocation(line: 109, column: 24, scope: !5)
!115 = !DILocation(line: 110, column: 24, scope: !5)
!116 = !DILocation(line: 111, column: 24, scope: !5)
!117 = !DILocation(line: 120, column: 24, scope: !5)
!118 = !DILocation(line: 121, column: 24, scope: !5)
!119 = !DILocation(line: 122, column: 24, scope: !5)
!120 = !DILocation(line: 124, column: 29, scope: !5)
!121 = !DILocation(line: 124, column: 53, scope: !5)
!122 = !DILocation(line: 101, column: 4, scope: !5)
