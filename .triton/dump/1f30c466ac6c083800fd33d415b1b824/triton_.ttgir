#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7de8de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x2048xi32, #blocked>
    %c0_i32 = arith.constant 0 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %c512_i32 = arith.constant 512 : i32
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked>
    %cst_2 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c512_i32 : i32
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = arith.muli %0, %c2304_i32 : i32
    %5 = tt.splat %4 : (i32) -> tensor<1x2048xi32, #blocked>
    %6 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %7 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked>
    %8 = scf.for %arg9 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg10 = %cst_3) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %28 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked>
      %29 = arith.addi %28, %3 : tensor<1x2048xi32, #blocked>
      %30 = arith.cmpi slt, %29, %cst : tensor<1x2048xi32, #blocked>
      %31 = arith.addi %29, %5 : tensor<1x2048xi32, #blocked>
      %32 = tt.addptr %6, %31 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %33 = arith.andi %30, %7 : tensor<1x2048xi1, #blocked>
      %34 = tt.load %32, %33, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %35 = arith.extf %34 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %36 = arith.mulf %35, %35 : tensor<1x2048xf32, #blocked>
      %37 = arith.addf %arg10, %36 : tensor<1x2048xf32, #blocked>
      %38 = arith.select %33, %37, %arg10 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %38 : tensor<1x2048xf32, #blocked>
    }
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32, %arg10: f32):
      %28 = arith.addf %arg9, %arg10 : f32
      tt.reduce.return %28 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %10 = triton_gpu.convert_layout %9 : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %11 = tt.expand_dims %10 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<1x1xf32, #blocked1>
    %12 = tt.expand_dims %9 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %13 = tt.addptr %arg4, %0 : !tt.ptr<f32, 1>, i32
    %14 = tt.splat %13 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked1>
    %15 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked1>
    tt.store %14, %11, %15 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32, #blocked1>
    %16 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %17 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %18 = arith.divf %12, %cst_2 : tensor<1x1xf32, #blocked>
    %19 = arith.addf %18, %cst_1 : tensor<1x1xf32, #blocked>
    %20 = scf.for %arg9 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg10 = %cst_3) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %28 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked>
      %29 = arith.addi %28, %3 : tensor<1x2048xi32, #blocked>
      %30 = arith.cmpi slt, %29, %cst : tensor<1x2048xi32, #blocked>
      %31 = arith.addi %29, %5 : tensor<1x2048xi32, #blocked>
      %32 = tt.addptr %6, %31 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %33 = arith.andi %30, %7 : tensor<1x2048xi1, #blocked>
      %34 = tt.load %32, %33, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %35 = arith.extf %34 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %36 = tt.addptr %16, %29 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %37 = tt.load %36, %30, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %38 = tt.addptr %17, %31 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %39 = tt.load %38, %33, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %40 = tt.extern_elementwise %19 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %41 = tt.broadcast %40 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %42 = arith.mulf %35, %41 : tensor<1x2048xf32, #blocked>
      %43 = arith.addf %37, %cst_0 : tensor<1x2048xf32, #blocked>
      %44 = arith.mulf %42, %43 : tensor<1x2048xf32, #blocked>
      %45 = arith.addf %44, %39 : tensor<1x2048xf32, #blocked>
      %46 = arith.mulf %45, %45 : tensor<1x2048xf32, #blocked>
      %47 = arith.addf %arg10, %46 : tensor<1x2048xf32, #blocked>
      %48 = arith.select %33, %47, %arg10 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %48 : tensor<1x2048xf32, #blocked>
    }
    %21 = "tt.reduce"(%20) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32, %arg10: f32):
      %28 = arith.addf %arg9, %arg10 : f32
      tt.reduce.return %28 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %22 = tt.expand_dims %21 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %23 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %24 = arith.divf %22, %cst_2 : tensor<1x1xf32, #blocked>
    %25 = arith.addf %24, %cst_1 : tensor<1x1xf32, #blocked>
    %26 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %27 = tt.splat %arg6 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg9 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %28 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked>
      %29 = arith.addi %28, %3 : tensor<1x2048xi32, #blocked>
      %30 = arith.cmpi slt, %29, %cst : tensor<1x2048xi32, #blocked>
      %31 = arith.addi %29, %5 : tensor<1x2048xi32, #blocked>
      %32 = tt.addptr %6, %31 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %33 = arith.andi %30, %7 : tensor<1x2048xi1, #blocked>
      %34 = tt.load %32, %33, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %35 = arith.extf %34 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %36 = tt.addptr %16, %29 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %37 = tt.load %36, %30, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %38 = tt.addptr %17, %31 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %39 = tt.load %38, %33, %cst_3 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %40 = tt.addptr %23, %29 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %41 = tt.load %40, %30, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %42 = tt.extern_elementwise %19 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %43 = tt.broadcast %42 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %44 = arith.mulf %35, %43 : tensor<1x2048xf32, #blocked>
      %45 = arith.addf %37, %cst_0 : tensor<1x2048xf32, #blocked>
      %46 = arith.mulf %44, %45 : tensor<1x2048xf32, #blocked>
      %47 = arith.addf %46, %39 : tensor<1x2048xf32, #blocked>
      %48 = tt.extern_elementwise %25 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %49 = tt.broadcast %48 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %50 = arith.mulf %47, %49 : tensor<1x2048xf32, #blocked>
      %51 = arith.addf %41, %cst_0 : tensor<1x2048xf32, #blocked>
      %52 = arith.mulf %50, %51 : tensor<1x2048xf32, #blocked>
      %53 = tt.addptr %26, %31 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %54 = arith.truncf %52 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
      tt.store %53, %54, %33 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
      %55 = tt.addptr %27, %31 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      tt.store %55, %54, %33 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    }
    tt.return
  }
}
