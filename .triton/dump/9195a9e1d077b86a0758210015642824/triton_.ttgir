#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7de8de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x2048xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<1x2048xi32, #blocked1>
    %cst_1 = arith.constant dense<-1> : tensor<1x1xi64, #blocked>
    %cst_2 = arith.constant dense<2304> : tensor<1x1xi64, #blocked1>
    %cst_3 = arith.constant dense<0> : tensor<1x1xi64, #blocked1>
    %cst_4 = arith.constant dense<288256> : tensor<1x1xi64, #blocked1>
    %c0_i32 = arith.constant 0 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %c512_i32 = arith.constant 512 : i32
    %cst_5 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_6 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32, #blocked>
    %cst_7 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32, #blocked>
    %cst_8 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c512_i32 : i32
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %5 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x2048xi32, #blocked1>
    %6 = arith.muli %0, %c2304_i32 : i32
    %7 = tt.splat %6 : (i32) -> tensor<1x2048xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %9 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked>
    %10 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %11 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %12 = scf.for %arg9 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg10 = %cst_9) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %42 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked>
      %43 = arith.addi %42, %4 : tensor<1x2048xi32, #blocked>
      %44 = arith.cmpi slt, %43, %cst : tensor<1x2048xi32, #blocked>
      %45 = arith.addi %43, %7 : tensor<1x2048xi32, #blocked>
      %46 = tt.addptr %8, %45 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %47 = arith.andi %44, %9 : tensor<1x2048xi1, #blocked>
      %48 = tt.load %46, %47, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %49 = arith.extf %48 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %50 = tt.addptr %10, %43 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %51 = tt.load %50, %44, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %52 = tt.addptr %11, %45 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %53 = tt.load %52, %47, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %54 = arith.addf %51, %cst_8 : tensor<1x2048xf32, #blocked>
      %55 = arith.mulf %49, %54 : tensor<1x2048xf32, #blocked>
      %56 = arith.mulf %53, %cst_7 : tensor<1x2048xf32, #blocked>
      %57 = arith.mulf %55, %56 : tensor<1x2048xf32, #blocked>
      %58 = arith.addf %arg10, %57 : tensor<1x2048xf32, #blocked>
      %59 = arith.select %47, %58, %arg10 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %59 : tensor<1x2048xf32, #blocked>
    }
    %13 = "tt.reduce"(%12) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32, %arg10: f32):
      %42 = arith.addf %arg9, %arg10 : f32
      tt.reduce.return %42 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %14 = tt.expand_dims %13 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %15 = tt.addptr %arg3, %0 : !tt.ptr<i64, 1>, i32
    %16 = tt.splat %15 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked>
    %17 = tt.splat %15 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked1>
    %18 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked>
    %19 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked1>
    %20 = tt.load %16, %18 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked>
    %21 = tt.load %17, %19 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked1>
    %22 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %23 = tt.splat %22 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %24 = tt.load %23, %18 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked>
    %25 = tt.splat %arg4 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %26 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked1>
    %27 = arith.addi %21, %cst_4 : tensor<1x1xi64, #blocked1>
    %28 = arith.cmpi slt, %21, %cst_3 : tensor<1x1xi64, #blocked1>
    %29 = arith.select %28, %27, %21 : tensor<1x1xi1, #blocked1>, tensor<1x1xi64, #blocked1>
    %30 = arith.cmpi eq, %20, %cst_1 : tensor<1x1xi64, #blocked>
    %31 = tt.broadcast %24 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %32 = arith.mulf %14, %cst_6 : tensor<1x1xf32, #blocked>
    %33 = arith.mulf %24, %24 : tensor<1x1xf32, #blocked>
    %34 = arith.mulf %33, %24 : tensor<1x1xf32, #blocked>
    %35 = arith.mulf %32, %34 : tensor<1x1xf32, #blocked>
    %36 = arith.divf %35, %cst_5 : tensor<1x1xf32, #blocked>
    %37 = tt.broadcast %36 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %38 = tt.broadcast %30 : (tensor<1x1xi1, #blocked>) -> tensor<1x2048xi1, #blocked>
    %39 = arith.muli %29, %cst_2 : tensor<1x1xi64, #blocked1>
    %40 = tt.broadcast %39 : (tensor<1x1xi64, #blocked1>) -> tensor<1x2048xi64, #blocked1>
    %41 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>
    scf.for %arg9 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %42 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked>
      %43 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked1>
      %44 = arith.addi %42, %4 : tensor<1x2048xi32, #blocked>
      %45 = arith.addi %43, %5 : tensor<1x2048xi32, #blocked1>
      %46 = arith.cmpi slt, %44, %cst : tensor<1x2048xi32, #blocked>
      %47 = arith.cmpi slt, %45, %cst_0 : tensor<1x2048xi32, #blocked1>
      %48 = arith.addi %44, %7 : tensor<1x2048xi32, #blocked>
      %49 = tt.addptr %25, %48 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %50 = arith.andi %46, %9 : tensor<1x2048xi1, #blocked>
      %51 = arith.andi %47, %26 : tensor<1x2048xi1, #blocked1>
      %52 = tt.load %49, %50, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %53 = tt.addptr %8, %48 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %54 = tt.load %53, %50, %cst_10 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %55 = arith.extf %54 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %56 = tt.addptr %10, %44 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %57 = tt.load %56, %46, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %58 = tt.addptr %11, %48 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %59 = tt.load %58, %50, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %60 = arith.addf %57, %cst_8 : tensor<1x2048xf32, #blocked>
      %61 = arith.mulf %55, %60 : tensor<1x2048xf32, #blocked>
      %62 = arith.mulf %61, %31 : tensor<1x2048xf32, #blocked>
      %63 = arith.addf %52, %62 : tensor<1x2048xf32, #blocked>
      %64 = arith.mulf %59, %cst_7 : tensor<1x2048xf32, #blocked>
      %65 = arith.mulf %37, %64 : tensor<1x2048xf32, #blocked>
      %66 = arith.addf %63, %65 : tensor<1x2048xf32, #blocked>
      %67 = arith.addf %66, %65 : tensor<1x2048xf32, #blocked>
      %68 = arith.mulf %67, %cst_7 : tensor<1x2048xf32, #blocked>
      %69 = arith.select %38, %cst_9, %68 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %70 = arith.extsi %45 : tensor<1x2048xi32, #blocked1> to tensor<1x2048xi64, #blocked1>
      %71 = arith.addi %70, %40 : tensor<1x2048xi64, #blocked1>
      %72 = tt.addptr %41, %71 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xi64, #blocked1>
      %73 = triton_gpu.convert_layout %69 : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked1>
      %74 = "tt.atomic_rmw"(%72, %73, %51) <{atomic_rmw_op = 5 : i32, scope = 1 : i32, sem = 4 : i32}> : (tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xf32, #blocked1>, tensor<1x2048xi1, #blocked1>) -> tensor<1x2048xf32, #blocked1>
    }
    tt.return
  }
}
