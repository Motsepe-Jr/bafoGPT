; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 5, !dbg !10
  %urem = and i32 %7, 255, !dbg !10
  %9 = shl nuw nsw i32 %urem, 3, !dbg !10
  %10 = or i32 %9, 4, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %12 = mul i32 %11, 3584, !dbg !12
  %13 = add i32 %12, %10
  %14 = add i32 %9, %12, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !14
  %17 = sext i32 %13 to i64, !dbg !14
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !14
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !15
  %29 = or i32 %9, 2048, !dbg !16
  %30 = icmp ult i32 %29, 3584, !dbg !17
  %31 = add i32 %29, %12, !dbg !13
  %32 = add i32 %13, 2048, !dbg !13
  %33 = sext i32 %31 to i64, !dbg !14
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !14
  %35 = sext i32 %32 to i64, !dbg !14
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !14
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #6, !dbg !15
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !15
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !15
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !15
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #6, !dbg !15
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !15
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !15
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !15
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !15
  %47 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !15
  %48 = insertelement <2 x i32> %47, i32 %21, i64 1, !dbg !15
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !15
  %50 = fmul <2 x float> %49, %49, !dbg !18
  %51 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !15
  %52 = insertelement <2 x i32> %51, i32 %39, i64 1, !dbg !15
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !15
  %54 = fmul <2 x float> %53, %53, !dbg !18
  %55 = insertelement <2 x i1> poison, i1 %30, i64 0, !dbg !19
  %56 = shufflevector <2 x i1> %55, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !19
  %57 = select <2 x i1> %56, <2 x float> %54, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %58 = fadd <2 x float> %50, %57, !dbg !19
  %59 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !15
  %60 = insertelement <2 x i32> %59, i32 %22, i64 1, !dbg !15
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !15
  %62 = fmul <2 x float> %61, %61, !dbg !18
  %63 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !15
  %64 = insertelement <2 x i32> %63, i32 %40, i64 1, !dbg !15
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !15
  %66 = fmul <2 x float> %65, %65, !dbg !18
  %67 = select <2 x i1> %56, <2 x float> %66, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %68 = fadd <2 x float> %62, %67, !dbg !19
  %69 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !15
  %70 = insertelement <2 x i32> %69, i32 %25, i64 1, !dbg !15
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !15
  %72 = fmul <2 x float> %71, %71, !dbg !18
  %73 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !15
  %74 = insertelement <2 x i32> %73, i32 %43, i64 1, !dbg !15
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !15
  %76 = fmul <2 x float> %75, %75, !dbg !18
  %77 = select <2 x i1> %56, <2 x float> %76, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %78 = fadd <2 x float> %72, %77, !dbg !19
  %79 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !15
  %80 = insertelement <2 x i32> %79, i32 %27, i64 1, !dbg !15
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !15
  %82 = fmul <2 x float> %81, %81, !dbg !18
  %83 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !15
  %84 = insertelement <2 x i32> %83, i32 %45, i64 1, !dbg !15
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !15
  %86 = fmul <2 x float> %85, %85, !dbg !18
  %87 = select <2 x i1> %56, <2 x float> %86, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %88 = fadd <2 x float> %82, %87, !dbg !19
  %89 = and i32 %7, 31, !dbg !10
  %90 = and i32 %8, 7, !dbg !10
  %shift = shufflevector <2 x float> %58, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %91 = fadd <2 x float> %58, %shift, !dbg !20
  %shift33 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %92 = fadd <2 x float> %shift33, %91, !dbg !20
  %93 = fadd <2 x float> %68, %92, !dbg !20
  %shift34 = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %94 = fadd <2 x float> %shift34, %93, !dbg !20
  %95 = fadd <2 x float> %78, %94, !dbg !20
  %shift35 = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %96 = fadd <2 x float> %shift35, %95, !dbg !20
  %97 = fadd <2 x float> %88, %96, !dbg !20
  %98 = extractelement <2 x float> %97, i64 0, !dbg !20
  %99 = bitcast float %98 to i32, !dbg !26
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !26
  %101 = bitcast i32 %100 to float, !dbg !26
  %102 = fadd float %98, %101, !dbg !20
  %103 = bitcast float %102 to i32, !dbg !26
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 8, i32 31), !dbg !26
  %105 = bitcast i32 %104 to float, !dbg !26
  %106 = fadd float %102, %105, !dbg !20
  %107 = bitcast float %106 to i32, !dbg !26
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !26
  %109 = bitcast i32 %108 to float, !dbg !26
  %110 = fadd float %106, %109, !dbg !20
  %111 = bitcast float %110 to i32, !dbg !26
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 2, i32 31), !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = fadd float %110, %113, !dbg !20
  %115 = bitcast float %114 to i32, !dbg !26
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !26
  %117 = bitcast i32 %116 to float, !dbg !26
  %118 = fadd float %114, %117, !dbg !20
  %119 = icmp eq i32 %89, 0, !dbg !26
  %120 = zext nneg i32 %90 to i64, !dbg !26
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i64 %120, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, float %118, i1 %119) #6, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %122 = icmp slt i32 %7, 8, !dbg !26
  %123 = sext i32 %7 to i64, !dbg !26
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i64 %123, !dbg !26
  %125 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %124, i1 %122) #6, !dbg !26
  %126 = bitcast float %125 to i32, !dbg !26
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 4, i32 31), !dbg !26
  %128 = bitcast i32 %127 to float, !dbg !26
  %129 = fadd float %125, %128, !dbg !20
  %130 = bitcast float %129 to i32, !dbg !26
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !26
  %132 = bitcast i32 %131 to float, !dbg !26
  %133 = fadd float %129, %132, !dbg !20
  %134 = bitcast float %133 to i32, !dbg !26
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !26
  %136 = bitcast i32 %135 to float, !dbg !26
  %137 = fadd float %133, %136, !dbg !20
  %138 = and i32 %7, 7, !dbg !26
  %139 = icmp eq i32 %138, 0, !dbg !26
  %140 = and i1 %122, %139, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, float %137, i1 %140) #6, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %141 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %142 = insertelement <1 x float> undef, float %141, i64 0, !dbg !28
  store <1 x float> %142, ptr addrspace(3) @global_smem, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %143 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !28
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float 3.584000e+03) #6, !dbg !29
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 3.584000e+03) #6, !dbg !29
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 3.584000e+03) #6, !dbg !29
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 3.584000e+03) #6, !dbg !29
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 3.584000e+03) #6, !dbg !29
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 3.584000e+03) #6, !dbg !29
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 3.584000e+03) #6, !dbg !29
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 3.584000e+03) #6, !dbg !29
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 3.584000e+03) #6, !dbg !29
  %153 = fadd float %144, 0x3EE4F8B580000000, !dbg !30
  %154 = fadd float %145, 0x3EE4F8B580000000, !dbg !30
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %.not.i = icmp eq i32 %155, 0, !dbg !28
  br i1 %.not.i, label %158, label %156, !dbg !28

156:                                              ; preds = %6
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %153), !dbg !28
  br label %__nv_rsqrtf.exit, !dbg !28

158:                                              ; preds = %6
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %153), !dbg !28
  br label %__nv_rsqrtf.exit, !dbg !28

__nv_rsqrtf.exit:                                 ; preds = %156, %158
  %.0.i = phi float [ %157, %156 ], [ %159, %158 ], !dbg !28
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %.not.i2 = icmp eq i32 %160, 0, !dbg !28
  br i1 %.not.i2, label %163, label %161, !dbg !28

161:                                              ; preds = %__nv_rsqrtf.exit
  %162 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !28
  br label %__nv_rsqrtf.exit4, !dbg !28

163:                                              ; preds = %__nv_rsqrtf.exit
  %164 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !28
  br label %__nv_rsqrtf.exit4, !dbg !28

__nv_rsqrtf.exit4:                                ; preds = %161, %163
  %.0.i3 = phi float [ %162, %161 ], [ %164, %163 ], !dbg !28
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %172 = sext i32 %11 to i64, !dbg !32
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !32
  %174 = icmp eq i32 %urem, 0, !dbg !33
  %175 = bitcast float %.0.i to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %173, i1 %174) #6, !dbg !33
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !34
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !34
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !34
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !34
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !34
  %181 = bitcast i32 %177 to float, !dbg !34
  %182 = bitcast i32 %178 to float, !dbg !34
  %183 = bitcast i32 %179 to float, !dbg !34
  %184 = bitcast i32 %180 to float, !dbg !34
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !34
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !34
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !34
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !34
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !34
  %190 = bitcast i32 %186 to float, !dbg !34
  %191 = bitcast i32 %187 to float, !dbg !34
  %192 = bitcast i32 %188 to float, !dbg !34
  %193 = bitcast i32 %189 to float, !dbg !34
  %194 = zext nneg i32 %9 to i64, !dbg !35
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %194, !dbg !35
  %196 = zext nneg i32 %10 to i64, !dbg !35
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %196, !dbg !35
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !36
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !36
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !36
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !36
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !36
  %203 = bitcast i32 %199 to float, !dbg !36
  %204 = bitcast i32 %200 to float, !dbg !36
  %205 = bitcast i32 %201 to float, !dbg !36
  %206 = bitcast i32 %202 to float, !dbg !36
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !36
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !36
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !36
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !36
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !36
  %212 = bitcast i32 %208 to float, !dbg !36
  %213 = bitcast i32 %209 to float, !dbg !36
  %214 = bitcast i32 %210 to float, !dbg !36
  %215 = bitcast i32 %211 to float, !dbg !36
  %216 = fmul float %.0.i3, %181, !dbg !37
  %217 = fmul float %.0.i3, %182, !dbg !37
  %218 = fmul float %.0.i3, %183, !dbg !37
  %219 = fmul float %.0.i3, %184, !dbg !37
  %220 = fmul float %.0.i3, %190, !dbg !37
  %221 = fmul float %.0.i3, %191, !dbg !37
  %222 = fmul float %.0.i3, %192, !dbg !37
  %223 = fmul float %.0.i3, %193, !dbg !37
  %224 = fadd float %203, 1.000000e+00, !dbg !38
  %225 = fadd float %204, 1.000000e+00, !dbg !38
  %226 = fadd float %205, 1.000000e+00, !dbg !38
  %227 = fadd float %206, 1.000000e+00, !dbg !38
  %228 = fadd float %212, 1.000000e+00, !dbg !38
  %229 = fadd float %213, 1.000000e+00, !dbg !38
  %230 = fadd float %214, 1.000000e+00, !dbg !38
  %231 = fadd float %215, 1.000000e+00, !dbg !38
  %232 = fmul float %216, %224, !dbg !39
  %233 = fmul float %217, %225, !dbg !39
  %234 = fmul float %218, %226, !dbg !39
  %235 = fmul float %219, %227, !dbg !39
  %236 = fmul float %220, %228, !dbg !39
  %237 = fmul float %221, %229, !dbg !39
  %238 = fmul float %222, %230, !dbg !39
  %239 = fmul float %223, %231, !dbg !39
  %240 = getelementptr i16, ptr addrspace(1) %3, i64 %15, !dbg !40
  %241 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %232) #6, !dbg !41
  %242 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %233) #6, !dbg !41
  %243 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %234) #6, !dbg !41
  %244 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %235) #6, !dbg !41
  %245 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %236) #6, !dbg !41
  %246 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %237) #6, !dbg !41
  %247 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %238) #6, !dbg !41
  %248 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %239) #6, !dbg !41
  %249 = insertelement <2 x i16> undef, i16 %241, i64 0, !dbg !41
  %250 = insertelement <2 x i16> %249, i16 %242, i64 1, !dbg !41
  %251 = bitcast <2 x i16> %250 to i32, !dbg !41
  %252 = insertelement <2 x i16> undef, i16 %243, i64 0, !dbg !41
  %253 = insertelement <2 x i16> %252, i16 %244, i64 1, !dbg !41
  %254 = bitcast <2 x i16> %253 to i32, !dbg !41
  %255 = insertelement <2 x i16> undef, i16 %245, i64 0, !dbg !41
  %256 = insertelement <2 x i16> %255, i16 %246, i64 1, !dbg !41
  %257 = bitcast <2 x i16> %256 to i32, !dbg !41
  %258 = insertelement <2 x i16> undef, i16 %247, i64 0, !dbg !41
  %259 = insertelement <2 x i16> %258, i16 %248, i64 1, !dbg !41
  %260 = bitcast <2 x i16> %259 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %251, i32 %254, i32 %257, i32 %260, ptr addrspace(1) %240, i1 true) #6, !dbg !41
  %261 = or i32 %9, 2052, !dbg !42
  %262 = add i32 %261, %12, !dbg !43
  %263 = sext i32 %262 to i64, !dbg !44
  %264 = getelementptr float, ptr addrspace(1) %1, i64 %263, !dbg !44
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #6, !dbg !34
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !34
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !34
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !34
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !34
  %270 = bitcast i32 %266 to float, !dbg !34
  %271 = bitcast i32 %267 to float, !dbg !34
  %272 = bitcast i32 %268 to float, !dbg !34
  %273 = bitcast i32 %269 to float, !dbg !34
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %264, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #6, !dbg !34
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !34
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !34
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !34
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !34
  %279 = bitcast i32 %275 to float, !dbg !34
  %280 = bitcast i32 %276 to float, !dbg !34
  %281 = bitcast i32 %277 to float, !dbg !34
  %282 = bitcast i32 %278 to float, !dbg !34
  %283 = zext nneg i32 %29 to i64, !dbg !35
  %284 = getelementptr float, ptr addrspace(1) %2, i64 %283, !dbg !35
  %285 = zext nneg i32 %261 to i64, !dbg !35
  %286 = getelementptr float, ptr addrspace(1) %2, i64 %285, !dbg !35
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %284, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #6, !dbg !36
  %288 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !36
  %289 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !36
  %290 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !36
  %291 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !36
  %292 = bitcast i32 %288 to float, !dbg !36
  %293 = bitcast i32 %289 to float, !dbg !36
  %294 = bitcast i32 %290 to float, !dbg !36
  %295 = bitcast i32 %291 to float, !dbg !36
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %286, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #6, !dbg !36
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !36
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !36
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !36
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !36
  %301 = bitcast i32 %297 to float, !dbg !36
  %302 = bitcast i32 %298 to float, !dbg !36
  %303 = bitcast i32 %299 to float, !dbg !36
  %304 = bitcast i32 %300 to float, !dbg !36
  %305 = fmul float %.0.i3, %270, !dbg !37
  %306 = fmul float %.0.i3, %271, !dbg !37
  %307 = fmul float %.0.i3, %272, !dbg !37
  %308 = fmul float %.0.i3, %273, !dbg !37
  %309 = fmul float %.0.i3, %279, !dbg !37
  %310 = fmul float %.0.i3, %280, !dbg !37
  %311 = fmul float %.0.i3, %281, !dbg !37
  %312 = fmul float %.0.i3, %282, !dbg !37
  %313 = fadd float %292, 1.000000e+00, !dbg !38
  %314 = fadd float %293, 1.000000e+00, !dbg !38
  %315 = fadd float %294, 1.000000e+00, !dbg !38
  %316 = fadd float %295, 1.000000e+00, !dbg !38
  %317 = fadd float %301, 1.000000e+00, !dbg !38
  %318 = fadd float %302, 1.000000e+00, !dbg !38
  %319 = fadd float %303, 1.000000e+00, !dbg !38
  %320 = fadd float %304, 1.000000e+00, !dbg !38
  %321 = fmul float %305, %313, !dbg !39
  %322 = fmul float %306, %314, !dbg !39
  %323 = fmul float %307, %315, !dbg !39
  %324 = fmul float %308, %316, !dbg !39
  %325 = fmul float %309, %317, !dbg !39
  %326 = fmul float %310, %318, !dbg !39
  %327 = fmul float %311, %319, !dbg !39
  %328 = fmul float %312, %320, !dbg !39
  %329 = getelementptr i16, ptr addrspace(1) %3, i64 %33, !dbg !40
  %330 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %321) #6, !dbg !41
  %331 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %322) #6, !dbg !41
  %332 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %323) #6, !dbg !41
  %333 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %324) #6, !dbg !41
  %334 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %325) #6, !dbg !41
  %335 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %326) #6, !dbg !41
  %336 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %327) #6, !dbg !41
  %337 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %328) #6, !dbg !41
  %338 = insertelement <2 x i16> undef, i16 %330, i64 0, !dbg !41
  %339 = insertelement <2 x i16> %338, i16 %331, i64 1, !dbg !41
  %340 = bitcast <2 x i16> %339 to i32, !dbg !41
  %341 = insertelement <2 x i16> undef, i16 %332, i64 0, !dbg !41
  %342 = insertelement <2 x i16> %341, i16 %333, i64 1, !dbg !41
  %343 = bitcast <2 x i16> %342 to i32, !dbg !41
  %344 = insertelement <2 x i16> undef, i16 %334, i64 0, !dbg !41
  %345 = insertelement <2 x i16> %344, i16 %335, i64 1, !dbg !41
  %346 = bitcast <2 x i16> %345 to i32, !dbg !41
  %347 = insertelement <2 x i16> undef, i16 %336, i64 0, !dbg !41
  %348 = insertelement <2 x i16> %347, i16 %337, i64 1, !dbg !41
  %349 = bitcast <2 x i16> %348 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %343, i32 %346, i32 %349, ptr addrspace(1) %329, i1 %30) #6, !dbg !41
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cmvzxzbydlovj43e7psrpyiartwugekibugeat7we2k4kl6hsawn.py", directory: "/tmp/torchinductor_zeus/mv")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 28, column: 27, scope: !7)
!17 = !DILocation(line: 29, column: 25, scope: !7)
!18 = !DILocation(line: 32, column: 22, scope: !7)
!19 = !DILocation(line: 35, column: 38, scope: !7)
!20 = !DILocation(line: 233, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 243, column: 36, scope: !21, inlinedAt: !25)
!25 = !DILocation(line: 36, column: 25, scope: !21)
!26 = !DILocation(line: 243, column: 36, scope: !23, inlinedAt: !27)
!27 = !DILocation(line: 36, column: 25, scope: !23)
!28 = !DILocation(line: 41, column: 25, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 4, scope: !7)
!32 = !DILocation(line: 43, column: 28, scope: !7)
!33 = !DILocation(line: 43, column: 39, scope: !7)
!34 = !DILocation(line: 48, column: 52, scope: !7)
!35 = !DILocation(line: 49, column: 35, scope: !7)
!36 = !DILocation(line: 49, column: 40, scope: !7)
!37 = !DILocation(line: 50, column: 24, scope: !7)
!38 = !DILocation(line: 52, column: 24, scope: !7)
!39 = !DILocation(line: 53, column: 24, scope: !7)
!40 = !DILocation(line: 55, column: 29, scope: !7)
!41 = !DILocation(line: 55, column: 53, scope: !7)
!42 = !DILocation(line: 45, column: 27, scope: !7)
!43 = !DILocation(line: 48, column: 41, scope: !7)
!44 = !DILocation(line: 48, column: 35, scope: !7)
!45 = !DILocation(line: 44, column: 4, scope: !7)
