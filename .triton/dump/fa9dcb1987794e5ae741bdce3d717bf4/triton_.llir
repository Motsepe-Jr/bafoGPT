; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = shl i32 %7, 3, !dbg !8
  %11 = and i32 %10, 8, !dbg !8
  %12 = lshr i32 %7, 6, !dbg !8
  %13 = and i32 %12, 3, !dbg !8
  %14 = or i32 %13, 4, !dbg !8
  %15 = or i32 %13, 8, !dbg !8
  %16 = or i32 %13, 12, !dbg !8
  %17 = shl i32 %7, 2, !dbg !8
  %18 = and i32 %17, 12, !dbg !8
  %19 = and i32 %9, 7, !dbg !9
  %20 = lshr i32 %8, 1, !dbg !9
  %21 = shl nuw nsw i32 %19, 4, !dbg !9
  %22 = or i32 %21, %20, !dbg !9
  %23 = or i32 %22, 128, !dbg !9
  %24 = lshr i32 %8, 2, !dbg !9
  %25 = shl nuw nsw i32 %19, 3, !dbg !9
  %26 = or i32 %25, %24, !dbg !9
  %27 = or i32 %26, 64, !dbg !9
  %28 = and i32 %17, 252, !dbg !9
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %30 = shl i32 %29, 4, !dbg !11
  %31 = or i32 %30, %11, !dbg !12
  %32 = or i32 %30, %13, !dbg !12
  %33 = or i32 %30, %14, !dbg !12
  %34 = or i32 %30, %15, !dbg !12
  %35 = or i32 %30, %16, !dbg !12
  %36 = or i32 %30, %18, !dbg !12
  %37 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %38 = shl i32 %37, 8, !dbg !14
  %39 = or i32 %38, %22, !dbg !15
  %40 = or i32 %38, %23, !dbg !15
  %41 = or i32 %38, %26, !dbg !15
  %42 = or i32 %38, %27, !dbg !15
  %43 = or i32 %41, 128, !dbg !15
  %44 = or i32 %41, 192, !dbg !15
  %45 = or i32 %38, %28, !dbg !15
  %46 = icmp slt i32 %39, 256, !dbg !16
  %47 = icmp slt i32 %40, 256, !dbg !16
  %48 = icmp slt i32 %45, 256, !dbg !16
  %49 = icmp slt i32 %41, 256, !dbg !16
  %50 = icmp slt i32 %42, 256, !dbg !16
  %51 = icmp slt i32 %43, 256, !dbg !16
  %52 = icmp slt i32 %44, 256, !dbg !16
  %.frozen = freeze i32 %31
  %53 = sdiv i32 %.frozen, 512, !dbg !17
  %54 = mul i32 %53, 512
  %.decomposed = sub i32 %.frozen, %54
  %55 = srem i32 %32, 512, !dbg !18
  %56 = srem i32 %33, 512, !dbg !18
  %57 = srem i32 %34, 512, !dbg !18
  %58 = srem i32 %35, 512, !dbg !18
  %.frozen94 = freeze i32 %36
  %59 = sdiv i32 %.frozen94, 512, !dbg !17
  %60 = mul i32 %59, 512
  %.decomposed95 = sub i32 %.frozen94, %60
  %61 = shl i32 %39, 9, !dbg !19
  %62 = shl i32 %40, 9, !dbg !19
  %63 = shl i32 %41, 9, !dbg !19
  %64 = shl i32 %42, 9, !dbg !19
  %65 = shl i32 %43, 9, !dbg !19
  %66 = shl i32 %44, 9, !dbg !19
  %67 = shl i32 %53, 18, !dbg !20
  %68 = add i32 %67, %61, !dbg !21
  %69 = add i32 %68, %.decomposed, !dbg !22
  %70 = add i32 %67, %62, !dbg !21
  %71 = add nsw i32 %70, %.decomposed, !dbg !22
  %72 = sext i32 %69 to i64, !dbg !23
  %73 = getelementptr i16, ptr addrspace(1) %0, i64 %72, !dbg !23
  %74 = sext i32 %71 to i64, !dbg !23
  %75 = getelementptr i16, ptr addrspace(1) %0, i64 %74, !dbg !23
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %46) #2, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !24
  %81 = trunc i32 %77 to i16, !dbg !24
  %extelt.offset = lshr i32 %77, 16, !dbg !24
  %82 = trunc i32 %extelt.offset to i16, !dbg !24
  %83 = trunc i32 %78 to i16, !dbg !24
  %extelt.offset1 = lshr i32 %78, 16, !dbg !24
  %84 = trunc i32 %extelt.offset1 to i16, !dbg !24
  %85 = trunc i32 %79 to i16, !dbg !24
  %extelt.offset2 = lshr i32 %79, 16, !dbg !24
  %86 = trunc i32 %extelt.offset2 to i16, !dbg !24
  %87 = trunc i32 %80 to i16, !dbg !24
  %extelt.offset3 = lshr i32 %80, 16, !dbg !24
  %88 = trunc i32 %extelt.offset3 to i16, !dbg !24
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %47) #2, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !24
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !24
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !24
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !24
  %94 = trunc i32 %90 to i16, !dbg !24
  %extelt.offset4 = lshr i32 %90, 16, !dbg !24
  %95 = trunc i32 %extelt.offset4 to i16, !dbg !24
  %96 = trunc i32 %91 to i16, !dbg !24
  %extelt.offset5 = lshr i32 %91, 16, !dbg !24
  %97 = trunc i32 %extelt.offset5 to i16, !dbg !24
  %98 = trunc i32 %92 to i16, !dbg !24
  %extelt.offset6 = lshr i32 %92, 16, !dbg !24
  %99 = trunc i32 %extelt.offset6 to i16, !dbg !24
  %100 = trunc i32 %93 to i16, !dbg !24
  %extelt.offset7 = lshr i32 %93, 16, !dbg !24
  %101 = trunc i32 %extelt.offset7 to i16, !dbg !24
  %102 = mul nuw nsw i32 %11, 257, !dbg !25
  %103 = add nuw nsw i32 %22, %102, !dbg !25
  %104 = zext nneg i32 %103 to i64, !dbg !25
  %105 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %104, !dbg !25
  %106 = insertelement <1 x i16> undef, i16 %81, i64 0, !dbg !25
  store <1 x i16> %106, ptr addrspace(3) %105, align 2, !dbg !25
  %107 = add nuw nsw i32 %102, 257, !dbg !25
  %108 = add nuw nsw i32 %107, %22, !dbg !25
  %109 = zext nneg i32 %108 to i64, !dbg !25
  %110 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %109, !dbg !25
  %111 = insertelement <1 x i16> undef, i16 %82, i64 0, !dbg !25
  store <1 x i16> %111, ptr addrspace(3) %110, align 2, !dbg !25
  %112 = add nuw nsw i32 %102, 514, !dbg !25
  %113 = add nuw nsw i32 %112, %22, !dbg !25
  %114 = zext nneg i32 %113 to i64, !dbg !25
  %115 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %114, !dbg !25
  %116 = insertelement <1 x i16> undef, i16 %83, i64 0, !dbg !25
  store <1 x i16> %116, ptr addrspace(3) %115, align 2, !dbg !25
  %117 = add nuw nsw i32 %102, 771, !dbg !25
  %118 = add nuw nsw i32 %117, %22, !dbg !25
  %119 = zext nneg i32 %118 to i64, !dbg !25
  %120 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %119, !dbg !25
  %121 = insertelement <1 x i16> undef, i16 %84, i64 0, !dbg !25
  store <1 x i16> %121, ptr addrspace(3) %120, align 2, !dbg !25
  %122 = add nuw nsw i32 %102, 1028, !dbg !25
  %123 = add nuw nsw i32 %122, %22, !dbg !25
  %124 = zext nneg i32 %123 to i64, !dbg !25
  %125 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %124, !dbg !25
  %126 = insertelement <1 x i16> undef, i16 %85, i64 0, !dbg !25
  store <1 x i16> %126, ptr addrspace(3) %125, align 2, !dbg !25
  %127 = add nuw nsw i32 %102, 1285, !dbg !25
  %128 = add nuw nsw i32 %127, %22, !dbg !25
  %129 = zext nneg i32 %128 to i64, !dbg !25
  %130 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %129, !dbg !25
  %131 = insertelement <1 x i16> undef, i16 %86, i64 0, !dbg !25
  store <1 x i16> %131, ptr addrspace(3) %130, align 2, !dbg !25
  %132 = add nuw nsw i32 %102, 1542, !dbg !25
  %133 = add nuw nsw i32 %132, %22, !dbg !25
  %134 = zext nneg i32 %133 to i64, !dbg !25
  %135 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %134, !dbg !25
  %136 = insertelement <1 x i16> undef, i16 %87, i64 0, !dbg !25
  store <1 x i16> %136, ptr addrspace(3) %135, align 2, !dbg !25
  %137 = add nuw nsw i32 %102, 1799, !dbg !25
  %138 = add nuw nsw i32 %137, %22, !dbg !25
  %139 = zext nneg i32 %138 to i64, !dbg !25
  %140 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %139, !dbg !25
  %141 = insertelement <1 x i16> undef, i16 %88, i64 0, !dbg !25
  store <1 x i16> %141, ptr addrspace(3) %140, align 2, !dbg !25
  %142 = add nuw nsw i32 %23, %102, !dbg !25
  %143 = zext nneg i32 %142 to i64, !dbg !25
  %144 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %143, !dbg !25
  %145 = insertelement <1 x i16> undef, i16 %94, i64 0, !dbg !25
  store <1 x i16> %145, ptr addrspace(3) %144, align 2, !dbg !25
  %146 = add nuw nsw i32 %23, %107, !dbg !25
  %147 = zext nneg i32 %146 to i64, !dbg !25
  %148 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %147, !dbg !25
  %149 = insertelement <1 x i16> undef, i16 %95, i64 0, !dbg !25
  store <1 x i16> %149, ptr addrspace(3) %148, align 2, !dbg !25
  %150 = add nuw nsw i32 %23, %112, !dbg !25
  %151 = zext nneg i32 %150 to i64, !dbg !25
  %152 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %151, !dbg !25
  %153 = insertelement <1 x i16> undef, i16 %96, i64 0, !dbg !25
  store <1 x i16> %153, ptr addrspace(3) %152, align 2, !dbg !25
  %154 = add nuw nsw i32 %23, %117, !dbg !25
  %155 = zext nneg i32 %154 to i64, !dbg !25
  %156 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %155, !dbg !25
  %157 = insertelement <1 x i16> undef, i16 %97, i64 0, !dbg !25
  store <1 x i16> %157, ptr addrspace(3) %156, align 2, !dbg !25
  %158 = add nuw nsw i32 %23, %122, !dbg !25
  %159 = zext nneg i32 %158 to i64, !dbg !25
  %160 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %159, !dbg !25
  %161 = insertelement <1 x i16> undef, i16 %98, i64 0, !dbg !25
  store <1 x i16> %161, ptr addrspace(3) %160, align 2, !dbg !25
  %162 = add nuw nsw i32 %23, %127, !dbg !25
  %163 = zext nneg i32 %162 to i64, !dbg !25
  %164 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %163, !dbg !25
  %165 = insertelement <1 x i16> undef, i16 %99, i64 0, !dbg !25
  store <1 x i16> %165, ptr addrspace(3) %164, align 2, !dbg !25
  %166 = add nuw nsw i32 %23, %132, !dbg !25
  %167 = zext nneg i32 %166 to i64, !dbg !25
  %168 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %167, !dbg !25
  %169 = insertelement <1 x i16> undef, i16 %100, i64 0, !dbg !25
  store <1 x i16> %169, ptr addrspace(3) %168, align 2, !dbg !25
  %170 = add nuw nsw i32 %23, %137, !dbg !25
  %171 = zext nneg i32 %170 to i64, !dbg !25
  %172 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %171, !dbg !25
  %173 = insertelement <1 x i16> undef, i16 %101, i64 0, !dbg !25
  store <1 x i16> %173, ptr addrspace(3) %172, align 2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %174 = mul nuw nsw i32 %13, 257, !dbg !25
  %175 = add nuw nsw i32 %174, %28, !dbg !25
  %176 = zext nneg i32 %175 to i64, !dbg !25
  %177 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %176, !dbg !25
  %178 = load i16, ptr addrspace(3) %177, align 2, !dbg !25
  %179 = or i32 %28, 1, !dbg !25
  %180 = add nuw nsw i32 %174, %179, !dbg !25
  %181 = zext nneg i32 %180 to i64, !dbg !25
  %182 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %181, !dbg !25
  %183 = load i16, ptr addrspace(3) %182, align 2, !dbg !25
  %184 = or i32 %28, 2, !dbg !25
  %185 = add nuw nsw i32 %174, %184, !dbg !25
  %186 = zext nneg i32 %185 to i64, !dbg !25
  %187 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %186, !dbg !25
  %188 = load i16, ptr addrspace(3) %187, align 2, !dbg !25
  %189 = or i32 %28, 3, !dbg !25
  %190 = add nuw nsw i32 %174, %189, !dbg !25
  %191 = zext nneg i32 %190 to i64, !dbg !25
  %192 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %191, !dbg !25
  %193 = load i16, ptr addrspace(3) %192, align 2, !dbg !25
  %194 = mul nuw nsw i32 %14, 257, !dbg !25
  %195 = add nuw nsw i32 %194, %28, !dbg !25
  %196 = zext nneg i32 %195 to i64, !dbg !25
  %197 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %196, !dbg !25
  %198 = load i16, ptr addrspace(3) %197, align 2, !dbg !25
  %199 = add nuw nsw i32 %194, %179, !dbg !25
  %200 = zext nneg i32 %199 to i64, !dbg !25
  %201 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %200, !dbg !25
  %202 = load i16, ptr addrspace(3) %201, align 2, !dbg !25
  %203 = add nuw nsw i32 %194, %184, !dbg !25
  %204 = zext nneg i32 %203 to i64, !dbg !25
  %205 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %204, !dbg !25
  %206 = load i16, ptr addrspace(3) %205, align 2, !dbg !25
  %207 = add nuw nsw i32 %194, %189, !dbg !25
  %208 = zext nneg i32 %207 to i64, !dbg !25
  %209 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %208, !dbg !25
  %210 = load i16, ptr addrspace(3) %209, align 2, !dbg !25
  %211 = mul nuw nsw i32 %15, 257, !dbg !25
  %212 = add nuw nsw i32 %211, %28, !dbg !25
  %213 = zext nneg i32 %212 to i64, !dbg !25
  %214 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %213, !dbg !25
  %215 = load i16, ptr addrspace(3) %214, align 2, !dbg !25
  %216 = add nuw nsw i32 %211, %179, !dbg !25
  %217 = zext nneg i32 %216 to i64, !dbg !25
  %218 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %217, !dbg !25
  %219 = load i16, ptr addrspace(3) %218, align 2, !dbg !25
  %220 = add nuw nsw i32 %211, %184, !dbg !25
  %221 = zext nneg i32 %220 to i64, !dbg !25
  %222 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %221, !dbg !25
  %223 = load i16, ptr addrspace(3) %222, align 2, !dbg !25
  %224 = add nuw nsw i32 %211, %189, !dbg !25
  %225 = zext nneg i32 %224 to i64, !dbg !25
  %226 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %225, !dbg !25
  %227 = load i16, ptr addrspace(3) %226, align 2, !dbg !25
  %228 = mul nuw nsw i32 %16, 257, !dbg !25
  %229 = add nuw nsw i32 %228, %28, !dbg !25
  %230 = zext nneg i32 %229 to i64, !dbg !25
  %231 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %230, !dbg !25
  %232 = load i16, ptr addrspace(3) %231, align 2, !dbg !25
  %233 = add nuw nsw i32 %228, %179, !dbg !25
  %234 = zext nneg i32 %233 to i64, !dbg !25
  %235 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %234, !dbg !25
  %236 = load i16, ptr addrspace(3) %235, align 2, !dbg !25
  %237 = add nuw nsw i32 %228, %184, !dbg !25
  %238 = zext nneg i32 %237 to i64, !dbg !25
  %239 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %238, !dbg !25
  %240 = load i16, ptr addrspace(3) %239, align 2, !dbg !25
  %241 = add nuw nsw i32 %228, %189, !dbg !25
  %242 = zext nneg i32 %241 to i64, !dbg !25
  %243 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %242, !dbg !25
  %244 = load i16, ptr addrspace(3) %243, align 2, !dbg !25
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %178) #2, !dbg !25
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %183) #2, !dbg !25
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %188) #2, !dbg !25
  %248 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %193) #2, !dbg !25
  %249 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %198) #2, !dbg !25
  %250 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %202) #2, !dbg !25
  %251 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #2, !dbg !25
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %210) #2, !dbg !25
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %215) #2, !dbg !25
  %254 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %219) #2, !dbg !25
  %255 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %223) #2, !dbg !25
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %227) #2, !dbg !25
  %257 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #2, !dbg !25
  %258 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #2, !dbg !25
  %259 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %240) #2, !dbg !25
  %260 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %244) #2, !dbg !25
  %261 = shl nsw i32 %55, 8, !dbg !26
  %262 = shl nsw i32 %56, 8, !dbg !26
  %263 = shl nsw i32 %57, 8, !dbg !26
  %264 = shl nsw i32 %58, 8, !dbg !26
  %265 = add i32 %261, %45, !dbg !27
  %266 = add i32 %262, %45, !dbg !27
  %267 = add i32 %263, %45, !dbg !27
  %268 = add i32 %264, %45, !dbg !27
  %269 = sext i32 %265 to i64, !dbg !28
  %270 = getelementptr float, ptr addrspace(1) %1, i64 %269, !dbg !28
  %271 = sext i32 %266 to i64, !dbg !28
  %272 = getelementptr float, ptr addrspace(1) %1, i64 %271, !dbg !28
  %273 = sext i32 %267 to i64, !dbg !28
  %274 = getelementptr float, ptr addrspace(1) %1, i64 %273, !dbg !28
  %275 = sext i32 %268 to i64, !dbg !28
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %275, !dbg !28
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %270, i1 %48) #2, !dbg !29
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !29
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !29
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !29
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !29
  %282 = bitcast i32 %278 to float, !dbg !29
  %283 = bitcast i32 %279 to float, !dbg !29
  %284 = bitcast i32 %280 to float, !dbg !29
  %285 = bitcast i32 %281 to float, !dbg !29
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %272, i1 %48) #2, !dbg !29
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !29
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !29
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !29
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !29
  %291 = bitcast i32 %287 to float, !dbg !29
  %292 = bitcast i32 %288 to float, !dbg !29
  %293 = bitcast i32 %289 to float, !dbg !29
  %294 = bitcast i32 %290 to float, !dbg !29
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %274, i1 %48) #2, !dbg !29
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !29
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !29
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !29
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !29
  %300 = bitcast i32 %296 to float, !dbg !29
  %301 = bitcast i32 %297 to float, !dbg !29
  %302 = bitcast i32 %298 to float, !dbg !29
  %303 = bitcast i32 %299 to float, !dbg !29
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %276, i1 %48) #2, !dbg !29
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !29
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !29
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !29
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !29
  %309 = bitcast i32 %305 to float, !dbg !29
  %310 = bitcast i32 %306 to float, !dbg !29
  %311 = bitcast i32 %307 to float, !dbg !29
  %312 = bitcast i32 %308 to float, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %313 = mul nuw nsw i32 %28, 24, !dbg !29
  %314 = or i32 %313, %13, !dbg !29
  %315 = zext nneg i32 %314 to i64, !dbg !29
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i64 %315, !dbg !29
  %317 = insertelement <1 x float> undef, float %282, i64 0, !dbg !29
  store <1 x float> %317, ptr addrspace(3) %316, align 4, !dbg !29
  %318 = mul nuw nsw i32 %179, 24, !dbg !29
  %319 = or i32 %318, %13, !dbg !29
  %320 = zext nneg i32 %319 to i64, !dbg !29
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320, !dbg !29
  %322 = insertelement <1 x float> undef, float %283, i64 0, !dbg !29
  store <1 x float> %322, ptr addrspace(3) %321, align 4, !dbg !29
  %323 = mul nuw nsw i32 %184, 24, !dbg !29
  %324 = or i32 %323, %13, !dbg !29
  %325 = zext nneg i32 %324 to i64, !dbg !29
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i64 %325, !dbg !29
  %327 = insertelement <1 x float> undef, float %284, i64 0, !dbg !29
  store <1 x float> %327, ptr addrspace(3) %326, align 4, !dbg !29
  %328 = mul nuw nsw i32 %189, 24, !dbg !29
  %329 = or i32 %328, %13, !dbg !29
  %330 = zext nneg i32 %329 to i64, !dbg !29
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i64 %330, !dbg !29
  %332 = insertelement <1 x float> undef, float %285, i64 0, !dbg !29
  store <1 x float> %332, ptr addrspace(3) %331, align 4, !dbg !29
  %333 = or i32 %313, %14, !dbg !29
  %334 = zext nneg i32 %333 to i64, !dbg !29
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i64 %334, !dbg !29
  %336 = insertelement <1 x float> undef, float %291, i64 0, !dbg !29
  store <1 x float> %336, ptr addrspace(3) %335, align 4, !dbg !29
  %337 = or i32 %318, %14, !dbg !29
  %338 = zext nneg i32 %337 to i64, !dbg !29
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i64 %338, !dbg !29
  %340 = insertelement <1 x float> undef, float %292, i64 0, !dbg !29
  store <1 x float> %340, ptr addrspace(3) %339, align 4, !dbg !29
  %341 = or i32 %323, %14, !dbg !29
  %342 = zext nneg i32 %341 to i64, !dbg !29
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i64 %342, !dbg !29
  %344 = insertelement <1 x float> undef, float %293, i64 0, !dbg !29
  store <1 x float> %344, ptr addrspace(3) %343, align 4, !dbg !29
  %345 = or i32 %328, %14, !dbg !29
  %346 = zext nneg i32 %345 to i64, !dbg !29
  %347 = getelementptr float, ptr addrspace(3) @global_smem, i64 %346, !dbg !29
  %348 = insertelement <1 x float> undef, float %294, i64 0, !dbg !29
  store <1 x float> %348, ptr addrspace(3) %347, align 4, !dbg !29
  %349 = or i32 %313, %15, !dbg !29
  %350 = zext nneg i32 %349 to i64, !dbg !29
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i64 %350, !dbg !29
  %352 = insertelement <1 x float> undef, float %300, i64 0, !dbg !29
  store <1 x float> %352, ptr addrspace(3) %351, align 4, !dbg !29
  %353 = add nuw nsw i32 %318, %15, !dbg !29
  %354 = zext nneg i32 %353 to i64, !dbg !29
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i64 %354, !dbg !29
  %356 = insertelement <1 x float> undef, float %301, i64 0, !dbg !29
  store <1 x float> %356, ptr addrspace(3) %355, align 4, !dbg !29
  %357 = or i32 %323, %15, !dbg !29
  %358 = zext nneg i32 %357 to i64, !dbg !29
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i64 %358, !dbg !29
  %360 = insertelement <1 x float> undef, float %302, i64 0, !dbg !29
  store <1 x float> %360, ptr addrspace(3) %359, align 4, !dbg !29
  %361 = add nuw nsw i32 %328, %15, !dbg !29
  %362 = zext nneg i32 %361 to i64, !dbg !29
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i64 %362, !dbg !29
  %364 = insertelement <1 x float> undef, float %303, i64 0, !dbg !29
  store <1 x float> %364, ptr addrspace(3) %363, align 4, !dbg !29
  %365 = or i32 %313, %16, !dbg !29
  %366 = zext nneg i32 %365 to i64, !dbg !29
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i64 %366, !dbg !29
  %368 = insertelement <1 x float> undef, float %309, i64 0, !dbg !29
  store <1 x float> %368, ptr addrspace(3) %367, align 4, !dbg !29
  %369 = add nuw nsw i32 %318, %16, !dbg !29
  %370 = zext nneg i32 %369 to i64, !dbg !29
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i64 %370, !dbg !29
  %372 = insertelement <1 x float> undef, float %310, i64 0, !dbg !29
  store <1 x float> %372, ptr addrspace(3) %371, align 4, !dbg !29
  %373 = or i32 %323, %16, !dbg !29
  %374 = zext nneg i32 %373 to i64, !dbg !29
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i64 %374, !dbg !29
  %376 = insertelement <1 x float> undef, float %311, i64 0, !dbg !29
  store <1 x float> %376, ptr addrspace(3) %375, align 4, !dbg !29
  %377 = add nuw nsw i32 %328, %16, !dbg !29
  %378 = zext nneg i32 %377 to i64, !dbg !29
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i64 %378, !dbg !29
  %380 = insertelement <1 x float> undef, float %312, i64 0, !dbg !29
  store <1 x float> %380, ptr addrspace(3) %379, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %381 = mul nuw nsw i32 %22, 24, !dbg !29
  %382 = add nuw nsw i32 %381, %11, !dbg !29
  %383 = zext nneg i32 %382 to i64, !dbg !29
  %384 = getelementptr float, ptr addrspace(3) @global_smem, i64 %383, !dbg !29
  %385 = mul nuw nsw i32 %23, 24, !dbg !29
  %386 = add nuw nsw i32 %385, %11, !dbg !29
  %387 = zext nneg i32 %386 to i64, !dbg !29
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i64 %387, !dbg !29
  %389 = add nsw i32 %.decomposed, 131072, !dbg !30
  %390 = add i32 %68, %389, !dbg !31
  %391 = add i32 %70, %389, !dbg !31
  %392 = sext i32 %390 to i64, !dbg !32
  %393 = getelementptr i16, ptr addrspace(1) %0, i64 %392, !dbg !32
  %394 = sext i32 %391 to i64, !dbg !32
  %395 = getelementptr i16, ptr addrspace(1) %0, i64 %394, !dbg !32
  %396 = icmp sgt i32 %39, 255, !dbg !33
  %397 = icmp sgt i32 %40, 255, !dbg !33
  %398 = icmp sgt i32 %45, 255, !dbg !33
  %399 = fmul float %245, %282, !dbg !34
  %400 = fmul float %246, %283, !dbg !34
  %401 = fmul float %247, %284, !dbg !34
  %402 = fmul float %248, %285, !dbg !34
  %403 = fmul float %249, %291, !dbg !34
  %404 = fmul float %250, %292, !dbg !34
  %405 = fmul float %251, %293, !dbg !34
  %406 = fmul float %252, %294, !dbg !34
  %407 = fmul float %253, %300, !dbg !34
  %408 = fmul float %254, %301, !dbg !34
  %409 = fmul float %255, %302, !dbg !34
  %410 = fmul float %256, %303, !dbg !34
  %411 = fmul float %257, %309, !dbg !34
  %412 = fmul float %258, %310, !dbg !34
  %413 = fmul float %259, %311, !dbg !34
  %414 = fmul float %260, %312, !dbg !34
  %415 = icmp sgt i32 %39, 127, !dbg !35
  %416 = icmp sgt i32 %40, 127, !dbg !35
  %417 = icmp sgt i32 %45, 127, !dbg !35
  %418 = add nsw i32 %.decomposed, -65536, !dbg !36
  %419 = add i32 %68, %418, !dbg !37
  %420 = add i32 %70, %418, !dbg !37
  %421 = sext i32 %419 to i64, !dbg !38
  %422 = getelementptr i16, ptr addrspace(1) %0, i64 %421, !dbg !38
  %423 = sext i32 %420 to i64, !dbg !38
  %424 = getelementptr i16, ptr addrspace(1) %0, i64 %423, !dbg !38
  %425 = and i32 %40, -128, !dbg !39
  %426 = icmp eq i32 %425, 128, !dbg !39
  %427 = and i32 %45, -128, !dbg !39
  %428 = icmp eq i32 %427, 128, !dbg !39
  %429 = add i32 %45, -128, !dbg !40
  %430 = add i32 %429, %261, !dbg !41
  %431 = add i32 %429, %262, !dbg !41
  %432 = add i32 %429, %263, !dbg !41
  %433 = add i32 %429, %264, !dbg !41
  %434 = sext i32 %430 to i64, !dbg !42
  %435 = getelementptr float, ptr addrspace(1) %2, i64 %434, !dbg !42
  %436 = sext i32 %431 to i64, !dbg !42
  %437 = getelementptr float, ptr addrspace(1) %2, i64 %436, !dbg !42
  %438 = sext i32 %432 to i64, !dbg !42
  %439 = getelementptr float, ptr addrspace(1) %2, i64 %438, !dbg !42
  %440 = sext i32 %433 to i64, !dbg !42
  %441 = getelementptr float, ptr addrspace(1) %2, i64 %440, !dbg !42
  %442 = icmp slt i32 %39, 128, !dbg !43
  %443 = icmp slt i32 %40, 128, !dbg !43
  %444 = icmp slt i32 %45, 128, !dbg !43
  %445 = add nsw i32 %.decomposed, 65536, !dbg !44
  %446 = add i32 %68, %445, !dbg !45
  %447 = add i32 %70, %445, !dbg !45
  %448 = sext i32 %446 to i64, !dbg !46
  %449 = getelementptr i16, ptr addrspace(1) %0, i64 %448, !dbg !46
  %450 = sext i32 %447 to i64, !dbg !46
  %451 = getelementptr i16, ptr addrspace(1) %0, i64 %450, !dbg !46
  %452 = add i32 %45, 128, !dbg !47
  %453 = add i32 %452, %261, !dbg !48
  %454 = add i32 %452, %262, !dbg !48
  %455 = add i32 %452, %263, !dbg !48
  %456 = add i32 %452, %264, !dbg !48
  %457 = sext i32 %453 to i64, !dbg !49
  %458 = getelementptr float, ptr addrspace(1) %2, i64 %457, !dbg !49
  %459 = sext i32 %454 to i64, !dbg !49
  %460 = getelementptr float, ptr addrspace(1) %2, i64 %459, !dbg !49
  %461 = sext i32 %455 to i64, !dbg !49
  %462 = getelementptr float, ptr addrspace(1) %2, i64 %461, !dbg !49
  %463 = sext i32 %456 to i64, !dbg !49
  %464 = getelementptr float, ptr addrspace(1) %2, i64 %463, !dbg !49
  %465 = add nsw i32 %.decomposed, 196608, !dbg !50
  %466 = add i32 %68, %465, !dbg !51
  %467 = add i32 %70, %465, !dbg !51
  %468 = sext i32 %466 to i64, !dbg !52
  %469 = getelementptr i16, ptr addrspace(1) %0, i64 %468, !dbg !52
  %470 = sext i32 %467 to i64, !dbg !52
  %471 = getelementptr i16, ptr addrspace(1) %0, i64 %470, !dbg !52
  %472 = load <8 x float>, ptr addrspace(3) %384, align 32, !dbg !29
  %473 = insertelement <8 x i1> poison, i1 %396, i64 0, !dbg !53
  %474 = shufflevector <8 x i1> %473, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %475 = insertelement <8 x i1> poison, i1 %415, i64 0, !dbg !53
  %476 = shufflevector <8 x i1> %475, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %477 = insertelement <8 x i1> poison, i1 %442, i64 0, !dbg !53
  %478 = shufflevector <8 x i1> %477, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %479 = load <8 x float>, ptr addrspace(3) %388, align 32, !dbg !29
  %480 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %393, i1 %46) #2, !dbg !54
  %481 = extractvalue { i32, i32, i32, i32 } %480, 0, !dbg !54
  %482 = extractvalue { i32, i32, i32, i32 } %480, 1, !dbg !54
  %483 = extractvalue { i32, i32, i32, i32 } %480, 2, !dbg !54
  %484 = extractvalue { i32, i32, i32, i32 } %480, 3, !dbg !54
  %485 = trunc i32 %481 to i16, !dbg !54
  %extelt.offset8 = lshr i32 %481, 16, !dbg !54
  %486 = trunc i32 %extelt.offset8 to i16, !dbg !54
  %487 = trunc i32 %482 to i16, !dbg !54
  %extelt.offset9 = lshr i32 %482, 16, !dbg !54
  %488 = trunc i32 %extelt.offset9 to i16, !dbg !54
  %489 = trunc i32 %483 to i16, !dbg !54
  %extelt.offset10 = lshr i32 %483, 16, !dbg !54
  %490 = trunc i32 %extelt.offset10 to i16, !dbg !54
  %491 = trunc i32 %484 to i16, !dbg !54
  %extelt.offset11 = lshr i32 %484, 16, !dbg !54
  %492 = trunc i32 %extelt.offset11 to i16, !dbg !54
  %493 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %395, i1 %47) #2, !dbg !54
  %494 = extractvalue { i32, i32, i32, i32 } %493, 0, !dbg !54
  %495 = extractvalue { i32, i32, i32, i32 } %493, 1, !dbg !54
  %496 = extractvalue { i32, i32, i32, i32 } %493, 2, !dbg !54
  %497 = extractvalue { i32, i32, i32, i32 } %493, 3, !dbg !54
  %498 = trunc i32 %494 to i16, !dbg !54
  %extelt.offset12 = lshr i32 %494, 16, !dbg !54
  %499 = trunc i32 %extelt.offset12 to i16, !dbg !54
  %500 = trunc i32 %495 to i16, !dbg !54
  %extelt.offset13 = lshr i32 %495, 16, !dbg !54
  %501 = trunc i32 %extelt.offset13 to i16, !dbg !54
  %502 = trunc i32 %496 to i16, !dbg !54
  %extelt.offset14 = lshr i32 %496, 16, !dbg !54
  %503 = trunc i32 %extelt.offset14 to i16, !dbg !54
  %504 = trunc i32 %497 to i16, !dbg !54
  %extelt.offset15 = lshr i32 %497, 16, !dbg !54
  %505 = trunc i32 %extelt.offset15 to i16, !dbg !54
  %506 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #2, !dbg !55
  %507 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #2, !dbg !55
  %508 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #2, !dbg !55
  %509 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %488) #2, !dbg !55
  %510 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %489) #2, !dbg !55
  %511 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %490) #2, !dbg !55
  %512 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %491) #2, !dbg !55
  %513 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %492) #2, !dbg !55
  %514 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %498) #2, !dbg !55
  %515 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %499) #2, !dbg !55
  %516 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %500) #2, !dbg !55
  %517 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %501) #2, !dbg !55
  %518 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %502) #2, !dbg !55
  %519 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %503) #2, !dbg !55
  %520 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %504) #2, !dbg !55
  %521 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #2, !dbg !55
  %522 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !56
  %523 = extractvalue { i32, i32, i32, i32 } %522, 0, !dbg !56
  %524 = extractvalue { i32, i32, i32, i32 } %522, 1, !dbg !56
  %525 = extractvalue { i32, i32, i32, i32 } %522, 2, !dbg !56
  %526 = extractvalue { i32, i32, i32, i32 } %522, 3, !dbg !56
  %527 = trunc i32 %523 to i16, !dbg !56
  %extelt.offset16 = lshr i32 %523, 16, !dbg !56
  %528 = trunc i32 %extelt.offset16 to i16, !dbg !56
  %529 = trunc i32 %524 to i16, !dbg !56
  %extelt.offset17 = lshr i32 %524, 16, !dbg !56
  %530 = trunc i32 %extelt.offset17 to i16, !dbg !56
  %531 = trunc i32 %525 to i16, !dbg !56
  %extelt.offset18 = lshr i32 %525, 16, !dbg !56
  %532 = trunc i32 %extelt.offset18 to i16, !dbg !56
  %533 = trunc i32 %526 to i16, !dbg !56
  %extelt.offset19 = lshr i32 %526, 16, !dbg !56
  %534 = trunc i32 %extelt.offset19 to i16, !dbg !56
  %535 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !56
  %536 = extractvalue { i32, i32, i32, i32 } %535, 0, !dbg !56
  %537 = extractvalue { i32, i32, i32, i32 } %535, 1, !dbg !56
  %538 = extractvalue { i32, i32, i32, i32 } %535, 2, !dbg !56
  %539 = extractvalue { i32, i32, i32, i32 } %535, 3, !dbg !56
  %540 = trunc i32 %536 to i16, !dbg !56
  %extelt.offset20 = lshr i32 %536, 16, !dbg !56
  %541 = trunc i32 %extelt.offset20 to i16, !dbg !56
  %542 = trunc i32 %537 to i16, !dbg !56
  %extelt.offset21 = lshr i32 %537, 16, !dbg !56
  %543 = trunc i32 %extelt.offset21 to i16, !dbg !56
  %544 = trunc i32 %538 to i16, !dbg !56
  %extelt.offset22 = lshr i32 %538, 16, !dbg !56
  %545 = trunc i32 %extelt.offset22 to i16, !dbg !56
  %546 = trunc i32 %539 to i16, !dbg !56
  %extelt.offset23 = lshr i32 %539, 16, !dbg !56
  %547 = trunc i32 %extelt.offset23 to i16, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %548 = insertelement <1 x i16> undef, i16 %527, i64 0, !dbg !53
  store <1 x i16> %548, ptr addrspace(3) %105, align 2, !dbg !53
  %549 = insertelement <1 x i16> undef, i16 %528, i64 0, !dbg !53
  store <1 x i16> %549, ptr addrspace(3) %110, align 2, !dbg !53
  %550 = insertelement <1 x i16> undef, i16 %529, i64 0, !dbg !53
  store <1 x i16> %550, ptr addrspace(3) %115, align 2, !dbg !53
  %551 = insertelement <1 x i16> undef, i16 %530, i64 0, !dbg !53
  store <1 x i16> %551, ptr addrspace(3) %120, align 2, !dbg !53
  %552 = insertelement <1 x i16> undef, i16 %531, i64 0, !dbg !53
  store <1 x i16> %552, ptr addrspace(3) %125, align 2, !dbg !53
  %553 = insertelement <1 x i16> undef, i16 %532, i64 0, !dbg !53
  store <1 x i16> %553, ptr addrspace(3) %130, align 2, !dbg !53
  %554 = insertelement <1 x i16> undef, i16 %533, i64 0, !dbg !53
  store <1 x i16> %554, ptr addrspace(3) %135, align 2, !dbg !53
  %555 = insertelement <1 x i16> undef, i16 %534, i64 0, !dbg !53
  store <1 x i16> %555, ptr addrspace(3) %140, align 2, !dbg !53
  %556 = insertelement <1 x i16> undef, i16 %540, i64 0, !dbg !53
  store <1 x i16> %556, ptr addrspace(3) %144, align 2, !dbg !53
  %557 = insertelement <1 x i16> undef, i16 %541, i64 0, !dbg !53
  store <1 x i16> %557, ptr addrspace(3) %148, align 2, !dbg !53
  %558 = insertelement <1 x i16> undef, i16 %542, i64 0, !dbg !53
  store <1 x i16> %558, ptr addrspace(3) %152, align 2, !dbg !53
  %559 = insertelement <1 x i16> undef, i16 %543, i64 0, !dbg !53
  store <1 x i16> %559, ptr addrspace(3) %156, align 2, !dbg !53
  %560 = insertelement <1 x i16> undef, i16 %544, i64 0, !dbg !53
  store <1 x i16> %560, ptr addrspace(3) %160, align 2, !dbg !53
  %561 = insertelement <1 x i16> undef, i16 %545, i64 0, !dbg !53
  store <1 x i16> %561, ptr addrspace(3) %164, align 2, !dbg !53
  %562 = insertelement <1 x i16> undef, i16 %546, i64 0, !dbg !53
  store <1 x i16> %562, ptr addrspace(3) %168, align 2, !dbg !53
  %563 = insertelement <1 x i16> undef, i16 %547, i64 0, !dbg !53
  store <1 x i16> %563, ptr addrspace(3) %172, align 2, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %564 = load i16, ptr addrspace(3) %177, align 2, !dbg !53
  %565 = load i16, ptr addrspace(3) %182, align 2, !dbg !53
  %566 = load i16, ptr addrspace(3) %187, align 2, !dbg !53
  %567 = load i16, ptr addrspace(3) %192, align 2, !dbg !53
  %568 = load i16, ptr addrspace(3) %197, align 2, !dbg !53
  %569 = load i16, ptr addrspace(3) %201, align 2, !dbg !53
  %570 = load i16, ptr addrspace(3) %205, align 2, !dbg !53
  %571 = load i16, ptr addrspace(3) %209, align 2, !dbg !53
  %572 = load i16, ptr addrspace(3) %214, align 2, !dbg !53
  %573 = load i16, ptr addrspace(3) %218, align 2, !dbg !53
  %574 = load i16, ptr addrspace(3) %222, align 2, !dbg !53
  %575 = load i16, ptr addrspace(3) %226, align 2, !dbg !53
  %576 = load i16, ptr addrspace(3) %231, align 2, !dbg !53
  %577 = load i16, ptr addrspace(3) %235, align 2, !dbg !53
  %578 = load i16, ptr addrspace(3) %239, align 2, !dbg !53
  %579 = load i16, ptr addrspace(3) %243, align 2, !dbg !53
  %580 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %564) #2, !dbg !57
  %581 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %565) #2, !dbg !57
  %582 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %566) #2, !dbg !57
  %583 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %567) #2, !dbg !57
  %584 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %568) #2, !dbg !57
  %585 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %569) #2, !dbg !57
  %586 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %570) #2, !dbg !57
  %587 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %571) #2, !dbg !57
  %588 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %572) #2, !dbg !57
  %589 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %573) #2, !dbg !57
  %590 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %574) #2, !dbg !57
  %591 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %575) #2, !dbg !57
  %592 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %576) #2, !dbg !57
  %593 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %577) #2, !dbg !57
  %594 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %578) #2, !dbg !57
  %595 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %579) #2, !dbg !57
  %596 = select i1 %398, float %580, float 0.000000e+00, !dbg !53
  %597 = select i1 %398, float %581, float 0.000000e+00, !dbg !53
  %598 = select i1 %398, float %582, float 0.000000e+00, !dbg !53
  %599 = select i1 %398, float %583, float 0.000000e+00, !dbg !53
  %600 = select i1 %398, float %584, float 0.000000e+00, !dbg !53
  %601 = select i1 %398, float %585, float 0.000000e+00, !dbg !53
  %602 = select i1 %398, float %586, float 0.000000e+00, !dbg !53
  %603 = select i1 %398, float %587, float 0.000000e+00, !dbg !53
  %604 = select i1 %398, float %588, float 0.000000e+00, !dbg !53
  %605 = select i1 %398, float %589, float 0.000000e+00, !dbg !53
  %606 = select i1 %398, float %590, float 0.000000e+00, !dbg !53
  %607 = select i1 %398, float %591, float 0.000000e+00, !dbg !53
  %608 = select i1 %398, float %592, float 0.000000e+00, !dbg !53
  %609 = select i1 %398, float %593, float 0.000000e+00, !dbg !53
  %610 = select i1 %398, float %594, float 0.000000e+00, !dbg !53
  %611 = select i1 %398, float %595, float 0.000000e+00, !dbg !53
  %612 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %422, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !58
  %613 = extractvalue { i32, i32, i32, i32 } %612, 0, !dbg !58
  %614 = extractvalue { i32, i32, i32, i32 } %612, 1, !dbg !58
  %615 = extractvalue { i32, i32, i32, i32 } %612, 2, !dbg !58
  %616 = extractvalue { i32, i32, i32, i32 } %612, 3, !dbg !58
  %617 = trunc i32 %613 to i16, !dbg !58
  %extelt.offset24 = lshr i32 %613, 16, !dbg !58
  %618 = trunc i32 %extelt.offset24 to i16, !dbg !58
  %619 = trunc i32 %614 to i16, !dbg !58
  %extelt.offset25 = lshr i32 %614, 16, !dbg !58
  %620 = trunc i32 %extelt.offset25 to i16, !dbg !58
  %621 = trunc i32 %615 to i16, !dbg !58
  %extelt.offset26 = lshr i32 %615, 16, !dbg !58
  %622 = trunc i32 %extelt.offset26 to i16, !dbg !58
  %623 = trunc i32 %616 to i16, !dbg !58
  %extelt.offset27 = lshr i32 %616, 16, !dbg !58
  %624 = trunc i32 %extelt.offset27 to i16, !dbg !58
  %625 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %424, i1 %426, i32 0, i1 %426, i32 0, i1 %426, i32 0, i1 %426, i32 0, i1 %426) #2, !dbg !58
  %626 = extractvalue { i32, i32, i32, i32 } %625, 0, !dbg !58
  %627 = extractvalue { i32, i32, i32, i32 } %625, 1, !dbg !58
  %628 = extractvalue { i32, i32, i32, i32 } %625, 2, !dbg !58
  %629 = extractvalue { i32, i32, i32, i32 } %625, 3, !dbg !58
  %630 = trunc i32 %626 to i16, !dbg !58
  %extelt.offset28 = lshr i32 %626, 16, !dbg !58
  %631 = trunc i32 %extelt.offset28 to i16, !dbg !58
  %632 = trunc i32 %627 to i16, !dbg !58
  %extelt.offset29 = lshr i32 %627, 16, !dbg !58
  %633 = trunc i32 %extelt.offset29 to i16, !dbg !58
  %634 = trunc i32 %628 to i16, !dbg !58
  %extelt.offset30 = lshr i32 %628, 16, !dbg !58
  %635 = trunc i32 %extelt.offset30 to i16, !dbg !58
  %636 = trunc i32 %629 to i16, !dbg !58
  %extelt.offset31 = lshr i32 %629, 16, !dbg !58
  %637 = trunc i32 %extelt.offset31 to i16, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %638 = insertelement <1 x i16> undef, i16 %617, i64 0, !dbg !59
  store <1 x i16> %638, ptr addrspace(3) %105, align 2, !dbg !59
  %639 = insertelement <1 x i16> undef, i16 %618, i64 0, !dbg !59
  store <1 x i16> %639, ptr addrspace(3) %110, align 2, !dbg !59
  %640 = insertelement <1 x i16> undef, i16 %619, i64 0, !dbg !59
  store <1 x i16> %640, ptr addrspace(3) %115, align 2, !dbg !59
  %641 = insertelement <1 x i16> undef, i16 %620, i64 0, !dbg !59
  store <1 x i16> %641, ptr addrspace(3) %120, align 2, !dbg !59
  %642 = insertelement <1 x i16> undef, i16 %621, i64 0, !dbg !59
  store <1 x i16> %642, ptr addrspace(3) %125, align 2, !dbg !59
  %643 = insertelement <1 x i16> undef, i16 %622, i64 0, !dbg !59
  store <1 x i16> %643, ptr addrspace(3) %130, align 2, !dbg !59
  %644 = insertelement <1 x i16> undef, i16 %623, i64 0, !dbg !59
  store <1 x i16> %644, ptr addrspace(3) %135, align 2, !dbg !59
  %645 = insertelement <1 x i16> undef, i16 %624, i64 0, !dbg !59
  store <1 x i16> %645, ptr addrspace(3) %140, align 2, !dbg !59
  %646 = insertelement <1 x i16> undef, i16 %630, i64 0, !dbg !59
  store <1 x i16> %646, ptr addrspace(3) %144, align 2, !dbg !59
  %647 = insertelement <1 x i16> undef, i16 %631, i64 0, !dbg !59
  store <1 x i16> %647, ptr addrspace(3) %148, align 2, !dbg !59
  %648 = insertelement <1 x i16> undef, i16 %632, i64 0, !dbg !59
  store <1 x i16> %648, ptr addrspace(3) %152, align 2, !dbg !59
  %649 = insertelement <1 x i16> undef, i16 %633, i64 0, !dbg !59
  store <1 x i16> %649, ptr addrspace(3) %156, align 2, !dbg !59
  %650 = insertelement <1 x i16> undef, i16 %634, i64 0, !dbg !59
  store <1 x i16> %650, ptr addrspace(3) %160, align 2, !dbg !59
  %651 = insertelement <1 x i16> undef, i16 %635, i64 0, !dbg !59
  store <1 x i16> %651, ptr addrspace(3) %164, align 2, !dbg !59
  %652 = insertelement <1 x i16> undef, i16 %636, i64 0, !dbg !59
  store <1 x i16> %652, ptr addrspace(3) %168, align 2, !dbg !59
  %653 = insertelement <1 x i16> undef, i16 %637, i64 0, !dbg !59
  store <1 x i16> %653, ptr addrspace(3) %172, align 2, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %654 = load i16, ptr addrspace(3) %177, align 2, !dbg !59
  %655 = load i16, ptr addrspace(3) %182, align 2, !dbg !59
  %656 = load i16, ptr addrspace(3) %187, align 2, !dbg !59
  %657 = load i16, ptr addrspace(3) %192, align 2, !dbg !59
  %658 = load i16, ptr addrspace(3) %197, align 2, !dbg !59
  %659 = load i16, ptr addrspace(3) %201, align 2, !dbg !59
  %660 = load i16, ptr addrspace(3) %205, align 2, !dbg !59
  %661 = load i16, ptr addrspace(3) %209, align 2, !dbg !59
  %662 = load i16, ptr addrspace(3) %214, align 2, !dbg !59
  %663 = load i16, ptr addrspace(3) %218, align 2, !dbg !59
  %664 = load i16, ptr addrspace(3) %222, align 2, !dbg !59
  %665 = load i16, ptr addrspace(3) %226, align 2, !dbg !59
  %666 = load i16, ptr addrspace(3) %231, align 2, !dbg !59
  %667 = load i16, ptr addrspace(3) %235, align 2, !dbg !59
  %668 = load i16, ptr addrspace(3) %239, align 2, !dbg !59
  %669 = load i16, ptr addrspace(3) %243, align 2, !dbg !59
  %670 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %654) #2, !dbg !59
  %671 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %655) #2, !dbg !59
  %672 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %656) #2, !dbg !59
  %673 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %657) #2, !dbg !59
  %674 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %658) #2, !dbg !59
  %675 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %659) #2, !dbg !59
  %676 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %660) #2, !dbg !59
  %677 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %661) #2, !dbg !59
  %678 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %662) #2, !dbg !59
  %679 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %663) #2, !dbg !59
  %680 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %664) #2, !dbg !59
  %681 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %665) #2, !dbg !59
  %682 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %666) #2, !dbg !59
  %683 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %667) #2, !dbg !59
  %684 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %668) #2, !dbg !59
  %685 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %669) #2, !dbg !59
  %686 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %435, i1 %428, i32 0, i1 %428, i32 0, i1 %428, i32 0, i1 %428, i32 0, i1 %428) #2, !dbg !60
  %687 = extractvalue { i32, i32, i32, i32 } %686, 0, !dbg !60
  %688 = extractvalue { i32, i32, i32, i32 } %686, 1, !dbg !60
  %689 = extractvalue { i32, i32, i32, i32 } %686, 2, !dbg !60
  %690 = extractvalue { i32, i32, i32, i32 } %686, 3, !dbg !60
  %691 = bitcast i32 %687 to float, !dbg !60
  %692 = bitcast i32 %688 to float, !dbg !60
  %693 = bitcast i32 %689 to float, !dbg !60
  %694 = bitcast i32 %690 to float, !dbg !60
  %695 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %437, i1 %428, i32 0, i1 %428, i32 0, i1 %428, i32 0, i1 %428, i32 0, i1 %428) #2, !dbg !60
  %696 = extractvalue { i32, i32, i32, i32 } %695, 0, !dbg !60
  %697 = extractvalue { i32, i32, i32, i32 } %695, 1, !dbg !60
  %698 = extractvalue { i32, i32, i32, i32 } %695, 2, !dbg !60
  %699 = extractvalue { i32, i32, i32, i32 } %695, 3, !dbg !60
  %700 = bitcast i32 %696 to float, !dbg !60
  %701 = bitcast i32 %697 to float, !dbg !60
  %702 = bitcast i32 %698 to float, !dbg !60
  %703 = bitcast i32 %699 to float, !dbg !60
  %704 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %439, i1 %428, i32 0, i1 %428, i32 0, i1 %428, i32 0, i1 %428, i32 0, i1 %428) #2, !dbg !60
  %705 = extractvalue { i32, i32, i32, i32 } %704, 0, !dbg !60
  %706 = extractvalue { i32, i32, i32, i32 } %704, 1, !dbg !60
  %707 = extractvalue { i32, i32, i32, i32 } %704, 2, !dbg !60
  %708 = extractvalue { i32, i32, i32, i32 } %704, 3, !dbg !60
  %709 = bitcast i32 %705 to float, !dbg !60
  %710 = bitcast i32 %706 to float, !dbg !60
  %711 = bitcast i32 %707 to float, !dbg !60
  %712 = bitcast i32 %708 to float, !dbg !60
  %713 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %441, i1 %428, i32 0, i1 %428, i32 0, i1 %428, i32 0, i1 %428, i32 0, i1 %428) #2, !dbg !60
  %714 = extractvalue { i32, i32, i32, i32 } %713, 0, !dbg !60
  %715 = extractvalue { i32, i32, i32, i32 } %713, 1, !dbg !60
  %716 = extractvalue { i32, i32, i32, i32 } %713, 2, !dbg !60
  %717 = extractvalue { i32, i32, i32, i32 } %713, 3, !dbg !60
  %718 = bitcast i32 %714 to float, !dbg !60
  %719 = bitcast i32 %715 to float, !dbg !60
  %720 = bitcast i32 %716 to float, !dbg !60
  %721 = bitcast i32 %717 to float, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %722 = insertelement <1 x float> undef, float %691, i64 0, !dbg !60
  store <1 x float> %722, ptr addrspace(3) %316, align 4, !dbg !60
  %723 = insertelement <1 x float> undef, float %692, i64 0, !dbg !60
  store <1 x float> %723, ptr addrspace(3) %321, align 4, !dbg !60
  %724 = insertelement <1 x float> undef, float %693, i64 0, !dbg !60
  store <1 x float> %724, ptr addrspace(3) %326, align 4, !dbg !60
  %725 = insertelement <1 x float> undef, float %694, i64 0, !dbg !60
  store <1 x float> %725, ptr addrspace(3) %331, align 4, !dbg !60
  %726 = insertelement <1 x float> undef, float %700, i64 0, !dbg !60
  store <1 x float> %726, ptr addrspace(3) %335, align 4, !dbg !60
  %727 = insertelement <1 x float> undef, float %701, i64 0, !dbg !60
  store <1 x float> %727, ptr addrspace(3) %339, align 4, !dbg !60
  %728 = insertelement <1 x float> undef, float %702, i64 0, !dbg !60
  store <1 x float> %728, ptr addrspace(3) %343, align 4, !dbg !60
  %729 = insertelement <1 x float> undef, float %703, i64 0, !dbg !60
  store <1 x float> %729, ptr addrspace(3) %347, align 4, !dbg !60
  %730 = insertelement <1 x float> undef, float %709, i64 0, !dbg !60
  store <1 x float> %730, ptr addrspace(3) %351, align 4, !dbg !60
  %731 = insertelement <1 x float> undef, float %710, i64 0, !dbg !60
  store <1 x float> %731, ptr addrspace(3) %355, align 4, !dbg !60
  %732 = insertelement <1 x float> undef, float %711, i64 0, !dbg !60
  store <1 x float> %732, ptr addrspace(3) %359, align 4, !dbg !60
  %733 = insertelement <1 x float> undef, float %712, i64 0, !dbg !60
  store <1 x float> %733, ptr addrspace(3) %363, align 4, !dbg !60
  %734 = insertelement <1 x float> undef, float %718, i64 0, !dbg !60
  store <1 x float> %734, ptr addrspace(3) %367, align 4, !dbg !60
  %735 = insertelement <1 x float> undef, float %719, i64 0, !dbg !60
  store <1 x float> %735, ptr addrspace(3) %371, align 4, !dbg !60
  %736 = insertelement <1 x float> undef, float %720, i64 0, !dbg !60
  store <1 x float> %736, ptr addrspace(3) %375, align 4, !dbg !60
  %737 = insertelement <1 x float> undef, float %721, i64 0, !dbg !60
  store <1 x float> %737, ptr addrspace(3) %379, align 4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %738 = load <8 x float>, ptr addrspace(3) %384, align 32, !dbg !60
  %739 = load <8 x float>, ptr addrspace(3) %388, align 32, !dbg !60
  %740 = fmul float %670, %691, !dbg !61
  %741 = fmul float %671, %692, !dbg !61
  %742 = fmul float %672, %693, !dbg !61
  %743 = fmul float %673, %694, !dbg !61
  %744 = fmul float %674, %700, !dbg !61
  %745 = fmul float %675, %701, !dbg !61
  %746 = fmul float %676, %702, !dbg !61
  %747 = fmul float %677, %703, !dbg !61
  %748 = fmul float %678, %709, !dbg !61
  %749 = fmul float %679, %710, !dbg !61
  %750 = fmul float %680, %711, !dbg !61
  %751 = fmul float %681, %712, !dbg !61
  %752 = fmul float %682, %718, !dbg !61
  %753 = fmul float %683, %719, !dbg !61
  %754 = fmul float %684, %720, !dbg !61
  %755 = fmul float %685, %721, !dbg !61
  %756 = fsub float 0.000000e+00, %740, !dbg !62
  %757 = fsub float 0.000000e+00, %741, !dbg !62
  %758 = fsub float 0.000000e+00, %742, !dbg !62
  %759 = fsub float 0.000000e+00, %743, !dbg !62
  %760 = fsub float 0.000000e+00, %744, !dbg !62
  %761 = fsub float 0.000000e+00, %745, !dbg !62
  %762 = fsub float 0.000000e+00, %746, !dbg !62
  %763 = fsub float 0.000000e+00, %747, !dbg !62
  %764 = fsub float 0.000000e+00, %748, !dbg !62
  %765 = fsub float 0.000000e+00, %749, !dbg !62
  %766 = fsub float 0.000000e+00, %750, !dbg !62
  %767 = fsub float 0.000000e+00, %751, !dbg !62
  %768 = fsub float 0.000000e+00, %752, !dbg !62
  %769 = fsub float 0.000000e+00, %753, !dbg !62
  %770 = fsub float 0.000000e+00, %754, !dbg !62
  %771 = fsub float 0.000000e+00, %755, !dbg !62
  %772 = select i1 %417, float %756, float 0.000000e+00, !dbg !53
  %773 = select i1 %417, float %757, float 0.000000e+00, !dbg !53
  %774 = select i1 %417, float %758, float 0.000000e+00, !dbg !53
  %775 = select i1 %417, float %759, float 0.000000e+00, !dbg !53
  %776 = select i1 %417, float %760, float 0.000000e+00, !dbg !53
  %777 = select i1 %417, float %761, float 0.000000e+00, !dbg !53
  %778 = select i1 %417, float %762, float 0.000000e+00, !dbg !53
  %779 = select i1 %417, float %763, float 0.000000e+00, !dbg !53
  %780 = select i1 %417, float %764, float 0.000000e+00, !dbg !53
  %781 = select i1 %417, float %765, float 0.000000e+00, !dbg !53
  %782 = select i1 %417, float %766, float 0.000000e+00, !dbg !53
  %783 = select i1 %417, float %767, float 0.000000e+00, !dbg !53
  %784 = select i1 %417, float %768, float 0.000000e+00, !dbg !53
  %785 = select i1 %417, float %769, float 0.000000e+00, !dbg !53
  %786 = select i1 %417, float %770, float 0.000000e+00, !dbg !53
  %787 = select i1 %417, float %771, float 0.000000e+00, !dbg !53
  %788 = fadd float %399, %772, !dbg !63
  %789 = fadd float %400, %773, !dbg !63
  %790 = fadd float %401, %774, !dbg !63
  %791 = fadd float %402, %775, !dbg !63
  %792 = fadd float %403, %776, !dbg !63
  %793 = fadd float %404, %777, !dbg !63
  %794 = fadd float %405, %778, !dbg !63
  %795 = fadd float %406, %779, !dbg !63
  %796 = fadd float %407, %780, !dbg !63
  %797 = fadd float %408, %781, !dbg !63
  %798 = fadd float %409, %782, !dbg !63
  %799 = fadd float %410, %783, !dbg !63
  %800 = fadd float %411, %784, !dbg !63
  %801 = fadd float %412, %785, !dbg !63
  %802 = fadd float %413, %786, !dbg !63
  %803 = fadd float %414, %787, !dbg !63
  %804 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %449, i1 %442, i32 0, i1 %442, i32 0, i1 %442, i32 0, i1 %442, i32 0, i1 %442) #2, !dbg !64
  %805 = extractvalue { i32, i32, i32, i32 } %804, 0, !dbg !64
  %806 = extractvalue { i32, i32, i32, i32 } %804, 1, !dbg !64
  %807 = extractvalue { i32, i32, i32, i32 } %804, 2, !dbg !64
  %808 = extractvalue { i32, i32, i32, i32 } %804, 3, !dbg !64
  %809 = trunc i32 %805 to i16, !dbg !64
  %extelt.offset32 = lshr i32 %805, 16, !dbg !64
  %810 = trunc i32 %extelt.offset32 to i16, !dbg !64
  %811 = trunc i32 %806 to i16, !dbg !64
  %extelt.offset33 = lshr i32 %806, 16, !dbg !64
  %812 = trunc i32 %extelt.offset33 to i16, !dbg !64
  %813 = trunc i32 %807 to i16, !dbg !64
  %extelt.offset34 = lshr i32 %807, 16, !dbg !64
  %814 = trunc i32 %extelt.offset34 to i16, !dbg !64
  %815 = trunc i32 %808 to i16, !dbg !64
  %extelt.offset35 = lshr i32 %808, 16, !dbg !64
  %816 = trunc i32 %extelt.offset35 to i16, !dbg !64
  %817 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %451, i1 %443, i32 0, i1 %443, i32 0, i1 %443, i32 0, i1 %443, i32 0, i1 %443) #2, !dbg !64
  %818 = extractvalue { i32, i32, i32, i32 } %817, 0, !dbg !64
  %819 = extractvalue { i32, i32, i32, i32 } %817, 1, !dbg !64
  %820 = extractvalue { i32, i32, i32, i32 } %817, 2, !dbg !64
  %821 = extractvalue { i32, i32, i32, i32 } %817, 3, !dbg !64
  %822 = trunc i32 %818 to i16, !dbg !64
  %extelt.offset36 = lshr i32 %818, 16, !dbg !64
  %823 = trunc i32 %extelt.offset36 to i16, !dbg !64
  %824 = trunc i32 %819 to i16, !dbg !64
  %extelt.offset37 = lshr i32 %819, 16, !dbg !64
  %825 = trunc i32 %extelt.offset37 to i16, !dbg !64
  %826 = trunc i32 %820 to i16, !dbg !64
  %extelt.offset38 = lshr i32 %820, 16, !dbg !64
  %827 = trunc i32 %extelt.offset38 to i16, !dbg !64
  %828 = trunc i32 %821 to i16, !dbg !64
  %extelt.offset39 = lshr i32 %821, 16, !dbg !64
  %829 = trunc i32 %extelt.offset39 to i16, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %830 = insertelement <1 x i16> undef, i16 %809, i64 0, !dbg !65
  store <1 x i16> %830, ptr addrspace(3) %105, align 2, !dbg !65
  %831 = insertelement <1 x i16> undef, i16 %810, i64 0, !dbg !65
  store <1 x i16> %831, ptr addrspace(3) %110, align 2, !dbg !65
  %832 = insertelement <1 x i16> undef, i16 %811, i64 0, !dbg !65
  store <1 x i16> %832, ptr addrspace(3) %115, align 2, !dbg !65
  %833 = insertelement <1 x i16> undef, i16 %812, i64 0, !dbg !65
  store <1 x i16> %833, ptr addrspace(3) %120, align 2, !dbg !65
  %834 = insertelement <1 x i16> undef, i16 %813, i64 0, !dbg !65
  store <1 x i16> %834, ptr addrspace(3) %125, align 2, !dbg !65
  %835 = insertelement <1 x i16> undef, i16 %814, i64 0, !dbg !65
  store <1 x i16> %835, ptr addrspace(3) %130, align 2, !dbg !65
  %836 = insertelement <1 x i16> undef, i16 %815, i64 0, !dbg !65
  store <1 x i16> %836, ptr addrspace(3) %135, align 2, !dbg !65
  %837 = insertelement <1 x i16> undef, i16 %816, i64 0, !dbg !65
  store <1 x i16> %837, ptr addrspace(3) %140, align 2, !dbg !65
  %838 = insertelement <1 x i16> undef, i16 %822, i64 0, !dbg !65
  store <1 x i16> %838, ptr addrspace(3) %144, align 2, !dbg !65
  %839 = insertelement <1 x i16> undef, i16 %823, i64 0, !dbg !65
  store <1 x i16> %839, ptr addrspace(3) %148, align 2, !dbg !65
  %840 = insertelement <1 x i16> undef, i16 %824, i64 0, !dbg !65
  store <1 x i16> %840, ptr addrspace(3) %152, align 2, !dbg !65
  %841 = insertelement <1 x i16> undef, i16 %825, i64 0, !dbg !65
  store <1 x i16> %841, ptr addrspace(3) %156, align 2, !dbg !65
  %842 = insertelement <1 x i16> undef, i16 %826, i64 0, !dbg !65
  store <1 x i16> %842, ptr addrspace(3) %160, align 2, !dbg !65
  %843 = insertelement <1 x i16> undef, i16 %827, i64 0, !dbg !65
  store <1 x i16> %843, ptr addrspace(3) %164, align 2, !dbg !65
  %844 = insertelement <1 x i16> undef, i16 %828, i64 0, !dbg !65
  store <1 x i16> %844, ptr addrspace(3) %168, align 2, !dbg !65
  %845 = insertelement <1 x i16> undef, i16 %829, i64 0, !dbg !65
  store <1 x i16> %845, ptr addrspace(3) %172, align 2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %846 = load i16, ptr addrspace(3) %177, align 2, !dbg !65
  %847 = load i16, ptr addrspace(3) %182, align 2, !dbg !65
  %848 = load i16, ptr addrspace(3) %187, align 2, !dbg !65
  %849 = load i16, ptr addrspace(3) %192, align 2, !dbg !65
  %850 = load i16, ptr addrspace(3) %197, align 2, !dbg !65
  %851 = load i16, ptr addrspace(3) %201, align 2, !dbg !65
  %852 = load i16, ptr addrspace(3) %205, align 2, !dbg !65
  %853 = load i16, ptr addrspace(3) %209, align 2, !dbg !65
  %854 = load i16, ptr addrspace(3) %214, align 2, !dbg !65
  %855 = load i16, ptr addrspace(3) %218, align 2, !dbg !65
  %856 = load i16, ptr addrspace(3) %222, align 2, !dbg !65
  %857 = load i16, ptr addrspace(3) %226, align 2, !dbg !65
  %858 = load i16, ptr addrspace(3) %231, align 2, !dbg !65
  %859 = load i16, ptr addrspace(3) %235, align 2, !dbg !65
  %860 = load i16, ptr addrspace(3) %239, align 2, !dbg !65
  %861 = load i16, ptr addrspace(3) %243, align 2, !dbg !65
  %862 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %846) #2, !dbg !65
  %863 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %847) #2, !dbg !65
  %864 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %848) #2, !dbg !65
  %865 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %849) #2, !dbg !65
  %866 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %850) #2, !dbg !65
  %867 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %851) #2, !dbg !65
  %868 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %852) #2, !dbg !65
  %869 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %853) #2, !dbg !65
  %870 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %854) #2, !dbg !65
  %871 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %855) #2, !dbg !65
  %872 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %856) #2, !dbg !65
  %873 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %857) #2, !dbg !65
  %874 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %858) #2, !dbg !65
  %875 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %859) #2, !dbg !65
  %876 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %860) #2, !dbg !65
  %877 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %861) #2, !dbg !65
  %878 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %458, i1 %444, i32 0, i1 %444, i32 0, i1 %444, i32 0, i1 %444, i32 0, i1 %444) #2, !dbg !66
  %879 = extractvalue { i32, i32, i32, i32 } %878, 0, !dbg !66
  %880 = extractvalue { i32, i32, i32, i32 } %878, 1, !dbg !66
  %881 = extractvalue { i32, i32, i32, i32 } %878, 2, !dbg !66
  %882 = extractvalue { i32, i32, i32, i32 } %878, 3, !dbg !66
  %883 = bitcast i32 %879 to float, !dbg !66
  %884 = bitcast i32 %880 to float, !dbg !66
  %885 = bitcast i32 %881 to float, !dbg !66
  %886 = bitcast i32 %882 to float, !dbg !66
  %887 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %460, i1 %444, i32 0, i1 %444, i32 0, i1 %444, i32 0, i1 %444, i32 0, i1 %444) #2, !dbg !66
  %888 = extractvalue { i32, i32, i32, i32 } %887, 0, !dbg !66
  %889 = extractvalue { i32, i32, i32, i32 } %887, 1, !dbg !66
  %890 = extractvalue { i32, i32, i32, i32 } %887, 2, !dbg !66
  %891 = extractvalue { i32, i32, i32, i32 } %887, 3, !dbg !66
  %892 = bitcast i32 %888 to float, !dbg !66
  %893 = bitcast i32 %889 to float, !dbg !66
  %894 = bitcast i32 %890 to float, !dbg !66
  %895 = bitcast i32 %891 to float, !dbg !66
  %896 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %462, i1 %444, i32 0, i1 %444, i32 0, i1 %444, i32 0, i1 %444, i32 0, i1 %444) #2, !dbg !66
  %897 = extractvalue { i32, i32, i32, i32 } %896, 0, !dbg !66
  %898 = extractvalue { i32, i32, i32, i32 } %896, 1, !dbg !66
  %899 = extractvalue { i32, i32, i32, i32 } %896, 2, !dbg !66
  %900 = extractvalue { i32, i32, i32, i32 } %896, 3, !dbg !66
  %901 = bitcast i32 %897 to float, !dbg !66
  %902 = bitcast i32 %898 to float, !dbg !66
  %903 = bitcast i32 %899 to float, !dbg !66
  %904 = bitcast i32 %900 to float, !dbg !66
  %905 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %464, i1 %444, i32 0, i1 %444, i32 0, i1 %444, i32 0, i1 %444, i32 0, i1 %444) #2, !dbg !66
  %906 = extractvalue { i32, i32, i32, i32 } %905, 0, !dbg !66
  %907 = extractvalue { i32, i32, i32, i32 } %905, 1, !dbg !66
  %908 = extractvalue { i32, i32, i32, i32 } %905, 2, !dbg !66
  %909 = extractvalue { i32, i32, i32, i32 } %905, 3, !dbg !66
  %910 = bitcast i32 %906 to float, !dbg !66
  %911 = bitcast i32 %907 to float, !dbg !66
  %912 = bitcast i32 %908 to float, !dbg !66
  %913 = bitcast i32 %909 to float, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %914 = insertelement <1 x float> undef, float %883, i64 0, !dbg !66
  store <1 x float> %914, ptr addrspace(3) %316, align 4, !dbg !66
  %915 = insertelement <1 x float> undef, float %884, i64 0, !dbg !66
  store <1 x float> %915, ptr addrspace(3) %321, align 4, !dbg !66
  %916 = insertelement <1 x float> undef, float %885, i64 0, !dbg !66
  store <1 x float> %916, ptr addrspace(3) %326, align 4, !dbg !66
  %917 = insertelement <1 x float> undef, float %886, i64 0, !dbg !66
  store <1 x float> %917, ptr addrspace(3) %331, align 4, !dbg !66
  %918 = insertelement <1 x float> undef, float %892, i64 0, !dbg !66
  store <1 x float> %918, ptr addrspace(3) %335, align 4, !dbg !66
  %919 = insertelement <1 x float> undef, float %893, i64 0, !dbg !66
  store <1 x float> %919, ptr addrspace(3) %339, align 4, !dbg !66
  %920 = insertelement <1 x float> undef, float %894, i64 0, !dbg !66
  store <1 x float> %920, ptr addrspace(3) %343, align 4, !dbg !66
  %921 = insertelement <1 x float> undef, float %895, i64 0, !dbg !66
  store <1 x float> %921, ptr addrspace(3) %347, align 4, !dbg !66
  %922 = insertelement <1 x float> undef, float %901, i64 0, !dbg !66
  store <1 x float> %922, ptr addrspace(3) %351, align 4, !dbg !66
  %923 = insertelement <1 x float> undef, float %902, i64 0, !dbg !66
  store <1 x float> %923, ptr addrspace(3) %355, align 4, !dbg !66
  %924 = insertelement <1 x float> undef, float %903, i64 0, !dbg !66
  store <1 x float> %924, ptr addrspace(3) %359, align 4, !dbg !66
  %925 = insertelement <1 x float> undef, float %904, i64 0, !dbg !66
  store <1 x float> %925, ptr addrspace(3) %363, align 4, !dbg !66
  %926 = insertelement <1 x float> undef, float %910, i64 0, !dbg !66
  store <1 x float> %926, ptr addrspace(3) %367, align 4, !dbg !66
  %927 = insertelement <1 x float> undef, float %911, i64 0, !dbg !66
  store <1 x float> %927, ptr addrspace(3) %371, align 4, !dbg !66
  %928 = insertelement <1 x float> undef, float %912, i64 0, !dbg !66
  store <1 x float> %928, ptr addrspace(3) %375, align 4, !dbg !66
  %929 = insertelement <1 x float> undef, float %913, i64 0, !dbg !66
  store <1 x float> %929, ptr addrspace(3) %379, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %930 = load <8 x float>, ptr addrspace(3) %384, align 32, !dbg !66
  %931 = load <8 x float>, ptr addrspace(3) %388, align 32, !dbg !66
  %932 = fmul float %862, %883, !dbg !67
  %933 = fmul float %863, %884, !dbg !67
  %934 = fmul float %864, %885, !dbg !67
  %935 = fmul float %865, %886, !dbg !67
  %936 = fmul float %866, %892, !dbg !67
  %937 = fmul float %867, %893, !dbg !67
  %938 = fmul float %868, %894, !dbg !67
  %939 = fmul float %869, %895, !dbg !67
  %940 = fmul float %870, %901, !dbg !67
  %941 = fmul float %871, %902, !dbg !67
  %942 = fmul float %872, %903, !dbg !67
  %943 = fmul float %873, %904, !dbg !67
  %944 = fmul float %874, %910, !dbg !67
  %945 = fmul float %875, %911, !dbg !67
  %946 = fmul float %876, %912, !dbg !67
  %947 = fmul float %877, %913, !dbg !67
  %948 = select i1 %444, float %932, float 0.000000e+00, !dbg !53
  %949 = select i1 %444, float %933, float 0.000000e+00, !dbg !53
  %950 = select i1 %444, float %934, float 0.000000e+00, !dbg !53
  %951 = select i1 %444, float %935, float 0.000000e+00, !dbg !53
  %952 = select i1 %444, float %936, float 0.000000e+00, !dbg !53
  %953 = select i1 %444, float %937, float 0.000000e+00, !dbg !53
  %954 = select i1 %444, float %938, float 0.000000e+00, !dbg !53
  %955 = select i1 %444, float %939, float 0.000000e+00, !dbg !53
  %956 = select i1 %444, float %940, float 0.000000e+00, !dbg !53
  %957 = select i1 %444, float %941, float 0.000000e+00, !dbg !53
  %958 = select i1 %444, float %942, float 0.000000e+00, !dbg !53
  %959 = select i1 %444, float %943, float 0.000000e+00, !dbg !53
  %960 = select i1 %444, float %944, float 0.000000e+00, !dbg !53
  %961 = select i1 %444, float %945, float 0.000000e+00, !dbg !53
  %962 = select i1 %444, float %946, float 0.000000e+00, !dbg !53
  %963 = select i1 %444, float %947, float 0.000000e+00, !dbg !53
  %964 = fadd float %788, %948, !dbg !68
  %965 = fadd float %789, %949, !dbg !68
  %966 = fadd float %790, %950, !dbg !68
  %967 = fadd float %791, %951, !dbg !68
  %968 = fadd float %792, %952, !dbg !68
  %969 = fadd float %793, %953, !dbg !68
  %970 = fadd float %794, %954, !dbg !68
  %971 = fadd float %795, %955, !dbg !68
  %972 = fadd float %796, %956, !dbg !68
  %973 = fadd float %797, %957, !dbg !68
  %974 = fadd float %798, %958, !dbg !68
  %975 = fadd float %799, %959, !dbg !68
  %976 = fadd float %800, %960, !dbg !68
  %977 = fadd float %801, %961, !dbg !68
  %978 = fadd float %802, %962, !dbg !68
  %979 = fadd float %803, %963, !dbg !68
  %980 = fadd float %596, %964, !dbg !69
  %981 = fadd float %597, %965, !dbg !69
  %982 = fadd float %598, %966, !dbg !69
  %983 = fadd float %599, %967, !dbg !69
  %984 = fadd float %600, %968, !dbg !69
  %985 = fadd float %601, %969, !dbg !69
  %986 = fadd float %602, %970, !dbg !69
  %987 = fadd float %603, %971, !dbg !69
  %988 = fadd float %604, %972, !dbg !69
  %989 = fadd float %605, %973, !dbg !69
  %990 = fadd float %606, %974, !dbg !69
  %991 = fadd float %607, %975, !dbg !69
  %992 = fadd float %608, %976, !dbg !69
  %993 = fadd float %609, %977, !dbg !69
  %994 = fadd float %610, %978, !dbg !69
  %995 = fadd float %611, %979, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %996 = insertelement <1 x float> undef, float %980, i64 0, !dbg !69
  store <1 x float> %996, ptr addrspace(3) %316, align 4, !dbg !69
  %997 = insertelement <1 x float> undef, float %981, i64 0, !dbg !69
  store <1 x float> %997, ptr addrspace(3) %321, align 4, !dbg !69
  %998 = insertelement <1 x float> undef, float %982, i64 0, !dbg !69
  store <1 x float> %998, ptr addrspace(3) %326, align 4, !dbg !69
  %999 = insertelement <1 x float> undef, float %983, i64 0, !dbg !69
  store <1 x float> %999, ptr addrspace(3) %331, align 4, !dbg !69
  %1000 = insertelement <1 x float> undef, float %984, i64 0, !dbg !69
  store <1 x float> %1000, ptr addrspace(3) %335, align 4, !dbg !69
  %1001 = insertelement <1 x float> undef, float %985, i64 0, !dbg !69
  store <1 x float> %1001, ptr addrspace(3) %339, align 4, !dbg !69
  %1002 = insertelement <1 x float> undef, float %986, i64 0, !dbg !69
  store <1 x float> %1002, ptr addrspace(3) %343, align 4, !dbg !69
  %1003 = insertelement <1 x float> undef, float %987, i64 0, !dbg !69
  store <1 x float> %1003, ptr addrspace(3) %347, align 4, !dbg !69
  %1004 = insertelement <1 x float> undef, float %988, i64 0, !dbg !69
  store <1 x float> %1004, ptr addrspace(3) %351, align 4, !dbg !69
  %1005 = insertelement <1 x float> undef, float %989, i64 0, !dbg !69
  store <1 x float> %1005, ptr addrspace(3) %355, align 4, !dbg !69
  %1006 = insertelement <1 x float> undef, float %990, i64 0, !dbg !69
  store <1 x float> %1006, ptr addrspace(3) %359, align 4, !dbg !69
  %1007 = insertelement <1 x float> undef, float %991, i64 0, !dbg !69
  store <1 x float> %1007, ptr addrspace(3) %363, align 4, !dbg !69
  %1008 = insertelement <1 x float> undef, float %992, i64 0, !dbg !69
  store <1 x float> %1008, ptr addrspace(3) %367, align 4, !dbg !69
  %1009 = insertelement <1 x float> undef, float %993, i64 0, !dbg !69
  store <1 x float> %1009, ptr addrspace(3) %371, align 4, !dbg !69
  %1010 = insertelement <1 x float> undef, float %994, i64 0, !dbg !69
  store <1 x float> %1010, ptr addrspace(3) %375, align 4, !dbg !69
  %1011 = insertelement <1 x float> undef, float %995, i64 0, !dbg !69
  store <1 x float> %1011, ptr addrspace(3) %379, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %1012 = load <8 x float>, ptr addrspace(3) %384, align 32, !dbg !69
  %1013 = load <8 x float>, ptr addrspace(3) %388, align 32, !dbg !69
  %1014 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %393, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !70
  %1015 = extractvalue { i32, i32, i32, i32 } %1014, 0, !dbg !70
  %1016 = extractvalue { i32, i32, i32, i32 } %1014, 1, !dbg !70
  %1017 = extractvalue { i32, i32, i32, i32 } %1014, 2, !dbg !70
  %1018 = extractvalue { i32, i32, i32, i32 } %1014, 3, !dbg !70
  %1019 = trunc i32 %1015 to i16, !dbg !70
  %extelt.offset40 = lshr i32 %1015, 16, !dbg !70
  %1020 = trunc i32 %extelt.offset40 to i16, !dbg !70
  %1021 = trunc i32 %1016 to i16, !dbg !70
  %extelt.offset41 = lshr i32 %1016, 16, !dbg !70
  %1022 = trunc i32 %extelt.offset41 to i16, !dbg !70
  %1023 = trunc i32 %1017 to i16, !dbg !70
  %extelt.offset42 = lshr i32 %1017, 16, !dbg !70
  %1024 = trunc i32 %extelt.offset42 to i16, !dbg !70
  %1025 = trunc i32 %1018 to i16, !dbg !70
  %extelt.offset43 = lshr i32 %1018, 16, !dbg !70
  %1026 = trunc i32 %extelt.offset43 to i16, !dbg !70
  %1027 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %395, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !70
  %1028 = extractvalue { i32, i32, i32, i32 } %1027, 0, !dbg !70
  %1029 = extractvalue { i32, i32, i32, i32 } %1027, 1, !dbg !70
  %1030 = extractvalue { i32, i32, i32, i32 } %1027, 2, !dbg !70
  %1031 = extractvalue { i32, i32, i32, i32 } %1027, 3, !dbg !70
  %1032 = trunc i32 %1028 to i16, !dbg !70
  %extelt.offset44 = lshr i32 %1028, 16, !dbg !70
  %1033 = trunc i32 %extelt.offset44 to i16, !dbg !70
  %1034 = trunc i32 %1029 to i16, !dbg !70
  %extelt.offset45 = lshr i32 %1029, 16, !dbg !70
  %1035 = trunc i32 %extelt.offset45 to i16, !dbg !70
  %1036 = trunc i32 %1030 to i16, !dbg !70
  %extelt.offset46 = lshr i32 %1030, 16, !dbg !70
  %1037 = trunc i32 %extelt.offset46 to i16, !dbg !70
  %1038 = trunc i32 %1031 to i16, !dbg !70
  %extelt.offset47 = lshr i32 %1031, 16, !dbg !70
  %1039 = trunc i32 %extelt.offset47 to i16, !dbg !70
  %1040 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1019) #2, !dbg !71
  %1041 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1020) #2, !dbg !71
  %1042 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1021) #2, !dbg !71
  %1043 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1022) #2, !dbg !71
  %1044 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1023) #2, !dbg !71
  %1045 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1024) #2, !dbg !71
  %1046 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1025) #2, !dbg !71
  %1047 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1026) #2, !dbg !71
  %1048 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1032) #2, !dbg !71
  %1049 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1033) #2, !dbg !71
  %1050 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1034) #2, !dbg !71
  %1051 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1035) #2, !dbg !71
  %1052 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1036) #2, !dbg !71
  %1053 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1037) #2, !dbg !71
  %1054 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1038) #2, !dbg !71
  %1055 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1039) #2, !dbg !71
  %1056 = insertelement <8 x float> poison, float %1040, i64 0, !dbg !53
  %1057 = insertelement <8 x float> %1056, float %1041, i64 1, !dbg !53
  %1058 = insertelement <8 x float> %1057, float %1042, i64 2, !dbg !53
  %1059 = insertelement <8 x float> %1058, float %1043, i64 3, !dbg !53
  %1060 = insertelement <8 x float> %1059, float %1044, i64 4, !dbg !53
  %1061 = insertelement <8 x float> %1060, float %1045, i64 5, !dbg !53
  %1062 = insertelement <8 x float> %1061, float %1046, i64 6, !dbg !53
  %1063 = insertelement <8 x float> %1062, float %1047, i64 7, !dbg !53
  %1064 = select <8 x i1> %474, <8 x float> %1063, <8 x float> zeroinitializer, !dbg !53
  %1065 = insertelement <8 x i1> poison, i1 %397, i64 0, !dbg !53
  %1066 = shufflevector <8 x i1> %1065, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %1067 = insertelement <8 x float> poison, float %1048, i64 0, !dbg !53
  %1068 = insertelement <8 x float> %1067, float %1049, i64 1, !dbg !53
  %1069 = insertelement <8 x float> %1068, float %1050, i64 2, !dbg !53
  %1070 = insertelement <8 x float> %1069, float %1051, i64 3, !dbg !53
  %1071 = insertelement <8 x float> %1070, float %1052, i64 4, !dbg !53
  %1072 = insertelement <8 x float> %1071, float %1053, i64 5, !dbg !53
  %1073 = insertelement <8 x float> %1072, float %1054, i64 6, !dbg !53
  %1074 = insertelement <8 x float> %1073, float %1055, i64 7, !dbg !53
  %1075 = select <8 x i1> %1066, <8 x float> %1074, <8 x float> zeroinitializer, !dbg !53
  %1076 = insertelement <8 x float> poison, float %506, i64 0, !dbg !72
  %1077 = insertelement <8 x float> %1076, float %507, i64 1, !dbg !72
  %1078 = insertelement <8 x float> %1077, float %508, i64 2, !dbg !72
  %1079 = insertelement <8 x float> %1078, float %509, i64 3, !dbg !72
  %1080 = insertelement <8 x float> %1079, float %510, i64 4, !dbg !72
  %1081 = insertelement <8 x float> %1080, float %511, i64 5, !dbg !72
  %1082 = insertelement <8 x float> %1081, float %512, i64 6, !dbg !72
  %1083 = insertelement <8 x float> %1082, float %513, i64 7, !dbg !72
  %1084 = fmul <8 x float> %472, %1083, !dbg !72
  %1085 = insertelement <8 x float> poison, float %514, i64 0, !dbg !72
  %1086 = insertelement <8 x float> %1085, float %515, i64 1, !dbg !72
  %1087 = insertelement <8 x float> %1086, float %516, i64 2, !dbg !72
  %1088 = insertelement <8 x float> %1087, float %517, i64 3, !dbg !72
  %1089 = insertelement <8 x float> %1088, float %518, i64 4, !dbg !72
  %1090 = insertelement <8 x float> %1089, float %519, i64 5, !dbg !72
  %1091 = insertelement <8 x float> %1090, float %520, i64 6, !dbg !72
  %1092 = insertelement <8 x float> %1091, float %521, i64 7, !dbg !72
  %1093 = fmul <8 x float> %479, %1092, !dbg !72
  %1094 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %449, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !73
  %1095 = extractvalue { i32, i32, i32, i32 } %1094, 0, !dbg !73
  %1096 = extractvalue { i32, i32, i32, i32 } %1094, 1, !dbg !73
  %1097 = extractvalue { i32, i32, i32, i32 } %1094, 2, !dbg !73
  %1098 = extractvalue { i32, i32, i32, i32 } %1094, 3, !dbg !73
  %1099 = trunc i32 %1095 to i16, !dbg !73
  %extelt.offset48 = lshr i32 %1095, 16, !dbg !73
  %1100 = trunc i32 %extelt.offset48 to i16, !dbg !73
  %1101 = trunc i32 %1096 to i16, !dbg !73
  %extelt.offset49 = lshr i32 %1096, 16, !dbg !73
  %1102 = trunc i32 %extelt.offset49 to i16, !dbg !73
  %1103 = trunc i32 %1097 to i16, !dbg !73
  %extelt.offset50 = lshr i32 %1097, 16, !dbg !73
  %1104 = trunc i32 %extelt.offset50 to i16, !dbg !73
  %1105 = trunc i32 %1098 to i16, !dbg !73
  %extelt.offset51 = lshr i32 %1098, 16, !dbg !73
  %1106 = trunc i32 %extelt.offset51 to i16, !dbg !73
  %1107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %451, i1 %426, i32 0, i1 %426, i32 0, i1 %426, i32 0, i1 %426, i32 0, i1 %426) #2, !dbg !73
  %1108 = extractvalue { i32, i32, i32, i32 } %1107, 0, !dbg !73
  %1109 = extractvalue { i32, i32, i32, i32 } %1107, 1, !dbg !73
  %1110 = extractvalue { i32, i32, i32, i32 } %1107, 2, !dbg !73
  %1111 = extractvalue { i32, i32, i32, i32 } %1107, 3, !dbg !73
  %1112 = trunc i32 %1108 to i16, !dbg !73
  %extelt.offset52 = lshr i32 %1108, 16, !dbg !73
  %1113 = trunc i32 %extelt.offset52 to i16, !dbg !73
  %1114 = trunc i32 %1109 to i16, !dbg !73
  %extelt.offset53 = lshr i32 %1109, 16, !dbg !73
  %1115 = trunc i32 %extelt.offset53 to i16, !dbg !73
  %1116 = trunc i32 %1110 to i16, !dbg !73
  %extelt.offset54 = lshr i32 %1110, 16, !dbg !73
  %1117 = trunc i32 %extelt.offset54 to i16, !dbg !73
  %1118 = trunc i32 %1111 to i16, !dbg !73
  %extelt.offset55 = lshr i32 %1111, 16, !dbg !73
  %1119 = trunc i32 %extelt.offset55 to i16, !dbg !73
  %1120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1099) #2, !dbg !74
  %1121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1100) #2, !dbg !74
  %1122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1101) #2, !dbg !74
  %1123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1102) #2, !dbg !74
  %1124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1103) #2, !dbg !74
  %1125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1104) #2, !dbg !74
  %1126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1105) #2, !dbg !74
  %1127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1106) #2, !dbg !74
  %1128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1112) #2, !dbg !74
  %1129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1113) #2, !dbg !74
  %1130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1114) #2, !dbg !74
  %1131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1115) #2, !dbg !74
  %1132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1116) #2, !dbg !74
  %1133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1117) #2, !dbg !74
  %1134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1118) #2, !dbg !74
  %1135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1119) #2, !dbg !74
  %1136 = insertelement <8 x float> poison, float %1120, i64 0, !dbg !75
  %1137 = insertelement <8 x float> %1136, float %1121, i64 1, !dbg !75
  %1138 = insertelement <8 x float> %1137, float %1122, i64 2, !dbg !75
  %1139 = insertelement <8 x float> %1138, float %1123, i64 3, !dbg !75
  %1140 = insertelement <8 x float> %1139, float %1124, i64 4, !dbg !75
  %1141 = insertelement <8 x float> %1140, float %1125, i64 5, !dbg !75
  %1142 = insertelement <8 x float> %1141, float %1126, i64 6, !dbg !75
  %1143 = insertelement <8 x float> %1142, float %1127, i64 7, !dbg !75
  %1144 = fmul <8 x float> %738, %1143, !dbg !75
  %1145 = insertelement <8 x float> poison, float %1128, i64 0, !dbg !75
  %1146 = insertelement <8 x float> %1145, float %1129, i64 1, !dbg !75
  %1147 = insertelement <8 x float> %1146, float %1130, i64 2, !dbg !75
  %1148 = insertelement <8 x float> %1147, float %1131, i64 3, !dbg !75
  %1149 = insertelement <8 x float> %1148, float %1132, i64 4, !dbg !75
  %1150 = insertelement <8 x float> %1149, float %1133, i64 5, !dbg !75
  %1151 = insertelement <8 x float> %1150, float %1134, i64 6, !dbg !75
  %1152 = insertelement <8 x float> %1151, float %1135, i64 7, !dbg !75
  %1153 = fmul <8 x float> %739, %1152, !dbg !75
  %1154 = fsub <8 x float> zeroinitializer, %1144, !dbg !76
  %1155 = fsub <8 x float> zeroinitializer, %1153, !dbg !76
  %1156 = select <8 x i1> %476, <8 x float> %1154, <8 x float> zeroinitializer, !dbg !53
  %1157 = insertelement <8 x i1> poison, i1 %416, i64 0, !dbg !53
  %1158 = shufflevector <8 x i1> %1157, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %1159 = select <8 x i1> %1158, <8 x float> %1155, <8 x float> zeroinitializer, !dbg !53
  %1160 = fadd <8 x float> %1084, %1156, !dbg !77
  %1161 = fadd <8 x float> %1093, %1159, !dbg !77
  %1162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %469, i1 %442, i32 0, i1 %442, i32 0, i1 %442, i32 0, i1 %442, i32 0, i1 %442) #2, !dbg !78
  %1163 = extractvalue { i32, i32, i32, i32 } %1162, 0, !dbg !78
  %1164 = extractvalue { i32, i32, i32, i32 } %1162, 1, !dbg !78
  %1165 = extractvalue { i32, i32, i32, i32 } %1162, 2, !dbg !78
  %1166 = extractvalue { i32, i32, i32, i32 } %1162, 3, !dbg !78
  %1167 = trunc i32 %1163 to i16, !dbg !78
  %extelt.offset56 = lshr i32 %1163, 16, !dbg !78
  %1168 = trunc i32 %extelt.offset56 to i16, !dbg !78
  %1169 = trunc i32 %1164 to i16, !dbg !78
  %extelt.offset57 = lshr i32 %1164, 16, !dbg !78
  %1170 = trunc i32 %extelt.offset57 to i16, !dbg !78
  %1171 = trunc i32 %1165 to i16, !dbg !78
  %extelt.offset58 = lshr i32 %1165, 16, !dbg !78
  %1172 = trunc i32 %extelt.offset58 to i16, !dbg !78
  %1173 = trunc i32 %1166 to i16, !dbg !78
  %extelt.offset59 = lshr i32 %1166, 16, !dbg !78
  %1174 = trunc i32 %extelt.offset59 to i16, !dbg !78
  %1175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %471, i1 %443, i32 0, i1 %443, i32 0, i1 %443, i32 0, i1 %443, i32 0, i1 %443) #2, !dbg !78
  %1176 = extractvalue { i32, i32, i32, i32 } %1175, 0, !dbg !78
  %1177 = extractvalue { i32, i32, i32, i32 } %1175, 1, !dbg !78
  %1178 = extractvalue { i32, i32, i32, i32 } %1175, 2, !dbg !78
  %1179 = extractvalue { i32, i32, i32, i32 } %1175, 3, !dbg !78
  %1180 = trunc i32 %1176 to i16, !dbg !78
  %extelt.offset60 = lshr i32 %1176, 16, !dbg !78
  %1181 = trunc i32 %extelt.offset60 to i16, !dbg !78
  %1182 = trunc i32 %1177 to i16, !dbg !78
  %extelt.offset61 = lshr i32 %1177, 16, !dbg !78
  %1183 = trunc i32 %extelt.offset61 to i16, !dbg !78
  %1184 = trunc i32 %1178 to i16, !dbg !78
  %extelt.offset62 = lshr i32 %1178, 16, !dbg !78
  %1185 = trunc i32 %extelt.offset62 to i16, !dbg !78
  %1186 = trunc i32 %1179 to i16, !dbg !78
  %extelt.offset63 = lshr i32 %1179, 16, !dbg !78
  %1187 = trunc i32 %extelt.offset63 to i16, !dbg !78
  %1188 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1167) #2, !dbg !79
  %1189 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1168) #2, !dbg !79
  %1190 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1169) #2, !dbg !79
  %1191 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1170) #2, !dbg !79
  %1192 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1171) #2, !dbg !79
  %1193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1172) #2, !dbg !79
  %1194 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1173) #2, !dbg !79
  %1195 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1174) #2, !dbg !79
  %1196 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1180) #2, !dbg !79
  %1197 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1181) #2, !dbg !79
  %1198 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1182) #2, !dbg !79
  %1199 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1183) #2, !dbg !79
  %1200 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1184) #2, !dbg !79
  %1201 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1185) #2, !dbg !79
  %1202 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1186) #2, !dbg !79
  %1203 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1187) #2, !dbg !79
  %1204 = insertelement <8 x float> poison, float %1188, i64 0, !dbg !80
  %1205 = insertelement <8 x float> %1204, float %1189, i64 1, !dbg !80
  %1206 = insertelement <8 x float> %1205, float %1190, i64 2, !dbg !80
  %1207 = insertelement <8 x float> %1206, float %1191, i64 3, !dbg !80
  %1208 = insertelement <8 x float> %1207, float %1192, i64 4, !dbg !80
  %1209 = insertelement <8 x float> %1208, float %1193, i64 5, !dbg !80
  %1210 = insertelement <8 x float> %1209, float %1194, i64 6, !dbg !80
  %1211 = insertelement <8 x float> %1210, float %1195, i64 7, !dbg !80
  %1212 = fmul <8 x float> %930, %1211, !dbg !80
  %1213 = insertelement <8 x float> poison, float %1196, i64 0, !dbg !80
  %1214 = insertelement <8 x float> %1213, float %1197, i64 1, !dbg !80
  %1215 = insertelement <8 x float> %1214, float %1198, i64 2, !dbg !80
  %1216 = insertelement <8 x float> %1215, float %1199, i64 3, !dbg !80
  %1217 = insertelement <8 x float> %1216, float %1200, i64 4, !dbg !80
  %1218 = insertelement <8 x float> %1217, float %1201, i64 5, !dbg !80
  %1219 = insertelement <8 x float> %1218, float %1202, i64 6, !dbg !80
  %1220 = insertelement <8 x float> %1219, float %1203, i64 7, !dbg !80
  %1221 = fmul <8 x float> %931, %1220, !dbg !80
  %1222 = select <8 x i1> %478, <8 x float> %1212, <8 x float> zeroinitializer, !dbg !53
  %1223 = insertelement <8 x i1> poison, i1 %443, i64 0, !dbg !53
  %1224 = shufflevector <8 x i1> %1223, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %1225 = select <8 x i1> %1224, <8 x float> %1221, <8 x float> zeroinitializer, !dbg !53
  %1226 = fadd <8 x float> %1160, %1222, !dbg !81
  %1227 = fadd <8 x float> %1161, %1225, !dbg !81
  %1228 = fadd <8 x float> %1064, %1226, !dbg !82
  %1229 = fadd <8 x float> %1075, %1227, !dbg !82
  %1230 = fadd <8 x float> %1012, %1228, !dbg !83
  %1231 = fadd <8 x float> %1013, %1229, !dbg !83
  %1232 = shl i32 %59, 17, !dbg !84
  %1233 = add i32 %1232, %.decomposed95, !dbg !21
  %1234 = add i32 %1233, %63, !dbg !85
  %1235 = add i32 %1233, %64, !dbg !85
  %1236 = add i32 %1233, %65, !dbg !85
  %1237 = add i32 %1233, %66, !dbg !85
  %1238 = sext i32 %1234 to i64, !dbg !86
  %1239 = getelementptr float, ptr addrspace(1) %3, i64 %1238, !dbg !86
  %1240 = sext i32 %1235 to i64, !dbg !86
  %1241 = getelementptr float, ptr addrspace(1) %3, i64 %1240, !dbg !86
  %1242 = sext i32 %1236 to i64, !dbg !86
  %1243 = getelementptr float, ptr addrspace(1) %3, i64 %1242, !dbg !86
  %1244 = sext i32 %1237 to i64, !dbg !86
  %1245 = getelementptr float, ptr addrspace(1) %3, i64 %1244, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  store <8 x float> %1230, ptr addrspace(3) %384, align 32, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %1246 = mul nuw nsw i32 %26, 24, !dbg !87
  %1247 = add nuw nsw i32 %1246, %18, !dbg !87
  %1248 = zext nneg i32 %1247 to i64, !dbg !87
  %1249 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1248, !dbg !87
  %1250 = load <4 x i32>, ptr addrspace(3) %1249, align 16, !dbg !87
  %1251 = mul nuw nsw i32 %27, 24, !dbg !87
  %1252 = add nuw nsw i32 %1251, %18, !dbg !87
  %1253 = zext nneg i32 %1252 to i64, !dbg !87
  %1254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1253, !dbg !87
  %1255 = load <4 x i32>, ptr addrspace(3) %1254, align 16, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  store <8 x float> %1231, ptr addrspace(3) %384, align 32, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %1256 = load <4 x i32>, ptr addrspace(3) %1249, align 16, !dbg !87
  %1257 = load <4 x i32>, ptr addrspace(3) %1254, align 16, !dbg !87
  %.extract = extractelement <4 x i32> %1250, i64 0, !dbg !87
  %.extract65 = extractelement <4 x i32> %1250, i64 1, !dbg !87
  %.extract67 = extractelement <4 x i32> %1250, i64 2, !dbg !87
  %.extract69 = extractelement <4 x i32> %1250, i64 3, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract65, i32 %.extract67, i32 %.extract69, ptr addrspace(1) %1239, i1 %49) #2, !dbg !87
  %.extract71 = extractelement <4 x i32> %1255, i64 0, !dbg !87
  %.extract73 = extractelement <4 x i32> %1255, i64 1, !dbg !87
  %.extract75 = extractelement <4 x i32> %1255, i64 2, !dbg !87
  %.extract77 = extractelement <4 x i32> %1255, i64 3, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract71, i32 %.extract73, i32 %.extract75, i32 %.extract77, ptr addrspace(1) %1241, i1 %50) #2, !dbg !87
  %.extract79 = extractelement <4 x i32> %1256, i64 0, !dbg !87
  %.extract81 = extractelement <4 x i32> %1256, i64 1, !dbg !87
  %.extract83 = extractelement <4 x i32> %1256, i64 2, !dbg !87
  %.extract85 = extractelement <4 x i32> %1256, i64 3, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract79, i32 %.extract81, i32 %.extract83, i32 %.extract85, ptr addrspace(1) %1243, i1 %51) #2, !dbg !87
  %.extract87 = extractelement <4 x i32> %1257, i64 0, !dbg !87
  %.extract89 = extractelement <4 x i32> %1257, i64 1, !dbg !87
  %.extract91 = extractelement <4 x i32> %1257, i64 2, !dbg !87
  %.extract93 = extractelement <4 x i32> %1257, i64 3, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract87, i32 %.extract89, i32 %.extract91, i32 %.extract93, ptr addrspace(1) %1245, i1 %52) #2, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "crrdsfk77bdln63d7tpusb7zw3nj6ood2d466j625pinrh64lbkt.py", directory: "/tmp/torchinductor_zeus/rr")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 24, column: 28, scope: !5)
!14 = !DILocation(line: 24, column: 33, scope: !5)
!15 = !DILocation(line: 25, column: 23, scope: !5)
!16 = !DILocation(line: 26, column: 21, scope: !5)
!17 = !DILocation(line: 29, column: 20, scope: !5)
!18 = !DILocation(line: 28, column: 18, scope: !5)
!19 = !DILocation(line: 30, column: 40, scope: !5)
!20 = !DILocation(line: 30, column: 54, scope: !5)
!21 = !DILocation(line: 30, column: 36, scope: !5)
!22 = !DILocation(line: 30, column: 47, scope: !5)
!23 = !DILocation(line: 30, column: 30, scope: !5)
!24 = !DILocation(line: 30, column: 60, scope: !5)
!25 = !DILocation(line: 30, column: 100, scope: !5)
!26 = !DILocation(line: 31, column: 41, scope: !5)
!27 = !DILocation(line: 31, column: 37, scope: !5)
!28 = !DILocation(line: 31, column: 31, scope: !5)
!29 = !DILocation(line: 31, column: 47, scope: !5)
!30 = !DILocation(line: 32, column: 40, scope: !5)
!31 = !DILocation(line: 32, column: 57, scope: !5)
!32 = !DILocation(line: 32, column: 31, scope: !5)
!33 = !DILocation(line: 35, column: 19, scope: !5)
!34 = !DILocation(line: 42, column: 19, scope: !5)
!35 = !DILocation(line: 45, column: 20, scope: !5)
!36 = !DILocation(line: 46, column: 42, scope: !5)
!37 = !DILocation(line: 46, column: 59, scope: !5)
!38 = !DILocation(line: 46, column: 31, scope: !5)
!39 = !DILocation(line: 46, column: 80, scope: !5)
!40 = !DILocation(line: 48, column: 40, scope: !5)
!41 = !DILocation(line: 48, column: 46, scope: !5)
!42 = !DILocation(line: 48, column: 31, scope: !5)
!43 = !DILocation(line: 56, column: 19, scope: !5)
!44 = !DILocation(line: 57, column: 39, scope: !5)
!45 = !DILocation(line: 57, column: 56, scope: !5)
!46 = !DILocation(line: 57, column: 31, scope: !5)
!47 = !DILocation(line: 59, column: 37, scope: !5)
!48 = !DILocation(line: 59, column: 43, scope: !5)
!49 = !DILocation(line: 59, column: 31, scope: !5)
!50 = !DILocation(line: 84, column: 40, scope: !5)
!51 = !DILocation(line: 84, column: 57, scope: !5)
!52 = !DILocation(line: 84, column: 31, scope: !5)
!53 = !DILocation(line: 0, scope: !5)
!54 = !DILocation(line: 32, column: 70, scope: !5)
!55 = !DILocation(line: 32, column: 110, scope: !5)
!56 = !DILocation(line: 36, column: 60, scope: !5)
!57 = !DILocation(line: 36, column: 118, scope: !5)
!58 = !DILocation(line: 46, column: 72, scope: !5)
!59 = !DILocation(line: 46, column: 131, scope: !5)
!60 = !DILocation(line: 48, column: 56, scope: !5)
!61 = !DILocation(line: 49, column: 20, scope: !5)
!62 = !DILocation(line: 51, column: 13, scope: !5)
!63 = !DILocation(line: 55, column: 20, scope: !5)
!64 = !DILocation(line: 57, column: 69, scope: !5)
!65 = !DILocation(line: 57, column: 128, scope: !5)
!66 = !DILocation(line: 59, column: 53, scope: !5)
!67 = !DILocation(line: 60, column: 20, scope: !5)
!68 = !DILocation(line: 65, column: 20, scope: !5)
!69 = !DILocation(line: 66, column: 19, scope: !5)
!70 = !DILocation(line: 68, column: 70, scope: !5)
!71 = !DILocation(line: 68, column: 128, scope: !5)
!72 = !DILocation(line: 73, column: 20, scope: !5)
!73 = !DILocation(line: 75, column: 69, scope: !5)
!74 = !DILocation(line: 75, column: 128, scope: !5)
!75 = !DILocation(line: 77, column: 20, scope: !5)
!76 = !DILocation(line: 79, column: 13, scope: !5)
!77 = !DILocation(line: 83, column: 20, scope: !5)
!78 = !DILocation(line: 84, column: 70, scope: !5)
!79 = !DILocation(line: 84, column: 129, scope: !5)
!80 = !DILocation(line: 86, column: 20, scope: !5)
!81 = !DILocation(line: 91, column: 20, scope: !5)
!82 = !DILocation(line: 92, column: 20, scope: !5)
!83 = !DILocation(line: 94, column: 20, scope: !5)
!84 = !DILocation(line: 95, column: 49, scope: !5)
!85 = !DILocation(line: 95, column: 42, scope: !5)
!86 = !DILocation(line: 95, column: 25, scope: !5)
!87 = !DILocation(line: 95, column: 62, scope: !5)
!88 = !DILocation(line: 95, column: 4, scope: !5)
