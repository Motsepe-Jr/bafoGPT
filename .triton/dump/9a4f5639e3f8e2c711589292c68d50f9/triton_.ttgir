#blocked = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x4xf32, #blocked>
    %cst_0 = arith.constant dense<256> : tensor<256x1xi32, #blocked1>
    %cst_1 = arith.constant dense<256> : tensor<256x1xi32, #blocked>
    %cst_2 = arith.constant dense<2048> : tensor<1x4xi32, #blocked1>
    %cst_3 = arith.constant dense<2048> : tensor<1x4xi32, #blocked>
    %cst_4 = arith.constant dense<2048> : tensor<256x1xi32, #blocked1>
    %cst_5 = arith.constant dense<1048576> : tensor<1x4xi32, #blocked1>
    %cst_6 = arith.constant dense<256> : tensor<1x4xi32, #blocked>
    %cst_7 = arith.constant dense<524288> : tensor<1x4xi32, #blocked1>
    %cst_8 = arith.constant dense<256> : tensor<256x1xi64, #blocked1>
    %cst_9 = arith.constant dense<256> : tensor<256x1xi64, #blocked>
    %cst_10 = arith.constant dense<786432> : tensor<1x4xi32, #blocked1>
    %cst_11 = arith.constant dense<128> : tensor<256x1xi32, #blocked>
    %cst_12 = arith.constant dense<262144> : tensor<1x4xi32, #blocked1>
    %cst_13 = arith.constant dense<-128> : tensor<256x1xi32, #blocked>
    %cst_14 = arith.constant dense<-262144> : tensor<1x4xi32, #blocked1>
    %cst_15 = arith.constant dense<128> : tensor<256x1xi64, #blocked1>
    %cst_16 = arith.constant dense<128> : tensor<256x1xi64, #blocked>
    %c4_i32 = arith.constant 4 : i32
    %c256_i32 = arith.constant 256 : i32
    %cst_17 = arith.constant dense<0.000000e+00> : tensor<256x4xbf16, #blocked>
    %cst_18 = arith.constant dense<0.000000e+00> : tensor<256x4xbf16, #blocked1>
    %cst_19 = arith.constant dense<0.000000e+00> : tensor<256x4xf32, #blocked1>
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c4_i32 : i32
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %3 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x4xi32, #blocked1>
    %5 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x4xi32, #blocked>
    %6 = tt.splat %1 : (i32) -> tensor<1x4xi32, #blocked1>
    %7 = tt.splat %1 : (i32) -> tensor<1x4xi32, #blocked>
    %8 = arith.addi %6, %4 : tensor<1x4xi32, #blocked1>
    %9 = arith.addi %7, %5 : tensor<1x4xi32, #blocked>
    %10 = tt.get_program_id x : i32
    %11 = arith.muli %10, %c256_i32 : i32
    %12 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %13 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %14 = tt.expand_dims %12 {axis = 1 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<256x1xi32, #blocked1>
    %15 = tt.expand_dims %13 {axis = 1 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<256x1xi32, #blocked>
    %16 = tt.splat %11 : (i32) -> tensor<256x1xi32, #blocked1>
    %17 = tt.splat %11 : (i32) -> tensor<256x1xi32, #blocked>
    %18 = arith.addi %16, %14 : tensor<256x1xi32, #blocked1>
    %19 = arith.addi %17, %15 : tensor<256x1xi32, #blocked>
    %20 = arith.cmpi slt, %18, %cst_0 : tensor<256x1xi32, #blocked1>
    %21 = arith.cmpi slt, %19, %cst_1 : tensor<256x1xi32, #blocked>
    %22 = arith.remsi %8, %cst_2 : tensor<1x4xi32, #blocked1>
    %23 = arith.remsi %9, %cst_3 : tensor<1x4xi32, #blocked>
    %24 = arith.divsi %8, %cst_2 : tensor<1x4xi32, #blocked1>
    %25 = arith.muli %18, %cst_4 : tensor<256x1xi32, #blocked1>
    %26 = tt.broadcast %22 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %27 = tt.broadcast %25 : (tensor<256x1xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %28 = arith.addi %26, %27 : tensor<256x4xi32, #blocked1>
    %29 = arith.muli %24, %cst_5 : tensor<1x4xi32, #blocked1>
    %30 = tt.broadcast %29 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %31 = arith.addi %28, %30 : tensor<256x4xi32, #blocked1>
    %32 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>
    %33 = tt.addptr %32, %31 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    %34 = tt.broadcast %20 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %35 = tt.broadcast %21 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %36 = tt.load %33, %34 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %37 = triton_gpu.convert_layout %36 : (tensor<256x4xbf16, #blocked1>) -> tensor<256x4xbf16, #blocked>
    %38 = arith.extf %37 : tensor<256x4xbf16, #blocked> to tensor<256x4xf32, #blocked>
    %39 = arith.muli %23, %cst_6 : tensor<1x4xi32, #blocked>
    %40 = tt.broadcast %19 : (tensor<256x1xi32, #blocked>) -> tensor<256x4xi32, #blocked>
    %41 = tt.broadcast %39 : (tensor<1x4xi32, #blocked>) -> tensor<256x4xi32, #blocked>
    %42 = arith.addi %40, %41 : tensor<256x4xi32, #blocked>
    %43 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<256x4x!tt.ptr<bf16, 1>, #blocked>
    %44 = tt.addptr %43, %42 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked>, tensor<256x4xi32, #blocked>
    %45 = tt.load %44, %35 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked>
    %46 = triton_gpu.convert_layout %45 : (tensor<256x4xbf16, #blocked>) -> tensor<256x4xbf16, #blocked1>
    %47 = arith.extf %46 : tensor<256x4xbf16, #blocked1> to tensor<256x4xf32, #blocked1>
    %48 = arith.extf %45 : tensor<256x4xbf16, #blocked> to tensor<256x4xf32, #blocked>
    %49 = arith.addi %22, %cst_7 : tensor<1x4xi32, #blocked1>
    %50 = tt.broadcast %49 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %51 = arith.addi %50, %27 : tensor<256x4xi32, #blocked1>
    %52 = arith.addi %51, %30 : tensor<256x4xi32, #blocked1>
    %53 = tt.addptr %32, %52 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    %54 = tt.load %53, %34 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %55 = arith.extf %54 : tensor<256x4xbf16, #blocked1> to tensor<256x4xf32, #blocked1>
    %56 = arith.extsi %18 : tensor<256x1xi32, #blocked1> to tensor<256x1xi64, #blocked1>
    %57 = arith.extsi %19 : tensor<256x1xi32, #blocked> to tensor<256x1xi64, #blocked>
    %58 = arith.cmpi sge, %56, %cst_8 : tensor<256x1xi64, #blocked1>
    %59 = arith.cmpi sge, %57, %cst_9 : tensor<256x1xi64, #blocked>
    %60 = arith.andi %58, %20 : tensor<256x1xi1, #blocked1>
    %61 = tt.broadcast %60 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %62 = tt.load %33, %61, %cst_18 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %63 = triton_gpu.convert_layout %62 : (tensor<256x4xbf16, #blocked1>) -> tensor<256x4xbf16, #blocked>
    %64 = arith.extf %63 : tensor<256x4xbf16, #blocked> to tensor<256x4xf32, #blocked>
    %65 = tt.broadcast %58 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %66 = tt.broadcast %59 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %67 = arith.select %66, %64, %cst : tensor<256x4xi1, #blocked>, tensor<256x4xf32, #blocked>
    %68 = arith.mulf %38, %48 : tensor<256x4xf32, #blocked>
    %69 = arith.cmpi sge, %56, %cst_15 : tensor<256x1xi64, #blocked1>
    %70 = arith.cmpi sge, %57, %cst_16 : tensor<256x1xi64, #blocked>
    %71 = arith.addi %22, %cst_14 : tensor<1x4xi32, #blocked1>
    %72 = tt.broadcast %71 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %73 = arith.addi %72, %27 : tensor<256x4xi32, #blocked1>
    %74 = arith.addi %73, %30 : tensor<256x4xi32, #blocked1>
    %75 = tt.addptr %32, %74 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    %76 = arith.andi %69, %20 : tensor<256x1xi1, #blocked1>
    %77 = arith.andi %70, %21 : tensor<256x1xi1, #blocked>
    %78 = tt.broadcast %76 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %79 = tt.broadcast %77 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %80 = tt.load %75, %78, %cst_18 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %81 = triton_gpu.convert_layout %80 : (tensor<256x4xbf16, #blocked1>) -> tensor<256x4xbf16, #blocked>
    %82 = arith.extf %81 : tensor<256x4xbf16, #blocked> to tensor<256x4xf32, #blocked>
    %83 = arith.addi %19, %cst_13 : tensor<256x1xi32, #blocked>
    %84 = tt.broadcast %83 : (tensor<256x1xi32, #blocked>) -> tensor<256x4xi32, #blocked>
    %85 = arith.addi %84, %41 : tensor<256x4xi32, #blocked>
    %86 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<256x4x!tt.ptr<bf16, 1>, #blocked>
    %87 = tt.addptr %86, %85 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked>, tensor<256x4xi32, #blocked>
    %88 = tt.load %87, %79, %cst_17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked>
    %89 = triton_gpu.convert_layout %88 : (tensor<256x4xbf16, #blocked>) -> tensor<256x4xbf16, #blocked1>
    %90 = arith.extf %89 : tensor<256x4xbf16, #blocked1> to tensor<256x4xf32, #blocked1>
    %91 = arith.extf %88 : tensor<256x4xbf16, #blocked> to tensor<256x4xf32, #blocked>
    %92 = arith.mulf %82, %91 : tensor<256x4xf32, #blocked>
    %93 = arith.subf %cst, %92 : tensor<256x4xf32, #blocked>
    %94 = tt.broadcast %69 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %95 = tt.broadcast %70 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %96 = arith.select %95, %93, %cst : tensor<256x4xi1, #blocked>, tensor<256x4xf32, #blocked>
    %97 = arith.addf %68, %96 : tensor<256x4xf32, #blocked>
    %98 = arith.cmpi slt, %56, %cst_15 : tensor<256x1xi64, #blocked1>
    %99 = arith.cmpi slt, %57, %cst_16 : tensor<256x1xi64, #blocked>
    %100 = arith.addi %22, %cst_12 : tensor<1x4xi32, #blocked1>
    %101 = tt.broadcast %100 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %102 = arith.addi %101, %27 : tensor<256x4xi32, #blocked1>
    %103 = arith.addi %102, %30 : tensor<256x4xi32, #blocked1>
    %104 = tt.addptr %32, %103 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    %105 = arith.andi %98, %20 : tensor<256x1xi1, #blocked1>
    %106 = arith.andi %99, %21 : tensor<256x1xi1, #blocked>
    %107 = tt.broadcast %105 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %108 = tt.broadcast %106 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %109 = tt.load %104, %107, %cst_18 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %110 = triton_gpu.convert_layout %109 : (tensor<256x4xbf16, #blocked1>) -> tensor<256x4xbf16, #blocked>
    %111 = arith.extf %110 : tensor<256x4xbf16, #blocked> to tensor<256x4xf32, #blocked>
    %112 = arith.addi %19, %cst_11 : tensor<256x1xi32, #blocked>
    %113 = tt.broadcast %112 : (tensor<256x1xi32, #blocked>) -> tensor<256x4xi32, #blocked>
    %114 = arith.addi %113, %41 : tensor<256x4xi32, #blocked>
    %115 = tt.addptr %86, %114 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked>, tensor<256x4xi32, #blocked>
    %116 = tt.load %115, %108, %cst_17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked>
    %117 = triton_gpu.convert_layout %116 : (tensor<256x4xbf16, #blocked>) -> tensor<256x4xbf16, #blocked1>
    %118 = arith.extf %117 : tensor<256x4xbf16, #blocked1> to tensor<256x4xf32, #blocked1>
    %119 = arith.extf %116 : tensor<256x4xbf16, #blocked> to tensor<256x4xf32, #blocked>
    %120 = arith.mulf %111, %119 : tensor<256x4xf32, #blocked>
    %121 = tt.broadcast %98 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %122 = tt.broadcast %99 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %123 = arith.select %122, %120, %cst : tensor<256x4xi1, #blocked>, tensor<256x4xf32, #blocked>
    %124 = arith.addf %97, %123 : tensor<256x4xf32, #blocked>
    %125 = arith.addf %67, %124 : tensor<256x4xf32, #blocked>
    %126 = triton_gpu.convert_layout %125 : (tensor<256x4xf32, #blocked>) -> tensor<256x4xf32, #blocked1>
    %127 = tt.load %53, %61, %cst_18 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %128 = arith.extf %127 : tensor<256x4xbf16, #blocked1> to tensor<256x4xf32, #blocked1>
    %129 = arith.select %65, %128, %cst_19 : tensor<256x4xi1, #blocked1>, tensor<256x4xf32, #blocked1>
    %130 = arith.mulf %55, %47 : tensor<256x4xf32, #blocked1>
    %131 = tt.load %104, %78, %cst_18 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %132 = arith.extf %131 : tensor<256x4xbf16, #blocked1> to tensor<256x4xf32, #blocked1>
    %133 = arith.mulf %132, %90 : tensor<256x4xf32, #blocked1>
    %134 = arith.subf %cst_19, %133 : tensor<256x4xf32, #blocked1>
    %135 = arith.select %94, %134, %cst_19 : tensor<256x4xi1, #blocked1>, tensor<256x4xf32, #blocked1>
    %136 = arith.addf %130, %135 : tensor<256x4xf32, #blocked1>
    %137 = arith.addi %22, %cst_10 : tensor<1x4xi32, #blocked1>
    %138 = tt.broadcast %137 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %139 = arith.addi %138, %27 : tensor<256x4xi32, #blocked1>
    %140 = arith.addi %139, %30 : tensor<256x4xi32, #blocked1>
    %141 = tt.addptr %32, %140 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    %142 = tt.load %141, %107, %cst_18 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %143 = arith.extf %142 : tensor<256x4xbf16, #blocked1> to tensor<256x4xf32, #blocked1>
    %144 = arith.mulf %143, %118 : tensor<256x4xf32, #blocked1>
    %145 = arith.select %121, %144, %cst_19 : tensor<256x4xi1, #blocked1>, tensor<256x4xf32, #blocked1>
    %146 = arith.addf %136, %145 : tensor<256x4xf32, #blocked1>
    %147 = arith.addf %129, %146 : tensor<256x4xf32, #blocked1>
    %148 = arith.addf %126, %147 : tensor<256x4xf32, #blocked1>
    %149 = arith.muli %24, %cst_7 : tensor<1x4xi32, #blocked1>
    %150 = tt.broadcast %149 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %151 = arith.addi %28, %150 : tensor<256x4xi32, #blocked1>
    %152 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<256x4x!tt.ptr<f32, 1>, #blocked1>
    %153 = tt.addptr %152, %151 : tensor<256x4x!tt.ptr<f32, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    tt.store %153, %148, %34 {cache = 1 : i32, evict = 1 : i32} : tensor<256x4xf32, #blocked1>
    tt.return
  }
}
