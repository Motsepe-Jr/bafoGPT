; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = lshr i32 %7, 5, !dbg !8
  %9 = and i32 %8, 3, !dbg !8
  %urem = and i32 %7, 127, !dbg !9
  %10 = or i32 %urem, 128, !dbg !9
  %11 = shl i32 %7, 3, !dbg !9
  %12 = and i32 %11, 248, !dbg !9
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %14 = shl i32 %13, 2, !dbg !11
  %15 = or i32 %14, %9, !dbg !12
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %17 = shl i32 %16, 8, !dbg !14
  %18 = or i32 %17, %urem, !dbg !15
  %19 = or i32 %17, %10, !dbg !15
  %20 = or i32 %17, %12, !dbg !15
  %21 = icmp slt i32 %18, 256, !dbg !16
  %22 = icmp slt i32 %19, 256, !dbg !16
  %23 = icmp slt i32 %20, 256, !dbg !16
  %.frozen = freeze i32 %14
  %24 = sdiv i32 %.frozen, 2048, !dbg !17
  %25 = mul i32 %24, 2048
  %.decomposed = sub i32 %.frozen, %25
  %26 = srem i32 %15, 2048, !dbg !18
  %27 = shl i32 %18, 11, !dbg !19
  %28 = shl i32 %19, 11, !dbg !19
  %29 = add i32 %27, %.decomposed, !dbg !20
  %30 = add nsw i32 %28, %.decomposed, !dbg !20
  %31 = shl i32 %24, 20, !dbg !21
  %32 = add i32 %29, %31, !dbg !22
  %33 = add i32 %30, %31, !dbg !22
  %34 = sext i32 %32 to i64, !dbg !23
  %35 = getelementptr i16, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr i16, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %21) #2, !dbg !24
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !24
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !24
  %41 = trunc i32 %39 to i16, !dbg !24
  %extelt.offset = lshr i32 %39, 16, !dbg !24
  %42 = trunc i32 %extelt.offset to i16, !dbg !24
  %43 = trunc i32 %40 to i16, !dbg !24
  %extelt.offset1 = lshr i32 %40, 16, !dbg !24
  %44 = trunc i32 %extelt.offset1 to i16, !dbg !24
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %22) #2, !dbg !24
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !24
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !24
  %48 = trunc i32 %46 to i16, !dbg !24
  %extelt.offset2 = lshr i32 %46, 16, !dbg !24
  %49 = trunc i32 %extelt.offset2 to i16, !dbg !24
  %50 = trunc i32 %47 to i16, !dbg !24
  %extelt.offset3 = lshr i32 %47, 16, !dbg !24
  %51 = trunc i32 %extelt.offset3 to i16, !dbg !24
  %52 = zext nneg i32 %urem to i64, !dbg !25
  %53 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %52, !dbg !25
  %54 = insertelement <1 x i16> undef, i16 %41, i64 0, !dbg !25
  store <1 x i16> %54, ptr addrspace(3) %53, align 2, !dbg !25
  %55 = add nuw nsw i32 %urem, 257, !dbg !25
  %56 = zext nneg i32 %55 to i64, !dbg !25
  %57 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %56, !dbg !25
  %58 = insertelement <1 x i16> undef, i16 %42, i64 0, !dbg !25
  store <1 x i16> %58, ptr addrspace(3) %57, align 2, !dbg !25
  %59 = add nuw nsw i32 %urem, 514, !dbg !25
  %60 = zext nneg i32 %59 to i64, !dbg !25
  %61 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %60, !dbg !25
  %62 = insertelement <1 x i16> undef, i16 %43, i64 0, !dbg !25
  store <1 x i16> %62, ptr addrspace(3) %61, align 2, !dbg !25
  %63 = add nuw nsw i32 %urem, 771, !dbg !25
  %64 = zext nneg i32 %63 to i64, !dbg !25
  %65 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %64, !dbg !25
  %66 = insertelement <1 x i16> undef, i16 %44, i64 0, !dbg !25
  store <1 x i16> %66, ptr addrspace(3) %65, align 2, !dbg !25
  %67 = zext nneg i32 %10 to i64, !dbg !25
  %68 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %67, !dbg !25
  %69 = insertelement <1 x i16> undef, i16 %48, i64 0, !dbg !25
  store <1 x i16> %69, ptr addrspace(3) %68, align 2, !dbg !25
  %70 = add nuw nsw i32 %urem, 385, !dbg !25
  %71 = zext nneg i32 %70 to i64, !dbg !25
  %72 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %71, !dbg !25
  %73 = insertelement <1 x i16> undef, i16 %49, i64 0, !dbg !25
  store <1 x i16> %73, ptr addrspace(3) %72, align 2, !dbg !25
  %74 = add nuw nsw i32 %urem, 642, !dbg !25
  %75 = zext nneg i32 %74 to i64, !dbg !25
  %76 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %75, !dbg !25
  %77 = insertelement <1 x i16> undef, i16 %50, i64 0, !dbg !25
  store <1 x i16> %77, ptr addrspace(3) %76, align 2, !dbg !25
  %78 = add nuw nsw i32 %urem, 899, !dbg !25
  %79 = zext nneg i32 %78 to i64, !dbg !25
  %80 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %79, !dbg !25
  %81 = insertelement <1 x i16> undef, i16 %51, i64 0, !dbg !25
  store <1 x i16> %81, ptr addrspace(3) %80, align 2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %82 = mul nuw nsw i32 %9, 257, !dbg !25
  %83 = add nuw nsw i32 %82, %12, !dbg !25
  %84 = zext nneg i32 %83 to i64, !dbg !25
  %85 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %84, !dbg !25
  %86 = load i16, ptr addrspace(3) %85, align 2, !dbg !25
  %87 = or i32 %12, 1, !dbg !25
  %88 = add nuw nsw i32 %82, %87, !dbg !25
  %89 = zext nneg i32 %88 to i64, !dbg !25
  %90 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %89, !dbg !25
  %91 = load i16, ptr addrspace(3) %90, align 2, !dbg !25
  %92 = or i32 %12, 2, !dbg !25
  %93 = add nuw nsw i32 %82, %92, !dbg !25
  %94 = zext nneg i32 %93 to i64, !dbg !25
  %95 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %94, !dbg !25
  %96 = load i16, ptr addrspace(3) %95, align 2, !dbg !25
  %97 = or i32 %12, 3, !dbg !25
  %98 = add nuw nsw i32 %82, %97, !dbg !25
  %99 = zext nneg i32 %98 to i64, !dbg !25
  %100 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %99, !dbg !25
  %101 = load i16, ptr addrspace(3) %100, align 2, !dbg !25
  %102 = or i32 %12, 4, !dbg !25
  %103 = add nuw nsw i32 %82, %102, !dbg !25
  %104 = zext nneg i32 %103 to i64, !dbg !25
  %105 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %104, !dbg !25
  %106 = load i16, ptr addrspace(3) %105, align 2, !dbg !25
  %107 = or i32 %12, 5, !dbg !25
  %108 = add nuw nsw i32 %82, %107, !dbg !25
  %109 = zext nneg i32 %108 to i64, !dbg !25
  %110 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %109, !dbg !25
  %111 = load i16, ptr addrspace(3) %110, align 2, !dbg !25
  %112 = or i32 %12, 6, !dbg !25
  %113 = add nuw nsw i32 %82, %112, !dbg !25
  %114 = zext nneg i32 %113 to i64, !dbg !25
  %115 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %114, !dbg !25
  %116 = load i16, ptr addrspace(3) %115, align 2, !dbg !25
  %117 = or i32 %12, 7, !dbg !25
  %118 = add nuw nsw i32 %82, %117, !dbg !25
  %119 = zext nneg i32 %118 to i64, !dbg !25
  %120 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %119, !dbg !25
  %121 = load i16, ptr addrspace(3) %120, align 2, !dbg !25
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #2, !dbg !25
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #2, !dbg !25
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #2, !dbg !25
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #2, !dbg !25
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #2, !dbg !25
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %111) #2, !dbg !25
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #2, !dbg !25
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #2, !dbg !25
  %130 = shl nsw i32 %26, 8, !dbg !26
  %131 = add i32 %130, %20, !dbg !27
  %132 = sext i32 %131 to i64, !dbg !28
  %133 = getelementptr i16, ptr addrspace(1) %1, i64 %132, !dbg !28
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %133, i1 %23) #2, !dbg !29
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !29
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !29
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !29
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !29
  %139 = trunc i32 %135 to i16, !dbg !29
  %extelt.offset4 = lshr i32 %135, 16, !dbg !29
  %140 = trunc i32 %extelt.offset4 to i16, !dbg !29
  %141 = trunc i32 %136 to i16, !dbg !29
  %extelt.offset5 = lshr i32 %136, 16, !dbg !29
  %142 = trunc i32 %extelt.offset5 to i16, !dbg !29
  %143 = trunc i32 %137 to i16, !dbg !29
  %extelt.offset6 = lshr i32 %137, 16, !dbg !29
  %144 = trunc i32 %extelt.offset6 to i16, !dbg !29
  %145 = trunc i32 %138 to i16, !dbg !29
  %extelt.offset7 = lshr i32 %138, 16, !dbg !29
  %146 = trunc i32 %extelt.offset7 to i16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %147 = shl nuw nsw i32 %12, 3, !dbg !30
  %148 = or i32 %147, %9, !dbg !30
  %149 = zext nneg i32 %148 to i64, !dbg !30
  %150 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %149, !dbg !30
  %151 = insertelement <1 x i16> undef, i16 %139, i64 0, !dbg !30
  store <1 x i16> %151, ptr addrspace(3) %150, align 2, !dbg !30
  %152 = shl nuw nsw i32 %87, 3, !dbg !30
  %153 = or i32 %152, %9, !dbg !30
  %154 = zext nneg i32 %153 to i64, !dbg !30
  %155 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %154, !dbg !30
  %156 = insertelement <1 x i16> undef, i16 %140, i64 0, !dbg !30
  store <1 x i16> %156, ptr addrspace(3) %155, align 2, !dbg !30
  %157 = shl nuw nsw i32 %92, 3, !dbg !30
  %158 = or i32 %157, %9, !dbg !30
  %159 = zext nneg i32 %158 to i64, !dbg !30
  %160 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %159, !dbg !30
  %161 = insertelement <1 x i16> undef, i16 %141, i64 0, !dbg !30
  store <1 x i16> %161, ptr addrspace(3) %160, align 2, !dbg !30
  %162 = shl nuw nsw i32 %97, 3, !dbg !30
  %163 = or i32 %162, %9, !dbg !30
  %164 = zext nneg i32 %163 to i64, !dbg !30
  %165 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %164, !dbg !30
  %166 = insertelement <1 x i16> undef, i16 %142, i64 0, !dbg !30
  store <1 x i16> %166, ptr addrspace(3) %165, align 2, !dbg !30
  %167 = shl nuw nsw i32 %102, 3, !dbg !30
  %168 = or i32 %167, %9, !dbg !30
  %169 = zext nneg i32 %168 to i64, !dbg !30
  %170 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %169, !dbg !30
  %171 = insertelement <1 x i16> undef, i16 %143, i64 0, !dbg !30
  store <1 x i16> %171, ptr addrspace(3) %170, align 2, !dbg !30
  %172 = shl nuw nsw i32 %107, 3, !dbg !30
  %173 = or i32 %172, %9, !dbg !30
  %174 = zext nneg i32 %173 to i64, !dbg !30
  %175 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %174, !dbg !30
  %176 = insertelement <1 x i16> undef, i16 %144, i64 0, !dbg !30
  store <1 x i16> %176, ptr addrspace(3) %175, align 2, !dbg !30
  %177 = shl nuw nsw i32 %112, 3, !dbg !30
  %178 = or i32 %177, %9, !dbg !30
  %179 = zext nneg i32 %178 to i64, !dbg !30
  %180 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %179, !dbg !30
  %181 = insertelement <1 x i16> undef, i16 %145, i64 0, !dbg !30
  store <1 x i16> %181, ptr addrspace(3) %180, align 2, !dbg !30
  %182 = shl nuw nsw i32 %117, 3, !dbg !30
  %183 = or i32 %182, %9, !dbg !30
  %184 = zext nneg i32 %183 to i64, !dbg !30
  %185 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %184, !dbg !30
  %186 = insertelement <1 x i16> undef, i16 %146, i64 0, !dbg !30
  store <1 x i16> %186, ptr addrspace(3) %185, align 2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %187 = shl nuw nsw i32 %urem, 3, !dbg !30
  %188 = zext nneg i32 %187 to i64, !dbg !30
  %189 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %188, !dbg !30
  %190 = load i16, ptr addrspace(3) %189, align 8, !dbg !30
  %191 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %189, i64 0, i64 1, !dbg !30
  %192 = load i16, ptr addrspace(3) %191, align 2, !dbg !30
  %193 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %189, i64 0, i64 2, !dbg !30
  %194 = load i16, ptr addrspace(3) %193, align 4, !dbg !30
  %195 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %189, i64 0, i64 3, !dbg !30
  %196 = load i16, ptr addrspace(3) %195, align 2, !dbg !30
  %197 = shl nuw nsw i32 %10, 3, !dbg !30
  %198 = zext nneg i32 %197 to i64, !dbg !30
  %199 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %198, !dbg !30
  %200 = load i16, ptr addrspace(3) %199, align 8, !dbg !30
  %201 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %199, i64 0, i64 1, !dbg !30
  %202 = load i16, ptr addrspace(3) %201, align 2, !dbg !30
  %203 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %199, i64 0, i64 2, !dbg !30
  %204 = load i16, ptr addrspace(3) %203, align 4, !dbg !30
  %205 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %199, i64 0, i64 3, !dbg !30
  %206 = load i16, ptr addrspace(3) %205, align 2, !dbg !30
  %207 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %190) #2, !dbg !30
  %208 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %192) #2, !dbg !30
  %209 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %194) #2, !dbg !30
  %210 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %196) #2, !dbg !30
  %211 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %200) #2, !dbg !30
  %212 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %202) #2, !dbg !30
  %213 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %204) #2, !dbg !30
  %214 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #2, !dbg !30
  %215 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #2, !dbg !30
  %216 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %140) #2, !dbg !30
  %217 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %141) #2, !dbg !30
  %218 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %142) #2, !dbg !30
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %143) #2, !dbg !30
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #2, !dbg !30
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #2, !dbg !30
  %222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #2, !dbg !30
  %223 = add nsw i32 %.decomposed, 524288, !dbg !31
  %224 = add i32 %27, %31, !dbg !32
  %225 = add i32 %224, %223, !dbg !33
  %226 = add i32 %28, %31, !dbg !32
  %227 = add i32 %226, %223, !dbg !33
  %228 = sext i32 %225 to i64, !dbg !34
  %229 = getelementptr i16, ptr addrspace(1) %0, i64 %228, !dbg !34
  %230 = sext i32 %227 to i64, !dbg !34
  %231 = getelementptr i16, ptr addrspace(1) %0, i64 %230, !dbg !34
  %232 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %229, i1 %21) #2, !dbg !35
  %233 = extractvalue { i32, i32 } %232, 0, !dbg !35
  %234 = extractvalue { i32, i32 } %232, 1, !dbg !35
  %235 = trunc i32 %233 to i16, !dbg !35
  %extelt.offset8 = lshr i32 %233, 16, !dbg !35
  %236 = trunc i32 %extelt.offset8 to i16, !dbg !35
  %237 = trunc i32 %234 to i16, !dbg !35
  %extelt.offset9 = lshr i32 %234, 16, !dbg !35
  %238 = trunc i32 %extelt.offset9 to i16, !dbg !35
  %239 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %231, i1 %22) #2, !dbg !35
  %240 = extractvalue { i32, i32 } %239, 0, !dbg !35
  %241 = extractvalue { i32, i32 } %239, 1, !dbg !35
  %242 = trunc i32 %240 to i16, !dbg !35
  %extelt.offset10 = lshr i32 %240, 16, !dbg !35
  %243 = trunc i32 %extelt.offset10 to i16, !dbg !35
  %244 = trunc i32 %241 to i16, !dbg !35
  %extelt.offset11 = lshr i32 %241, 16, !dbg !35
  %245 = trunc i32 %extelt.offset11 to i16, !dbg !35
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #2, !dbg !36
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #2, !dbg !36
  %248 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %237) #2, !dbg !36
  %249 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %238) #2, !dbg !36
  %250 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %242) #2, !dbg !36
  %251 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %243) #2, !dbg !36
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %244) #2, !dbg !36
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %245) #2, !dbg !36
  %254 = icmp sgt i32 %18, 255, !dbg !37
  %255 = icmp sgt i32 %19, 255, !dbg !37
  %256 = icmp sgt i32 %20, 255, !dbg !37
  %257 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !38
  %258 = extractvalue { i32, i32 } %257, 0, !dbg !38
  %259 = extractvalue { i32, i32 } %257, 1, !dbg !38
  %260 = trunc i32 %258 to i16, !dbg !38
  %extelt.offset12 = lshr i32 %258, 16, !dbg !38
  %261 = trunc i32 %extelt.offset12 to i16, !dbg !38
  %262 = trunc i32 %259 to i16, !dbg !38
  %extelt.offset13 = lshr i32 %259, 16, !dbg !38
  %263 = trunc i32 %extelt.offset13 to i16, !dbg !38
  %264 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !38
  %265 = extractvalue { i32, i32 } %264, 0, !dbg !38
  %266 = extractvalue { i32, i32 } %264, 1, !dbg !38
  %267 = trunc i32 %265 to i16, !dbg !38
  %extelt.offset14 = lshr i32 %265, 16, !dbg !38
  %268 = trunc i32 %extelt.offset14 to i16, !dbg !38
  %269 = trunc i32 %266 to i16, !dbg !38
  %extelt.offset15 = lshr i32 %266, 16, !dbg !38
  %270 = trunc i32 %extelt.offset15 to i16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %271 = insertelement <1 x i16> undef, i16 %260, i64 0, !dbg !39
  store <1 x i16> %271, ptr addrspace(3) %53, align 2, !dbg !39
  %272 = insertelement <1 x i16> undef, i16 %261, i64 0, !dbg !39
  store <1 x i16> %272, ptr addrspace(3) %57, align 2, !dbg !39
  %273 = insertelement <1 x i16> undef, i16 %262, i64 0, !dbg !39
  store <1 x i16> %273, ptr addrspace(3) %61, align 2, !dbg !39
  %274 = insertelement <1 x i16> undef, i16 %263, i64 0, !dbg !39
  store <1 x i16> %274, ptr addrspace(3) %65, align 2, !dbg !39
  %275 = insertelement <1 x i16> undef, i16 %267, i64 0, !dbg !39
  store <1 x i16> %275, ptr addrspace(3) %68, align 2, !dbg !39
  %276 = insertelement <1 x i16> undef, i16 %268, i64 0, !dbg !39
  store <1 x i16> %276, ptr addrspace(3) %72, align 2, !dbg !39
  %277 = insertelement <1 x i16> undef, i16 %269, i64 0, !dbg !39
  store <1 x i16> %277, ptr addrspace(3) %76, align 2, !dbg !39
  %278 = insertelement <1 x i16> undef, i16 %270, i64 0, !dbg !39
  store <1 x i16> %278, ptr addrspace(3) %80, align 2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %279 = load i16, ptr addrspace(3) %85, align 2, !dbg !39
  %280 = load i16, ptr addrspace(3) %90, align 2, !dbg !39
  %281 = load i16, ptr addrspace(3) %95, align 2, !dbg !39
  %282 = load i16, ptr addrspace(3) %100, align 2, !dbg !39
  %283 = load i16, ptr addrspace(3) %105, align 2, !dbg !39
  %284 = load i16, ptr addrspace(3) %110, align 2, !dbg !39
  %285 = load i16, ptr addrspace(3) %115, align 2, !dbg !39
  %286 = load i16, ptr addrspace(3) %120, align 2, !dbg !39
  %287 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %279) #2, !dbg !40
  %288 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %280) #2, !dbg !40
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %281) #2, !dbg !40
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %282) #2, !dbg !40
  %291 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %283) #2, !dbg !40
  %292 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %284) #2, !dbg !40
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #2, !dbg !40
  %294 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #2, !dbg !40
  %295 = select i1 %256, float %287, float 0.000000e+00, !dbg !39
  %296 = select i1 %256, float %288, float 0.000000e+00, !dbg !39
  %297 = select i1 %256, float %289, float 0.000000e+00, !dbg !39
  %298 = select i1 %256, float %290, float 0.000000e+00, !dbg !39
  %299 = select i1 %256, float %291, float 0.000000e+00, !dbg !39
  %300 = select i1 %256, float %292, float 0.000000e+00, !dbg !39
  %301 = select i1 %256, float %293, float 0.000000e+00, !dbg !39
  %302 = select i1 %256, float %294, float 0.000000e+00, !dbg !39
  %303 = fmul float %122, %215, !dbg !41
  %304 = fmul float %123, %216, !dbg !41
  %305 = fmul float %124, %217, !dbg !41
  %306 = fmul float %125, %218, !dbg !41
  %307 = fmul float %126, %219, !dbg !41
  %308 = fmul float %127, %220, !dbg !41
  %309 = fmul float %128, %221, !dbg !41
  %310 = fmul float %129, %222, !dbg !41
  %311 = icmp sgt i32 %18, 127, !dbg !42
  %312 = icmp sgt i32 %19, 127, !dbg !42
  %313 = icmp sgt i32 %20, 127, !dbg !42
  %314 = add nsw i32 %.decomposed, -262144, !dbg !43
  %315 = add i32 %224, %314, !dbg !44
  %316 = add i32 %226, %314, !dbg !44
  %317 = sext i32 %315 to i64, !dbg !45
  %318 = getelementptr i16, ptr addrspace(1) %0, i64 %317, !dbg !45
  %319 = sext i32 %316 to i64, !dbg !45
  %320 = getelementptr i16, ptr addrspace(1) %0, i64 %319, !dbg !45
  %321 = icmp eq i32 %17, 0, !dbg !46
  %322 = and i32 %20, -128, !dbg !46
  %323 = icmp eq i32 %322, 128, !dbg !46
  %324 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %318, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !47
  %325 = extractvalue { i32, i32 } %324, 0, !dbg !47
  %326 = extractvalue { i32, i32 } %324, 1, !dbg !47
  %327 = trunc i32 %325 to i16, !dbg !47
  %extelt.offset16 = lshr i32 %325, 16, !dbg !47
  %328 = trunc i32 %extelt.offset16 to i16, !dbg !47
  %329 = trunc i32 %326 to i16, !dbg !47
  %extelt.offset17 = lshr i32 %326, 16, !dbg !47
  %330 = trunc i32 %extelt.offset17 to i16, !dbg !47
  %331 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %320, i1 %321, i32 0, i1 %321, i32 0, i1 %321) #2, !dbg !47
  %332 = extractvalue { i32, i32 } %331, 0, !dbg !47
  %333 = extractvalue { i32, i32 } %331, 1, !dbg !47
  %334 = trunc i32 %332 to i16, !dbg !47
  %extelt.offset18 = lshr i32 %332, 16, !dbg !47
  %335 = trunc i32 %extelt.offset18 to i16, !dbg !47
  %336 = trunc i32 %333 to i16, !dbg !47
  %extelt.offset19 = lshr i32 %333, 16, !dbg !47
  %337 = trunc i32 %extelt.offset19 to i16, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %338 = insertelement <1 x i16> undef, i16 %327, i64 0, !dbg !48
  store <1 x i16> %338, ptr addrspace(3) %53, align 2, !dbg !48
  %339 = insertelement <1 x i16> undef, i16 %328, i64 0, !dbg !48
  store <1 x i16> %339, ptr addrspace(3) %57, align 2, !dbg !48
  %340 = insertelement <1 x i16> undef, i16 %329, i64 0, !dbg !48
  store <1 x i16> %340, ptr addrspace(3) %61, align 2, !dbg !48
  %341 = insertelement <1 x i16> undef, i16 %330, i64 0, !dbg !48
  store <1 x i16> %341, ptr addrspace(3) %65, align 2, !dbg !48
  %342 = insertelement <1 x i16> undef, i16 %334, i64 0, !dbg !48
  store <1 x i16> %342, ptr addrspace(3) %68, align 2, !dbg !48
  %343 = insertelement <1 x i16> undef, i16 %335, i64 0, !dbg !48
  store <1 x i16> %343, ptr addrspace(3) %72, align 2, !dbg !48
  %344 = insertelement <1 x i16> undef, i16 %336, i64 0, !dbg !48
  store <1 x i16> %344, ptr addrspace(3) %76, align 2, !dbg !48
  %345 = insertelement <1 x i16> undef, i16 %337, i64 0, !dbg !48
  store <1 x i16> %345, ptr addrspace(3) %80, align 2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %346 = load i16, ptr addrspace(3) %85, align 2, !dbg !48
  %347 = load i16, ptr addrspace(3) %90, align 2, !dbg !48
  %348 = load i16, ptr addrspace(3) %95, align 2, !dbg !48
  %349 = load i16, ptr addrspace(3) %100, align 2, !dbg !48
  %350 = load i16, ptr addrspace(3) %105, align 2, !dbg !48
  %351 = load i16, ptr addrspace(3) %110, align 2, !dbg !48
  %352 = load i16, ptr addrspace(3) %115, align 2, !dbg !48
  %353 = load i16, ptr addrspace(3) %120, align 2, !dbg !48
  %354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #2, !dbg !48
  %355 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %347) #2, !dbg !48
  %356 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %348) #2, !dbg !48
  %357 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %349) #2, !dbg !48
  %358 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %350) #2, !dbg !48
  %359 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %351) #2, !dbg !48
  %360 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %352) #2, !dbg !48
  %361 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %353) #2, !dbg !48
  %362 = add i32 %131, -128, !dbg !49
  %363 = sext i32 %362 to i64, !dbg !50
  %364 = getelementptr i16, ptr addrspace(1) %2, i64 %363, !dbg !50
  %365 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %364, i1 %323, i32 0, i1 %323, i32 0, i1 %323, i32 0, i1 %323, i32 0, i1 %323) #2, !dbg !51
  %366 = extractvalue { i32, i32, i32, i32 } %365, 0, !dbg !51
  %367 = extractvalue { i32, i32, i32, i32 } %365, 1, !dbg !51
  %368 = extractvalue { i32, i32, i32, i32 } %365, 2, !dbg !51
  %369 = extractvalue { i32, i32, i32, i32 } %365, 3, !dbg !51
  %370 = trunc i32 %366 to i16, !dbg !51
  %extelt.offset20 = lshr i32 %366, 16, !dbg !51
  %371 = trunc i32 %extelt.offset20 to i16, !dbg !51
  %372 = trunc i32 %367 to i16, !dbg !51
  %extelt.offset21 = lshr i32 %367, 16, !dbg !51
  %373 = trunc i32 %extelt.offset21 to i16, !dbg !51
  %374 = trunc i32 %368 to i16, !dbg !51
  %extelt.offset22 = lshr i32 %368, 16, !dbg !51
  %375 = trunc i32 %extelt.offset22 to i16, !dbg !51
  %376 = trunc i32 %369 to i16, !dbg !51
  %extelt.offset23 = lshr i32 %369, 16, !dbg !51
  %377 = trunc i32 %extelt.offset23 to i16, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %378 = insertelement <1 x i16> undef, i16 %370, i64 0, !dbg !52
  store <1 x i16> %378, ptr addrspace(3) %150, align 2, !dbg !52
  %379 = insertelement <1 x i16> undef, i16 %371, i64 0, !dbg !52
  store <1 x i16> %379, ptr addrspace(3) %155, align 2, !dbg !52
  %380 = insertelement <1 x i16> undef, i16 %372, i64 0, !dbg !52
  store <1 x i16> %380, ptr addrspace(3) %160, align 2, !dbg !52
  %381 = insertelement <1 x i16> undef, i16 %373, i64 0, !dbg !52
  store <1 x i16> %381, ptr addrspace(3) %165, align 2, !dbg !52
  %382 = insertelement <1 x i16> undef, i16 %374, i64 0, !dbg !52
  store <1 x i16> %382, ptr addrspace(3) %170, align 2, !dbg !52
  %383 = insertelement <1 x i16> undef, i16 %375, i64 0, !dbg !52
  store <1 x i16> %383, ptr addrspace(3) %175, align 2, !dbg !52
  %384 = insertelement <1 x i16> undef, i16 %376, i64 0, !dbg !52
  store <1 x i16> %384, ptr addrspace(3) %180, align 2, !dbg !52
  %385 = insertelement <1 x i16> undef, i16 %377, i64 0, !dbg !52
  store <1 x i16> %385, ptr addrspace(3) %185, align 2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %386 = load i16, ptr addrspace(3) %189, align 8, !dbg !52
  %387 = load i16, ptr addrspace(3) %191, align 2, !dbg !52
  %388 = load i16, ptr addrspace(3) %193, align 4, !dbg !52
  %389 = load i16, ptr addrspace(3) %195, align 2, !dbg !52
  %390 = load i16, ptr addrspace(3) %199, align 8, !dbg !52
  %391 = load i16, ptr addrspace(3) %201, align 2, !dbg !52
  %392 = load i16, ptr addrspace(3) %203, align 4, !dbg !52
  %393 = load i16, ptr addrspace(3) %205, align 2, !dbg !52
  %394 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %386) #2, !dbg !52
  %395 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %387) #2, !dbg !52
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %388) #2, !dbg !52
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %389) #2, !dbg !52
  %398 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %390) #2, !dbg !52
  %399 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %391) #2, !dbg !52
  %400 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %392) #2, !dbg !52
  %401 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %393) #2, !dbg !52
  %402 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %370) #2, !dbg !52
  %403 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %371) #2, !dbg !52
  %404 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %372) #2, !dbg !52
  %405 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %373) #2, !dbg !52
  %406 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %374) #2, !dbg !52
  %407 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #2, !dbg !52
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %376) #2, !dbg !52
  %409 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #2, !dbg !52
  %410 = fmul float %354, %402, !dbg !53
  %411 = fmul float %355, %403, !dbg !53
  %412 = fmul float %356, %404, !dbg !53
  %413 = fmul float %357, %405, !dbg !53
  %414 = fmul float %358, %406, !dbg !53
  %415 = fmul float %359, %407, !dbg !53
  %416 = fmul float %360, %408, !dbg !53
  %417 = fmul float %361, %409, !dbg !53
  %418 = fsub float 0.000000e+00, %410, !dbg !54
  %419 = fsub float 0.000000e+00, %411, !dbg !54
  %420 = fsub float 0.000000e+00, %412, !dbg !54
  %421 = fsub float 0.000000e+00, %413, !dbg !54
  %422 = fsub float 0.000000e+00, %414, !dbg !54
  %423 = fsub float 0.000000e+00, %415, !dbg !54
  %424 = fsub float 0.000000e+00, %416, !dbg !54
  %425 = fsub float 0.000000e+00, %417, !dbg !54
  %426 = select i1 %313, float %418, float 0.000000e+00, !dbg !39
  %427 = select i1 %313, float %419, float 0.000000e+00, !dbg !39
  %428 = select i1 %313, float %420, float 0.000000e+00, !dbg !39
  %429 = select i1 %313, float %421, float 0.000000e+00, !dbg !39
  %430 = select i1 %313, float %422, float 0.000000e+00, !dbg !39
  %431 = select i1 %313, float %423, float 0.000000e+00, !dbg !39
  %432 = select i1 %313, float %424, float 0.000000e+00, !dbg !39
  %433 = select i1 %313, float %425, float 0.000000e+00, !dbg !39
  %434 = fadd float %303, %426, !dbg !55
  %435 = fadd float %304, %427, !dbg !55
  %436 = fadd float %305, %428, !dbg !55
  %437 = fadd float %306, %429, !dbg !55
  %438 = fadd float %307, %430, !dbg !55
  %439 = fadd float %308, %431, !dbg !55
  %440 = fadd float %309, %432, !dbg !55
  %441 = fadd float %310, %433, !dbg !55
  %442 = icmp slt i32 %18, 128, !dbg !56
  %443 = icmp slt i32 %19, 128, !dbg !56
  %444 = icmp slt i32 %20, 128, !dbg !56
  %445 = add nsw i32 %.decomposed, 262144, !dbg !57
  %446 = add i32 %224, %445, !dbg !58
  %447 = add i32 %226, %445, !dbg !58
  %448 = sext i32 %446 to i64, !dbg !59
  %449 = getelementptr i16, ptr addrspace(1) %0, i64 %448, !dbg !59
  %450 = sext i32 %447 to i64, !dbg !59
  %451 = getelementptr i16, ptr addrspace(1) %0, i64 %450, !dbg !59
  %452 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %449, i1 %442, i32 0, i1 %442, i32 0, i1 %442) #2, !dbg !60
  %453 = extractvalue { i32, i32 } %452, 0, !dbg !60
  %454 = extractvalue { i32, i32 } %452, 1, !dbg !60
  %455 = trunc i32 %453 to i16, !dbg !60
  %extelt.offset24 = lshr i32 %453, 16, !dbg !60
  %456 = trunc i32 %extelt.offset24 to i16, !dbg !60
  %457 = trunc i32 %454 to i16, !dbg !60
  %extelt.offset25 = lshr i32 %454, 16, !dbg !60
  %458 = trunc i32 %extelt.offset25 to i16, !dbg !60
  %459 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %451, i1 %443, i32 0, i1 %443, i32 0, i1 %443) #2, !dbg !60
  %460 = extractvalue { i32, i32 } %459, 0, !dbg !60
  %461 = extractvalue { i32, i32 } %459, 1, !dbg !60
  %462 = trunc i32 %460 to i16, !dbg !60
  %extelt.offset26 = lshr i32 %460, 16, !dbg !60
  %463 = trunc i32 %extelt.offset26 to i16, !dbg !60
  %464 = trunc i32 %461 to i16, !dbg !60
  %extelt.offset27 = lshr i32 %461, 16, !dbg !60
  %465 = trunc i32 %extelt.offset27 to i16, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %466 = insertelement <1 x i16> undef, i16 %455, i64 0, !dbg !61
  store <1 x i16> %466, ptr addrspace(3) %53, align 2, !dbg !61
  %467 = insertelement <1 x i16> undef, i16 %456, i64 0, !dbg !61
  store <1 x i16> %467, ptr addrspace(3) %57, align 2, !dbg !61
  %468 = insertelement <1 x i16> undef, i16 %457, i64 0, !dbg !61
  store <1 x i16> %468, ptr addrspace(3) %61, align 2, !dbg !61
  %469 = insertelement <1 x i16> undef, i16 %458, i64 0, !dbg !61
  store <1 x i16> %469, ptr addrspace(3) %65, align 2, !dbg !61
  %470 = insertelement <1 x i16> undef, i16 %462, i64 0, !dbg !61
  store <1 x i16> %470, ptr addrspace(3) %68, align 2, !dbg !61
  %471 = insertelement <1 x i16> undef, i16 %463, i64 0, !dbg !61
  store <1 x i16> %471, ptr addrspace(3) %72, align 2, !dbg !61
  %472 = insertelement <1 x i16> undef, i16 %464, i64 0, !dbg !61
  store <1 x i16> %472, ptr addrspace(3) %76, align 2, !dbg !61
  %473 = insertelement <1 x i16> undef, i16 %465, i64 0, !dbg !61
  store <1 x i16> %473, ptr addrspace(3) %80, align 2, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %474 = load i16, ptr addrspace(3) %85, align 2, !dbg !61
  %475 = load i16, ptr addrspace(3) %90, align 2, !dbg !61
  %476 = load i16, ptr addrspace(3) %95, align 2, !dbg !61
  %477 = load i16, ptr addrspace(3) %100, align 2, !dbg !61
  %478 = load i16, ptr addrspace(3) %105, align 2, !dbg !61
  %479 = load i16, ptr addrspace(3) %110, align 2, !dbg !61
  %480 = load i16, ptr addrspace(3) %115, align 2, !dbg !61
  %481 = load i16, ptr addrspace(3) %120, align 2, !dbg !61
  %482 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %474) #2, !dbg !61
  %483 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %475) #2, !dbg !61
  %484 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %476) #2, !dbg !61
  %485 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %477) #2, !dbg !61
  %486 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %478) #2, !dbg !61
  %487 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %479) #2, !dbg !61
  %488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #2, !dbg !61
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #2, !dbg !61
  %490 = add i32 %131, 128, !dbg !62
  %491 = sext i32 %490 to i64, !dbg !63
  %492 = getelementptr i16, ptr addrspace(1) %2, i64 %491, !dbg !63
  %493 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %492, i1 %444, i32 0, i1 %444, i32 0, i1 %444, i32 0, i1 %444, i32 0, i1 %444) #2, !dbg !64
  %494 = extractvalue { i32, i32, i32, i32 } %493, 0, !dbg !64
  %495 = extractvalue { i32, i32, i32, i32 } %493, 1, !dbg !64
  %496 = extractvalue { i32, i32, i32, i32 } %493, 2, !dbg !64
  %497 = extractvalue { i32, i32, i32, i32 } %493, 3, !dbg !64
  %498 = trunc i32 %494 to i16, !dbg !64
  %extelt.offset28 = lshr i32 %494, 16, !dbg !64
  %499 = trunc i32 %extelt.offset28 to i16, !dbg !64
  %500 = trunc i32 %495 to i16, !dbg !64
  %extelt.offset29 = lshr i32 %495, 16, !dbg !64
  %501 = trunc i32 %extelt.offset29 to i16, !dbg !64
  %502 = trunc i32 %496 to i16, !dbg !64
  %extelt.offset30 = lshr i32 %496, 16, !dbg !64
  %503 = trunc i32 %extelt.offset30 to i16, !dbg !64
  %504 = trunc i32 %497 to i16, !dbg !64
  %extelt.offset31 = lshr i32 %497, 16, !dbg !64
  %505 = trunc i32 %extelt.offset31 to i16, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %506 = insertelement <1 x i16> undef, i16 %498, i64 0, !dbg !65
  store <1 x i16> %506, ptr addrspace(3) %150, align 2, !dbg !65
  %507 = insertelement <1 x i16> undef, i16 %499, i64 0, !dbg !65
  store <1 x i16> %507, ptr addrspace(3) %155, align 2, !dbg !65
  %508 = insertelement <1 x i16> undef, i16 %500, i64 0, !dbg !65
  store <1 x i16> %508, ptr addrspace(3) %160, align 2, !dbg !65
  %509 = insertelement <1 x i16> undef, i16 %501, i64 0, !dbg !65
  store <1 x i16> %509, ptr addrspace(3) %165, align 2, !dbg !65
  %510 = insertelement <1 x i16> undef, i16 %502, i64 0, !dbg !65
  store <1 x i16> %510, ptr addrspace(3) %170, align 2, !dbg !65
  %511 = insertelement <1 x i16> undef, i16 %503, i64 0, !dbg !65
  store <1 x i16> %511, ptr addrspace(3) %175, align 2, !dbg !65
  %512 = insertelement <1 x i16> undef, i16 %504, i64 0, !dbg !65
  store <1 x i16> %512, ptr addrspace(3) %180, align 2, !dbg !65
  %513 = insertelement <1 x i16> undef, i16 %505, i64 0, !dbg !65
  store <1 x i16> %513, ptr addrspace(3) %185, align 2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %514 = load i16, ptr addrspace(3) %189, align 8, !dbg !65
  %515 = load i16, ptr addrspace(3) %191, align 2, !dbg !65
  %516 = load i16, ptr addrspace(3) %193, align 4, !dbg !65
  %517 = load i16, ptr addrspace(3) %195, align 2, !dbg !65
  %518 = load i16, ptr addrspace(3) %199, align 8, !dbg !65
  %519 = load i16, ptr addrspace(3) %201, align 2, !dbg !65
  %520 = load i16, ptr addrspace(3) %203, align 4, !dbg !65
  %521 = load i16, ptr addrspace(3) %205, align 2, !dbg !65
  %522 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %514) #2, !dbg !65
  %523 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %515) #2, !dbg !65
  %524 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %516) #2, !dbg !65
  %525 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %517) #2, !dbg !65
  %526 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %518) #2, !dbg !65
  %527 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #2, !dbg !65
  %528 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #2, !dbg !65
  %529 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %521) #2, !dbg !65
  %530 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %498) #2, !dbg !65
  %531 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %499) #2, !dbg !65
  %532 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %500) #2, !dbg !65
  %533 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %501) #2, !dbg !65
  %534 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %502) #2, !dbg !65
  %535 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %503) #2, !dbg !65
  %536 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %504) #2, !dbg !65
  %537 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #2, !dbg !65
  %538 = fmul float %482, %530, !dbg !66
  %539 = fmul float %483, %531, !dbg !66
  %540 = fmul float %484, %532, !dbg !66
  %541 = fmul float %485, %533, !dbg !66
  %542 = fmul float %486, %534, !dbg !66
  %543 = fmul float %487, %535, !dbg !66
  %544 = fmul float %488, %536, !dbg !66
  %545 = fmul float %489, %537, !dbg !66
  %546 = select i1 %444, float %538, float 0.000000e+00, !dbg !39
  %547 = select i1 %444, float %539, float 0.000000e+00, !dbg !39
  %548 = select i1 %444, float %540, float 0.000000e+00, !dbg !39
  %549 = select i1 %444, float %541, float 0.000000e+00, !dbg !39
  %550 = select i1 %444, float %542, float 0.000000e+00, !dbg !39
  %551 = select i1 %444, float %543, float 0.000000e+00, !dbg !39
  %552 = select i1 %444, float %544, float 0.000000e+00, !dbg !39
  %553 = select i1 %444, float %545, float 0.000000e+00, !dbg !39
  %554 = fadd float %434, %546, !dbg !67
  %555 = fadd float %435, %547, !dbg !67
  %556 = fadd float %436, %548, !dbg !67
  %557 = fadd float %437, %549, !dbg !67
  %558 = fadd float %438, %550, !dbg !67
  %559 = fadd float %439, %551, !dbg !67
  %560 = fadd float %440, %552, !dbg !67
  %561 = fadd float %441, %553, !dbg !67
  %562 = fadd float %295, %554, !dbg !68
  %563 = fadd float %296, %555, !dbg !68
  %564 = fadd float %297, %556, !dbg !68
  %565 = fadd float %298, %557, !dbg !68
  %566 = fadd float %299, %558, !dbg !68
  %567 = fadd float %300, %559, !dbg !68
  %568 = fadd float %301, %560, !dbg !68
  %569 = fadd float %302, %561, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %570 = getelementptr float, ptr addrspace(3) @global_smem, i64 %149, !dbg !68
  %571 = insertelement <1 x float> undef, float %562, i64 0, !dbg !68
  store <1 x float> %571, ptr addrspace(3) %570, align 4, !dbg !68
  %572 = getelementptr float, ptr addrspace(3) @global_smem, i64 %154, !dbg !68
  %573 = insertelement <1 x float> undef, float %563, i64 0, !dbg !68
  store <1 x float> %573, ptr addrspace(3) %572, align 4, !dbg !68
  %574 = getelementptr float, ptr addrspace(3) @global_smem, i64 %159, !dbg !68
  %575 = insertelement <1 x float> undef, float %564, i64 0, !dbg !68
  store <1 x float> %575, ptr addrspace(3) %574, align 4, !dbg !68
  %576 = getelementptr float, ptr addrspace(3) @global_smem, i64 %164, !dbg !68
  %577 = insertelement <1 x float> undef, float %565, i64 0, !dbg !68
  store <1 x float> %577, ptr addrspace(3) %576, align 4, !dbg !68
  %578 = getelementptr float, ptr addrspace(3) @global_smem, i64 %169, !dbg !68
  %579 = insertelement <1 x float> undef, float %566, i64 0, !dbg !68
  store <1 x float> %579, ptr addrspace(3) %578, align 4, !dbg !68
  %580 = getelementptr float, ptr addrspace(3) @global_smem, i64 %174, !dbg !68
  %581 = insertelement <1 x float> undef, float %567, i64 0, !dbg !68
  store <1 x float> %581, ptr addrspace(3) %580, align 4, !dbg !68
  %582 = getelementptr float, ptr addrspace(3) @global_smem, i64 %179, !dbg !68
  %583 = insertelement <1 x float> undef, float %568, i64 0, !dbg !68
  store <1 x float> %583, ptr addrspace(3) %582, align 4, !dbg !68
  %584 = getelementptr float, ptr addrspace(3) @global_smem, i64 %184, !dbg !68
  %585 = insertelement <1 x float> undef, float %569, i64 0, !dbg !68
  store <1 x float> %585, ptr addrspace(3) %584, align 4, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %586 = getelementptr float, ptr addrspace(3) @global_smem, i64 %188, !dbg !68
  %587 = load float, ptr addrspace(3) %586, align 16, !dbg !68
  %588 = getelementptr inbounds <4 x float>, ptr addrspace(3) %586, i64 0, i64 1, !dbg !68
  %589 = load float, ptr addrspace(3) %588, align 4, !dbg !68
  %590 = getelementptr inbounds <4 x float>, ptr addrspace(3) %586, i64 0, i64 2, !dbg !68
  %591 = load float, ptr addrspace(3) %590, align 8, !dbg !68
  %592 = getelementptr inbounds <4 x float>, ptr addrspace(3) %586, i64 0, i64 3, !dbg !68
  %593 = load float, ptr addrspace(3) %592, align 4, !dbg !68
  %594 = getelementptr float, ptr addrspace(3) @global_smem, i64 %198, !dbg !68
  %595 = load float, ptr addrspace(3) %594, align 16, !dbg !68
  %596 = getelementptr inbounds <4 x float>, ptr addrspace(3) %594, i64 0, i64 1, !dbg !68
  %597 = load float, ptr addrspace(3) %596, align 4, !dbg !68
  %598 = getelementptr inbounds <4 x float>, ptr addrspace(3) %594, i64 0, i64 2, !dbg !68
  %599 = load float, ptr addrspace(3) %598, align 8, !dbg !68
  %600 = getelementptr inbounds <4 x float>, ptr addrspace(3) %594, i64 0, i64 3, !dbg !68
  %601 = load float, ptr addrspace(3) %600, align 4, !dbg !68
  %602 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %229, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !69
  %603 = extractvalue { i32, i32 } %602, 0, !dbg !69
  %604 = extractvalue { i32, i32 } %602, 1, !dbg !69
  %605 = trunc i32 %603 to i16, !dbg !69
  %extelt.offset32 = lshr i32 %603, 16, !dbg !69
  %606 = trunc i32 %extelt.offset32 to i16, !dbg !69
  %607 = trunc i32 %604 to i16, !dbg !69
  %extelt.offset33 = lshr i32 %604, 16, !dbg !69
  %608 = trunc i32 %extelt.offset33 to i16, !dbg !69
  %609 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %231, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !69
  %610 = extractvalue { i32, i32 } %609, 0, !dbg !69
  %611 = extractvalue { i32, i32 } %609, 1, !dbg !69
  %612 = trunc i32 %610 to i16, !dbg !69
  %extelt.offset34 = lshr i32 %610, 16, !dbg !69
  %613 = trunc i32 %extelt.offset34 to i16, !dbg !69
  %614 = trunc i32 %611 to i16, !dbg !69
  %extelt.offset35 = lshr i32 %611, 16, !dbg !69
  %615 = trunc i32 %extelt.offset35 to i16, !dbg !69
  %616 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %605) #2, !dbg !70
  %617 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %606) #2, !dbg !70
  %618 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %607) #2, !dbg !70
  %619 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %608) #2, !dbg !70
  %620 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %612) #2, !dbg !70
  %621 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %613) #2, !dbg !70
  %622 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %614) #2, !dbg !70
  %623 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %615) #2, !dbg !70
  %624 = select i1 %254, float %616, float 0.000000e+00, !dbg !39
  %625 = select i1 %254, float %617, float 0.000000e+00, !dbg !39
  %626 = select i1 %254, float %618, float 0.000000e+00, !dbg !39
  %627 = select i1 %254, float %619, float 0.000000e+00, !dbg !39
  %628 = select i1 %255, float %620, float 0.000000e+00, !dbg !39
  %629 = select i1 %255, float %621, float 0.000000e+00, !dbg !39
  %630 = select i1 %255, float %622, float 0.000000e+00, !dbg !39
  %631 = select i1 %255, float %623, float 0.000000e+00, !dbg !39
  %632 = fmul float %207, %246, !dbg !71
  %633 = fmul float %208, %247, !dbg !71
  %634 = fmul float %209, %248, !dbg !71
  %635 = fmul float %210, %249, !dbg !71
  %636 = fmul float %211, %250, !dbg !71
  %637 = fmul float %212, %251, !dbg !71
  %638 = fmul float %213, %252, !dbg !71
  %639 = fmul float %214, %253, !dbg !71
  %640 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %449, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !72
  %641 = extractvalue { i32, i32 } %640, 0, !dbg !72
  %642 = extractvalue { i32, i32 } %640, 1, !dbg !72
  %643 = trunc i32 %641 to i16, !dbg !72
  %extelt.offset36 = lshr i32 %641, 16, !dbg !72
  %644 = trunc i32 %extelt.offset36 to i16, !dbg !72
  %645 = trunc i32 %642 to i16, !dbg !72
  %extelt.offset37 = lshr i32 %642, 16, !dbg !72
  %646 = trunc i32 %extelt.offset37 to i16, !dbg !72
  %647 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %451, i1 %321, i32 0, i1 %321, i32 0, i1 %321) #2, !dbg !72
  %648 = extractvalue { i32, i32 } %647, 0, !dbg !72
  %649 = extractvalue { i32, i32 } %647, 1, !dbg !72
  %650 = trunc i32 %648 to i16, !dbg !72
  %extelt.offset38 = lshr i32 %648, 16, !dbg !72
  %651 = trunc i32 %extelt.offset38 to i16, !dbg !72
  %652 = trunc i32 %649 to i16, !dbg !72
  %extelt.offset39 = lshr i32 %649, 16, !dbg !72
  %653 = trunc i32 %extelt.offset39 to i16, !dbg !72
  %654 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %643) #2, !dbg !73
  %655 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %644) #2, !dbg !73
  %656 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %645) #2, !dbg !73
  %657 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %646) #2, !dbg !73
  %658 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %650) #2, !dbg !73
  %659 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %651) #2, !dbg !73
  %660 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %652) #2, !dbg !73
  %661 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %653) #2, !dbg !73
  %662 = fmul float %394, %654, !dbg !74
  %663 = fmul float %395, %655, !dbg !74
  %664 = fmul float %396, %656, !dbg !74
  %665 = fmul float %397, %657, !dbg !74
  %666 = fmul float %398, %658, !dbg !74
  %667 = fmul float %399, %659, !dbg !74
  %668 = fmul float %400, %660, !dbg !74
  %669 = fmul float %401, %661, !dbg !74
  %670 = fsub float 0.000000e+00, %662, !dbg !75
  %671 = fsub float 0.000000e+00, %663, !dbg !75
  %672 = fsub float 0.000000e+00, %664, !dbg !75
  %673 = fsub float 0.000000e+00, %665, !dbg !75
  %674 = fsub float 0.000000e+00, %666, !dbg !75
  %675 = fsub float 0.000000e+00, %667, !dbg !75
  %676 = fsub float 0.000000e+00, %668, !dbg !75
  %677 = fsub float 0.000000e+00, %669, !dbg !75
  %678 = select i1 %311, float %670, float 0.000000e+00, !dbg !39
  %679 = select i1 %311, float %671, float 0.000000e+00, !dbg !39
  %680 = select i1 %311, float %672, float 0.000000e+00, !dbg !39
  %681 = select i1 %311, float %673, float 0.000000e+00, !dbg !39
  %682 = select i1 %312, float %674, float 0.000000e+00, !dbg !39
  %683 = select i1 %312, float %675, float 0.000000e+00, !dbg !39
  %684 = select i1 %312, float %676, float 0.000000e+00, !dbg !39
  %685 = select i1 %312, float %677, float 0.000000e+00, !dbg !39
  %686 = fadd float %632, %678, !dbg !76
  %687 = fadd float %633, %679, !dbg !76
  %688 = fadd float %634, %680, !dbg !76
  %689 = fadd float %635, %681, !dbg !76
  %690 = fadd float %636, %682, !dbg !76
  %691 = fadd float %637, %683, !dbg !76
  %692 = fadd float %638, %684, !dbg !76
  %693 = fadd float %639, %685, !dbg !76
  %694 = add nsw i32 %.decomposed, 786432, !dbg !77
  %695 = add i32 %224, %694, !dbg !78
  %696 = add i32 %226, %694, !dbg !78
  %697 = sext i32 %695 to i64, !dbg !79
  %698 = getelementptr i16, ptr addrspace(1) %0, i64 %697, !dbg !79
  %699 = sext i32 %696 to i64, !dbg !79
  %700 = getelementptr i16, ptr addrspace(1) %0, i64 %699, !dbg !79
  %701 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %698, i1 %442, i32 0, i1 %442, i32 0, i1 %442) #2, !dbg !80
  %702 = extractvalue { i32, i32 } %701, 0, !dbg !80
  %703 = extractvalue { i32, i32 } %701, 1, !dbg !80
  %704 = trunc i32 %702 to i16, !dbg !80
  %extelt.offset40 = lshr i32 %702, 16, !dbg !80
  %705 = trunc i32 %extelt.offset40 to i16, !dbg !80
  %706 = trunc i32 %703 to i16, !dbg !80
  %extelt.offset41 = lshr i32 %703, 16, !dbg !80
  %707 = trunc i32 %extelt.offset41 to i16, !dbg !80
  %708 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %700, i1 %443, i32 0, i1 %443, i32 0, i1 %443) #2, !dbg !80
  %709 = extractvalue { i32, i32 } %708, 0, !dbg !80
  %710 = extractvalue { i32, i32 } %708, 1, !dbg !80
  %711 = trunc i32 %709 to i16, !dbg !80
  %extelt.offset42 = lshr i32 %709, 16, !dbg !80
  %712 = trunc i32 %extelt.offset42 to i16, !dbg !80
  %713 = trunc i32 %710 to i16, !dbg !80
  %extelt.offset43 = lshr i32 %710, 16, !dbg !80
  %714 = trunc i32 %extelt.offset43 to i16, !dbg !80
  %715 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %704) #2, !dbg !81
  %716 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %705) #2, !dbg !81
  %717 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %706) #2, !dbg !81
  %718 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %707) #2, !dbg !81
  %719 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %711) #2, !dbg !81
  %720 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %712) #2, !dbg !81
  %721 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %713) #2, !dbg !81
  %722 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %714) #2, !dbg !81
  %723 = fmul float %522, %715, !dbg !82
  %724 = fmul float %523, %716, !dbg !82
  %725 = fmul float %524, %717, !dbg !82
  %726 = fmul float %525, %718, !dbg !82
  %727 = fmul float %526, %719, !dbg !82
  %728 = fmul float %527, %720, !dbg !82
  %729 = fmul float %528, %721, !dbg !82
  %730 = fmul float %529, %722, !dbg !82
  %731 = select i1 %442, float %723, float 0.000000e+00, !dbg !39
  %732 = select i1 %442, float %724, float 0.000000e+00, !dbg !39
  %733 = select i1 %442, float %725, float 0.000000e+00, !dbg !39
  %734 = select i1 %442, float %726, float 0.000000e+00, !dbg !39
  %735 = select i1 %443, float %727, float 0.000000e+00, !dbg !39
  %736 = select i1 %443, float %728, float 0.000000e+00, !dbg !39
  %737 = select i1 %443, float %729, float 0.000000e+00, !dbg !39
  %738 = select i1 %443, float %730, float 0.000000e+00, !dbg !39
  %739 = fadd float %686, %731, !dbg !83
  %740 = fadd float %687, %732, !dbg !83
  %741 = fadd float %688, %733, !dbg !83
  %742 = fadd float %689, %734, !dbg !83
  %743 = fadd float %690, %735, !dbg !83
  %744 = fadd float %691, %736, !dbg !83
  %745 = fadd float %692, %737, !dbg !83
  %746 = fadd float %693, %738, !dbg !83
  %747 = fadd float %624, %739, !dbg !84
  %748 = fadd float %625, %740, !dbg !84
  %749 = fadd float %626, %741, !dbg !84
  %750 = fadd float %627, %742, !dbg !84
  %751 = fadd float %628, %743, !dbg !84
  %752 = fadd float %629, %744, !dbg !84
  %753 = fadd float %630, %745, !dbg !84
  %754 = fadd float %631, %746, !dbg !84
  %755 = fadd float %587, %747, !dbg !85
  %756 = fadd float %589, %748, !dbg !85
  %757 = fadd float %591, %749, !dbg !85
  %758 = fadd float %593, %750, !dbg !85
  %759 = fadd float %595, %751, !dbg !85
  %760 = fadd float %597, %752, !dbg !85
  %761 = fadd float %599, %753, !dbg !85
  %762 = fadd float %601, %754, !dbg !85
  %763 = shl i32 %24, 19, !dbg !86
  %764 = add i32 %29, %763, !dbg !87
  %765 = add i32 %30, %763, !dbg !87
  %766 = sext i32 %764 to i64, !dbg !88
  %767 = getelementptr float, ptr addrspace(1) %3, i64 %766, !dbg !88
  %768 = sext i32 %765 to i64, !dbg !88
  %769 = getelementptr float, ptr addrspace(1) %3, i64 %768, !dbg !88
  %770 = bitcast float %755 to i32, !dbg !89
  %771 = bitcast float %756 to i32, !dbg !89
  %772 = bitcast float %757 to i32, !dbg !89
  %773 = bitcast float %758 to i32, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %770, i32 %771, i32 %772, i32 %773, ptr addrspace(1) %767, i1 %21) #2, !dbg !89
  %774 = bitcast float %759 to i32, !dbg !89
  %775 = bitcast float %760 to i32, !dbg !89
  %776 = bitcast float %761 to i32, !dbg !89
  %777 = bitcast float %762 to i32, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %774, i32 %775, i32 %776, i32 %777, ptr addrspace(1) %769, i1 %22) #2, !dbg !89
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cfvbe7lddts67ya222b7u7fqo64gtye4nhhnwp4mr3xoexqwwswt.py", directory: "/tmp/torchinductor_zeus/fv")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 24, column: 28, scope: !5)
!14 = !DILocation(line: 24, column: 33, scope: !5)
!15 = !DILocation(line: 25, column: 23, scope: !5)
!16 = !DILocation(line: 26, column: 21, scope: !5)
!17 = !DILocation(line: 29, column: 20, scope: !5)
!18 = !DILocation(line: 28, column: 18, scope: !5)
!19 = !DILocation(line: 30, column: 41, scope: !5)
!20 = !DILocation(line: 30, column: 36, scope: !5)
!21 = !DILocation(line: 30, column: 56, scope: !5)
!22 = !DILocation(line: 30, column: 48, scope: !5)
!23 = !DILocation(line: 30, column: 30, scope: !5)
!24 = !DILocation(line: 30, column: 62, scope: !5)
!25 = !DILocation(line: 30, column: 102, scope: !5)
!26 = !DILocation(line: 31, column: 40, scope: !5)
!27 = !DILocation(line: 31, column: 36, scope: !5)
!28 = !DILocation(line: 31, column: 30, scope: !5)
!29 = !DILocation(line: 31, column: 46, scope: !5)
!30 = !DILocation(line: 31, column: 86, scope: !5)
!31 = !DILocation(line: 32, column: 40, scope: !5)
!32 = !DILocation(line: 32, column: 46, scope: !5)
!33 = !DILocation(line: 32, column: 58, scope: !5)
!34 = !DILocation(line: 32, column: 31, scope: !5)
!35 = !DILocation(line: 32, column: 72, scope: !5)
!36 = !DILocation(line: 32, column: 112, scope: !5)
!37 = !DILocation(line: 35, column: 19, scope: !5)
!38 = !DILocation(line: 36, column: 62, scope: !5)
!39 = !DILocation(line: 0, scope: !5)
!40 = !DILocation(line: 36, column: 120, scope: !5)
!41 = !DILocation(line: 41, column: 19, scope: !5)
!42 = !DILocation(line: 43, column: 20, scope: !5)
!43 = !DILocation(line: 44, column: 43, scope: !5)
!44 = !DILocation(line: 44, column: 61, scope: !5)
!45 = !DILocation(line: 44, column: 31, scope: !5)
!46 = !DILocation(line: 44, column: 83, scope: !5)
!47 = !DILocation(line: 44, column: 75, scope: !5)
!48 = !DILocation(line: 44, column: 134, scope: !5)
!49 = !DILocation(line: 45, column: 46, scope: !5)
!50 = !DILocation(line: 45, column: 31, scope: !5)
!51 = !DILocation(line: 45, column: 56, scope: !5)
!52 = !DILocation(line: 45, column: 115, scope: !5)
!53 = !DILocation(line: 46, column: 20, scope: !5)
!54 = !DILocation(line: 47, column: 13, scope: !5)
!55 = !DILocation(line: 51, column: 20, scope: !5)
!56 = !DILocation(line: 52, column: 19, scope: !5)
!57 = !DILocation(line: 53, column: 40, scope: !5)
!58 = !DILocation(line: 53, column: 58, scope: !5)
!59 = !DILocation(line: 53, column: 31, scope: !5)
!60 = !DILocation(line: 53, column: 72, scope: !5)
!61 = !DILocation(line: 53, column: 131, scope: !5)
!62 = !DILocation(line: 54, column: 43, scope: !5)
!63 = !DILocation(line: 54, column: 31, scope: !5)
!64 = !DILocation(line: 54, column: 53, scope: !5)
!65 = !DILocation(line: 54, column: 112, scope: !5)
!66 = !DILocation(line: 55, column: 20, scope: !5)
!67 = !DILocation(line: 59, column: 20, scope: !5)
!68 = !DILocation(line: 60, column: 19, scope: !5)
!69 = !DILocation(line: 62, column: 72, scope: !5)
!70 = !DILocation(line: 62, column: 130, scope: !5)
!71 = !DILocation(line: 66, column: 20, scope: !5)
!72 = !DILocation(line: 67, column: 72, scope: !5)
!73 = !DILocation(line: 67, column: 131, scope: !5)
!74 = !DILocation(line: 68, column: 20, scope: !5)
!75 = !DILocation(line: 69, column: 13, scope: !5)
!76 = !DILocation(line: 73, column: 20, scope: !5)
!77 = !DILocation(line: 74, column: 40, scope: !5)
!78 = !DILocation(line: 74, column: 58, scope: !5)
!79 = !DILocation(line: 74, column: 31, scope: !5)
!80 = !DILocation(line: 74, column: 72, scope: !5)
!81 = !DILocation(line: 74, column: 131, scope: !5)
!82 = !DILocation(line: 75, column: 20, scope: !5)
!83 = !DILocation(line: 79, column: 20, scope: !5)
!84 = !DILocation(line: 80, column: 20, scope: !5)
!85 = !DILocation(line: 82, column: 20, scope: !5)
!86 = !DILocation(line: 83, column: 50, scope: !5)
!87 = !DILocation(line: 83, column: 43, scope: !5)
!88 = !DILocation(line: 83, column: 25, scope: !5)
!89 = !DILocation(line: 83, column: 63, scope: !5)
!90 = !DILocation(line: 83, column: 4, scope: !5)
