module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x4xbf16>
    %cst_0 = arith.constant dense<786432> : tensor<1x4xi32>
    %cst_1 = arith.constant dense<128> : tensor<256x1xi32>
    %cst_2 = arith.constant dense<262144> : tensor<1x4xi32>
    %cst_3 = arith.constant dense<-128> : tensor<256x1xi32>
    %cst_4 = arith.constant dense<-262144> : tensor<1x4xi32>
    %cst_5 = arith.constant dense<128> : tensor<256x1xi64>
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<256x4xf32>
    %cst_7 = arith.constant dense<256> : tensor<256x1xi64>
    %cst_8 = arith.constant dense<524288> : tensor<1x4xi32>
    %cst_9 = arith.constant dense<256> : tensor<1x4xi32>
    %cst_10 = arith.constant dense<1048576> : tensor<1x4xi32>
    %cst_11 = arith.constant dense<2048> : tensor<256x1xi32>
    %cst_12 = arith.constant dense<2048> : tensor<1x4xi32>
    %cst_13 = arith.constant dense<256> : tensor<256x1xi32>
    %c4_i32 = arith.constant 4 : i32
    %c256_i32 = arith.constant 256 : i32
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c4_i32 : i32
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<4xi32>) -> tensor<1x4xi32>
    %4 = tt.splat %1 : (i32) -> tensor<1x4xi32>
    %5 = arith.addi %4, %3 : tensor<1x4xi32>
    %6 = tt.get_program_id x : i32
    %7 = arith.muli %6, %c256_i32 : i32
    %8 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32>
    %9 = tt.expand_dims %8 {axis = 1 : i32} : (tensor<256xi32>) -> tensor<256x1xi32>
    %10 = tt.splat %7 : (i32) -> tensor<256x1xi32>
    %11 = arith.addi %10, %9 : tensor<256x1xi32>
    %12 = arith.cmpi slt, %11, %cst_13 : tensor<256x1xi32>
    %13 = arith.remsi %5, %cst_12 : tensor<1x4xi32>
    %14 = arith.divsi %5, %cst_12 : tensor<1x4xi32>
    %15 = arith.muli %11, %cst_11 : tensor<256x1xi32>
    %16 = tt.broadcast %13 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %17 = tt.broadcast %15 : (tensor<256x1xi32>) -> tensor<256x4xi32>
    %18 = arith.addi %16, %17 : tensor<256x4xi32>
    %19 = arith.muli %14, %cst_10 : tensor<1x4xi32>
    %20 = tt.broadcast %19 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %21 = arith.addi %18, %20 : tensor<256x4xi32>
    %22 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<256x4x!tt.ptr<bf16, 1>>
    %23 = tt.addptr %22, %21 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %24 = tt.broadcast %12 : (tensor<256x1xi1>) -> tensor<256x4xi1>
    %25 = tt.load %23, %24 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %26 = arith.extf %25 : tensor<256x4xbf16> to tensor<256x4xf32>
    %27 = arith.muli %13, %cst_9 : tensor<1x4xi32>
    %28 = tt.broadcast %11 : (tensor<256x1xi32>) -> tensor<256x4xi32>
    %29 = tt.broadcast %27 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %30 = arith.addi %28, %29 : tensor<256x4xi32>
    %31 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<256x4x!tt.ptr<bf16, 1>>
    %32 = tt.addptr %31, %30 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %33 = tt.load %32, %24 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %34 = arith.extf %33 : tensor<256x4xbf16> to tensor<256x4xf32>
    %35 = arith.addi %13, %cst_8 : tensor<1x4xi32>
    %36 = tt.broadcast %35 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %37 = arith.addi %36, %17 : tensor<256x4xi32>
    %38 = arith.addi %37, %20 : tensor<256x4xi32>
    %39 = tt.addptr %22, %38 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %40 = tt.load %39, %24 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %41 = arith.extf %40 : tensor<256x4xbf16> to tensor<256x4xf32>
    %42 = arith.extsi %11 : tensor<256x1xi32> to tensor<256x1xi64>
    %43 = arith.cmpi sge, %42, %cst_7 : tensor<256x1xi64>
    %44 = arith.andi %43, %12 : tensor<256x1xi1>
    %45 = tt.broadcast %44 : (tensor<256x1xi1>) -> tensor<256x4xi1>
    %46 = tt.load %23, %45, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %47 = arith.extf %46 : tensor<256x4xbf16> to tensor<256x4xf32>
    %48 = tt.broadcast %43 : (tensor<256x1xi1>) -> tensor<256x4xi1>
    %49 = arith.select %48, %47, %cst_6 : tensor<256x4xi1>, tensor<256x4xf32>
    %50 = arith.mulf %26, %34 : tensor<256x4xf32>
    %51 = arith.cmpi sge, %42, %cst_5 : tensor<256x1xi64>
    %52 = arith.addi %13, %cst_4 : tensor<1x4xi32>
    %53 = tt.broadcast %52 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %54 = arith.addi %53, %17 : tensor<256x4xi32>
    %55 = arith.addi %54, %20 : tensor<256x4xi32>
    %56 = tt.addptr %22, %55 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %57 = arith.andi %51, %12 : tensor<256x1xi1>
    %58 = tt.broadcast %57 : (tensor<256x1xi1>) -> tensor<256x4xi1>
    %59 = tt.load %56, %58, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %60 = arith.extf %59 : tensor<256x4xbf16> to tensor<256x4xf32>
    %61 = arith.addi %11, %cst_3 : tensor<256x1xi32>
    %62 = tt.broadcast %61 : (tensor<256x1xi32>) -> tensor<256x4xi32>
    %63 = arith.addi %62, %29 : tensor<256x4xi32>
    %64 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<256x4x!tt.ptr<bf16, 1>>
    %65 = tt.addptr %64, %63 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %66 = tt.load %65, %58, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %67 = arith.extf %66 : tensor<256x4xbf16> to tensor<256x4xf32>
    %68 = arith.mulf %60, %67 : tensor<256x4xf32>
    %69 = arith.subf %cst_6, %68 : tensor<256x4xf32>
    %70 = tt.broadcast %51 : (tensor<256x1xi1>) -> tensor<256x4xi1>
    %71 = arith.select %70, %69, %cst_6 : tensor<256x4xi1>, tensor<256x4xf32>
    %72 = arith.addf %50, %71 : tensor<256x4xf32>
    %73 = arith.cmpi slt, %42, %cst_5 : tensor<256x1xi64>
    %74 = arith.addi %13, %cst_2 : tensor<1x4xi32>
    %75 = tt.broadcast %74 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %76 = arith.addi %75, %17 : tensor<256x4xi32>
    %77 = arith.addi %76, %20 : tensor<256x4xi32>
    %78 = tt.addptr %22, %77 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %79 = arith.andi %73, %12 : tensor<256x1xi1>
    %80 = tt.broadcast %79 : (tensor<256x1xi1>) -> tensor<256x4xi1>
    %81 = tt.load %78, %80, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %82 = arith.extf %81 : tensor<256x4xbf16> to tensor<256x4xf32>
    %83 = arith.addi %11, %cst_1 : tensor<256x1xi32>
    %84 = tt.broadcast %83 : (tensor<256x1xi32>) -> tensor<256x4xi32>
    %85 = arith.addi %84, %29 : tensor<256x4xi32>
    %86 = tt.addptr %64, %85 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %87 = tt.load %86, %80, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %88 = arith.extf %87 : tensor<256x4xbf16> to tensor<256x4xf32>
    %89 = arith.mulf %82, %88 : tensor<256x4xf32>
    %90 = tt.broadcast %73 : (tensor<256x1xi1>) -> tensor<256x4xi1>
    %91 = arith.select %90, %89, %cst_6 : tensor<256x4xi1>, tensor<256x4xf32>
    %92 = arith.addf %72, %91 : tensor<256x4xf32>
    %93 = arith.addf %49, %92 : tensor<256x4xf32>
    %94 = tt.load %39, %45, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %95 = arith.extf %94 : tensor<256x4xbf16> to tensor<256x4xf32>
    %96 = arith.select %48, %95, %cst_6 : tensor<256x4xi1>, tensor<256x4xf32>
    %97 = arith.mulf %41, %34 : tensor<256x4xf32>
    %98 = tt.load %78, %58, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %99 = arith.extf %98 : tensor<256x4xbf16> to tensor<256x4xf32>
    %100 = arith.mulf %99, %67 : tensor<256x4xf32>
    %101 = arith.subf %cst_6, %100 : tensor<256x4xf32>
    %102 = arith.select %70, %101, %cst_6 : tensor<256x4xi1>, tensor<256x4xf32>
    %103 = arith.addf %97, %102 : tensor<256x4xf32>
    %104 = arith.addi %13, %cst_0 : tensor<1x4xi32>
    %105 = tt.broadcast %104 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %106 = arith.addi %105, %17 : tensor<256x4xi32>
    %107 = arith.addi %106, %20 : tensor<256x4xi32>
    %108 = tt.addptr %22, %107 : tensor<256x4x!tt.ptr<bf16, 1>>, tensor<256x4xi32>
    %109 = tt.load %108, %80, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16>
    %110 = arith.extf %109 : tensor<256x4xbf16> to tensor<256x4xf32>
    %111 = arith.mulf %110, %88 : tensor<256x4xf32>
    %112 = arith.select %90, %111, %cst_6 : tensor<256x4xi1>, tensor<256x4xf32>
    %113 = arith.addf %103, %112 : tensor<256x4xf32>
    %114 = arith.addf %96, %113 : tensor<256x4xf32>
    %115 = arith.addf %93, %114 : tensor<256x4xf32>
    %116 = arith.muli %14, %cst_8 : tensor<1x4xi32>
    %117 = tt.broadcast %116 : (tensor<1x4xi32>) -> tensor<256x4xi32>
    %118 = arith.addi %18, %117 : tensor<256x4xi32>
    %119 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<256x4x!tt.ptr<f32, 1>>
    %120 = tt.addptr %119, %118 : tensor<256x4x!tt.ptr<f32, 1>>, tensor<256x4xi32>
    tt.store %120, %115, %24 {cache = 1 : i32, evict = 1 : i32} : tensor<256x4xf32>
    tt.return
  }
}
