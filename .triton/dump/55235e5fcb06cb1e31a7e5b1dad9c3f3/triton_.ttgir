#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<256xi32, #blocked>
    %cst_0 = arith.constant dense<4> : tensor<256xi64, #blocked>
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked>
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked>
    %c256_i32 = arith.constant 256 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c256_i32 : i32
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<256xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked>
    %5 = arith.divsi %4, %cst : tensor<256xi32, #blocked>
    %6 = arith.remsi %4, %cst : tensor<256xi32, #blocked>
    %7 = arith.extsi %5 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked>
    %8 = arith.cmpi slt, %7, %cst_0 : tensor<256xi64, #blocked>
    %9 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<256x!tt.ptr<f32, 1>, #blocked>
    %10 = tt.addptr %9, %4 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %11 = tt.load %10, %8, %cst_2 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %12 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<256x!tt.ptr<f32, 1>, #blocked>
    %13 = tt.addptr %12, %6 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %14 = tt.load %13, %8, %cst_2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %15 = arith.addf %14, %cst_1 : tensor<256xf32, #blocked>
    %16 = arith.mulf %11, %15 : tensor<256xf32, #blocked>
    %17 = arith.select %8, %16, %cst_2 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked>
    %18 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<256x!tt.ptr<bf16, 1>, #blocked>
    %19 = tt.addptr %18, %4 : tensor<256x!tt.ptr<bf16, 1>, #blocked>, tensor<256xi32, #blocked>
    %20 = arith.truncf %17 : tensor<256xf32, #blocked> to tensor<256xbf16, #blocked>
    tt.store %19, %20 {cache = 1 : i32, evict = 1 : i32} : tensor<256xbf16, #blocked>
    tt.return
  }
}
