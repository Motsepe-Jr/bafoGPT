; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !5 {
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %17 = and i32 %16, 31, !dbg !8
  %18 = lshr i32 %16, 5, !dbg !8
  %19 = and i32 %18, 7, !dbg !8
  %urem = and i32 %16, 255, !dbg !8
  %20 = or i32 %urem, 256, !dbg !8
  %21 = or i32 %urem, 512, !dbg !8
  %22 = or i32 %urem, 768, !dbg !8
  %23 = shl nuw nsw i32 %urem, 2, !dbg !8
  %24 = or i32 %23, 1024, !dbg !8
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %26 = icmp slt i32 %25, 2304, !dbg !10
  %27 = sext i32 %25 to i64, !dbg !11
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !11
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %26) #3, !dbg !12
  %30 = bitcast i32 %29 to float, !dbg !12
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %26) #3, !dbg !12
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %26) #3, !dbg !12
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %26) #3, !dbg !12
  %34 = mul nuw nsw i32 %urem, 2304, !dbg !13
  %35 = mul nuw nsw i32 %20, 2304, !dbg !13
  %36 = mul nuw nsw i32 %21, 2304, !dbg !13
  %37 = mul nuw nsw i32 %22, 2304, !dbg !13
  %38 = add i32 %25, %34, !dbg !14
  %39 = add i32 %25, %35, !dbg !14
  %40 = add i32 %25, %36, !dbg !14
  %41 = add i32 %25, %37, !dbg !14
  %42 = add i32 %38, 2359296, !dbg !14
  %43 = add i32 %38, 2949120, !dbg !14
  %44 = add i32 %38, 3538944, !dbg !14
  %45 = add i32 %38, 4128768, !dbg !14
  %46 = sext i32 %38 to i64, !dbg !15
  %47 = getelementptr i16, ptr addrspace(1) %0, i64 %46, !dbg !15
  %48 = sext i32 %39 to i64, !dbg !15
  %49 = getelementptr i16, ptr addrspace(1) %0, i64 %48, !dbg !15
  %50 = sext i32 %40 to i64, !dbg !15
  %51 = getelementptr i16, ptr addrspace(1) %0, i64 %50, !dbg !15
  %52 = sext i32 %41 to i64, !dbg !15
  %53 = getelementptr i16, ptr addrspace(1) %0, i64 %52, !dbg !15
  %54 = sext i32 %42 to i64, !dbg !15
  %55 = getelementptr i16, ptr addrspace(1) %0, i64 %54, !dbg !15
  %56 = sext i32 %43 to i64, !dbg !15
  %57 = getelementptr i16, ptr addrspace(1) %0, i64 %56, !dbg !15
  %58 = sext i32 %44 to i64, !dbg !15
  %59 = getelementptr i16, ptr addrspace(1) %0, i64 %58, !dbg !15
  %60 = sext i32 %45 to i64, !dbg !15
  %61 = getelementptr i16, ptr addrspace(1) %0, i64 %60, !dbg !15
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %47, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %49, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %51, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %53, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %55, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %57, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %59, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %61, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #3, !dbg !17
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #3, !dbg !17
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #3, !dbg !17
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #3, !dbg !17
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #3, !dbg !17
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #3, !dbg !17
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #3, !dbg !17
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #3, !dbg !17
  %78 = getelementptr i16, ptr addrspace(1) %1, i64 %46, !dbg !18
  %79 = getelementptr i16, ptr addrspace(1) %1, i64 %48, !dbg !18
  %80 = getelementptr i16, ptr addrspace(1) %1, i64 %50, !dbg !18
  %81 = getelementptr i16, ptr addrspace(1) %1, i64 %52, !dbg !18
  %82 = getelementptr i16, ptr addrspace(1) %1, i64 %54, !dbg !18
  %83 = getelementptr i16, ptr addrspace(1) %1, i64 %56, !dbg !18
  %84 = getelementptr i16, ptr addrspace(1) %1, i64 %58, !dbg !18
  %85 = getelementptr i16, ptr addrspace(1) %1, i64 %60, !dbg !18
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %78, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %79, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %80, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %81, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %82, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %83, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %84, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %85, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #3, !dbg !20
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #3, !dbg !20
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #3, !dbg !20
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #3, !dbg !20
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #3, !dbg !20
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #3, !dbg !20
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #3, !dbg !20
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #3, !dbg !20
  %102 = getelementptr i16, ptr addrspace(1) %2, i64 %46, !dbg !21
  %103 = getelementptr i16, ptr addrspace(1) %2, i64 %48, !dbg !21
  %104 = getelementptr i16, ptr addrspace(1) %2, i64 %50, !dbg !21
  %105 = getelementptr i16, ptr addrspace(1) %2, i64 %52, !dbg !21
  %106 = getelementptr i16, ptr addrspace(1) %2, i64 %54, !dbg !21
  %107 = getelementptr i16, ptr addrspace(1) %2, i64 %56, !dbg !21
  %108 = getelementptr i16, ptr addrspace(1) %2, i64 %58, !dbg !21
  %109 = getelementptr i16, ptr addrspace(1) %2, i64 %60, !dbg !21
  %110 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %102, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %111 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %103, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %112 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %104, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %113 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %105, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %114 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %106, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %115 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %107, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %116 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %108, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %117 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %109, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %118 = zext nneg i32 %urem to i64, !dbg !23
  %119 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %118, !dbg !23
  %120 = insertelement <1 x i16> undef, i16 %110, i64 0, !dbg !23
  store <1 x i16> %120, ptr addrspace(3) %119, align 2, !dbg !23
  %121 = zext nneg i32 %20 to i64, !dbg !23
  %122 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %121, !dbg !23
  %123 = insertelement <1 x i16> undef, i16 %111, i64 0, !dbg !23
  store <1 x i16> %123, ptr addrspace(3) %122, align 2, !dbg !23
  %124 = zext nneg i32 %21 to i64, !dbg !23
  %125 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %124, !dbg !23
  %126 = insertelement <1 x i16> undef, i16 %112, i64 0, !dbg !23
  store <1 x i16> %126, ptr addrspace(3) %125, align 2, !dbg !23
  %127 = zext nneg i32 %22 to i64, !dbg !23
  %128 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %127, !dbg !23
  %129 = insertelement <1 x i16> undef, i16 %113, i64 0, !dbg !23
  store <1 x i16> %129, ptr addrspace(3) %128, align 2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %130 = zext nneg i32 %23 to i64, !dbg !23
  %131 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %130, !dbg !23
  %132 = load i16, ptr addrspace(3) %131, align 8, !dbg !23
  %133 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %131, i64 0, i64 1, !dbg !23
  %134 = load i16, ptr addrspace(3) %133, align 2, !dbg !23
  %135 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %131, i64 0, i64 2, !dbg !23
  %136 = load i16, ptr addrspace(3) %135, align 4, !dbg !23
  %137 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %131, i64 0, i64 3, !dbg !23
  %138 = load i16, ptr addrspace(3) %137, align 2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %139 = insertelement <1 x i16> undef, i16 %114, i64 0, !dbg !23
  store <1 x i16> %139, ptr addrspace(3) %119, align 2, !dbg !23
  %140 = insertelement <1 x i16> undef, i16 %115, i64 0, !dbg !23
  store <1 x i16> %140, ptr addrspace(3) %122, align 2, !dbg !23
  %141 = insertelement <1 x i16> undef, i16 %116, i64 0, !dbg !23
  store <1 x i16> %141, ptr addrspace(3) %125, align 2, !dbg !23
  %142 = insertelement <1 x i16> undef, i16 %117, i64 0, !dbg !23
  store <1 x i16> %142, ptr addrspace(3) %128, align 2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %143 = load i16, ptr addrspace(3) %131, align 8, !dbg !23
  %144 = load i16, ptr addrspace(3) %133, align 2, !dbg !23
  %145 = load i16, ptr addrspace(3) %135, align 4, !dbg !23
  %146 = load i16, ptr addrspace(3) %137, align 2, !dbg !23
  %147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %132) #3, !dbg !23
  %148 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %134) #3, !dbg !23
  %149 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %136) #3, !dbg !23
  %150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #3, !dbg !23
  %151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %143) #3, !dbg !23
  %152 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #3, !dbg !23
  %153 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #3, !dbg !23
  %154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #3, !dbg !23
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %130, !dbg !24
  %156 = zext nneg i32 %24 to i64, !dbg !24
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %156, !dbg !24
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %155, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !25
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !25
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !25
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !25
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !25
  %163 = bitcast i32 %159 to float, !dbg !25
  %164 = bitcast i32 %160 to float, !dbg !25
  %165 = bitcast i32 %161 to float, !dbg !25
  %166 = bitcast i32 %162 to float, !dbg !25
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %157, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !25
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !25
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !25
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !25
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !25
  %172 = bitcast i32 %168 to float, !dbg !25
  %173 = bitcast i32 %169 to float, !dbg !25
  %174 = bitcast i32 %170 to float, !dbg !25
  %175 = bitcast i32 %171 to float, !dbg !25
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !26
  %177 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !26
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !26
  %179 = getelementptr float, ptr addrspace(1) %5, i64 %52, !dbg !26
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !26
  %181 = getelementptr float, ptr addrspace(1) %5, i64 %56, !dbg !26
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %58, !dbg !26
  %183 = getelementptr float, ptr addrspace(1) %5, i64 %60, !dbg !26
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %185 = bitcast i32 %184 to float, !dbg !27
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %187 = bitcast i32 %186 to float, !dbg !27
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %189 = bitcast i32 %188 to float, !dbg !27
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %191 = bitcast i32 %190 to float, !dbg !27
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %193 = bitcast i32 %192 to float, !dbg !27
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %195 = bitcast i32 %194 to float, !dbg !27
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %197 = bitcast i32 %196 to float, !dbg !27
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %199 = bitcast i32 %198 to float, !dbg !27
  %200 = getelementptr float, ptr addrspace(1) %6, i64 %130, !dbg !28
  %201 = getelementptr float, ptr addrspace(1) %6, i64 %156, !dbg !28
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !29
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !29
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !29
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !29
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !29
  %207 = bitcast i32 %203 to float, !dbg !29
  %208 = bitcast i32 %204 to float, !dbg !29
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !29
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !29
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !29
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !29
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !29
  %214 = getelementptr i16, ptr addrspace(1) %7, i64 %46, !dbg !30
  %215 = getelementptr i16, ptr addrspace(1) %7, i64 %48, !dbg !30
  %216 = getelementptr i16, ptr addrspace(1) %7, i64 %50, !dbg !30
  %217 = getelementptr i16, ptr addrspace(1) %7, i64 %52, !dbg !30
  %218 = getelementptr i16, ptr addrspace(1) %7, i64 %54, !dbg !30
  %219 = getelementptr i16, ptr addrspace(1) %7, i64 %56, !dbg !30
  %220 = getelementptr i16, ptr addrspace(1) %7, i64 %58, !dbg !30
  %221 = getelementptr i16, ptr addrspace(1) %7, i64 %60, !dbg !30
  %222 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %214, i1 %26, i16 0, i1 %26) #3, !dbg !31
  %223 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %215, i1 %26, i16 0, i1 %26) #3, !dbg !31
  %224 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %216, i1 %26, i16 0, i1 %26) #3, !dbg !31
  %225 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %217, i1 %26, i16 0, i1 %26) #3, !dbg !31
  %226 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %218, i1 %26, i16 0, i1 %26) #3, !dbg !31
  %227 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %219, i1 %26, i16 0, i1 %26) #3, !dbg !31
  %228 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %220, i1 %26, i16 0, i1 %26) #3, !dbg !31
  %229 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %221, i1 %26, i16 0, i1 %26) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %230 = insertelement <1 x i16> undef, i16 %222, i64 0, !dbg !32
  store <1 x i16> %230, ptr addrspace(3) %119, align 2, !dbg !32
  %231 = insertelement <1 x i16> undef, i16 %223, i64 0, !dbg !32
  store <1 x i16> %231, ptr addrspace(3) %122, align 2, !dbg !32
  %232 = insertelement <1 x i16> undef, i16 %224, i64 0, !dbg !32
  store <1 x i16> %232, ptr addrspace(3) %125, align 2, !dbg !32
  %233 = insertelement <1 x i16> undef, i16 %225, i64 0, !dbg !32
  store <1 x i16> %233, ptr addrspace(3) %128, align 2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %234 = load i16, ptr addrspace(3) %131, align 8, !dbg !32
  %235 = load i16, ptr addrspace(3) %133, align 2, !dbg !32
  %236 = load i16, ptr addrspace(3) %135, align 4, !dbg !32
  %237 = load i16, ptr addrspace(3) %137, align 2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %238 = insertelement <1 x i16> undef, i16 %226, i64 0, !dbg !32
  store <1 x i16> %238, ptr addrspace(3) %119, align 2, !dbg !32
  %239 = insertelement <1 x i16> undef, i16 %227, i64 0, !dbg !32
  store <1 x i16> %239, ptr addrspace(3) %122, align 2, !dbg !32
  %240 = insertelement <1 x i16> undef, i16 %228, i64 0, !dbg !32
  store <1 x i16> %240, ptr addrspace(3) %125, align 2, !dbg !32
  %241 = insertelement <1 x i16> undef, i16 %229, i64 0, !dbg !32
  store <1 x i16> %241, ptr addrspace(3) %128, align 2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %242 = load i16, ptr addrspace(3) %131, align 8, !dbg !32
  %243 = load i16, ptr addrspace(3) %133, align 2, !dbg !32
  %244 = load i16, ptr addrspace(3) %135, align 4, !dbg !32
  %245 = load i16, ptr addrspace(3) %137, align 2, !dbg !32
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #3, !dbg !32
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #3, !dbg !32
  %248 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #3, !dbg !32
  %249 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %237) #3, !dbg !32
  %250 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %242) #3, !dbg !32
  %251 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %243) #3, !dbg !32
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %244) #3, !dbg !32
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %245) #3, !dbg !32
  %254 = getelementptr float, ptr addrspace(1) %8, i64 %130, !dbg !33
  %255 = getelementptr float, ptr addrspace(1) %8, i64 %156, !dbg !33
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %254, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !34
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !34
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !34
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !34
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !34
  %261 = bitcast i32 %257 to float, !dbg !34
  %262 = bitcast i32 %258 to float, !dbg !34
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %255, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !34
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !34
  %265 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !34
  %266 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !34
  %267 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !34
  %268 = getelementptr float, ptr addrspace(1) %9, i64 %46, !dbg !35
  %269 = getelementptr float, ptr addrspace(1) %9, i64 %48, !dbg !35
  %270 = getelementptr float, ptr addrspace(1) %9, i64 %50, !dbg !35
  %271 = getelementptr float, ptr addrspace(1) %9, i64 %52, !dbg !35
  %272 = getelementptr float, ptr addrspace(1) %9, i64 %54, !dbg !35
  %273 = getelementptr float, ptr addrspace(1) %9, i64 %56, !dbg !35
  %274 = getelementptr float, ptr addrspace(1) %9, i64 %58, !dbg !35
  %275 = getelementptr float, ptr addrspace(1) %9, i64 %60, !dbg !35
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %26, i32 0, i1 %26) #3, !dbg !36
  %277 = bitcast i32 %276 to float, !dbg !36
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %26, i32 0, i1 %26) #3, !dbg !36
  %279 = bitcast i32 %278 to float, !dbg !36
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %26, i32 0, i1 %26) #3, !dbg !36
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %26, i32 0, i1 %26) #3, !dbg !36
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %26, i32 0, i1 %26) #3, !dbg !36
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %273, i1 %26, i32 0, i1 %26) #3, !dbg !36
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %26, i32 0, i1 %26) #3, !dbg !36
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %275, i1 %26, i32 0, i1 %26) #3, !dbg !36
  %286 = fadd float %70, %94, !dbg !37
  %287 = fadd float %71, %95, !dbg !37
  %288 = fadd float %72, %96, !dbg !37
  %289 = fadd float %73, %97, !dbg !37
  %290 = fadd float %74, %98, !dbg !37
  %291 = fadd float %75, %99, !dbg !37
  %292 = fadd float %76, %100, !dbg !37
  %293 = fadd float %77, %101, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %294 = getelementptr float, ptr addrspace(3) @global_smem, i64 %118, !dbg !37
  %295 = insertelement <1 x float> undef, float %286, i64 0, !dbg !37
  store <1 x float> %295, ptr addrspace(3) %294, align 4, !dbg !37
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i64 %121, !dbg !37
  %297 = insertelement <1 x float> undef, float %287, i64 0, !dbg !37
  store <1 x float> %297, ptr addrspace(3) %296, align 4, !dbg !37
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %124, !dbg !37
  %299 = insertelement <1 x float> undef, float %288, i64 0, !dbg !37
  store <1 x float> %299, ptr addrspace(3) %298, align 4, !dbg !37
  %300 = getelementptr float, ptr addrspace(3) @global_smem, i64 %127, !dbg !37
  %301 = insertelement <1 x float> undef, float %289, i64 0, !dbg !37
  store <1 x float> %301, ptr addrspace(3) %300, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i64 %130, !dbg !37
  %303 = load float, ptr addrspace(3) %302, align 16, !dbg !37
  %304 = getelementptr inbounds <4 x float>, ptr addrspace(3) %302, i64 0, i64 1, !dbg !37
  %305 = load float, ptr addrspace(3) %304, align 4, !dbg !37
  %306 = getelementptr inbounds <4 x float>, ptr addrspace(3) %302, i64 0, i64 2, !dbg !37
  %307 = insertelement <1 x float> undef, float %290, i64 0, !dbg !37
  %308 = insertelement <1 x float> undef, float %291, i64 0, !dbg !37
  %309 = insertelement <1 x float> undef, float %292, i64 0, !dbg !37
  %310 = insertelement <1 x float> undef, float %293, i64 0, !dbg !37
  %311 = fmul float %147, %163, !dbg !38
  %312 = fmul float %148, %164, !dbg !38
  %313 = fmul float %149, %165, !dbg !38
  %314 = fmul float %150, %166, !dbg !38
  %315 = fmul float %151, %172, !dbg !38
  %316 = fmul float %152, %173, !dbg !38
  %317 = fmul float %153, %174, !dbg !38
  %318 = fmul float %154, %175, !dbg !38
  %319 = shl nuw nsw i32 %urem, 3, !dbg !38
  %320 = zext nneg i32 %319 to i64, !dbg !38
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320, !dbg !38
  %322 = insertelement <1 x float> undef, float %311, i64 0, !dbg !38
  %323 = or i32 %319, 2, !dbg !38
  %324 = zext nneg i32 %323 to i64, !dbg !38
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i64 %324, !dbg !38
  %326 = insertelement <1 x float> undef, float %312, i64 0, !dbg !38
  %327 = or i32 %319, 4, !dbg !38
  %328 = zext nneg i32 %327 to i64, !dbg !38
  %329 = getelementptr float, ptr addrspace(3) @global_smem, i64 %328, !dbg !38
  %330 = insertelement <1 x float> undef, float %313, i64 0, !dbg !38
  %331 = or i32 %319, 6, !dbg !38
  %332 = zext nneg i32 %331 to i64, !dbg !38
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i64 %332, !dbg !38
  %334 = insertelement <1 x float> undef, float %314, i64 0, !dbg !38
  %335 = shl nuw nsw i32 %urem, 1, !dbg !38
  %336 = zext nneg i32 %335 to i64, !dbg !38
  %337 = getelementptr float, ptr addrspace(3) @global_smem, i64 %336, !dbg !38
  %338 = shl nuw nsw i32 %20, 1, !dbg !38
  %339 = zext nneg i32 %338 to i64, !dbg !38
  %340 = getelementptr float, ptr addrspace(3) @global_smem, i64 %339, !dbg !38
  %341 = shl nuw nsw i32 %21, 1, !dbg !38
  %342 = zext nneg i32 %341 to i64, !dbg !38
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i64 %342, !dbg !38
  %344 = shl nuw nsw i32 %22, 1, !dbg !38
  %345 = zext nneg i32 %344 to i64, !dbg !38
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i64 %345, !dbg !38
  %347 = insertelement <1 x float> undef, float %315, i64 0, !dbg !38
  %348 = insertelement <1 x float> undef, float %316, i64 0, !dbg !38
  %349 = insertelement <1 x float> undef, float %317, i64 0, !dbg !38
  %350 = insertelement <1 x float> undef, float %318, i64 0, !dbg !38
  %351 = fadd float %30, 1.000000e+00, !dbg !39
  %352 = fmul float %351, %311, !dbg !40
  %353 = fmul float %351, %312, !dbg !40
  %354 = fmul float %351, %313, !dbg !40
  %355 = fmul float %351, %314, !dbg !40
  %356 = fmul float %351, %315, !dbg !40
  %357 = fmul float %351, %316, !dbg !40
  %358 = fmul float %351, %317, !dbg !40
  %359 = fmul float %351, %318, !dbg !40
  %360 = insertelement <1 x float> undef, float %352, i64 0, !dbg !40
  %361 = insertelement <1 x float> undef, float %353, i64 0, !dbg !40
  %362 = insertelement <1 x float> undef, float %354, i64 0, !dbg !40
  %363 = insertelement <1 x float> undef, float %355, i64 0, !dbg !40
  %364 = insertelement <1 x float> undef, float %356, i64 0, !dbg !40
  %365 = insertelement <1 x float> undef, float %357, i64 0, !dbg !40
  %366 = insertelement <1 x float> undef, float %358, i64 0, !dbg !40
  %367 = insertelement <1 x float> undef, float %359, i64 0, !dbg !40
  %368 = fmul float %185, 4.800000e+01, !dbg !41
  %369 = fmul float %187, 4.800000e+01, !dbg !41
  %370 = fmul float %189, 4.800000e+01, !dbg !41
  %371 = fmul float %191, 4.800000e+01, !dbg !41
  %372 = fmul float %193, 4.800000e+01, !dbg !41
  %373 = fmul float %195, 4.800000e+01, !dbg !41
  %374 = fmul float %197, 4.800000e+01, !dbg !41
  %375 = fmul float %199, 4.800000e+01, !dbg !41
  %376 = insertelement <1 x float> undef, float %368, i64 0, !dbg !41
  %377 = insertelement <1 x float> undef, float %369, i64 0, !dbg !41
  %378 = insertelement <1 x float> undef, float %370, i64 0, !dbg !41
  %379 = insertelement <1 x float> undef, float %371, i64 0, !dbg !41
  %380 = insertelement <1 x float> undef, float %372, i64 0, !dbg !41
  %381 = insertelement <1 x float> undef, float %373, i64 0, !dbg !41
  %382 = insertelement <1 x float> undef, float %374, i64 0, !dbg !41
  %383 = insertelement <1 x float> undef, float %375, i64 0, !dbg !41
  %384 = insertelement <2 x i32> poison, i32 %212, i64 0, !dbg !29
  %385 = insertelement <2 x i32> %384, i32 %213, i64 1, !dbg !29
  %386 = bitcast <2 x i32> %385 to <2 x float>, !dbg !29
  %387 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !29
  %388 = insertelement <2 x i32> %387, i32 %211, i64 1, !dbg !29
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !29
  %390 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !29
  %391 = insertelement <2 x i32> %390, i32 %206, i64 1, !dbg !29
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !29
  %393 = load <2 x float>, ptr addrspace(3) %306, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  store <1 x float> %307, ptr addrspace(3) %294, align 4, !dbg !37
  store <1 x float> %308, ptr addrspace(3) %296, align 4, !dbg !37
  store <1 x float> %309, ptr addrspace(3) %298, align 4, !dbg !37
  store <1 x float> %310, ptr addrspace(3) %300, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %394 = load <2 x float>, ptr addrspace(3) %306, align 8, !dbg !37
  %395 = load <2 x float>, ptr addrspace(3) %302, align 16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  store <1 x float> %322, ptr addrspace(3) %321, align 4, !dbg !38
  store <1 x float> %326, ptr addrspace(3) %325, align 4, !dbg !38
  store <1 x float> %330, ptr addrspace(3) %329, align 4, !dbg !38
  store <1 x float> %334, ptr addrspace(3) %333, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %396 = load float, ptr addrspace(3) %337, align 4, !dbg !38
  %397 = load float, ptr addrspace(3) %340, align 4, !dbg !38
  %398 = load float, ptr addrspace(3) %343, align 4, !dbg !38
  %399 = load float, ptr addrspace(3) %346, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  store <1 x float> %347, ptr addrspace(3) %321, align 4, !dbg !38
  store <1 x float> %348, ptr addrspace(3) %325, align 4, !dbg !38
  store <1 x float> %349, ptr addrspace(3) %329, align 4, !dbg !38
  store <1 x float> %350, ptr addrspace(3) %333, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %400 = load float, ptr addrspace(3) %337, align 4, !dbg !38
  %401 = load float, ptr addrspace(3) %340, align 4, !dbg !38
  %402 = load float, ptr addrspace(3) %343, align 4, !dbg !38
  %403 = load float, ptr addrspace(3) %346, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  store <1 x float> %360, ptr addrspace(3) %321, align 4, !dbg !40
  store <1 x float> %361, ptr addrspace(3) %325, align 4, !dbg !40
  store <1 x float> %362, ptr addrspace(3) %329, align 4, !dbg !40
  store <1 x float> %363, ptr addrspace(3) %333, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %404 = load float, ptr addrspace(3) %337, align 4, !dbg !40
  %405 = load float, ptr addrspace(3) %340, align 4, !dbg !40
  %406 = load float, ptr addrspace(3) %343, align 4, !dbg !40
  %407 = load float, ptr addrspace(3) %346, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  store <1 x float> %364, ptr addrspace(3) %321, align 4, !dbg !40
  store <1 x float> %365, ptr addrspace(3) %325, align 4, !dbg !40
  store <1 x float> %366, ptr addrspace(3) %329, align 4, !dbg !40
  store <1 x float> %367, ptr addrspace(3) %333, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %408 = load float, ptr addrspace(3) %337, align 4, !dbg !40
  %409 = load float, ptr addrspace(3) %340, align 4, !dbg !40
  %410 = load float, ptr addrspace(3) %343, align 4, !dbg !40
  %411 = load float, ptr addrspace(3) %346, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  store <1 x float> %376, ptr addrspace(3) %294, align 4, !dbg !41
  store <1 x float> %377, ptr addrspace(3) %296, align 4, !dbg !41
  store <1 x float> %378, ptr addrspace(3) %298, align 4, !dbg !41
  store <1 x float> %379, ptr addrspace(3) %300, align 4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %412 = load float, ptr addrspace(3) %302, align 16, !dbg !41
  %413 = load float, ptr addrspace(3) %304, align 4, !dbg !41
  %414 = fadd float %368, %404, !dbg !42
  %415 = fadd float %369, %405, !dbg !42
  %416 = fadd float %370, %406, !dbg !42
  %417 = fadd float %371, %407, !dbg !42
  %418 = fadd float %372, %408, !dbg !42
  %419 = fadd float %373, %409, !dbg !42
  %420 = fadd float %374, %410, !dbg !42
  %421 = fadd float %375, %411, !dbg !42
  %422 = insertelement <1 x float> undef, float %414, i64 0, !dbg !42
  %423 = insertelement <1 x float> undef, float %415, i64 0, !dbg !42
  %424 = insertelement <1 x float> undef, float %416, i64 0, !dbg !42
  %425 = insertelement <1 x float> undef, float %417, i64 0, !dbg !42
  %426 = insertelement <1 x float> undef, float %418, i64 0, !dbg !42
  %427 = insertelement <1 x float> undef, float %419, i64 0, !dbg !42
  %428 = insertelement <1 x float> undef, float %420, i64 0, !dbg !42
  %429 = insertelement <1 x float> undef, float %421, i64 0, !dbg !42
  %430 = fmul float %412, %261, !dbg !43
  %431 = fmul float %413, %262, !dbg !43
  %432 = fmul float %246, %430, !dbg !44
  %433 = fmul float %247, %431, !dbg !44
  %434 = fadd float %432, 0.000000e+00, !dbg !45
  %435 = fadd float %433, 0.000000e+00, !dbg !45
  %436 = insertelement <2 x i32> poison, i32 %259, i64 0, !dbg !34
  %437 = insertelement <2 x i32> %436, i32 %260, i64 1, !dbg !34
  %438 = bitcast <2 x i32> %437 to <2 x float>, !dbg !34
  %439 = load <2 x float>, ptr addrspace(3) %306, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  store <1 x float> %380, ptr addrspace(3) %294, align 4, !dbg !41
  store <1 x float> %381, ptr addrspace(3) %296, align 4, !dbg !41
  store <1 x float> %382, ptr addrspace(3) %298, align 4, !dbg !41
  store <1 x float> %383, ptr addrspace(3) %300, align 4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %440 = fmul <2 x float> %439, %438, !dbg !43
  %441 = insertelement <2 x float> poison, float %248, i64 0, !dbg !44
  %442 = insertelement <2 x float> %441, float %249, i64 1, !dbg !44
  %443 = fmul <2 x float> %442, %440, !dbg !44
  %444 = fadd <2 x float> %443, zeroinitializer, !dbg !45
  %445 = insertelement <2 x i32> poison, i32 %264, i64 0, !dbg !34
  %446 = insertelement <2 x i32> %445, i32 %265, i64 1, !dbg !34
  %447 = bitcast <2 x i32> %446 to <2 x float>, !dbg !34
  %448 = load <2 x float>, ptr addrspace(3) %302, align 16, !dbg !41
  %449 = fmul <2 x float> %448, %447, !dbg !43
  %450 = insertelement <2 x float> poison, float %250, i64 0, !dbg !44
  %451 = insertelement <2 x float> %450, float %251, i64 1, !dbg !44
  %452 = fmul <2 x float> %451, %449, !dbg !44
  %453 = fadd <2 x float> %452, zeroinitializer, !dbg !45
  %454 = insertelement <2 x i32> poison, i32 %266, i64 0, !dbg !34
  %455 = insertelement <2 x i32> %454, i32 %267, i64 1, !dbg !34
  %456 = bitcast <2 x i32> %455 to <2 x float>, !dbg !34
  %457 = load <2 x float>, ptr addrspace(3) %306, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  store <1 x float> %422, ptr addrspace(3) %294, align 4, !dbg !42
  store <1 x float> %423, ptr addrspace(3) %296, align 4, !dbg !42
  store <1 x float> %424, ptr addrspace(3) %298, align 4, !dbg !42
  store <1 x float> %425, ptr addrspace(3) %300, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %458 = load float, ptr addrspace(3) %302, align 16, !dbg !42
  %459 = load float, ptr addrspace(3) %304, align 4, !dbg !42
  %460 = load <2 x float>, ptr addrspace(3) %306, align 8, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  store <1 x float> %426, ptr addrspace(3) %294, align 4, !dbg !42
  store <1 x float> %427, ptr addrspace(3) %296, align 4, !dbg !42
  store <1 x float> %428, ptr addrspace(3) %298, align 4, !dbg !42
  store <1 x float> %429, ptr addrspace(3) %300, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %461 = load <2 x float>, ptr addrspace(3) %302, align 16, !dbg !42
  %462 = load <2 x float>, ptr addrspace(3) %306, align 8, !dbg !42
  %463 = fmul float %458, %207, !dbg !46
  %464 = fmul float %459, %208, !dbg !46
  %465 = fmul <2 x float> %460, %392, !dbg !46
  %466 = fmul <2 x float> %461, %389, !dbg !46
  %467 = fmul <2 x float> %462, %386, !dbg !46
  %468 = fmul float %303, %463, !dbg !47
  %469 = fmul float %305, %464, !dbg !47
  %470 = fmul <2 x float> %393, %465, !dbg !47
  %471 = fmul <2 x float> %395, %466, !dbg !47
  %472 = fmul <2 x float> %394, %467, !dbg !47
  %473 = fadd float %468, 0.000000e+00, !dbg !48
  %474 = fadd float %469, 0.000000e+00, !dbg !48
  %475 = fadd <2 x float> %470, zeroinitializer, !dbg !48
  %476 = fadd <2 x float> %471, zeroinitializer, !dbg !48
  %477 = fadd <2 x float> %472, zeroinitializer, !dbg !48
  %478 = fmul <2 x float> %457, %456, !dbg !43
  %479 = insertelement <2 x float> poison, float %252, i64 0, !dbg !44
  %480 = insertelement <2 x float> %479, float %253, i64 1, !dbg !44
  %481 = fmul <2 x float> %480, %478, !dbg !44
  %482 = fadd <2 x float> %481, zeroinitializer, !dbg !45
  %483 = fmul float %396, %277, !dbg !49
  %484 = fmul float %397, %279, !dbg !49
  %485 = fadd float %483, 0.000000e+00, !dbg !50
  %486 = fadd float %484, 0.000000e+00, !dbg !50
  %487 = insertelement <2 x i32> poison, i32 %280, i64 0, !dbg !36
  %488 = insertelement <2 x i32> %487, i32 %281, i64 1, !dbg !36
  %489 = bitcast <2 x i32> %488 to <2 x float>, !dbg !36
  %490 = insertelement <2 x float> poison, float %398, i64 0, !dbg !49
  %491 = insertelement <2 x float> %490, float %399, i64 1, !dbg !49
  %492 = fmul <2 x float> %491, %489, !dbg !49
  %493 = fadd <2 x float> %492, zeroinitializer, !dbg !50
  %494 = insertelement <2 x i32> poison, i32 %282, i64 0, !dbg !36
  %495 = insertelement <2 x i32> %494, i32 %283, i64 1, !dbg !36
  %496 = bitcast <2 x i32> %495 to <2 x float>, !dbg !36
  %497 = insertelement <2 x float> poison, float %400, i64 0, !dbg !49
  %498 = insertelement <2 x float> %497, float %401, i64 1, !dbg !49
  %499 = fmul <2 x float> %498, %496, !dbg !49
  %500 = fadd <2 x float> %499, zeroinitializer, !dbg !50
  %501 = insertelement <2 x i32> poison, i32 %284, i64 0, !dbg !36
  %502 = insertelement <2 x i32> %501, i32 %285, i64 1, !dbg !36
  %503 = bitcast <2 x i32> %502 to <2 x float>, !dbg !36
  %504 = insertelement <2 x float> poison, float %402, i64 0, !dbg !49
  %505 = insertelement <2 x float> %504, float %403, i64 1, !dbg !49
  %506 = fmul <2 x float> %505, %503, !dbg !49
  %507 = fadd <2 x float> %506, zeroinitializer, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %508 = fadd float %473, %474, !dbg !55
  %509 = extractelement <2 x float> %475, i64 0, !dbg !55
  %510 = fadd float %509, %508, !dbg !55
  %511 = extractelement <2 x float> %475, i64 1, !dbg !55
  %512 = fadd float %511, %510, !dbg !55
  %513 = extractelement <2 x float> %476, i64 0, !dbg !55
  %514 = fadd float %512, %513, !dbg !55
  %515 = extractelement <2 x float> %476, i64 1, !dbg !55
  %516 = fadd float %515, %514, !dbg !55
  %517 = extractelement <2 x float> %477, i64 0, !dbg !55
  %518 = fadd float %517, %516, !dbg !55
  %519 = extractelement <2 x float> %477, i64 1, !dbg !55
  %520 = fadd float %519, %518, !dbg !55
  %521 = select i1 %26, float %520, float 0.000000e+00, !dbg !55
  %522 = bitcast float %521 to i32, !dbg !51
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 16, i32 31), !dbg !51
  %524 = bitcast i32 %523 to float, !dbg !51
  %525 = fadd float %521, %524, !dbg !55
  %526 = bitcast float %525 to i32, !dbg !51
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 8, i32 31), !dbg !51
  %528 = bitcast i32 %527 to float, !dbg !51
  %529 = fadd float %525, %528, !dbg !55
  %530 = bitcast float %529 to i32, !dbg !51
  %531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %530, i32 4, i32 31), !dbg !51
  %532 = bitcast i32 %531 to float, !dbg !51
  %533 = fadd float %529, %532, !dbg !55
  %534 = bitcast float %533 to i32, !dbg !51
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 2, i32 31), !dbg !51
  %536 = bitcast i32 %535 to float, !dbg !51
  %537 = fadd float %533, %536, !dbg !55
  %538 = bitcast float %537 to i32, !dbg !51
  %539 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %538, i32 1, i32 31), !dbg !51
  %540 = bitcast i32 %539 to float, !dbg !51
  %541 = fadd float %537, %540, !dbg !55
  %542 = icmp eq i32 %17, 0, !dbg !51
  %543 = zext nneg i32 %19 to i64, !dbg !51
  %544 = getelementptr float, ptr addrspace(3) @global_smem, i64 %543, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %544, float %541, i1 %542) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %545 = icmp slt i32 %16, 8, !dbg !51
  %546 = sext i32 %16 to i64, !dbg !51
  %547 = getelementptr float, ptr addrspace(3) @global_smem, i64 %546, !dbg !51
  %548 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %547, i1 %545) #3, !dbg !51
  %549 = bitcast float %548 to i32, !dbg !51
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 4, i32 31), !dbg !51
  %551 = bitcast i32 %550 to float, !dbg !51
  %552 = fadd float %548, %551, !dbg !55
  %553 = bitcast float %552 to i32, !dbg !51
  %554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %553, i32 2, i32 31), !dbg !51
  %555 = bitcast i32 %554 to float, !dbg !51
  %556 = fadd float %552, %555, !dbg !55
  %557 = bitcast float %556 to i32, !dbg !51
  %558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %557, i32 1, i32 31), !dbg !51
  %559 = bitcast i32 %558 to float, !dbg !51
  %560 = fadd float %556, %559, !dbg !55
  %561 = and i32 %16, 7, !dbg !51
  %562 = icmp eq i32 %561, 0, !dbg !51
  %563 = and i1 %545, %562, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %547, float %560, i1 %563) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %564 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %565 = insertelement <1 x float> undef, float %564, i64 0, !dbg !59
  store <1 x float> %565, ptr addrspace(3) @global_smem, align 4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %566 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !59
  %567 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !60
  %568 = icmp eq i32 %urem, 0, !dbg !61
  %569 = and i1 %568, %26, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %566, ptr addrspace(1) %567, i1 %569) #3, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %570 = fadd float %434, %435, !dbg !64
  %571 = extractelement <2 x float> %444, i64 0, !dbg !64
  %572 = fadd float %571, %570, !dbg !64
  %573 = extractelement <2 x float> %444, i64 1, !dbg !64
  %574 = fadd float %573, %572, !dbg !64
  %575 = extractelement <2 x float> %453, i64 0, !dbg !64
  %576 = fadd float %574, %575, !dbg !64
  %577 = extractelement <2 x float> %453, i64 1, !dbg !64
  %578 = fadd float %577, %576, !dbg !64
  %579 = extractelement <2 x float> %482, i64 0, !dbg !64
  %580 = fadd float %579, %578, !dbg !64
  %581 = extractelement <2 x float> %482, i64 1, !dbg !64
  %582 = fadd float %581, %580, !dbg !64
  %583 = select i1 %26, float %582, float 0.000000e+00, !dbg !64
  %584 = bitcast float %583 to i32, !dbg !62
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 16, i32 31), !dbg !62
  %586 = bitcast i32 %585 to float, !dbg !62
  %587 = fadd float %583, %586, !dbg !64
  %588 = bitcast float %587 to i32, !dbg !62
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 8, i32 31), !dbg !62
  %590 = bitcast i32 %589 to float, !dbg !62
  %591 = fadd float %587, %590, !dbg !64
  %592 = bitcast float %591 to i32, !dbg !62
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 4, i32 31), !dbg !62
  %594 = bitcast i32 %593 to float, !dbg !62
  %595 = fadd float %591, %594, !dbg !64
  %596 = bitcast float %595 to i32, !dbg !62
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 2, i32 31), !dbg !62
  %598 = bitcast i32 %597 to float, !dbg !62
  %599 = fadd float %595, %598, !dbg !64
  %600 = bitcast float %599 to i32, !dbg !62
  %601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 1, i32 31), !dbg !62
  %602 = bitcast i32 %601 to float, !dbg !62
  %603 = fadd float %599, %602, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %544, float %603, i1 %542) #3, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %604 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %547, i1 %545) #3, !dbg !62
  %605 = bitcast float %604 to i32, !dbg !62
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %605, i32 4, i32 31), !dbg !62
  %607 = bitcast i32 %606 to float, !dbg !62
  %608 = fadd float %604, %607, !dbg !64
  %609 = bitcast float %608 to i32, !dbg !62
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 2, i32 31), !dbg !62
  %611 = bitcast i32 %610 to float, !dbg !62
  %612 = fadd float %608, %611, !dbg !64
  %613 = bitcast float %612 to i32, !dbg !62
  %614 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %613, i32 1, i32 31), !dbg !62
  %615 = bitcast i32 %614 to float, !dbg !62
  %616 = fadd float %612, %615, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %547, float %616, i1 %563) #3, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %617 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %618 = insertelement <1 x float> undef, float %617, i64 0, !dbg !67
  store <1 x float> %618, ptr addrspace(3) @global_smem, align 4, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %619 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !67
  %620 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %619, ptr addrspace(1) %620, i1 %569) #3, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %621 = fadd float %485, %486, !dbg !72
  %622 = extractelement <2 x float> %493, i64 0, !dbg !72
  %623 = fadd float %621, %622, !dbg !72
  %624 = extractelement <2 x float> %493, i64 1, !dbg !72
  %625 = fadd float %623, %624, !dbg !72
  %626 = extractelement <2 x float> %500, i64 0, !dbg !72
  %627 = fadd float %625, %626, !dbg !72
  %628 = extractelement <2 x float> %500, i64 1, !dbg !72
  %629 = fadd float %627, %628, !dbg !72
  %630 = extractelement <2 x float> %507, i64 0, !dbg !72
  %631 = fadd float %629, %630, !dbg !72
  %632 = extractelement <2 x float> %507, i64 1, !dbg !72
  %633 = fadd float %631, %632, !dbg !72
  %634 = select i1 %26, float %633, float 0.000000e+00, !dbg !72
  %635 = bitcast float %634 to i32, !dbg !70
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 16, i32 31), !dbg !70
  %637 = bitcast i32 %636 to float, !dbg !70
  %638 = fadd float %634, %637, !dbg !72
  %639 = bitcast float %638 to i32, !dbg !70
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 8, i32 31), !dbg !70
  %641 = bitcast i32 %640 to float, !dbg !70
  %642 = fadd float %638, %641, !dbg !72
  %643 = bitcast float %642 to i32, !dbg !70
  %644 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %643, i32 4, i32 31), !dbg !70
  %645 = bitcast i32 %644 to float, !dbg !70
  %646 = fadd float %642, %645, !dbg !72
  %647 = bitcast float %646 to i32, !dbg !70
  %648 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %647, i32 2, i32 31), !dbg !70
  %649 = bitcast i32 %648 to float, !dbg !70
  %650 = fadd float %646, %649, !dbg !72
  %651 = bitcast float %650 to i32, !dbg !70
  %652 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %651, i32 1, i32 31), !dbg !70
  %653 = bitcast i32 %652 to float, !dbg !70
  %654 = fadd float %650, %653, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %544, float %654, i1 %542) #3, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %655 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %547, i1 %545) #3, !dbg !70
  %656 = bitcast float %655 to i32, !dbg !70
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 4, i32 31), !dbg !70
  %658 = bitcast i32 %657 to float, !dbg !70
  %659 = fadd float %655, %658, !dbg !72
  %660 = bitcast float %659 to i32, !dbg !70
  %661 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %660, i32 2, i32 31), !dbg !70
  %662 = bitcast i32 %661 to float, !dbg !70
  %663 = fadd float %659, %662, !dbg !72
  %664 = bitcast float %663 to i32, !dbg !70
  %665 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %664, i32 1, i32 31), !dbg !70
  %666 = bitcast i32 %665 to float, !dbg !70
  %667 = fadd float %663, %666, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %547, float %667, i1 %563) #3, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %668 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !70
  %669 = getelementptr float, ptr addrspace(1) %12, i64 %27, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %668, ptr addrspace(1) %669, i1 %569) #3, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c7or2z3scanopfmotiyvlrkgvmcqgt4autdk5vul5dcohqwwoas3.py", directory: "/tmp/torchinductor_zeus/7o")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 26, column: 30, scope: !5)
!12 = !DILocation(line: 26, column: 35, scope: !5)
!13 = !DILocation(line: 34, column: 45, scope: !5)
!14 = !DILocation(line: 34, column: 40, scope: !5)
!15 = !DILocation(line: 34, column: 34, scope: !5)
!16 = !DILocation(line: 34, column: 51, scope: !5)
!17 = !DILocation(line: 34, column: 111, scope: !5)
!18 = !DILocation(line: 35, column: 34, scope: !5)
!19 = !DILocation(line: 35, column: 51, scope: !5)
!20 = !DILocation(line: 35, column: 111, scope: !5)
!21 = !DILocation(line: 36, column: 34, scope: !5)
!22 = !DILocation(line: 36, column: 51, scope: !5)
!23 = !DILocation(line: 36, column: 111, scope: !5)
!24 = !DILocation(line: 37, column: 34, scope: !5)
!25 = !DILocation(line: 37, column: 39, scope: !5)
!26 = !DILocation(line: 38, column: 35, scope: !5)
!27 = !DILocation(line: 38, column: 52, scope: !5)
!28 = !DILocation(line: 39, column: 35, scope: !5)
!29 = !DILocation(line: 39, column: 40, scope: !5)
!30 = !DILocation(line: 40, column: 35, scope: !5)
!31 = !DILocation(line: 40, column: 52, scope: !5)
!32 = !DILocation(line: 40, column: 112, scope: !5)
!33 = !DILocation(line: 41, column: 35, scope: !5)
!34 = !DILocation(line: 41, column: 40, scope: !5)
!35 = !DILocation(line: 42, column: 35, scope: !5)
!36 = !DILocation(line: 42, column: 52, scope: !5)
!37 = !DILocation(line: 45, column: 22, scope: !5)
!38 = !DILocation(line: 47, column: 22, scope: !5)
!39 = !DILocation(line: 49, column: 23, scope: !5)
!40 = !DILocation(line: 50, column: 23, scope: !5)
!41 = !DILocation(line: 54, column: 24, scope: !5)
!42 = !DILocation(line: 55, column: 24, scope: !5)
!43 = !DILocation(line: 62, column: 24, scope: !5)
!44 = !DILocation(line: 63, column: 24, scope: !5)
!45 = !DILocation(line: 65, column: 25, scope: !5)
!46 = !DILocation(line: 56, column: 24, scope: !5)
!47 = !DILocation(line: 57, column: 23, scope: !5)
!48 = !DILocation(line: 59, column: 25, scope: !5)
!49 = !DILocation(line: 67, column: 24, scope: !5)
!50 = !DILocation(line: 69, column: 25, scope: !5)
!51 = !DILocation(line: 243, column: 36, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !5, file: !53, discriminator: 0)
!53 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!54 = !DILocation(line: 71, column: 27, scope: !52)
!55 = !DILocation(line: 233, column: 15, scope: !56, inlinedAt: !57)
!56 = distinct !DILexicalBlockFile(scope: !52, file: !53, discriminator: 0)
!57 = !DILocation(line: 243, column: 36, scope: !56, inlinedAt: !58)
!58 = !DILocation(line: 71, column: 27, scope: !56)
!59 = !DILocation(line: 71, column: 30, scope: !5)
!60 = !DILocation(line: 72, column: 25, scope: !5)
!61 = !DILocation(line: 72, column: 37, scope: !5)
!62 = !DILocation(line: 243, column: 36, scope: !52, inlinedAt: !63)
!63 = !DILocation(line: 73, column: 27, scope: !52)
!64 = !DILocation(line: 233, column: 15, scope: !56, inlinedAt: !65)
!65 = !DILocation(line: 243, column: 36, scope: !56, inlinedAt: !66)
!66 = !DILocation(line: 73, column: 27, scope: !56)
!67 = !DILocation(line: 73, column: 30, scope: !5)
!68 = !DILocation(line: 74, column: 25, scope: !5)
!69 = !DILocation(line: 74, column: 37, scope: !5)
!70 = !DILocation(line: 243, column: 36, scope: !52, inlinedAt: !71)
!71 = !DILocation(line: 75, column: 27, scope: !52)
!72 = !DILocation(line: 233, column: 15, scope: !56, inlinedAt: !73)
!73 = !DILocation(line: 243, column: 36, scope: !56, inlinedAt: !74)
!74 = !DILocation(line: 75, column: 27, scope: !56)
!75 = !DILocation(line: 76, column: 25, scope: !5)
!76 = !DILocation(line: 76, column: 37, scope: !5)
!77 = !DILocation(line: 76, column: 4, scope: !5)
