; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %urem = and i32 %7, 255, !dbg !10
  %8 = shl nuw nsw i32 %urem, 2, !dbg !10
  %9 = or i32 %8, 1024, !dbg !10
  %10 = or i32 %urem, 256, !dbg !10
  %11 = or i32 %urem, 512, !dbg !10
  %12 = or i32 %urem, 768, !dbg !10
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %14 = icmp slt i32 %13, 2304, !dbg !12
  %15 = mul nuw nsw i32 %urem, 2304, !dbg !13
  %16 = mul nuw nsw i32 %10, 2304, !dbg !13
  %17 = mul nuw nsw i32 %11, 2304, !dbg !13
  %18 = mul nuw nsw i32 %12, 2304, !dbg !13
  %19 = add i32 %13, %15, !dbg !14
  %20 = add i32 %13, %16, !dbg !14
  %21 = add i32 %13, %17, !dbg !14
  %22 = add i32 %13, %18, !dbg !14
  %23 = add i32 %19, 2359296, !dbg !14
  %24 = add i32 %19, 2949120, !dbg !14
  %25 = add i32 %19, 3538944, !dbg !14
  %26 = add i32 %19, 4128768, !dbg !14
  %27 = sext i32 %19 to i64, !dbg !15
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !15
  %29 = sext i32 %20 to i64, !dbg !15
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !15
  %31 = sext i32 %21 to i64, !dbg !15
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !15
  %33 = sext i32 %22 to i64, !dbg !15
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !15
  %35 = sext i32 %23 to i64, !dbg !15
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !15
  %37 = sext i32 %24 to i64, !dbg !15
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !15
  %39 = sext i32 %25 to i64, !dbg !15
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !15
  %41 = sext i32 %26 to i64, !dbg !15
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !15
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %14, i32 0, i1 %14) #6, !dbg !16
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %14, i32 0, i1 %14) #6, !dbg !16
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %14, i32 0, i1 %14) #6, !dbg !16
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %14, i32 0, i1 %14) #6, !dbg !16
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %14, i32 0, i1 %14) #6, !dbg !16
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %14, i32 0, i1 %14) #6, !dbg !16
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %14, i32 0, i1 %14) #6, !dbg !16
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %14, i32 0, i1 %14) #6, !dbg !16
  %51 = zext nneg i32 %urem to i64, !dbg !16
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i64 %51, !dbg !16
  store i32 %43, ptr addrspace(3) %52, align 4, !dbg !16
  %53 = zext nneg i32 %10 to i64, !dbg !16
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i64 %53, !dbg !16
  store i32 %44, ptr addrspace(3) %54, align 4, !dbg !16
  %55 = zext nneg i32 %11 to i64, !dbg !16
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i64 %55, !dbg !16
  store i32 %45, ptr addrspace(3) %56, align 4, !dbg !16
  %57 = zext nneg i32 %12 to i64, !dbg !16
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i64 %57, !dbg !16
  store i32 %46, ptr addrspace(3) %58, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %59 = zext nneg i32 %8 to i64, !dbg !16
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i64 %59, !dbg !16
  %61 = load <4 x float>, ptr addrspace(3) %60, align 16, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  store i32 %47, ptr addrspace(3) %52, align 4, !dbg !16
  store i32 %48, ptr addrspace(3) %54, align 4, !dbg !16
  store i32 %49, ptr addrspace(3) %56, align 4, !dbg !16
  store i32 %50, ptr addrspace(3) %58, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %62 = load <4 x float>, ptr addrspace(3) %60, align 16, !dbg !16
  %63 = getelementptr i16, ptr addrspace(1) %1, i64 %27, !dbg !17
  %64 = getelementptr i16, ptr addrspace(1) %1, i64 %29, !dbg !17
  %65 = getelementptr i16, ptr addrspace(1) %1, i64 %31, !dbg !17
  %66 = getelementptr i16, ptr addrspace(1) %1, i64 %33, !dbg !17
  %67 = getelementptr i16, ptr addrspace(1) %1, i64 %35, !dbg !17
  %68 = getelementptr i16, ptr addrspace(1) %1, i64 %37, !dbg !17
  %69 = getelementptr i16, ptr addrspace(1) %1, i64 %39, !dbg !17
  %70 = getelementptr i16, ptr addrspace(1) %1, i64 %41, !dbg !17
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %63, i1 %14, i16 0, i1 %14) #6, !dbg !18
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %64, i1 %14, i16 0, i1 %14) #6, !dbg !18
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %65, i1 %14, i16 0, i1 %14) #6, !dbg !18
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %66, i1 %14, i16 0, i1 %14) #6, !dbg !18
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %67, i1 %14, i16 0, i1 %14) #6, !dbg !18
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %68, i1 %14, i16 0, i1 %14) #6, !dbg !18
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %69, i1 %14, i16 0, i1 %14) #6, !dbg !18
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %70, i1 %14, i16 0, i1 %14) #6, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %79 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %51, !dbg !19
  %80 = insertelement <1 x i16> undef, i16 %71, i64 0, !dbg !19
  store <1 x i16> %80, ptr addrspace(3) %79, align 2, !dbg !19
  %81 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %53, !dbg !19
  %82 = insertelement <1 x i16> undef, i16 %72, i64 0, !dbg !19
  store <1 x i16> %82, ptr addrspace(3) %81, align 2, !dbg !19
  %83 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %55, !dbg !19
  %84 = insertelement <1 x i16> undef, i16 %73, i64 0, !dbg !19
  store <1 x i16> %84, ptr addrspace(3) %83, align 2, !dbg !19
  %85 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %57, !dbg !19
  %86 = insertelement <1 x i16> undef, i16 %74, i64 0, !dbg !19
  store <1 x i16> %86, ptr addrspace(3) %85, align 2, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %87 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %59, !dbg !19
  %88 = load i16, ptr addrspace(3) %87, align 8, !dbg !19
  %89 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %87, i64 0, i64 1, !dbg !19
  %90 = load i16, ptr addrspace(3) %89, align 2, !dbg !19
  %91 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %87, i64 0, i64 2, !dbg !19
  %92 = load i16, ptr addrspace(3) %91, align 4, !dbg !19
  %93 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %87, i64 0, i64 3, !dbg !19
  %94 = load i16, ptr addrspace(3) %93, align 2, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %95 = insertelement <1 x i16> undef, i16 %75, i64 0, !dbg !19
  store <1 x i16> %95, ptr addrspace(3) %79, align 2, !dbg !19
  %96 = insertelement <1 x i16> undef, i16 %76, i64 0, !dbg !19
  store <1 x i16> %96, ptr addrspace(3) %81, align 2, !dbg !19
  %97 = insertelement <1 x i16> undef, i16 %77, i64 0, !dbg !19
  store <1 x i16> %97, ptr addrspace(3) %83, align 2, !dbg !19
  %98 = insertelement <1 x i16> undef, i16 %78, i64 0, !dbg !19
  store <1 x i16> %98, ptr addrspace(3) %85, align 2, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %99 = load i16, ptr addrspace(3) %87, align 8, !dbg !19
  %100 = load i16, ptr addrspace(3) %89, align 2, !dbg !19
  %101 = load i16, ptr addrspace(3) %91, align 4, !dbg !19
  %102 = load i16, ptr addrspace(3) %93, align 2, !dbg !19
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #6, !dbg !19
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #6, !dbg !19
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #6, !dbg !19
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #6, !dbg !19
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #6, !dbg !19
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #6, !dbg !19
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #6, !dbg !19
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #6, !dbg !19
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !20
  %112 = zext nneg i32 %9 to i64, !dbg !20
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !20
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !21
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !21
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !21
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !21
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !21
  %119 = bitcast i32 %115 to float, !dbg !21
  %120 = bitcast i32 %116 to float, !dbg !21
  %121 = bitcast i32 %117 to float, !dbg !21
  %122 = bitcast i32 %118 to float, !dbg !21
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !21
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !21
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !21
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !21
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !21
  %128 = bitcast i32 %124 to float, !dbg !21
  %129 = bitcast i32 %125 to float, !dbg !21
  %130 = bitcast i32 %126 to float, !dbg !21
  %131 = bitcast i32 %127 to float, !dbg !21
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float 2.304000e+03) #6, !dbg !22
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 2.304000e+03) #6, !dbg !22
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 2.304000e+03) #6, !dbg !22
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float 2.304000e+03) #6, !dbg !22
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float 2.304000e+03) #6, !dbg !22
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 2.304000e+03) #6, !dbg !22
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float 2.304000e+03) #6, !dbg !22
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 2.304000e+03) #6, !dbg !22
  %140 = fadd float %132, 0x3EE4F8B580000000, !dbg !23
  %141 = fadd float %133, 0x3EE4F8B580000000, !dbg !23
  %142 = fadd float %134, 0x3EE4F8B580000000, !dbg !23
  %143 = fadd float %135, 0x3EE4F8B580000000, !dbg !23
  %144 = fadd float %136, 0x3EE4F8B580000000, !dbg !23
  %145 = fadd float %137, 0x3EE4F8B580000000, !dbg !23
  %146 = fadd float %138, 0x3EE4F8B580000000, !dbg !23
  %147 = fadd float %139, 0x3EE4F8B580000000, !dbg !23
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i = icmp eq i32 %148, 0, !dbg !24
  br i1 %.not.i, label %151, label %149, !dbg !24

149:                                              ; preds = %6
  %150 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %140), !dbg !24
  br label %__nv_rsqrtf.exit, !dbg !24

151:                                              ; preds = %6
  %152 = tail call float @llvm.nvvm.rsqrt.approx.f(float %140), !dbg !24
  br label %__nv_rsqrtf.exit, !dbg !24

__nv_rsqrtf.exit:                                 ; preds = %149, %151
  %.0.i = phi float [ %150, %149 ], [ %152, %151 ], !dbg !24
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i1 = icmp eq i32 %153, 0, !dbg !24
  br i1 %.not.i1, label %156, label %154, !dbg !24

154:                                              ; preds = %__nv_rsqrtf.exit
  %155 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %141), !dbg !24
  br label %__nv_rsqrtf.exit3, !dbg !24

156:                                              ; preds = %__nv_rsqrtf.exit
  %157 = tail call float @llvm.nvvm.rsqrt.approx.f(float %141), !dbg !24
  br label %__nv_rsqrtf.exit3, !dbg !24

__nv_rsqrtf.exit3:                                ; preds = %154, %156
  %.0.i2 = phi float [ %155, %154 ], [ %157, %156 ], !dbg !24
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i4 = icmp eq i32 %158, 0, !dbg !24
  br i1 %.not.i4, label %161, label %159, !dbg !24

159:                                              ; preds = %__nv_rsqrtf.exit3
  %160 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %142), !dbg !24
  br label %__nv_rsqrtf.exit6, !dbg !24

161:                                              ; preds = %__nv_rsqrtf.exit3
  %162 = tail call float @llvm.nvvm.rsqrt.approx.f(float %142), !dbg !24
  br label %__nv_rsqrtf.exit6, !dbg !24

__nv_rsqrtf.exit6:                                ; preds = %159, %161
  %.0.i5 = phi float [ %160, %159 ], [ %162, %161 ], !dbg !24
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i7 = icmp eq i32 %163, 0, !dbg !24
  br i1 %.not.i7, label %166, label %164, !dbg !24

164:                                              ; preds = %__nv_rsqrtf.exit6
  %165 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %143), !dbg !24
  br label %__nv_rsqrtf.exit9, !dbg !24

166:                                              ; preds = %__nv_rsqrtf.exit6
  %167 = tail call float @llvm.nvvm.rsqrt.approx.f(float %143), !dbg !24
  br label %__nv_rsqrtf.exit9, !dbg !24

__nv_rsqrtf.exit9:                                ; preds = %164, %166
  %.0.i8 = phi float [ %165, %164 ], [ %167, %166 ], !dbg !24
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i10 = icmp eq i32 %168, 0, !dbg !24
  br i1 %.not.i10, label %171, label %169, !dbg !24

169:                                              ; preds = %__nv_rsqrtf.exit9
  %170 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !24
  br label %__nv_rsqrtf.exit12, !dbg !24

171:                                              ; preds = %__nv_rsqrtf.exit9
  %172 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !24
  br label %__nv_rsqrtf.exit12, !dbg !24

__nv_rsqrtf.exit12:                               ; preds = %169, %171
  %.0.i11 = phi float [ %170, %169 ], [ %172, %171 ], !dbg !24
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i13 = icmp eq i32 %173, 0, !dbg !24
  br i1 %.not.i13, label %176, label %174, !dbg !24

174:                                              ; preds = %__nv_rsqrtf.exit12
  %175 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !24
  br label %__nv_rsqrtf.exit15, !dbg !24

176:                                              ; preds = %__nv_rsqrtf.exit12
  %177 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !24
  br label %__nv_rsqrtf.exit15, !dbg !24

__nv_rsqrtf.exit15:                               ; preds = %174, %176
  %.0.i14 = phi float [ %175, %174 ], [ %177, %176 ], !dbg !24
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i16 = icmp eq i32 %178, 0, !dbg !24
  br i1 %.not.i16, label %181, label %179, !dbg !24

179:                                              ; preds = %__nv_rsqrtf.exit15
  %180 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %146), !dbg !24
  br label %__nv_rsqrtf.exit18, !dbg !24

181:                                              ; preds = %__nv_rsqrtf.exit15
  %182 = tail call float @llvm.nvvm.rsqrt.approx.f(float %146), !dbg !24
  br label %__nv_rsqrtf.exit18, !dbg !24

__nv_rsqrtf.exit18:                               ; preds = %179, %181
  %.0.i17 = phi float [ %180, %179 ], [ %182, %181 ], !dbg !24
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i19 = icmp eq i32 %183, 0, !dbg !24
  br i1 %.not.i19, label %186, label %184, !dbg !24

184:                                              ; preds = %__nv_rsqrtf.exit18
  %185 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !24
  br label %__nv_rsqrtf.exit21, !dbg !24

186:                                              ; preds = %__nv_rsqrtf.exit18
  %187 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !24
  br label %__nv_rsqrtf.exit21, !dbg !24

__nv_rsqrtf.exit21:                               ; preds = %184, %186
  %.0.i20 = phi float [ %185, %184 ], [ %187, %186 ], !dbg !24
  %188 = extractelement <4 x float> %61, i64 1, !dbg !16
  %189 = extractelement <4 x float> %61, i64 0, !dbg !16
  %190 = lshr i32 %7, 5, !dbg !10
  %191 = and i32 %190, 7, !dbg !10
  %192 = and i32 %7, 31, !dbg !10
  %193 = fmul float %103, %.0.i, !dbg !25
  %194 = fmul float %104, %.0.i2, !dbg !25
  %195 = insertelement <2 x float> poison, float %105, i64 0, !dbg !25
  %196 = insertelement <2 x float> %195, float %106, i64 1, !dbg !25
  %197 = insertelement <2 x float> poison, float %.0.i5, i64 0, !dbg !25
  %198 = insertelement <2 x float> %197, float %.0.i8, i64 1, !dbg !25
  %199 = fmul <2 x float> %196, %198, !dbg !25
  %200 = insertelement <2 x float> poison, float %107, i64 0, !dbg !25
  %201 = insertelement <2 x float> %200, float %108, i64 1, !dbg !25
  %202 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !25
  %203 = insertelement <2 x float> %202, float %.0.i14, i64 1, !dbg !25
  %204 = fmul <2 x float> %201, %203, !dbg !25
  %205 = insertelement <2 x float> poison, float %109, i64 0, !dbg !25
  %206 = insertelement <2 x float> %205, float %110, i64 1, !dbg !25
  %207 = insertelement <2 x float> poison, float %.0.i17, i64 0, !dbg !25
  %208 = insertelement <2 x float> %207, float %.0.i20, i64 1, !dbg !25
  %209 = fmul <2 x float> %206, %208, !dbg !25
  %210 = fmul float %189, %193, !dbg !26
  %211 = fmul float %188, %194, !dbg !26
  %212 = fadd float %210, 0.000000e+00, !dbg !27
  %213 = fadd float %211, 0.000000e+00, !dbg !27
  %214 = shufflevector <4 x float> %61, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !26
  %215 = fmul <2 x float> %214, %199, !dbg !26
  %216 = fadd <2 x float> %215, zeroinitializer, !dbg !27
  %217 = shufflevector <4 x float> %62, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !26
  %218 = fmul <2 x float> %217, %204, !dbg !26
  %219 = fadd <2 x float> %218, zeroinitializer, !dbg !27
  %220 = shufflevector <4 x float> %62, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !26
  %221 = fmul <2 x float> %220, %209, !dbg !26
  %222 = fadd <2 x float> %221, zeroinitializer, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %223 = fadd float %212, %213, !dbg !32
  %224 = extractelement <2 x float> %216, i64 0, !dbg !32
  %225 = fadd float %223, %224, !dbg !32
  %226 = extractelement <2 x float> %216, i64 1, !dbg !32
  %227 = fadd float %225, %226, !dbg !32
  %228 = extractelement <2 x float> %219, i64 0, !dbg !32
  %229 = fadd float %227, %228, !dbg !32
  %230 = extractelement <2 x float> %219, i64 1, !dbg !32
  %231 = fadd float %229, %230, !dbg !32
  %232 = extractelement <2 x float> %222, i64 0, !dbg !32
  %233 = fadd float %231, %232, !dbg !32
  %234 = extractelement <2 x float> %222, i64 1, !dbg !32
  %235 = fadd float %233, %234, !dbg !32
  %236 = select i1 %14, float %235, float 0.000000e+00, !dbg !32
  %237 = bitcast float %236 to i32, !dbg !28
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 16, i32 31), !dbg !28
  %239 = bitcast i32 %238 to float, !dbg !28
  %240 = fadd float %236, %239, !dbg !32
  %241 = bitcast float %240 to i32, !dbg !28
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !28
  %243 = bitcast i32 %242 to float, !dbg !28
  %244 = fadd float %240, %243, !dbg !32
  %245 = bitcast float %244 to i32, !dbg !28
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !28
  %247 = bitcast i32 %246 to float, !dbg !28
  %248 = fadd float %244, %247, !dbg !32
  %249 = bitcast float %248 to i32, !dbg !28
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !28
  %251 = bitcast i32 %250 to float, !dbg !28
  %252 = fadd float %248, %251, !dbg !32
  %253 = bitcast float %252 to i32, !dbg !28
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 1, i32 31), !dbg !28
  %255 = bitcast i32 %254 to float, !dbg !28
  %256 = fadd float %252, %255, !dbg !32
  %257 = icmp eq i32 %192, 0, !dbg !28
  %258 = zext nneg i32 %191 to i64, !dbg !28
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i64 %258, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, float %256, i1 %257) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %260 = icmp slt i32 %7, 8, !dbg !28
  %261 = sext i32 %7 to i64, !dbg !28
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i64 %261, !dbg !28
  %263 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %262, i1 %260) #6, !dbg !28
  %264 = bitcast float %263 to i32, !dbg !28
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !28
  %266 = bitcast i32 %265 to float, !dbg !28
  %267 = fadd float %263, %266, !dbg !32
  %268 = bitcast float %267 to i32, !dbg !28
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !28
  %270 = bitcast i32 %269 to float, !dbg !28
  %271 = fadd float %267, %270, !dbg !32
  %272 = bitcast float %271 to i32, !dbg !28
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 1, i32 31), !dbg !28
  %274 = bitcast i32 %273 to float, !dbg !28
  %275 = fadd float %271, %274, !dbg !32
  %276 = and i32 %7, 7, !dbg !28
  %277 = icmp eq i32 %276, 0, !dbg !28
  %278 = and i1 %260, %277, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, float %275, i1 %278) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %279 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %280 = insertelement <1 x float> undef, float %279, i64 0, !dbg !36
  store <1 x float> %280, ptr addrspace(3) @global_smem, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %281 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !36
  %282 = sext i32 %13 to i64, !dbg !37
  %283 = getelementptr float, ptr addrspace(1) %3, i64 %282, !dbg !37
  %284 = icmp eq i32 %urem, 0, !dbg !38
  %285 = and i1 %284, %14, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %281, ptr addrspace(1) %283, i1 %285) #6, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ckdmwnrc2bics5en3rl4ainpnaaui2j5dgcmxxj6beluf2htxu5h.py", directory: "/tmp/torchinductor_zeus/kd")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 51, scope: !7)
!19 = !DILocation(line: 32, column: 111, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 39, scope: !7)
!22 = !DILocation(line: 36, column: 22, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 39, column: 29, scope: !7)
!25 = !DILocation(line: 40, column: 22, scope: !7)
!26 = !DILocation(line: 41, column: 23, scope: !7)
!27 = !DILocation(line: 43, column: 25, scope: !7)
!28 = !DILocation(line: 243, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!31 = !DILocation(line: 45, column: 27, scope: !29)
!32 = !DILocation(line: 233, column: 15, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 243, column: 36, scope: !33, inlinedAt: !35)
!35 = !DILocation(line: 45, column: 27, scope: !33)
!36 = !DILocation(line: 45, column: 30, scope: !7)
!37 = !DILocation(line: 46, column: 25, scope: !7)
!38 = !DILocation(line: 46, column: 37, scope: !7)
!39 = !DILocation(line: 46, column: 4, scope: !7)
