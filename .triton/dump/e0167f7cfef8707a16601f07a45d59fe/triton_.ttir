module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c2048_i32 = arith.constant 2048 : i32
    %c-1_i32 = arith.constant -1 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %cst_0 = arith.constant dense<true> : tensor<1x2048xi1>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %cst_2 = arith.constant dense<-3.38953139E+38> : tensor<1x2048xf32>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_4 = arith.constant dense<1> : tensor<1x2048xi64>
    %cst_5 = arith.constant dense<5.000000e+01> : tensor<1x2048xf32>
    %cst_6 = arith.constant dense<6.250000e-02> : tensor<1x2048xf32>
    %cst_7 = arith.constant dense<2048> : tensor<1x2048xi32>
    %cst_8 = arith.constant dense<0xFF800000> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %3 = arith.remsi %0, %c2048_i32 : i32
    %4 = arith.cmpi slt, %2, %cst_7 : tensor<1x2048xi32>
    %5 = arith.muli %0, %c2048_i32 : i32
    %6 = tt.splat %5 : (i32) -> tensor<1x2048xi32>
    %7 = arith.addi %2, %6 : tensor<1x2048xi32>
    %8 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %9 = tt.addptr %8, %7 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
    %10 = tt.load %9, %4, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
    %11 = arith.extf %10 : tensor<1x2048xbf16> to tensor<1x2048xf32>
    %12 = arith.mulf %11, %cst_6 : tensor<1x2048xf32>
    %13 = arith.divf %12, %cst_5 : tensor<1x2048xf32>
    %14 = tt.extern_elementwise %13 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32>) -> tensor<1x2048xf32>
    %15 = arith.mulf %14, %cst_5 : tensor<1x2048xf32>
    %16 = arith.muli %3, %c-1_i32 : i32
    %17 = tt.splat %16 : (i32) -> tensor<1x2048xi32>
    %18 = arith.addi %2, %17 : tensor<1x2048xi32>
    %19 = arith.extsi %18 : tensor<1x2048xi32> to tensor<1x2048xi64>
    %20 = arith.cmpi sge, %19, %cst_4 : tensor<1x2048xi64>
    %21 = arith.select %20, %cst_3, %cst_1 : tensor<1x2048xi1>, tensor<1x2048xf32>
    %22 = arith.cmpf une, %21, %cst_1 : tensor<1x2048xf32>
    %23 = arith.select %22, %cst_2, %21 : tensor<1x2048xi1>, tensor<1x2048xf32>
    %24 = arith.addf %15, %23 : tensor<1x2048xf32>
    %25 = arith.cmpf ogt, %cst_8, %24 : tensor<1x2048xf32>
    %26 = arith.xori %25, %cst_0 : tensor<1x2048xi1>
    %27 = arith.andi %4, %26 : tensor<1x2048xi1>
    %28 = arith.select %27, %24, %cst_8 : tensor<1x2048xi1>, tensor<1x2048xf32>
    %29 = "tt.reduce"(%28) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %63 = arith.cmpf ogt, %arg6, %arg7 : f32
      %64 = arith.cmpf une, %arg6, %arg6 : f32
      %65 = arith.ori %63, %64 : i1
      %66 = arith.select %65, %arg6, %arg7 : f32
      tt.reduce.return %66 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %30 = tt.expand_dims %29 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %31 = tt.addptr %arg1, %0 : !tt.ptr<f32, 1>, i32
    %32 = tt.splat %31 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %32, %30 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %33 = tt.load %9, %4, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
    %34 = arith.extf %33 : tensor<1x2048xbf16> to tensor<1x2048xf32>
    %35 = arith.mulf %34, %cst_6 : tensor<1x2048xf32>
    %36 = arith.divf %35, %cst_5 : tensor<1x2048xf32>
    %37 = tt.extern_elementwise %36 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32>) -> tensor<1x2048xf32>
    %38 = arith.mulf %37, %cst_5 : tensor<1x2048xf32>
    %39 = arith.addf %38, %23 : tensor<1x2048xf32>
    %40 = tt.broadcast %30 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %41 = arith.subf %39, %40 : tensor<1x2048xf32>
    %42 = math.exp %41 : tensor<1x2048xf32>
    %43 = arith.addf %42, %cst_1 : tensor<1x2048xf32>
    %44 = arith.select %4, %43, %cst_1 : tensor<1x2048xi1>, tensor<1x2048xf32>
    %45 = "tt.reduce"(%44) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %63 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %63 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %46 = tt.expand_dims %45 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %47 = tt.addptr %arg2, %0 : !tt.ptr<f32, 1>, i32
    %48 = tt.splat %47 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %48, %46 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %49 = tt.load %9, %4, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
    %50 = arith.extf %49 : tensor<1x2048xbf16> to tensor<1x2048xf32>
    %51 = arith.mulf %50, %cst_6 : tensor<1x2048xf32>
    %52 = arith.divf %51, %cst_5 : tensor<1x2048xf32>
    %53 = tt.extern_elementwise %52 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32>) -> tensor<1x2048xf32>
    %54 = arith.mulf %53, %cst_5 : tensor<1x2048xf32>
    %55 = arith.addf %54, %23 : tensor<1x2048xf32>
    %56 = arith.subf %55, %40 : tensor<1x2048xf32>
    %57 = math.exp %56 : tensor<1x2048xf32>
    %58 = tt.broadcast %46 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %59 = arith.divf %57, %58 : tensor<1x2048xf32>
    %60 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %61 = tt.addptr %60, %7 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
    %62 = arith.truncf %59 : tensor<1x2048xf32> to tensor<1x2048xbf16>
    tt.store %61, %62, %4 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    tt.return
  }
}
