; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = shl i32 %8, 2, !dbg !8
  %9 = and i32 %urem, 1020, !dbg !8
  %10 = or i32 %9, 1024, !dbg !8
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %12 = mul i32 %11, 2304, !dbg !10
  %13 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !11
  %14 = insertelement <2 x i32> %13, i32 %10, i64 1, !dbg !11
  %15 = lshr i32 %8, 5, !dbg !8
  %16 = add i32 %9, %12, !dbg !12
  %17 = add i32 %10, %12, !dbg !12
  %18 = sext i32 %16 to i64, !dbg !13
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !13
  %20 = sext i32 %17 to i64, !dbg !13
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !13
  %22 = zext nneg i32 %9 to i64, !dbg !14
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !14
  %24 = zext nneg i32 %10 to i64, !dbg !14
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !14
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !15
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !16
  %38 = insertelement <8 x i32> poison, i32 %29, i64 0, !dbg !16
  %39 = insertelement <8 x i32> %38, i32 %30, i64 1, !dbg !16
  %40 = insertelement <8 x i32> %39, i32 %31, i64 2, !dbg !16
  %41 = insertelement <8 x i32> %40, i32 %32, i64 3, !dbg !16
  %42 = insertelement <8 x i32> %41, i32 %34, i64 4, !dbg !16
  %43 = insertelement <8 x i32> %42, i32 %35, i64 5, !dbg !16
  %44 = insertelement <8 x i32> %43, i32 %36, i64 6, !dbg !16
  %45 = insertelement <8 x i32> %44, i32 %37, i64 7, !dbg !16
  %46 = bitcast <8 x i32> %45 to <8 x float>, !dbg !16
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !17
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !17
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !17
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !17
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !17
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !17
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !17
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !17
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !17
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !17
  %57 = insertelement <8 x i32> poison, i32 %48, i64 0, !dbg !17
  %58 = insertelement <8 x i32> %57, i32 %49, i64 1, !dbg !17
  %59 = insertelement <8 x i32> %58, i32 %50, i64 2, !dbg !17
  %60 = insertelement <8 x i32> %59, i32 %51, i64 3, !dbg !17
  %61 = insertelement <8 x i32> %60, i32 %53, i64 4, !dbg !17
  %62 = insertelement <8 x i32> %61, i32 %54, i64 5, !dbg !17
  %63 = insertelement <8 x i32> %62, i32 %55, i64 6, !dbg !17
  %64 = insertelement <8 x i32> %63, i32 %56, i64 7, !dbg !17
  %65 = bitcast <8 x i32> %64 to <8 x float>, !dbg !17
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !18
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !18
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !18
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !18
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !18
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !18
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !18
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !18
  %76 = insertelement <8 x i32> poison, i32 %67, i64 0, !dbg !18
  %77 = insertelement <8 x i32> %76, i32 %68, i64 1, !dbg !18
  %78 = insertelement <8 x i32> %77, i32 %69, i64 2, !dbg !18
  %79 = insertelement <8 x i32> %78, i32 %70, i64 3, !dbg !18
  %80 = insertelement <8 x i32> %79, i32 %72, i64 4, !dbg !18
  %81 = insertelement <8 x i32> %80, i32 %73, i64 5, !dbg !18
  %82 = insertelement <8 x i32> %81, i32 %74, i64 6, !dbg !18
  %83 = insertelement <8 x i32> %82, i32 %75, i64 7, !dbg !18
  %84 = bitcast <8 x i32> %83 to <8 x float>, !dbg !18
  %85 = fadd <8 x float> %65, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !19
  %86 = fmul <8 x float> %85, %46, !dbg !20
  %87 = fmul <8 x float> %86, %84, !dbg !21
  %88 = fadd <8 x float> %87, zeroinitializer, !dbg !22
  %89 = or <2 x i32> %14, <i32 2048, i32 2048>, !dbg !11
  %90 = extractelement <2 x i32> %89, i64 0, !dbg !14
  %91 = add i32 %90, %12, !dbg !12
  %92 = extractelement <2 x i32> %89, i64 1, !dbg !14
  %93 = add i32 %92, %12, !dbg !12
  %94 = sext i32 %91 to i64, !dbg !13
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !13
  %96 = sext i32 %93 to i64, !dbg !13
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !13
  %98 = zext nneg i32 %90 to i64, !dbg !14
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !14
  %100 = zext nneg i32 %92 to i64, !dbg !14
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !14
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !15
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !15
  %104 = icmp ult <2 x i32> %89, <i32 2304, i32 2304>, !dbg !23
  %105 = shufflevector <2 x i1> %104, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !23
  %106 = extractelement <2 x i1> %104, i64 0, !dbg !16
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !16
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !16
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !16
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !16
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !16
  %112 = extractelement <2 x i1> %104, i64 1, !dbg !16
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !16
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !16
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !16
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !16
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !16
  %118 = insertelement <8 x i32> poison, i32 %108, i64 0, !dbg !16
  %119 = insertelement <8 x i32> %118, i32 %109, i64 1, !dbg !16
  %120 = insertelement <8 x i32> %119, i32 %110, i64 2, !dbg !16
  %121 = insertelement <8 x i32> %120, i32 %111, i64 3, !dbg !16
  %122 = insertelement <8 x i32> %121, i32 %114, i64 4, !dbg !16
  %123 = insertelement <8 x i32> %122, i32 %115, i64 5, !dbg !16
  %124 = insertelement <8 x i32> %123, i32 %116, i64 6, !dbg !16
  %125 = insertelement <8 x i32> %124, i32 %117, i64 7, !dbg !16
  %126 = bitcast <8 x i32> %125 to <8 x float>, !dbg !16
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !17
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !17
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !17
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !17
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !17
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !17
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !17
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !17
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !17
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !17
  %137 = insertelement <8 x i32> poison, i32 %128, i64 0, !dbg !17
  %138 = insertelement <8 x i32> %137, i32 %129, i64 1, !dbg !17
  %139 = insertelement <8 x i32> %138, i32 %130, i64 2, !dbg !17
  %140 = insertelement <8 x i32> %139, i32 %131, i64 3, !dbg !17
  %141 = insertelement <8 x i32> %140, i32 %133, i64 4, !dbg !17
  %142 = insertelement <8 x i32> %141, i32 %134, i64 5, !dbg !17
  %143 = insertelement <8 x i32> %142, i32 %135, i64 6, !dbg !17
  %144 = insertelement <8 x i32> %143, i32 %136, i64 7, !dbg !17
  %145 = bitcast <8 x i32> %144 to <8 x float>, !dbg !17
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !18
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !18
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !18
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !18
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !18
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !18
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !18
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !18
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !18
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !18
  %156 = insertelement <8 x i32> poison, i32 %147, i64 0, !dbg !18
  %157 = insertelement <8 x i32> %156, i32 %148, i64 1, !dbg !18
  %158 = insertelement <8 x i32> %157, i32 %149, i64 2, !dbg !18
  %159 = insertelement <8 x i32> %158, i32 %150, i64 3, !dbg !18
  %160 = insertelement <8 x i32> %159, i32 %152, i64 4, !dbg !18
  %161 = insertelement <8 x i32> %160, i32 %153, i64 5, !dbg !18
  %162 = insertelement <8 x i32> %161, i32 %154, i64 6, !dbg !18
  %163 = insertelement <8 x i32> %162, i32 %155, i64 7, !dbg !18
  %164 = bitcast <8 x i32> %163 to <8 x float>, !dbg !18
  %165 = fadd <8 x float> %145, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !19
  %166 = fmul <8 x float> %165, %126, !dbg !20
  %167 = fmul <8 x float> %166, %164, !dbg !21
  %168 = select <8 x i1> %105, <8 x float> %167, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !22
  %169 = fadd <8 x float> %88, %168, !dbg !22
  %170 = and i32 %8, 31, !dbg !8
  %171 = and i32 %15, 7, !dbg !8
  %shift = shufflevector <8 x float> %169, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %172 = fadd <8 x float> %169, %shift, !dbg !24
  %shift23 = shufflevector <8 x float> %169, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %173 = fadd <8 x float> %shift23, %172, !dbg !24
  %shift24 = shufflevector <8 x float> %169, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %174 = fadd <8 x float> %shift24, %173, !dbg !24
  %shift25 = shufflevector <8 x float> %169, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %175 = fadd <8 x float> %shift25, %174, !dbg !24
  %shift26 = shufflevector <8 x float> %169, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %176 = fadd <8 x float> %shift26, %175, !dbg !24
  %shift27 = shufflevector <8 x float> %169, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %177 = fadd <8 x float> %shift27, %176, !dbg !24
  %shift28 = shufflevector <8 x float> %169, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %178 = fadd <8 x float> %shift28, %177, !dbg !24
  %179 = extractelement <8 x float> %178, i64 0, !dbg !24
  %180 = bitcast float %179 to i32, !dbg !30
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 16, i32 31), !dbg !30
  %182 = bitcast i32 %181 to float, !dbg !30
  %183 = fadd float %179, %182, !dbg !24
  %184 = bitcast float %183 to i32, !dbg !30
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 8, i32 31), !dbg !30
  %186 = bitcast i32 %185 to float, !dbg !30
  %187 = fadd float %183, %186, !dbg !24
  %188 = bitcast float %187 to i32, !dbg !30
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 4, i32 31), !dbg !30
  %190 = bitcast i32 %189 to float, !dbg !30
  %191 = fadd float %187, %190, !dbg !24
  %192 = bitcast float %191 to i32, !dbg !30
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 2, i32 31), !dbg !30
  %194 = bitcast i32 %193 to float, !dbg !30
  %195 = fadd float %191, %194, !dbg !24
  %196 = bitcast float %195 to i32, !dbg !30
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 1, i32 31), !dbg !30
  %198 = bitcast i32 %197 to float, !dbg !30
  %199 = fadd float %195, %198, !dbg !24
  %200 = icmp eq i32 %170, 0, !dbg !30
  %201 = zext nneg i32 %171 to i64, !dbg !30
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i64 %201, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, float %199, i1 %200) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %203 = icmp slt i32 %8, 8, !dbg !30
  %204 = sext i32 %8 to i64, !dbg !30
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i64 %204, !dbg !30
  %206 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %205, i1 %203) #3, !dbg !30
  %207 = bitcast float %206 to i32, !dbg !30
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 4, i32 31), !dbg !30
  %209 = bitcast i32 %208 to float, !dbg !30
  %210 = fadd float %206, %209, !dbg !24
  %211 = bitcast float %210 to i32, !dbg !30
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !30
  %213 = bitcast i32 %212 to float, !dbg !30
  %214 = fadd float %210, %213, !dbg !24
  %215 = bitcast float %214 to i32, !dbg !30
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !30
  %217 = bitcast i32 %216 to float, !dbg !30
  %218 = fadd float %214, %217, !dbg !24
  %219 = and i32 %8, 7, !dbg !30
  %220 = icmp eq i32 %219, 0, !dbg !30
  %221 = and i1 %203, %220, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, float %218, i1 %221) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %222 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !30
  %223 = sext i32 %11 to i64, !dbg !32
  %224 = getelementptr float, ptr addrspace(1) %3, i64 %223, !dbg !32
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #3, !dbg !33
  %226 = bitcast i32 %225 to float, !dbg !33
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #3, !dbg !33
  %228 = bitcast i32 %227 to float, !dbg !33
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #3, !dbg !33
  %230 = bitcast i32 %229 to float, !dbg !33
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #3, !dbg !33
  %232 = bitcast i32 %231 to float, !dbg !33
  %233 = fmul float %222, -5.000000e-01, !dbg !34
  %234 = fmul float %226, %226, !dbg !35
  %235 = fmul float %228, %228, !dbg !35
  %236 = fmul float %230, %230, !dbg !35
  %237 = fmul float %232, %232, !dbg !35
  %238 = fmul float %234, %226, !dbg !36
  %239 = fmul float %235, %228, !dbg !36
  %240 = fmul float %236, %230, !dbg !36
  %241 = fmul float %237, %232, !dbg !36
  %242 = fmul float %233, %238, !dbg !37
  %243 = fmul float %233, %239, !dbg !37
  %244 = fmul float %233, %240, !dbg !37
  %245 = fmul float %233, %241, !dbg !37
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float 2.304000e+03) #3, !dbg !38
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float 2.304000e+03) #3, !dbg !38
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float 2.304000e+03) #3, !dbg !38
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float 2.304000e+03) #3, !dbg !38
  br label %250, !dbg !39

250:                                              ; preds = %7, %250
  %251 = phi i1 [ true, %7 ], [ false, %250 ]
  %252 = phi i32 [ 0, %7 ], [ 2048, %250 ]
  %253 = or i32 %252, %9, !dbg !40
  %254 = or i32 %252, %10, !dbg !40
  %255 = icmp ult i32 %253, 2304, !dbg !41
  %256 = icmp ult i32 %254, 2304, !dbg !41
  %257 = add i32 %253, %12, !dbg !42
  %258 = add i32 %254, %12, !dbg !42
  %259 = sext i32 %257 to i64, !dbg !43
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !43
  %261 = sext i32 %258 to i64, !dbg !43
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !43
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %260, i1 %255, i32 0, i1 %255, i32 0, i1 %255, i32 0, i1 %255, i32 0, i1 %255) #3, !dbg !44
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !44
  %265 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !44
  %266 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !44
  %267 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !44
  %268 = bitcast i32 %264 to float, !dbg !44
  %269 = bitcast i32 %265 to float, !dbg !44
  %270 = bitcast i32 %266 to float, !dbg !44
  %271 = bitcast i32 %267 to float, !dbg !44
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %262, i1 %256, i32 0, i1 %256, i32 0, i1 %256, i32 0, i1 %256, i32 0, i1 %256) #3, !dbg !44
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !44
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !44
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !44
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !44
  %277 = bitcast i32 %273 to float, !dbg !44
  %278 = bitcast i32 %274 to float, !dbg !44
  %279 = bitcast i32 %275 to float, !dbg !44
  %280 = bitcast i32 %276 to float, !dbg !44
  %281 = zext nneg i32 %253 to i64, !dbg !45
  %282 = getelementptr float, ptr addrspace(1) %1, i64 %281, !dbg !45
  %283 = zext nneg i32 %254 to i64, !dbg !45
  %284 = getelementptr float, ptr addrspace(1) %1, i64 %283, !dbg !45
  %285 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %282, i1 %255, i32 0, i1 %255, i32 0, i1 %255, i32 0, i1 %255, i32 0, i1 %255) #3, !dbg !46
  %286 = extractvalue { i32, i32, i32, i32 } %285, 0, !dbg !46
  %287 = extractvalue { i32, i32, i32, i32 } %285, 1, !dbg !46
  %288 = extractvalue { i32, i32, i32, i32 } %285, 2, !dbg !46
  %289 = extractvalue { i32, i32, i32, i32 } %285, 3, !dbg !46
  %290 = bitcast i32 %286 to float, !dbg !46
  %291 = bitcast i32 %287 to float, !dbg !46
  %292 = bitcast i32 %288 to float, !dbg !46
  %293 = bitcast i32 %289 to float, !dbg !46
  %294 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %284, i1 %256, i32 0, i1 %256, i32 0, i1 %256, i32 0, i1 %256, i32 0, i1 %256) #3, !dbg !46
  %295 = extractvalue { i32, i32, i32, i32 } %294, 0, !dbg !46
  %296 = extractvalue { i32, i32, i32, i32 } %294, 1, !dbg !46
  %297 = extractvalue { i32, i32, i32, i32 } %294, 2, !dbg !46
  %298 = extractvalue { i32, i32, i32, i32 } %294, 3, !dbg !46
  %299 = bitcast i32 %295 to float, !dbg !46
  %300 = bitcast i32 %296 to float, !dbg !46
  %301 = bitcast i32 %297 to float, !dbg !46
  %302 = bitcast i32 %298 to float, !dbg !46
  %303 = getelementptr float, ptr addrspace(1) %2, i64 %259, !dbg !47
  %304 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !47
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %303, i1 %255, i32 0, i1 %255, i32 0, i1 %255, i32 0, i1 %255, i32 0, i1 %255) #3, !dbg !48
  %306 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !48
  %307 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !48
  %308 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !48
  %309 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !48
  %310 = bitcast i32 %306 to float, !dbg !48
  %311 = bitcast i32 %307 to float, !dbg !48
  %312 = bitcast i32 %308 to float, !dbg !48
  %313 = bitcast i32 %309 to float, !dbg !48
  %314 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %304, i1 %256, i32 0, i1 %256, i32 0, i1 %256, i32 0, i1 %256, i32 0, i1 %256) #3, !dbg !48
  %315 = extractvalue { i32, i32, i32, i32 } %314, 0, !dbg !48
  %316 = extractvalue { i32, i32, i32, i32 } %314, 1, !dbg !48
  %317 = extractvalue { i32, i32, i32, i32 } %314, 2, !dbg !48
  %318 = extractvalue { i32, i32, i32, i32 } %314, 3, !dbg !48
  %319 = bitcast i32 %315 to float, !dbg !48
  %320 = bitcast i32 %316 to float, !dbg !48
  %321 = bitcast i32 %317 to float, !dbg !48
  %322 = bitcast i32 %318 to float, !dbg !48
  %323 = fadd float %290, 1.000000e+00, !dbg !49
  %324 = fadd float %291, 1.000000e+00, !dbg !49
  %325 = fadd float %292, 1.000000e+00, !dbg !49
  %326 = fadd float %293, 1.000000e+00, !dbg !49
  %327 = fadd float %299, 1.000000e+00, !dbg !49
  %328 = fadd float %300, 1.000000e+00, !dbg !49
  %329 = fadd float %301, 1.000000e+00, !dbg !49
  %330 = fadd float %302, 1.000000e+00, !dbg !49
  %331 = fmul float %323, %268, !dbg !50
  %332 = fmul float %324, %269, !dbg !50
  %333 = fmul float %325, %270, !dbg !50
  %334 = fmul float %326, %271, !dbg !50
  %335 = fmul float %327, %277, !dbg !50
  %336 = fmul float %328, %278, !dbg !50
  %337 = fmul float %329, %279, !dbg !50
  %338 = fmul float %330, %280, !dbg !50
  %339 = fmul float %331, %226, !dbg !51
  %340 = fmul float %332, %226, !dbg !51
  %341 = fmul float %333, %226, !dbg !51
  %342 = fmul float %334, %226, !dbg !51
  %343 = fmul float %335, %226, !dbg !51
  %344 = fmul float %336, %226, !dbg !51
  %345 = fmul float %337, %226, !dbg !51
  %346 = fmul float %338, %226, !dbg !51
  %347 = fmul float %246, %310, !dbg !52
  %348 = fmul float %246, %311, !dbg !52
  %349 = fmul float %246, %312, !dbg !52
  %350 = fmul float %246, %313, !dbg !52
  %351 = fmul float %246, %319, !dbg !52
  %352 = fmul float %246, %320, !dbg !52
  %353 = fmul float %246, %321, !dbg !52
  %354 = fmul float %246, %322, !dbg !52
  %355 = fadd float %339, %347, !dbg !53
  %356 = fadd float %340, %348, !dbg !53
  %357 = fadd float %341, %349, !dbg !53
  %358 = fadd float %342, %350, !dbg !53
  %359 = fadd float %343, %351, !dbg !53
  %360 = fadd float %344, %352, !dbg !53
  %361 = fadd float %345, %353, !dbg !53
  %362 = fadd float %346, %354, !dbg !53
  %363 = fadd float %347, %355, !dbg !54
  %364 = fadd float %348, %356, !dbg !54
  %365 = fadd float %349, %357, !dbg !54
  %366 = fadd float %350, %358, !dbg !54
  %367 = fadd float %351, %359, !dbg !54
  %368 = fadd float %352, %360, !dbg !54
  %369 = fadd float %353, %361, !dbg !54
  %370 = fadd float %354, %362, !dbg !54
  %371 = getelementptr float, ptr addrspace(1) %4, i64 %259, !dbg !55
  %372 = getelementptr float, ptr addrspace(1) %4, i64 %261, !dbg !55
  %373 = bitcast float %363 to i32, !dbg !56
  %374 = bitcast float %364 to i32, !dbg !56
  %375 = bitcast float %365 to i32, !dbg !56
  %376 = bitcast float %366 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %373, i32 %374, i32 %375, i32 %376, ptr addrspace(1) %371, i1 %255) #3, !dbg !56
  %377 = bitcast float %367 to i32, !dbg !56
  %378 = bitcast float %368 to i32, !dbg !56
  %379 = bitcast float %369 to i32, !dbg !56
  %380 = bitcast float %370 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %377, i32 %378, i32 %379, i32 %380, ptr addrspace(1) %372, i1 %256) #3, !dbg !56
  br i1 %251, label %250, label %381, !dbg !39

381:                                              ; preds = %250
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "clnuishwbsxifo75gyamscciwdbrn6rfaxzlf7ww5kyj3xyauivs.py", directory: "/tmp/torchinductor_zeus/ln")
!3 = !{ptr @triton__0d1d2d3d4d5de6de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6de", linkageName: "triton__0d1d2d3d4d5de6de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 31, column: 45, scope: !5)
!11 = !DILocation(line: 28, column: 27, scope: !5)
!12 = !DILocation(line: 31, column: 40, scope: !5)
!13 = !DILocation(line: 31, column: 34, scope: !5)
!14 = !DILocation(line: 32, column: 34, scope: !5)
!15 = !DILocation(line: 33, column: 34, scope: !5)
!16 = !DILocation(line: 31, column: 51, scope: !5)
!17 = !DILocation(line: 32, column: 39, scope: !5)
!18 = !DILocation(line: 33, column: 51, scope: !5)
!19 = !DILocation(line: 35, column: 22, scope: !5)
!20 = !DILocation(line: 36, column: 22, scope: !5)
!21 = !DILocation(line: 37, column: 22, scope: !5)
!22 = !DILocation(line: 40, column: 38, scope: !5)
!23 = !DILocation(line: 29, column: 25, scope: !5)
!24 = !DILocation(line: 233, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !5, file: !26, discriminator: 0)
!28 = !DILocation(line: 243, column: 36, scope: !25, inlinedAt: !29)
!29 = !DILocation(line: 41, column: 25, scope: !25)
!30 = !DILocation(line: 243, column: 36, scope: !27, inlinedAt: !31)
!31 = !DILocation(line: 41, column: 25, scope: !27)
!32 = !DILocation(line: 42, column: 31, scope: !5)
!33 = !DILocation(line: 42, column: 36, scope: !5)
!34 = !DILocation(line: 55, column: 23, scope: !5)
!35 = !DILocation(line: 56, column: 24, scope: !5)
!36 = !DILocation(line: 57, column: 24, scope: !5)
!37 = !DILocation(line: 58, column: 24, scope: !5)
!38 = !DILocation(line: 60, column: 24, scope: !5)
!39 = !DILocation(line: 43, column: 36, scope: !5)
!40 = !DILocation(line: 44, column: 27, scope: !5)
!41 = !DILocation(line: 45, column: 25, scope: !5)
!42 = !DILocation(line: 47, column: 41, scope: !5)
!43 = !DILocation(line: 47, column: 35, scope: !5)
!44 = !DILocation(line: 47, column: 52, scope: !5)
!45 = !DILocation(line: 48, column: 35, scope: !5)
!46 = !DILocation(line: 48, column: 40, scope: !5)
!47 = !DILocation(line: 49, column: 35, scope: !5)
!48 = !DILocation(line: 49, column: 52, scope: !5)
!49 = !DILocation(line: 51, column: 24, scope: !5)
!50 = !DILocation(line: 52, column: 24, scope: !5)
!51 = !DILocation(line: 53, column: 24, scope: !5)
!52 = !DILocation(line: 61, column: 24, scope: !5)
!53 = !DILocation(line: 62, column: 24, scope: !5)
!54 = !DILocation(line: 63, column: 24, scope: !5)
!55 = !DILocation(line: 64, column: 29, scope: !5)
!56 = !DILocation(line: 64, column: 53, scope: !5)
!57 = !DILocation(line: 43, column: 4, scope: !5)
