module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<2304> : tensor<1x1xi64>
    %cst_0 = arith.constant dense<0> : tensor<1x1xi64>
    %cst_1 = arith.constant dense<288256> : tensor<1x1xi64>
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_3 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_4 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_5 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32>
    %cst_6 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %3 = tt.addptr %arg0, %0 : !tt.ptr<i64, 1>, i32
    %4 = tt.splat %3 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>>
    %5 = tt.load %4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64>
    %6 = arith.addi %5, %cst_1 : tensor<1x1xi64>
    %7 = arith.cmpi slt, %5, %cst_0 : tensor<1x1xi64>
    %8 = arith.select %7, %6, %5 : tensor<1x1xi1>, tensor<1x1xi64>
    %9 = arith.cmpi sge, %8, %cst_0 : tensor<1x1xi64>
    %10 = arith.cmpi slt, %8, %cst_1 : tensor<1x1xi64>
    %11 = arith.andi %9, %10 : tensor<1x1xi1>
    %12 = arith.muli %8, %cst : tensor<1x1xi64>
    %13 = tt.broadcast %12 : (tensor<1x1xi64>) -> tensor<1x2048xi64>
    %14 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %15 = scf.for %arg6 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg7 = %cst_7) -> (tensor<1x2048xf32>)  : i32 {
      %33 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32>
      %34 = arith.addi %33, %2 : tensor<1x2048xi32>
      %35 = arith.cmpi slt, %34, %cst_6 : tensor<1x2048xi32>
      tt.assert %11, "index out of bounds: 0 <= tmp3 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<1x1xi1>
      %36 = arith.extsi %34 : tensor<1x2048xi32> to tensor<1x2048xi64>
      %37 = arith.addi %36, %13 : tensor<1x2048xi64>
      %38 = tt.addptr %14, %37 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi64>
      %39 = tt.load %38, %35, %cst_7 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %40 = arith.mulf %39, %cst_5 : tensor<1x2048xf32>
      %41 = arith.mulf %40, %40 : tensor<1x2048xf32>
      %42 = arith.addf %arg7, %41 : tensor<1x2048xf32>
      %43 = arith.select %35, %42, %arg7 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %43 : tensor<1x2048xf32>
    }
    %16 = "tt.reduce"(%15) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %33 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %33 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %17 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %18 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %19 = arith.addi %5, %cst_1 : tensor<1x1xi64>
    %20 = arith.cmpi slt, %5, %cst_0 : tensor<1x1xi64>
    %21 = arith.select %20, %19, %5 : tensor<1x1xi1>, tensor<1x1xi64>
    %22 = arith.cmpi sge, %21, %cst_0 : tensor<1x1xi64>
    %23 = arith.cmpi slt, %21, %cst_1 : tensor<1x1xi64>
    %24 = arith.andi %22, %23 : tensor<1x1xi1>
    %25 = arith.muli %21, %cst : tensor<1x1xi64>
    %26 = tt.broadcast %25 : (tensor<1x1xi64>) -> tensor<1x2048xi64>
    %27 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %28 = arith.divf %17, %cst_4 : tensor<1x1xf32>
    %29 = arith.addf %28, %cst_3 : tensor<1x1xf32>
    %30 = arith.muli %0, %c2304_i32 : i32
    %31 = tt.splat %30 : (i32) -> tensor<1x2048xi32>
    %32 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg6 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %33 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32>
      %34 = arith.addi %33, %2 : tensor<1x2048xi32>
      %35 = arith.cmpi slt, %34, %cst_6 : tensor<1x2048xi32>
      %36 = tt.addptr %18, %34 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %37 = tt.load %36, %35, %cst_7 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      tt.assert %24, "index out of bounds: 0 <= tmp13 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<1x1xi1>
      %38 = arith.extsi %34 : tensor<1x2048xi32> to tensor<1x2048xi64>
      %39 = arith.addi %38, %26 : tensor<1x2048xi64>
      %40 = tt.addptr %27, %39 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi64>
      %41 = tt.load %40, %35, %cst_7 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %42 = arith.mulf %41, %cst_5 : tensor<1x2048xf32>
      %43 = tt.extern_elementwise %29 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %44 = tt.broadcast %43 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %45 = arith.mulf %42, %44 : tensor<1x2048xf32>
      %46 = arith.addf %37, %cst_2 : tensor<1x2048xf32>
      %47 = arith.mulf %45, %46 : tensor<1x2048xf32>
      %48 = arith.addi %34, %31 : tensor<1x2048xi32>
      %49 = tt.addptr %32, %48 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %50 = arith.truncf %47 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %49, %50, %35 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
