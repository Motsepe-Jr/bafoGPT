#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [8, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7d8de9de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x2048xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<1x2048xi32, #blocked1>
    %cst_1 = arith.constant dense<2304> : tensor<1x1xi64, #blocked>
    %cst_2 = arith.constant dense<0> : tensor<1x1xi64, #blocked>
    %cst_3 = arith.constant dense<288256> : tensor<1x1xi64, #blocked>
    %cst_4 = arith.constant dense<288256> : tensor<1x1xi64, #blocked2>
    %cst_5 = arith.constant dense<0> : tensor<1x1xi64, #blocked2>
    %c0_i32 = arith.constant 0 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %cst_6 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32, #blocked>
    %cst_7 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_8 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked>
    %cst_9 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_11 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %3 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x2048xi32, #blocked1>
    %5 = arith.muli %0, %c2304_i32 : i32
    %6 = tt.splat %5 : (i32) -> tensor<1x2048xi32, #blocked>
    %7 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %8 = scf.for %arg10 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg11 = %cst_10) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %42 = tt.splat %arg10 : (i32) -> tensor<1x2048xi32, #blocked>
      %43 = arith.addi %42, %3 : tensor<1x2048xi32, #blocked>
      %44 = arith.cmpi slt, %43, %cst : tensor<1x2048xi32, #blocked>
      %45 = arith.addi %43, %6 : tensor<1x2048xi32, #blocked>
      %46 = tt.addptr %7, %45 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %47 = tt.load %46, %44, %cst_11 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %48 = arith.extf %47 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %49 = arith.mulf %48, %48 : tensor<1x2048xf32, #blocked>
      %50 = arith.addf %arg11, %49 : tensor<1x2048xf32, #blocked>
      %51 = arith.select %44, %50, %arg11 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %51 : tensor<1x2048xf32, #blocked>
    }
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32, %arg11: f32):
      %42 = arith.addf %arg10, %arg11 : f32
      tt.reduce.return %42 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %10 = tt.expand_dims %9 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %11 = tt.addptr %arg2, %0 : !tt.ptr<i64, 1>, i32
    %12 = tt.splat %11 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked>
    %13 = tt.splat %11 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked2>
    %14 = tt.load %12 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked>
    %15 = tt.load %13 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked2>
    %16 = tt.splat %5 : (i32) -> tensor<1x2048xi32, #blocked1>
    %17 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %18 = arith.divf %10, %cst_9 : tensor<1x1xf32, #blocked>
    %19 = arith.addf %18, %cst_8 : tensor<1x1xf32, #blocked>
    %20 = arith.addi %14, %cst_3 : tensor<1x1xi64, #blocked>
    %21 = arith.addi %15, %cst_4 : tensor<1x1xi64, #blocked2>
    %22 = arith.cmpi slt, %14, %cst_2 : tensor<1x1xi64, #blocked>
    %23 = arith.cmpi slt, %15, %cst_5 : tensor<1x1xi64, #blocked2>
    %24 = arith.select %22, %20, %14 : tensor<1x1xi1, #blocked>, tensor<1x1xi64, #blocked>
    %25 = arith.select %23, %21, %15 : tensor<1x1xi1, #blocked2>, tensor<1x1xi64, #blocked2>
    %26 = arith.cmpi sge, %25, %cst_5 : tensor<1x1xi64, #blocked2>
    %27 = arith.cmpi slt, %25, %cst_4 : tensor<1x1xi64, #blocked2>
    %28 = arith.andi %26, %27 : tensor<1x1xi1, #blocked2>
    %29 = arith.muli %24, %cst_1 : tensor<1x1xi64, #blocked>
    %30 = tt.broadcast %29 : (tensor<1x1xi64, #blocked>) -> tensor<1x2048xi64, #blocked>
    %31 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %32 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>
    %33 = scf.for %arg10 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg11 = %cst_10) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %42 = tt.splat %arg10 : (i32) -> tensor<1x2048xi32, #blocked>
      %43 = tt.splat %arg10 : (i32) -> tensor<1x2048xi32, #blocked1>
      %44 = arith.addi %42, %3 : tensor<1x2048xi32, #blocked>
      %45 = arith.addi %43, %4 : tensor<1x2048xi32, #blocked1>
      %46 = arith.cmpi slt, %44, %cst : tensor<1x2048xi32, #blocked>
      %47 = arith.cmpi slt, %45, %cst_0 : tensor<1x2048xi32, #blocked1>
      %48 = arith.addi %44, %6 : tensor<1x2048xi32, #blocked>
      %49 = arith.addi %45, %16 : tensor<1x2048xi32, #blocked1>
      %50 = tt.addptr %7, %48 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %51 = tt.load %50, %46, %cst_11 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %52 = arith.extf %51 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %53 = tt.addptr %17, %44 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %54 = tt.load %53, %46, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %55 = tt.extern_elementwise %19 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %56 = tt.broadcast %55 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %57 = arith.mulf %52, %56 : tensor<1x2048xf32, #blocked>
      %58 = arith.addf %54, %cst_7 : tensor<1x2048xf32, #blocked>
      %59 = arith.mulf %57, %58 : tensor<1x2048xf32, #blocked>
      tt.assert %28, "index out of bounds: 0 <= tmp23 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<1x1xi1, #blocked2>
      %60 = arith.extsi %44 : tensor<1x2048xi32, #blocked> to tensor<1x2048xi64, #blocked>
      %61 = arith.addi %60, %30 : tensor<1x2048xi64, #blocked>
      %62 = tt.addptr %31, %61 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi64, #blocked>
      %63 = tt.load %62, %46, %cst_10 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %64 = arith.mulf %63, %cst_6 : tensor<1x2048xf32, #blocked>
      %65 = arith.addf %59, %64 : tensor<1x2048xf32, #blocked>
      %66 = arith.mulf %65, %65 : tensor<1x2048xf32, #blocked>
      %67 = arith.addf %arg11, %66 : tensor<1x2048xf32, #blocked>
      %68 = arith.select %46, %67, %arg11 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %69 = tt.addptr %32, %49 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xi32, #blocked1>
      %70 = triton_gpu.convert_layout %65 : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked1>
      tt.store %69, %70, %47 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32, #blocked1>
      scf.yield %68 : tensor<1x2048xf32, #blocked>
    }
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32, %arg11: f32):
      %42 = arith.addf %arg10, %arg11 : f32
      tt.reduce.return %42 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %35 = tt.expand_dims %34 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %36 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %37 = tt.splat %arg4 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %38 = arith.divf %35, %cst_9 : tensor<1x1xf32, #blocked>
    %39 = arith.addf %38, %cst_8 : tensor<1x1xf32, #blocked>
    %40 = tt.splat %arg6 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %41 = tt.splat %arg7 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg10 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %42 = tt.splat %arg10 : (i32) -> tensor<1x2048xi32, #blocked>
      %43 = arith.addi %42, %3 : tensor<1x2048xi32, #blocked>
      %44 = arith.cmpi slt, %43, %cst : tensor<1x2048xi32, #blocked>
      %45 = arith.addi %43, %6 : tensor<1x2048xi32, #blocked>
      %46 = tt.addptr %36, %45 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %47 = tt.load %46, %44, %cst_10 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %48 = tt.addptr %37, %43 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %49 = tt.load %48, %44, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %50 = tt.extern_elementwise %39 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %51 = tt.broadcast %50 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %52 = arith.mulf %47, %51 : tensor<1x2048xf32, #blocked>
      %53 = arith.addf %49, %cst_7 : tensor<1x2048xf32, #blocked>
      %54 = arith.mulf %52, %53 : tensor<1x2048xf32, #blocked>
      %55 = tt.addptr %40, %45 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %56 = arith.truncf %54 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
      tt.store %55, %56, %44 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
      %57 = tt.addptr %41, %45 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      tt.store %57, %56, %44 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    }
    tt.return
  }
}
