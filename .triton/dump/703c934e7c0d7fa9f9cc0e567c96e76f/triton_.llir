; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4d5d6de7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = lshr i32 %9, 5, !dbg !10
  %urem = and i32 %9, 255, !dbg !10
  %11 = shl nuw nsw i32 %urem, 3, !dbg !10
  %12 = or i32 %11, 4, !dbg !10
  %13 = shl nuw nsw i32 %urem, 2, !dbg !10
  %14 = or i32 %13, 1024, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %16 = sext i32 %15 to i64, !dbg !12
  %17 = getelementptr i64, ptr addrspace(1) %1, i64 %16, !dbg !12
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 true) #6, !dbg !13
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 true) #6, !dbg !13
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 true) #6, !dbg !13
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 true) #6, !dbg !13
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 true) #6, !dbg !13
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 true) #6, !dbg !13
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 true) #6, !dbg !13
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 true) #6, !dbg !13
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 true) #6, !dbg !13
  %27 = add i64 %18, 288256, !dbg !14
  %28 = add i64 %26, 288256, !dbg !14
  %29 = icmp slt i64 %18, 0, !dbg !15
  %30 = icmp slt i64 %26, 0, !dbg !15
  %31 = select i1 %29, i64 %27, i64 %18, !dbg !16
  %32 = select i1 %30, i64 %28, i64 %26, !dbg !16
  %33 = icmp ugt i64 %32, 288255, !dbg !17
  %34 = mul i64 %31, 2304, !dbg !18
  %35 = mul i32 %15, 2304, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %34
  %37 = zext nneg i32 %11 to i64
  %38 = getelementptr float, ptr addrspace(3) @global_smem, i64 %37
  %39 = zext nneg i32 %13 to i64
  %40 = getelementptr float, ptr addrspace(3) @global_smem, i64 %39
  %41 = zext nneg i32 %14 to i64
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i64 %41
  br i1 %33, label %43, label %44, !dbg !20

43:                                               ; preds = %8
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !20
  br label %44, !dbg !20

44:                                               ; preds = %43, %8
  %45 = zext nneg i32 %12 to i64, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %36, i64 %37, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %36, i64 %45, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !23
  %53 = bitcast i32 %50 to float, !dbg !23
  %54 = bitcast i32 %52 to float, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !23
  %60 = bitcast i32 %56 to float, !dbg !23
  %61 = bitcast i32 %57 to float, !dbg !23
  %62 = bitcast i32 %58 to float, !dbg !23
  %63 = bitcast i32 %59 to float, !dbg !23
  %64 = fmul float %53, 4.800000e+01, !dbg !24
  %65 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !23
  %66 = insertelement <2 x i32> %65, i32 %49, i64 1, !dbg !23
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !23
  %68 = fmul <2 x float> %67, <float 4.800000e+01, float 4.800000e+01>, !dbg !24
  %69 = fmul float %54, 4.800000e+01, !dbg !24
  %70 = fmul float %60, 4.800000e+01, !dbg !24
  %71 = fmul float %61, 4.800000e+01, !dbg !24
  %72 = fmul float %62, 4.800000e+01, !dbg !24
  %73 = fmul float %63, 4.800000e+01, !dbg !24
  %74 = fmul float %64, %64, !dbg !25
  %75 = fmul <2 x float> %68, %68, !dbg !25
  %76 = fmul float %69, %69, !dbg !25
  %77 = fmul float %70, %70, !dbg !25
  %78 = fmul float %71, %71, !dbg !25
  %79 = fmul float %72, %72, !dbg !25
  %80 = fmul float %73, %73, !dbg !25
  %81 = add i32 %13, %35, !dbg !26
  %82 = add i32 %14, %35, !dbg !26
  %83 = sext i32 %81 to i64, !dbg !27
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !27
  %85 = sext i32 %82 to i64, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %87 = shufflevector <2 x float> %67, <2 x float> poison, <8 x i32> <i32 1, i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %88 = insertelement <8 x float> %87, float %53, i64 1, !dbg !28
  %89 = insertelement <8 x float> %88, float %54, i64 3, !dbg !28
  %90 = insertelement <8 x float> %89, float %60, i64 4, !dbg !28
  %91 = insertelement <8 x float> %90, float %61, i64 5, !dbg !28
  %92 = insertelement <8 x float> %91, float %62, i64 6, !dbg !28
  %93 = insertelement <8 x float> %92, float %63, i64 7, !dbg !28
  store <8 x float> %93, ptr addrspace(3) %38, align 32, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %94 = load <4 x i32>, ptr addrspace(3) %42, align 16, !dbg !28
  %.extract = load i32, ptr addrspace(3) %40, align 16, !dbg !28
  %95 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %40, i64 0, i64 1, !dbg !28
  %.extract3 = load i32, ptr addrspace(3) %95, align 4, !dbg !28
  %96 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %40, i64 0, i64 2, !dbg !28
  %.extract5 = load i32, ptr addrspace(3) %96, align 8, !dbg !28
  %97 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %40, i64 0, i64 3, !dbg !28
  %.extract7 = load i32, ptr addrspace(3) %97, align 4, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract3, i32 %.extract5, i32 %.extract7, ptr addrspace(1) %84, i1 true) #6, !dbg !28
  %.extract9 = extractelement <4 x i32> %94, i64 0, !dbg !28
  %.extract11 = extractelement <4 x i32> %94, i64 1, !dbg !28
  %.extract13 = extractelement <4 x i32> %94, i64 2, !dbg !28
  %.extract15 = extractelement <4 x i32> %94, i64 3, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract9, i32 %.extract11, i32 %.extract13, i32 %.extract15, ptr addrspace(1) %86, i1 true) #6, !dbg !28
  %98 = or i32 %11, 2048, !dbg !29
  %99 = or i32 %11, 2052, !dbg !29
  %100 = or i32 %13, 2048, !dbg !29
  %101 = or i32 %13, 3072, !dbg !29
  %102 = icmp ult i32 %98, 2304, !dbg !30
  %103 = icmp ult i32 %100, 2304, !dbg !30
  br i1 %33, label %104, label %105, !dbg !20

104:                                              ; preds = %44
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !20
  br label %105, !dbg !20

105:                                              ; preds = %104, %44
  %106 = zext nneg i32 %98 to i64, !dbg !21
  %107 = zext nneg i32 %99 to i64, !dbg !21
  %108 = getelementptr float, ptr addrspace(1) %36, i64 %106, !dbg !22
  %109 = getelementptr float, ptr addrspace(1) %36, i64 %107, !dbg !22
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #6, !dbg !23
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !23
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !23
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !23
  %115 = bitcast i32 %112 to float, !dbg !23
  %116 = bitcast i32 %114 to float, !dbg !23
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #6, !dbg !23
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !23
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !23
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !23
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !23
  %122 = bitcast i32 %118 to float, !dbg !23
  %123 = bitcast i32 %119 to float, !dbg !23
  %124 = bitcast i32 %120 to float, !dbg !23
  %125 = bitcast i32 %121 to float, !dbg !23
  %126 = fmul float %115, 4.800000e+01, !dbg !24
  %127 = fmul float %116, 4.800000e+01, !dbg !24
  %128 = fmul float %122, 4.800000e+01, !dbg !24
  %129 = fmul float %123, 4.800000e+01, !dbg !24
  %130 = fmul float %124, 4.800000e+01, !dbg !24
  %131 = fmul float %125, 4.800000e+01, !dbg !24
  %132 = fmul float %126, %126, !dbg !25
  %133 = fmul float %127, %127, !dbg !25
  %134 = fmul float %128, %128, !dbg !25
  %135 = fmul float %129, %129, !dbg !25
  %136 = fmul float %130, %130, !dbg !25
  %137 = fmul float %131, %131, !dbg !25
  %138 = select i1 %102, float %132, float -0.000000e+00, !dbg !31
  %139 = fadd float %74, %138, !dbg !31
  %140 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !23
  %141 = insertelement <2 x i32> %140, i32 %111, i64 1, !dbg !23
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !23
  %143 = fmul <2 x float> %142, <float 4.800000e+01, float 4.800000e+01>, !dbg !24
  %144 = fmul <2 x float> %143, %143, !dbg !25
  %145 = insertelement <2 x i1> poison, i1 %102, i64 0, !dbg !31
  %146 = shufflevector <2 x i1> %145, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !31
  %147 = select <2 x i1> %146, <2 x float> %144, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !31
  %148 = fadd <2 x float> %75, %147, !dbg !31
  %149 = select i1 %102, float %133, float -0.000000e+00, !dbg !31
  %150 = fadd float %76, %149, !dbg !31
  %151 = select i1 %102, float %134, float -0.000000e+00, !dbg !31
  %152 = fadd float %77, %151, !dbg !31
  %153 = select i1 %102, float %135, float -0.000000e+00, !dbg !31
  %154 = fadd float %78, %153, !dbg !31
  %155 = select i1 %102, float %136, float -0.000000e+00, !dbg !31
  %156 = fadd float %79, %155, !dbg !31
  %157 = select i1 %102, float %137, float -0.000000e+00, !dbg !31
  %158 = fadd float %80, %157, !dbg !31
  %159 = add i32 %100, %35, !dbg !26
  %160 = add i32 %101, %35, !dbg !26
  %161 = sext i32 %159 to i64, !dbg !27
  %162 = getelementptr float, ptr addrspace(1) %4, i64 %161, !dbg !27
  %163 = sext i32 %160 to i64, !dbg !27
  %164 = getelementptr float, ptr addrspace(1) %4, i64 %163, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %165 = shufflevector <2 x float> %142, <2 x float> poison, <8 x i32> <i32 1, i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %166 = insertelement <8 x float> %165, float %115, i64 1, !dbg !28
  %167 = insertelement <8 x float> %166, float %116, i64 3, !dbg !28
  %168 = insertelement <8 x float> %167, float %122, i64 4, !dbg !28
  %169 = insertelement <8 x float> %168, float %123, i64 5, !dbg !28
  %170 = insertelement <8 x float> %169, float %124, i64 6, !dbg !28
  %171 = insertelement <8 x float> %170, float %125, i64 7, !dbg !28
  store <8 x float> %171, ptr addrspace(3) %38, align 32, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %172 = load <4 x i32>, ptr addrspace(3) %42, align 16, !dbg !28
  %.extract.1 = load i32, ptr addrspace(3) %40, align 16, !dbg !28
  %.extract3.1 = load i32, ptr addrspace(3) %95, align 4, !dbg !28
  %.extract5.1 = load i32, ptr addrspace(3) %96, align 8, !dbg !28
  %.extract7.1 = load i32, ptr addrspace(3) %97, align 4, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract.1, i32 %.extract3.1, i32 %.extract5.1, i32 %.extract7.1, ptr addrspace(1) %162, i1 %103) #6, !dbg !28
  %.extract9.1 = extractelement <4 x i32> %172, i64 0, !dbg !28
  %.extract11.1 = extractelement <4 x i32> %172, i64 1, !dbg !28
  %.extract13.1 = extractelement <4 x i32> %172, i64 2, !dbg !28
  %.extract15.1 = extractelement <4 x i32> %172, i64 3, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract9.1, i32 %.extract11.1, i32 %.extract13.1, i32 %.extract15.1, ptr addrspace(1) %164, i1 false) #6, !dbg !28
  %173 = and i32 %9, 31, !dbg !10
  %174 = and i32 %10, 7, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %175 = extractelement <2 x float> %148, i64 1, !dbg !36
  %176 = fadd float %175, %139, !dbg !36
  %177 = extractelement <2 x float> %148, i64 0, !dbg !36
  %178 = fadd float %177, %176, !dbg !36
  %179 = fadd float %150, %178, !dbg !36
  %180 = fadd float %152, %179, !dbg !36
  %181 = fadd float %154, %180, !dbg !36
  %182 = fadd float %156, %181, !dbg !36
  %183 = fadd float %158, %182, !dbg !36
  %184 = bitcast float %183 to i32, !dbg !32
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 16, i32 31), !dbg !32
  %186 = bitcast i32 %185 to float, !dbg !32
  %187 = fadd float %183, %186, !dbg !36
  %188 = bitcast float %187 to i32, !dbg !32
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !32
  %190 = bitcast i32 %189 to float, !dbg !32
  %191 = fadd float %187, %190, !dbg !36
  %192 = bitcast float %191 to i32, !dbg !32
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !32
  %194 = bitcast i32 %193 to float, !dbg !32
  %195 = fadd float %191, %194, !dbg !36
  %196 = bitcast float %195 to i32, !dbg !32
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 2, i32 31), !dbg !32
  %198 = bitcast i32 %197 to float, !dbg !32
  %199 = fadd float %195, %198, !dbg !36
  %200 = bitcast float %199 to i32, !dbg !32
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 1, i32 31), !dbg !32
  %202 = bitcast i32 %201 to float, !dbg !32
  %203 = fadd float %199, %202, !dbg !36
  %204 = icmp eq i32 %173, 0, !dbg !32
  %205 = zext nneg i32 %174 to i64, !dbg !32
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i64 %205, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, float %203, i1 %204) #6, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %207 = icmp slt i32 %9, 8, !dbg !32
  %208 = sext i32 %9 to i64, !dbg !32
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i64 %208, !dbg !32
  %210 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %209, i1 %207) #6, !dbg !32
  %211 = bitcast float %210 to i32, !dbg !32
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 4, i32 31), !dbg !32
  %213 = bitcast i32 %212 to float, !dbg !32
  %214 = fadd float %210, %213, !dbg !36
  %215 = bitcast float %214 to i32, !dbg !32
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !32
  %217 = bitcast i32 %216 to float, !dbg !32
  %218 = fadd float %214, %217, !dbg !36
  %219 = bitcast float %218 to i32, !dbg !32
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 1, i32 31), !dbg !32
  %221 = bitcast i32 %220 to float, !dbg !32
  %222 = fadd float %218, %221, !dbg !36
  %223 = and i32 %9, 7, !dbg !32
  %224 = icmp eq i32 %223, 0, !dbg !32
  %225 = and i1 %207, %224, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, float %222, i1 %225) #6, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %226 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %227 = insertelement <1 x float> undef, float %226, i64 0, !dbg !40
  store <1 x float> %227, ptr addrspace(3) @global_smem, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %228 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !40
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float 2.304000e+03) #6, !dbg !41
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float 2.304000e+03) #6, !dbg !41
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float 2.304000e+03) #6, !dbg !41
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float 2.304000e+03) #6, !dbg !41
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float 2.304000e+03) #6, !dbg !41
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float 2.304000e+03) #6, !dbg !41
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float 2.304000e+03) #6, !dbg !41
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float 2.304000e+03) #6, !dbg !41
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float 2.304000e+03) #6, !dbg !41
  %238 = fadd float %229, 0x3EE4F8B580000000, !dbg !42
  %239 = fadd float %230, 0x3EE4F8B580000000, !dbg !42
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %.not.i = icmp eq i32 %240, 0, !dbg !40
  br i1 %.not.i, label %243, label %241, !dbg !40

241:                                              ; preds = %105
  %242 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %238), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

243:                                              ; preds = %105
  %244 = tail call float @llvm.nvvm.rsqrt.approx.f(float %238), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %241, %243
  %.0.i = phi float [ %242, %241 ], [ %244, %243 ], !dbg !40
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %.not.i16 = icmp eq i32 %245, 0, !dbg !40
  br i1 %.not.i16, label %248, label %246, !dbg !40

246:                                              ; preds = %__nv_rsqrtf.exit
  %247 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %239), !dbg !40
  br label %__nv_rsqrtf.exit18, !dbg !40

248:                                              ; preds = %__nv_rsqrtf.exit
  %249 = tail call float @llvm.nvvm.rsqrt.approx.f(float %239), !dbg !40
  br label %__nv_rsqrtf.exit18, !dbg !40

__nv_rsqrtf.exit18:                               ; preds = %246, %248
  %.0.i17 = phi float [ %247, %246 ], [ %249, %248 ], !dbg !40
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !44
  %258 = icmp eq i32 %urem, 0, !dbg !45
  %259 = bitcast float %.0.i to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %259, ptr addrspace(1) %257, i1 %258) #6, !dbg !45
  %260 = add i32 %11, %35, !dbg !46
  %261 = add i32 %12, %35, !dbg !46
  %262 = sext i32 %260 to i64, !dbg !47
  %263 = getelementptr float, ptr addrspace(1) %4, i64 %262, !dbg !47
  %264 = sext i32 %261 to i64, !dbg !47
  %265 = getelementptr float, ptr addrspace(1) %4, i64 %264, !dbg !47
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %263, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !48
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !48
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !48
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !48
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !48
  %271 = bitcast i32 %267 to float, !dbg !48
  %272 = bitcast i32 %268 to float, !dbg !48
  %273 = bitcast i32 %269 to float, !dbg !48
  %274 = bitcast i32 %270 to float, !dbg !48
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %265, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !48
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !48
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !48
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !48
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !48
  %280 = bitcast i32 %276 to float, !dbg !48
  %281 = bitcast i32 %277 to float, !dbg !48
  %282 = bitcast i32 %278 to float, !dbg !48
  %283 = bitcast i32 %279 to float, !dbg !48
  %284 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !49
  %285 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !49
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %284, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !50
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !50
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !50
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !50
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !50
  %291 = bitcast i32 %287 to float, !dbg !50
  %292 = bitcast i32 %288 to float, !dbg !50
  %293 = bitcast i32 %289 to float, !dbg !50
  %294 = bitcast i32 %290 to float, !dbg !50
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %285, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !50
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !50
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !50
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !50
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !50
  %300 = bitcast i32 %296 to float, !dbg !50
  %301 = bitcast i32 %297 to float, !dbg !50
  %302 = bitcast i32 %298 to float, !dbg !50
  %303 = bitcast i32 %299 to float, !dbg !50
  %304 = fmul float %271, 4.800000e+01, !dbg !51
  %305 = fmul float %272, 4.800000e+01, !dbg !51
  %306 = fmul float %273, 4.800000e+01, !dbg !51
  %307 = fmul float %274, 4.800000e+01, !dbg !51
  %308 = fmul float %280, 4.800000e+01, !dbg !51
  %309 = fmul float %281, 4.800000e+01, !dbg !51
  %310 = fmul float %282, 4.800000e+01, !dbg !51
  %311 = fmul float %283, 4.800000e+01, !dbg !51
  %312 = fmul float %.0.i17, %304, !dbg !52
  %313 = fmul float %.0.i17, %305, !dbg !52
  %314 = fmul float %.0.i17, %306, !dbg !52
  %315 = fmul float %.0.i17, %307, !dbg !52
  %316 = fmul float %.0.i17, %308, !dbg !52
  %317 = fmul float %.0.i17, %309, !dbg !52
  %318 = fmul float %.0.i17, %310, !dbg !52
  %319 = fmul float %.0.i17, %311, !dbg !52
  %320 = fadd float %291, 1.000000e+00, !dbg !53
  %321 = fadd float %292, 1.000000e+00, !dbg !53
  %322 = fadd float %293, 1.000000e+00, !dbg !53
  %323 = fadd float %294, 1.000000e+00, !dbg !53
  %324 = fadd float %300, 1.000000e+00, !dbg !53
  %325 = fadd float %301, 1.000000e+00, !dbg !53
  %326 = fadd float %302, 1.000000e+00, !dbg !53
  %327 = fadd float %303, 1.000000e+00, !dbg !53
  %328 = fmul float %312, %320, !dbg !54
  %329 = fmul float %313, %321, !dbg !54
  %330 = fmul float %314, %322, !dbg !54
  %331 = fmul float %315, %323, !dbg !54
  %332 = fmul float %316, %324, !dbg !54
  %333 = fmul float %317, %325, !dbg !54
  %334 = fmul float %318, %326, !dbg !54
  %335 = fmul float %319, %327, !dbg !54
  %336 = getelementptr i16, ptr addrspace(1) %5, i64 %262, !dbg !55
  %337 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %328) #6, !dbg !56
  %338 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %329) #6, !dbg !56
  %339 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %330) #6, !dbg !56
  %340 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %331) #6, !dbg !56
  %341 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %332) #6, !dbg !56
  %342 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %333) #6, !dbg !56
  %343 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %334) #6, !dbg !56
  %344 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %335) #6, !dbg !56
  %345 = insertelement <2 x i16> undef, i16 %337, i64 0, !dbg !56
  %346 = insertelement <2 x i16> %345, i16 %338, i64 1, !dbg !56
  %347 = bitcast <2 x i16> %346 to i32, !dbg !56
  %348 = insertelement <2 x i16> undef, i16 %339, i64 0, !dbg !56
  %349 = insertelement <2 x i16> %348, i16 %340, i64 1, !dbg !56
  %350 = bitcast <2 x i16> %349 to i32, !dbg !56
  %351 = insertelement <2 x i16> undef, i16 %341, i64 0, !dbg !56
  %352 = insertelement <2 x i16> %351, i16 %342, i64 1, !dbg !56
  %353 = bitcast <2 x i16> %352 to i32, !dbg !56
  %354 = insertelement <2 x i16> undef, i16 %343, i64 0, !dbg !56
  %355 = insertelement <2 x i16> %354, i16 %344, i64 1, !dbg !56
  %356 = bitcast <2 x i16> %355 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %350, i32 %353, i32 %356, ptr addrspace(1) %336, i1 true) #6, !dbg !56
  %357 = add i32 %98, %35, !dbg !46
  %358 = add i32 %99, %35, !dbg !46
  %359 = sext i32 %357 to i64, !dbg !47
  %360 = getelementptr float, ptr addrspace(1) %4, i64 %359, !dbg !47
  %361 = sext i32 %358 to i64, !dbg !47
  %362 = getelementptr float, ptr addrspace(1) %4, i64 %361, !dbg !47
  %363 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %360, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #6, !dbg !48
  %364 = extractvalue { i32, i32, i32, i32 } %363, 0, !dbg !48
  %365 = extractvalue { i32, i32, i32, i32 } %363, 1, !dbg !48
  %366 = extractvalue { i32, i32, i32, i32 } %363, 2, !dbg !48
  %367 = extractvalue { i32, i32, i32, i32 } %363, 3, !dbg !48
  %368 = bitcast i32 %364 to float, !dbg !48
  %369 = bitcast i32 %365 to float, !dbg !48
  %370 = bitcast i32 %366 to float, !dbg !48
  %371 = bitcast i32 %367 to float, !dbg !48
  %372 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %362, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #6, !dbg !48
  %373 = extractvalue { i32, i32, i32, i32 } %372, 0, !dbg !48
  %374 = extractvalue { i32, i32, i32, i32 } %372, 1, !dbg !48
  %375 = extractvalue { i32, i32, i32, i32 } %372, 2, !dbg !48
  %376 = extractvalue { i32, i32, i32, i32 } %372, 3, !dbg !48
  %377 = bitcast i32 %373 to float, !dbg !48
  %378 = bitcast i32 %374 to float, !dbg !48
  %379 = bitcast i32 %375 to float, !dbg !48
  %380 = bitcast i32 %376 to float, !dbg !48
  %381 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !49
  %382 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !49
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %381, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #6, !dbg !50
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !50
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !50
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !50
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !50
  %388 = bitcast i32 %384 to float, !dbg !50
  %389 = bitcast i32 %385 to float, !dbg !50
  %390 = bitcast i32 %386 to float, !dbg !50
  %391 = bitcast i32 %387 to float, !dbg !50
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %382, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #6, !dbg !50
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !50
  %394 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !50
  %395 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !50
  %396 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !50
  %397 = bitcast i32 %393 to float, !dbg !50
  %398 = bitcast i32 %394 to float, !dbg !50
  %399 = bitcast i32 %395 to float, !dbg !50
  %400 = bitcast i32 %396 to float, !dbg !50
  %401 = fmul float %368, 4.800000e+01, !dbg !51
  %402 = fmul float %369, 4.800000e+01, !dbg !51
  %403 = fmul float %370, 4.800000e+01, !dbg !51
  %404 = fmul float %371, 4.800000e+01, !dbg !51
  %405 = fmul float %377, 4.800000e+01, !dbg !51
  %406 = fmul float %378, 4.800000e+01, !dbg !51
  %407 = fmul float %379, 4.800000e+01, !dbg !51
  %408 = fmul float %380, 4.800000e+01, !dbg !51
  %409 = fmul float %.0.i17, %401, !dbg !52
  %410 = fmul float %.0.i17, %402, !dbg !52
  %411 = fmul float %.0.i17, %403, !dbg !52
  %412 = fmul float %.0.i17, %404, !dbg !52
  %413 = fmul float %.0.i17, %405, !dbg !52
  %414 = fmul float %.0.i17, %406, !dbg !52
  %415 = fmul float %.0.i17, %407, !dbg !52
  %416 = fmul float %.0.i17, %408, !dbg !52
  %417 = fadd float %388, 1.000000e+00, !dbg !53
  %418 = fadd float %389, 1.000000e+00, !dbg !53
  %419 = fadd float %390, 1.000000e+00, !dbg !53
  %420 = fadd float %391, 1.000000e+00, !dbg !53
  %421 = fadd float %397, 1.000000e+00, !dbg !53
  %422 = fadd float %398, 1.000000e+00, !dbg !53
  %423 = fadd float %399, 1.000000e+00, !dbg !53
  %424 = fadd float %400, 1.000000e+00, !dbg !53
  %425 = fmul float %409, %417, !dbg !54
  %426 = fmul float %410, %418, !dbg !54
  %427 = fmul float %411, %419, !dbg !54
  %428 = fmul float %412, %420, !dbg !54
  %429 = fmul float %413, %421, !dbg !54
  %430 = fmul float %414, %422, !dbg !54
  %431 = fmul float %415, %423, !dbg !54
  %432 = fmul float %416, %424, !dbg !54
  %433 = getelementptr i16, ptr addrspace(1) %5, i64 %359, !dbg !55
  %434 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %425) #6, !dbg !56
  %435 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %426) #6, !dbg !56
  %436 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %427) #6, !dbg !56
  %437 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %428) #6, !dbg !56
  %438 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %429) #6, !dbg !56
  %439 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %430) #6, !dbg !56
  %440 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %431) #6, !dbg !56
  %441 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %432) #6, !dbg !56
  %442 = insertelement <2 x i16> undef, i16 %434, i64 0, !dbg !56
  %443 = insertelement <2 x i16> %442, i16 %435, i64 1, !dbg !56
  %444 = bitcast <2 x i16> %443 to i32, !dbg !56
  %445 = insertelement <2 x i16> undef, i16 %436, i64 0, !dbg !56
  %446 = insertelement <2 x i16> %445, i16 %437, i64 1, !dbg !56
  %447 = bitcast <2 x i16> %446 to i32, !dbg !56
  %448 = insertelement <2 x i16> undef, i16 %438, i64 0, !dbg !56
  %449 = insertelement <2 x i16> %448, i16 %439, i64 1, !dbg !56
  %450 = bitcast <2 x i16> %449 to i32, !dbg !56
  %451 = insertelement <2 x i16> undef, i16 %440, i64 0, !dbg !56
  %452 = insertelement <2 x i16> %451, i16 %441, i64 1, !dbg !56
  %453 = bitcast <2 x i16> %452 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %444, i32 %447, i32 %450, i32 %453, ptr addrspace(1) %433, i1 %102) #6, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c4vldlpipjf36i4372wvt4owv4klaib7acm3ojwflc7l2klenvra.py", directory: "/tmp/torchinductor_zeus/4v")
!4 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7de", linkageName: "triton__0d1d2d3d4d5d6de7de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 26, column: 30, scope: !7)
!13 = !DILocation(line: 26, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 22, scope: !7)
!15 = !DILocation(line: 33, column: 22, scope: !7)
!16 = !DILocation(line: 34, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 40, scope: !7)
!18 = !DILocation(line: 36, column: 45, scope: !7)
!19 = !DILocation(line: 43, column: 40, scope: !7)
!20 = !DILocation(line: 35, column: 56, scope: !7)
!21 = !DILocation(line: 36, column: 40, scope: !7)
!22 = !DILocation(line: 36, column: 34, scope: !7)
!23 = !DILocation(line: 36, column: 53, scope: !7)
!24 = !DILocation(line: 38, column: 22, scope: !7)
!25 = !DILocation(line: 39, column: 22, scope: !7)
!26 = !DILocation(line: 43, column: 35, scope: !7)
!27 = !DILocation(line: 43, column: 29, scope: !7)
!28 = !DILocation(line: 43, column: 52, scope: !7)
!29 = !DILocation(line: 29, column: 27, scope: !7)
!30 = !DILocation(line: 30, column: 25, scope: !7)
!31 = !DILocation(line: 42, column: 39, scope: !7)
!32 = !DILocation(line: 243, column: 36, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!35 = !DILocation(line: 44, column: 25, scope: !33)
!36 = !DILocation(line: 233, column: 15, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!38 = !DILocation(line: 243, column: 36, scope: !37, inlinedAt: !39)
!39 = !DILocation(line: 44, column: 25, scope: !37)
!40 = !DILocation(line: 49, column: 26, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 4, scope: !7)
!44 = !DILocation(line: 51, column: 28, scope: !7)
!45 = !DILocation(line: 51, column: 40, scope: !7)
!46 = !DILocation(line: 56, column: 42, scope: !7)
!47 = !DILocation(line: 56, column: 36, scope: !7)
!48 = !DILocation(line: 56, column: 53, scope: !7)
!49 = !DILocation(line: 57, column: 35, scope: !7)
!50 = !DILocation(line: 57, column: 40, scope: !7)
!51 = !DILocation(line: 59, column: 24, scope: !7)
!52 = !DILocation(line: 60, column: 24, scope: !7)
!53 = !DILocation(line: 62, column: 24, scope: !7)
!54 = !DILocation(line: 63, column: 24, scope: !7)
!55 = !DILocation(line: 65, column: 29, scope: !7)
!56 = !DILocation(line: 65, column: 53, scope: !7)
!57 = !DILocation(line: 52, column: 4, scope: !7)
