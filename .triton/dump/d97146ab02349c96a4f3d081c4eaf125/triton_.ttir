module {
  tt.func public @triton__0d1d2d3de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32xf32>
    %cst_0 = arith.constant dense<0xFF800000> : tensor<32xf32>
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<32xf32>
    %cst_2 = arith.constant dense<1> : tensor<32xi64>
    %cst_3 = arith.constant dense<-1> : tensor<32xi32>
    %cst_4 = arith.constant dense<5.000000e+01> : tensor<32xf32>
    %cst_5 = arith.constant dense<6.250000e-02> : tensor<32xf32>
    %cst_6 = arith.constant dense<3> : tensor<32xi32>
    %cst_7 = arith.constant dense<2> : tensor<32xi32>
    %cst_8 = arith.constant dense<1> : tensor<32xi32>
    %cst_9 = arith.constant dense<4> : tensor<32xi32>
    %cst_10 = arith.constant dense<32> : tensor<32xi32>
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c32_i32 : i32
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %3 = tt.splat %1 : (i32) -> tensor<32xi32>
    %4 = arith.addi %3, %2 : tensor<32xi32>
    %5 = arith.cmpi slt, %4, %cst_10 : tensor<32xi32>
    %6 = arith.remsi %4, %cst_9 : tensor<32xi32>
    %7 = arith.muli %4, %cst_9 : tensor<32xi32>
    %8 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<32x!tt.ptr<bf16, 1>>
    %9 = tt.addptr %8, %7 : tensor<32x!tt.ptr<bf16, 1>>, tensor<32xi32>
    %10 = tt.load %9, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xbf16>
    %11 = arith.extf %10 : tensor<32xbf16> to tensor<32xf32>
    %12 = arith.addi %7, %cst_8 : tensor<32xi32>
    %13 = tt.addptr %8, %12 : tensor<32x!tt.ptr<bf16, 1>>, tensor<32xi32>
    %14 = tt.load %13, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xbf16>
    %15 = arith.extf %14 : tensor<32xbf16> to tensor<32xf32>
    %16 = arith.addi %7, %cst_7 : tensor<32xi32>
    %17 = tt.addptr %8, %16 : tensor<32x!tt.ptr<bf16, 1>>, tensor<32xi32>
    %18 = tt.load %17, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xbf16>
    %19 = arith.extf %18 : tensor<32xbf16> to tensor<32xf32>
    %20 = arith.addi %7, %cst_6 : tensor<32xi32>
    %21 = tt.addptr %8, %20 : tensor<32x!tt.ptr<bf16, 1>>, tensor<32xi32>
    %22 = tt.load %21, %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32xbf16>
    %23 = arith.extf %22 : tensor<32xbf16> to tensor<32xf32>
    %24 = arith.mulf %11, %cst_5 : tensor<32xf32>
    %25 = arith.divf %24, %cst_4 : tensor<32xf32>
    %26 = tt.extern_elementwise %25 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<32xf32>) -> tensor<32xf32>
    %27 = arith.mulf %26, %cst_4 : tensor<32xf32>
    %28 = arith.muli %6, %cst_3 : tensor<32xi32>
    %29 = arith.extsi %28 : tensor<32xi32> to tensor<32xi64>
    %30 = arith.cmpi sge, %29, %cst_2 : tensor<32xi64>
    %31 = arith.select %30, %cst_1, %cst : tensor<32xi1>, tensor<32xf32>
    %32 = arith.cmpf une, %31, %cst : tensor<32xf32>
    %33 = arith.select %32, %cst_0, %31 : tensor<32xi1>, tensor<32xf32>
    %34 = arith.addf %27, %33 : tensor<32xf32>
    %35 = arith.mulf %15, %cst_5 : tensor<32xf32>
    %36 = arith.divf %35, %cst_4 : tensor<32xf32>
    %37 = tt.extern_elementwise %36 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<32xf32>) -> tensor<32xf32>
    %38 = arith.mulf %37, %cst_4 : tensor<32xf32>
    %39 = arith.subi %cst_8, %6 : tensor<32xi32>
    %40 = arith.extsi %39 : tensor<32xi32> to tensor<32xi64>
    %41 = arith.cmpi sge, %40, %cst_2 : tensor<32xi64>
    %42 = arith.select %41, %cst_1, %cst : tensor<32xi1>, tensor<32xf32>
    %43 = arith.cmpf une, %42, %cst : tensor<32xf32>
    %44 = arith.select %43, %cst_0, %42 : tensor<32xi1>, tensor<32xf32>
    %45 = arith.addf %38, %44 : tensor<32xf32>
    %46 = arith.cmpf ogt, %34, %45 : tensor<32xf32>
    %47 = arith.cmpf une, %34, %34 : tensor<32xf32>
    %48 = arith.ori %46, %47 : tensor<32xi1>
    %49 = arith.select %48, %34, %45 : tensor<32xi1>, tensor<32xf32>
    %50 = arith.mulf %19, %cst_5 : tensor<32xf32>
    %51 = arith.divf %50, %cst_4 : tensor<32xf32>
    %52 = tt.extern_elementwise %51 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<32xf32>) -> tensor<32xf32>
    %53 = arith.mulf %52, %cst_4 : tensor<32xf32>
    %54 = arith.subi %cst_7, %6 : tensor<32xi32>
    %55 = arith.extsi %54 : tensor<32xi32> to tensor<32xi64>
    %56 = arith.cmpi sge, %55, %cst_2 : tensor<32xi64>
    %57 = arith.select %56, %cst_1, %cst : tensor<32xi1>, tensor<32xf32>
    %58 = arith.cmpf une, %57, %cst : tensor<32xf32>
    %59 = arith.select %58, %cst_0, %57 : tensor<32xi1>, tensor<32xf32>
    %60 = arith.addf %53, %59 : tensor<32xf32>
    %61 = arith.cmpf ogt, %49, %60 : tensor<32xf32>
    %62 = arith.cmpf une, %49, %49 : tensor<32xf32>
    %63 = arith.ori %61, %62 : tensor<32xi1>
    %64 = arith.select %63, %49, %60 : tensor<32xi1>, tensor<32xf32>
    %65 = arith.mulf %23, %cst_5 : tensor<32xf32>
    %66 = arith.divf %65, %cst_4 : tensor<32xf32>
    %67 = tt.extern_elementwise %66 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<32xf32>) -> tensor<32xf32>
    %68 = arith.mulf %67, %cst_4 : tensor<32xf32>
    %69 = arith.subi %cst_6, %6 : tensor<32xi32>
    %70 = arith.extsi %69 : tensor<32xi32> to tensor<32xi64>
    %71 = arith.cmpi sge, %70, %cst_2 : tensor<32xi64>
    %72 = arith.select %71, %cst_1, %cst : tensor<32xi1>, tensor<32xf32>
    %73 = arith.cmpf une, %72, %cst : tensor<32xf32>
    %74 = arith.select %73, %cst_0, %72 : tensor<32xi1>, tensor<32xf32>
    %75 = arith.addf %68, %74 : tensor<32xf32>
    %76 = arith.cmpf ogt, %64, %75 : tensor<32xf32>
    %77 = arith.cmpf une, %64, %64 : tensor<32xf32>
    %78 = arith.ori %76, %77 : tensor<32xi1>
    %79 = arith.select %78, %64, %75 : tensor<32xi1>, tensor<32xf32>
    %80 = arith.subf %34, %79 : tensor<32xf32>
    %81 = math.exp %80 : tensor<32xf32>
    %82 = arith.subf %45, %79 : tensor<32xf32>
    %83 = math.exp %82 : tensor<32xf32>
    %84 = arith.addf %81, %83 : tensor<32xf32>
    %85 = arith.subf %60, %79 : tensor<32xf32>
    %86 = math.exp %85 : tensor<32xf32>
    %87 = arith.addf %84, %86 : tensor<32xf32>
    %88 = arith.subf %75, %79 : tensor<32xf32>
    %89 = math.exp %88 : tensor<32xf32>
    %90 = arith.addf %87, %89 : tensor<32xf32>
    %91 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<32x!tt.ptr<f32, 1>>
    %92 = tt.addptr %91, %4 : tensor<32x!tt.ptr<f32, 1>>, tensor<32xi32>
    tt.store %92, %79, %5 {cache = 1 : i32, evict = 1 : i32} : tensor<32xf32>
    %93 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<32x!tt.ptr<f32, 1>>
    %94 = tt.addptr %93, %4 : tensor<32x!tt.ptr<f32, 1>>, tensor<32xi32>
    tt.store %94, %90, %5 {cache = 1 : i32, evict = 1 : i32} : tensor<32xf32>
    tt.return
  }
}
