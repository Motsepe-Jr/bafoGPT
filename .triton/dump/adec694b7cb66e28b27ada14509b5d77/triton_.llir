; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d910de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !5 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %12, 255, !dbg !8
  %13 = shl nuw nsw i32 %urem, 3, !dbg !8
  %14 = or i32 %13, 4, !dbg !8
  %15 = shl nuw nsw i32 %urem, 2, !dbg !8
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %17 = icmp slt i32 %16, 4, !dbg !10
  %18 = mul i32 %16, 2304, !dbg !11
  %19 = lshr i32 %12, 5, !dbg !8
  %20 = add i32 %13, %18, !dbg !12
  %21 = add i32 %14, %18, !dbg !12
  %22 = sext i32 %20 to i64, !dbg !13
  %23 = getelementptr i16, ptr addrspace(1) %1, i64 %22, !dbg !13
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !14
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !14
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !14
  %29 = trunc i32 %25 to i16, !dbg !14
  %extelt.offset28 = lshr i32 %25, 16, !dbg !14
  %30 = trunc i32 %extelt.offset28 to i16, !dbg !14
  %31 = trunc i32 %26 to i16, !dbg !14
  %extelt.offset29 = lshr i32 %26, 16, !dbg !14
  %32 = trunc i32 %extelt.offset29 to i16, !dbg !14
  %33 = trunc i32 %27 to i16, !dbg !14
  %extelt.offset30 = lshr i32 %27, 16, !dbg !14
  %34 = trunc i32 %extelt.offset30 to i16, !dbg !14
  %35 = trunc i32 %28 to i16, !dbg !14
  %extelt.offset31 = lshr i32 %28, 16, !dbg !14
  %36 = trunc i32 %extelt.offset31 to i16, !dbg !14
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #3, !dbg !15
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #3, !dbg !15
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #3, !dbg !15
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #3, !dbg !15
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #3, !dbg !15
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #3, !dbg !15
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #3, !dbg !15
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #3, !dbg !15
  %45 = zext nneg i32 %13 to i64, !dbg !16
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !16
  %47 = zext nneg i32 %14 to i64, !dbg !16
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !16
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !17
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !17
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !17
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !17
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !17
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !17
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !17
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !17
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !17
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !17
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !18
  %60 = sext i32 %21 to i64, !dbg !18
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !18
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !19
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !19
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !19
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !19
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !19
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !19
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !19
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !19
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !19
  %72 = insertelement <8 x i32> poison, i32 %50, i64 0, !dbg !17
  %73 = insertelement <8 x i32> %72, i32 %51, i64 1, !dbg !17
  %74 = insertelement <8 x i32> %73, i32 %52, i64 2, !dbg !17
  %75 = insertelement <8 x i32> %74, i32 %53, i64 3, !dbg !17
  %76 = insertelement <8 x i32> %75, i32 %55, i64 4, !dbg !17
  %77 = insertelement <8 x i32> %76, i32 %56, i64 5, !dbg !17
  %78 = insertelement <8 x i32> %77, i32 %57, i64 6, !dbg !17
  %79 = insertelement <8 x i32> %78, i32 %58, i64 7, !dbg !17
  %80 = bitcast <8 x i32> %79 to <8 x float>, !dbg !17
  %81 = insertelement <8 x i32> poison, i32 %63, i64 0, !dbg !19
  %82 = insertelement <8 x i32> %81, i32 %64, i64 1, !dbg !19
  %83 = insertelement <8 x i32> %82, i32 %65, i64 2, !dbg !19
  %84 = insertelement <8 x i32> %83, i32 %66, i64 3, !dbg !19
  %85 = insertelement <8 x i32> %84, i32 %68, i64 4, !dbg !19
  %86 = insertelement <8 x i32> %85, i32 %69, i64 5, !dbg !19
  %87 = insertelement <8 x i32> %86, i32 %70, i64 6, !dbg !19
  %88 = insertelement <8 x i32> %87, i32 %71, i64 7, !dbg !19
  %89 = bitcast <8 x i32> %88 to <8 x float>, !dbg !19
  %90 = fadd <8 x float> %80, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !20
  %91 = insertelement <8 x float> poison, float %37, i64 0, !dbg !21
  %92 = insertelement <8 x float> %91, float %38, i64 1, !dbg !21
  %93 = insertelement <8 x float> %92, float %39, i64 2, !dbg !21
  %94 = insertelement <8 x float> %93, float %40, i64 3, !dbg !21
  %95 = insertelement <8 x float> %94, float %41, i64 4, !dbg !21
  %96 = insertelement <8 x float> %95, float %42, i64 5, !dbg !21
  %97 = insertelement <8 x float> %96, float %43, i64 6, !dbg !21
  %98 = insertelement <8 x float> %97, float %44, i64 7, !dbg !21
  %99 = fmul <8 x float> %98, %90, !dbg !21
  %100 = fmul <8 x float> %99, %89, !dbg !22
  %101 = insertelement <8 x i1> poison, i1 %17, i64 0, !dbg !23
  %102 = shufflevector <8 x i1> %101, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !23
  %103 = fadd <8 x float> %100, zeroinitializer, !dbg !23
  %104 = select <8 x i1> %102, <8 x float> %103, <8 x float> zeroinitializer, !dbg !23
  %105 = or i32 %13, 2048, !dbg !24
  %106 = or i32 %13, 2052, !dbg !24
  %107 = icmp ult i32 %105, 2304, !dbg !25
  %108 = add i32 %105, %18, !dbg !12
  %109 = add i32 %106, %18, !dbg !12
  %110 = sext i32 %108 to i64, !dbg !13
  %111 = getelementptr i16, ptr addrspace(1) %1, i64 %110, !dbg !13
  %112 = and i1 %17, %107, !dbg !26
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !14
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !14
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !14
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !14
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !14
  %118 = trunc i32 %114 to i16, !dbg !14
  %extelt.offset28.1 = lshr i32 %114, 16, !dbg !14
  %119 = trunc i32 %extelt.offset28.1 to i16, !dbg !14
  %120 = trunc i32 %115 to i16, !dbg !14
  %extelt.offset29.1 = lshr i32 %115, 16, !dbg !14
  %121 = trunc i32 %extelt.offset29.1 to i16, !dbg !14
  %122 = trunc i32 %116 to i16, !dbg !14
  %extelt.offset30.1 = lshr i32 %116, 16, !dbg !14
  %123 = trunc i32 %extelt.offset30.1 to i16, !dbg !14
  %124 = trunc i32 %117 to i16, !dbg !14
  %extelt.offset31.1 = lshr i32 %117, 16, !dbg !14
  %125 = trunc i32 %extelt.offset31.1 to i16, !dbg !14
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #3, !dbg !15
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #3, !dbg !15
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #3, !dbg !15
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #3, !dbg !15
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #3, !dbg !15
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %123) #3, !dbg !15
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #3, !dbg !15
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %125) #3, !dbg !15
  %134 = zext nneg i32 %105 to i64, !dbg !16
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !16
  %136 = zext nneg i32 %106 to i64, !dbg !16
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !16
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #3, !dbg !17
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !17
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !17
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !17
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !17
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #3, !dbg !17
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !17
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !17
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !17
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !17
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %110, !dbg !18
  %149 = sext i32 %109 to i64, !dbg !18
  %150 = getelementptr float, ptr addrspace(1) %3, i64 %149, !dbg !18
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %148, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !19
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !19
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !19
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !19
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !19
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !19
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !19
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !19
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !19
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !19
  %161 = insertelement <8 x i32> poison, i32 %139, i64 0, !dbg !17
  %162 = insertelement <8 x i32> %161, i32 %140, i64 1, !dbg !17
  %163 = insertelement <8 x i32> %162, i32 %141, i64 2, !dbg !17
  %164 = insertelement <8 x i32> %163, i32 %142, i64 3, !dbg !17
  %165 = insertelement <8 x i32> %164, i32 %144, i64 4, !dbg !17
  %166 = insertelement <8 x i32> %165, i32 %145, i64 5, !dbg !17
  %167 = insertelement <8 x i32> %166, i32 %146, i64 6, !dbg !17
  %168 = insertelement <8 x i32> %167, i32 %147, i64 7, !dbg !17
  %169 = bitcast <8 x i32> %168 to <8 x float>, !dbg !17
  %170 = insertelement <8 x i32> poison, i32 %152, i64 0, !dbg !19
  %171 = insertelement <8 x i32> %170, i32 %153, i64 1, !dbg !19
  %172 = insertelement <8 x i32> %171, i32 %154, i64 2, !dbg !19
  %173 = insertelement <8 x i32> %172, i32 %155, i64 3, !dbg !19
  %174 = insertelement <8 x i32> %173, i32 %157, i64 4, !dbg !19
  %175 = insertelement <8 x i32> %174, i32 %158, i64 5, !dbg !19
  %176 = insertelement <8 x i32> %175, i32 %159, i64 6, !dbg !19
  %177 = insertelement <8 x i32> %176, i32 %160, i64 7, !dbg !19
  %178 = bitcast <8 x i32> %177 to <8 x float>, !dbg !19
  %179 = fadd <8 x float> %169, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !20
  %180 = insertelement <8 x float> poison, float %126, i64 0, !dbg !21
  %181 = insertelement <8 x float> %180, float %127, i64 1, !dbg !21
  %182 = insertelement <8 x float> %181, float %128, i64 2, !dbg !21
  %183 = insertelement <8 x float> %182, float %129, i64 3, !dbg !21
  %184 = insertelement <8 x float> %183, float %130, i64 4, !dbg !21
  %185 = insertelement <8 x float> %184, float %131, i64 5, !dbg !21
  %186 = insertelement <8 x float> %185, float %132, i64 6, !dbg !21
  %187 = insertelement <8 x float> %186, float %133, i64 7, !dbg !21
  %188 = fmul <8 x float> %187, %179, !dbg !21
  %189 = fmul <8 x float> %188, %178, !dbg !22
  %190 = insertelement <8 x i1> poison, i1 %112, i64 0, !dbg !23
  %191 = shufflevector <8 x i1> %190, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !23
  %192 = select <8 x i1> %191, <8 x float> %189, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !23
  %193 = fadd <8 x float> %104, %192, !dbg !23
  %194 = and i32 %12, 31, !dbg !8
  %195 = and i32 %19, 7, !dbg !8
  %196 = or i32 %15, 1024, !dbg !8
  %shift = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %197 = fadd <8 x float> %193, %shift, !dbg !27
  %shift78 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %198 = fadd <8 x float> %shift78, %197, !dbg !27
  %shift79 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %199 = fadd <8 x float> %shift79, %198, !dbg !27
  %shift80 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %200 = fadd <8 x float> %shift80, %199, !dbg !27
  %shift81 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %201 = fadd <8 x float> %shift81, %200, !dbg !27
  %shift82 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %202 = fadd <8 x float> %shift82, %201, !dbg !27
  %shift83 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %203 = fadd <8 x float> %shift83, %202, !dbg !27
  %204 = extractelement <8 x float> %203, i64 0, !dbg !27
  %205 = bitcast float %204 to i32, !dbg !33
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 16, i32 31), !dbg !33
  %207 = bitcast i32 %206 to float, !dbg !33
  %208 = fadd float %204, %207, !dbg !27
  %209 = bitcast float %208 to i32, !dbg !33
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 8, i32 31), !dbg !33
  %211 = bitcast i32 %210 to float, !dbg !33
  %212 = fadd float %208, %211, !dbg !27
  %213 = bitcast float %212 to i32, !dbg !33
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 4, i32 31), !dbg !33
  %215 = bitcast i32 %214 to float, !dbg !33
  %216 = fadd float %212, %215, !dbg !27
  %217 = bitcast float %216 to i32, !dbg !33
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 2, i32 31), !dbg !33
  %219 = bitcast i32 %218 to float, !dbg !33
  %220 = fadd float %216, %219, !dbg !27
  %221 = bitcast float %220 to i32, !dbg !33
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 1, i32 31), !dbg !33
  %223 = bitcast i32 %222 to float, !dbg !33
  %224 = fadd float %220, %223, !dbg !27
  %225 = icmp eq i32 %194, 0, !dbg !33
  %226 = zext nneg i32 %195 to i64, !dbg !33
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i64 %226, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, float %224, i1 %225) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %228 = icmp slt i32 %12, 8, !dbg !33
  %229 = sext i32 %12 to i64, !dbg !33
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i64 %229, !dbg !33
  %231 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %230, i1 %228) #3, !dbg !33
  %232 = bitcast float %231 to i32, !dbg !33
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 4, i32 31), !dbg !33
  %234 = bitcast i32 %233 to float, !dbg !33
  %235 = fadd float %231, %234, !dbg !27
  %236 = bitcast float %235 to i32, !dbg !33
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 2, i32 31), !dbg !33
  %238 = bitcast i32 %237 to float, !dbg !33
  %239 = fadd float %235, %238, !dbg !27
  %240 = bitcast float %239 to i32, !dbg !33
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 1, i32 31), !dbg !33
  %242 = bitcast i32 %241 to float, !dbg !33
  %243 = fadd float %239, %242, !dbg !27
  %244 = and i32 %12, 7, !dbg !33
  %245 = icmp eq i32 %244, 0, !dbg !33
  %246 = and i1 %228, %245, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, float %243, i1 %246) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %247 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !33
  %248 = sext i32 %16 to i64, !dbg !35
  %249 = getelementptr float, ptr addrspace(1) %4, i64 %248, !dbg !35
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %17) #3, !dbg !36
  %251 = bitcast i32 %250 to float, !dbg !36
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %17) #3, !dbg !36
  %253 = bitcast i32 %252 to float, !dbg !36
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %17) #3, !dbg !36
  %255 = bitcast i32 %254 to float, !dbg !36
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %17) #3, !dbg !36
  %257 = bitcast i32 %256 to float, !dbg !36
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %17) #3, !dbg !36
  %259 = bitcast i32 %258 to float, !dbg !36
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %17) #3, !dbg !36
  %261 = bitcast i32 %260 to float, !dbg !36
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %17) #3, !dbg !36
  %263 = bitcast i32 %262 to float, !dbg !36
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %17) #3, !dbg !36
  %265 = bitcast i32 %264 to float, !dbg !36
  %266 = fmul float %247, -5.000000e-01, !dbg !37
  %267 = fmul float %251, %251, !dbg !38
  %268 = fmul float %253, %253, !dbg !38
  %269 = fmul float %255, %255, !dbg !38
  %270 = fmul float %257, %257, !dbg !38
  %271 = fmul float %259, %259, !dbg !38
  %272 = fmul float %261, %261, !dbg !38
  %273 = fmul float %263, %263, !dbg !38
  %274 = fmul float %265, %265, !dbg !38
  %275 = fmul float %267, %251, !dbg !39
  %276 = fmul float %268, %253, !dbg !39
  %277 = fmul float %269, %255, !dbg !39
  %278 = fmul float %270, %257, !dbg !39
  %279 = fmul float %271, %259, !dbg !39
  %280 = fmul float %272, %261, !dbg !39
  %281 = fmul float %273, %263, !dbg !39
  %282 = fmul float %274, %265, !dbg !39
  %283 = fmul float %266, %275, !dbg !40
  %284 = fmul float %266, %276, !dbg !40
  %285 = fmul float %266, %277, !dbg !40
  %286 = fmul float %266, %278, !dbg !40
  %287 = fmul float %266, %279, !dbg !40
  %288 = fmul float %266, %280, !dbg !40
  %289 = fmul float %266, %281, !dbg !40
  %290 = fmul float %266, %282, !dbg !40
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float 2.304000e+03) #3, !dbg !41
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float 2.304000e+03) #3, !dbg !41
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float 2.304000e+03) #3, !dbg !41
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float 2.304000e+03) #3, !dbg !41
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float 2.304000e+03) #3, !dbg !41
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float 2.304000e+03) #3, !dbg !41
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float 2.304000e+03) #3, !dbg !41
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %290, float 2.304000e+03) #3, !dbg !41
  %299 = zext nneg i32 %13 to i64
  %300 = getelementptr float, ptr addrspace(3) @global_smem, i64 %299
  %301 = zext nneg i32 %15 to i64
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i64 %301
  %303 = zext nneg i32 %196 to i64
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i64 %303
  %305 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %302, i64 0, i64 1
  %306 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %302, i64 0, i64 2
  %307 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %302, i64 0, i64 3
  %308 = insertelement <8 x float> poison, float %291, i64 0, !dbg !42
  %309 = shufflevector <8 x float> %308, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !42
  %310 = insertelement <8 x float> poison, float %251, i64 0, !dbg !43
  %311 = shufflevector <8 x float> %310, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !43
  br label %312, !dbg !44

312:                                              ; preds = %11, %312
  %313 = phi i1 [ true, %11 ], [ false, %312 ]
  %314 = phi i32 [ 0, %11 ], [ 2048, %312 ]
  %315 = phi <8 x float> [ zeroinitializer, %11 ], [ %495, %312 ]
  %316 = or i32 %314, %13, !dbg !45
  %317 = or i32 %314, %14, !dbg !45
  %318 = or i32 %314, %15, !dbg !45
  %319 = or i32 %314, %196, !dbg !45
  %320 = icmp ult i32 %316, 2304, !dbg !46
  %321 = icmp ult i32 %318, 2304, !dbg !46
  %322 = icmp ult i32 %319, 2304, !dbg !46
  %323 = add i32 %316, %18, !dbg !47
  %324 = add i32 %317, %18, !dbg !47
  %325 = add i32 %318, %18, !dbg !47
  %326 = add i32 %319, %18, !dbg !47
  %327 = sext i32 %323 to i64, !dbg !48
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !48
  %329 = sext i32 %324 to i64, !dbg !48
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !48
  %331 = sext i32 %325 to i64, !dbg !48
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !48
  %333 = sext i32 %326 to i64, !dbg !48
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !48
  %335 = and i1 %17, %320, !dbg !49
  %336 = and i1 %17, %321, !dbg !49
  %337 = and i1 %17, %322, !dbg !49
  %338 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %328, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335) #3, !dbg !50
  %339 = extractvalue { i32, i32, i32, i32 } %338, 0, !dbg !50
  %340 = extractvalue { i32, i32, i32, i32 } %338, 1, !dbg !50
  %341 = extractvalue { i32, i32, i32, i32 } %338, 2, !dbg !50
  %342 = extractvalue { i32, i32, i32, i32 } %338, 3, !dbg !50
  %343 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %330, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335) #3, !dbg !50
  %344 = extractvalue { i32, i32, i32, i32 } %343, 0, !dbg !50
  %345 = extractvalue { i32, i32, i32, i32 } %343, 1, !dbg !50
  %346 = extractvalue { i32, i32, i32, i32 } %343, 2, !dbg !50
  %347 = extractvalue { i32, i32, i32, i32 } %343, 3, !dbg !50
  %348 = getelementptr i16, ptr addrspace(1) %1, i64 %327, !dbg !51
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %348, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335) #3, !dbg !52
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !52
  %351 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !52
  %352 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !52
  %353 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !52
  %354 = trunc i32 %350 to i16, !dbg !52
  %extelt.offset6 = lshr i32 %350, 16, !dbg !52
  %355 = trunc i32 %extelt.offset6 to i16, !dbg !52
  %356 = trunc i32 %351 to i16, !dbg !52
  %extelt.offset7 = lshr i32 %351, 16, !dbg !52
  %357 = trunc i32 %extelt.offset7 to i16, !dbg !52
  %358 = trunc i32 %352 to i16, !dbg !52
  %extelt.offset8 = lshr i32 %352, 16, !dbg !52
  %359 = trunc i32 %extelt.offset8 to i16, !dbg !52
  %360 = trunc i32 %353 to i16, !dbg !52
  %extelt.offset9 = lshr i32 %353, 16, !dbg !52
  %361 = trunc i32 %extelt.offset9 to i16, !dbg !52
  %362 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %354) #3, !dbg !53
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #3, !dbg !53
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #3, !dbg !53
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #3, !dbg !53
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #3, !dbg !53
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #3, !dbg !53
  %368 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #3, !dbg !53
  %369 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #3, !dbg !53
  %370 = zext nneg i32 %316 to i64, !dbg !54
  %371 = getelementptr float, ptr addrspace(1) %2, i64 %370, !dbg !54
  %372 = zext nneg i32 %317 to i64, !dbg !54
  %373 = getelementptr float, ptr addrspace(1) %2, i64 %372, !dbg !54
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %371, i1 %320, i32 0, i1 %320, i32 0, i1 %320, i32 0, i1 %320, i32 0, i1 %320) #3, !dbg !55
  %375 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !55
  %376 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !55
  %377 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !55
  %378 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !55
  %379 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %373, i1 %320, i32 0, i1 %320, i32 0, i1 %320, i32 0, i1 %320, i32 0, i1 %320) #3, !dbg !55
  %380 = extractvalue { i32, i32, i32, i32 } %379, 0, !dbg !55
  %381 = extractvalue { i32, i32, i32, i32 } %379, 1, !dbg !55
  %382 = extractvalue { i32, i32, i32, i32 } %379, 2, !dbg !55
  %383 = extractvalue { i32, i32, i32, i32 } %379, 3, !dbg !55
  %384 = getelementptr float, ptr addrspace(1) %3, i64 %327, !dbg !56
  %385 = getelementptr float, ptr addrspace(1) %3, i64 %329, !dbg !56
  %386 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %384, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335) #3, !dbg !57
  %387 = extractvalue { i32, i32, i32, i32 } %386, 0, !dbg !57
  %388 = extractvalue { i32, i32, i32, i32 } %386, 1, !dbg !57
  %389 = extractvalue { i32, i32, i32, i32 } %386, 2, !dbg !57
  %390 = extractvalue { i32, i32, i32, i32 } %386, 3, !dbg !57
  %391 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %385, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335) #3, !dbg !57
  %392 = extractvalue { i32, i32, i32, i32 } %391, 0, !dbg !57
  %393 = extractvalue { i32, i32, i32, i32 } %391, 1, !dbg !57
  %394 = extractvalue { i32, i32, i32, i32 } %391, 2, !dbg !57
  %395 = extractvalue { i32, i32, i32, i32 } %391, 3, !dbg !57
  %396 = getelementptr float, ptr addrspace(1) %5, i64 %370, !dbg !58
  %397 = getelementptr float, ptr addrspace(1) %5, i64 %372, !dbg !58
  %398 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %396, i1 %320, i32 0, i1 %320, i32 0, i1 %320, i32 0, i1 %320, i32 0, i1 %320) #3, !dbg !59
  %399 = extractvalue { i32, i32, i32, i32 } %398, 0, !dbg !59
  %400 = extractvalue { i32, i32, i32, i32 } %398, 1, !dbg !59
  %401 = extractvalue { i32, i32, i32, i32 } %398, 2, !dbg !59
  %402 = extractvalue { i32, i32, i32, i32 } %398, 3, !dbg !59
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %397, i1 %320, i32 0, i1 %320, i32 0, i1 %320, i32 0, i1 %320, i32 0, i1 %320) #3, !dbg !59
  %404 = extractvalue { i32, i32, i32, i32 } %403, 0, !dbg !59
  %405 = extractvalue { i32, i32, i32, i32 } %403, 1, !dbg !59
  %406 = extractvalue { i32, i32, i32, i32 } %403, 2, !dbg !59
  %407 = extractvalue { i32, i32, i32, i32 } %403, 3, !dbg !59
  %408 = getelementptr i16, ptr addrspace(1) %6, i64 %327, !dbg !60
  %409 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %408, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335, i32 0, i1 %335) #3, !dbg !61
  %410 = extractvalue { i32, i32, i32, i32 } %409, 0, !dbg !61
  %411 = extractvalue { i32, i32, i32, i32 } %409, 1, !dbg !61
  %412 = extractvalue { i32, i32, i32, i32 } %409, 2, !dbg !61
  %413 = extractvalue { i32, i32, i32, i32 } %409, 3, !dbg !61
  %414 = trunc i32 %410 to i16, !dbg !61
  %extelt.offset10 = lshr i32 %410, 16, !dbg !61
  %415 = trunc i32 %extelt.offset10 to i16, !dbg !61
  %416 = trunc i32 %411 to i16, !dbg !61
  %extelt.offset11 = lshr i32 %411, 16, !dbg !61
  %417 = trunc i32 %extelt.offset11 to i16, !dbg !61
  %418 = trunc i32 %412 to i16, !dbg !61
  %extelt.offset12 = lshr i32 %412, 16, !dbg !61
  %419 = trunc i32 %extelt.offset12 to i16, !dbg !61
  %420 = trunc i32 %413 to i16, !dbg !61
  %extelt.offset13 = lshr i32 %413, 16, !dbg !61
  %421 = trunc i32 %extelt.offset13 to i16, !dbg !61
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %414) #3, !dbg !62
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %415) #3, !dbg !62
  %424 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %416) #3, !dbg !62
  %425 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #3, !dbg !62
  %426 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #3, !dbg !62
  %427 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #3, !dbg !62
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #3, !dbg !62
  %429 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #3, !dbg !62
  %430 = insertelement <8 x i32> poison, i32 %339, i64 0, !dbg !50
  %431 = insertelement <8 x i32> %430, i32 %340, i64 1, !dbg !50
  %432 = insertelement <8 x i32> %431, i32 %341, i64 2, !dbg !50
  %433 = insertelement <8 x i32> %432, i32 %342, i64 3, !dbg !50
  %434 = insertelement <8 x i32> %433, i32 %344, i64 4, !dbg !50
  %435 = insertelement <8 x i32> %434, i32 %345, i64 5, !dbg !50
  %436 = insertelement <8 x i32> %435, i32 %346, i64 6, !dbg !50
  %437 = insertelement <8 x i32> %436, i32 %347, i64 7, !dbg !50
  %438 = bitcast <8 x i32> %437 to <8 x float>, !dbg !50
  %439 = insertelement <8 x i32> poison, i32 %375, i64 0, !dbg !55
  %440 = insertelement <8 x i32> %439, i32 %376, i64 1, !dbg !55
  %441 = insertelement <8 x i32> %440, i32 %377, i64 2, !dbg !55
  %442 = insertelement <8 x i32> %441, i32 %378, i64 3, !dbg !55
  %443 = insertelement <8 x i32> %442, i32 %380, i64 4, !dbg !55
  %444 = insertelement <8 x i32> %443, i32 %381, i64 5, !dbg !55
  %445 = insertelement <8 x i32> %444, i32 %382, i64 6, !dbg !55
  %446 = insertelement <8 x i32> %445, i32 %383, i64 7, !dbg !55
  %447 = bitcast <8 x i32> %446 to <8 x float>, !dbg !55
  %448 = insertelement <8 x i32> poison, i32 %387, i64 0, !dbg !57
  %449 = insertelement <8 x i32> %448, i32 %388, i64 1, !dbg !57
  %450 = insertelement <8 x i32> %449, i32 %389, i64 2, !dbg !57
  %451 = insertelement <8 x i32> %450, i32 %390, i64 3, !dbg !57
  %452 = insertelement <8 x i32> %451, i32 %392, i64 4, !dbg !57
  %453 = insertelement <8 x i32> %452, i32 %393, i64 5, !dbg !57
  %454 = insertelement <8 x i32> %453, i32 %394, i64 6, !dbg !57
  %455 = insertelement <8 x i32> %454, i32 %395, i64 7, !dbg !57
  %456 = bitcast <8 x i32> %455 to <8 x float>, !dbg !57
  %457 = insertelement <8 x i32> poison, i32 %399, i64 0, !dbg !59
  %458 = insertelement <8 x i32> %457, i32 %400, i64 1, !dbg !59
  %459 = insertelement <8 x i32> %458, i32 %401, i64 2, !dbg !59
  %460 = insertelement <8 x i32> %459, i32 %402, i64 3, !dbg !59
  %461 = insertelement <8 x i32> %460, i32 %404, i64 4, !dbg !59
  %462 = insertelement <8 x i32> %461, i32 %405, i64 5, !dbg !59
  %463 = insertelement <8 x i32> %462, i32 %406, i64 6, !dbg !59
  %464 = insertelement <8 x i32> %463, i32 %407, i64 7, !dbg !59
  %465 = bitcast <8 x i32> %464 to <8 x float>, !dbg !59
  %466 = fadd <8 x float> %447, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !63
  %467 = insertelement <8 x float> poison, float %362, i64 0, !dbg !64
  %468 = insertelement <8 x float> %467, float %363, i64 1, !dbg !64
  %469 = insertelement <8 x float> %468, float %364, i64 2, !dbg !64
  %470 = insertelement <8 x float> %469, float %365, i64 3, !dbg !64
  %471 = insertelement <8 x float> %470, float %366, i64 4, !dbg !64
  %472 = insertelement <8 x float> %471, float %367, i64 5, !dbg !64
  %473 = insertelement <8 x float> %472, float %368, i64 6, !dbg !64
  %474 = insertelement <8 x float> %473, float %369, i64 7, !dbg !64
  %475 = fmul <8 x float> %474, %466, !dbg !64
  %476 = fmul <8 x float> %475, %311, !dbg !43
  %477 = fadd <8 x float> %476, %438, !dbg !65
  %478 = fmul <8 x float> %309, %456, !dbg !42
  %479 = fadd <8 x float> %478, %477, !dbg !66
  %480 = fadd <8 x float> %478, %479, !dbg !67
  %481 = fadd <8 x float> %465, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !68
  %482 = fmul <8 x float> %481, %480, !dbg !69
  %483 = insertelement <8 x float> poison, float %422, i64 0, !dbg !70
  %484 = insertelement <8 x float> %483, float %423, i64 1, !dbg !70
  %485 = insertelement <8 x float> %484, float %424, i64 2, !dbg !70
  %486 = insertelement <8 x float> %485, float %425, i64 3, !dbg !70
  %487 = insertelement <8 x float> %486, float %426, i64 4, !dbg !70
  %488 = insertelement <8 x float> %487, float %427, i64 5, !dbg !70
  %489 = insertelement <8 x float> %488, float %428, i64 6, !dbg !70
  %490 = insertelement <8 x float> %489, float %429, i64 7, !dbg !70
  %491 = fmul <8 x float> %490, %482, !dbg !70
  %492 = insertelement <8 x i1> poison, i1 %335, i64 0, !dbg !71
  %493 = shufflevector <8 x i1> %492, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !71
  %494 = select <8 x i1> %493, <8 x float> %491, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !71
  %495 = fadd <8 x float> %315, %494, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  store <8 x float> %480, ptr addrspace(3) %300, align 32, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %496 = load <4 x i32>, ptr addrspace(3) %304, align 16, !dbg !72
  %.extract = load i32, ptr addrspace(3) %302, align 16, !dbg !72
  %.extract15 = load i32, ptr addrspace(3) %305, align 4, !dbg !72
  %.extract17 = load i32, ptr addrspace(3) %306, align 8, !dbg !72
  %.extract19 = load i32, ptr addrspace(3) %307, align 4, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract17, i32 %.extract19, ptr addrspace(1) %332, i1 %336) #3, !dbg !72
  %.extract21 = extractelement <4 x i32> %496, i64 0, !dbg !72
  %.extract23 = extractelement <4 x i32> %496, i64 1, !dbg !72
  %.extract25 = extractelement <4 x i32> %496, i64 2, !dbg !72
  %.extract27 = extractelement <4 x i32> %496, i64 3, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract23, i32 %.extract25, i32 %.extract27, ptr addrspace(1) %334, i1 %337) #3, !dbg !72
  br i1 %313, label %312, label %497, !dbg !44

497:                                              ; preds = %312
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %shift84 = shufflevector <8 x float> %495, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %498 = fadd <8 x float> %495, %shift84, !dbg !75
  %shift85 = shufflevector <8 x float> %495, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %499 = fadd <8 x float> %shift85, %498, !dbg !75
  %shift86 = shufflevector <8 x float> %495, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %500 = fadd <8 x float> %shift86, %499, !dbg !75
  %shift87 = shufflevector <8 x float> %495, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %501 = fadd <8 x float> %shift87, %500, !dbg !75
  %shift88 = shufflevector <8 x float> %495, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %502 = fadd <8 x float> %shift88, %501, !dbg !75
  %shift89 = shufflevector <8 x float> %495, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %503 = fadd <8 x float> %shift89, %502, !dbg !75
  %shift90 = shufflevector <8 x float> %495, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %504 = fadd <8 x float> %shift90, %503, !dbg !75
  %505 = extractelement <8 x float> %504, i64 0, !dbg !75
  %506 = bitcast float %505 to i32, !dbg !73
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 16, i32 31), !dbg !73
  %508 = bitcast i32 %507 to float, !dbg !73
  %509 = fadd float %505, %508, !dbg !75
  %510 = bitcast float %509 to i32, !dbg !73
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 8, i32 31), !dbg !73
  %512 = bitcast i32 %511 to float, !dbg !73
  %513 = fadd float %509, %512, !dbg !75
  %514 = bitcast float %513 to i32, !dbg !73
  %515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %514, i32 4, i32 31), !dbg !73
  %516 = bitcast i32 %515 to float, !dbg !73
  %517 = fadd float %513, %516, !dbg !75
  %518 = bitcast float %517 to i32, !dbg !73
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 2, i32 31), !dbg !73
  %520 = bitcast i32 %519 to float, !dbg !73
  %521 = fadd float %517, %520, !dbg !75
  %522 = bitcast float %521 to i32, !dbg !73
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 1, i32 31), !dbg !73
  %524 = bitcast i32 %523 to float, !dbg !73
  %525 = fadd float %521, %524, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, float %525, i1 %225) #3, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %526 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %230, i1 %228) #3, !dbg !73
  %527 = bitcast float %526 to i32, !dbg !73
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 4, i32 31), !dbg !73
  %529 = bitcast i32 %528 to float, !dbg !73
  %530 = fadd float %526, %529, !dbg !75
  %531 = bitcast float %530 to i32, !dbg !73
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 2, i32 31), !dbg !73
  %533 = bitcast i32 %532 to float, !dbg !73
  %534 = fadd float %530, %533, !dbg !75
  %535 = bitcast float %534 to i32, !dbg !73
  %536 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %535, i32 1, i32 31), !dbg !73
  %537 = bitcast i32 %536 to float, !dbg !73
  %538 = fadd float %534, %537, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, float %538, i1 %246) #3, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %539 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !73
  %540 = getelementptr float, ptr addrspace(1) %7, i64 %248, !dbg !78
  %541 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %540, i1 %17) #3, !dbg !79
  %542 = bitcast i32 %541 to float, !dbg !79
  %543 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %540, i1 %17) #3, !dbg !79
  %544 = bitcast i32 %543 to float, !dbg !79
  %545 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %540, i1 %17) #3, !dbg !79
  %546 = bitcast i32 %545 to float, !dbg !79
  %547 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %540, i1 %17) #3, !dbg !79
  %548 = bitcast i32 %547 to float, !dbg !79
  %549 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %540, i1 %17) #3, !dbg !79
  %550 = bitcast i32 %549 to float, !dbg !79
  %551 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %540, i1 %17) #3, !dbg !79
  %552 = bitcast i32 %551 to float, !dbg !79
  %553 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %540, i1 %17) #3, !dbg !79
  %554 = bitcast i32 %553 to float, !dbg !79
  %555 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %540, i1 %17) #3, !dbg !79
  %556 = bitcast i32 %555 to float, !dbg !79
  %557 = fmul float %539, -5.000000e-01, !dbg !80
  %558 = fmul float %542, %542, !dbg !81
  %559 = fmul float %544, %544, !dbg !81
  %560 = fmul float %546, %546, !dbg !81
  %561 = fmul float %548, %548, !dbg !81
  %562 = fmul float %550, %550, !dbg !81
  %563 = fmul float %552, %552, !dbg !81
  %564 = fmul float %554, %554, !dbg !81
  %565 = fmul float %556, %556, !dbg !81
  %566 = fmul float %558, %542, !dbg !82
  %567 = fmul float %559, %544, !dbg !82
  %568 = fmul float %560, %546, !dbg !82
  %569 = fmul float %561, %548, !dbg !82
  %570 = fmul float %562, %550, !dbg !82
  %571 = fmul float %563, %552, !dbg !82
  %572 = fmul float %564, %554, !dbg !82
  %573 = fmul float %565, %556, !dbg !82
  %574 = fmul float %557, %566, !dbg !83
  %575 = fmul float %557, %567, !dbg !83
  %576 = fmul float %557, %568, !dbg !83
  %577 = fmul float %557, %569, !dbg !83
  %578 = fmul float %557, %570, !dbg !83
  %579 = fmul float %557, %571, !dbg !83
  %580 = fmul float %557, %572, !dbg !83
  %581 = fmul float %557, %573, !dbg !83
  %582 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %574, float 2.304000e+03) #3, !dbg !84
  %583 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %575, float 2.304000e+03) #3, !dbg !84
  %584 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %576, float 2.304000e+03) #3, !dbg !84
  %585 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %577, float 2.304000e+03) #3, !dbg !84
  %586 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %578, float 2.304000e+03) #3, !dbg !84
  %587 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %579, float 2.304000e+03) #3, !dbg !84
  %588 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %580, float 2.304000e+03) #3, !dbg !84
  %589 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %581, float 2.304000e+03) #3, !dbg !84
  br label %590, !dbg !85

590:                                              ; preds = %497, %590
  %591 = phi i1 [ true, %497 ], [ false, %590 ]
  %592 = phi i32 [ 0, %497 ], [ 2048, %590 ]
  %593 = or i32 %592, %13, !dbg !86
  %594 = or i32 %592, %14, !dbg !86
  %595 = icmp ult i32 %593, 2304, !dbg !87
  %596 = add i32 %593, %18, !dbg !88
  %597 = add i32 %594, %18, !dbg !88
  %598 = sext i32 %596 to i64, !dbg !89
  %599 = getelementptr float, ptr addrspace(1) %0, i64 %598, !dbg !89
  %600 = sext i32 %597 to i64, !dbg !89
  %601 = getelementptr float, ptr addrspace(1) %0, i64 %600, !dbg !89
  %602 = and i1 %17, %595, !dbg !90
  %603 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %599, i1 %602, i32 0, i1 %602, i32 0, i1 %602, i32 0, i1 %602, i32 0, i1 %602) #3, !dbg !91
  %604 = extractvalue { i32, i32, i32, i32 } %603, 0, !dbg !91
  %605 = extractvalue { i32, i32, i32, i32 } %603, 1, !dbg !91
  %606 = extractvalue { i32, i32, i32, i32 } %603, 2, !dbg !91
  %607 = extractvalue { i32, i32, i32, i32 } %603, 3, !dbg !91
  %608 = bitcast i32 %604 to float, !dbg !91
  %609 = bitcast i32 %605 to float, !dbg !91
  %610 = bitcast i32 %606 to float, !dbg !91
  %611 = bitcast i32 %607 to float, !dbg !91
  %612 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %601, i1 %602, i32 0, i1 %602, i32 0, i1 %602, i32 0, i1 %602, i32 0, i1 %602) #3, !dbg !91
  %613 = extractvalue { i32, i32, i32, i32 } %612, 0, !dbg !91
  %614 = extractvalue { i32, i32, i32, i32 } %612, 1, !dbg !91
  %615 = extractvalue { i32, i32, i32, i32 } %612, 2, !dbg !91
  %616 = extractvalue { i32, i32, i32, i32 } %612, 3, !dbg !91
  %617 = bitcast i32 %613 to float, !dbg !91
  %618 = bitcast i32 %614 to float, !dbg !91
  %619 = bitcast i32 %615 to float, !dbg !91
  %620 = bitcast i32 %616 to float, !dbg !91
  %621 = zext nneg i32 %593 to i64, !dbg !92
  %622 = getelementptr float, ptr addrspace(1) %5, i64 %621, !dbg !92
  %623 = zext nneg i32 %594 to i64, !dbg !92
  %624 = getelementptr float, ptr addrspace(1) %5, i64 %623, !dbg !92
  %625 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %622, i1 %595, i32 0, i1 %595, i32 0, i1 %595, i32 0, i1 %595, i32 0, i1 %595) #3, !dbg !93
  %626 = extractvalue { i32, i32, i32, i32 } %625, 0, !dbg !93
  %627 = extractvalue { i32, i32, i32, i32 } %625, 1, !dbg !93
  %628 = extractvalue { i32, i32, i32, i32 } %625, 2, !dbg !93
  %629 = extractvalue { i32, i32, i32, i32 } %625, 3, !dbg !93
  %630 = bitcast i32 %626 to float, !dbg !93
  %631 = bitcast i32 %627 to float, !dbg !93
  %632 = bitcast i32 %628 to float, !dbg !93
  %633 = bitcast i32 %629 to float, !dbg !93
  %634 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %624, i1 %595, i32 0, i1 %595, i32 0, i1 %595, i32 0, i1 %595, i32 0, i1 %595) #3, !dbg !93
  %635 = extractvalue { i32, i32, i32, i32 } %634, 0, !dbg !93
  %636 = extractvalue { i32, i32, i32, i32 } %634, 1, !dbg !93
  %637 = extractvalue { i32, i32, i32, i32 } %634, 2, !dbg !93
  %638 = extractvalue { i32, i32, i32, i32 } %634, 3, !dbg !93
  %639 = bitcast i32 %635 to float, !dbg !93
  %640 = bitcast i32 %636 to float, !dbg !93
  %641 = bitcast i32 %637 to float, !dbg !93
  %642 = bitcast i32 %638 to float, !dbg !93
  %643 = getelementptr i16, ptr addrspace(1) %6, i64 %598, !dbg !94
  %644 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %643, i1 %602, i32 0, i1 %602, i32 0, i1 %602, i32 0, i1 %602, i32 0, i1 %602) #3, !dbg !95
  %645 = extractvalue { i32, i32, i32, i32 } %644, 0, !dbg !95
  %646 = extractvalue { i32, i32, i32, i32 } %644, 1, !dbg !95
  %647 = extractvalue { i32, i32, i32, i32 } %644, 2, !dbg !95
  %648 = extractvalue { i32, i32, i32, i32 } %644, 3, !dbg !95
  %649 = trunc i32 %645 to i16, !dbg !95
  %extelt.offset = lshr i32 %645, 16, !dbg !95
  %650 = trunc i32 %extelt.offset to i16, !dbg !95
  %651 = trunc i32 %646 to i16, !dbg !95
  %extelt.offset3 = lshr i32 %646, 16, !dbg !95
  %652 = trunc i32 %extelt.offset3 to i16, !dbg !95
  %653 = trunc i32 %647 to i16, !dbg !95
  %extelt.offset4 = lshr i32 %647, 16, !dbg !95
  %654 = trunc i32 %extelt.offset4 to i16, !dbg !95
  %655 = trunc i32 %648 to i16, !dbg !95
  %extelt.offset5 = lshr i32 %648, 16, !dbg !95
  %656 = trunc i32 %extelt.offset5 to i16, !dbg !95
  %657 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %649) #3, !dbg !96
  %658 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %650) #3, !dbg !96
  %659 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %651) #3, !dbg !96
  %660 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %652) #3, !dbg !96
  %661 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %653) #3, !dbg !96
  %662 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %654) #3, !dbg !96
  %663 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %655) #3, !dbg !96
  %664 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %656) #3, !dbg !96
  %665 = fadd float %630, 1.000000e+00, !dbg !97
  %666 = fadd float %631, 1.000000e+00, !dbg !97
  %667 = fadd float %632, 1.000000e+00, !dbg !97
  %668 = fadd float %633, 1.000000e+00, !dbg !97
  %669 = fadd float %639, 1.000000e+00, !dbg !97
  %670 = fadd float %640, 1.000000e+00, !dbg !97
  %671 = fadd float %641, 1.000000e+00, !dbg !97
  %672 = fadd float %642, 1.000000e+00, !dbg !97
  %673 = fmul float %665, %608, !dbg !98
  %674 = fmul float %666, %609, !dbg !98
  %675 = fmul float %667, %610, !dbg !98
  %676 = fmul float %668, %611, !dbg !98
  %677 = fmul float %669, %617, !dbg !98
  %678 = fmul float %670, %618, !dbg !98
  %679 = fmul float %671, %619, !dbg !98
  %680 = fmul float %672, %620, !dbg !98
  %681 = fmul float %673, %542, !dbg !99
  %682 = fmul float %674, %542, !dbg !99
  %683 = fmul float %675, %542, !dbg !99
  %684 = fmul float %676, %542, !dbg !99
  %685 = fmul float %677, %542, !dbg !99
  %686 = fmul float %678, %542, !dbg !99
  %687 = fmul float %679, %542, !dbg !99
  %688 = fmul float %680, %542, !dbg !99
  %689 = fmul float %582, %657, !dbg !100
  %690 = fmul float %582, %658, !dbg !100
  %691 = fmul float %582, %659, !dbg !100
  %692 = fmul float %582, %660, !dbg !100
  %693 = fmul float %582, %661, !dbg !100
  %694 = fmul float %582, %662, !dbg !100
  %695 = fmul float %582, %663, !dbg !100
  %696 = fmul float %582, %664, !dbg !100
  %697 = fadd float %689, %681, !dbg !101
  %698 = fadd float %682, %690, !dbg !101
  %699 = fadd float %683, %691, !dbg !101
  %700 = fadd float %684, %692, !dbg !101
  %701 = fadd float %685, %693, !dbg !101
  %702 = fadd float %686, %694, !dbg !101
  %703 = fadd float %687, %695, !dbg !101
  %704 = fadd float %688, %696, !dbg !101
  %705 = fadd float %689, %697, !dbg !102
  %706 = fadd float %690, %698, !dbg !102
  %707 = fadd float %691, %699, !dbg !102
  %708 = fadd float %692, %700, !dbg !102
  %709 = fadd float %693, %701, !dbg !102
  %710 = fadd float %694, %702, !dbg !102
  %711 = fadd float %695, %703, !dbg !102
  %712 = fadd float %696, %704, !dbg !102
  %713 = getelementptr i16, ptr addrspace(1) %8, i64 %598, !dbg !103
  %714 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %705) #3, !dbg !104
  %715 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %706) #3, !dbg !104
  %716 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %707) #3, !dbg !104
  %717 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %708) #3, !dbg !104
  %718 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %709) #3, !dbg !104
  %719 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %710) #3, !dbg !104
  %720 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %711) #3, !dbg !104
  %721 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %712) #3, !dbg !104
  %722 = insertelement <2 x i16> undef, i16 %714, i64 0, !dbg !104
  %723 = insertelement <2 x i16> %722, i16 %715, i64 1, !dbg !104
  %724 = bitcast <2 x i16> %723 to i32, !dbg !104
  %725 = insertelement <2 x i16> undef, i16 %716, i64 0, !dbg !104
  %726 = insertelement <2 x i16> %725, i16 %717, i64 1, !dbg !104
  %727 = bitcast <2 x i16> %726 to i32, !dbg !104
  %728 = insertelement <2 x i16> undef, i16 %718, i64 0, !dbg !104
  %729 = insertelement <2 x i16> %728, i16 %719, i64 1, !dbg !104
  %730 = bitcast <2 x i16> %729 to i32, !dbg !104
  %731 = insertelement <2 x i16> undef, i16 %720, i64 0, !dbg !104
  %732 = insertelement <2 x i16> %731, i16 %721, i64 1, !dbg !104
  %733 = bitcast <2 x i16> %732 to i32, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %724, i32 %727, i32 %730, i32 %733, ptr addrspace(1) %713, i1 %602) #3, !dbg !104
  br i1 %591, label %590, label %734, !dbg !85

734:                                              ; preds = %590
  ret void, !dbg !105
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cbkoci4kv6d3th7ooowb6iixnnxcyf5duhq3c3bnsgbunb3rp4rx.py", directory: "/tmp/torchinductor_zeus/bk")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d910de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d910de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d910de", linkageName: "triton__0d1d2d3d4d5d6d7d8d910de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 31, column: 45, scope: !5)
!12 = !DILocation(line: 31, column: 40, scope: !5)
!13 = !DILocation(line: 31, column: 34, scope: !5)
!14 = !DILocation(line: 31, column: 51, scope: !5)
!15 = !DILocation(line: 31, column: 110, scope: !5)
!16 = !DILocation(line: 32, column: 34, scope: !5)
!17 = !DILocation(line: 32, column: 39, scope: !5)
!18 = !DILocation(line: 33, column: 34, scope: !5)
!19 = !DILocation(line: 33, column: 51, scope: !5)
!20 = !DILocation(line: 36, column: 22, scope: !5)
!21 = !DILocation(line: 37, column: 22, scope: !5)
!22 = !DILocation(line: 38, column: 22, scope: !5)
!23 = !DILocation(line: 41, column: 47, scope: !5)
!24 = !DILocation(line: 28, column: 27, scope: !5)
!25 = !DILocation(line: 29, column: 25, scope: !5)
!26 = !DILocation(line: 31, column: 59, scope: !5)
!27 = !DILocation(line: 233, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !5, file: !29, discriminator: 0)
!31 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !32)
!32 = !DILocation(line: 42, column: 25, scope: !28)
!33 = !DILocation(line: 243, column: 36, scope: !30, inlinedAt: !34)
!34 = !DILocation(line: 42, column: 25, scope: !30)
!35 = !DILocation(line: 43, column: 31, scope: !5)
!36 = !DILocation(line: 43, column: 36, scope: !5)
!37 = !DILocation(line: 62, column: 23, scope: !5)
!38 = !DILocation(line: 63, column: 24, scope: !5)
!39 = !DILocation(line: 64, column: 24, scope: !5)
!40 = !DILocation(line: 65, column: 24, scope: !5)
!41 = !DILocation(line: 67, column: 24, scope: !5)
!42 = !DILocation(line: 68, column: 24, scope: !5)
!43 = !DILocation(line: 59, column: 24, scope: !5)
!44 = !DILocation(line: 45, column: 36, scope: !5)
!45 = !DILocation(line: 46, column: 27, scope: !5)
!46 = !DILocation(line: 47, column: 25, scope: !5)
!47 = !DILocation(line: 49, column: 45, scope: !5)
!48 = !DILocation(line: 49, column: 39, scope: !5)
!49 = !DILocation(line: 49, column: 64, scope: !5)
!50 = !DILocation(line: 49, column: 56, scope: !5)
!51 = !DILocation(line: 50, column: 35, scope: !5)
!52 = !DILocation(line: 50, column: 52, scope: !5)
!53 = !DILocation(line: 50, column: 112, scope: !5)
!54 = !DILocation(line: 51, column: 35, scope: !5)
!55 = !DILocation(line: 51, column: 40, scope: !5)
!56 = !DILocation(line: 52, column: 35, scope: !5)
!57 = !DILocation(line: 52, column: 52, scope: !5)
!58 = !DILocation(line: 53, column: 35, scope: !5)
!59 = !DILocation(line: 53, column: 40, scope: !5)
!60 = !DILocation(line: 54, column: 35, scope: !5)
!61 = !DILocation(line: 54, column: 52, scope: !5)
!62 = !DILocation(line: 54, column: 111, scope: !5)
!63 = !DILocation(line: 57, column: 24, scope: !5)
!64 = !DILocation(line: 58, column: 24, scope: !5)
!65 = !DILocation(line: 60, column: 24, scope: !5)
!66 = !DILocation(line: 69, column: 24, scope: !5)
!67 = !DILocation(line: 70, column: 24, scope: !5)
!68 = !DILocation(line: 71, column: 24, scope: !5)
!69 = !DILocation(line: 72, column: 24, scope: !5)
!70 = !DILocation(line: 74, column: 24, scope: !5)
!71 = !DILocation(line: 77, column: 48, scope: !5)
!72 = !DILocation(line: 78, column: 56, scope: !5)
!73 = !DILocation(line: 243, column: 36, scope: !30, inlinedAt: !74)
!74 = !DILocation(line: 79, column: 27, scope: !30)
!75 = !DILocation(line: 233, column: 15, scope: !28, inlinedAt: !76)
!76 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !77)
!77 = !DILocation(line: 79, column: 27, scope: !28)
!78 = !DILocation(line: 80, column: 31, scope: !5)
!79 = !DILocation(line: 80, column: 36, scope: !5)
!80 = !DILocation(line: 93, column: 24, scope: !5)
!81 = !DILocation(line: 94, column: 24, scope: !5)
!82 = !DILocation(line: 95, column: 24, scope: !5)
!83 = !DILocation(line: 96, column: 24, scope: !5)
!84 = !DILocation(line: 98, column: 24, scope: !5)
!85 = !DILocation(line: 81, column: 36, scope: !5)
!86 = !DILocation(line: 82, column: 27, scope: !5)
!87 = !DILocation(line: 83, column: 25, scope: !5)
!88 = !DILocation(line: 85, column: 45, scope: !5)
!89 = !DILocation(line: 85, column: 39, scope: !5)
!90 = !DILocation(line: 85, column: 64, scope: !5)
!91 = !DILocation(line: 85, column: 56, scope: !5)
!92 = !DILocation(line: 86, column: 35, scope: !5)
!93 = !DILocation(line: 86, column: 40, scope: !5)
!94 = !DILocation(line: 87, column: 35, scope: !5)
!95 = !DILocation(line: 87, column: 52, scope: !5)
!96 = !DILocation(line: 87, column: 112, scope: !5)
!97 = !DILocation(line: 89, column: 24, scope: !5)
!98 = !DILocation(line: 90, column: 24, scope: !5)
!99 = !DILocation(line: 91, column: 24, scope: !5)
!100 = !DILocation(line: 100, column: 24, scope: !5)
!101 = !DILocation(line: 101, column: 24, scope: !5)
!102 = !DILocation(line: 102, column: 24, scope: !5)
!103 = !DILocation(line: 104, column: 29, scope: !5)
!104 = !DILocation(line: 104, column: 53, scope: !5)
!105 = !DILocation(line: 81, column: 4, scope: !5)
