; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 5, !dbg !10
  %urem = and i32 %7, 255, !dbg !10
  %9 = shl nuw nsw i32 %urem, 2, !dbg !10
  %10 = or i32 %9, 1024, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %12 = icmp slt i32 %11, 1024, !dbg !12
  %13 = mul i32 %11, 2304, !dbg !13
  %14 = add i32 %9, %13, !dbg !14
  %15 = add i32 %10, %13, !dbg !14
  %16 = sext i32 %14 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !15
  %18 = sext i32 %15 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #6, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #6, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %30 = bitcast i32 %26 to float, !dbg !16
  %31 = bitcast i32 %27 to float, !dbg !16
  %32 = bitcast i32 %28 to float, !dbg !16
  %33 = bitcast i32 %29 to float, !dbg !16
  %34 = fmul float %30, %30, !dbg !17
  %35 = fmul float %31, %31, !dbg !17
  %36 = fmul float %32, %32, !dbg !17
  %37 = fmul float %33, %33, !dbg !17
  %38 = select i1 %12, float %34, float 0.000000e+00, !dbg !18
  %39 = select i1 %12, float %35, float 0.000000e+00, !dbg !18
  %40 = select i1 %12, float %36, float 0.000000e+00, !dbg !18
  %41 = select i1 %12, float %37, float 0.000000e+00, !dbg !18
  %42 = or i32 %9, 2048, !dbg !19
  %43 = or i32 %9, 3072, !dbg !19
  %44 = icmp ult i32 %42, 2304, !dbg !20
  %45 = add i32 %42, %13, !dbg !14
  %46 = add i32 %43, %13, !dbg !14
  %47 = sext i32 %45 to i64, !dbg !15
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !15
  %49 = sext i32 %46 to i64, !dbg !15
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !15
  %51 = and i1 %12, %44, !dbg !21
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #6, !dbg !16
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !16
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !16
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !16
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !16
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !16
  %58 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !16
  %59 = insertelement <2 x i32> %58, i32 %22, i64 1, !dbg !16
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !16
  %61 = fmul <2 x float> %60, %60, !dbg !17
  %62 = insertelement <2 x i1> poison, i1 %12, i64 0, !dbg !18
  %63 = shufflevector <2 x i1> %62, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !18
  %64 = select <2 x i1> %63, <2 x float> %61, <2 x float> zeroinitializer, !dbg !18
  %65 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !16
  %66 = insertelement <2 x i32> %65, i32 %54, i64 1, !dbg !16
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !16
  %68 = fmul <2 x float> %67, %67, !dbg !17
  %69 = insertelement <2 x i1> poison, i1 %51, i64 0, !dbg !18
  %70 = shufflevector <2 x i1> %69, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !18
  %71 = select <2 x i1> %70, <2 x float> %68, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !18
  %72 = fadd <2 x float> %64, %71, !dbg !18
  %73 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !16
  %74 = insertelement <2 x i32> %73, i32 %23, i64 1, !dbg !16
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !16
  %76 = fmul <2 x float> %75, %75, !dbg !17
  %77 = select <2 x i1> %63, <2 x float> %76, <2 x float> zeroinitializer, !dbg !18
  %78 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !16
  %79 = insertelement <2 x i32> %78, i32 %55, i64 1, !dbg !16
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !16
  %81 = fmul <2 x float> %80, %80, !dbg !17
  %82 = select <2 x i1> %70, <2 x float> %81, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !18
  %83 = fadd <2 x float> %77, %82, !dbg !18
  %84 = and i32 %7, 31, !dbg !10
  %85 = and i32 %8, 7, !dbg !10
  %shift = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %86 = fadd <2 x float> %72, %shift, !dbg !22
  %shift21 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %87 = fadd <2 x float> %shift21, %86, !dbg !22
  %88 = fadd <2 x float> %83, %87, !dbg !22
  %89 = extractelement <2 x float> %88, i64 0, !dbg !22
  %90 = fadd float %38, %89, !dbg !22
  %91 = fadd float %39, %90, !dbg !22
  %92 = fadd float %40, %91, !dbg !22
  %93 = fadd float %41, %92, !dbg !22
  %94 = bitcast float %93 to i32, !dbg !28
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !28
  %96 = bitcast i32 %95 to float, !dbg !28
  %97 = fadd float %93, %96, !dbg !22
  %98 = bitcast float %97 to i32, !dbg !28
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !28
  %100 = bitcast i32 %99 to float, !dbg !28
  %101 = fadd float %97, %100, !dbg !22
  %102 = bitcast float %101 to i32, !dbg !28
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !28
  %104 = bitcast i32 %103 to float, !dbg !28
  %105 = fadd float %101, %104, !dbg !22
  %106 = bitcast float %105 to i32, !dbg !28
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = fadd float %105, %108, !dbg !22
  %110 = bitcast float %109 to i32, !dbg !28
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = fadd float %109, %112, !dbg !22
  %114 = icmp eq i32 %84, 0, !dbg !28
  %115 = zext nneg i32 %85 to i64, !dbg !28
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i64 %115, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, float %113, i1 %114) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %117 = icmp slt i32 %7, 8, !dbg !28
  %118 = sext i32 %7 to i64, !dbg !28
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i64 %118, !dbg !28
  %120 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %119, i1 %117) #6, !dbg !28
  %121 = bitcast float %120 to i32, !dbg !28
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = fadd float %120, %123, !dbg !22
  %125 = bitcast float %124 to i32, !dbg !28
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !28
  %127 = bitcast i32 %126 to float, !dbg !28
  %128 = fadd float %124, %127, !dbg !22
  %129 = bitcast float %128 to i32, !dbg !28
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !28
  %131 = bitcast i32 %130 to float, !dbg !28
  %132 = fadd float %128, %131, !dbg !22
  %133 = and i32 %7, 7, !dbg !28
  %134 = icmp eq i32 %133, 0, !dbg !28
  %135 = and i1 %117, %134, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, float %132, i1 %135) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %136 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %137 = insertelement <1 x float> undef, float %136, i64 0, !dbg !30
  store <1 x float> %137, ptr addrspace(3) @global_smem, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %138 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !30
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 2.304000e+03) #6, !dbg !31
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 2.304000e+03) #6, !dbg !31
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 2.304000e+03) #6, !dbg !31
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 2.304000e+03) #6, !dbg !31
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 2.304000e+03) #6, !dbg !31
  %144 = fadd float %139, 0x3EE4F8B580000000, !dbg !32
  %145 = fadd float %140, 0x3EE4F8B580000000, !dbg !32
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %.not.i = icmp eq i32 %146, 0, !dbg !30
  br i1 %.not.i, label %149, label %147, !dbg !30

147:                                              ; preds = %6
  %148 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

149:                                              ; preds = %6
  %150 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

__nv_rsqrtf.exit:                                 ; preds = %147, %149
  %.0.i = phi float [ %148, %147 ], [ %150, %149 ], !dbg !30
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %.not.i2 = icmp eq i32 %151, 0, !dbg !30
  br i1 %.not.i2, label %154, label %152, !dbg !30

152:                                              ; preds = %__nv_rsqrtf.exit
  %153 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !30
  br label %__nv_rsqrtf.exit4, !dbg !30

154:                                              ; preds = %__nv_rsqrtf.exit
  %155 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !30
  br label %__nv_rsqrtf.exit4, !dbg !30

__nv_rsqrtf.exit4:                                ; preds = %152, %154
  %.0.i3 = phi float [ %153, %152 ], [ %155, %154 ], !dbg !30
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %159 = sext i32 %11 to i64, !dbg !34
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !34
  %161 = icmp eq i32 %urem, 0, !dbg !35
  %162 = bitcast float %.0.i to i32, !dbg !35
  %163 = and i1 %161, %12, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %160, i1 %163) #6, !dbg !35
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #6, !dbg !36
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !36
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !36
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !36
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !36
  %169 = bitcast i32 %165 to float, !dbg !36
  %170 = bitcast i32 %166 to float, !dbg !36
  %171 = bitcast i32 %167 to float, !dbg !36
  %172 = bitcast i32 %168 to float, !dbg !36
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #6, !dbg !36
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !36
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !36
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !36
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !36
  %178 = bitcast i32 %174 to float, !dbg !36
  %179 = bitcast i32 %175 to float, !dbg !36
  %180 = bitcast i32 %176 to float, !dbg !36
  %181 = bitcast i32 %177 to float, !dbg !36
  %182 = zext nneg i32 %9 to i64, !dbg !37
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %182, !dbg !37
  %184 = zext nneg i32 %10 to i64, !dbg !37
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !37
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %183, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !38
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !38
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !38
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !38
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !38
  %191 = bitcast i32 %187 to float, !dbg !38
  %192 = bitcast i32 %188 to float, !dbg !38
  %193 = bitcast i32 %189 to float, !dbg !38
  %194 = bitcast i32 %190 to float, !dbg !38
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %185, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !38
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !38
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !38
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !38
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !38
  %200 = bitcast i32 %196 to float, !dbg !38
  %201 = bitcast i32 %197 to float, !dbg !38
  %202 = bitcast i32 %198 to float, !dbg !38
  %203 = bitcast i32 %199 to float, !dbg !38
  %204 = fmul float %.0.i3, %169, !dbg !39
  %205 = fmul float %.0.i3, %170, !dbg !39
  %206 = fmul float %.0.i3, %171, !dbg !39
  %207 = fmul float %.0.i3, %172, !dbg !39
  %208 = fmul float %.0.i3, %178, !dbg !39
  %209 = fmul float %.0.i3, %179, !dbg !39
  %210 = fmul float %.0.i3, %180, !dbg !39
  %211 = fmul float %.0.i3, %181, !dbg !39
  %212 = fadd float %191, 1.000000e+00, !dbg !40
  %213 = fadd float %192, 1.000000e+00, !dbg !40
  %214 = fadd float %193, 1.000000e+00, !dbg !40
  %215 = fadd float %194, 1.000000e+00, !dbg !40
  %216 = fadd float %200, 1.000000e+00, !dbg !40
  %217 = fadd float %201, 1.000000e+00, !dbg !40
  %218 = fadd float %202, 1.000000e+00, !dbg !40
  %219 = fadd float %203, 1.000000e+00, !dbg !40
  %220 = fmul float %204, %212, !dbg !41
  %221 = fmul float %205, %213, !dbg !41
  %222 = fmul float %206, %214, !dbg !41
  %223 = fmul float %207, %215, !dbg !41
  %224 = fmul float %208, %216, !dbg !41
  %225 = fmul float %209, %217, !dbg !41
  %226 = fmul float %210, %218, !dbg !41
  %227 = fmul float %211, %219, !dbg !41
  %228 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !42
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !42
  %230 = bitcast float %220 to i32, !dbg !43
  %231 = bitcast float %221 to i32, !dbg !43
  %232 = bitcast float %222 to i32, !dbg !43
  %233 = bitcast float %223 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %230, i32 %231, i32 %232, i32 %233, ptr addrspace(1) %228, i1 %12) #6, !dbg !43
  %234 = bitcast float %224 to i32, !dbg !43
  %235 = bitcast float %225 to i32, !dbg !43
  %236 = bitcast float %226 to i32, !dbg !43
  %237 = bitcast float %227 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %234, i32 %235, i32 %236, i32 %237, ptr addrspace(1) %229, i1 %12) #6, !dbg !43
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #6, !dbg !36
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !36
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !36
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !36
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !36
  %243 = bitcast i32 %239 to float, !dbg !36
  %244 = bitcast i32 %240 to float, !dbg !36
  %245 = bitcast i32 %241 to float, !dbg !36
  %246 = bitcast i32 %242 to float, !dbg !36
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !36
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !36
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !36
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !36
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !36
  %252 = bitcast i32 %248 to float, !dbg !36
  %253 = bitcast i32 %249 to float, !dbg !36
  %254 = bitcast i32 %250 to float, !dbg !36
  %255 = bitcast i32 %251 to float, !dbg !36
  %256 = zext nneg i32 %42 to i64, !dbg !37
  %257 = getelementptr float, ptr addrspace(1) %2, i64 %256, !dbg !37
  %258 = zext nneg i32 %43 to i64, !dbg !37
  %259 = getelementptr float, ptr addrspace(1) %2, i64 %258, !dbg !37
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %257, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #6, !dbg !38
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !38
  %262 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !38
  %263 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !38
  %264 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !38
  %265 = bitcast i32 %261 to float, !dbg !38
  %266 = bitcast i32 %262 to float, !dbg !38
  %267 = bitcast i32 %263 to float, !dbg !38
  %268 = bitcast i32 %264 to float, !dbg !38
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %259, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !38
  %270 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !38
  %271 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !38
  %272 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !38
  %273 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !38
  %274 = bitcast i32 %270 to float, !dbg !38
  %275 = bitcast i32 %271 to float, !dbg !38
  %276 = bitcast i32 %272 to float, !dbg !38
  %277 = bitcast i32 %273 to float, !dbg !38
  %278 = fmul float %.0.i3, %243, !dbg !39
  %279 = fmul float %.0.i3, %244, !dbg !39
  %280 = fmul float %.0.i3, %245, !dbg !39
  %281 = fmul float %.0.i3, %246, !dbg !39
  %282 = fmul float %.0.i3, %252, !dbg !39
  %283 = fmul float %.0.i3, %253, !dbg !39
  %284 = fmul float %.0.i3, %254, !dbg !39
  %285 = fmul float %.0.i3, %255, !dbg !39
  %286 = fadd float %265, 1.000000e+00, !dbg !40
  %287 = fadd float %266, 1.000000e+00, !dbg !40
  %288 = fadd float %267, 1.000000e+00, !dbg !40
  %289 = fadd float %268, 1.000000e+00, !dbg !40
  %290 = fadd float %274, 1.000000e+00, !dbg !40
  %291 = fadd float %275, 1.000000e+00, !dbg !40
  %292 = fadd float %276, 1.000000e+00, !dbg !40
  %293 = fadd float %277, 1.000000e+00, !dbg !40
  %294 = fmul float %278, %286, !dbg !41
  %295 = fmul float %279, %287, !dbg !41
  %296 = fmul float %280, %288, !dbg !41
  %297 = fmul float %281, %289, !dbg !41
  %298 = fmul float %282, %290, !dbg !41
  %299 = fmul float %283, %291, !dbg !41
  %300 = fmul float %284, %292, !dbg !41
  %301 = fmul float %285, %293, !dbg !41
  %302 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !42
  %303 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !42
  %304 = bitcast float %294 to i32, !dbg !43
  %305 = bitcast float %295 to i32, !dbg !43
  %306 = bitcast float %296 to i32, !dbg !43
  %307 = bitcast float %297 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %304, i32 %305, i32 %306, i32 %307, ptr addrspace(1) %302, i1 %51) #6, !dbg !43
  %308 = bitcast float %298 to i32, !dbg !43
  %309 = bitcast float %299 to i32, !dbg !43
  %310 = bitcast float %300 to i32, !dbg !43
  %311 = bitcast float %301 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %308, i32 %309, i32 %310, i32 %311, ptr addrspace(1) %303, i1 false) #6, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ck46utf6qwqz4644bn2mlvdzvvjwr6nqpctizpic4jt7mecrhxj6.py", directory: "/tmp/torchinductor_zeus/k4")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 32, column: 22, scope: !7)
!18 = !DILocation(line: 35, column: 46, scope: !7)
!19 = !DILocation(line: 28, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 25, scope: !7)
!21 = !DILocation(line: 31, column: 59, scope: !7)
!22 = !DILocation(line: 233, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 243, column: 36, scope: !23, inlinedAt: !27)
!27 = !DILocation(line: 36, column: 25, scope: !23)
!28 = !DILocation(line: 243, column: 36, scope: !25, inlinedAt: !29)
!29 = !DILocation(line: 36, column: 25, scope: !25)
!30 = !DILocation(line: 41, column: 25, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 4, scope: !7)
!34 = !DILocation(line: 43, column: 28, scope: !7)
!35 = !DILocation(line: 43, column: 39, scope: !7)
!36 = !DILocation(line: 48, column: 52, scope: !7)
!37 = !DILocation(line: 49, column: 35, scope: !7)
!38 = !DILocation(line: 49, column: 40, scope: !7)
!39 = !DILocation(line: 50, column: 24, scope: !7)
!40 = !DILocation(line: 52, column: 24, scope: !7)
!41 = !DILocation(line: 53, column: 24, scope: !7)
!42 = !DILocation(line: 54, column: 29, scope: !7)
!43 = !DILocation(line: 54, column: 53, scope: !7)
!44 = !DILocation(line: 44, column: 4, scope: !7)
