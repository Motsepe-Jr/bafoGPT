; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = and i32 %9, 3, !dbg !8
  %urem = shl i32 %7, 2, !dbg !8
  %11 = and i32 %urem, 508, !dbg !8
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %13 = shl i32 %12, 9, !dbg !10
  %14 = or i32 %13, %11, !dbg !11
  %15 = sext i32 %14 to i64, !dbg !12
  %16 = getelementptr i16, ptr addrspace(1) %0, i64 %15, !dbg !12
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !13
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !13
  %20 = trunc i32 %18 to i16, !dbg !13
  %extelt.offset = lshr i32 %18, 16, !dbg !13
  %21 = trunc i32 %extelt.offset to i16, !dbg !13
  %22 = trunc i32 %19 to i16, !dbg !13
  %extelt.offset1 = lshr i32 %19, 16, !dbg !13
  %23 = trunc i32 %extelt.offset1 to i16, !dbg !13
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #3, !dbg !14
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #3, !dbg !14
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #3, !dbg !14
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #3, !dbg !14
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !16
  %34 = bitcast i32 %30 to float, !dbg !16
  %35 = bitcast i32 %31 to float, !dbg !16
  %36 = bitcast i32 %32 to float, !dbg !16
  %37 = bitcast i32 %33 to float, !dbg !16
  %38 = getelementptr i16, ptr addrspace(1) %2, i64 %15, !dbg !17
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !18
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !18
  %42 = trunc i32 %40 to i16, !dbg !18
  %extelt.offset2 = lshr i32 %40, 16, !dbg !18
  %43 = trunc i32 %extelt.offset2 to i16, !dbg !18
  %44 = trunc i32 %41 to i16, !dbg !18
  %extelt.offset3 = lshr i32 %41, 16, !dbg !18
  %45 = trunc i32 %extelt.offset3 to i16, !dbg !18
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #3, !dbg !19
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #3, !dbg !19
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #3, !dbg !19
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #3, !dbg !19
  %50 = fmul float %24, %34, !dbg !20
  %51 = fmul float %25, %35, !dbg !20
  %52 = fmul float %26, %36, !dbg !20
  %53 = fmul float %27, %37, !dbg !20
  %54 = fadd float %50, %51, !dbg !21
  %55 = fadd float %52, %54, !dbg !21
  %56 = fadd float %53, %55, !dbg !21
  %57 = bitcast float %56 to i32, !dbg !27
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 16, i32 31), !dbg !27
  %59 = bitcast i32 %58 to float, !dbg !27
  %60 = fadd float %56, %59, !dbg !21
  %61 = bitcast float %60 to i32, !dbg !27
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = fadd float %60, %63, !dbg !21
  %65 = bitcast float %64 to i32, !dbg !27
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 4, i32 31), !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = fadd float %64, %67, !dbg !21
  %69 = bitcast float %68 to i32, !dbg !27
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = fadd float %68, %71, !dbg !21
  %73 = bitcast float %72 to i32, !dbg !27
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !27
  %75 = bitcast i32 %74 to float, !dbg !27
  %76 = fadd float %72, %75, !dbg !21
  %77 = icmp eq i32 %8, 0, !dbg !27
  %78 = zext nneg i32 %10 to i64, !dbg !27
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i64 %78, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, float %76, i1 %77) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %80 = icmp slt i32 %7, 4, !dbg !27
  %81 = sext i32 %7 to i64, !dbg !27
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i64 %81, !dbg !27
  %83 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %82, i1 %80) #3, !dbg !27
  %84 = bitcast float %83 to i32, !dbg !27
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !27
  %86 = bitcast i32 %85 to float, !dbg !27
  %87 = fadd float %83, %86, !dbg !21
  %88 = bitcast float %87 to i32, !dbg !27
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !27
  %90 = bitcast i32 %89 to float, !dbg !27
  %91 = fadd float %87, %90, !dbg !21
  %92 = and i32 %7, 3, !dbg !27
  %93 = icmp eq i32 %92, 0, !dbg !27
  %94 = and i1 %80, %93, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, float %91, i1 %94) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %95 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  %96 = fadd float %95, 0.000000e+00, !dbg !29
  %97 = fmul float %96, %34, !dbg !33
  %98 = fmul float %96, %35, !dbg !33
  %99 = fmul float %96, %36, !dbg !33
  %100 = fmul float %96, %37, !dbg !33
  %101 = fsub float %50, %97, !dbg !34
  %102 = fsub float %51, %98, !dbg !34
  %103 = fsub float %52, %99, !dbg !34
  %104 = fsub float %53, %100, !dbg !34
  %105 = fmul float %101, 5.000000e+01, !dbg !35
  %106 = fmul float %102, 5.000000e+01, !dbg !35
  %107 = fmul float %103, 5.000000e+01, !dbg !35
  %108 = fmul float %104, 5.000000e+01, !dbg !35
  %109 = fmul float %46, %46, !dbg !36
  %110 = fmul float %47, %47, !dbg !36
  %111 = fmul float %48, %48, !dbg !36
  %112 = fmul float %49, %49, !dbg !36
  %113 = fsub float 1.000000e+00, %109, !dbg !37
  %114 = fsub float 1.000000e+00, %110, !dbg !37
  %115 = fsub float 1.000000e+00, %111, !dbg !37
  %116 = fsub float 1.000000e+00, %112, !dbg !37
  %117 = fmul float %113, %105, !dbg !38
  %118 = fmul float %114, %106, !dbg !38
  %119 = fmul float %115, %107, !dbg !38
  %120 = fmul float %116, %108, !dbg !38
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float 5.000000e+01) #3, !dbg !39
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 5.000000e+01) #3, !dbg !39
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float 5.000000e+01) #3, !dbg !39
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 5.000000e+01) #3, !dbg !39
  %125 = fmul float %121, 6.250000e-02, !dbg !40
  %126 = fmul float %122, 6.250000e-02, !dbg !40
  %127 = fmul float %123, 6.250000e-02, !dbg !40
  %128 = fmul float %124, 6.250000e-02, !dbg !40
  %129 = getelementptr i16, ptr addrspace(1) %3, i64 %15, !dbg !41
  %130 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %125) #3, !dbg !42
  %131 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %126) #3, !dbg !42
  %132 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %127) #3, !dbg !42
  %133 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %128) #3, !dbg !42
  %134 = insertelement <2 x i16> undef, i16 %130, i64 0, !dbg !42
  %135 = insertelement <2 x i16> %134, i16 %131, i64 1, !dbg !42
  %136 = bitcast <2 x i16> %135 to i32, !dbg !42
  %137 = insertelement <2 x i16> undef, i16 %132, i64 0, !dbg !42
  %138 = insertelement <2 x i16> %137, i16 %133, i64 1, !dbg !42
  %139 = bitcast <2 x i16> %138 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %136, i32 %139, ptr addrspace(1) %129, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "chi3wvm4bwarz2zgeivp6qz6uux3p6xgqdvzhtlaeei3fuwzuwog.py", directory: "/tmp/torchinductor_zeus/hi")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 26, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 30, column: 40, scope: !5)
!11 = !DILocation(line: 30, column: 36, scope: !5)
!12 = !DILocation(line: 30, column: 30, scope: !5)
!13 = !DILocation(line: 30, column: 46, scope: !5)
!14 = !DILocation(line: 30, column: 67, scope: !5)
!15 = !DILocation(line: 31, column: 30, scope: !5)
!16 = !DILocation(line: 31, column: 46, scope: !5)
!17 = !DILocation(line: 32, column: 31, scope: !5)
!18 = !DILocation(line: 32, column: 47, scope: !5)
!19 = !DILocation(line: 32, column: 68, scope: !5)
!20 = !DILocation(line: 34, column: 18, scope: !5)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !5, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 57, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 57, scope: !24)
!29 = !DILocation(line: 8, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !5, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor")
!32 = !DILocation(line: 37, column: 44, scope: !30)
!33 = !DILocation(line: 38, column: 18, scope: !5)
!34 = !DILocation(line: 39, column: 18, scope: !5)
!35 = !DILocation(line: 42, column: 20, scope: !5)
!36 = !DILocation(line: 45, column: 20, scope: !5)
!37 = !DILocation(line: 47, column: 20, scope: !5)
!38 = !DILocation(line: 48, column: 20, scope: !5)
!39 = !DILocation(line: 50, column: 20, scope: !5)
!40 = !DILocation(line: 52, column: 20, scope: !5)
!41 = !DILocation(line: 53, column: 25, scope: !5)
!42 = !DILocation(line: 53, column: 48, scope: !5)
!43 = !DILocation(line: 53, column: 4, scope: !5)
