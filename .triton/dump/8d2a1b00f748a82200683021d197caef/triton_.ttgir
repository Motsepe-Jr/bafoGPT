#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<512> : tensor<512xi32, #blocked>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %c512_i32 = arith.constant 512 : i32
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<512xf32, #blocked>
    %cst_2 = arith.constant dense<6.250000e-02> : tensor<512xf32, #blocked>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<512xf32, #blocked>
    %cst_4 = arith.constant dense<5.000000e+01> : tensor<512xf32, #blocked>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<512xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked>
    %2 = arith.cmpi slt, %1, %cst : tensor<512xi32, #blocked>
    %3 = arith.muli %0, %c512_i32 : i32
    %4 = tt.splat %3 : (i32) -> tensor<512xi32, #blocked>
    %5 = arith.addi %1, %4 : tensor<512xi32, #blocked>
    %6 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %7 = tt.addptr %6, %5 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %8 = tt.load %7, %2, %cst_5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %9 = arith.extf %8 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %10 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %11 = tt.addptr %10, %5 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi32, #blocked>
    %12 = tt.load %11, %2, %cst_1 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %13 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %14 = tt.addptr %13, %5 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %15 = tt.load %14, %2, %cst_5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %16 = arith.extf %15 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %17 = arith.mulf %9, %12 : tensor<512xf32, #blocked>
    %18 = arith.select %2, %17, %cst_1 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %19 = "tt.reduce"(%18) <{axis = 0 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %33 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %33 : f32
    }) : (tensor<512xf32, #blocked>) -> f32
    %20 = arith.addf %19, %cst_0 : f32
    %21 = tt.splat %20 : (f32) -> tensor<512xf32, #blocked>
    %22 = arith.mulf %12, %21 : tensor<512xf32, #blocked>
    %23 = arith.subf %17, %22 : tensor<512xf32, #blocked>
    %24 = arith.mulf %23, %cst_4 : tensor<512xf32, #blocked>
    %25 = arith.mulf %16, %16 : tensor<512xf32, #blocked>
    %26 = arith.subf %cst_3, %25 : tensor<512xf32, #blocked>
    %27 = arith.mulf %24, %26 : tensor<512xf32, #blocked>
    %28 = arith.divf %27, %cst_4 : tensor<512xf32, #blocked>
    %29 = arith.mulf %28, %cst_2 : tensor<512xf32, #blocked>
    %30 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %31 = tt.addptr %30, %5 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %32 = arith.truncf %29 : tensor<512xf32, #blocked> to tensor<512xbf16, #blocked>
    tt.store %31, %32, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<512xbf16, #blocked>
    tt.return
  }
}
