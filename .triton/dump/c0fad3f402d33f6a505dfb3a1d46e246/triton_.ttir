module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10d11de12de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x1024xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32>
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x1024xf32>
    %cst_4 = arith.constant dense<2304> : tensor<1x1024xi32>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c1024_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<1024xi32>) -> tensor<1x1024xi32>
    %5 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %6 = tt.splat %5 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %7 = tt.load %6, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %8 = arith.muli %0, %c2304_i32 : i32
    %9 = tt.splat %8 : (i32) -> tensor<1x1024xi32>
    %10 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %11 = tt.splat %1 : (i1) -> tensor<1x1024xi1>
    %12 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %13 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %14 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %15 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %16 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %17 = arith.divf %7, %cst_2 : tensor<1x1xf32>
    %18 = arith.addf %17, %cst_1 : tensor<1x1xf32>
    %19 = scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg14 = %cst_5) -> (tensor<1x1024xf32>)  : i32 {
      %54 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32>
      %55 = arith.addi %54, %4 : tensor<1x1024xi32>
      %56 = arith.cmpi slt, %55, %cst_4 : tensor<1x1024xi32>
      %57 = arith.addi %55, %9 : tensor<1x1024xi32>
      %58 = tt.addptr %10, %57 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %59 = arith.andi %56, %11 : tensor<1x1024xi1>
      %60 = tt.load %58, %59, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %61 = arith.extf %60 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %62 = tt.addptr %12, %57 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %63 = tt.load %62, %59, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %64 = arith.extf %63 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %65 = tt.addptr %13, %55 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %66 = tt.load %65, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %67 = tt.addptr %14, %57 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %68 = tt.load %67, %59, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %69 = arith.extf %68 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %70 = tt.addptr %15, %55 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %71 = tt.load %70, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %72 = tt.addptr %16, %57 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %73 = tt.load %72, %59, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %74 = arith.addf %61, %64 : tensor<1x1024xf32>
      %75 = arith.addf %66, %cst_3 : tensor<1x1024xf32>
      %76 = arith.mulf %74, %75 : tensor<1x1024xf32>
      %77 = tt.extern_elementwise %18 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %78 = tt.broadcast %77 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %79 = arith.mulf %69, %78 : tensor<1x1024xf32>
      %80 = arith.addf %71, %cst_3 : tensor<1x1024xf32>
      %81 = arith.mulf %79, %80 : tensor<1x1024xf32>
      %82 = arith.addf %81, %73 : tensor<1x1024xf32>
      %83 = arith.mulf %76, %82 : tensor<1x1024xf32>
      %84 = arith.addf %arg14, %83 : tensor<1x1024xf32>
      %85 = arith.select %59, %84, %arg14 : tensor<1x1024xi1>, tensor<1x1024xf32>
      scf.yield %85 : tensor<1x1024xf32>
    }
    %20 = "tt.reduce"(%19) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32, %arg14: f32):
      %54 = arith.addf %arg13, %arg14 : f32
      tt.reduce.return %54 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %21 = tt.expand_dims %20 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %22 = tt.addptr %arg8, %0 : !tt.ptr<f32, 1>, i32
    %23 = tt.splat %22 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %24 = tt.load %23, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %25 = arith.muli %0, %c2304_i32 : i32
    %26 = tt.splat %25 : (i32) -> tensor<1x1024xi32>
    %27 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %28 = tt.splat %1 : (i1) -> tensor<1x1024xi1>
    %29 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %30 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %31 = tt.splat %arg9 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %32 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %33 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %34 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %35 = arith.mulf %21, %cst_0 : tensor<1x1xf32>
    %36 = arith.divf %24, %cst_2 : tensor<1x1xf32>
    %37 = arith.addf %36, %cst_1 : tensor<1x1xf32>
    %38 = arith.divf %7, %cst_2 : tensor<1x1xf32>
    %39 = arith.addf %38, %cst_1 : tensor<1x1xf32>
    %40 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %41 = scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg14 = %cst_5) -> (tensor<1x1024xf32>)  : i32 {
      %54 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32>
      %55 = arith.addi %54, %4 : tensor<1x1024xi32>
      %56 = arith.cmpi slt, %55, %cst_4 : tensor<1x1024xi32>
      %57 = arith.addi %55, %26 : tensor<1x1024xi32>
      %58 = tt.addptr %27, %57 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %59 = arith.andi %56, %28 : tensor<1x1024xi1>
      %60 = tt.load %58, %59, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %61 = arith.extf %60 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %62 = tt.addptr %29, %55 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %63 = tt.load %62, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %64 = tt.addptr %30, %57 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %65 = tt.load %64, %59, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32>
      %66 = tt.addptr %31, %57 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %67 = tt.load %66, %59, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32>
      %68 = tt.addptr %32, %57 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %69 = tt.load %68, %59, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %70 = arith.extf %69 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %71 = tt.addptr %33, %57 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %72 = tt.load %71, %59, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %73 = arith.extf %72 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %74 = tt.addptr %34, %55 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %75 = tt.load %74, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %76 = tt.extern_elementwise %37 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %77 = arith.mulf %76, %76 : tensor<1x1xf32>
      %78 = arith.mulf %77, %76 : tensor<1x1xf32>
      %79 = arith.mulf %35, %78 : tensor<1x1xf32>
      %80 = arith.divf %79, %cst_2 : tensor<1x1xf32>
      %81 = tt.extern_elementwise %39 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %82 = tt.broadcast %81 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %83 = arith.mulf %61, %82 : tensor<1x1024xf32>
      %84 = arith.addf %63, %cst_3 : tensor<1x1024xf32>
      %85 = arith.mulf %83, %84 : tensor<1x1024xf32>
      %86 = arith.addf %85, %65 : tensor<1x1024xf32>
      %87 = tt.broadcast %80 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %88 = arith.mulf %87, %86 : tensor<1x1024xf32>
      %89 = arith.addf %70, %73 : tensor<1x1024xf32>
      %90 = arith.addf %75, %cst_3 : tensor<1x1024xf32>
      %91 = arith.mulf %89, %90 : tensor<1x1024xf32>
      %92 = tt.broadcast %76 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %93 = arith.mulf %91, %92 : tensor<1x1024xf32>
      %94 = arith.addf %67, %93 : tensor<1x1024xf32>
      %95 = arith.addf %94, %88 : tensor<1x1024xf32>
      %96 = arith.addf %95, %88 : tensor<1x1024xf32>
      %97 = arith.mulf %96, %84 : tensor<1x1024xf32>
      %98 = arith.mulf %97, %61 : tensor<1x1024xf32>
      %99 = arith.addf %arg14, %98 : tensor<1x1024xf32>
      %100 = arith.select %59, %99, %arg14 : tensor<1x1024xi1>, tensor<1x1024xf32>
      %101 = tt.addptr %40, %57 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      tt.store %101, %96, %59 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xf32>
      scf.yield %100 : tensor<1x1024xf32>
    }
    %42 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32, %arg14: f32):
      %54 = arith.addf %arg13, %arg14 : f32
      tt.reduce.return %54 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %43 = tt.expand_dims %42 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %44 = arith.muli %0, %c2304_i32 : i32
    %45 = tt.splat %44 : (i32) -> tensor<1x1024xi32>
    %46 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %47 = tt.splat %1 : (i1) -> tensor<1x1024xi1>
    %48 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %49 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %50 = arith.divf %7, %cst_2 : tensor<1x1xf32>
    %51 = arith.addf %50, %cst_1 : tensor<1x1xf32>
    %52 = arith.mulf %43, %cst_0 : tensor<1x1xf32>
    %53 = tt.splat %arg10 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32  : i32 {
      %54 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32>
      %55 = arith.addi %54, %4 : tensor<1x1024xi32>
      %56 = arith.cmpi slt, %55, %cst_4 : tensor<1x1024xi32>
      %57 = arith.addi %55, %45 : tensor<1x1024xi32>
      %58 = tt.addptr %46, %57 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %59 = arith.andi %56, %47 : tensor<1x1024xi1>
      %60 = tt.load %58, %59, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32>
      %61 = tt.addptr %48, %55 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %62 = tt.load %61, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %63 = tt.addptr %49, %57 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %64 = tt.load %63, %59, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %65 = arith.extf %64 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %66 = arith.addf %62, %cst_3 : tensor<1x1024xf32>
      %67 = arith.mulf %60, %66 : tensor<1x1024xf32>
      %68 = tt.extern_elementwise %51 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %69 = tt.broadcast %68 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %70 = arith.mulf %67, %69 : tensor<1x1024xf32>
      %71 = arith.mulf %68, %68 : tensor<1x1xf32>
      %72 = arith.mulf %71, %68 : tensor<1x1xf32>
      %73 = arith.mulf %52, %72 : tensor<1x1xf32>
      %74 = arith.divf %73, %cst_2 : tensor<1x1xf32>
      %75 = tt.broadcast %74 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %76 = arith.mulf %75, %65 : tensor<1x1024xf32>
      %77 = arith.addf %70, %76 : tensor<1x1024xf32>
      %78 = arith.addf %77, %76 : tensor<1x1024xf32>
      %79 = tt.addptr %53, %57 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %80 = arith.truncf %78 : tensor<1x1024xf32> to tensor<1x1024xbf16>
      tt.store %79, %80, %59 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xbf16>
    }
    tt.return
  }
}
