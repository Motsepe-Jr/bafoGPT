#blocked = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<256> : tensor<256x1xi32, #blocked>
    %cst_0 = arith.constant dense<256> : tensor<256x1xi32, #blocked1>
    %cst_1 = arith.constant dense<4> : tensor<256x1xi32, #blocked>
    %cst_2 = arith.constant dense<4> : tensor<256x1xi32, #blocked1>
    %cst_3 = arith.constant dense<256> : tensor<256x1xi64, #blocked>
    %cst_4 = arith.constant dense<128> : tensor<256x1xi32, #blocked>
    %cst_5 = arith.constant dense<-128> : tensor<256x1xi32, #blocked>
    %cst_6 = arith.constant dense<128> : tensor<256x1xi64, #blocked>
    %c2048_i32 = arith.constant 2048 : i32
    %c-512_i32 = arith.constant -512 : i32
    %c256_i32 = arith.constant 256 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c512_i32 = arith.constant 512 : i32
    %c1536_i32 = arith.constant 1536 : i32
    %c4_i32 = arith.constant 4 : i32
    %c16_i32 = arith.constant 16 : i32
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<256x1xf32, #blocked>
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<256x1xbf16, #blocked>
    %0 = tt.get_program_id y : i32
    %1 = arith.cmpi slt, %0, %c16_i32 : i32
    %2 = tt.get_program_id x : i32
    %3 = arith.muli %2, %c256_i32 : i32
    %4 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %5 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %6 = tt.expand_dims %4 {axis = 1 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<256x1xi32, #blocked>
    %7 = tt.expand_dims %5 {axis = 1 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<256x1xi32, #blocked1>
    %8 = tt.splat %3 : (i32) -> tensor<256x1xi32, #blocked>
    %9 = tt.splat %3 : (i32) -> tensor<256x1xi32, #blocked1>
    %10 = arith.addi %8, %6 : tensor<256x1xi32, #blocked>
    %11 = arith.addi %9, %7 : tensor<256x1xi32, #blocked1>
    %12 = arith.cmpi slt, %10, %cst : tensor<256x1xi32, #blocked>
    %13 = arith.cmpi slt, %11, %cst_0 : tensor<256x1xi32, #blocked1>
    %14 = arith.remsi %0, %c4_i32 : i32
    %15 = arith.divsi %0, %c4_i32 : i32
    %16 = arith.muli %10, %cst_1 : tensor<256x1xi32, #blocked>
    %17 = arith.muli %11, %cst_2 : tensor<256x1xi32, #blocked1>
    %18 = tt.splat %14 : (i32) -> tensor<256x1xi32, #blocked>
    %19 = tt.splat %14 : (i32) -> tensor<256x1xi32, #blocked1>
    %20 = arith.addi %18, %16 : tensor<256x1xi32, #blocked>
    %21 = arith.addi %19, %17 : tensor<256x1xi32, #blocked1>
    %22 = arith.muli %15, %c2048_i32 : i32
    %23 = tt.splat %22 : (i32) -> tensor<256x1xi32, #blocked>
    %24 = arith.addi %20, %23 : tensor<256x1xi32, #blocked>
    %25 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<256x1x!tt.ptr<bf16, 1>, #blocked>
    %26 = tt.addptr %25, %24 : tensor<256x1x!tt.ptr<bf16, 1>, #blocked>, tensor<256x1xi32, #blocked>
    %27 = tt.splat %1 : (i1) -> tensor<256x1xi1, #blocked>
    %28 = tt.splat %1 : (i1) -> tensor<256x1xi1, #blocked1>
    %29 = arith.andi %12, %27 : tensor<256x1xi1, #blocked>
    %30 = arith.andi %13, %28 : tensor<256x1xi1, #blocked1>
    %31 = tt.load %26, %29 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16, #blocked>
    %32 = arith.extf %31 : tensor<256x1xbf16, #blocked> to tensor<256x1xf32, #blocked>
    %33 = arith.muli %14, %c256_i32 : i32
    %34 = tt.splat %33 : (i32) -> tensor<256x1xi32, #blocked>
    %35 = arith.addi %10, %34 : tensor<256x1xi32, #blocked>
    %36 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<256x1x!tt.ptr<f32, 1>, #blocked>
    %37 = tt.addptr %36, %35 : tensor<256x1x!tt.ptr<f32, 1>, #blocked>, tensor<256x1xi32, #blocked>
    %38 = tt.load %37, %29 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xf32, #blocked>
    %39 = arith.addi %14, %c1024_i32 : i32
    %40 = tt.splat %39 : (i32) -> tensor<256x1xi32, #blocked>
    %41 = arith.addi %40, %16 : tensor<256x1xi32, #blocked>
    %42 = arith.addi %41, %23 : tensor<256x1xi32, #blocked>
    %43 = tt.addptr %25, %42 : tensor<256x1x!tt.ptr<bf16, 1>, #blocked>, tensor<256x1xi32, #blocked>
    %44 = tt.load %43, %29 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16, #blocked>
    %45 = arith.extf %44 : tensor<256x1xbf16, #blocked> to tensor<256x1xf32, #blocked>
    %46 = arith.extsi %10 : tensor<256x1xi32, #blocked> to tensor<256x1xi64, #blocked>
    %47 = arith.cmpi sge, %46, %cst_3 : tensor<256x1xi64, #blocked>
    %48 = arith.andi %47, %12 : tensor<256x1xi1, #blocked>
    %49 = arith.andi %48, %27 : tensor<256x1xi1, #blocked>
    %50 = tt.load %26, %49, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16, #blocked>
    %51 = arith.extf %50 : tensor<256x1xbf16, #blocked> to tensor<256x1xf32, #blocked>
    %52 = arith.select %47, %51, %cst_7 : tensor<256x1xi1, #blocked>, tensor<256x1xf32, #blocked>
    %53 = arith.mulf %32, %38 : tensor<256x1xf32, #blocked>
    %54 = arith.cmpi sge, %46, %cst_6 : tensor<256x1xi64, #blocked>
    %55 = arith.addi %14, %c-512_i32 : i32
    %56 = tt.splat %55 : (i32) -> tensor<256x1xi32, #blocked>
    %57 = arith.addi %56, %16 : tensor<256x1xi32, #blocked>
    %58 = arith.addi %57, %23 : tensor<256x1xi32, #blocked>
    %59 = tt.addptr %25, %58 : tensor<256x1x!tt.ptr<bf16, 1>, #blocked>, tensor<256x1xi32, #blocked>
    %60 = arith.andi %54, %12 : tensor<256x1xi1, #blocked>
    %61 = arith.andi %60, %27 : tensor<256x1xi1, #blocked>
    %62 = tt.load %59, %61, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16, #blocked>
    %63 = arith.extf %62 : tensor<256x1xbf16, #blocked> to tensor<256x1xf32, #blocked>
    %64 = arith.addi %10, %cst_5 : tensor<256x1xi32, #blocked>
    %65 = arith.addi %64, %34 : tensor<256x1xi32, #blocked>
    %66 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<256x1x!tt.ptr<f32, 1>, #blocked>
    %67 = tt.addptr %66, %65 : tensor<256x1x!tt.ptr<f32, 1>, #blocked>, tensor<256x1xi32, #blocked>
    %68 = tt.load %67, %61, %cst_7 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xf32, #blocked>
    %69 = arith.mulf %63, %68 : tensor<256x1xf32, #blocked>
    %70 = arith.subf %cst_7, %69 : tensor<256x1xf32, #blocked>
    %71 = arith.select %54, %70, %cst_7 : tensor<256x1xi1, #blocked>, tensor<256x1xf32, #blocked>
    %72 = arith.addf %53, %71 : tensor<256x1xf32, #blocked>
    %73 = arith.cmpi slt, %46, %cst_6 : tensor<256x1xi64, #blocked>
    %74 = arith.addi %14, %c512_i32 : i32
    %75 = tt.splat %74 : (i32) -> tensor<256x1xi32, #blocked>
    %76 = arith.addi %75, %16 : tensor<256x1xi32, #blocked>
    %77 = arith.addi %76, %23 : tensor<256x1xi32, #blocked>
    %78 = tt.addptr %25, %77 : tensor<256x1x!tt.ptr<bf16, 1>, #blocked>, tensor<256x1xi32, #blocked>
    %79 = arith.andi %73, %12 : tensor<256x1xi1, #blocked>
    %80 = arith.andi %79, %27 : tensor<256x1xi1, #blocked>
    %81 = tt.load %78, %80, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16, #blocked>
    %82 = arith.extf %81 : tensor<256x1xbf16, #blocked> to tensor<256x1xf32, #blocked>
    %83 = arith.addi %10, %cst_4 : tensor<256x1xi32, #blocked>
    %84 = arith.addi %83, %34 : tensor<256x1xi32, #blocked>
    %85 = tt.addptr %66, %84 : tensor<256x1x!tt.ptr<f32, 1>, #blocked>, tensor<256x1xi32, #blocked>
    %86 = tt.load %85, %80, %cst_7 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xf32, #blocked>
    %87 = arith.mulf %82, %86 : tensor<256x1xf32, #blocked>
    %88 = arith.select %73, %87, %cst_7 : tensor<256x1xi1, #blocked>, tensor<256x1xf32, #blocked>
    %89 = arith.addf %72, %88 : tensor<256x1xf32, #blocked>
    %90 = arith.addf %52, %89 : tensor<256x1xf32, #blocked>
    %91 = tt.load %43, %49, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16, #blocked>
    %92 = arith.extf %91 : tensor<256x1xbf16, #blocked> to tensor<256x1xf32, #blocked>
    %93 = arith.select %47, %92, %cst_7 : tensor<256x1xi1, #blocked>, tensor<256x1xf32, #blocked>
    %94 = arith.mulf %45, %38 : tensor<256x1xf32, #blocked>
    %95 = tt.load %78, %61, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16, #blocked>
    %96 = arith.extf %95 : tensor<256x1xbf16, #blocked> to tensor<256x1xf32, #blocked>
    %97 = arith.mulf %96, %68 : tensor<256x1xf32, #blocked>
    %98 = arith.subf %cst_7, %97 : tensor<256x1xf32, #blocked>
    %99 = arith.select %54, %98, %cst_7 : tensor<256x1xi1, #blocked>, tensor<256x1xf32, #blocked>
    %100 = arith.addf %94, %99 : tensor<256x1xf32, #blocked>
    %101 = arith.addi %14, %c1536_i32 : i32
    %102 = tt.splat %101 : (i32) -> tensor<256x1xi32, #blocked>
    %103 = arith.addi %102, %16 : tensor<256x1xi32, #blocked>
    %104 = arith.addi %103, %23 : tensor<256x1xi32, #blocked>
    %105 = tt.addptr %25, %104 : tensor<256x1x!tt.ptr<bf16, 1>, #blocked>, tensor<256x1xi32, #blocked>
    %106 = tt.load %105, %80, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x1xbf16, #blocked>
    %107 = arith.extf %106 : tensor<256x1xbf16, #blocked> to tensor<256x1xf32, #blocked>
    %108 = arith.mulf %107, %86 : tensor<256x1xf32, #blocked>
    %109 = arith.select %73, %108, %cst_7 : tensor<256x1xi1, #blocked>, tensor<256x1xf32, #blocked>
    %110 = arith.addf %100, %109 : tensor<256x1xf32, #blocked>
    %111 = arith.addf %93, %110 : tensor<256x1xf32, #blocked>
    %112 = arith.addf %90, %111 : tensor<256x1xf32, #blocked>
    %113 = arith.muli %15, %c1024_i32 : i32
    %114 = tt.splat %113 : (i32) -> tensor<256x1xi32, #blocked1>
    %115 = arith.addi %21, %114 : tensor<256x1xi32, #blocked1>
    %116 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<256x1x!tt.ptr<f32, 1>, #blocked1>
    %117 = tt.addptr %116, %115 : tensor<256x1x!tt.ptr<f32, 1>, #blocked1>, tensor<256x1xi32, #blocked1>
    %118 = triton_gpu.convert_layout %112 : (tensor<256x1xf32, #blocked>) -> tensor<256x1xf32, #blocked1>
    tt.store %117, %118, %30 {cache = 1 : i32, evict = 1 : i32} : tensor<256x1xf32, #blocked1>
    tt.return
  }
}
