; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = shl i32 %7, 3, !dbg !8
  %9 = and i32 %8, 1016, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %11 = shl i32 %10, 10, !dbg !10
  %12 = or i32 %11, %9, !dbg !11
  %13 = or i32 %12, 1, !dbg !11
  %14 = or i32 %12, 2, !dbg !11
  %15 = or i32 %12, 3, !dbg !11
  %16 = or i32 %12, 4, !dbg !11
  %17 = or i32 %12, 5, !dbg !11
  %18 = or i32 %12, 6, !dbg !11
  %19 = or i32 %12, 7, !dbg !11
  %20 = insertelement <8 x i32> poison, i32 %19, i64 0, !dbg !12
  %21 = insertelement <8 x i32> %20, i32 %18, i64 1, !dbg !12
  %22 = insertelement <8 x i32> %21, i32 %17, i64 2, !dbg !12
  %23 = insertelement <8 x i32> %22, i32 %16, i64 3, !dbg !12
  %24 = insertelement <8 x i32> %23, i32 %15, i64 4, !dbg !12
  %25 = insertelement <8 x i32> %24, i32 %14, i64 5, !dbg !12
  %26 = insertelement <8 x i32> %25, i32 %13, i64 6, !dbg !12
  %27 = insertelement <8 x i32> %26, i32 %12, i64 7, !dbg !12
  %28 = srem <8 x i32> %27, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>, !dbg !12
  %29 = sdiv i32 %12, 256, !dbg !13
  %30 = srem i32 %29, 2048, !dbg !14
  %.frozen = freeze i32 %12
  %31 = sdiv i32 %.frozen, 524288, !dbg !15
  %32 = mul i32 %31, 524288
  %.decomposed = sub i32 %.frozen, %32
  %33 = srem i32 %13, 524288, !dbg !16
  %34 = srem i32 %14, 524288, !dbg !16
  %35 = srem i32 %15, 524288, !dbg !16
  %36 = srem i32 %16, 524288, !dbg !16
  %37 = srem i32 %17, 524288, !dbg !16
  %38 = srem i32 %18, 524288, !dbg !16
  %39 = srem i32 %19, 524288, !dbg !16
  %40 = sdiv i32 %12, 1048576, !dbg !17
  %41 = shl nsw i32 %40, 10, !dbg !18
  %42 = shl nsw i32 %30, 12, !dbg !19
  %43 = add nsw i32 %42, %41, !dbg !20
  %44 = or i32 %43, 512, !dbg !21
  %45 = extractelement <8 x i32> %28, i64 7, !dbg !22
  %46 = add nsw i32 %44, %45, !dbg !23
  %47 = extractelement <8 x i32> %28, i64 6, !dbg !22
  %48 = add nsw i32 %44, %47, !dbg !23
  %49 = extractelement <8 x i32> %28, i64 5, !dbg !22
  %50 = add nsw i32 %44, %49, !dbg !23
  %51 = extractelement <8 x i32> %28, i64 4, !dbg !22
  %52 = add nsw i32 %44, %51, !dbg !23
  %53 = extractelement <8 x i32> %28, i64 3, !dbg !22
  %54 = add nsw i32 %44, %53, !dbg !23
  %55 = extractelement <8 x i32> %28, i64 2, !dbg !22
  %56 = add nsw i32 %44, %55, !dbg !23
  %57 = extractelement <8 x i32> %28, i64 1, !dbg !22
  %58 = add nsw i32 %44, %57, !dbg !23
  %59 = extractelement <8 x i32> %28, i64 0, !dbg !22
  %60 = add nsw i32 %44, %59, !dbg !23
  %61 = sext i32 %46 to i64, !dbg !24
  %62 = getelementptr i16, ptr addrspace(1) %0, i64 %61, !dbg !24
  %63 = sext i32 %48 to i64, !dbg !24
  %64 = getelementptr i16, ptr addrspace(1) %0, i64 %63, !dbg !24
  %65 = sext i32 %50 to i64, !dbg !24
  %66 = getelementptr i16, ptr addrspace(1) %0, i64 %65, !dbg !24
  %67 = sext i32 %52 to i64, !dbg !24
  %68 = getelementptr i16, ptr addrspace(1) %0, i64 %67, !dbg !24
  %69 = sext i32 %54 to i64, !dbg !24
  %70 = getelementptr i16, ptr addrspace(1) %0, i64 %69, !dbg !24
  %71 = sext i32 %56 to i64, !dbg !24
  %72 = getelementptr i16, ptr addrspace(1) %0, i64 %71, !dbg !24
  %73 = sext i32 %58 to i64, !dbg !24
  %74 = getelementptr i16, ptr addrspace(1) %0, i64 %73, !dbg !24
  %75 = sext i32 %60 to i64, !dbg !24
  %76 = getelementptr i16, ptr addrspace(1) %0, i64 %75, !dbg !24
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %62, i1 true, i16 0, i1 true) #1, !dbg !25
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %64, i1 true, i16 0, i1 true) #1, !dbg !25
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %66, i1 true, i16 0, i1 true) #1, !dbg !25
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %68, i1 true, i16 0, i1 true) #1, !dbg !25
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %70, i1 true, i16 0, i1 true) #1, !dbg !25
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %72, i1 true, i16 0, i1 true) #1, !dbg !25
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %74, i1 true, i16 0, i1 true) #1, !dbg !25
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %76, i1 true, i16 0, i1 true) #1, !dbg !25
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #1, !dbg !26
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #1, !dbg !26
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #1, !dbg !26
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #1, !dbg !26
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #1, !dbg !26
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #1, !dbg !26
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #1, !dbg !26
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #1, !dbg !26
  %93 = sext i32 %.decomposed to i64, !dbg !27
  %94 = getelementptr i16, ptr addrspace(1) %1, i64 %93, !dbg !27
  %95 = sext i32 %33 to i64, !dbg !27
  %96 = getelementptr i16, ptr addrspace(1) %1, i64 %95, !dbg !27
  %97 = sext i32 %34 to i64, !dbg !27
  %98 = getelementptr i16, ptr addrspace(1) %1, i64 %97, !dbg !27
  %99 = sext i32 %35 to i64, !dbg !27
  %100 = getelementptr i16, ptr addrspace(1) %1, i64 %99, !dbg !27
  %101 = sext i32 %36 to i64, !dbg !27
  %102 = getelementptr i16, ptr addrspace(1) %1, i64 %101, !dbg !27
  %103 = sext i32 %37 to i64, !dbg !27
  %104 = getelementptr i16, ptr addrspace(1) %1, i64 %103, !dbg !27
  %105 = sext i32 %38 to i64, !dbg !27
  %106 = getelementptr i16, ptr addrspace(1) %1, i64 %105, !dbg !27
  %107 = sext i32 %39 to i64, !dbg !27
  %108 = getelementptr i16, ptr addrspace(1) %1, i64 %107, !dbg !27
  %109 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %94, i1 true, i16 0, i1 true) #1, !dbg !28
  %110 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %96, i1 true, i16 0, i1 true) #1, !dbg !28
  %111 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %98, i1 true, i16 0, i1 true) #1, !dbg !28
  %112 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %100, i1 true, i16 0, i1 true) #1, !dbg !28
  %113 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %102, i1 true, i16 0, i1 true) #1, !dbg !28
  %114 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %104, i1 true, i16 0, i1 true) #1, !dbg !28
  %115 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %106, i1 true, i16 0, i1 true) #1, !dbg !28
  %116 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %108, i1 true, i16 0, i1 true) #1, !dbg !28
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %109) #1, !dbg !29
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #1, !dbg !29
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %111) #1, !dbg !29
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #1, !dbg !29
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #1, !dbg !29
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #1, !dbg !29
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #1, !dbg !29
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #1, !dbg !29
  %125 = fmul float %85, %117, !dbg !30
  %126 = fmul float %86, %118, !dbg !30
  %127 = fmul float %87, %119, !dbg !30
  %128 = fmul float %88, %120, !dbg !30
  %129 = fmul float %89, %121, !dbg !30
  %130 = fmul float %90, %122, !dbg !30
  %131 = fmul float %91, %123, !dbg !30
  %132 = fmul float %92, %124, !dbg !30
  %133 = icmp slt <8 x i32> %28, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>, !dbg !31
  %134 = or i32 %43, 640, !dbg !32
  %135 = add nsw i32 %134, %45, !dbg !33
  %136 = add nsw i32 %134, %47, !dbg !33
  %137 = add nsw i32 %134, %49, !dbg !33
  %138 = add nsw i32 %134, %51, !dbg !33
  %139 = add nsw i32 %134, %53, !dbg !33
  %140 = add nsw i32 %134, %55, !dbg !33
  %141 = add nsw i32 %134, %57, !dbg !33
  %142 = add nsw i32 %134, %59, !dbg !33
  %143 = sext i32 %135 to i64, !dbg !34
  %144 = getelementptr i16, ptr addrspace(1) %0, i64 %143, !dbg !34
  %145 = sext i32 %136 to i64, !dbg !34
  %146 = getelementptr i16, ptr addrspace(1) %0, i64 %145, !dbg !34
  %147 = sext i32 %137 to i64, !dbg !34
  %148 = getelementptr i16, ptr addrspace(1) %0, i64 %147, !dbg !34
  %149 = sext i32 %138 to i64, !dbg !34
  %150 = getelementptr i16, ptr addrspace(1) %0, i64 %149, !dbg !34
  %151 = sext i32 %139 to i64, !dbg !34
  %152 = getelementptr i16, ptr addrspace(1) %0, i64 %151, !dbg !34
  %153 = sext i32 %140 to i64, !dbg !34
  %154 = getelementptr i16, ptr addrspace(1) %0, i64 %153, !dbg !34
  %155 = sext i32 %141 to i64, !dbg !34
  %156 = getelementptr i16, ptr addrspace(1) %0, i64 %155, !dbg !34
  %157 = sext i32 %142 to i64, !dbg !34
  %158 = getelementptr i16, ptr addrspace(1) %0, i64 %157, !dbg !34
  %159 = extractelement <8 x i1> %133, i64 7, !dbg !35
  %160 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %144, i1 %159, i16 0, i1 %159) #1, !dbg !36
  %161 = extractelement <8 x i1> %133, i64 6, !dbg !35
  %162 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %146, i1 %161, i16 0, i1 %161) #1, !dbg !36
  %163 = extractelement <8 x i1> %133, i64 5, !dbg !35
  %164 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %148, i1 %163, i16 0, i1 %163) #1, !dbg !36
  %165 = extractelement <8 x i1> %133, i64 4, !dbg !35
  %166 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %150, i1 %165, i16 0, i1 %165) #1, !dbg !36
  %167 = extractelement <8 x i1> %133, i64 3, !dbg !35
  %168 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %152, i1 %167, i16 0, i1 %167) #1, !dbg !36
  %169 = extractelement <8 x i1> %133, i64 2, !dbg !35
  %170 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %154, i1 %169, i16 0, i1 %169) #1, !dbg !36
  %171 = extractelement <8 x i1> %133, i64 1, !dbg !35
  %172 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %156, i1 %171, i16 0, i1 %171) #1, !dbg !36
  %173 = extractelement <8 x i1> %133, i64 0, !dbg !35
  %174 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %158, i1 %173, i16 0, i1 %173) #1, !dbg !36
  %175 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %160) #1, !dbg !37
  %176 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %162) #1, !dbg !37
  %177 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %164) #1, !dbg !37
  %178 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %166) #1, !dbg !37
  %179 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %168) #1, !dbg !37
  %180 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %170) #1, !dbg !37
  %181 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %172) #1, !dbg !37
  %182 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %174) #1, !dbg !37
  %183 = fsub float 0.000000e+00, %175, !dbg !38
  %184 = fsub float 0.000000e+00, %176, !dbg !38
  %185 = fsub float 0.000000e+00, %177, !dbg !38
  %186 = fsub float 0.000000e+00, %178, !dbg !38
  %187 = fsub float 0.000000e+00, %179, !dbg !38
  %188 = fsub float 0.000000e+00, %180, !dbg !38
  %189 = fsub float 0.000000e+00, %181, !dbg !38
  %190 = fsub float 0.000000e+00, %182, !dbg !38
  %191 = icmp sgt i32 %45, 127, !dbg !39
  %192 = icmp sgt i32 %47, 127, !dbg !39
  %193 = icmp sgt i32 %49, 127, !dbg !39
  %194 = icmp sgt i32 %51, 127, !dbg !39
  %195 = icmp sgt i32 %53, 127, !dbg !39
  %196 = icmp sgt i32 %55, 127, !dbg !39
  %197 = icmp sgt i32 %57, 127, !dbg !39
  %198 = icmp sgt i32 %59, 127, !dbg !39
  %199 = or i32 %43, 384, !dbg !40
  %200 = add nsw i32 %199, %45, !dbg !41
  %201 = add nsw i32 %199, %47, !dbg !41
  %202 = add nsw i32 %199, %49, !dbg !41
  %203 = add nsw i32 %199, %51, !dbg !41
  %204 = add nsw i32 %199, %53, !dbg !41
  %205 = add nsw i32 %199, %55, !dbg !41
  %206 = add nsw i32 %199, %57, !dbg !41
  %207 = add nsw i32 %199, %59, !dbg !41
  %208 = sext i32 %200 to i64, !dbg !42
  %209 = getelementptr i16, ptr addrspace(1) %0, i64 %208, !dbg !42
  %210 = sext i32 %201 to i64, !dbg !42
  %211 = getelementptr i16, ptr addrspace(1) %0, i64 %210, !dbg !42
  %212 = sext i32 %202 to i64, !dbg !42
  %213 = getelementptr i16, ptr addrspace(1) %0, i64 %212, !dbg !42
  %214 = sext i32 %203 to i64, !dbg !42
  %215 = getelementptr i16, ptr addrspace(1) %0, i64 %214, !dbg !42
  %216 = sext i32 %204 to i64, !dbg !42
  %217 = getelementptr i16, ptr addrspace(1) %0, i64 %216, !dbg !42
  %218 = sext i32 %205 to i64, !dbg !42
  %219 = getelementptr i16, ptr addrspace(1) %0, i64 %218, !dbg !42
  %220 = sext i32 %206 to i64, !dbg !42
  %221 = getelementptr i16, ptr addrspace(1) %0, i64 %220, !dbg !42
  %222 = sext i32 %207 to i64, !dbg !42
  %223 = getelementptr i16, ptr addrspace(1) %0, i64 %222, !dbg !42
  %224 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %209, i1 %191, i16 0, i1 %191) #1, !dbg !43
  %225 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %211, i1 %192, i16 0, i1 %192) #1, !dbg !43
  %226 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %213, i1 %193, i16 0, i1 %193) #1, !dbg !43
  %227 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %215, i1 %194, i16 0, i1 %194) #1, !dbg !43
  %228 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %217, i1 %195, i16 0, i1 %195) #1, !dbg !43
  %229 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %219, i1 %196, i16 0, i1 %196) #1, !dbg !43
  %230 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %221, i1 %197, i16 0, i1 %197) #1, !dbg !43
  %231 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %223, i1 %198, i16 0, i1 %198) #1, !dbg !43
  %232 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %224) #1, !dbg !44
  %233 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %225) #1, !dbg !44
  %234 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #1, !dbg !44
  %235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %227) #1, !dbg !44
  %236 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #1, !dbg !44
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %229) #1, !dbg !44
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %230) #1, !dbg !44
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #1, !dbg !44
  %240 = select i1 %191, float %232, float 0.000000e+00, !dbg !45
  %241 = select i1 %192, float %233, float 0.000000e+00, !dbg !45
  %242 = select i1 %193, float %234, float 0.000000e+00, !dbg !45
  %243 = select i1 %194, float %235, float 0.000000e+00, !dbg !45
  %244 = select i1 %195, float %236, float 0.000000e+00, !dbg !45
  %245 = select i1 %196, float %237, float 0.000000e+00, !dbg !45
  %246 = select i1 %197, float %238, float 0.000000e+00, !dbg !45
  %247 = select i1 %198, float %239, float 0.000000e+00, !dbg !45
  %248 = select i1 %159, float %183, float %240, !dbg !35
  %249 = select i1 %161, float %184, float %241, !dbg !35
  %250 = select i1 %163, float %185, float %242, !dbg !35
  %251 = select i1 %165, float %186, float %243, !dbg !35
  %252 = select i1 %167, float %187, float %244, !dbg !35
  %253 = select i1 %169, float %188, float %245, !dbg !35
  %254 = select i1 %171, float %189, float %246, !dbg !35
  %255 = select i1 %173, float %190, float %247, !dbg !35
  %256 = getelementptr i16, ptr addrspace(1) %2, i64 %93, !dbg !46
  %257 = getelementptr i16, ptr addrspace(1) %2, i64 %95, !dbg !46
  %258 = getelementptr i16, ptr addrspace(1) %2, i64 %97, !dbg !46
  %259 = getelementptr i16, ptr addrspace(1) %2, i64 %99, !dbg !46
  %260 = getelementptr i16, ptr addrspace(1) %2, i64 %101, !dbg !46
  %261 = getelementptr i16, ptr addrspace(1) %2, i64 %103, !dbg !46
  %262 = getelementptr i16, ptr addrspace(1) %2, i64 %105, !dbg !46
  %263 = getelementptr i16, ptr addrspace(1) %2, i64 %107, !dbg !46
  %264 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %256, i1 true, i16 0, i1 true) #1, !dbg !47
  %265 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %257, i1 true, i16 0, i1 true) #1, !dbg !47
  %266 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %258, i1 true, i16 0, i1 true) #1, !dbg !47
  %267 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %259, i1 true, i16 0, i1 true) #1, !dbg !47
  %268 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %260, i1 true, i16 0, i1 true) #1, !dbg !47
  %269 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %261, i1 true, i16 0, i1 true) #1, !dbg !47
  %270 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %262, i1 true, i16 0, i1 true) #1, !dbg !47
  %271 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %263, i1 true, i16 0, i1 true) #1, !dbg !47
  %272 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %264) #1, !dbg !48
  %273 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #1, !dbg !48
  %274 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #1, !dbg !48
  %275 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #1, !dbg !48
  %276 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #1, !dbg !48
  %277 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %269) #1, !dbg !48
  %278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %270) #1, !dbg !48
  %279 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %271) #1, !dbg !48
  %280 = fmul float %248, %272, !dbg !49
  %281 = fmul float %249, %273, !dbg !49
  %282 = fmul float %250, %274, !dbg !49
  %283 = fmul float %251, %275, !dbg !49
  %284 = fmul float %252, %276, !dbg !49
  %285 = fmul float %253, %277, !dbg !49
  %286 = fmul float %254, %278, !dbg !49
  %287 = fmul float %255, %279, !dbg !49
  %288 = fadd float %125, %280, !dbg !50
  %289 = fadd float %126, %281, !dbg !50
  %290 = fadd float %127, %282, !dbg !50
  %291 = fadd float %128, %283, !dbg !50
  %292 = fadd float %129, %284, !dbg !50
  %293 = fadd float %130, %285, !dbg !50
  %294 = fadd float %131, %286, !dbg !50
  %295 = fadd float %132, %287, !dbg !50
  %.lhs.trunc = trunc i32 %31 to i16, !dbg !51
  %296 = srem i16 %.lhs.trunc, 2, !dbg !51
  %.sext = sext i16 %296 to i32, !dbg !51
  %297 = shl nsw i32 %.sext, 8, !dbg !52
  %298 = add nsw i32 %43, %45, !dbg !53
  %299 = add nsw i32 %298, %297, !dbg !54
  %300 = add nsw i32 %43, %47, !dbg !53
  %301 = add nsw i32 %300, %297, !dbg !54
  %302 = add nsw i32 %43, %49, !dbg !53
  %303 = add nsw i32 %302, %297, !dbg !54
  %304 = add nsw i32 %43, %51, !dbg !53
  %305 = add nsw i32 %304, %297, !dbg !54
  %306 = add nsw i32 %43, %53, !dbg !53
  %307 = add nsw i32 %306, %297, !dbg !54
  %308 = add nsw i32 %43, %55, !dbg !53
  %309 = add nsw i32 %308, %297, !dbg !54
  %310 = add nsw i32 %43, %57, !dbg !53
  %311 = add nsw i32 %310, %297, !dbg !54
  %312 = add nsw i32 %43, %59, !dbg !53
  %313 = add nsw i32 %312, %297, !dbg !54
  %314 = sext i32 %299 to i64, !dbg !55
  %315 = getelementptr i16, ptr addrspace(1) %0, i64 %314, !dbg !55
  %316 = sext i32 %301 to i64, !dbg !55
  %317 = getelementptr i16, ptr addrspace(1) %0, i64 %316, !dbg !55
  %318 = sext i32 %303 to i64, !dbg !55
  %319 = getelementptr i16, ptr addrspace(1) %0, i64 %318, !dbg !55
  %320 = sext i32 %305 to i64, !dbg !55
  %321 = getelementptr i16, ptr addrspace(1) %0, i64 %320, !dbg !55
  %322 = sext i32 %307 to i64, !dbg !55
  %323 = getelementptr i16, ptr addrspace(1) %0, i64 %322, !dbg !55
  %324 = sext i32 %309 to i64, !dbg !55
  %325 = getelementptr i16, ptr addrspace(1) %0, i64 %324, !dbg !55
  %326 = sext i32 %311 to i64, !dbg !55
  %327 = getelementptr i16, ptr addrspace(1) %0, i64 %326, !dbg !55
  %328 = sext i32 %313 to i64, !dbg !55
  %329 = getelementptr i16, ptr addrspace(1) %0, i64 %328, !dbg !55
  %330 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %315, i1 true, i16 0, i1 true) #1, !dbg !56
  %331 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %317, i1 true, i16 0, i1 true) #1, !dbg !56
  %332 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %319, i1 true, i16 0, i1 true) #1, !dbg !56
  %333 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %321, i1 true, i16 0, i1 true) #1, !dbg !56
  %334 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %323, i1 true, i16 0, i1 true) #1, !dbg !56
  %335 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %325, i1 true, i16 0, i1 true) #1, !dbg !56
  %336 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %327, i1 true, i16 0, i1 true) #1, !dbg !56
  %337 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %329, i1 true, i16 0, i1 true) #1, !dbg !56
  %338 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %330) #1, !dbg !57
  %339 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %331) #1, !dbg !57
  %340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %332) #1, !dbg !57
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %333) #1, !dbg !57
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %334) #1, !dbg !57
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %335) #1, !dbg !57
  %344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %336) #1, !dbg !57
  %345 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #1, !dbg !57
  %346 = fmul float %117, %338, !dbg !58
  %347 = fmul float %118, %339, !dbg !58
  %348 = fmul float %119, %340, !dbg !58
  %349 = fmul float %120, %341, !dbg !58
  %350 = fmul float %121, %342, !dbg !58
  %351 = fmul float %122, %343, !dbg !58
  %352 = fmul float %123, %344, !dbg !58
  %353 = fmul float %124, %345, !dbg !58
  %354 = or i32 %43, 128, !dbg !59
  %355 = add nsw i32 %354, %45, !dbg !60
  %356 = add nsw i32 %355, %297, !dbg !61
  %357 = add nsw i32 %354, %47, !dbg !60
  %358 = add nsw i32 %357, %297, !dbg !61
  %359 = add nsw i32 %354, %49, !dbg !60
  %360 = add nsw i32 %359, %297, !dbg !61
  %361 = add nsw i32 %354, %51, !dbg !60
  %362 = add nsw i32 %361, %297, !dbg !61
  %363 = add nsw i32 %354, %53, !dbg !60
  %364 = add nsw i32 %363, %297, !dbg !61
  %365 = add nsw i32 %354, %55, !dbg !60
  %366 = add nsw i32 %365, %297, !dbg !61
  %367 = add nsw i32 %354, %57, !dbg !60
  %368 = add nsw i32 %367, %297, !dbg !61
  %369 = add nsw i32 %354, %59, !dbg !60
  %370 = add nsw i32 %369, %297, !dbg !61
  %371 = sext i32 %356 to i64, !dbg !62
  %372 = getelementptr i16, ptr addrspace(1) %0, i64 %371, !dbg !62
  %373 = sext i32 %358 to i64, !dbg !62
  %374 = getelementptr i16, ptr addrspace(1) %0, i64 %373, !dbg !62
  %375 = sext i32 %360 to i64, !dbg !62
  %376 = getelementptr i16, ptr addrspace(1) %0, i64 %375, !dbg !62
  %377 = sext i32 %362 to i64, !dbg !62
  %378 = getelementptr i16, ptr addrspace(1) %0, i64 %377, !dbg !62
  %379 = sext i32 %364 to i64, !dbg !62
  %380 = getelementptr i16, ptr addrspace(1) %0, i64 %379, !dbg !62
  %381 = sext i32 %366 to i64, !dbg !62
  %382 = getelementptr i16, ptr addrspace(1) %0, i64 %381, !dbg !62
  %383 = sext i32 %368 to i64, !dbg !62
  %384 = getelementptr i16, ptr addrspace(1) %0, i64 %383, !dbg !62
  %385 = sext i32 %370 to i64, !dbg !62
  %386 = getelementptr i16, ptr addrspace(1) %0, i64 %385, !dbg !62
  %387 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %372, i1 %159, i16 0, i1 %159) #1, !dbg !63
  %388 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %374, i1 %161, i16 0, i1 %161) #1, !dbg !63
  %389 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %376, i1 %163, i16 0, i1 %163) #1, !dbg !63
  %390 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %378, i1 %165, i16 0, i1 %165) #1, !dbg !63
  %391 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %380, i1 %167, i16 0, i1 %167) #1, !dbg !63
  %392 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %382, i1 %169, i16 0, i1 %169) #1, !dbg !63
  %393 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %384, i1 %171, i16 0, i1 %171) #1, !dbg !63
  %394 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %386, i1 %173, i16 0, i1 %173) #1, !dbg !63
  %395 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %387) #1, !dbg !64
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %388) #1, !dbg !64
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %389) #1, !dbg !64
  %398 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %390) #1, !dbg !64
  %399 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %391) #1, !dbg !64
  %400 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %392) #1, !dbg !64
  %401 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %393) #1, !dbg !64
  %402 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %394) #1, !dbg !64
  %403 = fsub float 0.000000e+00, %395, !dbg !65
  %404 = fsub float 0.000000e+00, %396, !dbg !65
  %405 = fsub float 0.000000e+00, %397, !dbg !65
  %406 = fsub float 0.000000e+00, %398, !dbg !65
  %407 = fsub float 0.000000e+00, %399, !dbg !65
  %408 = fsub float 0.000000e+00, %400, !dbg !65
  %409 = fsub float 0.000000e+00, %401, !dbg !65
  %410 = fsub float 0.000000e+00, %402, !dbg !65
  %411 = add nsw i32 %43, -128, !dbg !66
  %412 = add nsw i32 %411, %45, !dbg !22
  %413 = add nsw i32 %412, %297, !dbg !67
  %414 = add nsw i32 %411, %47, !dbg !22
  %415 = add nsw i32 %414, %297, !dbg !67
  %416 = add nsw i32 %411, %49, !dbg !22
  %417 = add nsw i32 %416, %297, !dbg !67
  %418 = add nsw i32 %411, %51, !dbg !22
  %419 = add nsw i32 %418, %297, !dbg !67
  %420 = add nsw i32 %411, %53, !dbg !22
  %421 = add nsw i32 %420, %297, !dbg !67
  %422 = add nsw i32 %411, %55, !dbg !22
  %423 = add nsw i32 %422, %297, !dbg !67
  %424 = add nsw i32 %411, %57, !dbg !22
  %425 = add nsw i32 %424, %297, !dbg !67
  %426 = add nsw i32 %411, %59, !dbg !22
  %427 = add nsw i32 %426, %297, !dbg !67
  %428 = sext i32 %413 to i64, !dbg !68
  %429 = getelementptr i16, ptr addrspace(1) %0, i64 %428, !dbg !68
  %430 = sext i32 %415 to i64, !dbg !68
  %431 = getelementptr i16, ptr addrspace(1) %0, i64 %430, !dbg !68
  %432 = sext i32 %417 to i64, !dbg !68
  %433 = getelementptr i16, ptr addrspace(1) %0, i64 %432, !dbg !68
  %434 = sext i32 %419 to i64, !dbg !68
  %435 = getelementptr i16, ptr addrspace(1) %0, i64 %434, !dbg !68
  %436 = sext i32 %421 to i64, !dbg !68
  %437 = getelementptr i16, ptr addrspace(1) %0, i64 %436, !dbg !68
  %438 = sext i32 %423 to i64, !dbg !68
  %439 = getelementptr i16, ptr addrspace(1) %0, i64 %438, !dbg !68
  %440 = sext i32 %425 to i64, !dbg !68
  %441 = getelementptr i16, ptr addrspace(1) %0, i64 %440, !dbg !68
  %442 = sext i32 %427 to i64, !dbg !68
  %443 = getelementptr i16, ptr addrspace(1) %0, i64 %442, !dbg !68
  %444 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %429, i1 %191, i16 0, i1 %191) #1, !dbg !69
  %445 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %431, i1 %192, i16 0, i1 %192) #1, !dbg !69
  %446 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %433, i1 %193, i16 0, i1 %193) #1, !dbg !69
  %447 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %435, i1 %194, i16 0, i1 %194) #1, !dbg !69
  %448 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %437, i1 %195, i16 0, i1 %195) #1, !dbg !69
  %449 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %439, i1 %196, i16 0, i1 %196) #1, !dbg !69
  %450 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %441, i1 %197, i16 0, i1 %197) #1, !dbg !69
  %451 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %443, i1 %198, i16 0, i1 %198) #1, !dbg !69
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #1, !dbg !70
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #1, !dbg !70
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #1, !dbg !70
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #1, !dbg !70
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #1, !dbg !70
  %457 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #1, !dbg !70
  %458 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #1, !dbg !70
  %459 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #1, !dbg !70
  %460 = select i1 %191, float %452, float 0.000000e+00, !dbg !71
  %461 = select i1 %192, float %453, float 0.000000e+00, !dbg !71
  %462 = select i1 %193, float %454, float 0.000000e+00, !dbg !71
  %463 = select i1 %194, float %455, float 0.000000e+00, !dbg !71
  %464 = select i1 %195, float %456, float 0.000000e+00, !dbg !71
  %465 = select i1 %196, float %457, float 0.000000e+00, !dbg !71
  %466 = select i1 %197, float %458, float 0.000000e+00, !dbg !71
  %467 = select i1 %198, float %459, float 0.000000e+00, !dbg !71
  %468 = select i1 %159, float %403, float %460, !dbg !72
  %469 = select i1 %161, float %404, float %461, !dbg !72
  %470 = select i1 %163, float %405, float %462, !dbg !72
  %471 = select i1 %165, float %406, float %463, !dbg !72
  %472 = select i1 %167, float %407, float %464, !dbg !72
  %473 = select i1 %169, float %408, float %465, !dbg !72
  %474 = select i1 %171, float %409, float %466, !dbg !72
  %475 = select i1 %173, float %410, float %467, !dbg !72
  %476 = fmul float %272, %468, !dbg !73
  %477 = fmul float %273, %469, !dbg !73
  %478 = fmul float %274, %470, !dbg !73
  %479 = fmul float %275, %471, !dbg !73
  %480 = fmul float %276, %472, !dbg !73
  %481 = fmul float %277, %473, !dbg !73
  %482 = fmul float %278, %474, !dbg !73
  %483 = fmul float %279, %475, !dbg !73
  %484 = fadd float %346, %476, !dbg !74
  %485 = fadd float %347, %477, !dbg !74
  %486 = fadd float %348, %478, !dbg !74
  %487 = fadd float %349, %479, !dbg !74
  %488 = fadd float %350, %480, !dbg !74
  %489 = fadd float %351, %481, !dbg !74
  %490 = fadd float %352, %482, !dbg !74
  %491 = fadd float %353, %483, !dbg !74
  %492 = sext i32 %12 to i64, !dbg !75
  %493 = getelementptr i16, ptr addrspace(1) %3, i64 %492, !dbg !75
  %494 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %288) #1, !dbg !76
  %495 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %289) #1, !dbg !76
  %496 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %290) #1, !dbg !76
  %497 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %291) #1, !dbg !76
  %498 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %292) #1, !dbg !76
  %499 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %293) #1, !dbg !76
  %500 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %294) #1, !dbg !76
  %501 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %295) #1, !dbg !76
  %502 = insertelement <2 x i16> undef, i16 %494, i64 0, !dbg !76
  %503 = insertelement <2 x i16> %502, i16 %495, i64 1, !dbg !76
  %504 = bitcast <2 x i16> %503 to i32, !dbg !76
  %505 = insertelement <2 x i16> undef, i16 %496, i64 0, !dbg !76
  %506 = insertelement <2 x i16> %505, i16 %497, i64 1, !dbg !76
  %507 = bitcast <2 x i16> %506 to i32, !dbg !76
  %508 = insertelement <2 x i16> undef, i16 %498, i64 0, !dbg !76
  %509 = insertelement <2 x i16> %508, i16 %499, i64 1, !dbg !76
  %510 = bitcast <2 x i16> %509 to i32, !dbg !76
  %511 = insertelement <2 x i16> undef, i16 %500, i64 0, !dbg !76
  %512 = insertelement <2 x i16> %511, i16 %501, i64 1, !dbg !76
  %513 = bitcast <2 x i16> %512 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %504, i32 %507, i32 %510, i32 %513, ptr addrspace(1) %493, i1 true) #1, !dbg !76
  %514 = getelementptr i16, ptr addrspace(1) %4, i64 %492, !dbg !77
  %515 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %484) #1, !dbg !78
  %516 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %485) #1, !dbg !78
  %517 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %486) #1, !dbg !78
  %518 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %487) #1, !dbg !78
  %519 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %488) #1, !dbg !78
  %520 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %489) #1, !dbg !78
  %521 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %490) #1, !dbg !78
  %522 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %491) #1, !dbg !78
  %523 = insertelement <2 x i16> undef, i16 %515, i64 0, !dbg !78
  %524 = insertelement <2 x i16> %523, i16 %516, i64 1, !dbg !78
  %525 = bitcast <2 x i16> %524 to i32, !dbg !78
  %526 = insertelement <2 x i16> undef, i16 %517, i64 0, !dbg !78
  %527 = insertelement <2 x i16> %526, i16 %518, i64 1, !dbg !78
  %528 = bitcast <2 x i16> %527 to i32, !dbg !78
  %529 = insertelement <2 x i16> undef, i16 %519, i64 0, !dbg !78
  %530 = insertelement <2 x i16> %529, i16 %520, i64 1, !dbg !78
  %531 = bitcast <2 x i16> %530 to i32, !dbg !78
  %532 = insertelement <2 x i16> undef, i16 %521, i64 0, !dbg !78
  %533 = insertelement <2 x i16> %532, i16 %522, i64 1, !dbg !78
  %534 = bitcast <2 x i16> %533 to i32, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %525, i32 %528, i32 %531, i32 %534, ptr addrspace(1) %514, i1 true) #1, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "ciuklcrjqvlpplmbepd4tk5t4aizyl3iu52w4vrzk2yab5gsfych.py", directory: "/tmp/torchinductor_zeus/iu")
!3 = !{ptr @triton__0d1d2d3d4d5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de", linkageName: "triton__0d1d2d3d4d5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 18, scope: !5)
!13 = !DILocation(line: 24, column: 20, scope: !5)
!14 = !DILocation(line: 24, column: 27, scope: !5)
!15 = !DILocation(line: 25, column: 20, scope: !5)
!16 = !DILocation(line: 26, column: 18, scope: !5)
!17 = !DILocation(line: 33, column: 54, scope: !5)
!18 = !DILocation(line: 33, column: 48, scope: !5)
!19 = !DILocation(line: 33, column: 66, scope: !5)
!20 = !DILocation(line: 33, column: 36, scope: !5)
!21 = !DILocation(line: 33, column: 42, scope: !5)
!22 = !DILocation(line: 65, column: 63, scope: !5)
!23 = !DILocation(line: 33, column: 61, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 72, scope: !5)
!26 = !DILocation(line: 33, column: 92, scope: !5)
!27 = !DILocation(line: 34, column: 30, scope: !5)
!28 = !DILocation(line: 34, column: 35, scope: !5)
!29 = !DILocation(line: 34, column: 85, scope: !5)
!30 = !DILocation(line: 35, column: 18, scope: !5)
!31 = !DILocation(line: 37, column: 18, scope: !5)
!32 = !DILocation(line: 39, column: 43, scope: !5)
!33 = !DILocation(line: 39, column: 62, scope: !5)
!34 = !DILocation(line: 39, column: 31, scope: !5)
!35 = !DILocation(line: 48, column: 34, scope: !5)
!36 = !DILocation(line: 39, column: 73, scope: !5)
!37 = !DILocation(line: 39, column: 94, scope: !5)
!38 = !DILocation(line: 40, column: 13, scope: !5)
!39 = !DILocation(line: 43, column: 20, scope: !5)
!40 = !DILocation(line: 45, column: 43, scope: !5)
!41 = !DILocation(line: 45, column: 62, scope: !5)
!42 = !DILocation(line: 45, column: 31, scope: !5)
!43 = !DILocation(line: 45, column: 73, scope: !5)
!44 = !DILocation(line: 45, column: 94, scope: !5)
!45 = !DILocation(line: 47, column: 35, scope: !5)
!46 = !DILocation(line: 49, column: 31, scope: !5)
!47 = !DILocation(line: 49, column: 36, scope: !5)
!48 = !DILocation(line: 49, column: 86, scope: !5)
!49 = !DILocation(line: 50, column: 20, scope: !5)
!50 = !DILocation(line: 51, column: 19, scope: !5)
!51 = !DILocation(line: 59, column: 47, scope: !5)
!52 = !DILocation(line: 59, column: 42, scope: !5)
!53 = !DILocation(line: 59, column: 54, scope: !5)
!54 = !DILocation(line: 59, column: 73, scope: !5)
!55 = !DILocation(line: 59, column: 31, scope: !5)
!56 = !DILocation(line: 59, column: 84, scope: !5)
!57 = !DILocation(line: 59, column: 104, scope: !5)
!58 = !DILocation(line: 60, column: 20, scope: !5)
!59 = !DILocation(line: 61, column: 43, scope: !5)
!60 = !DILocation(line: 61, column: 60, scope: !5)
!61 = !DILocation(line: 61, column: 79, scope: !5)
!62 = !DILocation(line: 61, column: 31, scope: !5)
!63 = !DILocation(line: 61, column: 90, scope: !5)
!64 = !DILocation(line: 61, column: 111, scope: !5)
!65 = !DILocation(line: 62, column: 13, scope: !5)
!66 = !DILocation(line: 65, column: 46, scope: !5)
!67 = !DILocation(line: 65, column: 82, scope: !5)
!68 = !DILocation(line: 65, column: 31, scope: !5)
!69 = !DILocation(line: 65, column: 93, scope: !5)
!70 = !DILocation(line: 65, column: 114, scope: !5)
!71 = !DILocation(line: 67, column: 35, scope: !5)
!72 = !DILocation(line: 68, column: 34, scope: !5)
!73 = !DILocation(line: 69, column: 20, scope: !5)
!74 = !DILocation(line: 70, column: 20, scope: !5)
!75 = !DILocation(line: 74, column: 25, scope: !5)
!76 = !DILocation(line: 74, column: 37, scope: !5)
!77 = !DILocation(line: 75, column: 25, scope: !5)
!78 = !DILocation(line: 75, column: 37, scope: !5)
!79 = !DILocation(line: 75, column: 4, scope: !5)
