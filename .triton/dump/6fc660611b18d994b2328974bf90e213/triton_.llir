; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d9d1011de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %14 = lshr i32 %13, 5, !dbg !10
  %urem = and i32 %13, 255, !dbg !10
  %15 = shl nuw nsw i32 %urem, 3, !dbg !10
  %16 = shl nuw nsw i32 %urem, 2, !dbg !10
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %18 = icmp slt i32 %17, 4, !dbg !12
  %19 = mul i32 %17, 2304, !dbg !13
  %20 = add i32 %15, %19, !dbg !14
  %21 = sext i32 %20 to i64, !dbg !15
  %22 = getelementptr i16, ptr addrspace(1) %3, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #6, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %28 = trunc i32 %24 to i16, !dbg !16
  %extelt.offset24 = lshr i32 %24, 16, !dbg !16
  %29 = trunc i32 %extelt.offset24 to i16, !dbg !16
  %30 = trunc i32 %25 to i16, !dbg !16
  %extelt.offset25 = lshr i32 %25, 16, !dbg !16
  %31 = trunc i32 %extelt.offset25 to i16, !dbg !16
  %32 = trunc i32 %26 to i16, !dbg !16
  %extelt.offset26 = lshr i32 %26, 16, !dbg !16
  %33 = trunc i32 %extelt.offset26 to i16, !dbg !16
  %34 = trunc i32 %27 to i16, !dbg !16
  %extelt.offset27 = lshr i32 %27, 16, !dbg !16
  %35 = trunc i32 %extelt.offset27 to i16, !dbg !16
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !17
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !17
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !17
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !17
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #6, !dbg !17
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #6, !dbg !17
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #6, !dbg !17
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #6, !dbg !17
  %44 = fmul float %36, %36, !dbg !18
  %45 = fmul float %37, %37, !dbg !18
  %46 = fmul float %38, %38, !dbg !18
  %47 = fmul float %39, %39, !dbg !18
  %48 = fmul float %40, %40, !dbg !18
  %49 = fmul float %41, %41, !dbg !18
  %50 = fmul float %42, %42, !dbg !18
  %51 = fmul float %43, %43, !dbg !18
  %52 = select i1 %18, float %44, float 0.000000e+00, !dbg !19
  %53 = select i1 %18, float %45, float 0.000000e+00, !dbg !19
  %54 = select i1 %18, float %46, float 0.000000e+00, !dbg !19
  %55 = select i1 %18, float %47, float 0.000000e+00, !dbg !19
  %56 = select i1 %18, float %48, float 0.000000e+00, !dbg !19
  %57 = select i1 %18, float %49, float 0.000000e+00, !dbg !19
  %58 = select i1 %18, float %50, float 0.000000e+00, !dbg !19
  %59 = select i1 %18, float %51, float 0.000000e+00, !dbg !19
  %60 = or i32 %15, 2048, !dbg !20
  %61 = icmp ult i32 %60, 2304, !dbg !21
  %62 = add i32 %60, %19, !dbg !14
  %63 = sext i32 %62 to i64, !dbg !15
  %64 = getelementptr i16, ptr addrspace(1) %3, i64 %63, !dbg !15
  %65 = and i1 %18, %61, !dbg !22
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #6, !dbg !16
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !16
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !16
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !16
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !16
  %71 = trunc i32 %67 to i16, !dbg !16
  %extelt.offset24.1 = lshr i32 %67, 16, !dbg !16
  %72 = trunc i32 %extelt.offset24.1 to i16, !dbg !16
  %73 = trunc i32 %68 to i16, !dbg !16
  %extelt.offset25.1 = lshr i32 %68, 16, !dbg !16
  %74 = trunc i32 %extelt.offset25.1 to i16, !dbg !16
  %75 = trunc i32 %69 to i16, !dbg !16
  %extelt.offset26.1 = lshr i32 %69, 16, !dbg !16
  %76 = trunc i32 %extelt.offset26.1 to i16, !dbg !16
  %77 = trunc i32 %70 to i16, !dbg !16
  %extelt.offset27.1 = lshr i32 %70, 16, !dbg !16
  %78 = trunc i32 %extelt.offset27.1 to i16, !dbg !16
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #6, !dbg !17
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #6, !dbg !17
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #6, !dbg !17
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #6, !dbg !17
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #6, !dbg !17
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #6, !dbg !17
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #6, !dbg !17
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #6, !dbg !17
  %87 = fmul float %79, %79, !dbg !18
  %88 = fmul float %80, %80, !dbg !18
  %89 = fmul float %81, %81, !dbg !18
  %90 = fmul float %82, %82, !dbg !18
  %91 = fmul float %83, %83, !dbg !18
  %92 = fmul float %84, %84, !dbg !18
  %93 = fmul float %85, %85, !dbg !18
  %94 = fmul float %86, %86, !dbg !18
  %95 = select i1 %65, float %87, float -0.000000e+00, !dbg !19
  %96 = fadd float %52, %95, !dbg !19
  %97 = select i1 %65, float %88, float -0.000000e+00, !dbg !19
  %98 = fadd float %53, %97, !dbg !19
  %99 = select i1 %65, float %89, float -0.000000e+00, !dbg !19
  %100 = fadd float %54, %99, !dbg !19
  %101 = select i1 %65, float %90, float -0.000000e+00, !dbg !19
  %102 = fadd float %55, %101, !dbg !19
  %103 = select i1 %65, float %91, float -0.000000e+00, !dbg !19
  %104 = fadd float %56, %103, !dbg !19
  %105 = select i1 %65, float %92, float -0.000000e+00, !dbg !19
  %106 = fadd float %57, %105, !dbg !19
  %107 = select i1 %65, float %93, float -0.000000e+00, !dbg !19
  %108 = fadd float %58, %107, !dbg !19
  %109 = select i1 %65, float %94, float -0.000000e+00, !dbg !19
  %110 = fadd float %59, %109, !dbg !19
  %111 = and i32 %13, 31, !dbg !10
  %112 = and i32 %14, 7, !dbg !10
  %113 = or i32 %15, 4, !dbg !10
  %114 = or i32 %16, 1024, !dbg !10
  %115 = fadd float %96, %98, !dbg !23
  %116 = fadd float %100, %115, !dbg !23
  %117 = fadd float %102, %116, !dbg !23
  %118 = fadd float %104, %117, !dbg !23
  %119 = fadd float %106, %118, !dbg !23
  %120 = fadd float %108, %119, !dbg !23
  %121 = fadd float %110, %120, !dbg !23
  %122 = bitcast float %121 to i32, !dbg !29
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 16, i32 31), !dbg !29
  %124 = bitcast i32 %123 to float, !dbg !29
  %125 = fadd float %121, %124, !dbg !23
  %126 = bitcast float %125 to i32, !dbg !29
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 8, i32 31), !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = fadd float %125, %128, !dbg !23
  %130 = bitcast float %129 to i32, !dbg !29
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 4, i32 31), !dbg !29
  %132 = bitcast i32 %131 to float, !dbg !29
  %133 = fadd float %129, %132, !dbg !23
  %134 = bitcast float %133 to i32, !dbg !29
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !29
  %136 = bitcast i32 %135 to float, !dbg !29
  %137 = fadd float %133, %136, !dbg !23
  %138 = bitcast float %137 to i32, !dbg !29
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 1, i32 31), !dbg !29
  %140 = bitcast i32 %139 to float, !dbg !29
  %141 = fadd float %137, %140, !dbg !23
  %142 = icmp eq i32 %111, 0, !dbg !29
  %143 = zext nneg i32 %112 to i64, !dbg !29
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i64 %143, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, float %141, i1 %142) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %145 = icmp slt i32 %13, 8, !dbg !29
  %146 = sext i32 %13 to i64, !dbg !29
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i64 %146, !dbg !29
  %148 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %147, i1 %145) #6, !dbg !29
  %149 = bitcast float %148 to i32, !dbg !29
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 4, i32 31), !dbg !29
  %151 = bitcast i32 %150 to float, !dbg !29
  %152 = fadd float %148, %151, !dbg !23
  %153 = bitcast float %152 to i32, !dbg !29
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 2, i32 31), !dbg !29
  %155 = bitcast i32 %154 to float, !dbg !29
  %156 = fadd float %152, %155, !dbg !23
  %157 = bitcast float %156 to i32, !dbg !29
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 1, i32 31), !dbg !29
  %159 = bitcast i32 %158 to float, !dbg !29
  %160 = fadd float %156, %159, !dbg !23
  %161 = and i32 %13, 7, !dbg !29
  %162 = icmp eq i32 %161, 0, !dbg !29
  %163 = and i1 %145, %162, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, float %160, i1 %163) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %164 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %165 = insertelement <1 x float> undef, float %164, i64 0, !dbg !31
  store <1 x float> %165, ptr addrspace(3) @global_smem, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %166 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !31
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float 2.304000e+03) #6, !dbg !32
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.304000e+03) #6, !dbg !32
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.304000e+03) #6, !dbg !32
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.304000e+03) #6, !dbg !32
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.304000e+03) #6, !dbg !32
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.304000e+03) #6, !dbg !32
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.304000e+03) #6, !dbg !32
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.304000e+03) #6, !dbg !32
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.304000e+03) #6, !dbg !32
  %176 = fadd float %167, 0x3EE4F8B580000000, !dbg !33
  %177 = fadd float %168, 0x3EE4F8B580000000, !dbg !33
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %.not.i = icmp eq i32 %178, 0, !dbg !31
  br i1 %.not.i, label %181, label %179, !dbg !31

179:                                              ; preds = %12
  %180 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %176), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

181:                                              ; preds = %12
  %182 = tail call float @llvm.nvvm.rsqrt.approx.f(float %176), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %179, %181
  %.0.i = phi float [ %180, %179 ], [ %182, %181 ], !dbg !31
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %.not.i28 = icmp eq i32 %183, 0, !dbg !31
  br i1 %.not.i28, label %186, label %184, !dbg !31

184:                                              ; preds = %__nv_rsqrtf.exit
  %185 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %177), !dbg !31
  br label %__nv_rsqrtf.exit30, !dbg !31

186:                                              ; preds = %__nv_rsqrtf.exit
  %187 = tail call float @llvm.nvvm.rsqrt.approx.f(float %177), !dbg !31
  br label %__nv_rsqrtf.exit30, !dbg !31

__nv_rsqrtf.exit30:                               ; preds = %184, %186
  %.0.i29 = phi float [ %185, %184 ], [ %187, %186 ], !dbg !31
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %195 = sext i32 %17 to i64, !dbg !35
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !35
  %197 = icmp eq i32 %urem, 0, !dbg !36
  %198 = bitcast float %.0.i to i32, !dbg !36
  %199 = and i1 %197, %18, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %196, i1 %199) #6, !dbg !36
  %200 = getelementptr float, ptr addrspace(1) %6, i64 %195, !dbg !37
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %18) #6, !dbg !38
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %18) #6, !dbg !38
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %18) #6, !dbg !38
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %18) #6, !dbg !38
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %18) #6, !dbg !38
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %18) #6, !dbg !38
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %18) #6, !dbg !38
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %18) #6, !dbg !38
  %209 = zext nneg i32 %15 to i64
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i64 %209
  %211 = zext nneg i32 %16 to i64
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i64 %211
  %213 = zext nneg i32 %114 to i64
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i64 %213
  %215 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %212, i64 0, i64 1
  %216 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %212, i64 0, i64 2
  %217 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %212, i64 0, i64 3
  %218 = insertelement <8 x float> poison, float %.0.i29, i64 0, !dbg !39
  %219 = shufflevector <8 x float> %218, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !39
  %220 = insertelement <8 x i32> undef, i32 %201, i64 0, !dbg !40
  %221 = bitcast <8 x i32> %220 to <8 x float>, !dbg !40
  %222 = shufflevector <8 x float> %221, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !40
  br label %223, !dbg !41

223:                                              ; preds = %__nv_rsqrtf.exit30, %223
  %224 = phi i1 [ true, %__nv_rsqrtf.exit30 ], [ false, %223 ]
  %225 = phi i32 [ 0, %__nv_rsqrtf.exit30 ], [ 2048, %223 ]
  %226 = phi <8 x float> [ zeroinitializer, %__nv_rsqrtf.exit30 ], [ %384, %223 ]
  %227 = or i32 %225, %15, !dbg !42
  %228 = or i32 %225, %113, !dbg !42
  %229 = or i32 %225, %16, !dbg !42
  %230 = or i32 %225, %114, !dbg !42
  %231 = icmp ult i32 %227, 2304, !dbg !43
  %232 = icmp ult i32 %229, 2304, !dbg !43
  %233 = icmp ult i32 %230, 2304, !dbg !43
  %234 = add i32 %227, %19, !dbg !44
  %235 = add i32 %228, %19, !dbg !44
  %236 = add i32 %229, %19, !dbg !44
  %237 = add i32 %230, %19, !dbg !44
  %238 = sext i32 %234 to i64, !dbg !45
  %239 = getelementptr i16, ptr addrspace(1) %3, i64 %238, !dbg !45
  %240 = and i1 %18, %231, !dbg !46
  %241 = and i1 %18, %232, !dbg !46
  %242 = and i1 %18, %233, !dbg !46
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %239, i1 %240, i32 0, i1 %240, i32 0, i1 %240, i32 0, i1 %240, i32 0, i1 %240) #6, !dbg !47
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !47
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !47
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !47
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !47
  %248 = trunc i32 %244 to i16, !dbg !47
  %extelt.offset = lshr i32 %244, 16, !dbg !47
  %249 = trunc i32 %extelt.offset to i16, !dbg !47
  %250 = trunc i32 %245 to i16, !dbg !47
  %extelt.offset3 = lshr i32 %245, 16, !dbg !47
  %251 = trunc i32 %extelt.offset3 to i16, !dbg !47
  %252 = trunc i32 %246 to i16, !dbg !47
  %extelt.offset4 = lshr i32 %246, 16, !dbg !47
  %253 = trunc i32 %extelt.offset4 to i16, !dbg !47
  %254 = trunc i32 %247 to i16, !dbg !47
  %extelt.offset5 = lshr i32 %247, 16, !dbg !47
  %255 = trunc i32 %extelt.offset5 to i16, !dbg !47
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %248) #6, !dbg !48
  %257 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %249) #6, !dbg !48
  %258 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %250) #6, !dbg !48
  %259 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %251) #6, !dbg !48
  %260 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %252) #6, !dbg !48
  %261 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %253) #6, !dbg !48
  %262 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %254) #6, !dbg !48
  %263 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %255) #6, !dbg !48
  %264 = zext nneg i32 %227 to i64, !dbg !49
  %265 = getelementptr float, ptr addrspace(1) %4, i64 %264, !dbg !49
  %266 = zext nneg i32 %228 to i64, !dbg !49
  %267 = getelementptr float, ptr addrspace(1) %4, i64 %266, !dbg !49
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %265, i1 %231, i32 0, i1 %231, i32 0, i1 %231, i32 0, i1 %231, i32 0, i1 %231) #6, !dbg !50
  %269 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !50
  %270 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !50
  %271 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !50
  %272 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !50
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %267, i1 %231, i32 0, i1 %231, i32 0, i1 %231, i32 0, i1 %231, i32 0, i1 %231) #6, !dbg !50
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !50
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !50
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !50
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !50
  %278 = getelementptr i16, ptr addrspace(1) %5, i64 %238, !dbg !51
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %278, i1 %240, i32 0, i1 %240, i32 0, i1 %240, i32 0, i1 %240, i32 0, i1 %240) #6, !dbg !52
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !52
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !52
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !52
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !52
  %284 = trunc i32 %280 to i16, !dbg !52
  %extelt.offset6 = lshr i32 %280, 16, !dbg !52
  %285 = trunc i32 %extelt.offset6 to i16, !dbg !52
  %286 = trunc i32 %281 to i16, !dbg !52
  %extelt.offset7 = lshr i32 %281, 16, !dbg !52
  %287 = trunc i32 %extelt.offset7 to i16, !dbg !52
  %288 = trunc i32 %282 to i16, !dbg !52
  %extelt.offset8 = lshr i32 %282, 16, !dbg !52
  %289 = trunc i32 %extelt.offset8 to i16, !dbg !52
  %290 = trunc i32 %283 to i16, !dbg !52
  %extelt.offset9 = lshr i32 %283, 16, !dbg !52
  %291 = trunc i32 %extelt.offset9 to i16, !dbg !52
  %292 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %284) #6, !dbg !53
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #6, !dbg !53
  %294 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #6, !dbg !53
  %295 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %287) #6, !dbg !53
  %296 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %288) #6, !dbg !53
  %297 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %289) #6, !dbg !53
  %298 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %290) #6, !dbg !53
  %299 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %291) #6, !dbg !53
  %300 = getelementptr float, ptr addrspace(1) %7, i64 %264, !dbg !54
  %301 = getelementptr float, ptr addrspace(1) %7, i64 %266, !dbg !54
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %300, i1 %231, i32 0, i1 %231, i32 0, i1 %231, i32 0, i1 %231, i32 0, i1 %231) #6, !dbg !55
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !55
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !55
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !55
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !55
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %301, i1 %231, i32 0, i1 %231, i32 0, i1 %231, i32 0, i1 %231, i32 0, i1 %231) #6, !dbg !55
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !55
  %309 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !55
  %310 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !55
  %311 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !55
  %312 = getelementptr float, ptr addrspace(1) %1, i64 %238, !dbg !56
  %313 = sext i32 %235 to i64, !dbg !56
  %314 = getelementptr float, ptr addrspace(1) %1, i64 %313, !dbg !56
  %315 = sext i32 %236 to i64, !dbg !56
  %316 = getelementptr float, ptr addrspace(1) %1, i64 %315, !dbg !56
  %317 = sext i32 %237 to i64, !dbg !56
  %318 = getelementptr float, ptr addrspace(1) %1, i64 %317, !dbg !56
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %312, i1 %240, i32 0, i1 %240, i32 0, i1 %240, i32 0, i1 %240, i32 0, i1 %240) #6, !dbg !57
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !57
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !57
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !57
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !57
  %324 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %314, i1 %240, i32 0, i1 %240, i32 0, i1 %240, i32 0, i1 %240, i32 0, i1 %240) #6, !dbg !57
  %325 = extractvalue { i32, i32, i32, i32 } %324, 0, !dbg !57
  %326 = extractvalue { i32, i32, i32, i32 } %324, 1, !dbg !57
  %327 = extractvalue { i32, i32, i32, i32 } %324, 2, !dbg !57
  %328 = extractvalue { i32, i32, i32, i32 } %324, 3, !dbg !57
  %329 = insertelement <8 x i32> poison, i32 %269, i64 0, !dbg !50
  %330 = insertelement <8 x i32> %329, i32 %270, i64 1, !dbg !50
  %331 = insertelement <8 x i32> %330, i32 %271, i64 2, !dbg !50
  %332 = insertelement <8 x i32> %331, i32 %272, i64 3, !dbg !50
  %333 = insertelement <8 x i32> %332, i32 %274, i64 4, !dbg !50
  %334 = insertelement <8 x i32> %333, i32 %275, i64 5, !dbg !50
  %335 = insertelement <8 x i32> %334, i32 %276, i64 6, !dbg !50
  %336 = insertelement <8 x i32> %335, i32 %277, i64 7, !dbg !50
  %337 = bitcast <8 x i32> %336 to <8 x float>, !dbg !50
  %338 = insertelement <8 x i32> poison, i32 %303, i64 0, !dbg !55
  %339 = insertelement <8 x i32> %338, i32 %304, i64 1, !dbg !55
  %340 = insertelement <8 x i32> %339, i32 %305, i64 2, !dbg !55
  %341 = insertelement <8 x i32> %340, i32 %306, i64 3, !dbg !55
  %342 = insertelement <8 x i32> %341, i32 %308, i64 4, !dbg !55
  %343 = insertelement <8 x i32> %342, i32 %309, i64 5, !dbg !55
  %344 = insertelement <8 x i32> %343, i32 %310, i64 6, !dbg !55
  %345 = insertelement <8 x i32> %344, i32 %311, i64 7, !dbg !55
  %346 = bitcast <8 x i32> %345 to <8 x float>, !dbg !55
  %347 = insertelement <8 x i32> poison, i32 %320, i64 0, !dbg !57
  %348 = insertelement <8 x i32> %347, i32 %321, i64 1, !dbg !57
  %349 = insertelement <8 x i32> %348, i32 %322, i64 2, !dbg !57
  %350 = insertelement <8 x i32> %349, i32 %323, i64 3, !dbg !57
  %351 = insertelement <8 x i32> %350, i32 %325, i64 4, !dbg !57
  %352 = insertelement <8 x i32> %351, i32 %326, i64 5, !dbg !57
  %353 = insertelement <8 x i32> %352, i32 %327, i64 6, !dbg !57
  %354 = insertelement <8 x i32> %353, i32 %328, i64 7, !dbg !57
  %355 = bitcast <8 x i32> %354 to <8 x float>, !dbg !57
  %356 = insertelement <8 x float> poison, float %256, i64 0, !dbg !39
  %357 = insertelement <8 x float> %356, float %257, i64 1, !dbg !39
  %358 = insertelement <8 x float> %357, float %258, i64 2, !dbg !39
  %359 = insertelement <8 x float> %358, float %259, i64 3, !dbg !39
  %360 = insertelement <8 x float> %359, float %260, i64 4, !dbg !39
  %361 = insertelement <8 x float> %360, float %261, i64 5, !dbg !39
  %362 = insertelement <8 x float> %361, float %262, i64 6, !dbg !39
  %363 = insertelement <8 x float> %362, float %263, i64 7, !dbg !39
  %364 = fmul <8 x float> %219, %363, !dbg !39
  %365 = fadd <8 x float> %337, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !58
  %366 = fmul <8 x float> %364, %365, !dbg !59
  %367 = insertelement <8 x float> poison, float %292, i64 0, !dbg !40
  %368 = insertelement <8 x float> %367, float %293, i64 1, !dbg !40
  %369 = insertelement <8 x float> %368, float %294, i64 2, !dbg !40
  %370 = insertelement <8 x float> %369, float %295, i64 3, !dbg !40
  %371 = insertelement <8 x float> %370, float %296, i64 4, !dbg !40
  %372 = insertelement <8 x float> %371, float %297, i64 5, !dbg !40
  %373 = insertelement <8 x float> %372, float %298, i64 6, !dbg !40
  %374 = insertelement <8 x float> %373, float %299, i64 7, !dbg !40
  %375 = fmul <8 x float> %374, %222, !dbg !40
  %376 = fadd <8 x float> %346, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !60
  %377 = fmul <8 x float> %375, %376, !dbg !61
  %378 = fadd <8 x float> %377, %355, !dbg !62
  %379 = fadd <8 x float> %366, %378, !dbg !63
  %380 = fmul <8 x float> %379, %379, !dbg !64
  %381 = insertelement <8 x i1> poison, i1 %240, i64 0, !dbg !65
  %382 = shufflevector <8 x i1> %381, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !65
  %383 = select <8 x i1> %382, <8 x float> %380, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !65
  %384 = fadd <8 x float> %226, %383, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  store <8 x float> %379, ptr addrspace(3) %210, align 32, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %385 = load <4 x i32>, ptr addrspace(3) %214, align 16, !dbg !66
  %.extract = load i32, ptr addrspace(3) %212, align 16, !dbg !66
  %.extract11 = load i32, ptr addrspace(3) %215, align 4, !dbg !66
  %.extract13 = load i32, ptr addrspace(3) %216, align 8, !dbg !66
  %.extract15 = load i32, ptr addrspace(3) %217, align 4, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract13, i32 %.extract15, ptr addrspace(1) %316, i1 %241) #6, !dbg !66
  %.extract17 = extractelement <4 x i32> %385, i64 0, !dbg !66
  %.extract19 = extractelement <4 x i32> %385, i64 1, !dbg !66
  %.extract21 = extractelement <4 x i32> %385, i64 2, !dbg !66
  %.extract23 = extractelement <4 x i32> %385, i64 3, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract17, i32 %.extract19, i32 %.extract21, i32 %.extract23, ptr addrspace(1) %318, i1 %242) #6, !dbg !66
  br i1 %224, label %223, label %386, !dbg !41

386:                                              ; preds = %223
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %shift = shufflevector <8 x float> %384, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !69
  %387 = fadd <8 x float> %384, %shift, !dbg !69
  %shift109 = shufflevector <8 x float> %384, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !69
  %388 = fadd <8 x float> %shift109, %387, !dbg !69
  %shift110 = shufflevector <8 x float> %384, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !69
  %389 = fadd <8 x float> %shift110, %388, !dbg !69
  %shift111 = shufflevector <8 x float> %384, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !69
  %390 = fadd <8 x float> %shift111, %389, !dbg !69
  %shift112 = shufflevector <8 x float> %384, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !69
  %391 = fadd <8 x float> %shift112, %390, !dbg !69
  %shift113 = shufflevector <8 x float> %384, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !69
  %392 = fadd <8 x float> %shift113, %391, !dbg !69
  %shift114 = shufflevector <8 x float> %384, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !69
  %393 = fadd <8 x float> %shift114, %392, !dbg !69
  %394 = extractelement <8 x float> %393, i64 0, !dbg !69
  %395 = bitcast float %394 to i32, !dbg !67
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 16, i32 31), !dbg !67
  %397 = bitcast i32 %396 to float, !dbg !67
  %398 = fadd float %394, %397, !dbg !69
  %399 = bitcast float %398 to i32, !dbg !67
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 8, i32 31), !dbg !67
  %401 = bitcast i32 %400 to float, !dbg !67
  %402 = fadd float %398, %401, !dbg !69
  %403 = bitcast float %402 to i32, !dbg !67
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 4, i32 31), !dbg !67
  %405 = bitcast i32 %404 to float, !dbg !67
  %406 = fadd float %402, %405, !dbg !69
  %407 = bitcast float %406 to i32, !dbg !67
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 2, i32 31), !dbg !67
  %409 = bitcast i32 %408 to float, !dbg !67
  %410 = fadd float %406, %409, !dbg !69
  %411 = bitcast float %410 to i32, !dbg !67
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 1, i32 31), !dbg !67
  %413 = bitcast i32 %412 to float, !dbg !67
  %414 = fadd float %410, %413, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, float %414, i1 %142) #6, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %415 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %147, i1 %145) #6, !dbg !67
  %416 = bitcast float %415 to i32, !dbg !67
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 4, i32 31), !dbg !67
  %418 = bitcast i32 %417 to float, !dbg !67
  %419 = fadd float %415, %418, !dbg !69
  %420 = bitcast float %419 to i32, !dbg !67
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 2, i32 31), !dbg !67
  %422 = bitcast i32 %421 to float, !dbg !67
  %423 = fadd float %419, %422, !dbg !69
  %424 = bitcast float %423 to i32, !dbg !67
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 1, i32 31), !dbg !67
  %426 = bitcast i32 %425 to float, !dbg !67
  %427 = fadd float %423, %426, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, float %427, i1 %163) #6, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %428 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %429 = insertelement <1 x float> undef, float %428, i64 0, !dbg !72
  store <1 x float> %429, ptr addrspace(3) @global_smem, align 4, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %430 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !72
  %431 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float 2.304000e+03) #6, !dbg !73
  %432 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float 2.304000e+03) #6, !dbg !73
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float 2.304000e+03) #6, !dbg !73
  %434 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float 2.304000e+03) #6, !dbg !73
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float 2.304000e+03) #6, !dbg !73
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float 2.304000e+03) #6, !dbg !73
  %437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float 2.304000e+03) #6, !dbg !73
  %438 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float 2.304000e+03) #6, !dbg !73
  %439 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float 2.304000e+03) #6, !dbg !73
  %440 = fadd float %431, 0x3EE4F8B580000000, !dbg !74
  %441 = fadd float %432, 0x3EE4F8B580000000, !dbg !74
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %.not.i52 = icmp eq i32 %442, 0, !dbg !72
  br i1 %.not.i52, label %445, label %443, !dbg !72

443:                                              ; preds = %386
  %444 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %440), !dbg !72
  br label %__nv_rsqrtf.exit54, !dbg !72

445:                                              ; preds = %386
  %446 = tail call float @llvm.nvvm.rsqrt.approx.f(float %440), !dbg !72
  br label %__nv_rsqrtf.exit54, !dbg !72

__nv_rsqrtf.exit54:                               ; preds = %443, %445
  %.0.i53 = phi float [ %444, %443 ], [ %446, %445 ], !dbg !72
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %.not.i55 = icmp eq i32 %447, 0, !dbg !72
  br i1 %.not.i55, label %450, label %448, !dbg !72

448:                                              ; preds = %__nv_rsqrtf.exit54
  %449 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %441), !dbg !72
  br label %__nv_rsqrtf.exit57, !dbg !72

450:                                              ; preds = %__nv_rsqrtf.exit54
  %451 = tail call float @llvm.nvvm.rsqrt.approx.f(float %441), !dbg !72
  br label %__nv_rsqrtf.exit57, !dbg !72

__nv_rsqrtf.exit57:                               ; preds = %448, %450
  %.0.i56 = phi float [ %449, %448 ], [ %451, %450 ], !dbg !72
  %452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %455 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %456 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %459 = getelementptr float, ptr addrspace(1) %2, i64 %195, !dbg !76
  %460 = bitcast float %.0.i53 to i32, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %460, ptr addrspace(1) %459, i1 %199) #6, !dbg !77
  %461 = add i32 %113, %19, !dbg !78
  %462 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !79
  %463 = sext i32 %461 to i64, !dbg !79
  %464 = getelementptr float, ptr addrspace(1) %1, i64 %463, !dbg !79
  %465 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %462, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #6, !dbg !80
  %466 = extractvalue { i32, i32, i32, i32 } %465, 0, !dbg !80
  %467 = extractvalue { i32, i32, i32, i32 } %465, 1, !dbg !80
  %468 = extractvalue { i32, i32, i32, i32 } %465, 2, !dbg !80
  %469 = extractvalue { i32, i32, i32, i32 } %465, 3, !dbg !80
  %470 = bitcast i32 %466 to float, !dbg !80
  %471 = bitcast i32 %467 to float, !dbg !80
  %472 = bitcast i32 %468 to float, !dbg !80
  %473 = bitcast i32 %469 to float, !dbg !80
  %474 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %464, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #6, !dbg !80
  %475 = extractvalue { i32, i32, i32, i32 } %474, 0, !dbg !80
  %476 = extractvalue { i32, i32, i32, i32 } %474, 1, !dbg !80
  %477 = extractvalue { i32, i32, i32, i32 } %474, 2, !dbg !80
  %478 = extractvalue { i32, i32, i32, i32 } %474, 3, !dbg !80
  %479 = bitcast i32 %475 to float, !dbg !80
  %480 = bitcast i32 %476 to float, !dbg !80
  %481 = bitcast i32 %477 to float, !dbg !80
  %482 = bitcast i32 %478 to float, !dbg !80
  %483 = getelementptr float, ptr addrspace(1) %8, i64 %209, !dbg !81
  %484 = zext nneg i32 %113 to i64, !dbg !81
  %485 = getelementptr float, ptr addrspace(1) %8, i64 %484, !dbg !81
  %486 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %483, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !82
  %487 = extractvalue { i32, i32, i32, i32 } %486, 0, !dbg !82
  %488 = extractvalue { i32, i32, i32, i32 } %486, 1, !dbg !82
  %489 = extractvalue { i32, i32, i32, i32 } %486, 2, !dbg !82
  %490 = extractvalue { i32, i32, i32, i32 } %486, 3, !dbg !82
  %491 = bitcast i32 %487 to float, !dbg !82
  %492 = bitcast i32 %488 to float, !dbg !82
  %493 = bitcast i32 %489 to float, !dbg !82
  %494 = bitcast i32 %490 to float, !dbg !82
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %485, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !82
  %496 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !82
  %497 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !82
  %498 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !82
  %499 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !82
  %500 = bitcast i32 %496 to float, !dbg !82
  %501 = bitcast i32 %497 to float, !dbg !82
  %502 = bitcast i32 %498 to float, !dbg !82
  %503 = bitcast i32 %499 to float, !dbg !82
  %504 = fmul float %.0.i56, %470, !dbg !83
  %505 = fmul float %.0.i56, %471, !dbg !83
  %506 = fmul float %.0.i56, %472, !dbg !83
  %507 = fmul float %.0.i56, %473, !dbg !83
  %508 = fmul float %.0.i56, %479, !dbg !83
  %509 = fmul float %.0.i56, %480, !dbg !83
  %510 = fmul float %.0.i56, %481, !dbg !83
  %511 = fmul float %.0.i56, %482, !dbg !83
  %512 = fadd float %491, 1.000000e+00, !dbg !84
  %513 = fadd float %492, 1.000000e+00, !dbg !84
  %514 = fadd float %493, 1.000000e+00, !dbg !84
  %515 = fadd float %494, 1.000000e+00, !dbg !84
  %516 = fadd float %500, 1.000000e+00, !dbg !84
  %517 = fadd float %501, 1.000000e+00, !dbg !84
  %518 = fadd float %502, 1.000000e+00, !dbg !84
  %519 = fadd float %503, 1.000000e+00, !dbg !84
  %520 = fmul float %504, %512, !dbg !85
  %521 = fmul float %505, %513, !dbg !85
  %522 = fmul float %506, %514, !dbg !85
  %523 = fmul float %507, %515, !dbg !85
  %524 = fmul float %508, %516, !dbg !85
  %525 = fmul float %509, %517, !dbg !85
  %526 = fmul float %510, %518, !dbg !85
  %527 = fmul float %511, %519, !dbg !85
  %528 = getelementptr i16, ptr addrspace(1) %9, i64 %21, !dbg !86
  %529 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %520) #6, !dbg !87
  %530 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %521) #6, !dbg !87
  %531 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %522) #6, !dbg !87
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %523) #6, !dbg !87
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %524) #6, !dbg !87
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %525) #6, !dbg !87
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %526) #6, !dbg !87
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %527) #6, !dbg !87
  %537 = insertelement <2 x i16> undef, i16 %529, i64 0, !dbg !87
  %538 = insertelement <2 x i16> %537, i16 %530, i64 1, !dbg !87
  %539 = bitcast <2 x i16> %538 to i32, !dbg !87
  %540 = insertelement <2 x i16> undef, i16 %531, i64 0, !dbg !87
  %541 = insertelement <2 x i16> %540, i16 %532, i64 1, !dbg !87
  %542 = bitcast <2 x i16> %541 to i32, !dbg !87
  %543 = insertelement <2 x i16> undef, i16 %533, i64 0, !dbg !87
  %544 = insertelement <2 x i16> %543, i16 %534, i64 1, !dbg !87
  %545 = bitcast <2 x i16> %544 to i32, !dbg !87
  %546 = insertelement <2 x i16> undef, i16 %535, i64 0, !dbg !87
  %547 = insertelement <2 x i16> %546, i16 %536, i64 1, !dbg !87
  %548 = bitcast <2 x i16> %547 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %539, i32 %542, i32 %545, i32 %548, ptr addrspace(1) %528, i1 %18) #6, !dbg !87
  %549 = or i32 %15, 2052, !dbg !88
  %550 = add i32 %549, %19, !dbg !78
  %551 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !79
  %552 = sext i32 %550 to i64, !dbg !79
  %553 = getelementptr float, ptr addrspace(1) %1, i64 %552, !dbg !79
  %554 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %551, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #6, !dbg !80
  %555 = extractvalue { i32, i32, i32, i32 } %554, 0, !dbg !80
  %556 = extractvalue { i32, i32, i32, i32 } %554, 1, !dbg !80
  %557 = extractvalue { i32, i32, i32, i32 } %554, 2, !dbg !80
  %558 = extractvalue { i32, i32, i32, i32 } %554, 3, !dbg !80
  %559 = bitcast i32 %555 to float, !dbg !80
  %560 = bitcast i32 %556 to float, !dbg !80
  %561 = bitcast i32 %557 to float, !dbg !80
  %562 = bitcast i32 %558 to float, !dbg !80
  %563 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %553, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #6, !dbg !80
  %564 = extractvalue { i32, i32, i32, i32 } %563, 0, !dbg !80
  %565 = extractvalue { i32, i32, i32, i32 } %563, 1, !dbg !80
  %566 = extractvalue { i32, i32, i32, i32 } %563, 2, !dbg !80
  %567 = extractvalue { i32, i32, i32, i32 } %563, 3, !dbg !80
  %568 = bitcast i32 %564 to float, !dbg !80
  %569 = bitcast i32 %565 to float, !dbg !80
  %570 = bitcast i32 %566 to float, !dbg !80
  %571 = bitcast i32 %567 to float, !dbg !80
  %572 = zext nneg i32 %60 to i64, !dbg !81
  %573 = getelementptr float, ptr addrspace(1) %8, i64 %572, !dbg !81
  %574 = zext nneg i32 %549 to i64, !dbg !81
  %575 = getelementptr float, ptr addrspace(1) %8, i64 %574, !dbg !81
  %576 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %573, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #6, !dbg !82
  %577 = extractvalue { i32, i32, i32, i32 } %576, 0, !dbg !82
  %578 = extractvalue { i32, i32, i32, i32 } %576, 1, !dbg !82
  %579 = extractvalue { i32, i32, i32, i32 } %576, 2, !dbg !82
  %580 = extractvalue { i32, i32, i32, i32 } %576, 3, !dbg !82
  %581 = bitcast i32 %577 to float, !dbg !82
  %582 = bitcast i32 %578 to float, !dbg !82
  %583 = bitcast i32 %579 to float, !dbg !82
  %584 = bitcast i32 %580 to float, !dbg !82
  %585 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %575, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #6, !dbg !82
  %586 = extractvalue { i32, i32, i32, i32 } %585, 0, !dbg !82
  %587 = extractvalue { i32, i32, i32, i32 } %585, 1, !dbg !82
  %588 = extractvalue { i32, i32, i32, i32 } %585, 2, !dbg !82
  %589 = extractvalue { i32, i32, i32, i32 } %585, 3, !dbg !82
  %590 = bitcast i32 %586 to float, !dbg !82
  %591 = bitcast i32 %587 to float, !dbg !82
  %592 = bitcast i32 %588 to float, !dbg !82
  %593 = bitcast i32 %589 to float, !dbg !82
  %594 = fmul float %.0.i56, %559, !dbg !83
  %595 = fmul float %.0.i56, %560, !dbg !83
  %596 = fmul float %.0.i56, %561, !dbg !83
  %597 = fmul float %.0.i56, %562, !dbg !83
  %598 = fmul float %.0.i56, %568, !dbg !83
  %599 = fmul float %.0.i56, %569, !dbg !83
  %600 = fmul float %.0.i56, %570, !dbg !83
  %601 = fmul float %.0.i56, %571, !dbg !83
  %602 = fadd float %581, 1.000000e+00, !dbg !84
  %603 = fadd float %582, 1.000000e+00, !dbg !84
  %604 = fadd float %583, 1.000000e+00, !dbg !84
  %605 = fadd float %584, 1.000000e+00, !dbg !84
  %606 = fadd float %590, 1.000000e+00, !dbg !84
  %607 = fadd float %591, 1.000000e+00, !dbg !84
  %608 = fadd float %592, 1.000000e+00, !dbg !84
  %609 = fadd float %593, 1.000000e+00, !dbg !84
  %610 = fmul float %594, %602, !dbg !85
  %611 = fmul float %595, %603, !dbg !85
  %612 = fmul float %596, %604, !dbg !85
  %613 = fmul float %597, %605, !dbg !85
  %614 = fmul float %598, %606, !dbg !85
  %615 = fmul float %599, %607, !dbg !85
  %616 = fmul float %600, %608, !dbg !85
  %617 = fmul float %601, %609, !dbg !85
  %618 = getelementptr i16, ptr addrspace(1) %9, i64 %63, !dbg !86
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %610) #6, !dbg !87
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %611) #6, !dbg !87
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %612) #6, !dbg !87
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %613) #6, !dbg !87
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %614) #6, !dbg !87
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %615) #6, !dbg !87
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %616) #6, !dbg !87
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %617) #6, !dbg !87
  %627 = insertelement <2 x i16> undef, i16 %619, i64 0, !dbg !87
  %628 = insertelement <2 x i16> %627, i16 %620, i64 1, !dbg !87
  %629 = bitcast <2 x i16> %628 to i32, !dbg !87
  %630 = insertelement <2 x i16> undef, i16 %621, i64 0, !dbg !87
  %631 = insertelement <2 x i16> %630, i16 %622, i64 1, !dbg !87
  %632 = bitcast <2 x i16> %631 to i32, !dbg !87
  %633 = insertelement <2 x i16> undef, i16 %623, i64 0, !dbg !87
  %634 = insertelement <2 x i16> %633, i16 %624, i64 1, !dbg !87
  %635 = bitcast <2 x i16> %634 to i32, !dbg !87
  %636 = insertelement <2 x i16> undef, i16 %625, i64 0, !dbg !87
  %637 = insertelement <2 x i16> %636, i16 %626, i64 1, !dbg !87
  %638 = bitcast <2 x i16> %637 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %629, i32 %632, i32 %635, i32 %638, ptr addrspace(1) %618, i1 %65) #6, !dbg !87
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ceamqkhr5s4b5ue5kynexzq4oqpfefm3hoewthlangp4lcs534wx.py", directory: "/tmp/torchinductor_zeus/ea")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d1011de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d1011de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d1011de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d1011de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 110, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 36, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 29, column: 25, scope: !7)
!22 = !DILocation(line: 31, column: 59, scope: !7)
!23 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 37, column: 25, scope: !26)
!31 = !DILocation(line: 42, column: 26, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 18, scope: !7)
!34 = !DILocation(line: 43, column: 4, scope: !7)
!35 = !DILocation(line: 44, column: 28, scope: !7)
!36 = !DILocation(line: 44, column: 40, scope: !7)
!37 = !DILocation(line: 45, column: 31, scope: !7)
!38 = !DILocation(line: 45, column: 36, scope: !7)
!39 = !DILocation(line: 57, column: 24, scope: !7)
!40 = !DILocation(line: 64, column: 24, scope: !7)
!41 = !DILocation(line: 47, column: 36, scope: !7)
!42 = !DILocation(line: 48, column: 27, scope: !7)
!43 = !DILocation(line: 49, column: 25, scope: !7)
!44 = !DILocation(line: 51, column: 41, scope: !7)
!45 = !DILocation(line: 51, column: 35, scope: !7)
!46 = !DILocation(line: 51, column: 60, scope: !7)
!47 = !DILocation(line: 51, column: 52, scope: !7)
!48 = !DILocation(line: 51, column: 112, scope: !7)
!49 = !DILocation(line: 52, column: 35, scope: !7)
!50 = !DILocation(line: 52, column: 40, scope: !7)
!51 = !DILocation(line: 53, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 52, scope: !7)
!53 = !DILocation(line: 53, column: 112, scope: !7)
!54 = !DILocation(line: 54, column: 35, scope: !7)
!55 = !DILocation(line: 54, column: 40, scope: !7)
!56 = !DILocation(line: 55, column: 39, scope: !7)
!57 = !DILocation(line: 55, column: 56, scope: !7)
!58 = !DILocation(line: 59, column: 24, scope: !7)
!59 = !DILocation(line: 60, column: 24, scope: !7)
!60 = !DILocation(line: 65, column: 24, scope: !7)
!61 = !DILocation(line: 66, column: 24, scope: !7)
!62 = !DILocation(line: 69, column: 24, scope: !7)
!63 = !DILocation(line: 70, column: 24, scope: !7)
!64 = !DILocation(line: 71, column: 24, scope: !7)
!65 = !DILocation(line: 74, column: 48, scope: !7)
!66 = !DILocation(line: 75, column: 56, scope: !7)
!67 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !68)
!68 = !DILocation(line: 76, column: 27, scope: !26)
!69 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !70)
!70 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !71)
!71 = !DILocation(line: 76, column: 27, scope: !24)
!72 = !DILocation(line: 81, column: 26, scope: !7)
!73 = !DILocation(line: 78, column: 20, scope: !7)
!74 = !DILocation(line: 80, column: 20, scope: !7)
!75 = !DILocation(line: 82, column: 4, scope: !7)
!76 = !DILocation(line: 83, column: 28, scope: !7)
!77 = !DILocation(line: 83, column: 40, scope: !7)
!78 = !DILocation(line: 88, column: 45, scope: !7)
!79 = !DILocation(line: 88, column: 39, scope: !7)
!80 = !DILocation(line: 88, column: 56, scope: !7)
!81 = !DILocation(line: 89, column: 35, scope: !7)
!82 = !DILocation(line: 89, column: 40, scope: !7)
!83 = !DILocation(line: 90, column: 24, scope: !7)
!84 = !DILocation(line: 92, column: 24, scope: !7)
!85 = !DILocation(line: 93, column: 24, scope: !7)
!86 = !DILocation(line: 95, column: 29, scope: !7)
!87 = !DILocation(line: 95, column: 53, scope: !7)
!88 = !DILocation(line: 85, column: 27, scope: !7)
!89 = !DILocation(line: 84, column: 4, scope: !7)
