; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_1 = internal constant [8 x i8] c"<module>"
@assertFile_1 = internal constant [95 x i8] c"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor/codecache.py"
@assertMessage_1 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp13 < 288256"
@assertFunc_0 = internal constant [8 x i8] c"<module>"
@assertFile_0 = internal constant [95 x i8] c"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor/codecache.py"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 5, !dbg !10
  %9 = and i32 %8, 7, !dbg !10
  %10 = and i32 %7, 7, !dbg !10
  %11 = shl i32 %7, 3, !dbg !11
  %12 = and i32 %11, 248, !dbg !11
  %13 = or i32 %12, 4, !dbg !11
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !12
  %15 = shl i32 %14, 3, !dbg !13
  %16 = or i32 %15, %9, !dbg !14
  %17 = or i32 %15, %10, !dbg !14
  %18 = sext i32 %16 to i64, !dbg !15
  %19 = getelementptr i64, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = sext i32 %17 to i64, !dbg !15
  %21 = getelementptr i64, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 true) #6, !dbg !16
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 true) #6, !dbg !16
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 true) #6, !dbg !16
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 true) #6, !dbg !16
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 true) #6, !dbg !16
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 true) #6, !dbg !16
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 true) #6, !dbg !16
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 true) #6, !dbg !16
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 true) #6, !dbg !16
  %31 = add i64 %22, 288256, !dbg !17
  %32 = add i64 %30, 288256, !dbg !17
  %33 = icmp slt i64 %22, 0, !dbg !18
  %34 = icmp slt i64 %30, 0, !dbg !18
  %35 = select i1 %33, i64 %31, i64 %22, !dbg !19
  %36 = select i1 %34, i64 %32, i64 %30, !dbg !19
  %37 = icmp ugt i64 %36, 288255, !dbg !20
  %38 = mul i64 %35, 3584, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38
  br label %40, !dbg !22

40:                                               ; preds = %6, %46
  %41 = phi i32 [ 0, %6 ], [ %73, %46 ]
  %42 = phi <8 x float> [ zeroinitializer, %6 ], [ %72, %46 ]
  %43 = or i32 %41, %12, !dbg !23
  %44 = or i32 %41, %13, !dbg !23
  br i1 %37, label %45, label %46, !dbg !24

45:                                               ; preds = %40
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 1892, ptr nonnull @assertFunc_0, i64 1), !dbg !24
  br label %46, !dbg !24

46:                                               ; preds = %45, %40
  %47 = zext nneg i32 %43 to i64, !dbg !25
  %48 = zext nneg i32 %44 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %39, i64 %47, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %39, i64 %48, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %61 = insertelement <8 x i32> poison, i32 %52, i64 0, !dbg !27
  %62 = insertelement <8 x i32> %61, i32 %53, i64 1, !dbg !27
  %63 = insertelement <8 x i32> %62, i32 %54, i64 2, !dbg !27
  %64 = insertelement <8 x i32> %63, i32 %55, i64 3, !dbg !27
  %65 = insertelement <8 x i32> %64, i32 %57, i64 4, !dbg !27
  %66 = insertelement <8 x i32> %65, i32 %58, i64 5, !dbg !27
  %67 = insertelement <8 x i32> %66, i32 %59, i64 6, !dbg !27
  %68 = insertelement <8 x i32> %67, i32 %60, i64 7, !dbg !27
  %69 = bitcast <8 x i32> %68 to <8 x float>, !dbg !27
  %70 = fmul <8 x float> %69, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !28
  %71 = fmul <8 x float> %70, %70, !dbg !29
  %72 = fadd <8 x float> %42, %71, !dbg !30
  %73 = add nuw nsw i32 %41, 256, !dbg !22
  %74 = icmp ult i32 %41, 3328, !dbg !22
  br i1 %74, label %40, label %75, !dbg !22

75:                                               ; preds = %46
  %urem = and i32 %7, 255, !dbg !11
  %shift = shufflevector <8 x float> %72, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %76 = fadd <8 x float> %72, %shift, !dbg !31
  %shift44 = shufflevector <8 x float> %72, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %77 = fadd <8 x float> %shift44, %76, !dbg !31
  %shift45 = shufflevector <8 x float> %72, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %78 = fadd <8 x float> %shift45, %77, !dbg !31
  %shift46 = shufflevector <8 x float> %72, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %79 = fadd <8 x float> %shift46, %78, !dbg !31
  %shift47 = shufflevector <8 x float> %72, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %80 = fadd <8 x float> %shift47, %79, !dbg !31
  %shift48 = shufflevector <8 x float> %72, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %81 = fadd <8 x float> %shift48, %80, !dbg !31
  %shift49 = shufflevector <8 x float> %72, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %82 = fadd <8 x float> %shift49, %81, !dbg !31
  %83 = extractelement <8 x float> %82, i64 0, !dbg !31
  %84 = bitcast float %83 to i32, !dbg !37
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 16, i32 31), !dbg !37
  %86 = bitcast i32 %85 to float, !dbg !37
  %87 = fadd float %83, %86, !dbg !31
  %88 = bitcast float %87 to i32, !dbg !37
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !37
  %90 = bitcast i32 %89 to float, !dbg !37
  %91 = fadd float %87, %90, !dbg !31
  %92 = bitcast float %91 to i32, !dbg !37
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 4, i32 31), !dbg !37
  %94 = bitcast i32 %93 to float, !dbg !37
  %95 = fadd float %91, %94, !dbg !31
  %96 = bitcast float %95 to i32, !dbg !37
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !37
  %98 = bitcast i32 %97 to float, !dbg !37
  %99 = fadd float %95, %98, !dbg !31
  %100 = bitcast float %99 to i32, !dbg !37
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !37
  %102 = bitcast i32 %101 to float, !dbg !37
  %103 = fadd float %99, %102, !dbg !31
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 3.584000e+03) #6, !dbg !39
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 3.584000e+03) #6, !dbg !39
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 3.584000e+03) #6, !dbg !39
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 3.584000e+03) #6, !dbg !39
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 3.584000e+03) #6, !dbg !39
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 3.584000e+03) #6, !dbg !39
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 3.584000e+03) #6, !dbg !39
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 3.584000e+03) #6, !dbg !39
  %112 = fadd float %104, 0x3EE4F8B580000000, !dbg !40
  %113 = mul i32 %16, 3584, !dbg !41
  %114 = zext nneg i32 %urem to i64
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i64 %114
  %116 = zext nneg i32 %12 to i64
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i64 %116
  %118 = getelementptr inbounds <8 x float>, ptr addrspace(3) %117, i64 0, i64 1
  %119 = getelementptr inbounds <8 x float>, ptr addrspace(3) %117, i64 0, i64 2
  %120 = getelementptr inbounds <8 x float>, ptr addrspace(3) %117, i64 0, i64 3
  %121 = getelementptr inbounds <8 x float>, ptr addrspace(3) %117, i64 0, i64 4
  %122 = getelementptr inbounds <8 x float>, ptr addrspace(3) %117, i64 0, i64 5
  %123 = getelementptr inbounds <8 x float>, ptr addrspace(3) %117, i64 0, i64 6
  %124 = getelementptr inbounds <8 x float>, ptr addrspace(3) %117, i64 0, i64 7
  br label %125, !dbg !42

125:                                              ; preds = %75, %__nv_rsqrtf.exit
  %126 = phi i32 [ 0, %75 ], [ %227, %__nv_rsqrtf.exit ]
  %127 = or i32 %126, %12, !dbg !43
  %128 = or i32 %126, %13, !dbg !43
  %129 = or i32 %126, %urem, !dbg !43
  %130 = zext nneg i32 %129 to i64, !dbg !44
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !44
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 true, i32 0, i1 true) #6, !dbg !45
  %133 = bitcast i32 %132 to float, !dbg !45
  br i1 %37, label %134, label %135, !dbg !46

134:                                              ; preds = %125
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 1892, ptr nonnull @assertFunc_1, i64 1), !dbg !46
  br label %135, !dbg !46

135:                                              ; preds = %134, %125
  %136 = zext nneg i32 %127 to i64, !dbg !47
  %137 = zext nneg i32 %128 to i64, !dbg !47
  %138 = getelementptr float, ptr addrspace(1) %39, i64 %136, !dbg !48
  %139 = getelementptr float, ptr addrspace(1) %39, i64 %137, !dbg !48
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !49
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !49
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !49
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !49
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !49
  %145 = bitcast i32 %141 to float, !dbg !49
  %146 = bitcast i32 %142 to float, !dbg !49
  %147 = bitcast i32 %143 to float, !dbg !49
  %148 = bitcast i32 %144 to float, !dbg !49
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !49
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !49
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !49
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !49
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !49
  %154 = bitcast i32 %150 to float, !dbg !49
  %155 = bitcast i32 %151 to float, !dbg !49
  %156 = bitcast i32 %152 to float, !dbg !49
  %157 = bitcast i32 %153 to float, !dbg !49
  %158 = fmul float %145, 0x404DEEEA20000000, !dbg !50
  %159 = fmul float %146, 0x404DEEEA20000000, !dbg !50
  %160 = fmul float %147, 0x404DEEEA20000000, !dbg !50
  %161 = fmul float %148, 0x404DEEEA20000000, !dbg !50
  %162 = fmul float %154, 0x404DEEEA20000000, !dbg !50
  %163 = fmul float %155, 0x404DEEEA20000000, !dbg !50
  %164 = fmul float %156, 0x404DEEEA20000000, !dbg !50
  %165 = fmul float %157, 0x404DEEEA20000000, !dbg !50
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i = icmp eq i32 %166, 0, !dbg !51
  br i1 %.not.i, label %169, label %167, !dbg !51

167:                                              ; preds = %135
  %168 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %112), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

169:                                              ; preds = %135
  %170 = tail call float @llvm.nvvm.rsqrt.approx.f(float %112), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %167, %169
  %.0.i = phi float [ %168, %167 ], [ %170, %169 ], !dbg !51
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %178 = fmul float %158, %.0.i, !dbg !52
  %179 = fmul float %159, %.0.i, !dbg !52
  %180 = fmul float %160, %.0.i, !dbg !52
  %181 = fmul float %161, %.0.i, !dbg !52
  %182 = fmul float %162, %.0.i, !dbg !52
  %183 = fmul float %163, %.0.i, !dbg !52
  %184 = fmul float %164, %.0.i, !dbg !52
  %185 = fmul float %165, %.0.i, !dbg !52
  %186 = fadd float %133, 1.000000e+00, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %187 = insertelement <1 x float> undef, float %186, i64 0, !dbg !54
  store <1 x float> %187, ptr addrspace(3) %115, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %188 = load float, ptr addrspace(3) %117, align 32, !dbg !54
  %189 = load float, ptr addrspace(3) %118, align 4, !dbg !54
  %190 = load float, ptr addrspace(3) %119, align 8, !dbg !54
  %191 = load float, ptr addrspace(3) %120, align 4, !dbg !54
  %192 = load float, ptr addrspace(3) %121, align 16, !dbg !54
  %193 = load float, ptr addrspace(3) %122, align 4, !dbg !54
  %194 = load float, ptr addrspace(3) %123, align 8, !dbg !54
  %195 = load float, ptr addrspace(3) %124, align 4, !dbg !54
  %196 = fmul float %178, %188, !dbg !54
  %197 = fmul float %179, %189, !dbg !54
  %198 = fmul float %180, %190, !dbg !54
  %199 = fmul float %181, %191, !dbg !54
  %200 = fmul float %182, %192, !dbg !54
  %201 = fmul float %183, %193, !dbg !54
  %202 = fmul float %184, %194, !dbg !54
  %203 = fmul float %185, %195, !dbg !54
  %204 = add i32 %127, %113, !dbg !55
  %205 = sext i32 %204 to i64, !dbg !56
  %206 = getelementptr i16, ptr addrspace(1) %3, i64 %205, !dbg !56
  %207 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %196) #6, !dbg !57
  %208 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %197) #6, !dbg !57
  %209 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %198) #6, !dbg !57
  %210 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %199) #6, !dbg !57
  %211 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %200) #6, !dbg !57
  %212 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %201) #6, !dbg !57
  %213 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %202) #6, !dbg !57
  %214 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %203) #6, !dbg !57
  %215 = insertelement <2 x i16> undef, i16 %207, i64 0, !dbg !57
  %216 = insertelement <2 x i16> %215, i16 %208, i64 1, !dbg !57
  %217 = bitcast <2 x i16> %216 to i32, !dbg !57
  %218 = insertelement <2 x i16> undef, i16 %209, i64 0, !dbg !57
  %219 = insertelement <2 x i16> %218, i16 %210, i64 1, !dbg !57
  %220 = bitcast <2 x i16> %219 to i32, !dbg !57
  %221 = insertelement <2 x i16> undef, i16 %211, i64 0, !dbg !57
  %222 = insertelement <2 x i16> %221, i16 %212, i64 1, !dbg !57
  %223 = bitcast <2 x i16> %222 to i32, !dbg !57
  %224 = insertelement <2 x i16> undef, i16 %213, i64 0, !dbg !57
  %225 = insertelement <2 x i16> %224, i16 %214, i64 1, !dbg !57
  %226 = bitcast <2 x i16> %225 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %217, i32 %220, i32 %223, i32 %226, ptr addrspace(1) %206, i1 true) #6, !dbg !57
  %227 = add nuw nsw i32 %126, 256, !dbg !42
  %228 = icmp ult i32 %126, 3328, !dbg !42
  br i1 %228, label %125, label %229, !dbg !42

229:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cumpuhquvpop75y2akhr6lpul5sosmsqycsz36lbhje3533k3abl.py", directory: "/tmp/torchinductor_zeus/um")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 44, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 28, scope: !7)
!13 = !DILocation(line: 21, column: 33, scope: !7)
!14 = !DILocation(line: 22, column: 23, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 32, column: 22, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 34, column: 36, scope: !7)
!20 = !DILocation(line: 35, column: 40, scope: !7)
!21 = !DILocation(line: 36, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 36, scope: !7)
!23 = !DILocation(line: 29, column: 27, scope: !7)
!24 = !DILocation(line: 35, column: 56, scope: !7)
!25 = !DILocation(line: 36, column: 40, scope: !7)
!26 = !DILocation(line: 36, column: 34, scope: !7)
!27 = !DILocation(line: 36, column: 53, scope: !7)
!28 = !DILocation(line: 38, column: 22, scope: !7)
!29 = !DILocation(line: 39, column: 22, scope: !7)
!30 = !DILocation(line: 42, column: 39, scope: !7)
!31 = !DILocation(line: 233, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 243, column: 36, scope: !32, inlinedAt: !36)
!36 = !DILocation(line: 43, column: 25, scope: !32)
!37 = !DILocation(line: 243, column: 36, scope: !34, inlinedAt: !38)
!38 = !DILocation(line: 43, column: 25, scope: !34)
!39 = !DILocation(line: 57, column: 23, scope: !7)
!40 = !DILocation(line: 59, column: 24, scope: !7)
!41 = !DILocation(line: 66, column: 40, scope: !7)
!42 = !DILocation(line: 44, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 27, scope: !7)
!44 = !DILocation(line: 48, column: 35, scope: !7)
!45 = !DILocation(line: 48, column: 40, scope: !7)
!46 = !DILocation(line: 52, column: 58, scope: !7)
!47 = !DILocation(line: 53, column: 41, scope: !7)
!48 = !DILocation(line: 53, column: 35, scope: !7)
!49 = !DILocation(line: 53, column: 55, scope: !7)
!50 = !DILocation(line: 55, column: 24, scope: !7)
!51 = !DILocation(line: 60, column: 30, scope: !7)
!52 = !DILocation(line: 61, column: 24, scope: !7)
!53 = !DILocation(line: 63, column: 24, scope: !7)
!54 = !DILocation(line: 64, column: 24, scope: !7)
!55 = !DILocation(line: 66, column: 35, scope: !7)
!56 = !DILocation(line: 66, column: 29, scope: !7)
!57 = !DILocation(line: 66, column: 53, scope: !7)
!58 = !DILocation(line: 44, column: 4, scope: !7)
