; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8de9de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = lshr i32 %11, 5, !dbg !10
  %urem = and i32 %11, 255, !dbg !10
  %13 = shl nuw nsw i32 %urem, 3, !dbg !10
  %14 = shl nuw nsw i32 %urem, 2, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %16 = mul i32 %15, 2304, !dbg !12
  %17 = add i32 %13, %16, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !15
  %25 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset24 = lshr i32 %21, 16, !dbg !15
  %26 = trunc i32 %extelt.offset24 to i16, !dbg !15
  %27 = trunc i32 %22 to i16, !dbg !15
  %extelt.offset25 = lshr i32 %22, 16, !dbg !15
  %28 = trunc i32 %extelt.offset25 to i16, !dbg !15
  %29 = trunc i32 %23 to i16, !dbg !15
  %extelt.offset26 = lshr i32 %23, 16, !dbg !15
  %30 = trunc i32 %extelt.offset26 to i16, !dbg !15
  %31 = trunc i32 %24 to i16, !dbg !15
  %extelt.offset27 = lshr i32 %24, 16, !dbg !15
  %32 = trunc i32 %extelt.offset27 to i16, !dbg !15
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !16
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !16
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !16
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !16
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !16
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #6, !dbg !16
  %41 = fmul float %33, %33, !dbg !17
  %42 = fmul float %34, %34, !dbg !17
  %43 = fmul float %35, %35, !dbg !17
  %44 = fmul float %36, %36, !dbg !17
  %45 = fmul float %37, %37, !dbg !17
  %46 = fmul float %38, %38, !dbg !17
  %47 = fmul float %39, %39, !dbg !17
  %48 = fmul float %40, %40, !dbg !17
  %49 = or i32 %13, 2048, !dbg !18
  %50 = icmp ult i32 %49, 2304, !dbg !19
  %51 = add i32 %49, %16, !dbg !13
  %52 = sext i32 %51 to i64, !dbg !14
  %53 = getelementptr i16, ptr addrspace(1) %0, i64 %52, !dbg !14
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #6, !dbg !15
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !15
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !15
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !15
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !15
  %59 = trunc i32 %55 to i16, !dbg !15
  %extelt.offset24.1 = lshr i32 %55, 16, !dbg !15
  %60 = trunc i32 %extelt.offset24.1 to i16, !dbg !15
  %61 = trunc i32 %56 to i16, !dbg !15
  %extelt.offset25.1 = lshr i32 %56, 16, !dbg !15
  %62 = trunc i32 %extelt.offset25.1 to i16, !dbg !15
  %63 = trunc i32 %57 to i16, !dbg !15
  %extelt.offset26.1 = lshr i32 %57, 16, !dbg !15
  %64 = trunc i32 %extelt.offset26.1 to i16, !dbg !15
  %65 = trunc i32 %58 to i16, !dbg !15
  %extelt.offset27.1 = lshr i32 %58, 16, !dbg !15
  %66 = trunc i32 %extelt.offset27.1 to i16, !dbg !15
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #6, !dbg !16
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #6, !dbg !16
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #6, !dbg !16
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #6, !dbg !16
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #6, !dbg !16
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #6, !dbg !16
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #6, !dbg !16
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #6, !dbg !16
  %75 = fmul float %67, %67, !dbg !17
  %76 = fmul float %68, %68, !dbg !17
  %77 = fmul float %69, %69, !dbg !17
  %78 = fmul float %70, %70, !dbg !17
  %79 = fmul float %71, %71, !dbg !17
  %80 = fmul float %72, %72, !dbg !17
  %81 = fmul float %73, %73, !dbg !17
  %82 = fmul float %74, %74, !dbg !17
  %83 = select i1 %50, float %75, float -0.000000e+00, !dbg !20
  %84 = fadd float %41, %83, !dbg !20
  %85 = select i1 %50, float %76, float -0.000000e+00, !dbg !20
  %86 = fadd float %42, %85, !dbg !20
  %87 = select i1 %50, float %77, float -0.000000e+00, !dbg !20
  %88 = fadd float %43, %87, !dbg !20
  %89 = select i1 %50, float %78, float -0.000000e+00, !dbg !20
  %90 = fadd float %44, %89, !dbg !20
  %91 = select i1 %50, float %79, float -0.000000e+00, !dbg !20
  %92 = fadd float %45, %91, !dbg !20
  %93 = select i1 %50, float %80, float -0.000000e+00, !dbg !20
  %94 = fadd float %46, %93, !dbg !20
  %95 = select i1 %50, float %81, float -0.000000e+00, !dbg !20
  %96 = fadd float %47, %95, !dbg !20
  %97 = select i1 %50, float %82, float -0.000000e+00, !dbg !20
  %98 = fadd float %48, %97, !dbg !20
  %99 = and i32 %11, 31, !dbg !10
  %100 = and i32 %12, 7, !dbg !10
  %101 = or i32 %13, 4, !dbg !10
  %102 = fadd float %84, %86, !dbg !21
  %103 = fadd float %88, %102, !dbg !21
  %104 = fadd float %90, %103, !dbg !21
  %105 = fadd float %92, %104, !dbg !21
  %106 = fadd float %94, %105, !dbg !21
  %107 = fadd float %96, %106, !dbg !21
  %108 = fadd float %98, %107, !dbg !21
  %109 = bitcast float %108 to i32, !dbg !27
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = fadd float %108, %111, !dbg !21
  %113 = bitcast float %112 to i32, !dbg !27
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !27
  %115 = bitcast i32 %114 to float, !dbg !27
  %116 = fadd float %112, %115, !dbg !21
  %117 = bitcast float %116 to i32, !dbg !27
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = fadd float %116, %119, !dbg !21
  %121 = bitcast float %120 to i32, !dbg !27
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = fadd float %120, %123, !dbg !21
  %125 = bitcast float %124 to i32, !dbg !27
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = fadd float %124, %127, !dbg !21
  %129 = icmp eq i32 %99, 0, !dbg !27
  %130 = zext nneg i32 %100 to i64, !dbg !27
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i64 %130, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, float %128, i1 %129) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %132 = icmp slt i32 %11, 8, !dbg !27
  %133 = sext i32 %11 to i64, !dbg !27
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !27
  %135 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #6, !dbg !27
  %136 = bitcast float %135 to i32, !dbg !27
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !27
  %138 = bitcast i32 %137 to float, !dbg !27
  %139 = fadd float %135, %138, !dbg !21
  %140 = bitcast float %139 to i32, !dbg !27
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !27
  %142 = bitcast i32 %141 to float, !dbg !27
  %143 = fadd float %139, %142, !dbg !21
  %144 = bitcast float %143 to i32, !dbg !27
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !27
  %146 = bitcast i32 %145 to float, !dbg !27
  %147 = fadd float %143, %146, !dbg !21
  %148 = and i32 %11, 7, !dbg !27
  %149 = icmp eq i32 %148, 0, !dbg !27
  %150 = and i1 %132, %149, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, float %147, i1 %150) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %151 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %152 = insertelement <1 x float> undef, float %151, i64 0, !dbg !29
  store <1 x float> %152, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %153 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %154 = sext i32 %15 to i64, !dbg !30
  %155 = getelementptr float, ptr addrspace(1) %4, i64 %154, !dbg !30
  %156 = icmp eq i32 %urem, 0, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %155, i1 %156) #6, !dbg !31
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 2.304000e+03) #6, !dbg !32
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 2.304000e+03) #6, !dbg !32
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 2.304000e+03) #6, !dbg !32
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 2.304000e+03) #6, !dbg !32
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 2.304000e+03) #6, !dbg !32
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 2.304000e+03) #6, !dbg !32
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 2.304000e+03) #6, !dbg !32
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 2.304000e+03) #6, !dbg !32
  %165 = fadd float %157, 0x3EE4F8B580000000, !dbg !33
  br label %166, !dbg !34

166:                                              ; preds = %10, %__nv_rsqrtf.exit75
  %167 = phi i1 [ true, %10 ], [ false, %__nv_rsqrtf.exit75 ]
  %168 = phi i32 [ 0, %10 ], [ 2048, %__nv_rsqrtf.exit75 ]
  %169 = phi <8 x float> [ zeroinitializer, %10 ], [ %273, %__nv_rsqrtf.exit75 ]
  %170 = or i32 %168, %13, !dbg !35
  %171 = or i32 %168, %101, !dbg !35
  %172 = icmp ult i32 %170, 2304, !dbg !36
  %173 = add i32 %170, %16, !dbg !37
  %174 = add i32 %171, %16, !dbg !37
  %175 = sext i32 %173 to i64, !dbg !38
  %176 = getelementptr i16, ptr addrspace(1) %0, i64 %175, !dbg !38
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172) #6, !dbg !39
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !39
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !39
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !39
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !39
  %182 = trunc i32 %178 to i16, !dbg !39
  %extelt.offset20 = lshr i32 %178, 16, !dbg !39
  %183 = trunc i32 %extelt.offset20 to i16, !dbg !39
  %184 = trunc i32 %179 to i16, !dbg !39
  %extelt.offset21 = lshr i32 %179, 16, !dbg !39
  %185 = trunc i32 %extelt.offset21 to i16, !dbg !39
  %186 = trunc i32 %180 to i16, !dbg !39
  %extelt.offset22 = lshr i32 %180, 16, !dbg !39
  %187 = trunc i32 %extelt.offset22 to i16, !dbg !39
  %188 = trunc i32 %181 to i16, !dbg !39
  %extelt.offset23 = lshr i32 %181, 16, !dbg !39
  %189 = trunc i32 %extelt.offset23 to i16, !dbg !39
  %190 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %182) #6, !dbg !40
  %191 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %183) #6, !dbg !40
  %192 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %184) #6, !dbg !40
  %193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %185) #6, !dbg !40
  %194 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %186) #6, !dbg !40
  %195 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %187) #6, !dbg !40
  %196 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %188) #6, !dbg !40
  %197 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #6, !dbg !40
  %198 = zext nneg i32 %170 to i64, !dbg !41
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %198, !dbg !41
  %200 = zext nneg i32 %171 to i64, !dbg !41
  %201 = getelementptr float, ptr addrspace(1) %1, i64 %200, !dbg !41
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %199, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172) #6, !dbg !42
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !42
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !42
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !42
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !42
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172) #6, !dbg !42
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !42
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !42
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !42
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !42
  %212 = insertelement <8 x i32> poison, i32 %203, i64 0, !dbg !42
  %213 = insertelement <8 x i32> %212, i32 %204, i64 1, !dbg !42
  %214 = insertelement <8 x i32> %213, i32 %205, i64 2, !dbg !42
  %215 = insertelement <8 x i32> %214, i32 %206, i64 3, !dbg !42
  %216 = insertelement <8 x i32> %215, i32 %208, i64 4, !dbg !42
  %217 = insertelement <8 x i32> %216, i32 %209, i64 5, !dbg !42
  %218 = insertelement <8 x i32> %217, i32 %210, i64 6, !dbg !42
  %219 = insertelement <8 x i32> %218, i32 %211, i64 7, !dbg !42
  %220 = bitcast <8 x i32> %219 to <8 x float>, !dbg !42
  %221 = getelementptr float, ptr addrspace(1) %2, i64 %175, !dbg !43
  %222 = sext i32 %174 to i64, !dbg !43
  %223 = getelementptr float, ptr addrspace(1) %2, i64 %222, !dbg !43
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %221, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172) #6, !dbg !44
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !44
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !44
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !44
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !44
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %223, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172) #6, !dbg !44
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !44
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !44
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !44
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !44
  %234 = insertelement <8 x i32> poison, i32 %225, i64 0, !dbg !44
  %235 = insertelement <8 x i32> %234, i32 %226, i64 1, !dbg !44
  %236 = insertelement <8 x i32> %235, i32 %227, i64 2, !dbg !44
  %237 = insertelement <8 x i32> %236, i32 %228, i64 3, !dbg !44
  %238 = insertelement <8 x i32> %237, i32 %230, i64 4, !dbg !44
  %239 = insertelement <8 x i32> %238, i32 %231, i64 5, !dbg !44
  %240 = insertelement <8 x i32> %239, i32 %232, i64 6, !dbg !44
  %241 = insertelement <8 x i32> %240, i32 %233, i64 7, !dbg !44
  %242 = bitcast <8 x i32> %241 to <8 x float>, !dbg !44
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %.not.i73 = icmp eq i32 %243, 0, !dbg !45
  br i1 %.not.i73, label %246, label %244, !dbg !45

244:                                              ; preds = %166
  %245 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %165), !dbg !45
  br label %__nv_rsqrtf.exit75, !dbg !45

246:                                              ; preds = %166
  %247 = tail call float @llvm.nvvm.rsqrt.approx.f(float %165), !dbg !45
  br label %__nv_rsqrtf.exit75, !dbg !45

__nv_rsqrtf.exit75:                               ; preds = %244, %246
  %.0.i74 = phi float [ %245, %244 ], [ %247, %246 ], !dbg !45
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %255 = insertelement <8 x float> poison, float %190, i64 0, !dbg !46
  %256 = insertelement <8 x float> %255, float %191, i64 1, !dbg !46
  %257 = insertelement <8 x float> %256, float %192, i64 2, !dbg !46
  %258 = insertelement <8 x float> %257, float %193, i64 3, !dbg !46
  %259 = insertelement <8 x float> %258, float %194, i64 4, !dbg !46
  %260 = insertelement <8 x float> %259, float %195, i64 5, !dbg !46
  %261 = insertelement <8 x float> %260, float %196, i64 6, !dbg !46
  %262 = insertelement <8 x float> %261, float %197, i64 7, !dbg !46
  %263 = insertelement <8 x float> poison, float %.0.i74, i64 0, !dbg !46
  %264 = shufflevector <8 x float> %263, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !46
  %265 = fmul <8 x float> %262, %264, !dbg !46
  %266 = fadd <8 x float> %220, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !47
  %267 = fmul <8 x float> %266, %265, !dbg !48
  %268 = fadd <8 x float> %267, %242, !dbg !49
  %269 = fmul <8 x float> %268, %268, !dbg !50
  %270 = insertelement <8 x i1> poison, i1 %172, i64 0, !dbg !51
  %271 = shufflevector <8 x i1> %270, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !51
  %272 = select <8 x i1> %271, <8 x float> %269, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !51
  %273 = fadd <8 x float> %169, %272, !dbg !51
  br i1 %167, label %166, label %274, !dbg !34

274:                                              ; preds = %__nv_rsqrtf.exit75
  %275 = or i32 %14, 1024, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %shift = shufflevector <8 x float> %273, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %276 = fadd <8 x float> %273, %shift, !dbg !54
  %shift127 = shufflevector <8 x float> %273, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %277 = fadd <8 x float> %shift127, %276, !dbg !54
  %shift128 = shufflevector <8 x float> %273, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %278 = fadd <8 x float> %shift128, %277, !dbg !54
  %shift129 = shufflevector <8 x float> %273, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %279 = fadd <8 x float> %shift129, %278, !dbg !54
  %shift130 = shufflevector <8 x float> %273, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %280 = fadd <8 x float> %shift130, %279, !dbg !54
  %shift131 = shufflevector <8 x float> %273, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %281 = fadd <8 x float> %shift131, %280, !dbg !54
  %shift132 = shufflevector <8 x float> %273, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %282 = fadd <8 x float> %shift132, %281, !dbg !54
  %283 = extractelement <8 x float> %282, i64 0, !dbg !54
  %284 = bitcast float %283 to i32, !dbg !52
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 16, i32 31), !dbg !52
  %286 = bitcast i32 %285 to float, !dbg !52
  %287 = fadd float %283, %286, !dbg !54
  %288 = bitcast float %287 to i32, !dbg !52
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 8, i32 31), !dbg !52
  %290 = bitcast i32 %289 to float, !dbg !52
  %291 = fadd float %287, %290, !dbg !54
  %292 = bitcast float %291 to i32, !dbg !52
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 4, i32 31), !dbg !52
  %294 = bitcast i32 %293 to float, !dbg !52
  %295 = fadd float %291, %294, !dbg !54
  %296 = bitcast float %295 to i32, !dbg !52
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 2, i32 31), !dbg !52
  %298 = bitcast i32 %297 to float, !dbg !52
  %299 = fadd float %295, %298, !dbg !54
  %300 = bitcast float %299 to i32, !dbg !52
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 1, i32 31), !dbg !52
  %302 = bitcast i32 %301 to float, !dbg !52
  %303 = fadd float %299, %302, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, float %303, i1 %129) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %304 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #6, !dbg !52
  %305 = bitcast float %304 to i32, !dbg !52
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 4, i32 31), !dbg !52
  %307 = bitcast i32 %306 to float, !dbg !52
  %308 = fadd float %304, %307, !dbg !54
  %309 = bitcast float %308 to i32, !dbg !52
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 2, i32 31), !dbg !52
  %311 = bitcast i32 %310 to float, !dbg !52
  %312 = fadd float %308, %311, !dbg !54
  %313 = bitcast float %312 to i32, !dbg !52
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 1, i32 31), !dbg !52
  %315 = bitcast i32 %314 to float, !dbg !52
  %316 = fadd float %312, %315, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, float %316, i1 %150) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %317 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %318 = insertelement <1 x float> undef, float %317, i64 0, !dbg !57
  store <1 x float> %318, ptr addrspace(3) @global_smem, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %319 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !57
  %320 = getelementptr float, ptr addrspace(1) %5, i64 %154, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %319, ptr addrspace(1) %320, i1 %156) #6, !dbg !59
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !60
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !60
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !60
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !60
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !60
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !60
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !60
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 2.304000e+03) #6, !dbg !60
  %329 = fadd float %321, 0x3EE4F8B580000000, !dbg !61
  %330 = zext nneg i32 %13 to i64
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i64 %330
  %332 = zext nneg i32 %14 to i64
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i64 %332
  %334 = zext nneg i32 %275 to i64
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i64 %334
  %336 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %333, i64 0, i64 1
  %337 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %333, i64 0, i64 2
  %338 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %333, i64 0, i64 3
  br label %339, !dbg !62

339:                                              ; preds = %274, %__nv_rsqrtf.exit51
  %340 = phi i1 [ true, %274 ], [ false, %__nv_rsqrtf.exit51 ]
  %341 = phi i32 [ 0, %274 ], [ 2048, %__nv_rsqrtf.exit51 ]
  %342 = or i32 %341, %13, !dbg !63
  %343 = or i32 %341, %101, !dbg !63
  %344 = or i32 %341, %14, !dbg !63
  %345 = or i32 %341, %275, !dbg !63
  %346 = icmp ult i32 %342, 2304, !dbg !64
  %347 = icmp ult i32 %344, 2304, !dbg !64
  %348 = icmp ult i32 %345, 2304, !dbg !64
  %349 = add i32 %342, %16, !dbg !65
  %350 = add i32 %343, %16, !dbg !65
  %351 = add i32 %344, %16, !dbg !65
  %352 = add i32 %345, %16, !dbg !65
  %353 = sext i32 %349 to i64, !dbg !66
  %354 = getelementptr i16, ptr addrspace(1) %0, i64 %353, !dbg !66
  %355 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %354, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346) #6, !dbg !67
  %356 = extractvalue { i32, i32, i32, i32 } %355, 0, !dbg !67
  %357 = extractvalue { i32, i32, i32, i32 } %355, 1, !dbg !67
  %358 = extractvalue { i32, i32, i32, i32 } %355, 2, !dbg !67
  %359 = extractvalue { i32, i32, i32, i32 } %355, 3, !dbg !67
  %360 = trunc i32 %356 to i16, !dbg !67
  %extelt.offset = lshr i32 %356, 16, !dbg !67
  %361 = trunc i32 %extelt.offset to i16, !dbg !67
  %362 = trunc i32 %357 to i16, !dbg !67
  %extelt.offset3 = lshr i32 %357, 16, !dbg !67
  %363 = trunc i32 %extelt.offset3 to i16, !dbg !67
  %364 = trunc i32 %358 to i16, !dbg !67
  %extelt.offset4 = lshr i32 %358, 16, !dbg !67
  %365 = trunc i32 %extelt.offset4 to i16, !dbg !67
  %366 = trunc i32 %359 to i16, !dbg !67
  %extelt.offset5 = lshr i32 %359, 16, !dbg !67
  %367 = trunc i32 %extelt.offset5 to i16, !dbg !67
  %368 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #6, !dbg !68
  %369 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #6, !dbg !68
  %370 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %362) #6, !dbg !68
  %371 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #6, !dbg !68
  %372 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %364) #6, !dbg !68
  %373 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #6, !dbg !68
  %374 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %366) #6, !dbg !68
  %375 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %367) #6, !dbg !68
  %376 = zext nneg i32 %342 to i64, !dbg !69
  %377 = getelementptr float, ptr addrspace(1) %1, i64 %376, !dbg !69
  %378 = zext nneg i32 %343 to i64, !dbg !69
  %379 = getelementptr float, ptr addrspace(1) %1, i64 %378, !dbg !69
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %377, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346) #6, !dbg !70
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !70
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !70
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !70
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !70
  %385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %379, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346) #6, !dbg !70
  %386 = extractvalue { i32, i32, i32, i32 } %385, 0, !dbg !70
  %387 = extractvalue { i32, i32, i32, i32 } %385, 1, !dbg !70
  %388 = extractvalue { i32, i32, i32, i32 } %385, 2, !dbg !70
  %389 = extractvalue { i32, i32, i32, i32 } %385, 3, !dbg !70
  %390 = insertelement <8 x i32> poison, i32 %381, i64 0, !dbg !70
  %391 = insertelement <8 x i32> %390, i32 %382, i64 1, !dbg !70
  %392 = insertelement <8 x i32> %391, i32 %383, i64 2, !dbg !70
  %393 = insertelement <8 x i32> %392, i32 %384, i64 3, !dbg !70
  %394 = insertelement <8 x i32> %393, i32 %386, i64 4, !dbg !70
  %395 = insertelement <8 x i32> %394, i32 %387, i64 5, !dbg !70
  %396 = insertelement <8 x i32> %395, i32 %388, i64 6, !dbg !70
  %397 = insertelement <8 x i32> %396, i32 %389, i64 7, !dbg !70
  %398 = bitcast <8 x i32> %397 to <8 x float>, !dbg !70
  %399 = getelementptr float, ptr addrspace(1) %2, i64 %353, !dbg !71
  %400 = sext i32 %350 to i64, !dbg !71
  %401 = getelementptr float, ptr addrspace(1) %2, i64 %400, !dbg !71
  %402 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %399, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346) #6, !dbg !72
  %403 = extractvalue { i32, i32, i32, i32 } %402, 0, !dbg !72
  %404 = extractvalue { i32, i32, i32, i32 } %402, 1, !dbg !72
  %405 = extractvalue { i32, i32, i32, i32 } %402, 2, !dbg !72
  %406 = extractvalue { i32, i32, i32, i32 } %402, 3, !dbg !72
  %407 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %401, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346) #6, !dbg !72
  %408 = extractvalue { i32, i32, i32, i32 } %407, 0, !dbg !72
  %409 = extractvalue { i32, i32, i32, i32 } %407, 1, !dbg !72
  %410 = extractvalue { i32, i32, i32, i32 } %407, 2, !dbg !72
  %411 = extractvalue { i32, i32, i32, i32 } %407, 3, !dbg !72
  %412 = insertelement <8 x i32> poison, i32 %403, i64 0, !dbg !72
  %413 = insertelement <8 x i32> %412, i32 %404, i64 1, !dbg !72
  %414 = insertelement <8 x i32> %413, i32 %405, i64 2, !dbg !72
  %415 = insertelement <8 x i32> %414, i32 %406, i64 3, !dbg !72
  %416 = insertelement <8 x i32> %415, i32 %408, i64 4, !dbg !72
  %417 = insertelement <8 x i32> %416, i32 %409, i64 5, !dbg !72
  %418 = insertelement <8 x i32> %417, i32 %410, i64 6, !dbg !72
  %419 = insertelement <8 x i32> %418, i32 %411, i64 7, !dbg !72
  %420 = bitcast <8 x i32> %419 to <8 x float>, !dbg !72
  %421 = getelementptr float, ptr addrspace(1) %3, i64 %376, !dbg !73
  %422 = getelementptr float, ptr addrspace(1) %3, i64 %378, !dbg !73
  %423 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %421, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346) #6, !dbg !74
  %424 = extractvalue { i32, i32, i32, i32 } %423, 0, !dbg !74
  %425 = extractvalue { i32, i32, i32, i32 } %423, 1, !dbg !74
  %426 = extractvalue { i32, i32, i32, i32 } %423, 2, !dbg !74
  %427 = extractvalue { i32, i32, i32, i32 } %423, 3, !dbg !74
  %428 = bitcast i32 %424 to float, !dbg !74
  %429 = bitcast i32 %425 to float, !dbg !74
  %430 = bitcast i32 %426 to float, !dbg !74
  %431 = bitcast i32 %427 to float, !dbg !74
  %432 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %422, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346) #6, !dbg !74
  %433 = extractvalue { i32, i32, i32, i32 } %432, 0, !dbg !74
  %434 = extractvalue { i32, i32, i32, i32 } %432, 1, !dbg !74
  %435 = extractvalue { i32, i32, i32, i32 } %432, 2, !dbg !74
  %436 = extractvalue { i32, i32, i32, i32 } %432, 3, !dbg !74
  %437 = bitcast i32 %433 to float, !dbg !74
  %438 = bitcast i32 %434 to float, !dbg !74
  %439 = bitcast i32 %435 to float, !dbg !74
  %440 = bitcast i32 %436 to float, !dbg !74
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %.not.i = icmp eq i32 %441, 0, !dbg !75
  br i1 %.not.i, label %444, label %442, !dbg !75

442:                                              ; preds = %339
  %443 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %165), !dbg !75
  br label %__nv_rsqrtf.exit, !dbg !75

444:                                              ; preds = %339
  %445 = tail call float @llvm.nvvm.rsqrt.approx.f(float %165), !dbg !75
  br label %__nv_rsqrtf.exit, !dbg !75

__nv_rsqrtf.exit:                                 ; preds = %442, %444
  %.0.i = phi float [ %443, %442 ], [ %445, %444 ], !dbg !75
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %450 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %453 = insertelement <8 x float> poison, float %368, i64 0, !dbg !76
  %454 = insertelement <8 x float> %453, float %369, i64 1, !dbg !76
  %455 = insertelement <8 x float> %454, float %370, i64 2, !dbg !76
  %456 = insertelement <8 x float> %455, float %371, i64 3, !dbg !76
  %457 = insertelement <8 x float> %456, float %372, i64 4, !dbg !76
  %458 = insertelement <8 x float> %457, float %373, i64 5, !dbg !76
  %459 = insertelement <8 x float> %458, float %374, i64 6, !dbg !76
  %460 = insertelement <8 x float> %459, float %375, i64 7, !dbg !76
  %461 = insertelement <8 x float> poison, float %.0.i, i64 0, !dbg !76
  %462 = shufflevector <8 x float> %461, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !76
  %463 = fmul <8 x float> %460, %462, !dbg !76
  %464 = fadd <8 x float> %398, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !77
  %465 = fmul <8 x float> %464, %463, !dbg !78
  %466 = fadd <8 x float> %465, %420, !dbg !79
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %.not.i49 = icmp eq i32 %467, 0, !dbg !80
  br i1 %.not.i49, label %470, label %468, !dbg !80

468:                                              ; preds = %__nv_rsqrtf.exit
  %469 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %329), !dbg !80
  br label %__nv_rsqrtf.exit51, !dbg !80

470:                                              ; preds = %__nv_rsqrtf.exit
  %471 = tail call float @llvm.nvvm.rsqrt.approx.f(float %329), !dbg !80
  br label %__nv_rsqrtf.exit51, !dbg !80

__nv_rsqrtf.exit51:                               ; preds = %468, %470
  %.0.i50 = phi float [ %469, %468 ], [ %471, %470 ], !dbg !80
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %479 = insertelement <8 x float> poison, float %.0.i50, i64 0, !dbg !81
  %480 = shufflevector <8 x float> %479, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !81
  %481 = fmul <8 x float> %466, %480, !dbg !81
  %482 = fadd float %428, 1.000000e+00, !dbg !82
  %483 = fadd float %429, 1.000000e+00, !dbg !82
  %484 = fadd float %430, 1.000000e+00, !dbg !82
  %485 = fadd float %431, 1.000000e+00, !dbg !82
  %486 = fadd float %437, 1.000000e+00, !dbg !82
  %487 = fadd float %438, 1.000000e+00, !dbg !82
  %488 = fadd float %439, 1.000000e+00, !dbg !82
  %489 = fadd float %440, 1.000000e+00, !dbg !82
  %490 = extractelement <8 x float> %481, i64 0, !dbg !83
  %491 = fmul float %482, %490, !dbg !83
  %492 = extractelement <8 x float> %481, i64 1, !dbg !83
  %493 = fmul float %483, %492, !dbg !83
  %494 = extractelement <8 x float> %481, i64 2, !dbg !83
  %495 = fmul float %484, %494, !dbg !83
  %496 = extractelement <8 x float> %481, i64 3, !dbg !83
  %497 = fmul float %485, %496, !dbg !83
  %498 = extractelement <8 x float> %481, i64 4, !dbg !83
  %499 = fmul float %486, %498, !dbg !83
  %500 = extractelement <8 x float> %481, i64 5, !dbg !83
  %501 = fmul float %487, %500, !dbg !83
  %502 = extractelement <8 x float> %481, i64 6, !dbg !83
  %503 = fmul float %488, %502, !dbg !83
  %504 = extractelement <8 x float> %481, i64 7, !dbg !83
  %505 = fmul float %489, %504, !dbg !83
  %506 = sext i32 %351 to i64, !dbg !84
  %507 = getelementptr float, ptr addrspace(1) %6, i64 %506, !dbg !84
  %508 = sext i32 %352 to i64, !dbg !84
  %509 = getelementptr float, ptr addrspace(1) %6, i64 %508, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  store <8 x float> %481, ptr addrspace(3) %331, align 32, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %510 = load <4 x i32>, ptr addrspace(3) %335, align 16, !dbg !85
  %.extract = load i32, ptr addrspace(3) %333, align 16, !dbg !85
  %.extract7 = load i32, ptr addrspace(3) %336, align 4, !dbg !85
  %.extract9 = load i32, ptr addrspace(3) %337, align 8, !dbg !85
  %.extract11 = load i32, ptr addrspace(3) %338, align 4, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract9, i32 %.extract11, ptr addrspace(1) %507, i1 %347) #6, !dbg !85
  %.extract13 = extractelement <4 x i32> %510, i64 0, !dbg !85
  %.extract15 = extractelement <4 x i32> %510, i64 1, !dbg !85
  %.extract17 = extractelement <4 x i32> %510, i64 2, !dbg !85
  %.extract19 = extractelement <4 x i32> %510, i64 3, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract15, i32 %.extract17, i32 %.extract19, ptr addrspace(1) %509, i1 %348) #6, !dbg !85
  %511 = getelementptr i16, ptr addrspace(1) %7, i64 %353, !dbg !86
  %512 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %491) #6, !dbg !87
  %513 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %493) #6, !dbg !87
  %514 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %495) #6, !dbg !87
  %515 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %497) #6, !dbg !87
  %516 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %499) #6, !dbg !87
  %517 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %501) #6, !dbg !87
  %518 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #6, !dbg !87
  %519 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #6, !dbg !87
  %520 = insertelement <2 x i16> undef, i16 %512, i64 0, !dbg !87
  %521 = insertelement <2 x i16> %520, i16 %513, i64 1, !dbg !87
  %522 = bitcast <2 x i16> %521 to i32, !dbg !87
  %523 = insertelement <2 x i16> undef, i16 %514, i64 0, !dbg !87
  %524 = insertelement <2 x i16> %523, i16 %515, i64 1, !dbg !87
  %525 = bitcast <2 x i16> %524 to i32, !dbg !87
  %526 = insertelement <2 x i16> undef, i16 %516, i64 0, !dbg !87
  %527 = insertelement <2 x i16> %526, i16 %517, i64 1, !dbg !87
  %528 = bitcast <2 x i16> %527 to i32, !dbg !87
  %529 = insertelement <2 x i16> undef, i16 %518, i64 0, !dbg !87
  %530 = insertelement <2 x i16> %529, i16 %519, i64 1, !dbg !87
  %531 = bitcast <2 x i16> %530 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %522, i32 %525, i32 %528, i32 %531, ptr addrspace(1) %511, i1 %346) #6, !dbg !87
  br i1 %340, label %339, label %532, !dbg !62

532:                                              ; preds = %__nv_rsqrtf.exit51
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cpniiclqj5hgdaohk5plfo43z2wqn6bur2c2zjxpkht6wpo5wscn.py", directory: "/tmp/torchinductor_zeus/pn")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8de9de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8de9de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8de9de", linkageName: "triton__0d1d2d3d4d5d6d7d8de9de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 37, column: 28, scope: !7)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 49, column: 22, scope: !7)
!33 = !DILocation(line: 51, column: 23, scope: !7)
!34 = !DILocation(line: 40, column: 36, scope: !7)
!35 = !DILocation(line: 41, column: 27, scope: !7)
!36 = !DILocation(line: 42, column: 25, scope: !7)
!37 = !DILocation(line: 44, column: 40, scope: !7)
!38 = !DILocation(line: 44, column: 34, scope: !7)
!39 = !DILocation(line: 44, column: 51, scope: !7)
!40 = !DILocation(line: 44, column: 102, scope: !7)
!41 = !DILocation(line: 45, column: 35, scope: !7)
!42 = !DILocation(line: 45, column: 40, scope: !7)
!43 = !DILocation(line: 46, column: 35, scope: !7)
!44 = !DILocation(line: 46, column: 52, scope: !7)
!45 = !DILocation(line: 52, column: 30, scope: !7)
!46 = !DILocation(line: 53, column: 23, scope: !7)
!47 = !DILocation(line: 55, column: 24, scope: !7)
!48 = !DILocation(line: 56, column: 24, scope: !7)
!49 = !DILocation(line: 59, column: 24, scope: !7)
!50 = !DILocation(line: 60, column: 24, scope: !7)
!51 = !DILocation(line: 63, column: 40, scope: !7)
!52 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !53)
!53 = !DILocation(line: 64, column: 27, scope: !24)
!54 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !55)
!55 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !56)
!56 = !DILocation(line: 64, column: 27, scope: !22)
!57 = !DILocation(line: 64, column: 30, scope: !7)
!58 = !DILocation(line: 65, column: 25, scope: !7)
!59 = !DILocation(line: 65, column: 37, scope: !7)
!60 = !DILocation(line: 87, column: 24, scope: !7)
!61 = !DILocation(line: 88, column: 24, scope: !7)
!62 = !DILocation(line: 66, column: 36, scope: !7)
!63 = !DILocation(line: 67, column: 27, scope: !7)
!64 = !DILocation(line: 68, column: 25, scope: !7)
!65 = !DILocation(line: 70, column: 41, scope: !7)
!66 = !DILocation(line: 70, column: 35, scope: !7)
!67 = !DILocation(line: 70, column: 52, scope: !7)
!68 = !DILocation(line: 70, column: 104, scope: !7)
!69 = !DILocation(line: 71, column: 35, scope: !7)
!70 = !DILocation(line: 71, column: 40, scope: !7)
!71 = !DILocation(line: 72, column: 35, scope: !7)
!72 = !DILocation(line: 72, column: 52, scope: !7)
!73 = !DILocation(line: 73, column: 35, scope: !7)
!74 = !DILocation(line: 73, column: 40, scope: !7)
!75 = !DILocation(line: 79, column: 30, scope: !7)
!76 = !DILocation(line: 80, column: 24, scope: !7)
!77 = !DILocation(line: 82, column: 24, scope: !7)
!78 = !DILocation(line: 83, column: 24, scope: !7)
!79 = !DILocation(line: 86, column: 24, scope: !7)
!80 = !DILocation(line: 89, column: 30, scope: !7)
!81 = !DILocation(line: 90, column: 24, scope: !7)
!82 = !DILocation(line: 91, column: 24, scope: !7)
!83 = !DILocation(line: 92, column: 24, scope: !7)
!84 = !DILocation(line: 94, column: 29, scope: !7)
!85 = !DILocation(line: 94, column: 53, scope: !7)
!86 = !DILocation(line: 95, column: 29, scope: !7)
!87 = !DILocation(line: 95, column: 53, scope: !7)
!88 = !DILocation(line: 66, column: 4, scope: !7)
