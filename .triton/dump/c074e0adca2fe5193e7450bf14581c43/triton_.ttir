module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10d11de12de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32>
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_3 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_4 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %3 = arith.muli %0, %c2304_i32 : i32
    %4 = tt.splat %3 : (i32) -> tensor<1x2048xi32>
    %5 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %6 = scf.for %arg13 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg14 = %cst_5) -> (tensor<1x2048xf32>)  : i32 {
      %41 = tt.splat %arg13 : (i32) -> tensor<1x2048xi32>
      %42 = arith.addi %41, %2 : tensor<1x2048xi32>
      %43 = arith.cmpi slt, %42, %cst_4 : tensor<1x2048xi32>
      %44 = arith.addi %42, %4 : tensor<1x2048xi32>
      %45 = tt.addptr %5, %44 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %46 = tt.load %45, %43, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %47 = arith.extf %46 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %48 = arith.mulf %47, %47 : tensor<1x2048xf32>
      %49 = arith.addf %arg14, %48 : tensor<1x2048xf32>
      %50 = arith.select %43, %49, %arg14 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %50 : tensor<1x2048xf32>
    }
    %7 = "tt.reduce"(%6) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32, %arg14: f32):
      %41 = arith.addf %arg13, %arg14 : f32
      tt.reduce.return %41 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %8 = tt.expand_dims %7 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %9 = arith.divf %8, %cst_3 : tensor<1x1xf32>
    %10 = arith.addf %9, %cst_2 : tensor<1x1xf32>
    %11 = tt.extern_elementwise %10 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
    gpu.barrier
    %12 = tt.addptr %arg0, %0 : !tt.ptr<f32, 1>, i32
    %13 = tt.splat %12 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %13, %11 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %14 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %15 = tt.splat %14 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %16 = tt.load %15 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %17 = arith.muli %0, %c2304_i32 : i32
    %18 = tt.splat %17 : (i32) -> tensor<1x2048xi32>
    %19 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %20 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %21 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %22 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %23 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %24 = tt.broadcast %11 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %25 = tt.broadcast %16 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %26 = tt.splat %arg9 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %27 = scf.for %arg13 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg14 = %cst_5) -> (tensor<1x2048xf32>)  : i32 {
      %41 = tt.splat %arg13 : (i32) -> tensor<1x2048xi32>
      %42 = arith.addi %41, %2 : tensor<1x2048xi32>
      %43 = arith.cmpi slt, %42, %cst_4 : tensor<1x2048xi32>
      %44 = arith.addi %42, %18 : tensor<1x2048xi32>
      %45 = tt.addptr %19, %44 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %46 = tt.load %45, %43, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %47 = arith.extf %46 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %48 = tt.addptr %20, %42 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %49 = tt.load %48, %43, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %50 = tt.addptr %21, %44 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %51 = tt.load %50, %43, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %52 = arith.extf %51 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %53 = tt.addptr %22, %42 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %54 = tt.load %53, %43, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %55 = tt.addptr %23, %44 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %56 = tt.load %55, %43, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %57 = arith.mulf %47, %24 : tensor<1x2048xf32>
      %58 = arith.addf %49, %cst_1 : tensor<1x2048xf32>
      %59 = arith.mulf %57, %58 : tensor<1x2048xf32>
      %60 = arith.mulf %52, %25 : tensor<1x2048xf32>
      %61 = arith.addf %54, %cst_1 : tensor<1x2048xf32>
      %62 = arith.mulf %60, %61 : tensor<1x2048xf32>
      %63 = arith.mulf %56, %cst_0 : tensor<1x2048xf32>
      %64 = arith.addf %62, %63 : tensor<1x2048xf32>
      %65 = arith.addf %59, %64 : tensor<1x2048xf32>
      %66 = arith.mulf %65, %65 : tensor<1x2048xf32>
      %67 = arith.addf %arg14, %66 : tensor<1x2048xf32>
      %68 = arith.select %43, %67, %arg14 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %69 = tt.addptr %26, %44 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      tt.store %69, %65, %43 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32>
      scf.yield %68 : tensor<1x2048xf32>
    }
    %28 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32, %arg14: f32):
      %41 = arith.addf %arg13, %arg14 : f32
      tt.reduce.return %41 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %29 = tt.expand_dims %28 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %30 = arith.divf %29, %cst_3 : tensor<1x1xf32>
    %31 = arith.addf %30, %cst_2 : tensor<1x1xf32>
    %32 = tt.extern_elementwise %31 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
    gpu.barrier
    %33 = tt.addptr %arg1, %0 : !tt.ptr<f32, 1>, i32
    %34 = tt.splat %33 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %34, %32 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %35 = arith.muli %0, %c2304_i32 : i32
    %36 = tt.splat %35 : (i32) -> tensor<1x2048xi32>
    %37 = tt.splat %arg9 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %38 = tt.splat %arg8 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %39 = tt.broadcast %32 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %40 = tt.splat %arg10 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg13 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %41 = tt.splat %arg13 : (i32) -> tensor<1x2048xi32>
      %42 = arith.addi %41, %2 : tensor<1x2048xi32>
      %43 = arith.cmpi slt, %42, %cst_4 : tensor<1x2048xi32>
      %44 = arith.addi %42, %36 : tensor<1x2048xi32>
      %45 = tt.addptr %37, %44 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %46 = tt.load %45, %43, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %47 = tt.addptr %38, %42 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %48 = tt.load %47, %43, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %49 = arith.mulf %46, %39 : tensor<1x2048xf32>
      %50 = arith.addf %48, %cst_1 : tensor<1x2048xf32>
      %51 = arith.mulf %49, %50 : tensor<1x2048xf32>
      %52 = tt.addptr %40, %44 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %53 = arith.truncf %51 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %52, %53, %43 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
