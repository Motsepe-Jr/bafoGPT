; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = and i32 %9, 3, !dbg !8
  %urem = and i32 %7, 127, !dbg !8
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %12 = icmp slt i32 %11, 2304, !dbg !10
  %13 = mul nuw nsw i32 %urem, 2304, !dbg !11
  %14 = add i32 %11, %13, !dbg !12
  %15 = add i32 %14, 294912, !dbg !12
  %16 = add i32 %14, 589824, !dbg !12
  %17 = add i32 %14, 884736, !dbg !12
  %18 = sext i32 %14 to i64, !dbg !13
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !13
  %20 = sext i32 %15 to i64, !dbg !13
  %21 = getelementptr i16, ptr addrspace(1) %0, i64 %20, !dbg !13
  %22 = sext i32 %16 to i64, !dbg !13
  %23 = getelementptr i16, ptr addrspace(1) %0, i64 %22, !dbg !13
  %24 = sext i32 %17 to i64, !dbg !13
  %25 = getelementptr i16, ptr addrspace(1) %0, i64 %24, !dbg !13
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %19, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %21, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %23, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %25, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #3, !dbg !15
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #3, !dbg !15
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #3, !dbg !15
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #3, !dbg !15
  %34 = getelementptr i16, ptr addrspace(1) %1, i64 %18, !dbg !16
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %20, !dbg !16
  %36 = getelementptr i16, ptr addrspace(1) %1, i64 %22, !dbg !16
  %37 = getelementptr i16, ptr addrspace(1) %1, i64 %24, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %34, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %35, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %36, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %37, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !18
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #3, !dbg !18
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !18
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #3, !dbg !18
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !19
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !19
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %54 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !20
  %55 = insertelement <2 x i32> %54, i32 %51, i64 1, !dbg !20
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !20
  %57 = insertelement <2 x float> poison, float %30, i64 0, !dbg !21
  %58 = insertelement <2 x float> %57, float %31, i64 1, !dbg !21
  %59 = insertelement <2 x float> poison, float %42, i64 0, !dbg !21
  %60 = insertelement <2 x float> %59, float %43, i64 1, !dbg !21
  %61 = fadd <2 x float> %58, %60, !dbg !21
  %62 = fmul <2 x float> %61, %56, !dbg !22
  %63 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !20
  %64 = insertelement <2 x i32> %63, i32 %53, i64 1, !dbg !20
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !20
  %66 = insertelement <2 x float> poison, float %32, i64 0, !dbg !21
  %67 = insertelement <2 x float> %66, float %33, i64 1, !dbg !21
  %68 = insertelement <2 x float> poison, float %44, i64 0, !dbg !21
  %69 = insertelement <2 x float> %68, float %45, i64 1, !dbg !21
  %70 = fadd <2 x float> %67, %69, !dbg !21
  %71 = fmul <2 x float> %70, %65, !dbg !22
  %shift = shufflevector <2 x float> %62, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %72 = fadd <2 x float> %62, %shift, !dbg !23
  %73 = fadd <2 x float> %72, %71, !dbg !23
  %shift1 = shufflevector <2 x float> %71, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %74 = fadd <2 x float> %73, %shift1, !dbg !23
  %75 = extractelement <2 x float> %74, i64 0, !dbg !23
  %76 = select i1 %12, float %75, float 0.000000e+00, !dbg !23
  %77 = bitcast float %76 to i32, !dbg !29
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = fadd float %76, %79, !dbg !23
  %81 = bitcast float %80 to i32, !dbg !29
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !29
  %83 = bitcast i32 %82 to float, !dbg !29
  %84 = fadd float %80, %83, !dbg !23
  %85 = bitcast float %84 to i32, !dbg !29
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = fadd float %84, %87, !dbg !23
  %89 = bitcast float %88 to i32, !dbg !29
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = fadd float %88, %91, !dbg !23
  %93 = bitcast float %92 to i32, !dbg !29
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !29
  %95 = bitcast i32 %94 to float, !dbg !29
  %96 = fadd float %92, %95, !dbg !23
  %97 = icmp eq i32 %8, 0, !dbg !29
  %98 = zext nneg i32 %10 to i64, !dbg !29
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i64 %98, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, float %96, i1 %97) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %100 = icmp slt i32 %7, 4, !dbg !29
  %101 = sext i32 %7 to i64, !dbg !29
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i64 %101, !dbg !29
  %103 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %102, i1 %100) #3, !dbg !29
  %104 = bitcast float %103 to i32, !dbg !29
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !29
  %106 = bitcast i32 %105 to float, !dbg !29
  %107 = fadd float %103, %106, !dbg !23
  %108 = bitcast float %107 to i32, !dbg !29
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = fadd float %107, %110, !dbg !23
  %112 = and i32 %7, 3, !dbg !29
  %113 = icmp eq i32 %112, 0, !dbg !29
  %114 = and i1 %100, %113, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, float %111, i1 %114) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %115 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %116 = fadd float %115, 0.000000e+00, !dbg !31
  %117 = sext i32 %11 to i64, !dbg !35
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !35
  %119 = icmp eq i32 %urem, 0, !dbg !36
  %120 = bitcast float %116 to i32, !dbg !36
  %121 = and i1 %119, %12, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %118, i1 %121) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cjnbjgyivkjagsiv6axvv4axytr3o3nmonuwlzhbhbt4g4pzvmvm.py", directory: "/tmp/torchinductor_zeus/jn")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 26, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 25, column: 21, scope: !5)
!11 = !DILocation(line: 30, column: 41, scope: !5)
!12 = !DILocation(line: 30, column: 36, scope: !5)
!13 = !DILocation(line: 30, column: 30, scope: !5)
!14 = !DILocation(line: 30, column: 47, scope: !5)
!15 = !DILocation(line: 30, column: 76, scope: !5)
!16 = !DILocation(line: 31, column: 30, scope: !5)
!17 = !DILocation(line: 31, column: 47, scope: !5)
!18 = !DILocation(line: 31, column: 76, scope: !5)
!19 = !DILocation(line: 32, column: 30, scope: !5)
!20 = !DILocation(line: 32, column: 47, scope: !5)
!21 = !DILocation(line: 35, column: 18, scope: !5)
!22 = !DILocation(line: 36, column: 18, scope: !5)
!23 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !5, file: !25, discriminator: 0)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 39, column: 58, scope: !24)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 39, column: 58, scope: !26)
!31 = !DILocation(line: 8, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !5, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor")
!34 = !DILocation(line: 39, column: 45, scope: !32)
!35 = !DILocation(line: 40, column: 25, scope: !5)
!36 = !DILocation(line: 40, column: 37, scope: !5)
!37 = !DILocation(line: 40, column: 4, scope: !5)
