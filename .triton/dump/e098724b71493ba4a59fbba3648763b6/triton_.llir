; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_1 = internal constant [8 x i8] c"<module>"
@assertFile_1 = internal constant [95 x i8] c"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor/codecache.py"
@assertMessage_1 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp13 < 288256"
@assertFunc_0 = internal constant [8 x i8] c"<module>"
@assertFile_0 = internal constant [95 x i8] c"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor/codecache.py"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = and i32 %9, 7, !dbg !10
  %urem = shl i32 %7, 2, !dbg !10
  %11 = and i32 %urem, 1020, !dbg !10
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %13 = sext i32 %12 to i64, !dbg !12
  %14 = getelementptr i64, ptr addrspace(1) %0, i64 %13, !dbg !12
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 true) #6, !dbg !13
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 true) #6, !dbg !13
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 true) #6, !dbg !13
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 true) #6, !dbg !13
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 true) #6, !dbg !13
  %20 = add i64 %15, 288256, !dbg !14
  %21 = add i64 %19, 288256, !dbg !14
  %22 = icmp slt i64 %15, 0, !dbg !15
  %23 = icmp slt i64 %19, 0, !dbg !15
  %24 = select i1 %22, i64 %20, i64 %15, !dbg !16
  %25 = select i1 %23, i64 %21, i64 %19, !dbg !16
  %26 = icmp ugt i64 %25, 288255, !dbg !17
  %27 = mul i64 %24, 2304, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27
  br i1 %26, label %.split.us.preheader, label %.split.preheader, !dbg !19

.split.preheader:                                 ; preds = %6
  %29 = zext nneg i32 %11 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %28, i64 %29, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %36 = or i32 %11, 1024, !dbg !23
  %37 = zext nneg i32 %36 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %28, i64 %37, !dbg !21
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %44 = or i32 %11, 2048, !dbg !23
  %45 = icmp ult i32 %44, 2304, !dbg !24
  %46 = zext nneg i32 %44 to i64, !dbg !20
  %47 = getelementptr float, ptr addrspace(1) %28, i64 %46, !dbg !21
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #6, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !22
  %53 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !22
  %54 = insertelement <4 x i32> %53, i32 %33, i64 1, !dbg !22
  %55 = insertelement <4 x i32> %54, i32 %34, i64 2, !dbg !22
  %56 = insertelement <4 x i32> %55, i32 %35, i64 3, !dbg !22
  %57 = bitcast <4 x i32> %56 to <4 x float>, !dbg !22
  %58 = fmul <4 x float> %57, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !25
  %59 = fmul <4 x float> %58, %58, !dbg !26
  %60 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !22
  %61 = insertelement <4 x i32> %60, i32 %41, i64 1, !dbg !22
  %62 = insertelement <4 x i32> %61, i32 %42, i64 2, !dbg !22
  %63 = insertelement <4 x i32> %62, i32 %43, i64 3, !dbg !22
  %64 = bitcast <4 x i32> %63 to <4 x float>, !dbg !22
  %65 = fmul <4 x float> %64, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !25
  %66 = fmul <4 x float> %65, %65, !dbg !26
  %67 = fadd <4 x float> %59, %66, !dbg !27
  %68 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !22
  %69 = insertelement <4 x i32> %68, i32 %50, i64 1, !dbg !22
  %70 = insertelement <4 x i32> %69, i32 %51, i64 2, !dbg !22
  %71 = insertelement <4 x i32> %70, i32 %52, i64 3, !dbg !22
  %72 = bitcast <4 x i32> %71 to <4 x float>, !dbg !22
  %73 = fmul <4 x float> %72, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !25
  %74 = fmul <4 x float> %73, %73, !dbg !26
  %75 = insertelement <4 x i1> poison, i1 %45, i64 0, !dbg !27
  %76 = shufflevector <4 x i1> %75, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !27
  %77 = select <4 x i1> %76, <4 x float> %74, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !27
  %78 = fadd <4 x float> %67, %77, !dbg !27
  br label %.split12.us, !dbg !28

.split.us.preheader:                              ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 1892, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  %79 = zext nneg i32 %11 to i64, !dbg !20
  %80 = getelementptr float, ptr addrspace(1) %28, i64 %79, !dbg !21
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !22
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !22
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !22
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !22
  %86 = or i32 %11, 1024, !dbg !23
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 1892, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  %87 = zext nneg i32 %86 to i64, !dbg !20
  %88 = getelementptr float, ptr addrspace(1) %28, i64 %87, !dbg !21
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !22
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !22
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !22
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !22
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !22
  %94 = or i32 %11, 2048, !dbg !23
  %95 = icmp ult i32 %94, 2304, !dbg !24
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 1892, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  %96 = zext nneg i32 %94 to i64, !dbg !20
  %97 = getelementptr float, ptr addrspace(1) %28, i64 %96, !dbg !21
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #6, !dbg !22
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !22
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !22
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !22
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !22
  %103 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !22
  %104 = insertelement <4 x i32> %103, i32 %83, i64 1, !dbg !22
  %105 = insertelement <4 x i32> %104, i32 %84, i64 2, !dbg !22
  %106 = insertelement <4 x i32> %105, i32 %85, i64 3, !dbg !22
  %107 = bitcast <4 x i32> %106 to <4 x float>, !dbg !22
  %108 = fmul <4 x float> %107, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !25
  %109 = fmul <4 x float> %108, %108, !dbg !26
  %110 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !22
  %111 = insertelement <4 x i32> %110, i32 %91, i64 1, !dbg !22
  %112 = insertelement <4 x i32> %111, i32 %92, i64 2, !dbg !22
  %113 = insertelement <4 x i32> %112, i32 %93, i64 3, !dbg !22
  %114 = bitcast <4 x i32> %113 to <4 x float>, !dbg !22
  %115 = fmul <4 x float> %114, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !25
  %116 = fmul <4 x float> %115, %115, !dbg !26
  %117 = fadd <4 x float> %109, %116, !dbg !27
  %118 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !22
  %119 = insertelement <4 x i32> %118, i32 %100, i64 1, !dbg !22
  %120 = insertelement <4 x i32> %119, i32 %101, i64 2, !dbg !22
  %121 = insertelement <4 x i32> %120, i32 %102, i64 3, !dbg !22
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !22
  %123 = fmul <4 x float> %122, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !25
  %124 = fmul <4 x float> %123, %123, !dbg !26
  %125 = insertelement <4 x i1> poison, i1 %95, i64 0, !dbg !27
  %126 = shufflevector <4 x i1> %125, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !27
  %127 = select <4 x i1> %126, <4 x float> %124, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !27
  %128 = fadd <4 x float> %117, %127, !dbg !27
  br label %.split12.us, !dbg !28

.split12.us:                                      ; preds = %.split.preheader, %.split.us.preheader
  %.pre-phi = phi i64 [ %29, %.split.preheader ], [ %79, %.split.us.preheader ], !dbg !32
  %129 = phi <4 x float> [ %78, %.split.preheader ], [ %128, %.split.us.preheader ]
  %shift = shufflevector <4 x float> %129, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !33
  %130 = fadd <4 x float> %129, %shift, !dbg !33
  %shift22 = shufflevector <4 x float> %129, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !33
  %131 = fadd <4 x float> %shift22, %130, !dbg !33
  %shift23 = shufflevector <4 x float> %129, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !33
  %132 = fadd <4 x float> %shift23, %131, !dbg !33
  %133 = extractelement <4 x float> %132, i64 0, !dbg !33
  %134 = bitcast float %133 to i32, !dbg !28
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 16, i32 31), !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = fadd float %133, %136, !dbg !33
  %138 = bitcast float %137 to i32, !dbg !28
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 8, i32 31), !dbg !28
  %140 = bitcast i32 %139 to float, !dbg !28
  %141 = fadd float %137, %140, !dbg !33
  %142 = bitcast float %141 to i32, !dbg !28
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 4, i32 31), !dbg !28
  %144 = bitcast i32 %143 to float, !dbg !28
  %145 = fadd float %141, %144, !dbg !33
  %146 = bitcast float %145 to i32, !dbg !28
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 2, i32 31), !dbg !28
  %148 = bitcast i32 %147 to float, !dbg !28
  %149 = fadd float %145, %148, !dbg !33
  %150 = bitcast float %149 to i32, !dbg !28
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !28
  %152 = bitcast i32 %151 to float, !dbg !28
  %153 = fadd float %149, %152, !dbg !33
  %154 = icmp eq i32 %8, 0, !dbg !28
  %155 = zext nneg i32 %10 to i64, !dbg !28
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i64 %155, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, float %153, i1 %154) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %157 = icmp slt i32 %7, 8, !dbg !28
  %158 = sext i32 %7 to i64, !dbg !28
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i64 %158, !dbg !28
  %160 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %159, i1 %157) #6, !dbg !28
  %161 = bitcast float %160 to i32, !dbg !28
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !28
  %163 = bitcast i32 %162 to float, !dbg !28
  %164 = fadd float %160, %163, !dbg !33
  %165 = bitcast float %164 to i32, !dbg !28
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !28
  %167 = bitcast i32 %166 to float, !dbg !28
  %168 = fadd float %164, %167, !dbg !33
  %169 = bitcast float %168 to i32, !dbg !28
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !28
  %171 = bitcast i32 %170 to float, !dbg !28
  %172 = fadd float %168, %171, !dbg !33
  %173 = and i32 %7, 7, !dbg !28
  %174 = icmp eq i32 %173, 0, !dbg !28
  %175 = and i1 %157, %174, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, float %172, i1 %175) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %176 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !28
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float 2.304000e+03) #6, !dbg !37
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float 2.304000e+03) #6, !dbg !37
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float 2.304000e+03) #6, !dbg !37
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float 2.304000e+03) #6, !dbg !37
  %181 = fadd float %177, 0x3EE4F8B580000000, !dbg !38
  %182 = mul i32 %12, 2304, !dbg !39
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %.pre-phi, !dbg !32
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %183, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !40
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !40
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !40
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !40
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !40
  %189 = bitcast i32 %185 to float, !dbg !40
  %190 = bitcast i32 %186 to float, !dbg !40
  %191 = bitcast i32 %187 to float, !dbg !40
  %192 = bitcast i32 %188 to float, !dbg !40
  br i1 %26, label %193, label %194, !dbg !41

193:                                              ; preds = %.split12.us
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 1892, ptr nonnull @assertFunc_1, i64 1), !dbg !41
  br label %194, !dbg !41

194:                                              ; preds = %193, %.split12.us
  %195 = getelementptr float, ptr addrspace(1) %28, i64 %.pre-phi, !dbg !42
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !43
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !43
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !43
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !43
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !43
  %201 = bitcast i32 %197 to float, !dbg !43
  %202 = bitcast i32 %198 to float, !dbg !43
  %203 = bitcast i32 %199 to float, !dbg !43
  %204 = bitcast i32 %200 to float, !dbg !43
  %205 = fmul float %201, 4.800000e+01, !dbg !44
  %206 = fmul float %202, 4.800000e+01, !dbg !44
  %207 = fmul float %203, 4.800000e+01, !dbg !44
  %208 = fmul float %204, 4.800000e+01, !dbg !44
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %.not.i = icmp eq i32 %209, 0, !dbg !45
  br i1 %.not.i, label %212, label %210, !dbg !45

210:                                              ; preds = %194
  %211 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %181), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

212:                                              ; preds = %194
  %213 = tail call float @llvm.nvvm.rsqrt.approx.f(float %181), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

__nv_rsqrtf.exit:                                 ; preds = %210, %212
  %.0.i = phi float [ %211, %210 ], [ %213, %212 ], !dbg !45
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %217 = fmul float %205, %.0.i, !dbg !46
  %218 = fmul float %206, %.0.i, !dbg !46
  %219 = fmul float %207, %.0.i, !dbg !46
  %220 = fmul float %208, %.0.i, !dbg !46
  %221 = fadd float %189, 1.000000e+00, !dbg !47
  %222 = fadd float %190, 1.000000e+00, !dbg !47
  %223 = fadd float %191, 1.000000e+00, !dbg !47
  %224 = fadd float %192, 1.000000e+00, !dbg !47
  %225 = fmul float %221, %217, !dbg !48
  %226 = fmul float %222, %218, !dbg !48
  %227 = fmul float %223, %219, !dbg !48
  %228 = fmul float %224, %220, !dbg !48
  %229 = add i32 %11, %182, !dbg !49
  %230 = sext i32 %229 to i64, !dbg !50
  %231 = getelementptr i16, ptr addrspace(1) %3, i64 %230, !dbg !50
  %232 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %225) #6, !dbg !51
  %233 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %226) #6, !dbg !51
  %234 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %227) #6, !dbg !51
  %235 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %228) #6, !dbg !51
  %236 = insertelement <2 x i16> undef, i16 %232, i64 0, !dbg !51
  %237 = insertelement <2 x i16> %236, i16 %233, i64 1, !dbg !51
  %238 = bitcast <2 x i16> %237 to i32, !dbg !51
  %239 = insertelement <2 x i16> undef, i16 %234, i64 0, !dbg !51
  %240 = insertelement <2 x i16> %239, i16 %235, i64 1, !dbg !51
  %241 = bitcast <2 x i16> %240 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %238, i32 %241, ptr addrspace(1) %231, i1 true) #6, !dbg !51
  %242 = or i32 %11, 1024, !dbg !52
  %243 = zext nneg i32 %242 to i64, !dbg !32
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !32
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %244, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !40
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !40
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !40
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !40
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !40
  %250 = bitcast i32 %246 to float, !dbg !40
  %251 = bitcast i32 %247 to float, !dbg !40
  %252 = bitcast i32 %248 to float, !dbg !40
  %253 = bitcast i32 %249 to float, !dbg !40
  br i1 %26, label %254, label %255, !dbg !41

254:                                              ; preds = %__nv_rsqrtf.exit
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 1892, ptr nonnull @assertFunc_1, i64 1), !dbg !41
  br label %255, !dbg !41

255:                                              ; preds = %254, %__nv_rsqrtf.exit
  %256 = getelementptr float, ptr addrspace(1) %28, i64 %243, !dbg !42
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %256, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !43
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !43
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !43
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !43
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !43
  %262 = bitcast i32 %258 to float, !dbg !43
  %263 = bitcast i32 %259 to float, !dbg !43
  %264 = bitcast i32 %260 to float, !dbg !43
  %265 = bitcast i32 %261 to float, !dbg !43
  %266 = fmul float %262, 4.800000e+01, !dbg !44
  %267 = fmul float %263, 4.800000e+01, !dbg !44
  %268 = fmul float %264, 4.800000e+01, !dbg !44
  %269 = fmul float %265, 4.800000e+01, !dbg !44
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %.not.i.1 = icmp eq i32 %270, 0, !dbg !45
  br i1 %.not.i.1, label %273, label %271, !dbg !45

271:                                              ; preds = %255
  %272 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %181), !dbg !45
  br label %__nv_rsqrtf.exit.1, !dbg !45

273:                                              ; preds = %255
  %274 = tail call float @llvm.nvvm.rsqrt.approx.f(float %181), !dbg !45
  br label %__nv_rsqrtf.exit.1, !dbg !45

__nv_rsqrtf.exit.1:                               ; preds = %273, %271
  %.0.i.1 = phi float [ %272, %271 ], [ %274, %273 ], !dbg !45
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %278 = fmul float %266, %.0.i.1, !dbg !46
  %279 = fmul float %267, %.0.i.1, !dbg !46
  %280 = fmul float %268, %.0.i.1, !dbg !46
  %281 = fmul float %269, %.0.i.1, !dbg !46
  %282 = fadd float %250, 1.000000e+00, !dbg !47
  %283 = fadd float %251, 1.000000e+00, !dbg !47
  %284 = fadd float %252, 1.000000e+00, !dbg !47
  %285 = fadd float %253, 1.000000e+00, !dbg !47
  %286 = fmul float %282, %278, !dbg !48
  %287 = fmul float %283, %279, !dbg !48
  %288 = fmul float %284, %280, !dbg !48
  %289 = fmul float %285, %281, !dbg !48
  %290 = add i32 %242, %182, !dbg !49
  %291 = sext i32 %290 to i64, !dbg !50
  %292 = getelementptr i16, ptr addrspace(1) %3, i64 %291, !dbg !50
  %293 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %286) #6, !dbg !51
  %294 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %287) #6, !dbg !51
  %295 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %288) #6, !dbg !51
  %296 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %289) #6, !dbg !51
  %297 = insertelement <2 x i16> undef, i16 %293, i64 0, !dbg !51
  %298 = insertelement <2 x i16> %297, i16 %294, i64 1, !dbg !51
  %299 = bitcast <2 x i16> %298 to i32, !dbg !51
  %300 = insertelement <2 x i16> undef, i16 %295, i64 0, !dbg !51
  %301 = insertelement <2 x i16> %300, i16 %296, i64 1, !dbg !51
  %302 = bitcast <2 x i16> %301 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %299, i32 %302, ptr addrspace(1) %292, i1 true) #6, !dbg !51
  %303 = or i32 %11, 2048, !dbg !52
  %304 = icmp ult i32 %303, 2304, !dbg !53
  %305 = zext nneg i32 %303 to i64, !dbg !32
  %306 = getelementptr float, ptr addrspace(1) %2, i64 %305, !dbg !32
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %306, i1 %304, i32 0, i1 %304, i32 0, i1 %304, i32 0, i1 %304, i32 0, i1 %304) #6, !dbg !40
  br i1 %26, label %308, label %309, !dbg !41

308:                                              ; preds = %__nv_rsqrtf.exit.1
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 1892, ptr nonnull @assertFunc_1, i64 1), !dbg !41
  br label %309, !dbg !41

309:                                              ; preds = %308, %__nv_rsqrtf.exit.1
  %310 = getelementptr float, ptr addrspace(1) %28, i64 %305, !dbg !42
  %311 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %310, i1 %304, i32 0, i1 %304, i32 0, i1 %304, i32 0, i1 %304, i32 0, i1 %304) #6, !dbg !43
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %.not.i.2 = icmp eq i32 %312, 0, !dbg !45
  br i1 %.not.i.2, label %315, label %313, !dbg !45

313:                                              ; preds = %309
  %314 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %181), !dbg !45
  br label %__nv_rsqrtf.exit.2, !dbg !45

315:                                              ; preds = %309
  %316 = tail call float @llvm.nvvm.rsqrt.approx.f(float %181), !dbg !45
  br label %__nv_rsqrtf.exit.2, !dbg !45

__nv_rsqrtf.exit.2:                               ; preds = %315, %313
  %.0.i.2 = phi float [ %314, %313 ], [ %316, %315 ], !dbg !45
  %317 = extractvalue { i32, i32, i32, i32 } %311, 3, !dbg !43
  %318 = bitcast i32 %317 to float, !dbg !43
  %319 = fmul float %318, 4.800000e+01, !dbg !44
  %320 = extractvalue { i32, i32, i32, i32 } %311, 2, !dbg !43
  %321 = bitcast i32 %320 to float, !dbg !43
  %322 = fmul float %321, 4.800000e+01, !dbg !44
  %323 = extractvalue { i32, i32, i32, i32 } %311, 1, !dbg !43
  %324 = bitcast i32 %323 to float, !dbg !43
  %325 = fmul float %324, 4.800000e+01, !dbg !44
  %326 = extractvalue { i32, i32, i32, i32 } %311, 0, !dbg !43
  %327 = bitcast i32 %326 to float, !dbg !43
  %328 = fmul float %327, 4.800000e+01, !dbg !44
  %329 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !40
  %330 = bitcast i32 %329 to float, !dbg !40
  %331 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !40
  %332 = bitcast i32 %331 to float, !dbg !40
  %333 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !40
  %334 = bitcast i32 %333 to float, !dbg !40
  %335 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !40
  %336 = bitcast i32 %335 to float, !dbg !40
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %340 = fmul float %328, %.0.i.2, !dbg !46
  %341 = fmul float %325, %.0.i.2, !dbg !46
  %342 = fmul float %322, %.0.i.2, !dbg !46
  %343 = fmul float %319, %.0.i.2, !dbg !46
  %344 = fadd float %336, 1.000000e+00, !dbg !47
  %345 = fadd float %334, 1.000000e+00, !dbg !47
  %346 = fadd float %332, 1.000000e+00, !dbg !47
  %347 = fadd float %330, 1.000000e+00, !dbg !47
  %348 = fmul float %344, %340, !dbg !48
  %349 = fmul float %345, %341, !dbg !48
  %350 = fmul float %346, %342, !dbg !48
  %351 = fmul float %347, %343, !dbg !48
  %352 = add i32 %303, %182, !dbg !49
  %353 = sext i32 %352 to i64, !dbg !50
  %354 = getelementptr i16, ptr addrspace(1) %3, i64 %353, !dbg !50
  %355 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %348) #6, !dbg !51
  %356 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %349) #6, !dbg !51
  %357 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %350) #6, !dbg !51
  %358 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %351) #6, !dbg !51
  %359 = insertelement <2 x i16> undef, i16 %355, i64 0, !dbg !51
  %360 = insertelement <2 x i16> %359, i16 %356, i64 1, !dbg !51
  %361 = bitcast <2 x i16> %360 to i32, !dbg !51
  %362 = insertelement <2 x i16> undef, i16 %357, i64 0, !dbg !51
  %363 = insertelement <2 x i16> %362, i16 %358, i64 1, !dbg !51
  %364 = bitcast <2 x i16> %363 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %361, i32 %364, ptr addrspace(1) %354, i1 %304) #6, !dbg !51
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cfgw3ant7vl6znikbhsyonz3tb7dlz33uxndwlkczlbsjo3766ai.py", directory: "/tmp/torchinductor_zeus/fg")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 26, column: 30, scope: !7)
!13 = !DILocation(line: 26, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 22, scope: !7)
!15 = !DILocation(line: 33, column: 22, scope: !7)
!16 = !DILocation(line: 34, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 40, scope: !7)
!18 = !DILocation(line: 36, column: 45, scope: !7)
!19 = !DILocation(line: 35, column: 56, scope: !7)
!20 = !DILocation(line: 36, column: 40, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 53, scope: !7)
!23 = !DILocation(line: 29, column: 27, scope: !7)
!24 = !DILocation(line: 30, column: 25, scope: !7)
!25 = !DILocation(line: 38, column: 22, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 42, column: 39, scope: !7)
!28 = !DILocation(line: 243, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!31 = !DILocation(line: 43, column: 25, scope: !29)
!32 = !DILocation(line: 48, column: 35, scope: !7)
!33 = !DILocation(line: 233, column: 15, scope: !34, inlinedAt: !35)
!34 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!35 = !DILocation(line: 243, column: 36, scope: !34, inlinedAt: !36)
!36 = !DILocation(line: 43, column: 25, scope: !34)
!37 = !DILocation(line: 57, column: 23, scope: !7)
!38 = !DILocation(line: 59, column: 24, scope: !7)
!39 = !DILocation(line: 66, column: 40, scope: !7)
!40 = !DILocation(line: 48, column: 40, scope: !7)
!41 = !DILocation(line: 52, column: 58, scope: !7)
!42 = !DILocation(line: 53, column: 35, scope: !7)
!43 = !DILocation(line: 53, column: 55, scope: !7)
!44 = !DILocation(line: 55, column: 24, scope: !7)
!45 = !DILocation(line: 60, column: 30, scope: !7)
!46 = !DILocation(line: 61, column: 24, scope: !7)
!47 = !DILocation(line: 63, column: 24, scope: !7)
!48 = !DILocation(line: 64, column: 24, scope: !7)
!49 = !DILocation(line: 66, column: 35, scope: !7)
!50 = !DILocation(line: 66, column: 29, scope: !7)
!51 = !DILocation(line: 66, column: 53, scope: !7)
!52 = !DILocation(line: 45, column: 27, scope: !7)
!53 = !DILocation(line: 46, column: 25, scope: !7)
!54 = !DILocation(line: 44, column: 4, scope: !7)
