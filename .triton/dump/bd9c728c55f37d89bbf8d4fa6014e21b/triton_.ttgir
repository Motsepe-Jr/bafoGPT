#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2de3de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: i64 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg3: i64 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_0 = arith.constant dense<1> : tensor<1x2048xi64, #blocked>
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_2 = arith.constant dense<-3.38953139E+38> : tensor<1x2048xf32, #blocked>
    %cst_3 = arith.constant dense<8192> : tensor<1x2048xi64, #blocked>
    %c-1_i64 = arith.constant -1 : i64
    %c8192_i64 = arith.constant 8192 : i64
    %c8192_i32 = arith.constant 8192 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_4 = arith.constant dense<true> : tensor<1x2048xi1, #blocked>
    %cst_5 = arith.constant dense<5.000000e+01> : tensor<1x2048xf32, #blocked>
    %cst_6 = arith.constant dense<6.250000e-02> : tensor<1x2048xf32, #blocked>
    %cst_7 = arith.constant dense<0xFF800000> : tensor<1x2048xf32, #blocked>
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = arith.extsi %3 : tensor<1x2048xi32, #blocked> to tensor<1x2048xi64, #blocked>
    %5 = arith.remsi %1, %c8192_i64 : i64
    %6 = arith.muli %1, %c8192_i64 : i64
    %7 = tt.splat %6 : (i64) -> tensor<1x2048xi64, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %9 = arith.muli %5, %c-1_i64 : i64
    %10 = tt.splat %9 : (i64) -> tensor<1x2048xi64, #blocked>
    %11 = scf.for %arg4 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg5 = %cst_7) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %20 = arith.extsi %arg4 : i32 to i64
      %21 = tt.splat %20 : (i64) -> tensor<1x2048xi64, #blocked>
      %22 = arith.addi %21, %4 : tensor<1x2048xi64, #blocked>
      %23 = arith.cmpi slt, %22, %cst_3 : tensor<1x2048xi64, #blocked>
      %24 = arith.addi %22, %7 : tensor<1x2048xi64, #blocked>
      %25 = tt.addptr %8, %24 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi64, #blocked>
      %26 = tt.load %25, %23, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %27 = arith.extf %26 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %28 = arith.mulf %27, %cst_6 : tensor<1x2048xf32, #blocked>
      %29 = arith.divf %28, %cst_5 : tensor<1x2048xf32, #blocked>
      %30 = tt.extern_elementwise %29 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %31 = arith.mulf %30, %cst_5 : tensor<1x2048xf32, #blocked>
      %32 = arith.addi %22, %10 : tensor<1x2048xi64, #blocked>
      %33 = arith.cmpi sge, %32, %cst_0 : tensor<1x2048xi64, #blocked>
      %34 = arith.select %33, %cst_1, %cst : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %35 = arith.cmpf une, %34, %cst : tensor<1x2048xf32, #blocked>
      %36 = arith.select %35, %cst_2, %34 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %37 = arith.addf %31, %36 : tensor<1x2048xf32, #blocked>
      %38 = arith.cmpf ogt, %arg5, %37 : tensor<1x2048xf32, #blocked>
      %39 = arith.cmpf une, %arg5, %arg5 : tensor<1x2048xf32, #blocked>
      %40 = arith.ori %38, %39 : tensor<1x2048xi1, #blocked>
      %41 = arith.xori %40, %cst_4 : tensor<1x2048xi1, #blocked>
      %42 = arith.andi %23, %41 : tensor<1x2048xi1, #blocked>
      %43 = arith.select %42, %37, %arg5 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %43 : tensor<1x2048xf32, #blocked>
    }
    %12 = "tt.reduce"(%11) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %20 = arith.cmpf ogt, %arg4, %arg5 : f32
      %21 = arith.cmpf une, %arg4, %arg4 : f32
      %22 = arith.ori %20, %21 : i1
      %23 = arith.select %22, %arg4, %arg5 : f32
      tt.reduce.return %23 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %13 = tt.expand_dims %12 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %14 = tt.broadcast %13 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %15 = scf.for %arg4 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg5 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %20 = arith.extsi %arg4 : i32 to i64
      %21 = tt.splat %20 : (i64) -> tensor<1x2048xi64, #blocked>
      %22 = arith.addi %21, %4 : tensor<1x2048xi64, #blocked>
      %23 = arith.cmpi slt, %22, %cst_3 : tensor<1x2048xi64, #blocked>
      %24 = arith.addi %22, %7 : tensor<1x2048xi64, #blocked>
      %25 = tt.addptr %8, %24 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi64, #blocked>
      %26 = tt.load %25, %23, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %27 = arith.extf %26 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %28 = arith.mulf %27, %cst_6 : tensor<1x2048xf32, #blocked>
      %29 = arith.divf %28, %cst_5 : tensor<1x2048xf32, #blocked>
      %30 = tt.extern_elementwise %29 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %31 = arith.mulf %30, %cst_5 : tensor<1x2048xf32, #blocked>
      %32 = arith.addi %22, %10 : tensor<1x2048xi64, #blocked>
      %33 = arith.cmpi sge, %32, %cst_0 : tensor<1x2048xi64, #blocked>
      %34 = arith.select %33, %cst_1, %cst : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %35 = arith.cmpf une, %34, %cst : tensor<1x2048xf32, #blocked>
      %36 = arith.select %35, %cst_2, %34 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %37 = arith.addf %31, %36 : tensor<1x2048xf32, #blocked>
      %38 = arith.subf %37, %14 : tensor<1x2048xf32, #blocked>
      %39 = math.exp %38 : tensor<1x2048xf32, #blocked>
      %40 = arith.addf %arg5, %39 : tensor<1x2048xf32, #blocked>
      %41 = arith.select %23, %40, %arg5 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %41 : tensor<1x2048xf32, #blocked>
    }
    %16 = "tt.reduce"(%15) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %20 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %20 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %17 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %18 = tt.broadcast %17 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %19 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg4 = %c0_i32 to %c8192_i32 step %c2048_i32  : i32 {
      %20 = arith.extsi %arg4 : i32 to i64
      %21 = tt.splat %20 : (i64) -> tensor<1x2048xi64, #blocked>
      %22 = arith.addi %21, %4 : tensor<1x2048xi64, #blocked>
      %23 = arith.cmpi slt, %22, %cst_3 : tensor<1x2048xi64, #blocked>
      %24 = arith.addi %22, %7 : tensor<1x2048xi64, #blocked>
      %25 = tt.addptr %8, %24 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi64, #blocked>
      %26 = tt.load %25, %23, %cst_8 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %27 = arith.extf %26 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %28 = arith.mulf %27, %cst_6 : tensor<1x2048xf32, #blocked>
      %29 = arith.divf %28, %cst_5 : tensor<1x2048xf32, #blocked>
      %30 = tt.extern_elementwise %29 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %31 = arith.mulf %30, %cst_5 : tensor<1x2048xf32, #blocked>
      %32 = arith.addi %22, %10 : tensor<1x2048xi64, #blocked>
      %33 = arith.cmpi sge, %32, %cst_0 : tensor<1x2048xi64, #blocked>
      %34 = arith.select %33, %cst_1, %cst : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %35 = arith.cmpf une, %34, %cst : tensor<1x2048xf32, #blocked>
      %36 = arith.select %35, %cst_2, %34 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %37 = arith.addf %31, %36 : tensor<1x2048xf32, #blocked>
      %38 = arith.subf %37, %14 : tensor<1x2048xf32, #blocked>
      %39 = math.exp %38 : tensor<1x2048xf32, #blocked>
      %40 = arith.divf %39, %18 : tensor<1x2048xf32, #blocked>
      %41 = tt.addptr %19, %24 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi64, #blocked>
      %42 = arith.truncf %40 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
      tt.store %41, %42, %23 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    }
    tt.return
  }
}
