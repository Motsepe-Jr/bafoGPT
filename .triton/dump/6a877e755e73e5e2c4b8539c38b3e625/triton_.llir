; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5d6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = shl i32 %8, 2, !dbg !8
  %10 = and i32 %9, 508, !dbg !8
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %12 = shl i32 %11, 9, !dbg !10
  %13 = or i32 %12, %10, !dbg !11
  %14 = sext i32 %13 to i64, !dbg !12
  %15 = getelementptr i16, ptr addrspace(1) %0, i64 %14, !dbg !12
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !13
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !13
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !13
  %19 = trunc i32 %17 to i16, !dbg !13
  %extelt.offset = lshr i32 %17, 16, !dbg !13
  %20 = trunc i32 %extelt.offset to i16, !dbg !13
  %21 = trunc i32 %18 to i16, !dbg !13
  %extelt.offset1 = lshr i32 %18, 16, !dbg !13
  %22 = trunc i32 %extelt.offset1 to i16, !dbg !13
  %23 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #1, !dbg !14
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #1, !dbg !14
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #1, !dbg !14
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #1, !dbg !14
  %27 = getelementptr i16, ptr addrspace(1) %1, i64 %14, !dbg !15
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !16
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !16
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !16
  %31 = trunc i32 %29 to i16, !dbg !16
  %extelt.offset2 = lshr i32 %29, 16, !dbg !16
  %32 = trunc i32 %extelt.offset2 to i16, !dbg !16
  %33 = trunc i32 %30 to i16, !dbg !16
  %extelt.offset3 = lshr i32 %30, 16, !dbg !16
  %34 = trunc i32 %extelt.offset3 to i16, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #1, !dbg !17
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #1, !dbg !17
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #1, !dbg !17
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #1, !dbg !17
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !18
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !19
  %45 = bitcast i32 %41 to float, !dbg !19
  %46 = bitcast i32 %42 to float, !dbg !19
  %47 = bitcast i32 %43 to float, !dbg !19
  %48 = bitcast i32 %44 to float, !dbg !19
  %49 = getelementptr i16, ptr addrspace(1) %3, i64 %14, !dbg !20
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !21
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !21
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !21
  %53 = trunc i32 %51 to i16, !dbg !21
  %extelt.offset4 = lshr i32 %51, 16, !dbg !21
  %54 = trunc i32 %extelt.offset4 to i16, !dbg !21
  %55 = trunc i32 %52 to i16, !dbg !21
  %extelt.offset5 = lshr i32 %52, 16, !dbg !21
  %56 = trunc i32 %extelt.offset5 to i16, !dbg !21
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #1, !dbg !22
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #1, !dbg !22
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #1, !dbg !22
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #1, !dbg !22
  %61 = fmul float %35, 5.000000e-01, !dbg !23
  %62 = fmul float %36, 5.000000e-01, !dbg !23
  %63 = fmul float %37, 5.000000e-01, !dbg !23
  %64 = fmul float %38, 5.000000e-01, !dbg !23
  %65 = fadd float %45, 1.000000e+00, !dbg !24
  %66 = fadd float %46, 1.000000e+00, !dbg !24
  %67 = fadd float %47, 1.000000e+00, !dbg !24
  %68 = fadd float %48, 1.000000e+00, !dbg !24
  %69 = fmul float %61, %65, !dbg !25
  %70 = fmul float %62, %66, !dbg !25
  %71 = fmul float %63, %67, !dbg !25
  %72 = fmul float %64, %68, !dbg !25
  %73 = fmul float %23, %69, !dbg !26
  %74 = fmul float %24, %70, !dbg !26
  %75 = fmul float %25, %71, !dbg !26
  %76 = fmul float %26, %72, !dbg !26
  %77 = fmul float %23, %57, !dbg !27
  %78 = fmul float %24, %58, !dbg !27
  %79 = fmul float %25, %59, !dbg !27
  %80 = fmul float %26, %60, !dbg !27
  %81 = fmul float %65, 5.000000e-01, !dbg !28
  %82 = fmul float %66, 5.000000e-01, !dbg !28
  %83 = fmul float %67, 5.000000e-01, !dbg !28
  %84 = fmul float %68, 5.000000e-01, !dbg !28
  %85 = fmul float %45, %45, !dbg !29
  %86 = fmul float %46, %46, !dbg !29
  %87 = fmul float %47, %47, !dbg !29
  %88 = fmul float %48, %48, !dbg !29
  %89 = fsub float 1.000000e+00, %85, !dbg !30
  %90 = fsub float 1.000000e+00, %86, !dbg !30
  %91 = fsub float 1.000000e+00, %87, !dbg !30
  %92 = fsub float 1.000000e+00, %88, !dbg !30
  %93 = fmul float %61, %89, !dbg !31
  %94 = fmul float %62, %90, !dbg !31
  %95 = fmul float %63, %91, !dbg !31
  %96 = fmul float %64, %92, !dbg !31
  %97 = fmul float %35, %35, !dbg !32
  %98 = fmul float %36, %36, !dbg !32
  %99 = fmul float %37, %37, !dbg !32
  %100 = fmul float %38, %38, !dbg !32
  %101 = fmul float %97, 0x3FC12BA9E0000000, !dbg !33
  %102 = fmul float %98, 0x3FC12BA9E0000000, !dbg !33
  %103 = fmul float %99, 0x3FC12BA9E0000000, !dbg !33
  %104 = fmul float %100, 0x3FC12BA9E0000000, !dbg !33
  %105 = fadd float %101, 1.000000e+00, !dbg !34
  %106 = fadd float %102, 1.000000e+00, !dbg !34
  %107 = fadd float %103, 1.000000e+00, !dbg !34
  %108 = fadd float %104, 1.000000e+00, !dbg !34
  %109 = fmul float %105, 0x3FE9884540000000, !dbg !35
  %110 = fmul float %106, 0x3FE9884540000000, !dbg !35
  %111 = fmul float %107, 0x3FE9884540000000, !dbg !35
  %112 = fmul float %108, 0x3FE9884540000000, !dbg !35
  %113 = fmul float %109, %93, !dbg !36
  %114 = fmul float %110, %94, !dbg !36
  %115 = fmul float %111, %95, !dbg !36
  %116 = fmul float %112, %96, !dbg !36
  %117 = fadd float %81, %113, !dbg !37
  %118 = fadd float %82, %114, !dbg !37
  %119 = fadd float %83, %115, !dbg !37
  %120 = fadd float %84, %116, !dbg !37
  %121 = fmul float %77, %117, !dbg !38
  %122 = fmul float %78, %118, !dbg !38
  %123 = fmul float %79, %119, !dbg !38
  %124 = fmul float %80, %120, !dbg !38
  %125 = getelementptr i16, ptr addrspace(1) %4, i64 %14, !dbg !39
  %126 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %73) #1, !dbg !40
  %127 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %74) #1, !dbg !40
  %128 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %75) #1, !dbg !40
  %129 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %76) #1, !dbg !40
  %130 = insertelement <2 x i16> undef, i16 %126, i64 0, !dbg !40
  %131 = insertelement <2 x i16> %130, i16 %127, i64 1, !dbg !40
  %132 = bitcast <2 x i16> %131 to i32, !dbg !40
  %133 = insertelement <2 x i16> undef, i16 %128, i64 0, !dbg !40
  %134 = insertelement <2 x i16> %133, i16 %129, i64 1, !dbg !40
  %135 = bitcast <2 x i16> %134 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %132, i32 %135, ptr addrspace(1) %125, i1 true) #1, !dbg !40
  %136 = getelementptr i16, ptr addrspace(1) %5, i64 %14, !dbg !41
  %137 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %121) #1, !dbg !42
  %138 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %122) #1, !dbg !42
  %139 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %123) #1, !dbg !42
  %140 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %124) #1, !dbg !42
  %141 = insertelement <2 x i16> undef, i16 %137, i64 0, !dbg !42
  %142 = insertelement <2 x i16> %141, i16 %138, i64 1, !dbg !42
  %143 = bitcast <2 x i16> %142 to i32, !dbg !42
  %144 = insertelement <2 x i16> undef, i16 %139, i64 0, !dbg !42
  %145 = insertelement <2 x i16> %144, i16 %140, i64 1, !dbg !42
  %146 = bitcast <2 x i16> %145 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %143, i32 %146, ptr addrspace(1) %136, i1 true) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c6r2aiv3d3e3j57pdhtkpwea7kjwjr4g2j6tcf6y34sbibmgpvjm.py", directory: "/tmp/torchinductor_zeus/6r")
!3 = !{ptr @triton__0d1d2d3d4d5d6de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de", linkageName: "triton__0d1d2d3d4d5d6de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 30, scope: !5)
!13 = !DILocation(line: 24, column: 35, scope: !5)
!14 = !DILocation(line: 24, column: 44, scope: !5)
!15 = !DILocation(line: 25, column: 30, scope: !5)
!16 = !DILocation(line: 25, column: 35, scope: !5)
!17 = !DILocation(line: 25, column: 44, scope: !5)
!18 = !DILocation(line: 26, column: 30, scope: !5)
!19 = !DILocation(line: 26, column: 35, scope: !5)
!20 = !DILocation(line: 27, column: 31, scope: !5)
!21 = !DILocation(line: 27, column: 36, scope: !5)
!22 = !DILocation(line: 27, column: 45, scope: !5)
!23 = !DILocation(line: 30, column: 18, scope: !5)
!24 = !DILocation(line: 32, column: 18, scope: !5)
!25 = !DILocation(line: 33, column: 18, scope: !5)
!26 = !DILocation(line: 35, column: 19, scope: !5)
!27 = !DILocation(line: 36, column: 19, scope: !5)
!28 = !DILocation(line: 38, column: 19, scope: !5)
!29 = !DILocation(line: 39, column: 19, scope: !5)
!30 = !DILocation(line: 40, column: 19, scope: !5)
!31 = !DILocation(line: 41, column: 19, scope: !5)
!32 = !DILocation(line: 42, column: 19, scope: !5)
!33 = !DILocation(line: 44, column: 20, scope: !5)
!34 = !DILocation(line: 45, column: 20, scope: !5)
!35 = !DILocation(line: 47, column: 20, scope: !5)
!36 = !DILocation(line: 48, column: 20, scope: !5)
!37 = !DILocation(line: 49, column: 20, scope: !5)
!38 = !DILocation(line: 50, column: 20, scope: !5)
!39 = !DILocation(line: 52, column: 25, scope: !5)
!40 = !DILocation(line: 52, column: 37, scope: !5)
!41 = !DILocation(line: 53, column: 25, scope: !5)
!42 = !DILocation(line: 53, column: 37, scope: !5)
!43 = !DILocation(line: 53, column: 4, scope: !5)
