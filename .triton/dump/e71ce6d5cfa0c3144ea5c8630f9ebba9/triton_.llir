; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d9de10de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %13 = lshr i32 %12, 5, !dbg !10
  %urem = shl i32 %12, 2, !dbg !10
  %14 = and i32 %urem, 1020, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %16 = mul i32 %15, 2304, !dbg !12
  %17 = add i32 %14, %16, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr i16, ptr addrspace(1) %1, i64 %18, !dbg !14
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !15
  %23 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset6 = lshr i32 %21, 16, !dbg !15
  %24 = trunc i32 %extelt.offset6 to i16, !dbg !15
  %25 = trunc i32 %22 to i16, !dbg !15
  %extelt.offset7 = lshr i32 %22, 16, !dbg !15
  %26 = trunc i32 %extelt.offset7 to i16, !dbg !15
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #6, !dbg !16
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !16
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %31 = or i32 %14, 1024, !dbg !17
  %32 = add i32 %31, %16, !dbg !13
  %33 = sext i32 %32 to i64, !dbg !14
  %34 = getelementptr i16, ptr addrspace(1) %1, i64 %33, !dbg !14
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !15
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !15
  %38 = trunc i32 %36 to i16, !dbg !15
  %extelt.offset6.1 = lshr i32 %36, 16, !dbg !15
  %39 = trunc i32 %extelt.offset6.1 to i16, !dbg !15
  %40 = trunc i32 %37 to i16, !dbg !15
  %extelt.offset7.1 = lshr i32 %37, 16, !dbg !15
  %41 = trunc i32 %extelt.offset7.1 to i16, !dbg !15
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #6, !dbg !16
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #6, !dbg !16
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #6, !dbg !16
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #6, !dbg !16
  %46 = or i32 %14, 2048, !dbg !17
  %47 = icmp ult i32 %46, 2304, !dbg !18
  %48 = add i32 %46, %16, !dbg !13
  %49 = sext i32 %48 to i64, !dbg !14
  %50 = getelementptr i16, ptr addrspace(1) %1, i64 %49, !dbg !14
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #6, !dbg !15
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !15
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !15
  %54 = trunc i32 %52 to i16, !dbg !15
  %extelt.offset6.2 = lshr i32 %52, 16, !dbg !15
  %55 = trunc i32 %extelt.offset6.2 to i16, !dbg !15
  %56 = trunc i32 %53 to i16, !dbg !15
  %extelt.offset7.2 = lshr i32 %53, 16, !dbg !15
  %57 = trunc i32 %extelt.offset7.2 to i16, !dbg !15
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #6, !dbg !16
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #6, !dbg !16
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #6, !dbg !16
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #6, !dbg !16
  %62 = insertelement <2 x float> poison, float %27, i64 0, !dbg !19
  %63 = insertelement <2 x float> %62, float %28, i64 1, !dbg !19
  %64 = fmul <2 x float> %63, %63, !dbg !19
  %65 = insertelement <2 x float> poison, float %42, i64 0, !dbg !19
  %66 = insertelement <2 x float> %65, float %43, i64 1, !dbg !19
  %67 = fmul <2 x float> %66, %66, !dbg !19
  %68 = fadd <2 x float> %64, %67, !dbg !20
  %69 = insertelement <2 x float> poison, float %58, i64 0, !dbg !19
  %70 = insertelement <2 x float> %69, float %59, i64 1, !dbg !19
  %71 = fmul <2 x float> %70, %70, !dbg !19
  %72 = insertelement <2 x i1> poison, i1 %47, i64 0, !dbg !20
  %73 = shufflevector <2 x i1> %72, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !20
  %74 = select <2 x i1> %73, <2 x float> %71, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !20
  %75 = fadd <2 x float> %68, %74, !dbg !20
  %76 = insertelement <2 x float> poison, float %30, i64 0, !dbg !19
  %77 = insertelement <2 x float> %76, float %29, i64 1, !dbg !19
  %78 = fmul <2 x float> %77, %77, !dbg !19
  %79 = insertelement <2 x float> poison, float %45, i64 0, !dbg !19
  %80 = insertelement <2 x float> %79, float %44, i64 1, !dbg !19
  %81 = fmul <2 x float> %80, %80, !dbg !19
  %82 = fadd <2 x float> %78, %81, !dbg !20
  %83 = insertelement <2 x float> poison, float %61, i64 0, !dbg !19
  %84 = insertelement <2 x float> %83, float %60, i64 1, !dbg !19
  %85 = fmul <2 x float> %84, %84, !dbg !19
  %86 = select <2 x i1> %73, <2 x float> %85, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !20
  %87 = fadd <2 x float> %82, %86, !dbg !20
  %88 = and i32 %12, 31, !dbg !10
  %89 = and i32 %13, 7, !dbg !10
  %shift = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %90 = fadd <2 x float> %75, %shift, !dbg !21
  %shift55 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %91 = fadd <2 x float> %shift55, %90, !dbg !21
  %92 = fadd <2 x float> %87, %91, !dbg !21
  %93 = extractelement <2 x float> %92, i64 0, !dbg !21
  %94 = bitcast float %93 to i32, !dbg !27
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !27
  %96 = bitcast i32 %95 to float, !dbg !27
  %97 = fadd float %93, %96, !dbg !21
  %98 = bitcast float %97 to i32, !dbg !27
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !27
  %100 = bitcast i32 %99 to float, !dbg !27
  %101 = fadd float %97, %100, !dbg !21
  %102 = bitcast float %101 to i32, !dbg !27
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !27
  %104 = bitcast i32 %103 to float, !dbg !27
  %105 = fadd float %101, %104, !dbg !21
  %106 = bitcast float %105 to i32, !dbg !27
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !27
  %108 = bitcast i32 %107 to float, !dbg !27
  %109 = fadd float %105, %108, !dbg !21
  %110 = bitcast float %109 to i32, !dbg !27
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !27
  %112 = bitcast i32 %111 to float, !dbg !27
  %113 = fadd float %109, %112, !dbg !21
  %114 = icmp eq i32 %88, 0, !dbg !27
  %115 = zext nneg i32 %89 to i64, !dbg !27
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i64 %115, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, float %113, i1 %114) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %117 = icmp slt i32 %12, 8, !dbg !27
  %118 = sext i32 %12 to i64, !dbg !27
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i64 %118, !dbg !27
  %120 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %119, i1 %117) #6, !dbg !27
  %121 = bitcast float %120 to i32, !dbg !27
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = fadd float %120, %123, !dbg !21
  %125 = bitcast float %124 to i32, !dbg !27
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = fadd float %124, %127, !dbg !21
  %129 = bitcast float %128 to i32, !dbg !27
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !27
  %131 = bitcast i32 %130 to float, !dbg !27
  %132 = fadd float %128, %131, !dbg !21
  %133 = and i32 %12, 7, !dbg !27
  %134 = icmp eq i32 %133, 0, !dbg !27
  %135 = and i1 %117, %134, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, float %132, i1 %135) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %136 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  %137 = sext i32 %15 to i64, !dbg !29
  %138 = getelementptr float, ptr addrspace(1) %4, i64 %137, !dbg !29
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #6, !dbg !30
  %140 = bitcast i32 %139 to float, !dbg !30
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #6, !dbg !30
  %142 = bitcast i32 %141 to float, !dbg !30
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #6, !dbg !30
  %144 = bitcast i32 %143 to float, !dbg !30
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #6, !dbg !30
  %146 = bitcast i32 %145 to float, !dbg !30
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 2.304000e+03) #6, !dbg !31
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 2.304000e+03) #6, !dbg !31
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 2.304000e+03) #6, !dbg !31
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 2.304000e+03) #6, !dbg !31
  %151 = fadd float %147, 0x3EE4F8B580000000, !dbg !32
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.304000e+03) #6, !dbg !33
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 2.304000e+03) #6, !dbg !33
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float 2.304000e+03) #6, !dbg !33
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 2.304000e+03) #6, !dbg !33
  %156 = fadd float %152, 0x3EE4F8B580000000, !dbg !34
  br label %157, !dbg !35

157:                                              ; preds = %11, %__nv_rsqrtf.exit31
  %158 = phi i32 [ 0, %11 ], [ %267, %__nv_rsqrtf.exit31 ]
  %159 = phi <4 x float> [ zeroinitializer, %11 ], [ %262, %__nv_rsqrtf.exit31 ]
  %160 = or i32 %158, %14, !dbg !36
  %161 = icmp ult i32 %160, 2304, !dbg !37
  %162 = add i32 %160, %16, !dbg !38
  %163 = sext i32 %162 to i64, !dbg !39
  %164 = getelementptr i16, ptr addrspace(1) %1, i64 %163, !dbg !39
  %165 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %164, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #6, !dbg !40
  %166 = extractvalue { i32, i32 } %165, 0, !dbg !40
  %167 = extractvalue { i32, i32 } %165, 1, !dbg !40
  %168 = trunc i32 %166 to i16, !dbg !40
  %extelt.offset = lshr i32 %166, 16, !dbg !40
  %169 = trunc i32 %extelt.offset to i16, !dbg !40
  %170 = trunc i32 %167 to i16, !dbg !40
  %extelt.offset3 = lshr i32 %167, 16, !dbg !40
  %171 = trunc i32 %extelt.offset3 to i16, !dbg !40
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %168) #6, !dbg !41
  %173 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %169) #6, !dbg !41
  %174 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %170) #6, !dbg !41
  %175 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %171) #6, !dbg !41
  %176 = zext nneg i32 %160 to i64, !dbg !42
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %176, !dbg !42
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #6, !dbg !43
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !43
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !43
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !43
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !43
  %183 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !43
  %184 = insertelement <4 x i32> %183, i32 %180, i64 1, !dbg !43
  %185 = insertelement <4 x i32> %184, i32 %181, i64 2, !dbg !43
  %186 = insertelement <4 x i32> %185, i32 %182, i64 3, !dbg !43
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !43
  %188 = getelementptr i16, ptr addrspace(1) %3, i64 %163, !dbg !44
  %189 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %188, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #6, !dbg !45
  %190 = extractvalue { i32, i32 } %189, 0, !dbg !45
  %191 = extractvalue { i32, i32 } %189, 1, !dbg !45
  %192 = trunc i32 %190 to i16, !dbg !45
  %extelt.offset4 = lshr i32 %190, 16, !dbg !45
  %193 = trunc i32 %extelt.offset4 to i16, !dbg !45
  %194 = trunc i32 %191 to i16, !dbg !45
  %extelt.offset5 = lshr i32 %191, 16, !dbg !45
  %195 = trunc i32 %extelt.offset5 to i16, !dbg !45
  %196 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %192) #6, !dbg !46
  %197 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %193) #6, !dbg !46
  %198 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %194) #6, !dbg !46
  %199 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %195) #6, !dbg !46
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %176, !dbg !47
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #6, !dbg !48
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !48
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !48
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !48
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !48
  %206 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !48
  %207 = insertelement <4 x i32> %206, i32 %203, i64 1, !dbg !48
  %208 = insertelement <4 x i32> %207, i32 %204, i64 2, !dbg !48
  %209 = insertelement <4 x i32> %208, i32 %205, i64 3, !dbg !48
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !48
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !49
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %211, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #6, !dbg !50
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !50
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !50
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !50
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !50
  %217 = insertelement <4 x i32> poison, i32 %213, i64 0, !dbg !50
  %218 = insertelement <4 x i32> %217, i32 %214, i64 1, !dbg !50
  %219 = insertelement <4 x i32> %218, i32 %215, i64 2, !dbg !50
  %220 = insertelement <4 x i32> %219, i32 %216, i64 3, !dbg !50
  %221 = bitcast <4 x i32> %220 to <4 x float>, !dbg !50
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i17 = icmp eq i32 %222, 0, !dbg !51
  br i1 %.not.i17, label %225, label %223, !dbg !51

223:                                              ; preds = %157
  %224 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %151), !dbg !51
  br label %__nv_rsqrtf.exit19, !dbg !51

225:                                              ; preds = %157
  %226 = tail call float @llvm.nvvm.rsqrt.approx.f(float %151), !dbg !51
  br label %__nv_rsqrtf.exit19, !dbg !51

__nv_rsqrtf.exit19:                               ; preds = %223, %225
  %.0.i18 = phi float [ %224, %223 ], [ %226, %225 ], !dbg !51
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %230 = insertelement <4 x float> poison, float %172, i64 0, !dbg !52
  %231 = insertelement <4 x float> %230, float %173, i64 1, !dbg !52
  %232 = insertelement <4 x float> %231, float %174, i64 2, !dbg !52
  %233 = insertelement <4 x float> %232, float %175, i64 3, !dbg !52
  %234 = insertelement <4 x float> poison, float %.0.i18, i64 0, !dbg !52
  %235 = shufflevector <4 x float> %234, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !52
  %236 = fmul <4 x float> %233, %235, !dbg !52
  %237 = fadd <4 x float> %187, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !53
  %238 = fmul <4 x float> %237, %236, !dbg !54
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i29 = icmp eq i32 %239, 0, !dbg !55
  br i1 %.not.i29, label %242, label %240, !dbg !55

240:                                              ; preds = %__nv_rsqrtf.exit19
  %241 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %156), !dbg !55
  br label %__nv_rsqrtf.exit31, !dbg !55

242:                                              ; preds = %__nv_rsqrtf.exit19
  %243 = tail call float @llvm.nvvm.rsqrt.approx.f(float %156), !dbg !55
  br label %__nv_rsqrtf.exit31, !dbg !55

__nv_rsqrtf.exit31:                               ; preds = %240, %242
  %.0.i30 = phi float [ %241, %240 ], [ %243, %242 ], !dbg !55
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %247 = insertelement <4 x float> poison, float %196, i64 0, !dbg !56
  %248 = insertelement <4 x float> %247, float %197, i64 1, !dbg !56
  %249 = insertelement <4 x float> %248, float %198, i64 2, !dbg !56
  %250 = insertelement <4 x float> %249, float %199, i64 3, !dbg !56
  %251 = insertelement <4 x float> poison, float %.0.i30, i64 0, !dbg !56
  %252 = shufflevector <4 x float> %251, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !56
  %253 = fmul <4 x float> %250, %252, !dbg !56
  %254 = fadd <4 x float> %210, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !57
  %255 = fmul <4 x float> %254, %253, !dbg !58
  %256 = fadd <4 x float> %255, %221, !dbg !59
  %257 = fadd <4 x float> %238, %256, !dbg !60
  %258 = fmul <4 x float> %257, %257, !dbg !61
  %259 = insertelement <4 x i1> poison, i1 %161, i64 0, !dbg !62
  %260 = shufflevector <4 x i1> %259, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !62
  %261 = select <4 x i1> %260, <4 x float> %258, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !62
  %262 = fadd <4 x float> %159, %261, !dbg !62
  %bc = bitcast <4 x float> %257 to <4 x i32>, !dbg !63
  %263 = extractelement <4 x i32> %bc, i64 0, !dbg !63
  %bc59 = bitcast <4 x float> %257 to <4 x i32>, !dbg !63
  %264 = extractelement <4 x i32> %bc59, i64 1, !dbg !63
  %bc60 = bitcast <4 x float> %257 to <4 x i32>, !dbg !63
  %265 = extractelement <4 x i32> %bc60, i64 2, !dbg !63
  %bc61 = bitcast <4 x float> %257 to <4 x i32>, !dbg !63
  %266 = extractelement <4 x i32> %bc61, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %263, i32 %264, i32 %265, i32 %266, ptr addrspace(1) %211, i1 %161) #6, !dbg !63
  %267 = add nuw nsw i32 %158, 1024, !dbg !35
  %268 = icmp ult i32 %158, 1280, !dbg !35
  br i1 %268, label %157, label %269, !dbg !35

269:                                              ; preds = %__nv_rsqrtf.exit31
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %shift56 = shufflevector <4 x float> %262, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !66
  %270 = fadd <4 x float> %262, %shift56, !dbg !66
  %shift57 = shufflevector <4 x float> %262, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !66
  %271 = fadd <4 x float> %shift57, %270, !dbg !66
  %shift58 = shufflevector <4 x float> %262, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !66
  %272 = fadd <4 x float> %shift58, %271, !dbg !66
  %273 = extractelement <4 x float> %272, i64 0, !dbg !66
  %274 = bitcast float %273 to i32, !dbg !64
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 16, i32 31), !dbg !64
  %276 = bitcast i32 %275 to float, !dbg !64
  %277 = fadd float %273, %276, !dbg !66
  %278 = bitcast float %277 to i32, !dbg !64
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 8, i32 31), !dbg !64
  %280 = bitcast i32 %279 to float, !dbg !64
  %281 = fadd float %277, %280, !dbg !66
  %282 = bitcast float %281 to i32, !dbg !64
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 4, i32 31), !dbg !64
  %284 = bitcast i32 %283 to float, !dbg !64
  %285 = fadd float %281, %284, !dbg !66
  %286 = bitcast float %285 to i32, !dbg !64
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 2, i32 31), !dbg !64
  %288 = bitcast i32 %287 to float, !dbg !64
  %289 = fadd float %285, %288, !dbg !66
  %290 = bitcast float %289 to i32, !dbg !64
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 1, i32 31), !dbg !64
  %292 = bitcast i32 %291 to float, !dbg !64
  %293 = fadd float %289, %292, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, float %293, i1 %114) #6, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %294 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %119, i1 %117) #6, !dbg !64
  %295 = bitcast float %294 to i32, !dbg !64
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 4, i32 31), !dbg !64
  %297 = bitcast i32 %296 to float, !dbg !64
  %298 = fadd float %294, %297, !dbg !66
  %299 = bitcast float %298 to i32, !dbg !64
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 2, i32 31), !dbg !64
  %301 = bitcast i32 %300 to float, !dbg !64
  %302 = fadd float %298, %301, !dbg !66
  %303 = bitcast float %302 to i32, !dbg !64
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !64
  %305 = bitcast i32 %304 to float, !dbg !64
  %306 = fadd float %302, %305, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, float %306, i1 %135) #6, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %307 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !64
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #6, !dbg !69
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #6, !dbg !69
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #6, !dbg !69
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #6, !dbg !69
  %312 = fadd float %308, 0x3EE4F8B580000000, !dbg !70
  %313 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !71
  %314 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %313, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !72
  %315 = extractvalue { i32, i32, i32, i32 } %314, 0, !dbg !72
  %316 = extractvalue { i32, i32, i32, i32 } %314, 1, !dbg !72
  %317 = extractvalue { i32, i32, i32, i32 } %314, 2, !dbg !72
  %318 = extractvalue { i32, i32, i32, i32 } %314, 3, !dbg !72
  %319 = bitcast i32 %315 to float, !dbg !72
  %320 = bitcast i32 %316 to float, !dbg !72
  %321 = bitcast i32 %317 to float, !dbg !72
  %322 = bitcast i32 %318 to float, !dbg !72
  %323 = zext nneg i32 %14 to i64, !dbg !73
  %324 = getelementptr float, ptr addrspace(1) %6, i64 %323, !dbg !73
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %324, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !74
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !74
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !74
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !74
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !74
  %330 = bitcast i32 %326 to float, !dbg !74
  %331 = bitcast i32 %327 to float, !dbg !74
  %332 = bitcast i32 %328 to float, !dbg !74
  %333 = bitcast i32 %329 to float, !dbg !74
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %.not.i = icmp eq i32 %334, 0, !dbg !75
  br i1 %.not.i, label %337, label %335, !dbg !75

335:                                              ; preds = %269
  %336 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %312), !dbg !75
  br label %__nv_rsqrtf.exit, !dbg !75

337:                                              ; preds = %269
  %338 = tail call float @llvm.nvvm.rsqrt.approx.f(float %312), !dbg !75
  br label %__nv_rsqrtf.exit, !dbg !75

__nv_rsqrtf.exit:                                 ; preds = %335, %337
  %.0.i = phi float [ %336, %335 ], [ %338, %337 ], !dbg !75
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %342 = fmul float %.0.i, %319, !dbg !76
  %343 = fmul float %.0.i, %320, !dbg !76
  %344 = fmul float %.0.i, %321, !dbg !76
  %345 = fmul float %.0.i, %322, !dbg !76
  %346 = fadd float %330, 1.000000e+00, !dbg !77
  %347 = fadd float %331, 1.000000e+00, !dbg !77
  %348 = fadd float %332, 1.000000e+00, !dbg !77
  %349 = fadd float %333, 1.000000e+00, !dbg !77
  %350 = fmul float %346, %342, !dbg !78
  %351 = fmul float %347, %343, !dbg !78
  %352 = fmul float %348, %344, !dbg !78
  %353 = fmul float %349, %345, !dbg !78
  %354 = getelementptr i16, ptr addrspace(1) %7, i64 %18, !dbg !79
  %355 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %350) #6, !dbg !80
  %356 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %351) #6, !dbg !80
  %357 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %352) #6, !dbg !80
  %358 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %353) #6, !dbg !80
  %359 = insertelement <2 x i16> undef, i16 %355, i64 0, !dbg !80
  %360 = insertelement <2 x i16> %359, i16 %356, i64 1, !dbg !80
  %361 = bitcast <2 x i16> %360 to i32, !dbg !80
  %362 = insertelement <2 x i16> undef, i16 %357, i64 0, !dbg !80
  %363 = insertelement <2 x i16> %362, i16 %358, i64 1, !dbg !80
  %364 = bitcast <2 x i16> %363 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %361, i32 %364, ptr addrspace(1) %354, i1 true) #6, !dbg !80
  %365 = getelementptr i16, ptr addrspace(1) %8, i64 %18, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %361, i32 %364, ptr addrspace(1) %365, i1 true) #6, !dbg !82
  %366 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !71
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %366, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !72
  %368 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !72
  %369 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !72
  %370 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !72
  %371 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !72
  %372 = bitcast i32 %368 to float, !dbg !72
  %373 = bitcast i32 %369 to float, !dbg !72
  %374 = bitcast i32 %370 to float, !dbg !72
  %375 = bitcast i32 %371 to float, !dbg !72
  %376 = zext nneg i32 %31 to i64, !dbg !73
  %377 = getelementptr float, ptr addrspace(1) %6, i64 %376, !dbg !73
  %378 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %377, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !74
  %379 = extractvalue { i32, i32, i32, i32 } %378, 0, !dbg !74
  %380 = extractvalue { i32, i32, i32, i32 } %378, 1, !dbg !74
  %381 = extractvalue { i32, i32, i32, i32 } %378, 2, !dbg !74
  %382 = extractvalue { i32, i32, i32, i32 } %378, 3, !dbg !74
  %383 = bitcast i32 %379 to float, !dbg !74
  %384 = bitcast i32 %380 to float, !dbg !74
  %385 = bitcast i32 %381 to float, !dbg !74
  %386 = bitcast i32 %382 to float, !dbg !74
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %.not.i.1 = icmp eq i32 %387, 0, !dbg !75
  br i1 %.not.i.1, label %390, label %388, !dbg !75

388:                                              ; preds = %__nv_rsqrtf.exit
  %389 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %312), !dbg !75
  br label %__nv_rsqrtf.exit.1, !dbg !75

390:                                              ; preds = %__nv_rsqrtf.exit
  %391 = tail call float @llvm.nvvm.rsqrt.approx.f(float %312), !dbg !75
  br label %__nv_rsqrtf.exit.1, !dbg !75

__nv_rsqrtf.exit.1:                               ; preds = %390, %388
  %.0.i.1 = phi float [ %389, %388 ], [ %391, %390 ], !dbg !75
  %392 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %395 = fmul float %.0.i.1, %372, !dbg !76
  %396 = fmul float %.0.i.1, %373, !dbg !76
  %397 = fmul float %.0.i.1, %374, !dbg !76
  %398 = fmul float %.0.i.1, %375, !dbg !76
  %399 = fadd float %383, 1.000000e+00, !dbg !77
  %400 = fadd float %384, 1.000000e+00, !dbg !77
  %401 = fadd float %385, 1.000000e+00, !dbg !77
  %402 = fadd float %386, 1.000000e+00, !dbg !77
  %403 = fmul float %399, %395, !dbg !78
  %404 = fmul float %400, %396, !dbg !78
  %405 = fmul float %401, %397, !dbg !78
  %406 = fmul float %402, %398, !dbg !78
  %407 = getelementptr i16, ptr addrspace(1) %7, i64 %33, !dbg !79
  %408 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %403) #6, !dbg !80
  %409 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %404) #6, !dbg !80
  %410 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %405) #6, !dbg !80
  %411 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %406) #6, !dbg !80
  %412 = insertelement <2 x i16> undef, i16 %408, i64 0, !dbg !80
  %413 = insertelement <2 x i16> %412, i16 %409, i64 1, !dbg !80
  %414 = bitcast <2 x i16> %413 to i32, !dbg !80
  %415 = insertelement <2 x i16> undef, i16 %410, i64 0, !dbg !80
  %416 = insertelement <2 x i16> %415, i16 %411, i64 1, !dbg !80
  %417 = bitcast <2 x i16> %416 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %414, i32 %417, ptr addrspace(1) %407, i1 true) #6, !dbg !80
  %418 = getelementptr i16, ptr addrspace(1) %8, i64 %33, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %414, i32 %417, ptr addrspace(1) %418, i1 true) #6, !dbg !82
  %419 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !71
  %420 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %419, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #6, !dbg !72
  %421 = zext nneg i32 %46 to i64, !dbg !73
  %422 = getelementptr float, ptr addrspace(1) %6, i64 %421, !dbg !73
  %423 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %422, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #6, !dbg !74
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %.not.i.2 = icmp eq i32 %424, 0, !dbg !75
  br i1 %.not.i.2, label %427, label %425, !dbg !75

425:                                              ; preds = %__nv_rsqrtf.exit.1
  %426 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %312), !dbg !75
  br label %__nv_rsqrtf.exit.2, !dbg !75

427:                                              ; preds = %__nv_rsqrtf.exit.1
  %428 = tail call float @llvm.nvvm.rsqrt.approx.f(float %312), !dbg !75
  br label %__nv_rsqrtf.exit.2, !dbg !75

__nv_rsqrtf.exit.2:                               ; preds = %427, %425
  %.0.i.2 = phi float [ %426, %425 ], [ %428, %427 ], !dbg !75
  %429 = extractvalue { i32, i32, i32, i32 } %423, 3, !dbg !74
  %430 = bitcast i32 %429 to float, !dbg !74
  %431 = extractvalue { i32, i32, i32, i32 } %423, 2, !dbg !74
  %432 = bitcast i32 %431 to float, !dbg !74
  %433 = extractvalue { i32, i32, i32, i32 } %423, 1, !dbg !74
  %434 = bitcast i32 %433 to float, !dbg !74
  %435 = extractvalue { i32, i32, i32, i32 } %423, 0, !dbg !74
  %436 = bitcast i32 %435 to float, !dbg !74
  %437 = extractvalue { i32, i32, i32, i32 } %420, 3, !dbg !72
  %438 = bitcast i32 %437 to float, !dbg !72
  %439 = extractvalue { i32, i32, i32, i32 } %420, 2, !dbg !72
  %440 = bitcast i32 %439 to float, !dbg !72
  %441 = extractvalue { i32, i32, i32, i32 } %420, 1, !dbg !72
  %442 = bitcast i32 %441 to float, !dbg !72
  %443 = extractvalue { i32, i32, i32, i32 } %420, 0, !dbg !72
  %444 = bitcast i32 %443 to float, !dbg !72
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !75
  %448 = fmul float %.0.i.2, %444, !dbg !76
  %449 = fmul float %.0.i.2, %442, !dbg !76
  %450 = fmul float %.0.i.2, %440, !dbg !76
  %451 = fmul float %.0.i.2, %438, !dbg !76
  %452 = fadd float %436, 1.000000e+00, !dbg !77
  %453 = fadd float %434, 1.000000e+00, !dbg !77
  %454 = fadd float %432, 1.000000e+00, !dbg !77
  %455 = fadd float %430, 1.000000e+00, !dbg !77
  %456 = fmul float %452, %448, !dbg !78
  %457 = fmul float %453, %449, !dbg !78
  %458 = fmul float %454, %450, !dbg !78
  %459 = fmul float %455, %451, !dbg !78
  %460 = getelementptr i16, ptr addrspace(1) %7, i64 %49, !dbg !79
  %461 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %456) #6, !dbg !80
  %462 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %457) #6, !dbg !80
  %463 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %458) #6, !dbg !80
  %464 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %459) #6, !dbg !80
  %465 = insertelement <2 x i16> undef, i16 %461, i64 0, !dbg !80
  %466 = insertelement <2 x i16> %465, i16 %462, i64 1, !dbg !80
  %467 = bitcast <2 x i16> %466 to i32, !dbg !80
  %468 = insertelement <2 x i16> undef, i16 %463, i64 0, !dbg !80
  %469 = insertelement <2 x i16> %468, i16 %464, i64 1, !dbg !80
  %470 = bitcast <2 x i16> %469 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %467, i32 %470, ptr addrspace(1) %460, i1 %47) #6, !dbg !80
  %471 = getelementptr i16, ptr addrspace(1) %8, i64 %49, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %467, i32 %470, ptr addrspace(1) %471, i1 %47) #6, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cctmue5obvveh4eo7trul3euv4glvzy2swtzmzx7g6jnayqdr6g3.py", directory: "/tmp/torchinductor_zeus/ct")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9de10de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9de10de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9de10de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9de10de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 28, column: 27, scope: !7)
!18 = !DILocation(line: 29, column: 25, scope: !7)
!19 = !DILocation(line: 33, column: 22, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 36, scope: !7)
!31 = !DILocation(line: 51, column: 22, scope: !7)
!32 = !DILocation(line: 53, column: 23, scope: !7)
!33 = !DILocation(line: 62, column: 24, scope: !7)
!34 = !DILocation(line: 63, column: 24, scope: !7)
!35 = !DILocation(line: 40, column: 36, scope: !7)
!36 = !DILocation(line: 41, column: 27, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 44, column: 40, scope: !7)
!39 = !DILocation(line: 44, column: 34, scope: !7)
!40 = !DILocation(line: 44, column: 51, scope: !7)
!41 = !DILocation(line: 44, column: 103, scope: !7)
!42 = !DILocation(line: 45, column: 35, scope: !7)
!43 = !DILocation(line: 45, column: 40, scope: !7)
!44 = !DILocation(line: 46, column: 35, scope: !7)
!45 = !DILocation(line: 46, column: 52, scope: !7)
!46 = !DILocation(line: 46, column: 104, scope: !7)
!47 = !DILocation(line: 47, column: 35, scope: !7)
!48 = !DILocation(line: 47, column: 40, scope: !7)
!49 = !DILocation(line: 48, column: 39, scope: !7)
!50 = !DILocation(line: 48, column: 56, scope: !7)
!51 = !DILocation(line: 54, column: 30, scope: !7)
!52 = !DILocation(line: 55, column: 23, scope: !7)
!53 = !DILocation(line: 57, column: 24, scope: !7)
!54 = !DILocation(line: 58, column: 24, scope: !7)
!55 = !DILocation(line: 64, column: 30, scope: !7)
!56 = !DILocation(line: 65, column: 24, scope: !7)
!57 = !DILocation(line: 66, column: 24, scope: !7)
!58 = !DILocation(line: 67, column: 24, scope: !7)
!59 = !DILocation(line: 70, column: 24, scope: !7)
!60 = !DILocation(line: 71, column: 24, scope: !7)
!61 = !DILocation(line: 72, column: 24, scope: !7)
!62 = !DILocation(line: 75, column: 40, scope: !7)
!63 = !DILocation(line: 76, column: 56, scope: !7)
!64 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !65)
!65 = !DILocation(line: 77, column: 27, scope: !24)
!66 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !67)
!67 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !68)
!68 = !DILocation(line: 77, column: 27, scope: !22)
!69 = !DILocation(line: 85, column: 24, scope: !7)
!70 = !DILocation(line: 87, column: 24, scope: !7)
!71 = !DILocation(line: 82, column: 39, scope: !7)
!72 = !DILocation(line: 82, column: 56, scope: !7)
!73 = !DILocation(line: 83, column: 35, scope: !7)
!74 = !DILocation(line: 83, column: 40, scope: !7)
!75 = !DILocation(line: 88, column: 30, scope: !7)
!76 = !DILocation(line: 89, column: 24, scope: !7)
!77 = !DILocation(line: 91, column: 24, scope: !7)
!78 = !DILocation(line: 92, column: 24, scope: !7)
!79 = !DILocation(line: 94, column: 29, scope: !7)
!80 = !DILocation(line: 94, column: 53, scope: !7)
!81 = !DILocation(line: 95, column: 29, scope: !7)
!82 = !DILocation(line: 95, column: 53, scope: !7)
!83 = !DILocation(line: 78, column: 4, scope: !7)
