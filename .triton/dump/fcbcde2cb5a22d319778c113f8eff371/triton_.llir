; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3de4de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = lshr i32 %6, 5, !dbg !10
  %urem = shl i32 %6, 3, !dbg !10
  %8 = and i32 %urem, 2040, !dbg !10
  %9 = or i32 %8, 4, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %11 = icmp slt i32 %10, 1024, !dbg !12
  %12 = mul i32 %10, 2304, !dbg !13
  %13 = add i32 %12, %9
  %14 = add i32 %8, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = sext i32 %13 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #6, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #6, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %29 = or i32 %8, 2048, !dbg !17
  %30 = icmp ult i32 %29, 2304, !dbg !18
  %31 = add i32 %29, %12, !dbg !14
  %32 = add i32 %13, 2048, !dbg !14
  %33 = sext i32 %31 to i64, !dbg !15
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !15
  %35 = sext i32 %32 to i64, !dbg !15
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !15
  %37 = and i1 %11, %30, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #6, !dbg !16
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !16
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #6, !dbg !16
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !16
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !16
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !16
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !16
  %48 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !16
  %49 = insertelement <2 x i32> %48, i32 %21, i64 1, !dbg !16
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !16
  %51 = fmul <2 x float> %50, %50, !dbg !20
  %52 = insertelement <2 x i1> poison, i1 %11, i64 0, !dbg !21
  %53 = shufflevector <2 x i1> %52, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !21
  %54 = select <2 x i1> %53, <2 x float> %51, <2 x float> zeroinitializer, !dbg !21
  %55 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !16
  %56 = insertelement <2 x i32> %55, i32 %40, i64 1, !dbg !16
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !16
  %58 = fmul <2 x float> %57, %57, !dbg !20
  %59 = insertelement <2 x i1> poison, i1 %37, i64 0, !dbg !21
  %60 = shufflevector <2 x i1> %59, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !21
  %61 = select <2 x i1> %60, <2 x float> %58, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !21
  %62 = fadd <2 x float> %54, %61, !dbg !21
  %63 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !16
  %64 = insertelement <2 x i32> %63, i32 %22, i64 1, !dbg !16
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !16
  %66 = fmul <2 x float> %65, %65, !dbg !20
  %67 = select <2 x i1> %53, <2 x float> %66, <2 x float> zeroinitializer, !dbg !21
  %68 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !16
  %69 = insertelement <2 x i32> %68, i32 %41, i64 1, !dbg !16
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !16
  %71 = fmul <2 x float> %70, %70, !dbg !20
  %72 = select <2 x i1> %60, <2 x float> %71, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !21
  %73 = fadd <2 x float> %67, %72, !dbg !21
  %74 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !16
  %75 = insertelement <2 x i32> %74, i32 %25, i64 1, !dbg !16
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !16
  %77 = fmul <2 x float> %76, %76, !dbg !20
  %78 = select <2 x i1> %53, <2 x float> %77, <2 x float> zeroinitializer, !dbg !21
  %79 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !16
  %80 = insertelement <2 x i32> %79, i32 %44, i64 1, !dbg !16
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !16
  %82 = fmul <2 x float> %81, %81, !dbg !20
  %83 = select <2 x i1> %60, <2 x float> %82, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !21
  %84 = fadd <2 x float> %78, %83, !dbg !21
  %85 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !16
  %86 = insertelement <2 x i32> %85, i32 %27, i64 1, !dbg !16
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !16
  %88 = fmul <2 x float> %87, %87, !dbg !20
  %89 = select <2 x i1> %53, <2 x float> %88, <2 x float> zeroinitializer, !dbg !21
  %90 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !16
  %91 = insertelement <2 x i32> %90, i32 %46, i64 1, !dbg !16
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !16
  %93 = fmul <2 x float> %92, %92, !dbg !20
  %94 = select <2 x i1> %60, <2 x float> %93, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !21
  %95 = fadd <2 x float> %89, %94, !dbg !21
  %96 = and i32 %6, 31, !dbg !10
  %97 = and i32 %7, 7, !dbg !10
  %shift = shufflevector <2 x float> %62, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %98 = fadd <2 x float> %62, %shift, !dbg !22
  %shift30 = shufflevector <2 x float> %73, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %99 = fadd <2 x float> %shift30, %98, !dbg !22
  %100 = fadd <2 x float> %73, %99, !dbg !22
  %shift31 = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %101 = fadd <2 x float> %shift31, %100, !dbg !22
  %102 = fadd <2 x float> %84, %101, !dbg !22
  %shift32 = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %103 = fadd <2 x float> %shift32, %102, !dbg !22
  %104 = fadd <2 x float> %95, %103, !dbg !22
  %105 = extractelement <2 x float> %104, i64 0, !dbg !22
  %106 = bitcast float %105 to i32, !dbg !28
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = fadd float %105, %108, !dbg !22
  %110 = bitcast float %109 to i32, !dbg !28
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = fadd float %109, %112, !dbg !22
  %114 = bitcast float %113 to i32, !dbg !28
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !28
  %116 = bitcast i32 %115 to float, !dbg !28
  %117 = fadd float %113, %116, !dbg !22
  %118 = bitcast float %117 to i32, !dbg !28
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !28
  %120 = bitcast i32 %119 to float, !dbg !28
  %121 = fadd float %117, %120, !dbg !22
  %122 = bitcast float %121 to i32, !dbg !28
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !28
  %124 = bitcast i32 %123 to float, !dbg !28
  %125 = fadd float %121, %124, !dbg !22
  %126 = icmp eq i32 %96, 0, !dbg !28
  %127 = zext nneg i32 %97 to i64, !dbg !28
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i64 %127, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, float %125, i1 %126) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %129 = icmp slt i32 %6, 8, !dbg !28
  %130 = sext i32 %6 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i64 %130, !dbg !28
  %132 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %131, i1 %129) #6, !dbg !28
  %133 = bitcast float %132 to i32, !dbg !28
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 4, i32 31), !dbg !28
  %135 = bitcast i32 %134 to float, !dbg !28
  %136 = fadd float %132, %135, !dbg !22
  %137 = bitcast float %136 to i32, !dbg !28
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 2, i32 31), !dbg !28
  %139 = bitcast i32 %138 to float, !dbg !28
  %140 = fadd float %136, %139, !dbg !22
  %141 = bitcast float %140 to i32, !dbg !28
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !28
  %143 = bitcast i32 %142 to float, !dbg !28
  %144 = fadd float %140, %143, !dbg !22
  %145 = and i32 %6, 7, !dbg !28
  %146 = icmp eq i32 %145, 0, !dbg !28
  %147 = and i1 %129, %146, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, float %144, i1 %147) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %148 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !28
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !30
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !30
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !30
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !30
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !30
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !30
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !30
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !30
  %157 = fadd float %149, 0x3EE4F8B580000000, !dbg !31
  br label %158, !dbg !32

158:                                              ; preds = %5, %__nv_rsqrtf.exit
  %159 = phi i1 [ true, %5 ], [ false, %__nv_rsqrtf.exit ]
  %160 = phi i32 [ 0, %5 ], [ 2048, %__nv_rsqrtf.exit ]
  %161 = or i32 %160, %8, !dbg !33
  %162 = or i32 %160, %9, !dbg !33
  %163 = icmp ult i32 %161, 2304, !dbg !34
  %164 = add i32 %161, %12, !dbg !35
  %165 = add i32 %162, %12, !dbg !35
  %166 = sext i32 %164 to i64, !dbg !36
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !36
  %168 = sext i32 %165 to i64, !dbg !36
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !36
  %170 = and i1 %11, %163, !dbg !37
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %167, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170) #6, !dbg !38
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !38
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !38
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !38
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !38
  %176 = bitcast i32 %172 to float, !dbg !38
  %177 = bitcast i32 %173 to float, !dbg !38
  %178 = bitcast i32 %174 to float, !dbg !38
  %179 = bitcast i32 %175 to float, !dbg !38
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %169, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170) #6, !dbg !38
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !38
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !38
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !38
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !38
  %185 = bitcast i32 %181 to float, !dbg !38
  %186 = bitcast i32 %182 to float, !dbg !38
  %187 = bitcast i32 %183 to float, !dbg !38
  %188 = bitcast i32 %184 to float, !dbg !38
  %189 = zext nneg i32 %161 to i64, !dbg !39
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %189, !dbg !39
  %191 = zext nneg i32 %162 to i64, !dbg !39
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %191, !dbg !39
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %190, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163) #6, !dbg !40
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !40
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !40
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !40
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !40
  %198 = bitcast i32 %194 to float, !dbg !40
  %199 = bitcast i32 %195 to float, !dbg !40
  %200 = bitcast i32 %196 to float, !dbg !40
  %201 = bitcast i32 %197 to float, !dbg !40
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %192, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163) #6, !dbg !40
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !40
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !40
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !40
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !40
  %207 = bitcast i32 %203 to float, !dbg !40
  %208 = bitcast i32 %204 to float, !dbg !40
  %209 = bitcast i32 %205 to float, !dbg !40
  %210 = bitcast i32 %206 to float, !dbg !40
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i = icmp eq i32 %211, 0, !dbg !41
  br i1 %.not.i, label %214, label %212, !dbg !41

212:                                              ; preds = %158
  %213 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %157), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

214:                                              ; preds = %158
  %215 = tail call float @llvm.nvvm.rsqrt.approx.f(float %157), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %212, %214
  %.0.i = phi float [ %213, %212 ], [ %215, %214 ], !dbg !41
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %223 = fmul float %.0.i, %176, !dbg !42
  %224 = fmul float %.0.i, %177, !dbg !42
  %225 = fmul float %.0.i, %178, !dbg !42
  %226 = fmul float %.0.i, %179, !dbg !42
  %227 = fmul float %.0.i, %185, !dbg !42
  %228 = fmul float %.0.i, %186, !dbg !42
  %229 = fmul float %.0.i, %187, !dbg !42
  %230 = fmul float %.0.i, %188, !dbg !42
  %231 = fadd float %198, 1.000000e+00, !dbg !43
  %232 = fadd float %199, 1.000000e+00, !dbg !43
  %233 = fadd float %200, 1.000000e+00, !dbg !43
  %234 = fadd float %201, 1.000000e+00, !dbg !43
  %235 = fadd float %207, 1.000000e+00, !dbg !43
  %236 = fadd float %208, 1.000000e+00, !dbg !43
  %237 = fadd float %209, 1.000000e+00, !dbg !43
  %238 = fadd float %210, 1.000000e+00, !dbg !43
  %239 = fmul float %231, %223, !dbg !44
  %240 = fmul float %232, %224, !dbg !44
  %241 = fmul float %233, %225, !dbg !44
  %242 = fmul float %234, %226, !dbg !44
  %243 = fmul float %235, %227, !dbg !44
  %244 = fmul float %236, %228, !dbg !44
  %245 = fmul float %237, %229, !dbg !44
  %246 = fmul float %238, %230, !dbg !44
  %247 = getelementptr i16, ptr addrspace(1) %2, i64 %166, !dbg !45
  %248 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %239) #6, !dbg !46
  %249 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %240) #6, !dbg !46
  %250 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %241) #6, !dbg !46
  %251 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %242) #6, !dbg !46
  %252 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %243) #6, !dbg !46
  %253 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %244) #6, !dbg !46
  %254 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %245) #6, !dbg !46
  %255 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %246) #6, !dbg !46
  %256 = insertelement <2 x i16> undef, i16 %248, i64 0, !dbg !46
  %257 = insertelement <2 x i16> %256, i16 %249, i64 1, !dbg !46
  %258 = bitcast <2 x i16> %257 to i32, !dbg !46
  %259 = insertelement <2 x i16> undef, i16 %250, i64 0, !dbg !46
  %260 = insertelement <2 x i16> %259, i16 %251, i64 1, !dbg !46
  %261 = bitcast <2 x i16> %260 to i32, !dbg !46
  %262 = insertelement <2 x i16> undef, i16 %252, i64 0, !dbg !46
  %263 = insertelement <2 x i16> %262, i16 %253, i64 1, !dbg !46
  %264 = bitcast <2 x i16> %263 to i32, !dbg !46
  %265 = insertelement <2 x i16> undef, i16 %254, i64 0, !dbg !46
  %266 = insertelement <2 x i16> %265, i16 %255, i64 1, !dbg !46
  %267 = bitcast <2 x i16> %266 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %258, i32 %261, i32 %264, i32 %267, ptr addrspace(1) %247, i1 %170) #6, !dbg !46
  br i1 %159, label %158, label %268, !dbg !32

268:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cklmvzsyb2jzzj6isjfof7pc5qq2nzaqxb4f7ve7c3rkhveeri36.py", directory: "/tmp/torchinductor_zeus/kl")
!4 = !{ptr @triton__0d1d2d3de4de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3de4de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3de4de", linkageName: "triton__0d1d2d3de4de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 28, column: 27, scope: !7)
!18 = !DILocation(line: 29, column: 25, scope: !7)
!19 = !DILocation(line: 31, column: 59, scope: !7)
!20 = !DILocation(line: 32, column: 22, scope: !7)
!21 = !DILocation(line: 35, column: 46, scope: !7)
!22 = !DILocation(line: 233, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 243, column: 36, scope: !23, inlinedAt: !27)
!27 = !DILocation(line: 36, column: 25, scope: !23)
!28 = !DILocation(line: 243, column: 36, scope: !25, inlinedAt: !29)
!29 = !DILocation(line: 36, column: 25, scope: !25)
!30 = !DILocation(line: 44, column: 22, scope: !7)
!31 = !DILocation(line: 46, column: 22, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 27, scope: !7)
!34 = !DILocation(line: 39, column: 25, scope: !7)
!35 = !DILocation(line: 41, column: 40, scope: !7)
!36 = !DILocation(line: 41, column: 34, scope: !7)
!37 = !DILocation(line: 41, column: 59, scope: !7)
!38 = !DILocation(line: 41, column: 51, scope: !7)
!39 = !DILocation(line: 42, column: 35, scope: !7)
!40 = !DILocation(line: 42, column: 40, scope: !7)
!41 = !DILocation(line: 47, column: 30, scope: !7)
!42 = !DILocation(line: 48, column: 23, scope: !7)
!43 = !DILocation(line: 50, column: 24, scope: !7)
!44 = !DILocation(line: 51, column: 24, scope: !7)
!45 = !DILocation(line: 53, column: 29, scope: !7)
!46 = !DILocation(line: 53, column: 53, scope: !7)
!47 = !DILocation(line: 37, column: 4, scope: !7)
