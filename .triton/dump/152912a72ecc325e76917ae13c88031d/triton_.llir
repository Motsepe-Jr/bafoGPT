; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6de7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = lshr i32 %9, 5, !dbg !10
  %urem = and i32 %9, 255, !dbg !10
  %11 = shl nuw nsw i32 %urem, 3, !dbg !10
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %13 = icmp slt i32 %12, 1024, !dbg !12
  %14 = mul i32 %12, 2304, !dbg !13
  %15 = add i32 %11, %14, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr i16, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #6, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %23 = trunc i32 %19 to i16, !dbg !16
  %extelt.offset10 = lshr i32 %19, 16, !dbg !16
  %24 = trunc i32 %extelt.offset10 to i16, !dbg !16
  %25 = trunc i32 %20 to i16, !dbg !16
  %extelt.offset11 = lshr i32 %20, 16, !dbg !16
  %26 = trunc i32 %extelt.offset11 to i16, !dbg !16
  %27 = trunc i32 %21 to i16, !dbg !16
  %extelt.offset12 = lshr i32 %21, 16, !dbg !16
  %28 = trunc i32 %extelt.offset12 to i16, !dbg !16
  %29 = trunc i32 %22 to i16, !dbg !16
  %extelt.offset13 = lshr i32 %22, 16, !dbg !16
  %30 = trunc i32 %extelt.offset13 to i16, !dbg !16
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #6, !dbg !17
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !17
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !17
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !17
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !17
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !17
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !17
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !17
  %39 = fmul float %31, %31, !dbg !18
  %40 = fmul float %32, %32, !dbg !18
  %41 = fmul float %33, %33, !dbg !18
  %42 = fmul float %34, %34, !dbg !18
  %43 = fmul float %35, %35, !dbg !18
  %44 = fmul float %36, %36, !dbg !18
  %45 = fmul float %37, %37, !dbg !18
  %46 = fmul float %38, %38, !dbg !18
  %47 = select i1 %13, float %39, float 0.000000e+00, !dbg !19
  %48 = select i1 %13, float %40, float 0.000000e+00, !dbg !19
  %49 = select i1 %13, float %41, float 0.000000e+00, !dbg !19
  %50 = select i1 %13, float %42, float 0.000000e+00, !dbg !19
  %51 = select i1 %13, float %43, float 0.000000e+00, !dbg !19
  %52 = select i1 %13, float %44, float 0.000000e+00, !dbg !19
  %53 = select i1 %13, float %45, float 0.000000e+00, !dbg !19
  %54 = select i1 %13, float %46, float 0.000000e+00, !dbg !19
  %55 = or i32 %11, 2048, !dbg !20
  %56 = icmp ult i32 %55, 2304, !dbg !21
  %57 = add i32 %55, %14, !dbg !14
  %58 = sext i32 %57 to i64, !dbg !15
  %59 = getelementptr i16, ptr addrspace(1) %0, i64 %58, !dbg !15
  %60 = and i1 %13, %56, !dbg !22
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #6, !dbg !16
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !16
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !16
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !16
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !16
  %66 = trunc i32 %62 to i16, !dbg !16
  %extelt.offset10.1 = lshr i32 %62, 16, !dbg !16
  %67 = trunc i32 %extelt.offset10.1 to i16, !dbg !16
  %68 = trunc i32 %63 to i16, !dbg !16
  %extelt.offset11.1 = lshr i32 %63, 16, !dbg !16
  %69 = trunc i32 %extelt.offset11.1 to i16, !dbg !16
  %70 = trunc i32 %64 to i16, !dbg !16
  %extelt.offset12.1 = lshr i32 %64, 16, !dbg !16
  %71 = trunc i32 %extelt.offset12.1 to i16, !dbg !16
  %72 = trunc i32 %65 to i16, !dbg !16
  %extelt.offset13.1 = lshr i32 %65, 16, !dbg !16
  %73 = trunc i32 %extelt.offset13.1 to i16, !dbg !16
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #6, !dbg !17
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #6, !dbg !17
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #6, !dbg !17
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #6, !dbg !17
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #6, !dbg !17
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #6, !dbg !17
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #6, !dbg !17
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #6, !dbg !17
  %82 = fmul float %74, %74, !dbg !18
  %83 = fmul float %75, %75, !dbg !18
  %84 = fmul float %76, %76, !dbg !18
  %85 = fmul float %77, %77, !dbg !18
  %86 = fmul float %78, %78, !dbg !18
  %87 = fmul float %79, %79, !dbg !18
  %88 = fmul float %80, %80, !dbg !18
  %89 = fmul float %81, %81, !dbg !18
  %90 = select i1 %60, float %82, float -0.000000e+00, !dbg !19
  %91 = fadd float %47, %90, !dbg !19
  %92 = select i1 %60, float %83, float -0.000000e+00, !dbg !19
  %93 = fadd float %48, %92, !dbg !19
  %94 = select i1 %60, float %84, float -0.000000e+00, !dbg !19
  %95 = fadd float %49, %94, !dbg !19
  %96 = select i1 %60, float %85, float -0.000000e+00, !dbg !19
  %97 = fadd float %50, %96, !dbg !19
  %98 = select i1 %60, float %86, float -0.000000e+00, !dbg !19
  %99 = fadd float %51, %98, !dbg !19
  %100 = select i1 %60, float %87, float -0.000000e+00, !dbg !19
  %101 = fadd float %52, %100, !dbg !19
  %102 = select i1 %60, float %88, float -0.000000e+00, !dbg !19
  %103 = fadd float %53, %102, !dbg !19
  %104 = select i1 %60, float %89, float -0.000000e+00, !dbg !19
  %105 = fadd float %54, %104, !dbg !19
  %106 = and i32 %9, 31, !dbg !10
  %107 = and i32 %10, 7, !dbg !10
  %108 = or i32 %11, 4, !dbg !10
  %109 = fadd float %91, %93, !dbg !23
  %110 = fadd float %95, %109, !dbg !23
  %111 = fadd float %97, %110, !dbg !23
  %112 = fadd float %99, %111, !dbg !23
  %113 = fadd float %101, %112, !dbg !23
  %114 = fadd float %103, %113, !dbg !23
  %115 = fadd float %105, %114, !dbg !23
  %116 = bitcast float %115 to i32, !dbg !29
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 16, i32 31), !dbg !29
  %118 = bitcast i32 %117 to float, !dbg !29
  %119 = fadd float %115, %118, !dbg !23
  %120 = bitcast float %119 to i32, !dbg !29
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !29
  %122 = bitcast i32 %121 to float, !dbg !29
  %123 = fadd float %119, %122, !dbg !23
  %124 = bitcast float %123 to i32, !dbg !29
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 4, i32 31), !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = fadd float %123, %126, !dbg !23
  %128 = bitcast float %127 to i32, !dbg !29
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !29
  %130 = bitcast i32 %129 to float, !dbg !29
  %131 = fadd float %127, %130, !dbg !23
  %132 = bitcast float %131 to i32, !dbg !29
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !29
  %134 = bitcast i32 %133 to float, !dbg !29
  %135 = fadd float %131, %134, !dbg !23
  %136 = icmp eq i32 %106, 0, !dbg !29
  %137 = zext nneg i32 %107 to i64, !dbg !29
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i64 %137, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, float %135, i1 %136) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %139 = icmp slt i32 %9, 8, !dbg !29
  %140 = sext i32 %9 to i64, !dbg !29
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i64 %140, !dbg !29
  %142 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %141, i1 %139) #6, !dbg !29
  %143 = bitcast float %142 to i32, !dbg !29
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !29
  %145 = bitcast i32 %144 to float, !dbg !29
  %146 = fadd float %142, %145, !dbg !23
  %147 = bitcast float %146 to i32, !dbg !29
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !29
  %149 = bitcast i32 %148 to float, !dbg !29
  %150 = fadd float %146, %149, !dbg !23
  %151 = bitcast float %150 to i32, !dbg !29
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !29
  %153 = bitcast i32 %152 to float, !dbg !29
  %154 = fadd float %150, %153, !dbg !23
  %155 = and i32 %9, 7, !dbg !29
  %156 = icmp eq i32 %155, 0, !dbg !29
  %157 = and i1 %139, %156, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, float %154, i1 %157) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %158 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %159 = insertelement <1 x float> undef, float %158, i64 0, !dbg !31
  store <1 x float> %159, ptr addrspace(3) @global_smem, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %160 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !31
  %161 = sext i32 %12 to i64, !dbg !32
  %162 = getelementptr float, ptr addrspace(1) %4, i64 %161, !dbg !32
  %163 = icmp eq i32 %urem, 0, !dbg !33
  %164 = and i1 %163, %13, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %162, i1 %164) #6, !dbg !33
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 2.304000e+03) #6, !dbg !34
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 2.304000e+03) #6, !dbg !34
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 2.304000e+03) #6, !dbg !34
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 2.304000e+03) #6, !dbg !34
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 2.304000e+03) #6, !dbg !34
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 2.304000e+03) #6, !dbg !34
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 2.304000e+03) #6, !dbg !34
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 2.304000e+03) #6, !dbg !34
  %173 = fadd float %165, 0x3EE4F8B580000000, !dbg !35
  br label %174, !dbg !36

174:                                              ; preds = %8, %__nv_rsqrtf.exit61
  %175 = phi i1 [ true, %8 ], [ false, %__nv_rsqrtf.exit61 ]
  %176 = phi i32 [ 0, %8 ], [ 2048, %__nv_rsqrtf.exit61 ]
  %177 = phi <8 x float> [ zeroinitializer, %8 ], [ %282, %__nv_rsqrtf.exit61 ]
  %178 = or i32 %176, %11, !dbg !37
  %179 = or i32 %176, %108, !dbg !37
  %180 = icmp ult i32 %178, 2304, !dbg !38
  %181 = add i32 %178, %14, !dbg !39
  %182 = add i32 %179, %14, !dbg !39
  %183 = sext i32 %181 to i64, !dbg !40
  %184 = getelementptr i16, ptr addrspace(1) %0, i64 %183, !dbg !40
  %185 = and i1 %13, %180, !dbg !41
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %184, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #6, !dbg !42
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !42
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !42
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !42
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !42
  %191 = trunc i32 %187 to i16, !dbg !42
  %extelt.offset6 = lshr i32 %187, 16, !dbg !42
  %192 = trunc i32 %extelt.offset6 to i16, !dbg !42
  %193 = trunc i32 %188 to i16, !dbg !42
  %extelt.offset7 = lshr i32 %188, 16, !dbg !42
  %194 = trunc i32 %extelt.offset7 to i16, !dbg !42
  %195 = trunc i32 %189 to i16, !dbg !42
  %extelt.offset8 = lshr i32 %189, 16, !dbg !42
  %196 = trunc i32 %extelt.offset8 to i16, !dbg !42
  %197 = trunc i32 %190 to i16, !dbg !42
  %extelt.offset9 = lshr i32 %190, 16, !dbg !42
  %198 = trunc i32 %extelt.offset9 to i16, !dbg !42
  %199 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %191) #6, !dbg !43
  %200 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %192) #6, !dbg !43
  %201 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %193) #6, !dbg !43
  %202 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %194) #6, !dbg !43
  %203 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %195) #6, !dbg !43
  %204 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %196) #6, !dbg !43
  %205 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %197) #6, !dbg !43
  %206 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %198) #6, !dbg !43
  %207 = zext nneg i32 %178 to i64, !dbg !44
  %208 = getelementptr float, ptr addrspace(1) %1, i64 %207, !dbg !44
  %209 = zext nneg i32 %179 to i64, !dbg !44
  %210 = getelementptr float, ptr addrspace(1) %1, i64 %209, !dbg !44
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %208, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #6, !dbg !45
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !45
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !45
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !45
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !45
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %210, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #6, !dbg !45
  %217 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !45
  %218 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !45
  %219 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !45
  %220 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !45
  %221 = insertelement <8 x i32> poison, i32 %212, i64 0, !dbg !45
  %222 = insertelement <8 x i32> %221, i32 %213, i64 1, !dbg !45
  %223 = insertelement <8 x i32> %222, i32 %214, i64 2, !dbg !45
  %224 = insertelement <8 x i32> %223, i32 %215, i64 3, !dbg !45
  %225 = insertelement <8 x i32> %224, i32 %217, i64 4, !dbg !45
  %226 = insertelement <8 x i32> %225, i32 %218, i64 5, !dbg !45
  %227 = insertelement <8 x i32> %226, i32 %219, i64 6, !dbg !45
  %228 = insertelement <8 x i32> %227, i32 %220, i64 7, !dbg !45
  %229 = bitcast <8 x i32> %228 to <8 x float>, !dbg !45
  %230 = getelementptr float, ptr addrspace(1) %2, i64 %183, !dbg !46
  %231 = sext i32 %182 to i64, !dbg !46
  %232 = getelementptr float, ptr addrspace(1) %2, i64 %231, !dbg !46
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %230, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #6, !dbg !47
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !47
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !47
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !47
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !47
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %232, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #6, !dbg !47
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !47
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !47
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !47
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !47
  %243 = insertelement <8 x i32> poison, i32 %234, i64 0, !dbg !47
  %244 = insertelement <8 x i32> %243, i32 %235, i64 1, !dbg !47
  %245 = insertelement <8 x i32> %244, i32 %236, i64 2, !dbg !47
  %246 = insertelement <8 x i32> %245, i32 %237, i64 3, !dbg !47
  %247 = insertelement <8 x i32> %246, i32 %239, i64 4, !dbg !47
  %248 = insertelement <8 x i32> %247, i32 %240, i64 5, !dbg !47
  %249 = insertelement <8 x i32> %248, i32 %241, i64 6, !dbg !47
  %250 = insertelement <8 x i32> %249, i32 %242, i64 7, !dbg !47
  %251 = bitcast <8 x i32> %250 to <8 x float>, !dbg !47
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %.not.i59 = icmp eq i32 %252, 0, !dbg !48
  br i1 %.not.i59, label %255, label %253, !dbg !48

253:                                              ; preds = %174
  %254 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %173), !dbg !48
  br label %__nv_rsqrtf.exit61, !dbg !48

255:                                              ; preds = %174
  %256 = tail call float @llvm.nvvm.rsqrt.approx.f(float %173), !dbg !48
  br label %__nv_rsqrtf.exit61, !dbg !48

__nv_rsqrtf.exit61:                               ; preds = %253, %255
  %.0.i60 = phi float [ %254, %253 ], [ %256, %255 ], !dbg !48
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %264 = insertelement <8 x float> poison, float %199, i64 0, !dbg !49
  %265 = insertelement <8 x float> %264, float %200, i64 1, !dbg !49
  %266 = insertelement <8 x float> %265, float %201, i64 2, !dbg !49
  %267 = insertelement <8 x float> %266, float %202, i64 3, !dbg !49
  %268 = insertelement <8 x float> %267, float %203, i64 4, !dbg !49
  %269 = insertelement <8 x float> %268, float %204, i64 5, !dbg !49
  %270 = insertelement <8 x float> %269, float %205, i64 6, !dbg !49
  %271 = insertelement <8 x float> %270, float %206, i64 7, !dbg !49
  %272 = insertelement <8 x float> poison, float %.0.i60, i64 0, !dbg !49
  %273 = shufflevector <8 x float> %272, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !49
  %274 = fmul <8 x float> %271, %273, !dbg !49
  %275 = fadd <8 x float> %229, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !50
  %276 = fmul <8 x float> %275, %274, !dbg !51
  %277 = fadd <8 x float> %276, %251, !dbg !52
  %278 = fmul <8 x float> %277, %277, !dbg !53
  %279 = insertelement <8 x i1> poison, i1 %185, i64 0, !dbg !54
  %280 = shufflevector <8 x i1> %279, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !54
  %281 = select <8 x i1> %280, <8 x float> %278, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !54
  %282 = fadd <8 x float> %177, %281, !dbg !54
  br i1 %175, label %174, label %283, !dbg !36

283:                                              ; preds = %__nv_rsqrtf.exit61
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %shift = shufflevector <8 x float> %282, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %284 = fadd <8 x float> %282, %shift, !dbg !57
  %shift113 = shufflevector <8 x float> %282, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %285 = fadd <8 x float> %shift113, %284, !dbg !57
  %shift114 = shufflevector <8 x float> %282, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %286 = fadd <8 x float> %shift114, %285, !dbg !57
  %shift115 = shufflevector <8 x float> %282, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %287 = fadd <8 x float> %shift115, %286, !dbg !57
  %shift116 = shufflevector <8 x float> %282, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %288 = fadd <8 x float> %shift116, %287, !dbg !57
  %shift117 = shufflevector <8 x float> %282, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %289 = fadd <8 x float> %shift117, %288, !dbg !57
  %shift118 = shufflevector <8 x float> %282, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %290 = fadd <8 x float> %shift118, %289, !dbg !57
  %291 = extractelement <8 x float> %290, i64 0, !dbg !57
  %292 = bitcast float %291 to i32, !dbg !55
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 16, i32 31), !dbg !55
  %294 = bitcast i32 %293 to float, !dbg !55
  %295 = fadd float %291, %294, !dbg !57
  %296 = bitcast float %295 to i32, !dbg !55
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 8, i32 31), !dbg !55
  %298 = bitcast i32 %297 to float, !dbg !55
  %299 = fadd float %295, %298, !dbg !57
  %300 = bitcast float %299 to i32, !dbg !55
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 4, i32 31), !dbg !55
  %302 = bitcast i32 %301 to float, !dbg !55
  %303 = fadd float %299, %302, !dbg !57
  %304 = bitcast float %303 to i32, !dbg !55
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 2, i32 31), !dbg !55
  %306 = bitcast i32 %305 to float, !dbg !55
  %307 = fadd float %303, %306, !dbg !57
  %308 = bitcast float %307 to i32, !dbg !55
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 1, i32 31), !dbg !55
  %310 = bitcast i32 %309 to float, !dbg !55
  %311 = fadd float %307, %310, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, float %311, i1 %136) #6, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %312 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %141, i1 %139) #6, !dbg !55
  %313 = bitcast float %312 to i32, !dbg !55
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 4, i32 31), !dbg !55
  %315 = bitcast i32 %314 to float, !dbg !55
  %316 = fadd float %312, %315, !dbg !57
  %317 = bitcast float %316 to i32, !dbg !55
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 2, i32 31), !dbg !55
  %319 = bitcast i32 %318 to float, !dbg !55
  %320 = fadd float %316, %319, !dbg !57
  %321 = bitcast float %320 to i32, !dbg !55
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 1, i32 31), !dbg !55
  %323 = bitcast i32 %322 to float, !dbg !55
  %324 = fadd float %320, %323, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, float %324, i1 %157) #6, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %325 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !55
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float 2.304000e+03) #6, !dbg !60
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float 2.304000e+03) #6, !dbg !60
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float 2.304000e+03) #6, !dbg !60
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float 2.304000e+03) #6, !dbg !60
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float 2.304000e+03) #6, !dbg !60
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float 2.304000e+03) #6, !dbg !60
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float 2.304000e+03) #6, !dbg !60
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float 2.304000e+03) #6, !dbg !60
  %334 = fadd float %326, 0x3EE4F8B580000000, !dbg !61
  br label %335, !dbg !62

335:                                              ; preds = %283, %__nv_rsqrtf.exit37
  %336 = phi i1 [ true, %283 ], [ false, %__nv_rsqrtf.exit37 ]
  %337 = phi i32 [ 0, %283 ], [ 2048, %__nv_rsqrtf.exit37 ]
  %338 = or i32 %337, %11, !dbg !63
  %339 = or i32 %337, %108, !dbg !63
  %340 = icmp ult i32 %338, 2304, !dbg !64
  %341 = add i32 %338, %14, !dbg !65
  %342 = add i32 %339, %14, !dbg !65
  %343 = sext i32 %341 to i64, !dbg !66
  %344 = getelementptr i16, ptr addrspace(1) %0, i64 %343, !dbg !66
  %345 = and i1 %13, %340, !dbg !67
  %346 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %344, i1 %345, i32 0, i1 %345, i32 0, i1 %345, i32 0, i1 %345, i32 0, i1 %345) #6, !dbg !68
  %347 = extractvalue { i32, i32, i32, i32 } %346, 0, !dbg !68
  %348 = extractvalue { i32, i32, i32, i32 } %346, 1, !dbg !68
  %349 = extractvalue { i32, i32, i32, i32 } %346, 2, !dbg !68
  %350 = extractvalue { i32, i32, i32, i32 } %346, 3, !dbg !68
  %351 = trunc i32 %347 to i16, !dbg !68
  %extelt.offset = lshr i32 %347, 16, !dbg !68
  %352 = trunc i32 %extelt.offset to i16, !dbg !68
  %353 = trunc i32 %348 to i16, !dbg !68
  %extelt.offset3 = lshr i32 %348, 16, !dbg !68
  %354 = trunc i32 %extelt.offset3 to i16, !dbg !68
  %355 = trunc i32 %349 to i16, !dbg !68
  %extelt.offset4 = lshr i32 %349, 16, !dbg !68
  %356 = trunc i32 %extelt.offset4 to i16, !dbg !68
  %357 = trunc i32 %350 to i16, !dbg !68
  %extelt.offset5 = lshr i32 %350, 16, !dbg !68
  %358 = trunc i32 %extelt.offset5 to i16, !dbg !68
  %359 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %351) #6, !dbg !69
  %360 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %352) #6, !dbg !69
  %361 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %353) #6, !dbg !69
  %362 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %354) #6, !dbg !69
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #6, !dbg !69
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #6, !dbg !69
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #6, !dbg !69
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #6, !dbg !69
  %367 = zext nneg i32 %338 to i64, !dbg !70
  %368 = getelementptr float, ptr addrspace(1) %1, i64 %367, !dbg !70
  %369 = zext nneg i32 %339 to i64, !dbg !70
  %370 = getelementptr float, ptr addrspace(1) %1, i64 %369, !dbg !70
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %368, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #6, !dbg !71
  %372 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !71
  %373 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !71
  %374 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !71
  %375 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !71
  %376 = bitcast i32 %372 to float, !dbg !71
  %377 = bitcast i32 %373 to float, !dbg !71
  %378 = bitcast i32 %374 to float, !dbg !71
  %379 = bitcast i32 %375 to float, !dbg !71
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %370, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #6, !dbg !71
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !71
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !71
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !71
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !71
  %385 = bitcast i32 %381 to float, !dbg !71
  %386 = bitcast i32 %382 to float, !dbg !71
  %387 = bitcast i32 %383 to float, !dbg !71
  %388 = bitcast i32 %384 to float, !dbg !71
  %389 = getelementptr float, ptr addrspace(1) %2, i64 %343, !dbg !72
  %390 = sext i32 %342 to i64, !dbg !72
  %391 = getelementptr float, ptr addrspace(1) %2, i64 %390, !dbg !72
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %389, i1 %345, i32 0, i1 %345, i32 0, i1 %345, i32 0, i1 %345, i32 0, i1 %345) #6, !dbg !73
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !73
  %394 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !73
  %395 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !73
  %396 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !73
  %397 = bitcast i32 %393 to float, !dbg !73
  %398 = bitcast i32 %394 to float, !dbg !73
  %399 = bitcast i32 %395 to float, !dbg !73
  %400 = bitcast i32 %396 to float, !dbg !73
  %401 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %391, i1 %345, i32 0, i1 %345, i32 0, i1 %345, i32 0, i1 %345, i32 0, i1 %345) #6, !dbg !73
  %402 = extractvalue { i32, i32, i32, i32 } %401, 0, !dbg !73
  %403 = extractvalue { i32, i32, i32, i32 } %401, 1, !dbg !73
  %404 = extractvalue { i32, i32, i32, i32 } %401, 2, !dbg !73
  %405 = extractvalue { i32, i32, i32, i32 } %401, 3, !dbg !73
  %406 = bitcast i32 %402 to float, !dbg !73
  %407 = bitcast i32 %403 to float, !dbg !73
  %408 = bitcast i32 %404 to float, !dbg !73
  %409 = bitcast i32 %405 to float, !dbg !73
  %410 = getelementptr float, ptr addrspace(1) %3, i64 %367, !dbg !74
  %411 = getelementptr float, ptr addrspace(1) %3, i64 %369, !dbg !74
  %412 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %410, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #6, !dbg !75
  %413 = extractvalue { i32, i32, i32, i32 } %412, 0, !dbg !75
  %414 = extractvalue { i32, i32, i32, i32 } %412, 1, !dbg !75
  %415 = extractvalue { i32, i32, i32, i32 } %412, 2, !dbg !75
  %416 = extractvalue { i32, i32, i32, i32 } %412, 3, !dbg !75
  %417 = bitcast i32 %413 to float, !dbg !75
  %418 = bitcast i32 %414 to float, !dbg !75
  %419 = bitcast i32 %415 to float, !dbg !75
  %420 = bitcast i32 %416 to float, !dbg !75
  %421 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %411, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340, i32 0, i1 %340) #6, !dbg !75
  %422 = extractvalue { i32, i32, i32, i32 } %421, 0, !dbg !75
  %423 = extractvalue { i32, i32, i32, i32 } %421, 1, !dbg !75
  %424 = extractvalue { i32, i32, i32, i32 } %421, 2, !dbg !75
  %425 = extractvalue { i32, i32, i32, i32 } %421, 3, !dbg !75
  %426 = bitcast i32 %422 to float, !dbg !75
  %427 = bitcast i32 %423 to float, !dbg !75
  %428 = bitcast i32 %424 to float, !dbg !75
  %429 = bitcast i32 %425 to float, !dbg !75
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %.not.i = icmp eq i32 %430, 0, !dbg !76
  br i1 %.not.i, label %433, label %431, !dbg !76

431:                                              ; preds = %335
  %432 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %173), !dbg !76
  br label %__nv_rsqrtf.exit, !dbg !76

433:                                              ; preds = %335
  %434 = tail call float @llvm.nvvm.rsqrt.approx.f(float %173), !dbg !76
  br label %__nv_rsqrtf.exit, !dbg !76

__nv_rsqrtf.exit:                                 ; preds = %431, %433
  %.0.i = phi float [ %432, %431 ], [ %434, %433 ], !dbg !76
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %442 = fmul float %359, %.0.i, !dbg !77
  %443 = fmul float %360, %.0.i, !dbg !77
  %444 = fmul float %361, %.0.i, !dbg !77
  %445 = fmul float %362, %.0.i, !dbg !77
  %446 = fmul float %363, %.0.i, !dbg !77
  %447 = fmul float %364, %.0.i, !dbg !77
  %448 = fmul float %365, %.0.i, !dbg !77
  %449 = fmul float %366, %.0.i, !dbg !77
  %450 = fadd float %376, 1.000000e+00, !dbg !78
  %451 = fadd float %377, 1.000000e+00, !dbg !78
  %452 = fadd float %378, 1.000000e+00, !dbg !78
  %453 = fadd float %379, 1.000000e+00, !dbg !78
  %454 = fadd float %385, 1.000000e+00, !dbg !78
  %455 = fadd float %386, 1.000000e+00, !dbg !78
  %456 = fadd float %387, 1.000000e+00, !dbg !78
  %457 = fadd float %388, 1.000000e+00, !dbg !78
  %458 = fmul float %450, %442, !dbg !79
  %459 = fmul float %451, %443, !dbg !79
  %460 = fmul float %452, %444, !dbg !79
  %461 = fmul float %453, %445, !dbg !79
  %462 = fmul float %454, %446, !dbg !79
  %463 = fmul float %455, %447, !dbg !79
  %464 = fmul float %456, %448, !dbg !79
  %465 = fmul float %457, %449, !dbg !79
  %466 = fadd float %458, %397, !dbg !80
  %467 = fadd float %459, %398, !dbg !80
  %468 = fadd float %460, %399, !dbg !80
  %469 = fadd float %461, %400, !dbg !80
  %470 = fadd float %462, %406, !dbg !80
  %471 = fadd float %463, %407, !dbg !80
  %472 = fadd float %464, %408, !dbg !80
  %473 = fadd float %465, %409, !dbg !80
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %.not.i35 = icmp eq i32 %474, 0, !dbg !81
  br i1 %.not.i35, label %477, label %475, !dbg !81

475:                                              ; preds = %__nv_rsqrtf.exit
  %476 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %334), !dbg !81
  br label %__nv_rsqrtf.exit37, !dbg !81

477:                                              ; preds = %__nv_rsqrtf.exit
  %478 = tail call float @llvm.nvvm.rsqrt.approx.f(float %334), !dbg !81
  br label %__nv_rsqrtf.exit37, !dbg !81

__nv_rsqrtf.exit37:                               ; preds = %475, %477
  %.0.i36 = phi float [ %476, %475 ], [ %478, %477 ], !dbg !81
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %483 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %484 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %485 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %486 = fmul float %466, %.0.i36, !dbg !82
  %487 = fmul float %467, %.0.i36, !dbg !82
  %488 = fmul float %468, %.0.i36, !dbg !82
  %489 = fmul float %469, %.0.i36, !dbg !82
  %490 = fmul float %470, %.0.i36, !dbg !82
  %491 = fmul float %471, %.0.i36, !dbg !82
  %492 = fmul float %472, %.0.i36, !dbg !82
  %493 = fmul float %473, %.0.i36, !dbg !82
  %494 = fadd float %417, 1.000000e+00, !dbg !83
  %495 = fadd float %418, 1.000000e+00, !dbg !83
  %496 = fadd float %419, 1.000000e+00, !dbg !83
  %497 = fadd float %420, 1.000000e+00, !dbg !83
  %498 = fadd float %426, 1.000000e+00, !dbg !83
  %499 = fadd float %427, 1.000000e+00, !dbg !83
  %500 = fadd float %428, 1.000000e+00, !dbg !83
  %501 = fadd float %429, 1.000000e+00, !dbg !83
  %502 = fmul float %494, %486, !dbg !84
  %503 = fmul float %495, %487, !dbg !84
  %504 = fmul float %496, %488, !dbg !84
  %505 = fmul float %497, %489, !dbg !84
  %506 = fmul float %498, %490, !dbg !84
  %507 = fmul float %499, %491, !dbg !84
  %508 = fmul float %500, %492, !dbg !84
  %509 = fmul float %501, %493, !dbg !84
  %510 = getelementptr i16, ptr addrspace(1) %5, i64 %343, !dbg !85
  %511 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %502) #6, !dbg !86
  %512 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #6, !dbg !86
  %513 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %504) #6, !dbg !86
  %514 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #6, !dbg !86
  %515 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #6, !dbg !86
  %516 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %507) #6, !dbg !86
  %517 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %508) #6, !dbg !86
  %518 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %509) #6, !dbg !86
  %519 = insertelement <2 x i16> undef, i16 %511, i64 0, !dbg !86
  %520 = insertelement <2 x i16> %519, i16 %512, i64 1, !dbg !86
  %521 = bitcast <2 x i16> %520 to i32, !dbg !86
  %522 = insertelement <2 x i16> undef, i16 %513, i64 0, !dbg !86
  %523 = insertelement <2 x i16> %522, i16 %514, i64 1, !dbg !86
  %524 = bitcast <2 x i16> %523 to i32, !dbg !86
  %525 = insertelement <2 x i16> undef, i16 %515, i64 0, !dbg !86
  %526 = insertelement <2 x i16> %525, i16 %516, i64 1, !dbg !86
  %527 = bitcast <2 x i16> %526 to i32, !dbg !86
  %528 = insertelement <2 x i16> undef, i16 %517, i64 0, !dbg !86
  %529 = insertelement <2 x i16> %528, i16 %518, i64 1, !dbg !86
  %530 = bitcast <2 x i16> %529 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %521, i32 %524, i32 %527, i32 %530, ptr addrspace(1) %510, i1 %345) #6, !dbg !86
  br i1 %336, label %335, label %531, !dbg !62

531:                                              ; preds = %__nv_rsqrtf.exit37
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cdujswtpe2dwc33fta7laklqva2gruqykbbj26pzjp63lsq4t5jj.py", directory: "/tmp/torchinductor_zeus/du")
!4 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7de", linkageName: "triton__0d1d2d3d4d5d6de7de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 110, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 36, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 29, column: 25, scope: !7)
!22 = !DILocation(line: 31, column: 59, scope: !7)
!23 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 37, column: 25, scope: !26)
!31 = !DILocation(line: 37, column: 28, scope: !7)
!32 = !DILocation(line: 38, column: 25, scope: !7)
!33 = !DILocation(line: 38, column: 36, scope: !7)
!34 = !DILocation(line: 49, column: 22, scope: !7)
!35 = !DILocation(line: 51, column: 23, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 27, scope: !7)
!38 = !DILocation(line: 42, column: 25, scope: !7)
!39 = !DILocation(line: 44, column: 40, scope: !7)
!40 = !DILocation(line: 44, column: 34, scope: !7)
!41 = !DILocation(line: 44, column: 59, scope: !7)
!42 = !DILocation(line: 44, column: 51, scope: !7)
!43 = !DILocation(line: 44, column: 110, scope: !7)
!44 = !DILocation(line: 45, column: 35, scope: !7)
!45 = !DILocation(line: 45, column: 40, scope: !7)
!46 = !DILocation(line: 46, column: 35, scope: !7)
!47 = !DILocation(line: 46, column: 52, scope: !7)
!48 = !DILocation(line: 52, column: 30, scope: !7)
!49 = !DILocation(line: 53, column: 23, scope: !7)
!50 = !DILocation(line: 55, column: 24, scope: !7)
!51 = !DILocation(line: 56, column: 24, scope: !7)
!52 = !DILocation(line: 59, column: 24, scope: !7)
!53 = !DILocation(line: 60, column: 24, scope: !7)
!54 = !DILocation(line: 63, column: 48, scope: !7)
!55 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !56)
!56 = !DILocation(line: 64, column: 27, scope: !26)
!57 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !58)
!58 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !59)
!59 = !DILocation(line: 64, column: 27, scope: !24)
!60 = !DILocation(line: 86, column: 24, scope: !7)
!61 = !DILocation(line: 87, column: 24, scope: !7)
!62 = !DILocation(line: 65, column: 36, scope: !7)
!63 = !DILocation(line: 66, column: 27, scope: !7)
!64 = !DILocation(line: 67, column: 25, scope: !7)
!65 = !DILocation(line: 69, column: 41, scope: !7)
!66 = !DILocation(line: 69, column: 35, scope: !7)
!67 = !DILocation(line: 69, column: 60, scope: !7)
!68 = !DILocation(line: 69, column: 52, scope: !7)
!69 = !DILocation(line: 69, column: 112, scope: !7)
!70 = !DILocation(line: 70, column: 35, scope: !7)
!71 = !DILocation(line: 70, column: 40, scope: !7)
!72 = !DILocation(line: 71, column: 35, scope: !7)
!73 = !DILocation(line: 71, column: 52, scope: !7)
!74 = !DILocation(line: 72, column: 35, scope: !7)
!75 = !DILocation(line: 72, column: 40, scope: !7)
!76 = !DILocation(line: 78, column: 30, scope: !7)
!77 = !DILocation(line: 79, column: 24, scope: !7)
!78 = !DILocation(line: 81, column: 24, scope: !7)
!79 = !DILocation(line: 82, column: 24, scope: !7)
!80 = !DILocation(line: 85, column: 24, scope: !7)
!81 = !DILocation(line: 88, column: 30, scope: !7)
!82 = !DILocation(line: 89, column: 24, scope: !7)
!83 = !DILocation(line: 90, column: 24, scope: !7)
!84 = !DILocation(line: 91, column: 24, scope: !7)
!85 = !DILocation(line: 93, column: 29, scope: !7)
!86 = !DILocation(line: 93, column: 53, scope: !7)
!87 = !DILocation(line: 65, column: 4, scope: !7)
