#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 4], warpsPerCTA = [8, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x16xf32, #blocked>
    %cst_0 = arith.constant dense<16> : tensor<1x16xi32, #blocked1>
    %cst_1 = arith.constant dense<16> : tensor<1x16xi32, #blocked>
    %cst_2 = arith.constant dense<256> : tensor<256x1xi32, #blocked1>
    %cst_3 = arith.constant dense<256> : tensor<256x1xi32, #blocked>
    %cst_4 = arith.constant dense<4> : tensor<1x16xi32, #blocked1>
    %cst_5 = arith.constant dense<4> : tensor<1x16xi32, #blocked>
    %cst_6 = arith.constant dense<4> : tensor<256x1xi32, #blocked1>
    %cst_7 = arith.constant dense<2048> : tensor<1x16xi32, #blocked1>
    %cst_8 = arith.constant dense<256> : tensor<1x16xi32, #blocked>
    %cst_9 = arith.constant dense<1024> : tensor<1x16xi32, #blocked1>
    %cst_10 = arith.constant dense<256> : tensor<256x1xi64, #blocked1>
    %cst_11 = arith.constant dense<256> : tensor<256x1xi64, #blocked>
    %cst_12 = arith.constant dense<1536> : tensor<1x16xi32, #blocked1>
    %cst_13 = arith.constant dense<128> : tensor<256x1xi32, #blocked>
    %cst_14 = arith.constant dense<512> : tensor<1x16xi32, #blocked1>
    %cst_15 = arith.constant dense<-128> : tensor<256x1xi32, #blocked>
    %cst_16 = arith.constant dense<-512> : tensor<1x16xi32, #blocked1>
    %cst_17 = arith.constant dense<128> : tensor<256x1xi64, #blocked1>
    %cst_18 = arith.constant dense<128> : tensor<256x1xi64, #blocked>
    %c16_i32 = arith.constant 16 : i32
    %c256_i32 = arith.constant 256 : i32
    %cst_19 = arith.constant dense<0.000000e+00> : tensor<256x16xbf16, #blocked1>
    %cst_20 = arith.constant dense<0.000000e+00> : tensor<256x16xf32, #blocked1>
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c16_i32 : i32
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x16xi32, #blocked1>
    %5 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x16xi32, #blocked>
    %6 = tt.splat %1 : (i32) -> tensor<1x16xi32, #blocked1>
    %7 = tt.splat %1 : (i32) -> tensor<1x16xi32, #blocked>
    %8 = arith.addi %6, %4 : tensor<1x16xi32, #blocked1>
    %9 = arith.addi %7, %5 : tensor<1x16xi32, #blocked>
    %10 = arith.cmpi slt, %8, %cst_0 : tensor<1x16xi32, #blocked1>
    %11 = arith.cmpi slt, %9, %cst_1 : tensor<1x16xi32, #blocked>
    %12 = tt.get_program_id x : i32
    %13 = arith.muli %12, %c256_i32 : i32
    %14 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %15 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %16 = tt.expand_dims %14 {axis = 1 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<256x1xi32, #blocked1>
    %17 = tt.expand_dims %15 {axis = 1 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<256x1xi32, #blocked>
    %18 = tt.splat %13 : (i32) -> tensor<256x1xi32, #blocked1>
    %19 = tt.splat %13 : (i32) -> tensor<256x1xi32, #blocked>
    %20 = arith.addi %18, %16 : tensor<256x1xi32, #blocked1>
    %21 = arith.addi %19, %17 : tensor<256x1xi32, #blocked>
    %22 = arith.cmpi slt, %20, %cst_2 : tensor<256x1xi32, #blocked1>
    %23 = arith.cmpi slt, %21, %cst_3 : tensor<256x1xi32, #blocked>
    %24 = arith.remsi %8, %cst_4 : tensor<1x16xi32, #blocked1>
    %25 = arith.remsi %9, %cst_5 : tensor<1x16xi32, #blocked>
    %26 = arith.divsi %8, %cst_4 : tensor<1x16xi32, #blocked1>
    %27 = arith.muli %20, %cst_6 : tensor<256x1xi32, #blocked1>
    %28 = tt.broadcast %24 : (tensor<1x16xi32, #blocked1>) -> tensor<256x16xi32, #blocked1>
    %29 = tt.broadcast %27 : (tensor<256x1xi32, #blocked1>) -> tensor<256x16xi32, #blocked1>
    %30 = arith.addi %28, %29 : tensor<256x16xi32, #blocked1>
    %31 = arith.muli %26, %cst_7 : tensor<1x16xi32, #blocked1>
    %32 = tt.broadcast %31 : (tensor<1x16xi32, #blocked1>) -> tensor<256x16xi32, #blocked1>
    %33 = arith.addi %30, %32 : tensor<256x16xi32, #blocked1>
    %34 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<256x16x!tt.ptr<bf16, 1>, #blocked1>
    %35 = tt.addptr %34, %33 : tensor<256x16x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x16xi32, #blocked1>
    %36 = tt.broadcast %22 : (tensor<256x1xi1, #blocked1>) -> tensor<256x16xi1, #blocked1>
    %37 = tt.broadcast %23 : (tensor<256x1xi1, #blocked>) -> tensor<256x16xi1, #blocked>
    %38 = tt.broadcast %10 : (tensor<1x16xi1, #blocked1>) -> tensor<256x16xi1, #blocked1>
    %39 = tt.broadcast %11 : (tensor<1x16xi1, #blocked>) -> tensor<256x16xi1, #blocked>
    %40 = arith.andi %36, %38 : tensor<256x16xi1, #blocked1>
    %41 = arith.andi %37, %39 : tensor<256x16xi1, #blocked>
    %42 = tt.load %35, %40 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x16xbf16, #blocked1>
    %43 = triton_gpu.convert_layout %42 : (tensor<256x16xbf16, #blocked1>) -> tensor<256x16xbf16, #blocked>
    %44 = arith.extf %43 : tensor<256x16xbf16, #blocked> to tensor<256x16xf32, #blocked>
    %45 = arith.muli %25, %cst_8 : tensor<1x16xi32, #blocked>
    %46 = tt.broadcast %21 : (tensor<256x1xi32, #blocked>) -> tensor<256x16xi32, #blocked>
    %47 = tt.broadcast %45 : (tensor<1x16xi32, #blocked>) -> tensor<256x16xi32, #blocked>
    %48 = arith.addi %46, %47 : tensor<256x16xi32, #blocked>
    %49 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<256x16x!tt.ptr<f32, 1>, #blocked>
    %50 = tt.addptr %49, %48 : tensor<256x16x!tt.ptr<f32, 1>, #blocked>, tensor<256x16xi32, #blocked>
    %51 = tt.load %50, %41 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x16xf32, #blocked>
    %52 = triton_gpu.convert_layout %51 : (tensor<256x16xf32, #blocked>) -> tensor<256x16xf32, #blocked1>
    %53 = arith.addi %24, %cst_9 : tensor<1x16xi32, #blocked1>
    %54 = tt.broadcast %53 : (tensor<1x16xi32, #blocked1>) -> tensor<256x16xi32, #blocked1>
    %55 = arith.addi %54, %29 : tensor<256x16xi32, #blocked1>
    %56 = arith.addi %55, %32 : tensor<256x16xi32, #blocked1>
    %57 = tt.addptr %34, %56 : tensor<256x16x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x16xi32, #blocked1>
    %58 = tt.load %57, %40 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x16xbf16, #blocked1>
    %59 = arith.extf %58 : tensor<256x16xbf16, #blocked1> to tensor<256x16xf32, #blocked1>
    %60 = arith.extsi %20 : tensor<256x1xi32, #blocked1> to tensor<256x1xi64, #blocked1>
    %61 = arith.extsi %21 : tensor<256x1xi32, #blocked> to tensor<256x1xi64, #blocked>
    %62 = arith.cmpi sge, %60, %cst_10 : tensor<256x1xi64, #blocked1>
    %63 = arith.cmpi sge, %61, %cst_11 : tensor<256x1xi64, #blocked>
    %64 = arith.andi %62, %22 : tensor<256x1xi1, #blocked1>
    %65 = tt.broadcast %64 : (tensor<256x1xi1, #blocked1>) -> tensor<256x16xi1, #blocked1>
    %66 = arith.andi %65, %38 : tensor<256x16xi1, #blocked1>
    %67 = tt.load %35, %66, %cst_19 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x16xbf16, #blocked1>
    %68 = triton_gpu.convert_layout %67 : (tensor<256x16xbf16, #blocked1>) -> tensor<256x16xbf16, #blocked>
    %69 = arith.extf %68 : tensor<256x16xbf16, #blocked> to tensor<256x16xf32, #blocked>
    %70 = tt.broadcast %62 : (tensor<256x1xi1, #blocked1>) -> tensor<256x16xi1, #blocked1>
    %71 = tt.broadcast %63 : (tensor<256x1xi1, #blocked>) -> tensor<256x16xi1, #blocked>
    %72 = arith.select %71, %69, %cst : tensor<256x16xi1, #blocked>, tensor<256x16xf32, #blocked>
    %73 = arith.mulf %44, %51 : tensor<256x16xf32, #blocked>
    %74 = arith.cmpi sge, %60, %cst_17 : tensor<256x1xi64, #blocked1>
    %75 = arith.cmpi sge, %61, %cst_18 : tensor<256x1xi64, #blocked>
    %76 = arith.addi %24, %cst_16 : tensor<1x16xi32, #blocked1>
    %77 = tt.broadcast %76 : (tensor<1x16xi32, #blocked1>) -> tensor<256x16xi32, #blocked1>
    %78 = arith.addi %77, %29 : tensor<256x16xi32, #blocked1>
    %79 = arith.addi %78, %32 : tensor<256x16xi32, #blocked1>
    %80 = tt.addptr %34, %79 : tensor<256x16x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x16xi32, #blocked1>
    %81 = arith.andi %74, %22 : tensor<256x1xi1, #blocked1>
    %82 = arith.andi %75, %23 : tensor<256x1xi1, #blocked>
    %83 = tt.broadcast %81 : (tensor<256x1xi1, #blocked1>) -> tensor<256x16xi1, #blocked1>
    %84 = tt.broadcast %82 : (tensor<256x1xi1, #blocked>) -> tensor<256x16xi1, #blocked>
    %85 = arith.andi %83, %38 : tensor<256x16xi1, #blocked1>
    %86 = arith.andi %84, %39 : tensor<256x16xi1, #blocked>
    %87 = tt.load %80, %85, %cst_19 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x16xbf16, #blocked1>
    %88 = triton_gpu.convert_layout %87 : (tensor<256x16xbf16, #blocked1>) -> tensor<256x16xbf16, #blocked>
    %89 = arith.extf %88 : tensor<256x16xbf16, #blocked> to tensor<256x16xf32, #blocked>
    %90 = arith.addi %21, %cst_15 : tensor<256x1xi32, #blocked>
    %91 = tt.broadcast %90 : (tensor<256x1xi32, #blocked>) -> tensor<256x16xi32, #blocked>
    %92 = arith.addi %91, %47 : tensor<256x16xi32, #blocked>
    %93 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<256x16x!tt.ptr<f32, 1>, #blocked>
    %94 = tt.addptr %93, %92 : tensor<256x16x!tt.ptr<f32, 1>, #blocked>, tensor<256x16xi32, #blocked>
    %95 = tt.load %94, %86, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x16xf32, #blocked>
    %96 = triton_gpu.convert_layout %95 : (tensor<256x16xf32, #blocked>) -> tensor<256x16xf32, #blocked1>
    %97 = arith.mulf %89, %95 : tensor<256x16xf32, #blocked>
    %98 = arith.subf %cst, %97 : tensor<256x16xf32, #blocked>
    %99 = tt.broadcast %74 : (tensor<256x1xi1, #blocked1>) -> tensor<256x16xi1, #blocked1>
    %100 = tt.broadcast %75 : (tensor<256x1xi1, #blocked>) -> tensor<256x16xi1, #blocked>
    %101 = arith.select %100, %98, %cst : tensor<256x16xi1, #blocked>, tensor<256x16xf32, #blocked>
    %102 = arith.addf %73, %101 : tensor<256x16xf32, #blocked>
    %103 = arith.cmpi slt, %60, %cst_17 : tensor<256x1xi64, #blocked1>
    %104 = arith.cmpi slt, %61, %cst_18 : tensor<256x1xi64, #blocked>
    %105 = arith.addi %24, %cst_14 : tensor<1x16xi32, #blocked1>
    %106 = tt.broadcast %105 : (tensor<1x16xi32, #blocked1>) -> tensor<256x16xi32, #blocked1>
    %107 = arith.addi %106, %29 : tensor<256x16xi32, #blocked1>
    %108 = arith.addi %107, %32 : tensor<256x16xi32, #blocked1>
    %109 = tt.addptr %34, %108 : tensor<256x16x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x16xi32, #blocked1>
    %110 = arith.andi %103, %22 : tensor<256x1xi1, #blocked1>
    %111 = arith.andi %104, %23 : tensor<256x1xi1, #blocked>
    %112 = tt.broadcast %110 : (tensor<256x1xi1, #blocked1>) -> tensor<256x16xi1, #blocked1>
    %113 = tt.broadcast %111 : (tensor<256x1xi1, #blocked>) -> tensor<256x16xi1, #blocked>
    %114 = arith.andi %112, %38 : tensor<256x16xi1, #blocked1>
    %115 = arith.andi %113, %39 : tensor<256x16xi1, #blocked>
    %116 = tt.load %109, %114, %cst_19 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x16xbf16, #blocked1>
    %117 = triton_gpu.convert_layout %116 : (tensor<256x16xbf16, #blocked1>) -> tensor<256x16xbf16, #blocked>
    %118 = arith.extf %117 : tensor<256x16xbf16, #blocked> to tensor<256x16xf32, #blocked>
    %119 = arith.addi %21, %cst_13 : tensor<256x1xi32, #blocked>
    %120 = tt.broadcast %119 : (tensor<256x1xi32, #blocked>) -> tensor<256x16xi32, #blocked>
    %121 = arith.addi %120, %47 : tensor<256x16xi32, #blocked>
    %122 = tt.addptr %93, %121 : tensor<256x16x!tt.ptr<f32, 1>, #blocked>, tensor<256x16xi32, #blocked>
    %123 = tt.load %122, %115, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x16xf32, #blocked>
    %124 = triton_gpu.convert_layout %123 : (tensor<256x16xf32, #blocked>) -> tensor<256x16xf32, #blocked1>
    %125 = arith.mulf %118, %123 : tensor<256x16xf32, #blocked>
    %126 = tt.broadcast %103 : (tensor<256x1xi1, #blocked1>) -> tensor<256x16xi1, #blocked1>
    %127 = tt.broadcast %104 : (tensor<256x1xi1, #blocked>) -> tensor<256x16xi1, #blocked>
    %128 = arith.select %127, %125, %cst : tensor<256x16xi1, #blocked>, tensor<256x16xf32, #blocked>
    %129 = arith.addf %102, %128 : tensor<256x16xf32, #blocked>
    %130 = arith.addf %72, %129 : tensor<256x16xf32, #blocked>
    %131 = triton_gpu.convert_layout %130 : (tensor<256x16xf32, #blocked>) -> tensor<256x16xf32, #blocked1>
    %132 = tt.load %57, %66, %cst_19 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x16xbf16, #blocked1>
    %133 = arith.extf %132 : tensor<256x16xbf16, #blocked1> to tensor<256x16xf32, #blocked1>
    %134 = arith.select %70, %133, %cst_20 : tensor<256x16xi1, #blocked1>, tensor<256x16xf32, #blocked1>
    %135 = arith.mulf %59, %52 : tensor<256x16xf32, #blocked1>
    %136 = tt.load %109, %85, %cst_19 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x16xbf16, #blocked1>
    %137 = arith.extf %136 : tensor<256x16xbf16, #blocked1> to tensor<256x16xf32, #blocked1>
    %138 = arith.mulf %137, %96 : tensor<256x16xf32, #blocked1>
    %139 = arith.subf %cst_20, %138 : tensor<256x16xf32, #blocked1>
    %140 = arith.select %99, %139, %cst_20 : tensor<256x16xi1, #blocked1>, tensor<256x16xf32, #blocked1>
    %141 = arith.addf %135, %140 : tensor<256x16xf32, #blocked1>
    %142 = arith.addi %24, %cst_12 : tensor<1x16xi32, #blocked1>
    %143 = tt.broadcast %142 : (tensor<1x16xi32, #blocked1>) -> tensor<256x16xi32, #blocked1>
    %144 = arith.addi %143, %29 : tensor<256x16xi32, #blocked1>
    %145 = arith.addi %144, %32 : tensor<256x16xi32, #blocked1>
    %146 = tt.addptr %34, %145 : tensor<256x16x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x16xi32, #blocked1>
    %147 = tt.load %146, %114, %cst_19 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x16xbf16, #blocked1>
    %148 = arith.extf %147 : tensor<256x16xbf16, #blocked1> to tensor<256x16xf32, #blocked1>
    %149 = arith.mulf %148, %124 : tensor<256x16xf32, #blocked1>
    %150 = arith.select %126, %149, %cst_20 : tensor<256x16xi1, #blocked1>, tensor<256x16xf32, #blocked1>
    %151 = arith.addf %141, %150 : tensor<256x16xf32, #blocked1>
    %152 = arith.addf %134, %151 : tensor<256x16xf32, #blocked1>
    %153 = arith.addf %131, %152 : tensor<256x16xf32, #blocked1>
    %154 = arith.muli %26, %cst_9 : tensor<1x16xi32, #blocked1>
    %155 = tt.broadcast %154 : (tensor<1x16xi32, #blocked1>) -> tensor<256x16xi32, #blocked1>
    %156 = arith.addi %30, %155 : tensor<256x16xi32, #blocked1>
    %157 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<256x16x!tt.ptr<f32, 1>, #blocked1>
    %158 = tt.addptr %157, %156 : tensor<256x16x!tt.ptr<f32, 1>, #blocked1>, tensor<256x16xi32, #blocked1>
    tt.store %158, %153, %40 {cache = 1 : i32, evict = 1 : i32} : tensor<256x16xf32, #blocked1>
    tt.return
  }
}
