; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = shl i32 %7, 2, !dbg !8
  %9 = and i32 %8, 12, !dbg !8
  %10 = lshr i32 %7, 6, !dbg !8
  %11 = and i32 %10, 3, !dbg !8
  %12 = or i32 %11, 4, !dbg !8
  %13 = or i32 %11, 8, !dbg !8
  %14 = or i32 %11, 12, !dbg !8
  %15 = lshr i32 %7, 2, !dbg !9
  %16 = and i32 %15, 63, !dbg !9
  %17 = or i32 %16, 64, !dbg !9
  %18 = or i32 %16, 128, !dbg !9
  %19 = or i32 %16, 192, !dbg !9
  %20 = and i32 %8, 252, !dbg !9
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %22 = shl i32 %21, 4, !dbg !11
  %23 = or i32 %22, %9, !dbg !12
  %24 = or i32 %22, %11, !dbg !12
  %25 = or i32 %22, %12, !dbg !12
  %26 = or i32 %22, %13, !dbg !12
  %27 = or i32 %22, %14, !dbg !12
  %28 = icmp slt i32 %23, 16, !dbg !13
  %29 = icmp slt i32 %24, 16, !dbg !13
  %30 = icmp slt i32 %25, 16, !dbg !13
  %31 = icmp slt i32 %26, 16, !dbg !13
  %32 = icmp slt i32 %27, 16, !dbg !13
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %34 = shl i32 %33, 8, !dbg !15
  %35 = or i32 %34, %16, !dbg !16
  %36 = or i32 %34, %17, !dbg !16
  %37 = or i32 %34, %18, !dbg !16
  %38 = or i32 %34, %19, !dbg !16
  %39 = or i32 %34, %20, !dbg !16
  %40 = icmp slt i32 %35, 256, !dbg !17
  %41 = icmp slt i32 %36, 256, !dbg !17
  %42 = icmp slt i32 %37, 256, !dbg !17
  %43 = icmp slt i32 %38, 256, !dbg !17
  %44 = icmp slt i32 %39, 256, !dbg !17
  %45 = srem i32 %24, 4, !dbg !18
  %46 = srem i32 %25, 4, !dbg !18
  %47 = srem i32 %26, 4, !dbg !18
  %48 = srem i32 %27, 4, !dbg !18
  %49 = shl i32 %35, 2, !dbg !19
  %50 = shl i32 %36, 2, !dbg !19
  %51 = shl i32 %37, 2, !dbg !19
  %52 = shl i32 %38, 2, !dbg !19
  %53 = shl i32 %23, 9, !dbg !20
  %54 = add i32 %49, %53, !dbg !21
  %55 = add i32 %50, %53, !dbg !21
  %56 = add i32 %51, %53, !dbg !21
  %57 = add i32 %52, %53, !dbg !21
  %58 = sext i32 %54 to i64, !dbg !22
  %59 = getelementptr i16, ptr addrspace(1) %0, i64 %58, !dbg !22
  %60 = sext i32 %55 to i64, !dbg !22
  %61 = getelementptr i16, ptr addrspace(1) %0, i64 %60, !dbg !22
  %62 = sext i32 %56 to i64, !dbg !22
  %63 = getelementptr i16, ptr addrspace(1) %0, i64 %62, !dbg !22
  %64 = sext i32 %57 to i64, !dbg !22
  %65 = getelementptr i16, ptr addrspace(1) %0, i64 %64, !dbg !22
  %66 = and i1 %28, %40, !dbg !23
  %67 = and i1 %28, %41, !dbg !23
  %68 = and i1 %28, %42, !dbg !23
  %69 = and i1 %28, %43, !dbg !23
  %70 = and i1 %29, %44, !dbg !23
  %71 = and i1 %30, %44, !dbg !23
  %72 = and i1 %31, %44, !dbg !23
  %73 = and i1 %32, %44, !dbg !23
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %66) #2, !dbg !24
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !24
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !24
  %77 = trunc i32 %75 to i16, !dbg !24
  %extelt.offset = lshr i32 %75, 16, !dbg !24
  %78 = trunc i32 %extelt.offset to i16, !dbg !24
  %79 = trunc i32 %76 to i16, !dbg !24
  %extelt.offset1 = lshr i32 %76, 16, !dbg !24
  %80 = trunc i32 %extelt.offset1 to i16, !dbg !24
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %67) #2, !dbg !24
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !24
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !24
  %84 = trunc i32 %82 to i16, !dbg !24
  %extelt.offset2 = lshr i32 %82, 16, !dbg !24
  %85 = trunc i32 %extelt.offset2 to i16, !dbg !24
  %86 = trunc i32 %83 to i16, !dbg !24
  %extelt.offset3 = lshr i32 %83, 16, !dbg !24
  %87 = trunc i32 %extelt.offset3 to i16, !dbg !24
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %68) #2, !dbg !24
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !24
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !24
  %91 = trunc i32 %89 to i16, !dbg !24
  %extelt.offset4 = lshr i32 %89, 16, !dbg !24
  %92 = trunc i32 %extelt.offset4 to i16, !dbg !24
  %93 = trunc i32 %90 to i16, !dbg !24
  %extelt.offset5 = lshr i32 %90, 16, !dbg !24
  %94 = trunc i32 %extelt.offset5 to i16, !dbg !24
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %69) #2, !dbg !24
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !24
  %97 = extractvalue { i32, i32 } %95, 1, !dbg !24
  %98 = trunc i32 %96 to i16, !dbg !24
  %extelt.offset6 = lshr i32 %96, 16, !dbg !24
  %99 = trunc i32 %extelt.offset6 to i16, !dbg !24
  %100 = trunc i32 %97 to i16, !dbg !24
  %extelt.offset7 = lshr i32 %97, 16, !dbg !24
  %101 = trunc i32 %extelt.offset7 to i16, !dbg !24
  %102 = mul nuw nsw i32 %9, 257, !dbg !25
  %103 = add nuw nsw i32 %102, %16, !dbg !25
  %104 = zext nneg i32 %103 to i64, !dbg !25
  %105 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %104, !dbg !25
  %106 = insertelement <1 x i16> undef, i16 %77, i64 0, !dbg !25
  store <1 x i16> %106, ptr addrspace(3) %105, align 2, !dbg !25
  %107 = add nuw nsw i32 %102, 257, !dbg !25
  %108 = add nuw nsw i32 %107, %16, !dbg !25
  %109 = zext nneg i32 %108 to i64, !dbg !25
  %110 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %109, !dbg !25
  %111 = insertelement <1 x i16> undef, i16 %78, i64 0, !dbg !25
  store <1 x i16> %111, ptr addrspace(3) %110, align 2, !dbg !25
  %112 = add nuw nsw i32 %102, 514, !dbg !25
  %113 = add nuw nsw i32 %112, %16, !dbg !25
  %114 = zext nneg i32 %113 to i64, !dbg !25
  %115 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %114, !dbg !25
  %116 = insertelement <1 x i16> undef, i16 %79, i64 0, !dbg !25
  store <1 x i16> %116, ptr addrspace(3) %115, align 2, !dbg !25
  %117 = add nuw nsw i32 %102, 771, !dbg !25
  %118 = add nuw nsw i32 %117, %16, !dbg !25
  %119 = zext nneg i32 %118 to i64, !dbg !25
  %120 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %119, !dbg !25
  %121 = insertelement <1 x i16> undef, i16 %80, i64 0, !dbg !25
  store <1 x i16> %121, ptr addrspace(3) %120, align 2, !dbg !25
  %122 = add nuw nsw i32 %102, %17, !dbg !25
  %123 = zext nneg i32 %122 to i64, !dbg !25
  %124 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %123, !dbg !25
  %125 = insertelement <1 x i16> undef, i16 %84, i64 0, !dbg !25
  store <1 x i16> %125, ptr addrspace(3) %124, align 2, !dbg !25
  %126 = add nuw nsw i32 %107, %17, !dbg !25
  %127 = zext nneg i32 %126 to i64, !dbg !25
  %128 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %127, !dbg !25
  %129 = insertelement <1 x i16> undef, i16 %85, i64 0, !dbg !25
  store <1 x i16> %129, ptr addrspace(3) %128, align 2, !dbg !25
  %130 = add nuw nsw i32 %112, %17, !dbg !25
  %131 = zext nneg i32 %130 to i64, !dbg !25
  %132 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %131, !dbg !25
  %133 = insertelement <1 x i16> undef, i16 %86, i64 0, !dbg !25
  store <1 x i16> %133, ptr addrspace(3) %132, align 2, !dbg !25
  %134 = add nuw nsw i32 %117, %17, !dbg !25
  %135 = zext nneg i32 %134 to i64, !dbg !25
  %136 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %135, !dbg !25
  %137 = insertelement <1 x i16> undef, i16 %87, i64 0, !dbg !25
  store <1 x i16> %137, ptr addrspace(3) %136, align 2, !dbg !25
  %138 = add nuw nsw i32 %102, %18, !dbg !25
  %139 = zext nneg i32 %138 to i64, !dbg !25
  %140 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %139, !dbg !25
  %141 = insertelement <1 x i16> undef, i16 %91, i64 0, !dbg !25
  store <1 x i16> %141, ptr addrspace(3) %140, align 2, !dbg !25
  %142 = add nuw nsw i32 %107, %18, !dbg !25
  %143 = zext nneg i32 %142 to i64, !dbg !25
  %144 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %143, !dbg !25
  %145 = insertelement <1 x i16> undef, i16 %92, i64 0, !dbg !25
  store <1 x i16> %145, ptr addrspace(3) %144, align 2, !dbg !25
  %146 = add nuw nsw i32 %112, %18, !dbg !25
  %147 = zext nneg i32 %146 to i64, !dbg !25
  %148 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %147, !dbg !25
  %149 = insertelement <1 x i16> undef, i16 %93, i64 0, !dbg !25
  store <1 x i16> %149, ptr addrspace(3) %148, align 2, !dbg !25
  %150 = add nuw nsw i32 %117, %18, !dbg !25
  %151 = zext nneg i32 %150 to i64, !dbg !25
  %152 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %151, !dbg !25
  %153 = insertelement <1 x i16> undef, i16 %94, i64 0, !dbg !25
  store <1 x i16> %153, ptr addrspace(3) %152, align 2, !dbg !25
  %154 = add nuw nsw i32 %102, %19, !dbg !25
  %155 = zext nneg i32 %154 to i64, !dbg !25
  %156 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %155, !dbg !25
  %157 = insertelement <1 x i16> undef, i16 %98, i64 0, !dbg !25
  store <1 x i16> %157, ptr addrspace(3) %156, align 2, !dbg !25
  %158 = add nuw nsw i32 %107, %19, !dbg !25
  %159 = zext nneg i32 %158 to i64, !dbg !25
  %160 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %159, !dbg !25
  %161 = insertelement <1 x i16> undef, i16 %99, i64 0, !dbg !25
  store <1 x i16> %161, ptr addrspace(3) %160, align 2, !dbg !25
  %162 = add nuw nsw i32 %112, %19, !dbg !25
  %163 = zext nneg i32 %162 to i64, !dbg !25
  %164 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %163, !dbg !25
  %165 = insertelement <1 x i16> undef, i16 %100, i64 0, !dbg !25
  store <1 x i16> %165, ptr addrspace(3) %164, align 2, !dbg !25
  %166 = add nuw nsw i32 %117, %19, !dbg !25
  %167 = zext nneg i32 %166 to i64, !dbg !25
  %168 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %167, !dbg !25
  %169 = insertelement <1 x i16> undef, i16 %101, i64 0, !dbg !25
  store <1 x i16> %169, ptr addrspace(3) %168, align 2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %170 = mul nuw nsw i32 %11, 257, !dbg !25
  %171 = add nuw nsw i32 %170, %20, !dbg !25
  %172 = zext nneg i32 %171 to i64, !dbg !25
  %173 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %172, !dbg !25
  %174 = load i16, ptr addrspace(3) %173, align 2, !dbg !25
  %175 = or i32 %20, 1, !dbg !25
  %176 = add nuw nsw i32 %170, %175, !dbg !25
  %177 = zext nneg i32 %176 to i64, !dbg !25
  %178 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %177, !dbg !25
  %179 = load i16, ptr addrspace(3) %178, align 2, !dbg !25
  %180 = or i32 %20, 2, !dbg !25
  %181 = add nuw nsw i32 %170, %180, !dbg !25
  %182 = zext nneg i32 %181 to i64, !dbg !25
  %183 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %182, !dbg !25
  %184 = load i16, ptr addrspace(3) %183, align 2, !dbg !25
  %185 = or i32 %20, 3, !dbg !25
  %186 = add nuw nsw i32 %170, %185, !dbg !25
  %187 = zext nneg i32 %186 to i64, !dbg !25
  %188 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %187, !dbg !25
  %189 = load i16, ptr addrspace(3) %188, align 2, !dbg !25
  %190 = mul nuw nsw i32 %12, 257, !dbg !25
  %191 = add nuw nsw i32 %190, %20, !dbg !25
  %192 = zext nneg i32 %191 to i64, !dbg !25
  %193 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %192, !dbg !25
  %194 = load i16, ptr addrspace(3) %193, align 2, !dbg !25
  %195 = add nuw nsw i32 %190, %175, !dbg !25
  %196 = zext nneg i32 %195 to i64, !dbg !25
  %197 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %196, !dbg !25
  %198 = load i16, ptr addrspace(3) %197, align 2, !dbg !25
  %199 = add nuw nsw i32 %190, %180, !dbg !25
  %200 = zext nneg i32 %199 to i64, !dbg !25
  %201 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %200, !dbg !25
  %202 = load i16, ptr addrspace(3) %201, align 2, !dbg !25
  %203 = add nuw nsw i32 %190, %185, !dbg !25
  %204 = zext nneg i32 %203 to i64, !dbg !25
  %205 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %204, !dbg !25
  %206 = load i16, ptr addrspace(3) %205, align 2, !dbg !25
  %207 = mul nuw nsw i32 %13, 257, !dbg !25
  %208 = add nuw nsw i32 %207, %20, !dbg !25
  %209 = zext nneg i32 %208 to i64, !dbg !25
  %210 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %209, !dbg !25
  %211 = load i16, ptr addrspace(3) %210, align 2, !dbg !25
  %212 = add nuw nsw i32 %207, %175, !dbg !25
  %213 = zext nneg i32 %212 to i64, !dbg !25
  %214 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %213, !dbg !25
  %215 = load i16, ptr addrspace(3) %214, align 2, !dbg !25
  %216 = add nuw nsw i32 %207, %180, !dbg !25
  %217 = zext nneg i32 %216 to i64, !dbg !25
  %218 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %217, !dbg !25
  %219 = load i16, ptr addrspace(3) %218, align 2, !dbg !25
  %220 = add nuw nsw i32 %207, %185, !dbg !25
  %221 = zext nneg i32 %220 to i64, !dbg !25
  %222 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %221, !dbg !25
  %223 = load i16, ptr addrspace(3) %222, align 2, !dbg !25
  %224 = mul nuw nsw i32 %14, 257, !dbg !25
  %225 = add nuw nsw i32 %224, %20, !dbg !25
  %226 = zext nneg i32 %225 to i64, !dbg !25
  %227 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %226, !dbg !25
  %228 = load i16, ptr addrspace(3) %227, align 2, !dbg !25
  %229 = add nuw nsw i32 %224, %175, !dbg !25
  %230 = zext nneg i32 %229 to i64, !dbg !25
  %231 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %230, !dbg !25
  %232 = load i16, ptr addrspace(3) %231, align 2, !dbg !25
  %233 = add nuw nsw i32 %224, %180, !dbg !25
  %234 = zext nneg i32 %233 to i64, !dbg !25
  %235 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %234, !dbg !25
  %236 = load i16, ptr addrspace(3) %235, align 2, !dbg !25
  %237 = add nuw nsw i32 %224, %185, !dbg !25
  %238 = zext nneg i32 %237 to i64, !dbg !25
  %239 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %238, !dbg !25
  %240 = load i16, ptr addrspace(3) %239, align 2, !dbg !25
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %174) #2, !dbg !25
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %179) #2, !dbg !25
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %184) #2, !dbg !25
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #2, !dbg !25
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %194) #2, !dbg !25
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %198) #2, !dbg !25
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %202) #2, !dbg !25
  %248 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #2, !dbg !25
  %249 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %211) #2, !dbg !25
  %250 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %215) #2, !dbg !25
  %251 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %219) #2, !dbg !25
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %223) #2, !dbg !25
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #2, !dbg !25
  %254 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #2, !dbg !25
  %255 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #2, !dbg !25
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %240) #2, !dbg !25
  %257 = shl nsw i32 %45, 8, !dbg !26
  %258 = shl nsw i32 %46, 8, !dbg !26
  %259 = shl nsw i32 %47, 8, !dbg !26
  %260 = shl nsw i32 %48, 8, !dbg !26
  %261 = add i32 %257, %39, !dbg !27
  %262 = add i32 %258, %39, !dbg !27
  %263 = add i32 %259, %39, !dbg !27
  %264 = add i32 %260, %39, !dbg !27
  %265 = sext i32 %261 to i64, !dbg !28
  %266 = getelementptr float, ptr addrspace(1) %1, i64 %265, !dbg !28
  %267 = sext i32 %262 to i64, !dbg !28
  %268 = getelementptr float, ptr addrspace(1) %1, i64 %267, !dbg !28
  %269 = sext i32 %263 to i64, !dbg !28
  %270 = getelementptr float, ptr addrspace(1) %1, i64 %269, !dbg !28
  %271 = sext i32 %264 to i64, !dbg !28
  %272 = getelementptr float, ptr addrspace(1) %1, i64 %271, !dbg !28
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %266, i1 %70) #2, !dbg !29
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !29
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !29
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !29
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !29
  %278 = bitcast i32 %274 to float, !dbg !29
  %279 = bitcast i32 %275 to float, !dbg !29
  %280 = bitcast i32 %276 to float, !dbg !29
  %281 = bitcast i32 %277 to float, !dbg !29
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %268, i1 %71) #2, !dbg !29
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !29
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !29
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !29
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !29
  %287 = bitcast i32 %283 to float, !dbg !29
  %288 = bitcast i32 %284 to float, !dbg !29
  %289 = bitcast i32 %285 to float, !dbg !29
  %290 = bitcast i32 %286 to float, !dbg !29
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %270, i1 %72) #2, !dbg !29
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !29
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !29
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !29
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !29
  %296 = bitcast i32 %292 to float, !dbg !29
  %297 = bitcast i32 %293 to float, !dbg !29
  %298 = bitcast i32 %294 to float, !dbg !29
  %299 = bitcast i32 %295 to float, !dbg !29
  %300 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %272, i1 %73) #2, !dbg !29
  %301 = extractvalue { i32, i32, i32, i32 } %300, 0, !dbg !29
  %302 = extractvalue { i32, i32, i32, i32 } %300, 1, !dbg !29
  %303 = extractvalue { i32, i32, i32, i32 } %300, 2, !dbg !29
  %304 = extractvalue { i32, i32, i32, i32 } %300, 3, !dbg !29
  %305 = bitcast i32 %301 to float, !dbg !29
  %306 = bitcast i32 %302 to float, !dbg !29
  %307 = bitcast i32 %303 to float, !dbg !29
  %308 = bitcast i32 %304 to float, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %309 = mul nuw nsw i32 %20, 20, !dbg !29
  %310 = or i32 %309, %11, !dbg !29
  %311 = zext nneg i32 %310 to i64, !dbg !29
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i64 %311, !dbg !29
  %313 = insertelement <1 x float> undef, float %278, i64 0, !dbg !29
  store <1 x float> %313, ptr addrspace(3) %312, align 4, !dbg !29
  %314 = mul nuw nsw i32 %175, 20, !dbg !29
  %315 = or i32 %314, %11, !dbg !29
  %316 = zext nneg i32 %315 to i64, !dbg !29
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i64 %316, !dbg !29
  %318 = insertelement <1 x float> undef, float %279, i64 0, !dbg !29
  store <1 x float> %318, ptr addrspace(3) %317, align 4, !dbg !29
  %319 = mul nuw nsw i32 %180, 20, !dbg !29
  %320 = or i32 %319, %11, !dbg !29
  %321 = zext nneg i32 %320 to i64, !dbg !29
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i64 %321, !dbg !29
  %323 = insertelement <1 x float> undef, float %280, i64 0, !dbg !29
  store <1 x float> %323, ptr addrspace(3) %322, align 4, !dbg !29
  %324 = mul nuw nsw i32 %185, 20, !dbg !29
  %325 = or i32 %324, %11, !dbg !29
  %326 = zext nneg i32 %325 to i64, !dbg !29
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i64 %326, !dbg !29
  %328 = insertelement <1 x float> undef, float %281, i64 0, !dbg !29
  store <1 x float> %328, ptr addrspace(3) %327, align 4, !dbg !29
  %329 = or i32 %309, %12, !dbg !29
  %330 = zext nneg i32 %329 to i64, !dbg !29
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i64 %330, !dbg !29
  %332 = insertelement <1 x float> undef, float %287, i64 0, !dbg !29
  store <1 x float> %332, ptr addrspace(3) %331, align 4, !dbg !29
  %333 = add nuw nsw i32 %314, %12, !dbg !29
  %334 = zext nneg i32 %333 to i64, !dbg !29
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i64 %334, !dbg !29
  %336 = insertelement <1 x float> undef, float %288, i64 0, !dbg !29
  store <1 x float> %336, ptr addrspace(3) %335, align 4, !dbg !29
  %337 = or i32 %319, %12, !dbg !29
  %338 = zext nneg i32 %337 to i64, !dbg !29
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i64 %338, !dbg !29
  %340 = insertelement <1 x float> undef, float %289, i64 0, !dbg !29
  store <1 x float> %340, ptr addrspace(3) %339, align 4, !dbg !29
  %341 = add nuw nsw i32 %324, %12, !dbg !29
  %342 = zext nneg i32 %341 to i64, !dbg !29
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i64 %342, !dbg !29
  %344 = insertelement <1 x float> undef, float %290, i64 0, !dbg !29
  store <1 x float> %344, ptr addrspace(3) %343, align 4, !dbg !29
  %345 = or i32 %309, %13, !dbg !29
  %346 = zext nneg i32 %345 to i64, !dbg !29
  %347 = getelementptr float, ptr addrspace(3) @global_smem, i64 %346, !dbg !29
  %348 = insertelement <1 x float> undef, float %296, i64 0, !dbg !29
  store <1 x float> %348, ptr addrspace(3) %347, align 4, !dbg !29
  %349 = or i32 %314, %13, !dbg !29
  %350 = zext nneg i32 %349 to i64, !dbg !29
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i64 %350, !dbg !29
  %352 = insertelement <1 x float> undef, float %297, i64 0, !dbg !29
  store <1 x float> %352, ptr addrspace(3) %351, align 4, !dbg !29
  %353 = add nuw nsw i32 %319, %13, !dbg !29
  %354 = zext nneg i32 %353 to i64, !dbg !29
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i64 %354, !dbg !29
  %356 = insertelement <1 x float> undef, float %298, i64 0, !dbg !29
  store <1 x float> %356, ptr addrspace(3) %355, align 4, !dbg !29
  %357 = add nuw nsw i32 %324, %13, !dbg !29
  %358 = zext nneg i32 %357 to i64, !dbg !29
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i64 %358, !dbg !29
  %360 = insertelement <1 x float> undef, float %299, i64 0, !dbg !29
  store <1 x float> %360, ptr addrspace(3) %359, align 4, !dbg !29
  %361 = or i32 %309, %14, !dbg !29
  %362 = zext nneg i32 %361 to i64, !dbg !29
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i64 %362, !dbg !29
  %364 = insertelement <1 x float> undef, float %305, i64 0, !dbg !29
  store <1 x float> %364, ptr addrspace(3) %363, align 4, !dbg !29
  %365 = add nuw nsw i32 %314, %14, !dbg !29
  %366 = zext nneg i32 %365 to i64, !dbg !29
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i64 %366, !dbg !29
  %368 = insertelement <1 x float> undef, float %306, i64 0, !dbg !29
  store <1 x float> %368, ptr addrspace(3) %367, align 4, !dbg !29
  %369 = add nuw nsw i32 %319, %14, !dbg !29
  %370 = zext nneg i32 %369 to i64, !dbg !29
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i64 %370, !dbg !29
  %372 = insertelement <1 x float> undef, float %307, i64 0, !dbg !29
  store <1 x float> %372, ptr addrspace(3) %371, align 4, !dbg !29
  %373 = add nuw nsw i32 %324, %14, !dbg !29
  %374 = zext nneg i32 %373 to i64, !dbg !29
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i64 %374, !dbg !29
  %376 = insertelement <1 x float> undef, float %308, i64 0, !dbg !29
  store <1 x float> %376, ptr addrspace(3) %375, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %377 = mul nuw nsw i32 %16, 20, !dbg !29
  %378 = add nuw nsw i32 %377, %9, !dbg !29
  %379 = zext nneg i32 %378 to i64, !dbg !29
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i64 %379, !dbg !29
  %381 = load float, ptr addrspace(3) %380, align 16, !dbg !29
  %382 = getelementptr inbounds <4 x float>, ptr addrspace(3) %380, i64 0, i64 1, !dbg !29
  %383 = load float, ptr addrspace(3) %382, align 4, !dbg !29
  %384 = getelementptr inbounds <4 x float>, ptr addrspace(3) %380, i64 0, i64 2, !dbg !29
  %385 = load float, ptr addrspace(3) %384, align 8, !dbg !29
  %386 = getelementptr inbounds <4 x float>, ptr addrspace(3) %380, i64 0, i64 3, !dbg !29
  %387 = load float, ptr addrspace(3) %386, align 4, !dbg !29
  %388 = mul nuw nsw i32 %17, 20, !dbg !29
  %389 = add nuw nsw i32 %388, %9, !dbg !29
  %390 = zext nneg i32 %389 to i64, !dbg !29
  %391 = getelementptr float, ptr addrspace(3) @global_smem, i64 %390, !dbg !29
  %392 = load float, ptr addrspace(3) %391, align 16, !dbg !29
  %393 = getelementptr inbounds <4 x float>, ptr addrspace(3) %391, i64 0, i64 1, !dbg !29
  %394 = load float, ptr addrspace(3) %393, align 4, !dbg !29
  %395 = getelementptr inbounds <4 x float>, ptr addrspace(3) %391, i64 0, i64 2, !dbg !29
  %396 = load float, ptr addrspace(3) %395, align 8, !dbg !29
  %397 = getelementptr inbounds <4 x float>, ptr addrspace(3) %391, i64 0, i64 3, !dbg !29
  %398 = load float, ptr addrspace(3) %397, align 4, !dbg !29
  %399 = mul nuw nsw i32 %18, 20, !dbg !29
  %400 = add nuw nsw i32 %399, %9, !dbg !29
  %401 = zext nneg i32 %400 to i64, !dbg !29
  %402 = getelementptr float, ptr addrspace(3) @global_smem, i64 %401, !dbg !29
  %403 = load float, ptr addrspace(3) %402, align 16, !dbg !29
  %404 = getelementptr inbounds <4 x float>, ptr addrspace(3) %402, i64 0, i64 1, !dbg !29
  %405 = load float, ptr addrspace(3) %404, align 4, !dbg !29
  %406 = getelementptr inbounds <4 x float>, ptr addrspace(3) %402, i64 0, i64 2, !dbg !29
  %407 = load float, ptr addrspace(3) %406, align 8, !dbg !29
  %408 = getelementptr inbounds <4 x float>, ptr addrspace(3) %402, i64 0, i64 3, !dbg !29
  %409 = load float, ptr addrspace(3) %408, align 4, !dbg !29
  %410 = mul nuw nsw i32 %19, 20, !dbg !29
  %411 = add nuw nsw i32 %410, %9, !dbg !29
  %412 = zext nneg i32 %411 to i64, !dbg !29
  %413 = getelementptr float, ptr addrspace(3) @global_smem, i64 %412, !dbg !29
  %414 = load float, ptr addrspace(3) %413, align 16, !dbg !29
  %415 = getelementptr inbounds <4 x float>, ptr addrspace(3) %413, i64 0, i64 1, !dbg !29
  %416 = load float, ptr addrspace(3) %415, align 4, !dbg !29
  %417 = getelementptr inbounds <4 x float>, ptr addrspace(3) %413, i64 0, i64 2, !dbg !29
  %418 = load float, ptr addrspace(3) %417, align 8, !dbg !29
  %419 = getelementptr inbounds <4 x float>, ptr addrspace(3) %413, i64 0, i64 3, !dbg !29
  %420 = load float, ptr addrspace(3) %419, align 4, !dbg !29
  %421 = or i32 %53, 1024, !dbg !30
  %422 = add i32 %421, %49, !dbg !31
  %423 = add i32 %421, %50, !dbg !31
  %424 = add i32 %56, 1024, !dbg !31
  %425 = add i32 %57, 1024, !dbg !31
  %426 = sext i32 %422 to i64, !dbg !32
  %427 = getelementptr i16, ptr addrspace(1) %0, i64 %426, !dbg !32
  %428 = sext i32 %423 to i64, !dbg !32
  %429 = getelementptr i16, ptr addrspace(1) %0, i64 %428, !dbg !32
  %430 = sext i32 %424 to i64, !dbg !32
  %431 = getelementptr i16, ptr addrspace(1) %0, i64 %430, !dbg !32
  %432 = sext i32 %425 to i64, !dbg !32
  %433 = getelementptr i16, ptr addrspace(1) %0, i64 %432, !dbg !32
  %434 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %427, i1 %66) #2, !dbg !33
  %435 = extractvalue { i32, i32 } %434, 0, !dbg !33
  %436 = extractvalue { i32, i32 } %434, 1, !dbg !33
  %437 = trunc i32 %435 to i16, !dbg !33
  %extelt.offset8 = lshr i32 %435, 16, !dbg !33
  %438 = trunc i32 %extelt.offset8 to i16, !dbg !33
  %439 = trunc i32 %436 to i16, !dbg !33
  %extelt.offset9 = lshr i32 %436, 16, !dbg !33
  %440 = trunc i32 %extelt.offset9 to i16, !dbg !33
  %441 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %429, i1 %67) #2, !dbg !33
  %442 = extractvalue { i32, i32 } %441, 0, !dbg !33
  %443 = extractvalue { i32, i32 } %441, 1, !dbg !33
  %444 = trunc i32 %442 to i16, !dbg !33
  %extelt.offset10 = lshr i32 %442, 16, !dbg !33
  %445 = trunc i32 %extelt.offset10 to i16, !dbg !33
  %446 = trunc i32 %443 to i16, !dbg !33
  %extelt.offset11 = lshr i32 %443, 16, !dbg !33
  %447 = trunc i32 %extelt.offset11 to i16, !dbg !33
  %448 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %431, i1 %68) #2, !dbg !33
  %449 = extractvalue { i32, i32 } %448, 0, !dbg !33
  %450 = extractvalue { i32, i32 } %448, 1, !dbg !33
  %451 = trunc i32 %449 to i16, !dbg !33
  %extelt.offset12 = lshr i32 %449, 16, !dbg !33
  %452 = trunc i32 %extelt.offset12 to i16, !dbg !33
  %453 = trunc i32 %450 to i16, !dbg !33
  %extelt.offset13 = lshr i32 %450, 16, !dbg !33
  %454 = trunc i32 %extelt.offset13 to i16, !dbg !33
  %455 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %433, i1 %69) #2, !dbg !33
  %456 = extractvalue { i32, i32 } %455, 0, !dbg !33
  %457 = extractvalue { i32, i32 } %455, 1, !dbg !33
  %458 = trunc i32 %456 to i16, !dbg !33
  %extelt.offset14 = lshr i32 %456, 16, !dbg !33
  %459 = trunc i32 %extelt.offset14 to i16, !dbg !33
  %460 = trunc i32 %457 to i16, !dbg !33
  %extelt.offset15 = lshr i32 %457, 16, !dbg !33
  %461 = trunc i32 %extelt.offset15 to i16, !dbg !33
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #2, !dbg !34
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #2, !dbg !34
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %439) #2, !dbg !34
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %440) #2, !dbg !34
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #2, !dbg !34
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #2, !dbg !34
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #2, !dbg !34
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #2, !dbg !34
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #2, !dbg !34
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #2, !dbg !34
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #2, !dbg !34
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %454) #2, !dbg !34
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #2, !dbg !34
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #2, !dbg !34
  %476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #2, !dbg !34
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %461) #2, !dbg !34
  %478 = icmp sgt i32 %35, 255, !dbg !35
  %479 = icmp sgt i32 %36, 255, !dbg !35
  %480 = icmp sgt i32 %37, 255, !dbg !35
  %481 = icmp sgt i32 %38, 255, !dbg !35
  %482 = icmp sgt i32 %39, 255, !dbg !35
  %483 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !36
  %484 = extractvalue { i32, i32 } %483, 0, !dbg !36
  %485 = extractvalue { i32, i32 } %483, 1, !dbg !36
  %486 = trunc i32 %484 to i16, !dbg !36
  %extelt.offset16 = lshr i32 %484, 16, !dbg !36
  %487 = trunc i32 %extelt.offset16 to i16, !dbg !36
  %488 = trunc i32 %485 to i16, !dbg !36
  %extelt.offset17 = lshr i32 %485, 16, !dbg !36
  %489 = trunc i32 %extelt.offset17 to i16, !dbg !36
  %490 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !36
  %491 = extractvalue { i32, i32 } %490, 0, !dbg !36
  %492 = extractvalue { i32, i32 } %490, 1, !dbg !36
  %493 = trunc i32 %491 to i16, !dbg !36
  %extelt.offset18 = lshr i32 %491, 16, !dbg !36
  %494 = trunc i32 %extelt.offset18 to i16, !dbg !36
  %495 = trunc i32 %492 to i16, !dbg !36
  %extelt.offset19 = lshr i32 %492, 16, !dbg !36
  %496 = trunc i32 %extelt.offset19 to i16, !dbg !36
  %497 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !36
  %498 = extractvalue { i32, i32 } %497, 0, !dbg !36
  %499 = extractvalue { i32, i32 } %497, 1, !dbg !36
  %500 = trunc i32 %498 to i16, !dbg !36
  %extelt.offset20 = lshr i32 %498, 16, !dbg !36
  %501 = trunc i32 %extelt.offset20 to i16, !dbg !36
  %502 = trunc i32 %499 to i16, !dbg !36
  %extelt.offset21 = lshr i32 %499, 16, !dbg !36
  %503 = trunc i32 %extelt.offset21 to i16, !dbg !36
  %504 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !36
  %505 = extractvalue { i32, i32 } %504, 0, !dbg !36
  %506 = extractvalue { i32, i32 } %504, 1, !dbg !36
  %507 = trunc i32 %505 to i16, !dbg !36
  %extelt.offset22 = lshr i32 %505, 16, !dbg !36
  %508 = trunc i32 %extelt.offset22 to i16, !dbg !36
  %509 = trunc i32 %506 to i16, !dbg !36
  %extelt.offset23 = lshr i32 %506, 16, !dbg !36
  %510 = trunc i32 %extelt.offset23 to i16, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %511 = insertelement <1 x i16> undef, i16 %486, i64 0, !dbg !37
  store <1 x i16> %511, ptr addrspace(3) %105, align 2, !dbg !37
  %512 = insertelement <1 x i16> undef, i16 %487, i64 0, !dbg !37
  store <1 x i16> %512, ptr addrspace(3) %110, align 2, !dbg !37
  %513 = insertelement <1 x i16> undef, i16 %488, i64 0, !dbg !37
  store <1 x i16> %513, ptr addrspace(3) %115, align 2, !dbg !37
  %514 = insertelement <1 x i16> undef, i16 %489, i64 0, !dbg !37
  store <1 x i16> %514, ptr addrspace(3) %120, align 2, !dbg !37
  %515 = insertelement <1 x i16> undef, i16 %493, i64 0, !dbg !37
  store <1 x i16> %515, ptr addrspace(3) %124, align 2, !dbg !37
  %516 = insertelement <1 x i16> undef, i16 %494, i64 0, !dbg !37
  store <1 x i16> %516, ptr addrspace(3) %128, align 2, !dbg !37
  %517 = insertelement <1 x i16> undef, i16 %495, i64 0, !dbg !37
  store <1 x i16> %517, ptr addrspace(3) %132, align 2, !dbg !37
  %518 = insertelement <1 x i16> undef, i16 %496, i64 0, !dbg !37
  store <1 x i16> %518, ptr addrspace(3) %136, align 2, !dbg !37
  %519 = insertelement <1 x i16> undef, i16 %500, i64 0, !dbg !37
  store <1 x i16> %519, ptr addrspace(3) %140, align 2, !dbg !37
  %520 = insertelement <1 x i16> undef, i16 %501, i64 0, !dbg !37
  store <1 x i16> %520, ptr addrspace(3) %144, align 2, !dbg !37
  %521 = insertelement <1 x i16> undef, i16 %502, i64 0, !dbg !37
  store <1 x i16> %521, ptr addrspace(3) %148, align 2, !dbg !37
  %522 = insertelement <1 x i16> undef, i16 %503, i64 0, !dbg !37
  store <1 x i16> %522, ptr addrspace(3) %152, align 2, !dbg !37
  %523 = insertelement <1 x i16> undef, i16 %507, i64 0, !dbg !37
  store <1 x i16> %523, ptr addrspace(3) %156, align 2, !dbg !37
  %524 = insertelement <1 x i16> undef, i16 %508, i64 0, !dbg !37
  store <1 x i16> %524, ptr addrspace(3) %160, align 2, !dbg !37
  %525 = insertelement <1 x i16> undef, i16 %509, i64 0, !dbg !37
  store <1 x i16> %525, ptr addrspace(3) %164, align 2, !dbg !37
  %526 = insertelement <1 x i16> undef, i16 %510, i64 0, !dbg !37
  store <1 x i16> %526, ptr addrspace(3) %168, align 2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %527 = load i16, ptr addrspace(3) %173, align 2, !dbg !37
  %528 = load i16, ptr addrspace(3) %178, align 2, !dbg !37
  %529 = load i16, ptr addrspace(3) %183, align 2, !dbg !37
  %530 = load i16, ptr addrspace(3) %188, align 2, !dbg !37
  %531 = load i16, ptr addrspace(3) %193, align 2, !dbg !37
  %532 = load i16, ptr addrspace(3) %197, align 2, !dbg !37
  %533 = load i16, ptr addrspace(3) %201, align 2, !dbg !37
  %534 = load i16, ptr addrspace(3) %205, align 2, !dbg !37
  %535 = load i16, ptr addrspace(3) %210, align 2, !dbg !37
  %536 = load i16, ptr addrspace(3) %214, align 2, !dbg !37
  %537 = load i16, ptr addrspace(3) %218, align 2, !dbg !37
  %538 = load i16, ptr addrspace(3) %222, align 2, !dbg !37
  %539 = load i16, ptr addrspace(3) %227, align 2, !dbg !37
  %540 = load i16, ptr addrspace(3) %231, align 2, !dbg !37
  %541 = load i16, ptr addrspace(3) %235, align 2, !dbg !37
  %542 = load i16, ptr addrspace(3) %239, align 2, !dbg !37
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %527) #2, !dbg !38
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %528) #2, !dbg !38
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %529) #2, !dbg !38
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %530) #2, !dbg !38
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %531) #2, !dbg !38
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %532) #2, !dbg !38
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %533) #2, !dbg !38
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %534) #2, !dbg !38
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %535) #2, !dbg !38
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %536) #2, !dbg !38
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %537) #2, !dbg !38
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %538) #2, !dbg !38
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %539) #2, !dbg !38
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %540) #2, !dbg !38
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %541) #2, !dbg !38
  %558 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %542) #2, !dbg !38
  %559 = select i1 %482, float %543, float 0.000000e+00, !dbg !37
  %560 = select i1 %482, float %544, float 0.000000e+00, !dbg !37
  %561 = select i1 %482, float %545, float 0.000000e+00, !dbg !37
  %562 = select i1 %482, float %546, float 0.000000e+00, !dbg !37
  %563 = select i1 %482, float %547, float 0.000000e+00, !dbg !37
  %564 = select i1 %482, float %548, float 0.000000e+00, !dbg !37
  %565 = select i1 %482, float %549, float 0.000000e+00, !dbg !37
  %566 = select i1 %482, float %550, float 0.000000e+00, !dbg !37
  %567 = select i1 %482, float %551, float 0.000000e+00, !dbg !37
  %568 = select i1 %482, float %552, float 0.000000e+00, !dbg !37
  %569 = select i1 %482, float %553, float 0.000000e+00, !dbg !37
  %570 = select i1 %482, float %554, float 0.000000e+00, !dbg !37
  %571 = select i1 %482, float %555, float 0.000000e+00, !dbg !37
  %572 = select i1 %482, float %556, float 0.000000e+00, !dbg !37
  %573 = select i1 %482, float %557, float 0.000000e+00, !dbg !37
  %574 = select i1 %482, float %558, float 0.000000e+00, !dbg !37
  %575 = fmul float %241, %278, !dbg !39
  %576 = fmul float %242, %279, !dbg !39
  %577 = fmul float %243, %280, !dbg !39
  %578 = fmul float %244, %281, !dbg !39
  %579 = fmul float %245, %287, !dbg !39
  %580 = fmul float %246, %288, !dbg !39
  %581 = fmul float %247, %289, !dbg !39
  %582 = fmul float %248, %290, !dbg !39
  %583 = fmul float %249, %296, !dbg !39
  %584 = fmul float %250, %297, !dbg !39
  %585 = fmul float %251, %298, !dbg !39
  %586 = fmul float %252, %299, !dbg !39
  %587 = fmul float %253, %305, !dbg !39
  %588 = fmul float %254, %306, !dbg !39
  %589 = fmul float %255, %307, !dbg !39
  %590 = fmul float %256, %308, !dbg !39
  %591 = icmp sgt i32 %35, 127, !dbg !40
  %592 = icmp sgt i32 %36, 127, !dbg !40
  %593 = icmp sgt i32 %37, 127, !dbg !40
  %594 = icmp sgt i32 %38, 127, !dbg !40
  %595 = icmp sgt i32 %39, 127, !dbg !40
  %596 = add i32 %53, -512, !dbg !41
  %597 = add i32 %596, %49, !dbg !42
  %598 = add i32 %596, %50, !dbg !42
  %599 = add nsw i32 %56, -512, !dbg !42
  %600 = add nsw i32 %57, -512, !dbg !42
  %601 = sext i32 %597 to i64, !dbg !43
  %602 = getelementptr i16, ptr addrspace(1) %0, i64 %601, !dbg !43
  %603 = sext i32 %598 to i64, !dbg !43
  %604 = getelementptr i16, ptr addrspace(1) %0, i64 %603, !dbg !43
  %605 = sext i32 %599 to i64, !dbg !43
  %606 = getelementptr i16, ptr addrspace(1) %0, i64 %605, !dbg !43
  %607 = sext i32 %600 to i64, !dbg !43
  %608 = getelementptr i16, ptr addrspace(1) %0, i64 %607, !dbg !43
  %609 = icmp eq i32 %34, 0, !dbg !44
  %610 = and i32 %39, -128, !dbg !44
  %611 = icmp eq i32 %610, 128, !dbg !44
  %612 = and i1 %609, %28, !dbg !45
  %613 = and i1 %29, %611, !dbg !45
  %614 = and i1 %30, %611, !dbg !45
  %615 = and i1 %31, %611, !dbg !45
  %616 = and i1 %32, %611, !dbg !45
  %617 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %602, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !46
  %618 = extractvalue { i32, i32 } %617, 0, !dbg !46
  %619 = extractvalue { i32, i32 } %617, 1, !dbg !46
  %620 = trunc i32 %618 to i16, !dbg !46
  %extelt.offset24 = lshr i32 %618, 16, !dbg !46
  %621 = trunc i32 %extelt.offset24 to i16, !dbg !46
  %622 = trunc i32 %619 to i16, !dbg !46
  %extelt.offset25 = lshr i32 %619, 16, !dbg !46
  %623 = trunc i32 %extelt.offset25 to i16, !dbg !46
  %624 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %604, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !46
  %625 = extractvalue { i32, i32 } %624, 0, !dbg !46
  %626 = extractvalue { i32, i32 } %624, 1, !dbg !46
  %627 = trunc i32 %625 to i16, !dbg !46
  %extelt.offset26 = lshr i32 %625, 16, !dbg !46
  %628 = trunc i32 %extelt.offset26 to i16, !dbg !46
  %629 = trunc i32 %626 to i16, !dbg !46
  %extelt.offset27 = lshr i32 %626, 16, !dbg !46
  %630 = trunc i32 %extelt.offset27 to i16, !dbg !46
  %631 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %606, i1 %612, i32 0, i1 %612, i32 0, i1 %612) #2, !dbg !46
  %632 = extractvalue { i32, i32 } %631, 0, !dbg !46
  %633 = extractvalue { i32, i32 } %631, 1, !dbg !46
  %634 = trunc i32 %632 to i16, !dbg !46
  %extelt.offset28 = lshr i32 %632, 16, !dbg !46
  %635 = trunc i32 %extelt.offset28 to i16, !dbg !46
  %636 = trunc i32 %633 to i16, !dbg !46
  %extelt.offset29 = lshr i32 %633, 16, !dbg !46
  %637 = trunc i32 %extelt.offset29 to i16, !dbg !46
  %638 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %608, i1 %612, i32 0, i1 %612, i32 0, i1 %612) #2, !dbg !46
  %639 = extractvalue { i32, i32 } %638, 0, !dbg !46
  %640 = extractvalue { i32, i32 } %638, 1, !dbg !46
  %641 = trunc i32 %639 to i16, !dbg !46
  %extelt.offset30 = lshr i32 %639, 16, !dbg !46
  %642 = trunc i32 %extelt.offset30 to i16, !dbg !46
  %643 = trunc i32 %640 to i16, !dbg !46
  %extelt.offset31 = lshr i32 %640, 16, !dbg !46
  %644 = trunc i32 %extelt.offset31 to i16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %645 = insertelement <1 x i16> undef, i16 %620, i64 0, !dbg !47
  store <1 x i16> %645, ptr addrspace(3) %105, align 2, !dbg !47
  %646 = insertelement <1 x i16> undef, i16 %621, i64 0, !dbg !47
  store <1 x i16> %646, ptr addrspace(3) %110, align 2, !dbg !47
  %647 = insertelement <1 x i16> undef, i16 %622, i64 0, !dbg !47
  store <1 x i16> %647, ptr addrspace(3) %115, align 2, !dbg !47
  %648 = insertelement <1 x i16> undef, i16 %623, i64 0, !dbg !47
  store <1 x i16> %648, ptr addrspace(3) %120, align 2, !dbg !47
  %649 = insertelement <1 x i16> undef, i16 %627, i64 0, !dbg !47
  store <1 x i16> %649, ptr addrspace(3) %124, align 2, !dbg !47
  %650 = insertelement <1 x i16> undef, i16 %628, i64 0, !dbg !47
  store <1 x i16> %650, ptr addrspace(3) %128, align 2, !dbg !47
  %651 = insertelement <1 x i16> undef, i16 %629, i64 0, !dbg !47
  store <1 x i16> %651, ptr addrspace(3) %132, align 2, !dbg !47
  %652 = insertelement <1 x i16> undef, i16 %630, i64 0, !dbg !47
  store <1 x i16> %652, ptr addrspace(3) %136, align 2, !dbg !47
  %653 = insertelement <1 x i16> undef, i16 %634, i64 0, !dbg !47
  store <1 x i16> %653, ptr addrspace(3) %140, align 2, !dbg !47
  %654 = insertelement <1 x i16> undef, i16 %635, i64 0, !dbg !47
  store <1 x i16> %654, ptr addrspace(3) %144, align 2, !dbg !47
  %655 = insertelement <1 x i16> undef, i16 %636, i64 0, !dbg !47
  store <1 x i16> %655, ptr addrspace(3) %148, align 2, !dbg !47
  %656 = insertelement <1 x i16> undef, i16 %637, i64 0, !dbg !47
  store <1 x i16> %656, ptr addrspace(3) %152, align 2, !dbg !47
  %657 = insertelement <1 x i16> undef, i16 %641, i64 0, !dbg !47
  store <1 x i16> %657, ptr addrspace(3) %156, align 2, !dbg !47
  %658 = insertelement <1 x i16> undef, i16 %642, i64 0, !dbg !47
  store <1 x i16> %658, ptr addrspace(3) %160, align 2, !dbg !47
  %659 = insertelement <1 x i16> undef, i16 %643, i64 0, !dbg !47
  store <1 x i16> %659, ptr addrspace(3) %164, align 2, !dbg !47
  %660 = insertelement <1 x i16> undef, i16 %644, i64 0, !dbg !47
  store <1 x i16> %660, ptr addrspace(3) %168, align 2, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %661 = load i16, ptr addrspace(3) %173, align 2, !dbg !47
  %662 = load i16, ptr addrspace(3) %178, align 2, !dbg !47
  %663 = load i16, ptr addrspace(3) %183, align 2, !dbg !47
  %664 = load i16, ptr addrspace(3) %188, align 2, !dbg !47
  %665 = load i16, ptr addrspace(3) %193, align 2, !dbg !47
  %666 = load i16, ptr addrspace(3) %197, align 2, !dbg !47
  %667 = load i16, ptr addrspace(3) %201, align 2, !dbg !47
  %668 = load i16, ptr addrspace(3) %205, align 2, !dbg !47
  %669 = load i16, ptr addrspace(3) %210, align 2, !dbg !47
  %670 = load i16, ptr addrspace(3) %214, align 2, !dbg !47
  %671 = load i16, ptr addrspace(3) %218, align 2, !dbg !47
  %672 = load i16, ptr addrspace(3) %222, align 2, !dbg !47
  %673 = load i16, ptr addrspace(3) %227, align 2, !dbg !47
  %674 = load i16, ptr addrspace(3) %231, align 2, !dbg !47
  %675 = load i16, ptr addrspace(3) %235, align 2, !dbg !47
  %676 = load i16, ptr addrspace(3) %239, align 2, !dbg !47
  %677 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %661) #2, !dbg !47
  %678 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %662) #2, !dbg !47
  %679 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %663) #2, !dbg !47
  %680 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %664) #2, !dbg !47
  %681 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %665) #2, !dbg !47
  %682 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %666) #2, !dbg !47
  %683 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %667) #2, !dbg !47
  %684 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %668) #2, !dbg !47
  %685 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %669) #2, !dbg !47
  %686 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %670) #2, !dbg !47
  %687 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %671) #2, !dbg !47
  %688 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %672) #2, !dbg !47
  %689 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %673) #2, !dbg !47
  %690 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %674) #2, !dbg !47
  %691 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %675) #2, !dbg !47
  %692 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %676) #2, !dbg !47
  %693 = add i32 %39, -128, !dbg !48
  %694 = add i32 %693, %257, !dbg !49
  %695 = add i32 %693, %258, !dbg !49
  %696 = add i32 %693, %259, !dbg !49
  %697 = add i32 %693, %260, !dbg !49
  %698 = sext i32 %694 to i64, !dbg !50
  %699 = getelementptr float, ptr addrspace(1) %2, i64 %698, !dbg !50
  %700 = sext i32 %695 to i64, !dbg !50
  %701 = getelementptr float, ptr addrspace(1) %2, i64 %700, !dbg !50
  %702 = sext i32 %696 to i64, !dbg !50
  %703 = getelementptr float, ptr addrspace(1) %2, i64 %702, !dbg !50
  %704 = sext i32 %697 to i64, !dbg !50
  %705 = getelementptr float, ptr addrspace(1) %2, i64 %704, !dbg !50
  %706 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %699, i1 %613, i32 0, i1 %613, i32 0, i1 %613, i32 0, i1 %613, i32 0, i1 %613) #2, !dbg !51
  %707 = extractvalue { i32, i32, i32, i32 } %706, 0, !dbg !51
  %708 = extractvalue { i32, i32, i32, i32 } %706, 1, !dbg !51
  %709 = extractvalue { i32, i32, i32, i32 } %706, 2, !dbg !51
  %710 = extractvalue { i32, i32, i32, i32 } %706, 3, !dbg !51
  %711 = bitcast i32 %707 to float, !dbg !51
  %712 = bitcast i32 %708 to float, !dbg !51
  %713 = bitcast i32 %709 to float, !dbg !51
  %714 = bitcast i32 %710 to float, !dbg !51
  %715 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %701, i1 %614, i32 0, i1 %614, i32 0, i1 %614, i32 0, i1 %614, i32 0, i1 %614) #2, !dbg !51
  %716 = extractvalue { i32, i32, i32, i32 } %715, 0, !dbg !51
  %717 = extractvalue { i32, i32, i32, i32 } %715, 1, !dbg !51
  %718 = extractvalue { i32, i32, i32, i32 } %715, 2, !dbg !51
  %719 = extractvalue { i32, i32, i32, i32 } %715, 3, !dbg !51
  %720 = bitcast i32 %716 to float, !dbg !51
  %721 = bitcast i32 %717 to float, !dbg !51
  %722 = bitcast i32 %718 to float, !dbg !51
  %723 = bitcast i32 %719 to float, !dbg !51
  %724 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %703, i1 %615, i32 0, i1 %615, i32 0, i1 %615, i32 0, i1 %615, i32 0, i1 %615) #2, !dbg !51
  %725 = extractvalue { i32, i32, i32, i32 } %724, 0, !dbg !51
  %726 = extractvalue { i32, i32, i32, i32 } %724, 1, !dbg !51
  %727 = extractvalue { i32, i32, i32, i32 } %724, 2, !dbg !51
  %728 = extractvalue { i32, i32, i32, i32 } %724, 3, !dbg !51
  %729 = bitcast i32 %725 to float, !dbg !51
  %730 = bitcast i32 %726 to float, !dbg !51
  %731 = bitcast i32 %727 to float, !dbg !51
  %732 = bitcast i32 %728 to float, !dbg !51
  %733 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %705, i1 %616, i32 0, i1 %616, i32 0, i1 %616, i32 0, i1 %616, i32 0, i1 %616) #2, !dbg !51
  %734 = extractvalue { i32, i32, i32, i32 } %733, 0, !dbg !51
  %735 = extractvalue { i32, i32, i32, i32 } %733, 1, !dbg !51
  %736 = extractvalue { i32, i32, i32, i32 } %733, 2, !dbg !51
  %737 = extractvalue { i32, i32, i32, i32 } %733, 3, !dbg !51
  %738 = bitcast i32 %734 to float, !dbg !51
  %739 = bitcast i32 %735 to float, !dbg !51
  %740 = bitcast i32 %736 to float, !dbg !51
  %741 = bitcast i32 %737 to float, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %742 = insertelement <1 x float> undef, float %711, i64 0, !dbg !51
  store <1 x float> %742, ptr addrspace(3) %312, align 4, !dbg !51
  %743 = insertelement <1 x float> undef, float %712, i64 0, !dbg !51
  store <1 x float> %743, ptr addrspace(3) %317, align 4, !dbg !51
  %744 = insertelement <1 x float> undef, float %713, i64 0, !dbg !51
  store <1 x float> %744, ptr addrspace(3) %322, align 4, !dbg !51
  %745 = insertelement <1 x float> undef, float %714, i64 0, !dbg !51
  store <1 x float> %745, ptr addrspace(3) %327, align 4, !dbg !51
  %746 = insertelement <1 x float> undef, float %720, i64 0, !dbg !51
  store <1 x float> %746, ptr addrspace(3) %331, align 4, !dbg !51
  %747 = insertelement <1 x float> undef, float %721, i64 0, !dbg !51
  store <1 x float> %747, ptr addrspace(3) %335, align 4, !dbg !51
  %748 = insertelement <1 x float> undef, float %722, i64 0, !dbg !51
  store <1 x float> %748, ptr addrspace(3) %339, align 4, !dbg !51
  %749 = insertelement <1 x float> undef, float %723, i64 0, !dbg !51
  store <1 x float> %749, ptr addrspace(3) %343, align 4, !dbg !51
  %750 = insertelement <1 x float> undef, float %729, i64 0, !dbg !51
  store <1 x float> %750, ptr addrspace(3) %347, align 4, !dbg !51
  %751 = insertelement <1 x float> undef, float %730, i64 0, !dbg !51
  store <1 x float> %751, ptr addrspace(3) %351, align 4, !dbg !51
  %752 = insertelement <1 x float> undef, float %731, i64 0, !dbg !51
  store <1 x float> %752, ptr addrspace(3) %355, align 4, !dbg !51
  %753 = insertelement <1 x float> undef, float %732, i64 0, !dbg !51
  store <1 x float> %753, ptr addrspace(3) %359, align 4, !dbg !51
  %754 = insertelement <1 x float> undef, float %738, i64 0, !dbg !51
  store <1 x float> %754, ptr addrspace(3) %363, align 4, !dbg !51
  %755 = insertelement <1 x float> undef, float %739, i64 0, !dbg !51
  store <1 x float> %755, ptr addrspace(3) %367, align 4, !dbg !51
  %756 = insertelement <1 x float> undef, float %740, i64 0, !dbg !51
  store <1 x float> %756, ptr addrspace(3) %371, align 4, !dbg !51
  %757 = insertelement <1 x float> undef, float %741, i64 0, !dbg !51
  store <1 x float> %757, ptr addrspace(3) %375, align 4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %758 = load float, ptr addrspace(3) %380, align 16, !dbg !51
  %759 = load float, ptr addrspace(3) %382, align 4, !dbg !51
  %760 = load float, ptr addrspace(3) %384, align 8, !dbg !51
  %761 = load float, ptr addrspace(3) %386, align 4, !dbg !51
  %762 = load float, ptr addrspace(3) %391, align 16, !dbg !51
  %763 = load float, ptr addrspace(3) %393, align 4, !dbg !51
  %764 = load float, ptr addrspace(3) %395, align 8, !dbg !51
  %765 = load float, ptr addrspace(3) %397, align 4, !dbg !51
  %766 = load float, ptr addrspace(3) %402, align 16, !dbg !51
  %767 = load float, ptr addrspace(3) %404, align 4, !dbg !51
  %768 = load float, ptr addrspace(3) %406, align 8, !dbg !51
  %769 = load float, ptr addrspace(3) %408, align 4, !dbg !51
  %770 = load float, ptr addrspace(3) %413, align 16, !dbg !51
  %771 = load float, ptr addrspace(3) %415, align 4, !dbg !51
  %772 = load float, ptr addrspace(3) %417, align 8, !dbg !51
  %773 = load float, ptr addrspace(3) %419, align 4, !dbg !51
  %774 = fmul float %677, %711, !dbg !52
  %775 = fmul float %678, %712, !dbg !52
  %776 = fmul float %679, %713, !dbg !52
  %777 = fmul float %680, %714, !dbg !52
  %778 = fmul float %681, %720, !dbg !52
  %779 = fmul float %682, %721, !dbg !52
  %780 = fmul float %683, %722, !dbg !52
  %781 = fmul float %684, %723, !dbg !52
  %782 = fmul float %685, %729, !dbg !52
  %783 = fmul float %686, %730, !dbg !52
  %784 = fmul float %687, %731, !dbg !52
  %785 = fmul float %688, %732, !dbg !52
  %786 = fmul float %689, %738, !dbg !52
  %787 = fmul float %690, %739, !dbg !52
  %788 = fmul float %691, %740, !dbg !52
  %789 = fmul float %692, %741, !dbg !52
  %790 = fsub float 0.000000e+00, %774, !dbg !53
  %791 = fsub float 0.000000e+00, %775, !dbg !53
  %792 = fsub float 0.000000e+00, %776, !dbg !53
  %793 = fsub float 0.000000e+00, %777, !dbg !53
  %794 = fsub float 0.000000e+00, %778, !dbg !53
  %795 = fsub float 0.000000e+00, %779, !dbg !53
  %796 = fsub float 0.000000e+00, %780, !dbg !53
  %797 = fsub float 0.000000e+00, %781, !dbg !53
  %798 = fsub float 0.000000e+00, %782, !dbg !53
  %799 = fsub float 0.000000e+00, %783, !dbg !53
  %800 = fsub float 0.000000e+00, %784, !dbg !53
  %801 = fsub float 0.000000e+00, %785, !dbg !53
  %802 = fsub float 0.000000e+00, %786, !dbg !53
  %803 = fsub float 0.000000e+00, %787, !dbg !53
  %804 = fsub float 0.000000e+00, %788, !dbg !53
  %805 = fsub float 0.000000e+00, %789, !dbg !53
  %806 = select i1 %595, float %790, float 0.000000e+00, !dbg !37
  %807 = select i1 %595, float %791, float 0.000000e+00, !dbg !37
  %808 = select i1 %595, float %792, float 0.000000e+00, !dbg !37
  %809 = select i1 %595, float %793, float 0.000000e+00, !dbg !37
  %810 = select i1 %595, float %794, float 0.000000e+00, !dbg !37
  %811 = select i1 %595, float %795, float 0.000000e+00, !dbg !37
  %812 = select i1 %595, float %796, float 0.000000e+00, !dbg !37
  %813 = select i1 %595, float %797, float 0.000000e+00, !dbg !37
  %814 = select i1 %595, float %798, float 0.000000e+00, !dbg !37
  %815 = select i1 %595, float %799, float 0.000000e+00, !dbg !37
  %816 = select i1 %595, float %800, float 0.000000e+00, !dbg !37
  %817 = select i1 %595, float %801, float 0.000000e+00, !dbg !37
  %818 = select i1 %595, float %802, float 0.000000e+00, !dbg !37
  %819 = select i1 %595, float %803, float 0.000000e+00, !dbg !37
  %820 = select i1 %595, float %804, float 0.000000e+00, !dbg !37
  %821 = select i1 %595, float %805, float 0.000000e+00, !dbg !37
  %822 = fadd float %575, %806, !dbg !54
  %823 = fadd float %576, %807, !dbg !54
  %824 = fadd float %577, %808, !dbg !54
  %825 = fadd float %578, %809, !dbg !54
  %826 = fadd float %579, %810, !dbg !54
  %827 = fadd float %580, %811, !dbg !54
  %828 = fadd float %581, %812, !dbg !54
  %829 = fadd float %582, %813, !dbg !54
  %830 = fadd float %583, %814, !dbg !54
  %831 = fadd float %584, %815, !dbg !54
  %832 = fadd float %585, %816, !dbg !54
  %833 = fadd float %586, %817, !dbg !54
  %834 = fadd float %587, %818, !dbg !54
  %835 = fadd float %588, %819, !dbg !54
  %836 = fadd float %589, %820, !dbg !54
  %837 = fadd float %590, %821, !dbg !54
  %838 = icmp slt i32 %35, 128, !dbg !55
  %839 = icmp slt i32 %36, 128, !dbg !55
  %840 = icmp slt i32 %37, 128, !dbg !55
  %841 = icmp slt i32 %38, 128, !dbg !55
  %842 = icmp slt i32 %39, 128, !dbg !55
  %843 = or i32 %54, 512, !dbg !56
  %844 = or i32 %55, 512, !dbg !56
  %845 = add i32 %56, 512, !dbg !56
  %846 = add i32 %57, 512, !dbg !56
  %847 = sext i32 %843 to i64, !dbg !57
  %848 = getelementptr i16, ptr addrspace(1) %0, i64 %847, !dbg !57
  %849 = sext i32 %844 to i64, !dbg !57
  %850 = getelementptr i16, ptr addrspace(1) %0, i64 %849, !dbg !57
  %851 = sext i32 %845 to i64, !dbg !57
  %852 = getelementptr i16, ptr addrspace(1) %0, i64 %851, !dbg !57
  %853 = sext i32 %846 to i64, !dbg !57
  %854 = getelementptr i16, ptr addrspace(1) %0, i64 %853, !dbg !57
  %855 = and i1 %28, %838, !dbg !58
  %856 = and i1 %28, %839, !dbg !58
  %857 = and i1 %28, %840, !dbg !58
  %858 = and i1 %28, %841, !dbg !58
  %859 = and i1 %29, %842, !dbg !58
  %860 = and i1 %30, %842, !dbg !58
  %861 = and i1 %31, %842, !dbg !58
  %862 = and i1 %32, %842, !dbg !58
  %863 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %848, i1 %855, i32 0, i1 %855, i32 0, i1 %855) #2, !dbg !59
  %864 = extractvalue { i32, i32 } %863, 0, !dbg !59
  %865 = extractvalue { i32, i32 } %863, 1, !dbg !59
  %866 = trunc i32 %864 to i16, !dbg !59
  %extelt.offset32 = lshr i32 %864, 16, !dbg !59
  %867 = trunc i32 %extelt.offset32 to i16, !dbg !59
  %868 = trunc i32 %865 to i16, !dbg !59
  %extelt.offset33 = lshr i32 %865, 16, !dbg !59
  %869 = trunc i32 %extelt.offset33 to i16, !dbg !59
  %870 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %850, i1 %856, i32 0, i1 %856, i32 0, i1 %856) #2, !dbg !59
  %871 = extractvalue { i32, i32 } %870, 0, !dbg !59
  %872 = extractvalue { i32, i32 } %870, 1, !dbg !59
  %873 = trunc i32 %871 to i16, !dbg !59
  %extelt.offset34 = lshr i32 %871, 16, !dbg !59
  %874 = trunc i32 %extelt.offset34 to i16, !dbg !59
  %875 = trunc i32 %872 to i16, !dbg !59
  %extelt.offset35 = lshr i32 %872, 16, !dbg !59
  %876 = trunc i32 %extelt.offset35 to i16, !dbg !59
  %877 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %852, i1 %857, i32 0, i1 %857, i32 0, i1 %857) #2, !dbg !59
  %878 = extractvalue { i32, i32 } %877, 0, !dbg !59
  %879 = extractvalue { i32, i32 } %877, 1, !dbg !59
  %880 = trunc i32 %878 to i16, !dbg !59
  %extelt.offset36 = lshr i32 %878, 16, !dbg !59
  %881 = trunc i32 %extelt.offset36 to i16, !dbg !59
  %882 = trunc i32 %879 to i16, !dbg !59
  %extelt.offset37 = lshr i32 %879, 16, !dbg !59
  %883 = trunc i32 %extelt.offset37 to i16, !dbg !59
  %884 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %854, i1 %858, i32 0, i1 %858, i32 0, i1 %858) #2, !dbg !59
  %885 = extractvalue { i32, i32 } %884, 0, !dbg !59
  %886 = extractvalue { i32, i32 } %884, 1, !dbg !59
  %887 = trunc i32 %885 to i16, !dbg !59
  %extelt.offset38 = lshr i32 %885, 16, !dbg !59
  %888 = trunc i32 %extelt.offset38 to i16, !dbg !59
  %889 = trunc i32 %886 to i16, !dbg !59
  %extelt.offset39 = lshr i32 %886, 16, !dbg !59
  %890 = trunc i32 %extelt.offset39 to i16, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %891 = insertelement <1 x i16> undef, i16 %866, i64 0, !dbg !60
  store <1 x i16> %891, ptr addrspace(3) %105, align 2, !dbg !60
  %892 = insertelement <1 x i16> undef, i16 %867, i64 0, !dbg !60
  store <1 x i16> %892, ptr addrspace(3) %110, align 2, !dbg !60
  %893 = insertelement <1 x i16> undef, i16 %868, i64 0, !dbg !60
  store <1 x i16> %893, ptr addrspace(3) %115, align 2, !dbg !60
  %894 = insertelement <1 x i16> undef, i16 %869, i64 0, !dbg !60
  store <1 x i16> %894, ptr addrspace(3) %120, align 2, !dbg !60
  %895 = insertelement <1 x i16> undef, i16 %873, i64 0, !dbg !60
  store <1 x i16> %895, ptr addrspace(3) %124, align 2, !dbg !60
  %896 = insertelement <1 x i16> undef, i16 %874, i64 0, !dbg !60
  store <1 x i16> %896, ptr addrspace(3) %128, align 2, !dbg !60
  %897 = insertelement <1 x i16> undef, i16 %875, i64 0, !dbg !60
  store <1 x i16> %897, ptr addrspace(3) %132, align 2, !dbg !60
  %898 = insertelement <1 x i16> undef, i16 %876, i64 0, !dbg !60
  store <1 x i16> %898, ptr addrspace(3) %136, align 2, !dbg !60
  %899 = insertelement <1 x i16> undef, i16 %880, i64 0, !dbg !60
  store <1 x i16> %899, ptr addrspace(3) %140, align 2, !dbg !60
  %900 = insertelement <1 x i16> undef, i16 %881, i64 0, !dbg !60
  store <1 x i16> %900, ptr addrspace(3) %144, align 2, !dbg !60
  %901 = insertelement <1 x i16> undef, i16 %882, i64 0, !dbg !60
  store <1 x i16> %901, ptr addrspace(3) %148, align 2, !dbg !60
  %902 = insertelement <1 x i16> undef, i16 %883, i64 0, !dbg !60
  store <1 x i16> %902, ptr addrspace(3) %152, align 2, !dbg !60
  %903 = insertelement <1 x i16> undef, i16 %887, i64 0, !dbg !60
  store <1 x i16> %903, ptr addrspace(3) %156, align 2, !dbg !60
  %904 = insertelement <1 x i16> undef, i16 %888, i64 0, !dbg !60
  store <1 x i16> %904, ptr addrspace(3) %160, align 2, !dbg !60
  %905 = insertelement <1 x i16> undef, i16 %889, i64 0, !dbg !60
  store <1 x i16> %905, ptr addrspace(3) %164, align 2, !dbg !60
  %906 = insertelement <1 x i16> undef, i16 %890, i64 0, !dbg !60
  store <1 x i16> %906, ptr addrspace(3) %168, align 2, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %907 = load i16, ptr addrspace(3) %173, align 2, !dbg !60
  %908 = load i16, ptr addrspace(3) %178, align 2, !dbg !60
  %909 = load i16, ptr addrspace(3) %183, align 2, !dbg !60
  %910 = load i16, ptr addrspace(3) %188, align 2, !dbg !60
  %911 = load i16, ptr addrspace(3) %193, align 2, !dbg !60
  %912 = load i16, ptr addrspace(3) %197, align 2, !dbg !60
  %913 = load i16, ptr addrspace(3) %201, align 2, !dbg !60
  %914 = load i16, ptr addrspace(3) %205, align 2, !dbg !60
  %915 = load i16, ptr addrspace(3) %210, align 2, !dbg !60
  %916 = load i16, ptr addrspace(3) %214, align 2, !dbg !60
  %917 = load i16, ptr addrspace(3) %218, align 2, !dbg !60
  %918 = load i16, ptr addrspace(3) %222, align 2, !dbg !60
  %919 = load i16, ptr addrspace(3) %227, align 2, !dbg !60
  %920 = load i16, ptr addrspace(3) %231, align 2, !dbg !60
  %921 = load i16, ptr addrspace(3) %235, align 2, !dbg !60
  %922 = load i16, ptr addrspace(3) %239, align 2, !dbg !60
  %923 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %907) #2, !dbg !60
  %924 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %908) #2, !dbg !60
  %925 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %909) #2, !dbg !60
  %926 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %910) #2, !dbg !60
  %927 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %911) #2, !dbg !60
  %928 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %912) #2, !dbg !60
  %929 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %913) #2, !dbg !60
  %930 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %914) #2, !dbg !60
  %931 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %915) #2, !dbg !60
  %932 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %916) #2, !dbg !60
  %933 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %917) #2, !dbg !60
  %934 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %918) #2, !dbg !60
  %935 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %919) #2, !dbg !60
  %936 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %920) #2, !dbg !60
  %937 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %921) #2, !dbg !60
  %938 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %922) #2, !dbg !60
  %939 = add i32 %39, 128, !dbg !61
  %940 = add i32 %939, %257, !dbg !62
  %941 = add i32 %939, %258, !dbg !62
  %942 = add i32 %939, %259, !dbg !62
  %943 = add i32 %939, %260, !dbg !62
  %944 = sext i32 %940 to i64, !dbg !63
  %945 = getelementptr float, ptr addrspace(1) %2, i64 %944, !dbg !63
  %946 = sext i32 %941 to i64, !dbg !63
  %947 = getelementptr float, ptr addrspace(1) %2, i64 %946, !dbg !63
  %948 = sext i32 %942 to i64, !dbg !63
  %949 = getelementptr float, ptr addrspace(1) %2, i64 %948, !dbg !63
  %950 = sext i32 %943 to i64, !dbg !63
  %951 = getelementptr float, ptr addrspace(1) %2, i64 %950, !dbg !63
  %952 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %945, i1 %859, i32 0, i1 %859, i32 0, i1 %859, i32 0, i1 %859, i32 0, i1 %859) #2, !dbg !64
  %953 = extractvalue { i32, i32, i32, i32 } %952, 0, !dbg !64
  %954 = extractvalue { i32, i32, i32, i32 } %952, 1, !dbg !64
  %955 = extractvalue { i32, i32, i32, i32 } %952, 2, !dbg !64
  %956 = extractvalue { i32, i32, i32, i32 } %952, 3, !dbg !64
  %957 = bitcast i32 %953 to float, !dbg !64
  %958 = bitcast i32 %954 to float, !dbg !64
  %959 = bitcast i32 %955 to float, !dbg !64
  %960 = bitcast i32 %956 to float, !dbg !64
  %961 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %947, i1 %860, i32 0, i1 %860, i32 0, i1 %860, i32 0, i1 %860, i32 0, i1 %860) #2, !dbg !64
  %962 = extractvalue { i32, i32, i32, i32 } %961, 0, !dbg !64
  %963 = extractvalue { i32, i32, i32, i32 } %961, 1, !dbg !64
  %964 = extractvalue { i32, i32, i32, i32 } %961, 2, !dbg !64
  %965 = extractvalue { i32, i32, i32, i32 } %961, 3, !dbg !64
  %966 = bitcast i32 %962 to float, !dbg !64
  %967 = bitcast i32 %963 to float, !dbg !64
  %968 = bitcast i32 %964 to float, !dbg !64
  %969 = bitcast i32 %965 to float, !dbg !64
  %970 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %949, i1 %861, i32 0, i1 %861, i32 0, i1 %861, i32 0, i1 %861, i32 0, i1 %861) #2, !dbg !64
  %971 = extractvalue { i32, i32, i32, i32 } %970, 0, !dbg !64
  %972 = extractvalue { i32, i32, i32, i32 } %970, 1, !dbg !64
  %973 = extractvalue { i32, i32, i32, i32 } %970, 2, !dbg !64
  %974 = extractvalue { i32, i32, i32, i32 } %970, 3, !dbg !64
  %975 = bitcast i32 %971 to float, !dbg !64
  %976 = bitcast i32 %972 to float, !dbg !64
  %977 = bitcast i32 %973 to float, !dbg !64
  %978 = bitcast i32 %974 to float, !dbg !64
  %979 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %951, i1 %862, i32 0, i1 %862, i32 0, i1 %862, i32 0, i1 %862, i32 0, i1 %862) #2, !dbg !64
  %980 = extractvalue { i32, i32, i32, i32 } %979, 0, !dbg !64
  %981 = extractvalue { i32, i32, i32, i32 } %979, 1, !dbg !64
  %982 = extractvalue { i32, i32, i32, i32 } %979, 2, !dbg !64
  %983 = extractvalue { i32, i32, i32, i32 } %979, 3, !dbg !64
  %984 = bitcast i32 %980 to float, !dbg !64
  %985 = bitcast i32 %981 to float, !dbg !64
  %986 = bitcast i32 %982 to float, !dbg !64
  %987 = bitcast i32 %983 to float, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %988 = insertelement <1 x float> undef, float %957, i64 0, !dbg !64
  store <1 x float> %988, ptr addrspace(3) %312, align 4, !dbg !64
  %989 = insertelement <1 x float> undef, float %958, i64 0, !dbg !64
  store <1 x float> %989, ptr addrspace(3) %317, align 4, !dbg !64
  %990 = insertelement <1 x float> undef, float %959, i64 0, !dbg !64
  store <1 x float> %990, ptr addrspace(3) %322, align 4, !dbg !64
  %991 = insertelement <1 x float> undef, float %960, i64 0, !dbg !64
  store <1 x float> %991, ptr addrspace(3) %327, align 4, !dbg !64
  %992 = insertelement <1 x float> undef, float %966, i64 0, !dbg !64
  store <1 x float> %992, ptr addrspace(3) %331, align 4, !dbg !64
  %993 = insertelement <1 x float> undef, float %967, i64 0, !dbg !64
  store <1 x float> %993, ptr addrspace(3) %335, align 4, !dbg !64
  %994 = insertelement <1 x float> undef, float %968, i64 0, !dbg !64
  store <1 x float> %994, ptr addrspace(3) %339, align 4, !dbg !64
  %995 = insertelement <1 x float> undef, float %969, i64 0, !dbg !64
  store <1 x float> %995, ptr addrspace(3) %343, align 4, !dbg !64
  %996 = insertelement <1 x float> undef, float %975, i64 0, !dbg !64
  store <1 x float> %996, ptr addrspace(3) %347, align 4, !dbg !64
  %997 = insertelement <1 x float> undef, float %976, i64 0, !dbg !64
  store <1 x float> %997, ptr addrspace(3) %351, align 4, !dbg !64
  %998 = insertelement <1 x float> undef, float %977, i64 0, !dbg !64
  store <1 x float> %998, ptr addrspace(3) %355, align 4, !dbg !64
  %999 = insertelement <1 x float> undef, float %978, i64 0, !dbg !64
  store <1 x float> %999, ptr addrspace(3) %359, align 4, !dbg !64
  %1000 = insertelement <1 x float> undef, float %984, i64 0, !dbg !64
  store <1 x float> %1000, ptr addrspace(3) %363, align 4, !dbg !64
  %1001 = insertelement <1 x float> undef, float %985, i64 0, !dbg !64
  store <1 x float> %1001, ptr addrspace(3) %367, align 4, !dbg !64
  %1002 = insertelement <1 x float> undef, float %986, i64 0, !dbg !64
  store <1 x float> %1002, ptr addrspace(3) %371, align 4, !dbg !64
  %1003 = insertelement <1 x float> undef, float %987, i64 0, !dbg !64
  store <1 x float> %1003, ptr addrspace(3) %375, align 4, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %1004 = load float, ptr addrspace(3) %380, align 16, !dbg !64
  %1005 = load float, ptr addrspace(3) %382, align 4, !dbg !64
  %1006 = load float, ptr addrspace(3) %384, align 8, !dbg !64
  %1007 = load float, ptr addrspace(3) %386, align 4, !dbg !64
  %1008 = load float, ptr addrspace(3) %391, align 16, !dbg !64
  %1009 = load float, ptr addrspace(3) %393, align 4, !dbg !64
  %1010 = load float, ptr addrspace(3) %395, align 8, !dbg !64
  %1011 = load float, ptr addrspace(3) %397, align 4, !dbg !64
  %1012 = load float, ptr addrspace(3) %402, align 16, !dbg !64
  %1013 = load float, ptr addrspace(3) %404, align 4, !dbg !64
  %1014 = load float, ptr addrspace(3) %406, align 8, !dbg !64
  %1015 = load float, ptr addrspace(3) %408, align 4, !dbg !64
  %1016 = load float, ptr addrspace(3) %413, align 16, !dbg !64
  %1017 = load float, ptr addrspace(3) %415, align 4, !dbg !64
  %1018 = load float, ptr addrspace(3) %417, align 8, !dbg !64
  %1019 = load float, ptr addrspace(3) %419, align 4, !dbg !64
  %1020 = fmul float %923, %957, !dbg !65
  %1021 = fmul float %924, %958, !dbg !65
  %1022 = fmul float %925, %959, !dbg !65
  %1023 = fmul float %926, %960, !dbg !65
  %1024 = fmul float %927, %966, !dbg !65
  %1025 = fmul float %928, %967, !dbg !65
  %1026 = fmul float %929, %968, !dbg !65
  %1027 = fmul float %930, %969, !dbg !65
  %1028 = fmul float %931, %975, !dbg !65
  %1029 = fmul float %932, %976, !dbg !65
  %1030 = fmul float %933, %977, !dbg !65
  %1031 = fmul float %934, %978, !dbg !65
  %1032 = fmul float %935, %984, !dbg !65
  %1033 = fmul float %936, %985, !dbg !65
  %1034 = fmul float %937, %986, !dbg !65
  %1035 = fmul float %938, %987, !dbg !65
  %1036 = select i1 %842, float %1020, float 0.000000e+00, !dbg !37
  %1037 = select i1 %842, float %1021, float 0.000000e+00, !dbg !37
  %1038 = select i1 %842, float %1022, float 0.000000e+00, !dbg !37
  %1039 = select i1 %842, float %1023, float 0.000000e+00, !dbg !37
  %1040 = select i1 %842, float %1024, float 0.000000e+00, !dbg !37
  %1041 = select i1 %842, float %1025, float 0.000000e+00, !dbg !37
  %1042 = select i1 %842, float %1026, float 0.000000e+00, !dbg !37
  %1043 = select i1 %842, float %1027, float 0.000000e+00, !dbg !37
  %1044 = select i1 %842, float %1028, float 0.000000e+00, !dbg !37
  %1045 = select i1 %842, float %1029, float 0.000000e+00, !dbg !37
  %1046 = select i1 %842, float %1030, float 0.000000e+00, !dbg !37
  %1047 = select i1 %842, float %1031, float 0.000000e+00, !dbg !37
  %1048 = select i1 %842, float %1032, float 0.000000e+00, !dbg !37
  %1049 = select i1 %842, float %1033, float 0.000000e+00, !dbg !37
  %1050 = select i1 %842, float %1034, float 0.000000e+00, !dbg !37
  %1051 = select i1 %842, float %1035, float 0.000000e+00, !dbg !37
  %1052 = fadd float %822, %1036, !dbg !66
  %1053 = fadd float %823, %1037, !dbg !66
  %1054 = fadd float %824, %1038, !dbg !66
  %1055 = fadd float %825, %1039, !dbg !66
  %1056 = fadd float %826, %1040, !dbg !66
  %1057 = fadd float %827, %1041, !dbg !66
  %1058 = fadd float %828, %1042, !dbg !66
  %1059 = fadd float %829, %1043, !dbg !66
  %1060 = fadd float %830, %1044, !dbg !66
  %1061 = fadd float %831, %1045, !dbg !66
  %1062 = fadd float %832, %1046, !dbg !66
  %1063 = fadd float %833, %1047, !dbg !66
  %1064 = fadd float %834, %1048, !dbg !66
  %1065 = fadd float %835, %1049, !dbg !66
  %1066 = fadd float %836, %1050, !dbg !66
  %1067 = fadd float %837, %1051, !dbg !66
  %1068 = fadd float %559, %1052, !dbg !67
  %1069 = fadd float %560, %1053, !dbg !67
  %1070 = fadd float %561, %1054, !dbg !67
  %1071 = fadd float %562, %1055, !dbg !67
  %1072 = fadd float %563, %1056, !dbg !67
  %1073 = fadd float %564, %1057, !dbg !67
  %1074 = fadd float %565, %1058, !dbg !67
  %1075 = fadd float %566, %1059, !dbg !67
  %1076 = fadd float %567, %1060, !dbg !67
  %1077 = fadd float %568, %1061, !dbg !67
  %1078 = fadd float %569, %1062, !dbg !67
  %1079 = fadd float %570, %1063, !dbg !67
  %1080 = fadd float %571, %1064, !dbg !67
  %1081 = fadd float %572, %1065, !dbg !67
  %1082 = fadd float %573, %1066, !dbg !67
  %1083 = fadd float %574, %1067, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %1084 = insertelement <1 x float> undef, float %1068, i64 0, !dbg !67
  store <1 x float> %1084, ptr addrspace(3) %312, align 4, !dbg !67
  %1085 = insertelement <1 x float> undef, float %1069, i64 0, !dbg !67
  store <1 x float> %1085, ptr addrspace(3) %317, align 4, !dbg !67
  %1086 = insertelement <1 x float> undef, float %1070, i64 0, !dbg !67
  store <1 x float> %1086, ptr addrspace(3) %322, align 4, !dbg !67
  %1087 = insertelement <1 x float> undef, float %1071, i64 0, !dbg !67
  store <1 x float> %1087, ptr addrspace(3) %327, align 4, !dbg !67
  %1088 = insertelement <1 x float> undef, float %1072, i64 0, !dbg !67
  store <1 x float> %1088, ptr addrspace(3) %331, align 4, !dbg !67
  %1089 = insertelement <1 x float> undef, float %1073, i64 0, !dbg !67
  store <1 x float> %1089, ptr addrspace(3) %335, align 4, !dbg !67
  %1090 = insertelement <1 x float> undef, float %1074, i64 0, !dbg !67
  store <1 x float> %1090, ptr addrspace(3) %339, align 4, !dbg !67
  %1091 = insertelement <1 x float> undef, float %1075, i64 0, !dbg !67
  store <1 x float> %1091, ptr addrspace(3) %343, align 4, !dbg !67
  %1092 = insertelement <1 x float> undef, float %1076, i64 0, !dbg !67
  store <1 x float> %1092, ptr addrspace(3) %347, align 4, !dbg !67
  %1093 = insertelement <1 x float> undef, float %1077, i64 0, !dbg !67
  store <1 x float> %1093, ptr addrspace(3) %351, align 4, !dbg !67
  %1094 = insertelement <1 x float> undef, float %1078, i64 0, !dbg !67
  store <1 x float> %1094, ptr addrspace(3) %355, align 4, !dbg !67
  %1095 = insertelement <1 x float> undef, float %1079, i64 0, !dbg !67
  store <1 x float> %1095, ptr addrspace(3) %359, align 4, !dbg !67
  %1096 = insertelement <1 x float> undef, float %1080, i64 0, !dbg !67
  store <1 x float> %1096, ptr addrspace(3) %363, align 4, !dbg !67
  %1097 = insertelement <1 x float> undef, float %1081, i64 0, !dbg !67
  store <1 x float> %1097, ptr addrspace(3) %367, align 4, !dbg !67
  %1098 = insertelement <1 x float> undef, float %1082, i64 0, !dbg !67
  store <1 x float> %1098, ptr addrspace(3) %371, align 4, !dbg !67
  %1099 = insertelement <1 x float> undef, float %1083, i64 0, !dbg !67
  store <1 x float> %1099, ptr addrspace(3) %375, align 4, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %1100 = load float, ptr addrspace(3) %380, align 16, !dbg !67
  %1101 = load float, ptr addrspace(3) %382, align 4, !dbg !67
  %1102 = load float, ptr addrspace(3) %384, align 8, !dbg !67
  %1103 = load float, ptr addrspace(3) %386, align 4, !dbg !67
  %1104 = load float, ptr addrspace(3) %391, align 16, !dbg !67
  %1105 = load float, ptr addrspace(3) %393, align 4, !dbg !67
  %1106 = load float, ptr addrspace(3) %395, align 8, !dbg !67
  %1107 = load float, ptr addrspace(3) %397, align 4, !dbg !67
  %1108 = load float, ptr addrspace(3) %402, align 16, !dbg !67
  %1109 = load float, ptr addrspace(3) %404, align 4, !dbg !67
  %1110 = load float, ptr addrspace(3) %406, align 8, !dbg !67
  %1111 = load float, ptr addrspace(3) %408, align 4, !dbg !67
  %1112 = load float, ptr addrspace(3) %413, align 16, !dbg !67
  %1113 = load float, ptr addrspace(3) %415, align 4, !dbg !67
  %1114 = load float, ptr addrspace(3) %417, align 8, !dbg !67
  %1115 = load float, ptr addrspace(3) %419, align 4, !dbg !67
  %1116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %427, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !68
  %1117 = extractvalue { i32, i32 } %1116, 0, !dbg !68
  %1118 = extractvalue { i32, i32 } %1116, 1, !dbg !68
  %1119 = trunc i32 %1117 to i16, !dbg !68
  %extelt.offset40 = lshr i32 %1117, 16, !dbg !68
  %1120 = trunc i32 %extelt.offset40 to i16, !dbg !68
  %1121 = trunc i32 %1118 to i16, !dbg !68
  %extelt.offset41 = lshr i32 %1118, 16, !dbg !68
  %1122 = trunc i32 %extelt.offset41 to i16, !dbg !68
  %1123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %429, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !68
  %1124 = extractvalue { i32, i32 } %1123, 0, !dbg !68
  %1125 = extractvalue { i32, i32 } %1123, 1, !dbg !68
  %1126 = trunc i32 %1124 to i16, !dbg !68
  %extelt.offset42 = lshr i32 %1124, 16, !dbg !68
  %1127 = trunc i32 %extelt.offset42 to i16, !dbg !68
  %1128 = trunc i32 %1125 to i16, !dbg !68
  %extelt.offset43 = lshr i32 %1125, 16, !dbg !68
  %1129 = trunc i32 %extelt.offset43 to i16, !dbg !68
  %1130 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %431, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !68
  %1131 = extractvalue { i32, i32 } %1130, 0, !dbg !68
  %1132 = extractvalue { i32, i32 } %1130, 1, !dbg !68
  %1133 = trunc i32 %1131 to i16, !dbg !68
  %extelt.offset44 = lshr i32 %1131, 16, !dbg !68
  %1134 = trunc i32 %extelt.offset44 to i16, !dbg !68
  %1135 = trunc i32 %1132 to i16, !dbg !68
  %extelt.offset45 = lshr i32 %1132, 16, !dbg !68
  %1136 = trunc i32 %extelt.offset45 to i16, !dbg !68
  %1137 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %433, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !68
  %1138 = extractvalue { i32, i32 } %1137, 0, !dbg !68
  %1139 = extractvalue { i32, i32 } %1137, 1, !dbg !68
  %1140 = trunc i32 %1138 to i16, !dbg !68
  %extelt.offset46 = lshr i32 %1138, 16, !dbg !68
  %1141 = trunc i32 %extelt.offset46 to i16, !dbg !68
  %1142 = trunc i32 %1139 to i16, !dbg !68
  %extelt.offset47 = lshr i32 %1139, 16, !dbg !68
  %1143 = trunc i32 %extelt.offset47 to i16, !dbg !68
  %1144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1119) #2, !dbg !69
  %1145 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1120) #2, !dbg !69
  %1146 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1121) #2, !dbg !69
  %1147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1122) #2, !dbg !69
  %1148 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1126) #2, !dbg !69
  %1149 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1127) #2, !dbg !69
  %1150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1128) #2, !dbg !69
  %1151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1129) #2, !dbg !69
  %1152 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1133) #2, !dbg !69
  %1153 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1134) #2, !dbg !69
  %1154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1135) #2, !dbg !69
  %1155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1136) #2, !dbg !69
  %1156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1140) #2, !dbg !69
  %1157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1141) #2, !dbg !69
  %1158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1142) #2, !dbg !69
  %1159 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1143) #2, !dbg !69
  %1160 = select i1 %478, float %1144, float 0.000000e+00, !dbg !37
  %1161 = select i1 %478, float %1145, float 0.000000e+00, !dbg !37
  %1162 = select i1 %478, float %1146, float 0.000000e+00, !dbg !37
  %1163 = select i1 %478, float %1147, float 0.000000e+00, !dbg !37
  %1164 = select i1 %479, float %1148, float 0.000000e+00, !dbg !37
  %1165 = select i1 %479, float %1149, float 0.000000e+00, !dbg !37
  %1166 = select i1 %479, float %1150, float 0.000000e+00, !dbg !37
  %1167 = select i1 %479, float %1151, float 0.000000e+00, !dbg !37
  %1168 = select i1 %480, float %1152, float 0.000000e+00, !dbg !37
  %1169 = select i1 %480, float %1153, float 0.000000e+00, !dbg !37
  %1170 = select i1 %480, float %1154, float 0.000000e+00, !dbg !37
  %1171 = select i1 %480, float %1155, float 0.000000e+00, !dbg !37
  %1172 = select i1 %481, float %1156, float 0.000000e+00, !dbg !37
  %1173 = select i1 %481, float %1157, float 0.000000e+00, !dbg !37
  %1174 = select i1 %481, float %1158, float 0.000000e+00, !dbg !37
  %1175 = select i1 %481, float %1159, float 0.000000e+00, !dbg !37
  %1176 = fmul float %381, %462, !dbg !70
  %1177 = fmul float %383, %463, !dbg !70
  %1178 = fmul float %385, %464, !dbg !70
  %1179 = fmul float %387, %465, !dbg !70
  %1180 = fmul float %392, %466, !dbg !70
  %1181 = fmul float %394, %467, !dbg !70
  %1182 = fmul float %396, %468, !dbg !70
  %1183 = fmul float %398, %469, !dbg !70
  %1184 = fmul float %403, %470, !dbg !70
  %1185 = fmul float %405, %471, !dbg !70
  %1186 = fmul float %407, %472, !dbg !70
  %1187 = fmul float %409, %473, !dbg !70
  %1188 = fmul float %414, %474, !dbg !70
  %1189 = fmul float %416, %475, !dbg !70
  %1190 = fmul float %418, %476, !dbg !70
  %1191 = fmul float %420, %477, !dbg !70
  %1192 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %848, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !71
  %1193 = extractvalue { i32, i32 } %1192, 0, !dbg !71
  %1194 = extractvalue { i32, i32 } %1192, 1, !dbg !71
  %1195 = trunc i32 %1193 to i16, !dbg !71
  %extelt.offset48 = lshr i32 %1193, 16, !dbg !71
  %1196 = trunc i32 %extelt.offset48 to i16, !dbg !71
  %1197 = trunc i32 %1194 to i16, !dbg !71
  %extelt.offset49 = lshr i32 %1194, 16, !dbg !71
  %1198 = trunc i32 %extelt.offset49 to i16, !dbg !71
  %1199 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %850, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !71
  %1200 = extractvalue { i32, i32 } %1199, 0, !dbg !71
  %1201 = extractvalue { i32, i32 } %1199, 1, !dbg !71
  %1202 = trunc i32 %1200 to i16, !dbg !71
  %extelt.offset50 = lshr i32 %1200, 16, !dbg !71
  %1203 = trunc i32 %extelt.offset50 to i16, !dbg !71
  %1204 = trunc i32 %1201 to i16, !dbg !71
  %extelt.offset51 = lshr i32 %1201, 16, !dbg !71
  %1205 = trunc i32 %extelt.offset51 to i16, !dbg !71
  %1206 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %852, i1 %612, i32 0, i1 %612, i32 0, i1 %612) #2, !dbg !71
  %1207 = extractvalue { i32, i32 } %1206, 0, !dbg !71
  %1208 = extractvalue { i32, i32 } %1206, 1, !dbg !71
  %1209 = trunc i32 %1207 to i16, !dbg !71
  %extelt.offset52 = lshr i32 %1207, 16, !dbg !71
  %1210 = trunc i32 %extelt.offset52 to i16, !dbg !71
  %1211 = trunc i32 %1208 to i16, !dbg !71
  %extelt.offset53 = lshr i32 %1208, 16, !dbg !71
  %1212 = trunc i32 %extelt.offset53 to i16, !dbg !71
  %1213 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %854, i1 %612, i32 0, i1 %612, i32 0, i1 %612) #2, !dbg !71
  %1214 = extractvalue { i32, i32 } %1213, 0, !dbg !71
  %1215 = extractvalue { i32, i32 } %1213, 1, !dbg !71
  %1216 = trunc i32 %1214 to i16, !dbg !71
  %extelt.offset54 = lshr i32 %1214, 16, !dbg !71
  %1217 = trunc i32 %extelt.offset54 to i16, !dbg !71
  %1218 = trunc i32 %1215 to i16, !dbg !71
  %extelt.offset55 = lshr i32 %1215, 16, !dbg !71
  %1219 = trunc i32 %extelt.offset55 to i16, !dbg !71
  %1220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1195) #2, !dbg !72
  %1221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1196) #2, !dbg !72
  %1222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1197) #2, !dbg !72
  %1223 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1198) #2, !dbg !72
  %1224 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1202) #2, !dbg !72
  %1225 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1203) #2, !dbg !72
  %1226 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1204) #2, !dbg !72
  %1227 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1205) #2, !dbg !72
  %1228 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1209) #2, !dbg !72
  %1229 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1210) #2, !dbg !72
  %1230 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1211) #2, !dbg !72
  %1231 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1212) #2, !dbg !72
  %1232 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1216) #2, !dbg !72
  %1233 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1217) #2, !dbg !72
  %1234 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1218) #2, !dbg !72
  %1235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1219) #2, !dbg !72
  %1236 = fmul float %758, %1220, !dbg !73
  %1237 = fmul float %759, %1221, !dbg !73
  %1238 = fmul float %760, %1222, !dbg !73
  %1239 = fmul float %761, %1223, !dbg !73
  %1240 = fmul float %762, %1224, !dbg !73
  %1241 = fmul float %763, %1225, !dbg !73
  %1242 = fmul float %764, %1226, !dbg !73
  %1243 = fmul float %765, %1227, !dbg !73
  %1244 = fmul float %766, %1228, !dbg !73
  %1245 = fmul float %767, %1229, !dbg !73
  %1246 = fmul float %768, %1230, !dbg !73
  %1247 = fmul float %769, %1231, !dbg !73
  %1248 = fmul float %770, %1232, !dbg !73
  %1249 = fmul float %771, %1233, !dbg !73
  %1250 = fmul float %772, %1234, !dbg !73
  %1251 = fmul float %773, %1235, !dbg !73
  %1252 = fsub float 0.000000e+00, %1236, !dbg !74
  %1253 = fsub float 0.000000e+00, %1237, !dbg !74
  %1254 = fsub float 0.000000e+00, %1238, !dbg !74
  %1255 = fsub float 0.000000e+00, %1239, !dbg !74
  %1256 = fsub float 0.000000e+00, %1240, !dbg !74
  %1257 = fsub float 0.000000e+00, %1241, !dbg !74
  %1258 = fsub float 0.000000e+00, %1242, !dbg !74
  %1259 = fsub float 0.000000e+00, %1243, !dbg !74
  %1260 = fsub float 0.000000e+00, %1244, !dbg !74
  %1261 = fsub float 0.000000e+00, %1245, !dbg !74
  %1262 = fsub float 0.000000e+00, %1246, !dbg !74
  %1263 = fsub float 0.000000e+00, %1247, !dbg !74
  %1264 = fsub float 0.000000e+00, %1248, !dbg !74
  %1265 = fsub float 0.000000e+00, %1249, !dbg !74
  %1266 = fsub float 0.000000e+00, %1250, !dbg !74
  %1267 = fsub float 0.000000e+00, %1251, !dbg !74
  %1268 = select i1 %591, float %1252, float 0.000000e+00, !dbg !37
  %1269 = select i1 %591, float %1253, float 0.000000e+00, !dbg !37
  %1270 = select i1 %591, float %1254, float 0.000000e+00, !dbg !37
  %1271 = select i1 %591, float %1255, float 0.000000e+00, !dbg !37
  %1272 = select i1 %592, float %1256, float 0.000000e+00, !dbg !37
  %1273 = select i1 %592, float %1257, float 0.000000e+00, !dbg !37
  %1274 = select i1 %592, float %1258, float 0.000000e+00, !dbg !37
  %1275 = select i1 %592, float %1259, float 0.000000e+00, !dbg !37
  %1276 = select i1 %593, float %1260, float 0.000000e+00, !dbg !37
  %1277 = select i1 %593, float %1261, float 0.000000e+00, !dbg !37
  %1278 = select i1 %593, float %1262, float 0.000000e+00, !dbg !37
  %1279 = select i1 %593, float %1263, float 0.000000e+00, !dbg !37
  %1280 = select i1 %594, float %1264, float 0.000000e+00, !dbg !37
  %1281 = select i1 %594, float %1265, float 0.000000e+00, !dbg !37
  %1282 = select i1 %594, float %1266, float 0.000000e+00, !dbg !37
  %1283 = select i1 %594, float %1267, float 0.000000e+00, !dbg !37
  %1284 = fadd float %1176, %1268, !dbg !75
  %1285 = fadd float %1177, %1269, !dbg !75
  %1286 = fadd float %1178, %1270, !dbg !75
  %1287 = fadd float %1179, %1271, !dbg !75
  %1288 = fadd float %1180, %1272, !dbg !75
  %1289 = fadd float %1181, %1273, !dbg !75
  %1290 = fadd float %1182, %1274, !dbg !75
  %1291 = fadd float %1183, %1275, !dbg !75
  %1292 = fadd float %1184, %1276, !dbg !75
  %1293 = fadd float %1185, %1277, !dbg !75
  %1294 = fadd float %1186, %1278, !dbg !75
  %1295 = fadd float %1187, %1279, !dbg !75
  %1296 = fadd float %1188, %1280, !dbg !75
  %1297 = fadd float %1189, %1281, !dbg !75
  %1298 = fadd float %1190, %1282, !dbg !75
  %1299 = fadd float %1191, %1283, !dbg !75
  %1300 = or i32 %53, 1536, !dbg !76
  %1301 = add i32 %1300, %49, !dbg !77
  %1302 = add i32 %1300, %50, !dbg !77
  %1303 = add i32 %56, 1536, !dbg !77
  %1304 = add i32 %57, 1536, !dbg !77
  %1305 = sext i32 %1301 to i64, !dbg !78
  %1306 = getelementptr i16, ptr addrspace(1) %0, i64 %1305, !dbg !78
  %1307 = sext i32 %1302 to i64, !dbg !78
  %1308 = getelementptr i16, ptr addrspace(1) %0, i64 %1307, !dbg !78
  %1309 = sext i32 %1303 to i64, !dbg !78
  %1310 = getelementptr i16, ptr addrspace(1) %0, i64 %1309, !dbg !78
  %1311 = sext i32 %1304 to i64, !dbg !78
  %1312 = getelementptr i16, ptr addrspace(1) %0, i64 %1311, !dbg !78
  %1313 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %1306, i1 %855, i32 0, i1 %855, i32 0, i1 %855) #2, !dbg !79
  %1314 = extractvalue { i32, i32 } %1313, 0, !dbg !79
  %1315 = extractvalue { i32, i32 } %1313, 1, !dbg !79
  %1316 = trunc i32 %1314 to i16, !dbg !79
  %extelt.offset56 = lshr i32 %1314, 16, !dbg !79
  %1317 = trunc i32 %extelt.offset56 to i16, !dbg !79
  %1318 = trunc i32 %1315 to i16, !dbg !79
  %extelt.offset57 = lshr i32 %1315, 16, !dbg !79
  %1319 = trunc i32 %extelt.offset57 to i16, !dbg !79
  %1320 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %1308, i1 %856, i32 0, i1 %856, i32 0, i1 %856) #2, !dbg !79
  %1321 = extractvalue { i32, i32 } %1320, 0, !dbg !79
  %1322 = extractvalue { i32, i32 } %1320, 1, !dbg !79
  %1323 = trunc i32 %1321 to i16, !dbg !79
  %extelt.offset58 = lshr i32 %1321, 16, !dbg !79
  %1324 = trunc i32 %extelt.offset58 to i16, !dbg !79
  %1325 = trunc i32 %1322 to i16, !dbg !79
  %extelt.offset59 = lshr i32 %1322, 16, !dbg !79
  %1326 = trunc i32 %extelt.offset59 to i16, !dbg !79
  %1327 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %1310, i1 %857, i32 0, i1 %857, i32 0, i1 %857) #2, !dbg !79
  %1328 = extractvalue { i32, i32 } %1327, 0, !dbg !79
  %1329 = extractvalue { i32, i32 } %1327, 1, !dbg !79
  %1330 = trunc i32 %1328 to i16, !dbg !79
  %extelt.offset60 = lshr i32 %1328, 16, !dbg !79
  %1331 = trunc i32 %extelt.offset60 to i16, !dbg !79
  %1332 = trunc i32 %1329 to i16, !dbg !79
  %extelt.offset61 = lshr i32 %1329, 16, !dbg !79
  %1333 = trunc i32 %extelt.offset61 to i16, !dbg !79
  %1334 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %1312, i1 %858, i32 0, i1 %858, i32 0, i1 %858) #2, !dbg !79
  %1335 = extractvalue { i32, i32 } %1334, 0, !dbg !79
  %1336 = extractvalue { i32, i32 } %1334, 1, !dbg !79
  %1337 = trunc i32 %1335 to i16, !dbg !79
  %extelt.offset62 = lshr i32 %1335, 16, !dbg !79
  %1338 = trunc i32 %extelt.offset62 to i16, !dbg !79
  %1339 = trunc i32 %1336 to i16, !dbg !79
  %extelt.offset63 = lshr i32 %1336, 16, !dbg !79
  %1340 = trunc i32 %extelt.offset63 to i16, !dbg !79
  %1341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1316) #2, !dbg !80
  %1342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1317) #2, !dbg !80
  %1343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1318) #2, !dbg !80
  %1344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1319) #2, !dbg !80
  %1345 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1323) #2, !dbg !80
  %1346 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1324) #2, !dbg !80
  %1347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1325) #2, !dbg !80
  %1348 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1326) #2, !dbg !80
  %1349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1330) #2, !dbg !80
  %1350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1331) #2, !dbg !80
  %1351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1332) #2, !dbg !80
  %1352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1333) #2, !dbg !80
  %1353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1337) #2, !dbg !80
  %1354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1338) #2, !dbg !80
  %1355 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1339) #2, !dbg !80
  %1356 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1340) #2, !dbg !80
  %1357 = fmul float %1004, %1341, !dbg !81
  %1358 = fmul float %1005, %1342, !dbg !81
  %1359 = fmul float %1006, %1343, !dbg !81
  %1360 = fmul float %1007, %1344, !dbg !81
  %1361 = fmul float %1008, %1345, !dbg !81
  %1362 = fmul float %1009, %1346, !dbg !81
  %1363 = fmul float %1010, %1347, !dbg !81
  %1364 = fmul float %1011, %1348, !dbg !81
  %1365 = fmul float %1012, %1349, !dbg !81
  %1366 = fmul float %1013, %1350, !dbg !81
  %1367 = fmul float %1014, %1351, !dbg !81
  %1368 = fmul float %1015, %1352, !dbg !81
  %1369 = fmul float %1016, %1353, !dbg !81
  %1370 = fmul float %1017, %1354, !dbg !81
  %1371 = fmul float %1018, %1355, !dbg !81
  %1372 = fmul float %1019, %1356, !dbg !81
  %1373 = select i1 %838, float %1357, float 0.000000e+00, !dbg !37
  %1374 = select i1 %838, float %1358, float 0.000000e+00, !dbg !37
  %1375 = select i1 %838, float %1359, float 0.000000e+00, !dbg !37
  %1376 = select i1 %838, float %1360, float 0.000000e+00, !dbg !37
  %1377 = select i1 %839, float %1361, float 0.000000e+00, !dbg !37
  %1378 = select i1 %839, float %1362, float 0.000000e+00, !dbg !37
  %1379 = select i1 %839, float %1363, float 0.000000e+00, !dbg !37
  %1380 = select i1 %839, float %1364, float 0.000000e+00, !dbg !37
  %1381 = select i1 %840, float %1365, float 0.000000e+00, !dbg !37
  %1382 = select i1 %840, float %1366, float 0.000000e+00, !dbg !37
  %1383 = select i1 %840, float %1367, float 0.000000e+00, !dbg !37
  %1384 = select i1 %840, float %1368, float 0.000000e+00, !dbg !37
  %1385 = select i1 %841, float %1369, float 0.000000e+00, !dbg !37
  %1386 = select i1 %841, float %1370, float 0.000000e+00, !dbg !37
  %1387 = select i1 %841, float %1371, float 0.000000e+00, !dbg !37
  %1388 = select i1 %841, float %1372, float 0.000000e+00, !dbg !37
  %1389 = fadd float %1284, %1373, !dbg !82
  %1390 = fadd float %1285, %1374, !dbg !82
  %1391 = fadd float %1286, %1375, !dbg !82
  %1392 = fadd float %1287, %1376, !dbg !82
  %1393 = fadd float %1288, %1377, !dbg !82
  %1394 = fadd float %1289, %1378, !dbg !82
  %1395 = fadd float %1290, %1379, !dbg !82
  %1396 = fadd float %1291, %1380, !dbg !82
  %1397 = fadd float %1292, %1381, !dbg !82
  %1398 = fadd float %1293, %1382, !dbg !82
  %1399 = fadd float %1294, %1383, !dbg !82
  %1400 = fadd float %1295, %1384, !dbg !82
  %1401 = fadd float %1296, %1385, !dbg !82
  %1402 = fadd float %1297, %1386, !dbg !82
  %1403 = fadd float %1298, %1387, !dbg !82
  %1404 = fadd float %1299, %1388, !dbg !82
  %1405 = fadd float %1160, %1389, !dbg !83
  %1406 = fadd float %1161, %1390, !dbg !83
  %1407 = fadd float %1162, %1391, !dbg !83
  %1408 = fadd float %1163, %1392, !dbg !83
  %1409 = fadd float %1164, %1393, !dbg !83
  %1410 = fadd float %1165, %1394, !dbg !83
  %1411 = fadd float %1166, %1395, !dbg !83
  %1412 = fadd float %1167, %1396, !dbg !83
  %1413 = fadd float %1168, %1397, !dbg !83
  %1414 = fadd float %1169, %1398, !dbg !83
  %1415 = fadd float %1170, %1399, !dbg !83
  %1416 = fadd float %1171, %1400, !dbg !83
  %1417 = fadd float %1172, %1401, !dbg !83
  %1418 = fadd float %1173, %1402, !dbg !83
  %1419 = fadd float %1174, %1403, !dbg !83
  %1420 = fadd float %1175, %1404, !dbg !83
  %1421 = fadd float %1100, %1405, !dbg !84
  %1422 = fadd float %1101, %1406, !dbg !84
  %1423 = fadd float %1102, %1407, !dbg !84
  %1424 = fadd float %1103, %1408, !dbg !84
  %1425 = fadd float %1104, %1409, !dbg !84
  %1426 = fadd float %1105, %1410, !dbg !84
  %1427 = fadd float %1106, %1411, !dbg !84
  %1428 = fadd float %1107, %1412, !dbg !84
  %1429 = fadd float %1108, %1413, !dbg !84
  %1430 = fadd float %1109, %1414, !dbg !84
  %1431 = fadd float %1110, %1415, !dbg !84
  %1432 = fadd float %1111, %1416, !dbg !84
  %1433 = fadd float %1112, %1417, !dbg !84
  %1434 = fadd float %1113, %1418, !dbg !84
  %1435 = fadd float %1114, %1419, !dbg !84
  %1436 = fadd float %1115, %1420, !dbg !84
  %1437 = shl i32 %23, 8, !dbg !85
  %1438 = add i32 %49, %1437, !dbg !86
  %1439 = add i32 %50, %1437, !dbg !86
  %1440 = add i32 %51, %1437, !dbg !86
  %1441 = add i32 %52, %1437, !dbg !86
  %1442 = sext i32 %1438 to i64, !dbg !87
  %1443 = getelementptr float, ptr addrspace(1) %3, i64 %1442, !dbg !87
  %1444 = sext i32 %1439 to i64, !dbg !87
  %1445 = getelementptr float, ptr addrspace(1) %3, i64 %1444, !dbg !87
  %1446 = sext i32 %1440 to i64, !dbg !87
  %1447 = getelementptr float, ptr addrspace(1) %3, i64 %1446, !dbg !87
  %1448 = sext i32 %1441 to i64, !dbg !87
  %1449 = getelementptr float, ptr addrspace(1) %3, i64 %1448, !dbg !87
  %1450 = bitcast float %1421 to i32, !dbg !88
  %1451 = bitcast float %1422 to i32, !dbg !88
  %1452 = bitcast float %1423 to i32, !dbg !88
  %1453 = bitcast float %1424 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1450, i32 %1451, i32 %1452, i32 %1453, ptr addrspace(1) %1443, i1 %66) #2, !dbg !88
  %1454 = bitcast float %1425 to i32, !dbg !88
  %1455 = bitcast float %1426 to i32, !dbg !88
  %1456 = bitcast float %1427 to i32, !dbg !88
  %1457 = bitcast float %1428 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1454, i32 %1455, i32 %1456, i32 %1457, ptr addrspace(1) %1445, i1 %67) #2, !dbg !88
  %1458 = bitcast float %1429 to i32, !dbg !88
  %1459 = bitcast float %1430 to i32, !dbg !88
  %1460 = bitcast float %1431 to i32, !dbg !88
  %1461 = bitcast float %1432 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1458, i32 %1459, i32 %1460, i32 %1461, ptr addrspace(1) %1447, i1 %68) #2, !dbg !88
  %1462 = bitcast float %1433 to i32, !dbg !88
  %1463 = bitcast float %1434 to i32, !dbg !88
  %1464 = bitcast float %1435 to i32, !dbg !88
  %1465 = bitcast float %1436 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1462, i32 %1463, i32 %1464, i32 %1465, ptr addrspace(1) %1449, i1 %69) #2, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cweommahz3d6dh25umjoe2a2air6wu6fu4adabr3tywgaxk6jehq.py", directory: "/tmp/torchinductor_zeus/we")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 23, column: 21, scope: !5)
!14 = !DILocation(line: 24, column: 28, scope: !5)
!15 = !DILocation(line: 24, column: 33, scope: !5)
!16 = !DILocation(line: 25, column: 23, scope: !5)
!17 = !DILocation(line: 26, column: 21, scope: !5)
!18 = !DILocation(line: 28, column: 18, scope: !5)
!19 = !DILocation(line: 30, column: 38, scope: !5)
!20 = !DILocation(line: 30, column: 50, scope: !5)
!21 = !DILocation(line: 30, column: 45, scope: !5)
!22 = !DILocation(line: 30, column: 30, scope: !5)
!23 = !DILocation(line: 30, column: 64, scope: !5)
!24 = !DILocation(line: 30, column: 56, scope: !5)
!25 = !DILocation(line: 30, column: 104, scope: !5)
!26 = !DILocation(line: 31, column: 41, scope: !5)
!27 = !DILocation(line: 31, column: 37, scope: !5)
!28 = !DILocation(line: 31, column: 31, scope: !5)
!29 = !DILocation(line: 31, column: 47, scope: !5)
!30 = !DILocation(line: 32, column: 44, scope: !5)
!31 = !DILocation(line: 32, column: 53, scope: !5)
!32 = !DILocation(line: 32, column: 31, scope: !5)
!33 = !DILocation(line: 32, column: 64, scope: !5)
!34 = !DILocation(line: 32, column: 112, scope: !5)
!35 = !DILocation(line: 35, column: 19, scope: !5)
!36 = !DILocation(line: 36, column: 56, scope: !5)
!37 = !DILocation(line: 0, scope: !5)
!38 = !DILocation(line: 36, column: 122, scope: !5)
!39 = !DILocation(line: 42, column: 19, scope: !5)
!40 = !DILocation(line: 45, column: 20, scope: !5)
!41 = !DILocation(line: 46, column: 46, scope: !5)
!42 = !DILocation(line: 46, column: 55, scope: !5)
!43 = !DILocation(line: 46, column: 31, scope: !5)
!44 = !DILocation(line: 46, column: 74, scope: !5)
!45 = !DILocation(line: 46, column: 82, scope: !5)
!46 = !DILocation(line: 46, column: 66, scope: !5)
!47 = !DILocation(line: 46, column: 133, scope: !5)
!48 = !DILocation(line: 48, column: 40, scope: !5)
!49 = !DILocation(line: 48, column: 46, scope: !5)
!50 = !DILocation(line: 48, column: 31, scope: !5)
!51 = !DILocation(line: 48, column: 56, scope: !5)
!52 = !DILocation(line: 49, column: 20, scope: !5)
!53 = !DILocation(line: 51, column: 13, scope: !5)
!54 = !DILocation(line: 55, column: 20, scope: !5)
!55 = !DILocation(line: 56, column: 19, scope: !5)
!56 = !DILocation(line: 57, column: 52, scope: !5)
!57 = !DILocation(line: 57, column: 31, scope: !5)
!58 = !DILocation(line: 57, column: 79, scope: !5)
!59 = !DILocation(line: 57, column: 63, scope: !5)
!60 = !DILocation(line: 57, column: 130, scope: !5)
!61 = !DILocation(line: 59, column: 37, scope: !5)
!62 = !DILocation(line: 59, column: 43, scope: !5)
!63 = !DILocation(line: 59, column: 31, scope: !5)
!64 = !DILocation(line: 59, column: 53, scope: !5)
!65 = !DILocation(line: 60, column: 20, scope: !5)
!66 = !DILocation(line: 65, column: 20, scope: !5)
!67 = !DILocation(line: 66, column: 19, scope: !5)
!68 = !DILocation(line: 68, column: 64, scope: !5)
!69 = !DILocation(line: 68, column: 130, scope: !5)
!70 = !DILocation(line: 73, column: 20, scope: !5)
!71 = !DILocation(line: 75, column: 63, scope: !5)
!72 = !DILocation(line: 75, column: 130, scope: !5)
!73 = !DILocation(line: 77, column: 20, scope: !5)
!74 = !DILocation(line: 79, column: 13, scope: !5)
!75 = !DILocation(line: 83, column: 20, scope: !5)
!76 = !DILocation(line: 84, column: 44, scope: !5)
!77 = !DILocation(line: 84, column: 53, scope: !5)
!78 = !DILocation(line: 84, column: 31, scope: !5)
!79 = !DILocation(line: 84, column: 64, scope: !5)
!80 = !DILocation(line: 84, column: 131, scope: !5)
!81 = !DILocation(line: 86, column: 20, scope: !5)
!82 = !DILocation(line: 91, column: 20, scope: !5)
!83 = !DILocation(line: 92, column: 20, scope: !5)
!84 = !DILocation(line: 94, column: 20, scope: !5)
!85 = !DILocation(line: 95, column: 45, scope: !5)
!86 = !DILocation(line: 95, column: 40, scope: !5)
!87 = !DILocation(line: 95, column: 25, scope: !5)
!88 = !DILocation(line: 95, column: 58, scope: !5)
!89 = !DILocation(line: 95, column: 4, scope: !5)
