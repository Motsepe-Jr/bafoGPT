module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c256_i64 = arith.constant 256 : i64
    %cst = arith.constant dense<0.000000e+00> : tensor<1x1024xbf16>
    %c128_i64 = arith.constant 128 : i64
    %c-128_i32 = arith.constant -128 : i32
    %c128_i32 = arith.constant 128 : i32
    %cst_0 = arith.constant dense<393216> : tensor<1x1024xi32>
    %cst_1 = arith.constant dense<131072> : tensor<1x1024xi32>
    %cst_2 = arith.constant dense<-131072> : tensor<1x1024xi32>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32>
    %cst_4 = arith.constant dense<262144> : tensor<1x1024xi32>
    %cst_5 = arith.constant dense<256> : tensor<1x1024xi32>
    %cst_6 = arith.constant dense<524288> : tensor<1x1024xi32>
    %cst_7 = arith.constant dense<1024> : tensor<1x1024xi32>
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<1024xi32>) -> tensor<1x1024xi32>
    %4 = tt.splat %1 : (i32) -> tensor<1x1024xi32>
    %5 = arith.addi %4, %3 : tensor<1x1024xi32>
    %6 = tt.get_program_id x : i32
    %7 = arith.cmpi slt, %6, %c256_i32 : i32
    %8 = arith.remsi %5, %cst_7 : tensor<1x1024xi32>
    %9 = arith.divsi %5, %cst_7 : tensor<1x1024xi32>
    %10 = arith.muli %6, %c1024_i32 : i32
    %11 = tt.splat %10 : (i32) -> tensor<1x1024xi32>
    %12 = arith.addi %8, %11 : tensor<1x1024xi32>
    %13 = arith.muli %9, %cst_6 : tensor<1x1024xi32>
    %14 = arith.addi %12, %13 : tensor<1x1024xi32>
    %15 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %16 = tt.addptr %15, %14 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
    %17 = tt.splat %7 : (i1) -> tensor<1x1024xi1>
    %18 = tt.load %16, %17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
    %19 = arith.extf %18 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %20 = arith.muli %8, %cst_5 : tensor<1x1024xi32>
    %21 = tt.splat %6 : (i32) -> tensor<1x1024xi32>
    %22 = arith.addi %21, %20 : tensor<1x1024xi32>
    %23 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %24 = tt.addptr %23, %22 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
    %25 = tt.load %24, %17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
    %26 = arith.extf %25 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %27 = arith.addi %8, %cst_4 : tensor<1x1024xi32>
    %28 = arith.addi %27, %11 : tensor<1x1024xi32>
    %29 = arith.addi %28, %13 : tensor<1x1024xi32>
    %30 = tt.addptr %15, %29 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
    %31 = tt.load %30, %17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
    %32 = arith.extf %31 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %33 = arith.extsi %6 : i32 to i64
    %34 = arith.cmpi sge, %33, %c256_i64 : i64
    %35 = arith.andi %34, %7 : i1
    %36 = tt.splat %35 : (i1) -> tensor<1x1024xi1>
    %37 = tt.load %16, %36, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
    %38 = arith.extf %37 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %39 = tt.splat %34 : (i1) -> tensor<1x1024xi1>
    %40 = arith.select %39, %38, %cst_3 : tensor<1x1024xi1>, tensor<1x1024xf32>
    %41 = arith.mulf %19, %26 : tensor<1x1024xf32>
    %42 = arith.cmpi sge, %33, %c128_i64 : i64
    %43 = arith.addi %8, %cst_2 : tensor<1x1024xi32>
    %44 = arith.addi %43, %11 : tensor<1x1024xi32>
    %45 = arith.addi %44, %13 : tensor<1x1024xi32>
    %46 = tt.addptr %15, %45 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
    %47 = arith.andi %42, %7 : i1
    %48 = tt.splat %47 : (i1) -> tensor<1x1024xi1>
    %49 = tt.load %46, %48, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
    %50 = arith.extf %49 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %51 = arith.addi %6, %c-128_i32 : i32
    %52 = tt.splat %51 : (i32) -> tensor<1x1024xi32>
    %53 = arith.addi %52, %20 : tensor<1x1024xi32>
    %54 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %55 = tt.addptr %54, %53 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
    %56 = tt.load %55, %48, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
    %57 = arith.extf %56 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %58 = arith.mulf %50, %57 : tensor<1x1024xf32>
    %59 = arith.subf %cst_3, %58 : tensor<1x1024xf32>
    %60 = tt.splat %42 : (i1) -> tensor<1x1024xi1>
    %61 = arith.select %60, %59, %cst_3 : tensor<1x1024xi1>, tensor<1x1024xf32>
    %62 = arith.addf %41, %61 : tensor<1x1024xf32>
    %63 = arith.cmpi slt, %33, %c128_i64 : i64
    %64 = arith.addi %8, %cst_1 : tensor<1x1024xi32>
    %65 = arith.addi %64, %11 : tensor<1x1024xi32>
    %66 = arith.addi %65, %13 : tensor<1x1024xi32>
    %67 = tt.addptr %15, %66 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
    %68 = arith.andi %63, %7 : i1
    %69 = tt.splat %68 : (i1) -> tensor<1x1024xi1>
    %70 = tt.load %67, %69, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
    %71 = arith.extf %70 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %72 = arith.addi %6, %c128_i32 : i32
    %73 = tt.splat %72 : (i32) -> tensor<1x1024xi32>
    %74 = arith.addi %73, %20 : tensor<1x1024xi32>
    %75 = tt.addptr %54, %74 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
    %76 = tt.load %75, %69, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
    %77 = arith.extf %76 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %78 = arith.mulf %71, %77 : tensor<1x1024xf32>
    %79 = tt.splat %63 : (i1) -> tensor<1x1024xi1>
    %80 = arith.select %79, %78, %cst_3 : tensor<1x1024xi1>, tensor<1x1024xf32>
    %81 = arith.addf %62, %80 : tensor<1x1024xf32>
    %82 = arith.addf %40, %81 : tensor<1x1024xf32>
    %83 = tt.load %30, %36, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
    %84 = arith.extf %83 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %85 = arith.select %39, %84, %cst_3 : tensor<1x1024xi1>, tensor<1x1024xf32>
    %86 = arith.mulf %32, %26 : tensor<1x1024xf32>
    %87 = tt.load %67, %48, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
    %88 = arith.extf %87 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %89 = arith.mulf %88, %57 : tensor<1x1024xf32>
    %90 = arith.subf %cst_3, %89 : tensor<1x1024xf32>
    %91 = arith.select %60, %90, %cst_3 : tensor<1x1024xi1>, tensor<1x1024xf32>
    %92 = arith.addf %86, %91 : tensor<1x1024xf32>
    %93 = arith.addi %8, %cst_0 : tensor<1x1024xi32>
    %94 = arith.addi %93, %11 : tensor<1x1024xi32>
    %95 = arith.addi %94, %13 : tensor<1x1024xi32>
    %96 = tt.addptr %15, %95 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
    %97 = tt.load %96, %69, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
    %98 = arith.extf %97 : tensor<1x1024xbf16> to tensor<1x1024xf32>
    %99 = arith.mulf %98, %77 : tensor<1x1024xf32>
    %100 = arith.select %79, %99, %cst_3 : tensor<1x1024xi1>, tensor<1x1024xf32>
    %101 = arith.addf %92, %100 : tensor<1x1024xf32>
    %102 = arith.addf %85, %101 : tensor<1x1024xf32>
    %103 = arith.addf %82, %102 : tensor<1x1024xf32>
    %104 = arith.muli %9, %cst_4 : tensor<1x1024xi32>
    %105 = arith.addi %12, %104 : tensor<1x1024xi32>
    %106 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %107 = tt.addptr %106, %105 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
    tt.store %107, %103, %17 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xf32>
    tt.return
  }
}
