module {
  tt.func public @triton__0d1d2d3d4d5de6de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32>
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_4 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c1024_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %5 = arith.muli %0, %c2304_i32 : i32
    %6 = tt.splat %5 : (i32) -> tensor<1x2048xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %8 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %9 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %10 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %11:2 = scf.for %arg7 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg8 = %cst_5, %arg9 = %cst_5) -> (tensor<1x2048xf32>, tensor<1x2048xf32>)  : i32 {
      %28 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32>
      %29 = arith.addi %28, %4 : tensor<1x2048xi32>
      %30 = arith.cmpi slt, %29, %cst_4 : tensor<1x2048xi32>
      %31 = arith.addi %29, %6 : tensor<1x2048xi32>
      %32 = tt.addptr %7, %31 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %33 = arith.andi %30, %8 : tensor<1x2048xi1>
      %34 = tt.load %32, %33, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %35 = arith.extf %34 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %36 = tt.addptr %9, %31 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %37 = tt.load %36, %33, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %38 = tt.addptr %10, %29 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %39 = tt.load %38, %30, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %40 = arith.mulf %35, %35 : tensor<1x2048xf32>
      %41 = arith.addf %arg8, %40 : tensor<1x2048xf32>
      %42 = arith.select %33, %41, %arg8 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %43 = arith.addf %39, %cst_3 : tensor<1x2048xf32>
      %44 = arith.mulf %37, %43 : tensor<1x2048xf32>
      %45 = arith.mulf %44, %35 : tensor<1x2048xf32>
      %46 = arith.addf %arg9, %45 : tensor<1x2048xf32>
      %47 = arith.select %33, %46, %arg9 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %42, %47 : tensor<1x2048xf32>, tensor<1x2048xf32>
    }
    %12 = "tt.reduce"(%11#0) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %28 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %28 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %13 = tt.expand_dims %12 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %14 = tt.addptr %arg3, %0 : !tt.ptr<f32, 1>, i32
    %15 = tt.splat %14 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %15, %13, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %16 = "tt.reduce"(%11#1) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %28 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %28 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %17 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %18 = arith.muli %0, %c2304_i32 : i32
    %19 = tt.splat %18 : (i32) -> tensor<1x2048xi32>
    %20 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %21 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %22 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %23 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %24 = arith.divf %13, %cst_2 : tensor<1x1xf32>
    %25 = arith.addf %24, %cst_1 : tensor<1x1xf32>
    %26 = arith.mulf %17, %cst_0 : tensor<1x1xf32>
    %27 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg7 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %28 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32>
      %29 = arith.addi %28, %4 : tensor<1x2048xi32>
      %30 = arith.cmpi slt, %29, %cst_4 : tensor<1x2048xi32>
      %31 = arith.addi %29, %19 : tensor<1x2048xi32>
      %32 = tt.addptr %20, %31 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %33 = arith.andi %30, %21 : tensor<1x2048xi1>
      %34 = tt.load %32, %33, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %35 = tt.addptr %22, %29 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %36 = tt.load %35, %30, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %37 = tt.addptr %23, %31 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %38 = tt.load %37, %33, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %39 = arith.extf %38 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %40 = arith.addf %36, %cst_3 : tensor<1x2048xf32>
      %41 = arith.mulf %34, %40 : tensor<1x2048xf32>
      %42 = tt.extern_elementwise %25 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %43 = tt.broadcast %42 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %44 = arith.mulf %41, %43 : tensor<1x2048xf32>
      %45 = arith.mulf %42, %42 : tensor<1x1xf32>
      %46 = arith.mulf %45, %42 : tensor<1x1xf32>
      %47 = arith.mulf %26, %46 : tensor<1x1xf32>
      %48 = arith.divf %47, %cst_2 : tensor<1x1xf32>
      %49 = tt.broadcast %48 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %50 = arith.mulf %49, %39 : tensor<1x2048xf32>
      %51 = arith.addf %44, %50 : tensor<1x2048xf32>
      %52 = arith.addf %51, %50 : tensor<1x2048xf32>
      %53 = tt.addptr %27, %31 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %54 = arith.truncf %52 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %53, %54, %33 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
