#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.797884583> : tensor<1024xf32, #blocked>
    %cst_0 = arith.constant dense<4.471500e-02> : tensor<1024xf32, #blocked>
    %c1024_i32 = arith.constant 1024 : i32
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1024xf32, #blocked1>
    %cst_2 = arith.constant dense<5.000000e-01> : tensor<1024xf32, #blocked1>
    %cst_3 = arith.constant dense<4.471500e-02> : tensor<1024xf32, #blocked1>
    %cst_4 = arith.constant dense<0.797884583> : tensor<1024xf32, #blocked1>
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked1>
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %4 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked1>
    %5 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked>
    %6 = arith.addi %4, %2 : tensor<1024xi32, #blocked1>
    %7 = arith.addi %5, %3 : tensor<1024xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>, #blocked1>
    %9 = tt.addptr %8, %6 : tensor<1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1024xi32, #blocked1>
    %10 = tt.load %9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16, #blocked1>
    %11 = triton_gpu.convert_layout %10 : (tensor<1024xbf16, #blocked1>) -> tensor<1024xbf16, #blocked>
    %12 = arith.extf %11 : tensor<1024xbf16, #blocked> to tensor<1024xf32, #blocked>
    %13 = arith.extf %10 : tensor<1024xbf16, #blocked1> to tensor<1024xf32, #blocked1>
    %14 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>, #blocked1>
    %15 = tt.addptr %14, %6 : tensor<1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1024xi32, #blocked1>
    %16 = tt.load %15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16, #blocked1>
    %17 = arith.extf %16 : tensor<1024xbf16, #blocked1> to tensor<1024xf32, #blocked1>
    %18 = arith.mulf %12, %12 : tensor<1024xf32, #blocked>
    %19 = arith.mulf %13, %13 : tensor<1024xf32, #blocked1>
    %20 = arith.mulf %18, %12 : tensor<1024xf32, #blocked>
    %21 = arith.mulf %19, %13 : tensor<1024xf32, #blocked1>
    %22 = arith.mulf %20, %cst_0 : tensor<1024xf32, #blocked>
    %23 = arith.mulf %21, %cst_3 : tensor<1024xf32, #blocked1>
    %24 = arith.addf %12, %22 : tensor<1024xf32, #blocked>
    %25 = arith.addf %13, %23 : tensor<1024xf32, #blocked1>
    %26 = arith.mulf %24, %cst : tensor<1024xf32, #blocked>
    %27 = arith.mulf %25, %cst_4 : tensor<1024xf32, #blocked1>
    %28 = tt.extern_elementwise %26 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1024xf32, #blocked>) -> tensor<1024xf32, #blocked>
    %29 = tt.extern_elementwise %27 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1024xf32, #blocked1>) -> tensor<1024xf32, #blocked1>
    %30 = arith.mulf %13, %cst_2 : tensor<1024xf32, #blocked1>
    %31 = arith.addf %29, %cst_1 : tensor<1024xf32, #blocked1>
    %32 = arith.mulf %30, %31 : tensor<1024xf32, #blocked1>
    %33 = arith.mulf %32, %17 : tensor<1024xf32, #blocked1>
    %34 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1024x!tt.ptr<f32, 1>, #blocked>
    %35 = tt.addptr %34, %7 : tensor<1024x!tt.ptr<f32, 1>, #blocked>, tensor<1024xi32, #blocked>
    tt.store %35, %28 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xf32, #blocked>
    %36 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>, #blocked1>
    %37 = tt.addptr %36, %6 : tensor<1024x!tt.ptr<bf16, 1>, #blocked1>, tensor<1024xi32, #blocked1>
    %38 = arith.truncf %33 : tensor<1024xf32, #blocked1> to tensor<1024xbf16, #blocked1>
    tt.store %37, %38 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xbf16, #blocked1>
    tt.return
  }
}
