; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 5, !dbg !10
  %urem = and i32 %7, 255, !dbg !10
  %9 = shl nuw nsw i32 %urem, 2, !dbg !10
  %10 = or i32 %9, 1024, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %12 = mul i32 %11, 2304, !dbg !12
  %13 = add i32 %9, %12, !dbg !13
  %14 = add i32 %10, %12, !dbg !13
  %15 = sext i32 %13 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !14
  %17 = sext i32 %14 to i64, !dbg !14
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !14
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !15
  %29 = bitcast i32 %25 to float, !dbg !15
  %30 = bitcast i32 %26 to float, !dbg !15
  %31 = bitcast i32 %27 to float, !dbg !15
  %32 = bitcast i32 %28 to float, !dbg !15
  %33 = fmul float %29, %29, !dbg !16
  %34 = fmul float %30, %30, !dbg !16
  %35 = fmul float %31, %31, !dbg !16
  %36 = fmul float %32, %32, !dbg !16
  %37 = or i32 %9, 2048, !dbg !17
  %38 = or i32 %9, 3072, !dbg !17
  %39 = icmp ult i32 %37, 2304, !dbg !18
  %40 = add i32 %37, %12, !dbg !13
  %41 = add i32 %38, %12, !dbg !13
  %42 = sext i32 %40 to i64, !dbg !14
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !14
  %44 = sext i32 %41 to i64, !dbg !14
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !14
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #6, !dbg !15
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !15
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !15
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !15
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !15
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !15
  %52 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !15
  %53 = insertelement <2 x i32> %52, i32 %21, i64 1, !dbg !15
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !15
  %55 = fmul <2 x float> %54, %54, !dbg !16
  %56 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !15
  %57 = insertelement <2 x i32> %56, i32 %48, i64 1, !dbg !15
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !15
  %59 = fmul <2 x float> %58, %58, !dbg !16
  %60 = insertelement <2 x i1> poison, i1 %39, i64 0, !dbg !19
  %61 = shufflevector <2 x i1> %60, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !19
  %62 = select <2 x i1> %61, <2 x float> %59, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %63 = fadd <2 x float> %55, %62, !dbg !19
  %64 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !15
  %65 = insertelement <2 x i32> %64, i32 %22, i64 1, !dbg !15
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !15
  %67 = fmul <2 x float> %66, %66, !dbg !16
  %68 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !15
  %69 = insertelement <2 x i32> %68, i32 %49, i64 1, !dbg !15
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !15
  %71 = fmul <2 x float> %70, %70, !dbg !16
  %72 = select <2 x i1> %61, <2 x float> %71, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %73 = fadd <2 x float> %67, %72, !dbg !19
  %74 = and i32 %7, 31, !dbg !10
  %75 = and i32 %8, 7, !dbg !10
  %shift = shufflevector <2 x float> %63, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %76 = fadd <2 x float> %63, %shift, !dbg !20
  %shift21 = shufflevector <2 x float> %73, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %77 = fadd <2 x float> %shift21, %76, !dbg !20
  %78 = fadd <2 x float> %73, %77, !dbg !20
  %79 = extractelement <2 x float> %78, i64 0, !dbg !20
  %80 = fadd float %33, %79, !dbg !20
  %81 = fadd float %34, %80, !dbg !20
  %82 = fadd float %35, %81, !dbg !20
  %83 = fadd float %36, %82, !dbg !20
  %84 = bitcast float %83 to i32, !dbg !26
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 16, i32 31), !dbg !26
  %86 = bitcast i32 %85 to float, !dbg !26
  %87 = fadd float %83, %86, !dbg !20
  %88 = bitcast float %87 to i32, !dbg !26
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !26
  %90 = bitcast i32 %89 to float, !dbg !26
  %91 = fadd float %87, %90, !dbg !20
  %92 = bitcast float %91 to i32, !dbg !26
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 4, i32 31), !dbg !26
  %94 = bitcast i32 %93 to float, !dbg !26
  %95 = fadd float %91, %94, !dbg !20
  %96 = bitcast float %95 to i32, !dbg !26
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !26
  %98 = bitcast i32 %97 to float, !dbg !26
  %99 = fadd float %95, %98, !dbg !20
  %100 = bitcast float %99 to i32, !dbg !26
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !26
  %102 = bitcast i32 %101 to float, !dbg !26
  %103 = fadd float %99, %102, !dbg !20
  %104 = icmp eq i32 %74, 0, !dbg !26
  %105 = zext nneg i32 %75 to i64, !dbg !26
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i64 %105, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, float %103, i1 %104) #6, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %107 = icmp slt i32 %7, 8, !dbg !26
  %108 = sext i32 %7 to i64, !dbg !26
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i64 %108, !dbg !26
  %110 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %107) #6, !dbg !26
  %111 = bitcast float %110 to i32, !dbg !26
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = fadd float %110, %113, !dbg !20
  %115 = bitcast float %114 to i32, !dbg !26
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !26
  %117 = bitcast i32 %116 to float, !dbg !26
  %118 = fadd float %114, %117, !dbg !20
  %119 = bitcast float %118 to i32, !dbg !26
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !26
  %121 = bitcast i32 %120 to float, !dbg !26
  %122 = fadd float %118, %121, !dbg !20
  %123 = and i32 %7, 7, !dbg !26
  %124 = icmp eq i32 %123, 0, !dbg !26
  %125 = and i1 %107, %124, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, float %122, i1 %125) #6, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %126 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %127 = insertelement <1 x float> undef, float %126, i64 0, !dbg !28
  store <1 x float> %127, ptr addrspace(3) @global_smem, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %128 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !28
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float 2.304000e+03) #6, !dbg !29
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 2.304000e+03) #6, !dbg !29
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 2.304000e+03) #6, !dbg !29
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 2.304000e+03) #6, !dbg !29
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 2.304000e+03) #6, !dbg !29
  %134 = fadd float %129, 0x3EE4F8B580000000, !dbg !30
  %135 = fadd float %130, 0x3EE4F8B580000000, !dbg !30
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %.not.i = icmp eq i32 %136, 0, !dbg !28
  br i1 %.not.i, label %139, label %137, !dbg !28

137:                                              ; preds = %6
  %138 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %134), !dbg !28
  br label %__nv_rsqrtf.exit, !dbg !28

139:                                              ; preds = %6
  %140 = tail call float @llvm.nvvm.rsqrt.approx.f(float %134), !dbg !28
  br label %__nv_rsqrtf.exit, !dbg !28

__nv_rsqrtf.exit:                                 ; preds = %137, %139
  %.0.i = phi float [ %138, %137 ], [ %140, %139 ], !dbg !28
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %.not.i2 = icmp eq i32 %141, 0, !dbg !28
  br i1 %.not.i2, label %144, label %142, !dbg !28

142:                                              ; preds = %__nv_rsqrtf.exit
  %143 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %135), !dbg !28
  br label %__nv_rsqrtf.exit4, !dbg !28

144:                                              ; preds = %__nv_rsqrtf.exit
  %145 = tail call float @llvm.nvvm.rsqrt.approx.f(float %135), !dbg !28
  br label %__nv_rsqrtf.exit4, !dbg !28

__nv_rsqrtf.exit4:                                ; preds = %142, %144
  %.0.i3 = phi float [ %143, %142 ], [ %145, %144 ], !dbg !28
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %149 = sext i32 %11 to i64, !dbg !32
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !32
  %151 = icmp eq i32 %urem, 0, !dbg !33
  %152 = bitcast float %.0.i to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %150, i1 %151) #6, !dbg !33
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !34
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !34
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !34
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !34
  %158 = bitcast i32 %154 to float, !dbg !34
  %159 = bitcast i32 %155 to float, !dbg !34
  %160 = bitcast i32 %156 to float, !dbg !34
  %161 = bitcast i32 %157 to float, !dbg !34
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !34
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !34
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !34
  %167 = bitcast i32 %163 to float, !dbg !34
  %168 = bitcast i32 %164 to float, !dbg !34
  %169 = bitcast i32 %165 to float, !dbg !34
  %170 = bitcast i32 %166 to float, !dbg !34
  %171 = zext nneg i32 %9 to i64, !dbg !35
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !35
  %173 = zext nneg i32 %10 to i64, !dbg !35
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !35
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %172, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !36
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !36
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !36
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !36
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !36
  %180 = bitcast i32 %176 to float, !dbg !36
  %181 = bitcast i32 %177 to float, !dbg !36
  %182 = bitcast i32 %178 to float, !dbg !36
  %183 = bitcast i32 %179 to float, !dbg !36
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %174, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !36
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !36
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !36
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !36
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !36
  %189 = bitcast i32 %185 to float, !dbg !36
  %190 = bitcast i32 %186 to float, !dbg !36
  %191 = bitcast i32 %187 to float, !dbg !36
  %192 = bitcast i32 %188 to float, !dbg !36
  %193 = fmul float %.0.i3, %158, !dbg !37
  %194 = fmul float %.0.i3, %159, !dbg !37
  %195 = fmul float %.0.i3, %160, !dbg !37
  %196 = fmul float %.0.i3, %161, !dbg !37
  %197 = fmul float %.0.i3, %167, !dbg !37
  %198 = fmul float %.0.i3, %168, !dbg !37
  %199 = fmul float %.0.i3, %169, !dbg !37
  %200 = fmul float %.0.i3, %170, !dbg !37
  %201 = fadd float %180, 1.000000e+00, !dbg !38
  %202 = fadd float %181, 1.000000e+00, !dbg !38
  %203 = fadd float %182, 1.000000e+00, !dbg !38
  %204 = fadd float %183, 1.000000e+00, !dbg !38
  %205 = fadd float %189, 1.000000e+00, !dbg !38
  %206 = fadd float %190, 1.000000e+00, !dbg !38
  %207 = fadd float %191, 1.000000e+00, !dbg !38
  %208 = fadd float %192, 1.000000e+00, !dbg !38
  %209 = fmul float %193, %201, !dbg !39
  %210 = fmul float %194, %202, !dbg !39
  %211 = fmul float %195, %203, !dbg !39
  %212 = fmul float %196, %204, !dbg !39
  %213 = fmul float %197, %205, !dbg !39
  %214 = fmul float %198, %206, !dbg !39
  %215 = fmul float %199, %207, !dbg !39
  %216 = fmul float %200, %208, !dbg !39
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !40
  %218 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !40
  %219 = bitcast float %209 to i32, !dbg !41
  %220 = bitcast float %210 to i32, !dbg !41
  %221 = bitcast float %211 to i32, !dbg !41
  %222 = bitcast float %212 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %220, i32 %221, i32 %222, ptr addrspace(1) %217, i1 true) #6, !dbg !41
  %223 = bitcast float %213 to i32, !dbg !41
  %224 = bitcast float %214 to i32, !dbg !41
  %225 = bitcast float %215 to i32, !dbg !41
  %226 = bitcast float %216 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %223, i32 %224, i32 %225, i32 %226, ptr addrspace(1) %218, i1 true) #6, !dbg !41
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #6, !dbg !34
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !34
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !34
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !34
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !34
  %232 = bitcast i32 %228 to float, !dbg !34
  %233 = bitcast i32 %229 to float, !dbg !34
  %234 = bitcast i32 %230 to float, !dbg !34
  %235 = bitcast i32 %231 to float, !dbg !34
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !34
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !34
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !34
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !34
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !34
  %241 = bitcast i32 %237 to float, !dbg !34
  %242 = bitcast i32 %238 to float, !dbg !34
  %243 = bitcast i32 %239 to float, !dbg !34
  %244 = bitcast i32 %240 to float, !dbg !34
  %245 = zext nneg i32 %37 to i64, !dbg !35
  %246 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !35
  %247 = zext nneg i32 %38 to i64, !dbg !35
  %248 = getelementptr float, ptr addrspace(1) %2, i64 %247, !dbg !35
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %246, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #6, !dbg !36
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !36
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !36
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !36
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !36
  %254 = bitcast i32 %250 to float, !dbg !36
  %255 = bitcast i32 %251 to float, !dbg !36
  %256 = bitcast i32 %252 to float, !dbg !36
  %257 = bitcast i32 %253 to float, !dbg !36
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %248, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !36
  %259 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !36
  %260 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !36
  %261 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !36
  %262 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !36
  %263 = bitcast i32 %259 to float, !dbg !36
  %264 = bitcast i32 %260 to float, !dbg !36
  %265 = bitcast i32 %261 to float, !dbg !36
  %266 = bitcast i32 %262 to float, !dbg !36
  %267 = fmul float %.0.i3, %232, !dbg !37
  %268 = fmul float %.0.i3, %233, !dbg !37
  %269 = fmul float %.0.i3, %234, !dbg !37
  %270 = fmul float %.0.i3, %235, !dbg !37
  %271 = fmul float %.0.i3, %241, !dbg !37
  %272 = fmul float %.0.i3, %242, !dbg !37
  %273 = fmul float %.0.i3, %243, !dbg !37
  %274 = fmul float %.0.i3, %244, !dbg !37
  %275 = fadd float %254, 1.000000e+00, !dbg !38
  %276 = fadd float %255, 1.000000e+00, !dbg !38
  %277 = fadd float %256, 1.000000e+00, !dbg !38
  %278 = fadd float %257, 1.000000e+00, !dbg !38
  %279 = fadd float %263, 1.000000e+00, !dbg !38
  %280 = fadd float %264, 1.000000e+00, !dbg !38
  %281 = fadd float %265, 1.000000e+00, !dbg !38
  %282 = fadd float %266, 1.000000e+00, !dbg !38
  %283 = fmul float %267, %275, !dbg !39
  %284 = fmul float %268, %276, !dbg !39
  %285 = fmul float %269, %277, !dbg !39
  %286 = fmul float %270, %278, !dbg !39
  %287 = fmul float %271, %279, !dbg !39
  %288 = fmul float %272, %280, !dbg !39
  %289 = fmul float %273, %281, !dbg !39
  %290 = fmul float %274, %282, !dbg !39
  %291 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !40
  %292 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !40
  %293 = bitcast float %283 to i32, !dbg !41
  %294 = bitcast float %284 to i32, !dbg !41
  %295 = bitcast float %285 to i32, !dbg !41
  %296 = bitcast float %286 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %293, i32 %294, i32 %295, i32 %296, ptr addrspace(1) %291, i1 %39) #6, !dbg !41
  %297 = bitcast float %287 to i32, !dbg !41
  %298 = bitcast float %288 to i32, !dbg !41
  %299 = bitcast float %289 to i32, !dbg !41
  %300 = bitcast float %290 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %297, i32 %298, i32 %299, i32 %300, ptr addrspace(1) %292, i1 false) #6, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cwxxqjiutkjjxh7vtevxbudz4x6awr7ne42vg2jhnxlk6pzx5d5y.py", directory: "/tmp/torchinductor_zeus/wx")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 32, column: 22, scope: !7)
!17 = !DILocation(line: 28, column: 27, scope: !7)
!18 = !DILocation(line: 29, column: 25, scope: !7)
!19 = !DILocation(line: 35, column: 38, scope: !7)
!20 = !DILocation(line: 233, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 243, column: 36, scope: !21, inlinedAt: !25)
!25 = !DILocation(line: 36, column: 25, scope: !21)
!26 = !DILocation(line: 243, column: 36, scope: !23, inlinedAt: !27)
!27 = !DILocation(line: 36, column: 25, scope: !23)
!28 = !DILocation(line: 41, column: 25, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 4, scope: !7)
!32 = !DILocation(line: 43, column: 28, scope: !7)
!33 = !DILocation(line: 43, column: 39, scope: !7)
!34 = !DILocation(line: 48, column: 52, scope: !7)
!35 = !DILocation(line: 49, column: 35, scope: !7)
!36 = !DILocation(line: 49, column: 40, scope: !7)
!37 = !DILocation(line: 50, column: 24, scope: !7)
!38 = !DILocation(line: 52, column: 24, scope: !7)
!39 = !DILocation(line: 53, column: 24, scope: !7)
!40 = !DILocation(line: 54, column: 29, scope: !7)
!41 = !DILocation(line: 54, column: 53, scope: !7)
!42 = !DILocation(line: 44, column: 4, scope: !7)
