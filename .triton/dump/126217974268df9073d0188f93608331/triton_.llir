; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5de6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %urem = and i32 %8, 255, !dbg !10
  %9 = shl nuw nsw i32 %urem, 3, !dbg !10
  %10 = or i32 %9, 4, !dbg !10
  %11 = shl nuw nsw i32 %urem, 2, !dbg !10
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %13 = mul i32 %12, 2304, !dbg !12
  %14 = lshr i32 %8, 5, !dbg !10
  %15 = add i32 %9, %13, !dbg !13
  %16 = add i32 %10, %13, !dbg !13
  %17 = sext i32 %15 to i64, !dbg !14
  %18 = getelementptr i16, ptr addrspace(1) %1, i64 %17, !dbg !14
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !15
  %24 = trunc i32 %20 to i16, !dbg !15
  %extelt.offset19 = lshr i32 %20, 16, !dbg !15
  %25 = trunc i32 %extelt.offset19 to i16, !dbg !15
  %26 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset20 = lshr i32 %21, 16, !dbg !15
  %27 = trunc i32 %extelt.offset20 to i16, !dbg !15
  %28 = trunc i32 %22 to i16, !dbg !15
  %extelt.offset21 = lshr i32 %22, 16, !dbg !15
  %29 = trunc i32 %extelt.offset21 to i16, !dbg !15
  %30 = trunc i32 %23 to i16, !dbg !15
  %extelt.offset22 = lshr i32 %23, 16, !dbg !15
  %31 = trunc i32 %extelt.offset22 to i16, !dbg !15
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !16
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !16
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !16
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !16
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !16
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !16
  %40 = zext nneg i32 %9 to i64, !dbg !17
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !17
  %42 = zext nneg i32 %10 to i64, !dbg !17
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !17
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !18
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !18
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !18
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !18
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !18
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !18
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !18
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !19
  %55 = sext i32 %16 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !19
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !20
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !20
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !20
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !20
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !20
  %67 = insertelement <8 x i32> poison, i32 %45, i64 0, !dbg !18
  %68 = insertelement <8 x i32> %67, i32 %46, i64 1, !dbg !18
  %69 = insertelement <8 x i32> %68, i32 %47, i64 2, !dbg !18
  %70 = insertelement <8 x i32> %69, i32 %48, i64 3, !dbg !18
  %71 = insertelement <8 x i32> %70, i32 %50, i64 4, !dbg !18
  %72 = insertelement <8 x i32> %71, i32 %51, i64 5, !dbg !18
  %73 = insertelement <8 x i32> %72, i32 %52, i64 6, !dbg !18
  %74 = insertelement <8 x i32> %73, i32 %53, i64 7, !dbg !18
  %75 = bitcast <8 x i32> %74 to <8 x float>, !dbg !18
  %76 = insertelement <8 x i32> poison, i32 %58, i64 0, !dbg !20
  %77 = insertelement <8 x i32> %76, i32 %59, i64 1, !dbg !20
  %78 = insertelement <8 x i32> %77, i32 %60, i64 2, !dbg !20
  %79 = insertelement <8 x i32> %78, i32 %61, i64 3, !dbg !20
  %80 = insertelement <8 x i32> %79, i32 %63, i64 4, !dbg !20
  %81 = insertelement <8 x i32> %80, i32 %64, i64 5, !dbg !20
  %82 = insertelement <8 x i32> %81, i32 %65, i64 6, !dbg !20
  %83 = insertelement <8 x i32> %82, i32 %66, i64 7, !dbg !20
  %84 = bitcast <8 x i32> %83 to <8 x float>, !dbg !20
  %85 = fadd <8 x float> %75, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %86 = insertelement <8 x float> poison, float %32, i64 0, !dbg !22
  %87 = insertelement <8 x float> %86, float %33, i64 1, !dbg !22
  %88 = insertelement <8 x float> %87, float %34, i64 2, !dbg !22
  %89 = insertelement <8 x float> %88, float %35, i64 3, !dbg !22
  %90 = insertelement <8 x float> %89, float %36, i64 4, !dbg !22
  %91 = insertelement <8 x float> %90, float %37, i64 5, !dbg !22
  %92 = insertelement <8 x float> %91, float %38, i64 6, !dbg !22
  %93 = insertelement <8 x float> %92, float %39, i64 7, !dbg !22
  %94 = fmul <8 x float> %93, %85, !dbg !22
  %95 = fmul <8 x float> %94, %84, !dbg !23
  %96 = fadd <8 x float> %95, zeroinitializer, !dbg !24
  %97 = or i32 %9, 2048, !dbg !25
  %98 = or i32 %9, 2052, !dbg !25
  %99 = icmp ult i32 %97, 2304, !dbg !26
  %100 = add i32 %97, %13, !dbg !13
  %101 = add i32 %98, %13, !dbg !13
  %102 = sext i32 %100 to i64, !dbg !14
  %103 = getelementptr i16, ptr addrspace(1) %1, i64 %102, !dbg !14
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #6, !dbg !15
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !15
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !15
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !15
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !15
  %109 = trunc i32 %105 to i16, !dbg !15
  %extelt.offset19.1 = lshr i32 %105, 16, !dbg !15
  %110 = trunc i32 %extelt.offset19.1 to i16, !dbg !15
  %111 = trunc i32 %106 to i16, !dbg !15
  %extelt.offset20.1 = lshr i32 %106, 16, !dbg !15
  %112 = trunc i32 %extelt.offset20.1 to i16, !dbg !15
  %113 = trunc i32 %107 to i16, !dbg !15
  %extelt.offset21.1 = lshr i32 %107, 16, !dbg !15
  %114 = trunc i32 %extelt.offset21.1 to i16, !dbg !15
  %115 = trunc i32 %108 to i16, !dbg !15
  %extelt.offset22.1 = lshr i32 %108, 16, !dbg !15
  %116 = trunc i32 %extelt.offset22.1 to i16, !dbg !15
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %109) #6, !dbg !16
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #6, !dbg !16
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %111) #6, !dbg !16
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #6, !dbg !16
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #6, !dbg !16
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #6, !dbg !16
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #6, !dbg !16
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #6, !dbg !16
  %125 = zext nneg i32 %97 to i64, !dbg !17
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !17
  %127 = zext nneg i32 %98 to i64, !dbg !17
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !17
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #6, !dbg !18
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !18
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !18
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !18
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !18
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #6, !dbg !18
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !18
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !18
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !18
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !18
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !19
  %140 = sext i32 %101 to i64, !dbg !19
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %140, !dbg !19
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #6, !dbg !20
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !20
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !20
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !20
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !20
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %141, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #6, !dbg !20
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !20
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !20
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !20
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !20
  %152 = insertelement <8 x i32> poison, i32 %130, i64 0, !dbg !18
  %153 = insertelement <8 x i32> %152, i32 %131, i64 1, !dbg !18
  %154 = insertelement <8 x i32> %153, i32 %132, i64 2, !dbg !18
  %155 = insertelement <8 x i32> %154, i32 %133, i64 3, !dbg !18
  %156 = insertelement <8 x i32> %155, i32 %135, i64 4, !dbg !18
  %157 = insertelement <8 x i32> %156, i32 %136, i64 5, !dbg !18
  %158 = insertelement <8 x i32> %157, i32 %137, i64 6, !dbg !18
  %159 = insertelement <8 x i32> %158, i32 %138, i64 7, !dbg !18
  %160 = bitcast <8 x i32> %159 to <8 x float>, !dbg !18
  %161 = insertelement <8 x i32> poison, i32 %143, i64 0, !dbg !20
  %162 = insertelement <8 x i32> %161, i32 %144, i64 1, !dbg !20
  %163 = insertelement <8 x i32> %162, i32 %145, i64 2, !dbg !20
  %164 = insertelement <8 x i32> %163, i32 %146, i64 3, !dbg !20
  %165 = insertelement <8 x i32> %164, i32 %148, i64 4, !dbg !20
  %166 = insertelement <8 x i32> %165, i32 %149, i64 5, !dbg !20
  %167 = insertelement <8 x i32> %166, i32 %150, i64 6, !dbg !20
  %168 = insertelement <8 x i32> %167, i32 %151, i64 7, !dbg !20
  %169 = bitcast <8 x i32> %168 to <8 x float>, !dbg !20
  %170 = fadd <8 x float> %160, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %171 = insertelement <8 x float> poison, float %117, i64 0, !dbg !22
  %172 = insertelement <8 x float> %171, float %118, i64 1, !dbg !22
  %173 = insertelement <8 x float> %172, float %119, i64 2, !dbg !22
  %174 = insertelement <8 x float> %173, float %120, i64 3, !dbg !22
  %175 = insertelement <8 x float> %174, float %121, i64 4, !dbg !22
  %176 = insertelement <8 x float> %175, float %122, i64 5, !dbg !22
  %177 = insertelement <8 x float> %176, float %123, i64 6, !dbg !22
  %178 = insertelement <8 x float> %177, float %124, i64 7, !dbg !22
  %179 = fmul <8 x float> %178, %170, !dbg !22
  %180 = fmul <8 x float> %179, %169, !dbg !23
  %181 = insertelement <8 x i1> poison, i1 %99, i64 0, !dbg !24
  %182 = shufflevector <8 x i1> %181, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !24
  %183 = select <8 x i1> %182, <8 x float> %180, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !24
  %184 = fadd <8 x float> %96, %183, !dbg !24
  %185 = and i32 %8, 31, !dbg !10
  %186 = and i32 %14, 7, !dbg !10
  %187 = or i32 %11, 1024, !dbg !10
  %shift = shufflevector <8 x float> %184, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %188 = fadd <8 x float> %184, %shift, !dbg !27
  %shift65 = shufflevector <8 x float> %184, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %189 = fadd <8 x float> %shift65, %188, !dbg !27
  %shift66 = shufflevector <8 x float> %184, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %190 = fadd <8 x float> %shift66, %189, !dbg !27
  %shift67 = shufflevector <8 x float> %184, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %191 = fadd <8 x float> %shift67, %190, !dbg !27
  %shift68 = shufflevector <8 x float> %184, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %192 = fadd <8 x float> %shift68, %191, !dbg !27
  %shift69 = shufflevector <8 x float> %184, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %193 = fadd <8 x float> %shift69, %192, !dbg !27
  %shift70 = shufflevector <8 x float> %184, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %194 = fadd <8 x float> %shift70, %193, !dbg !27
  %195 = extractelement <8 x float> %194, i64 0, !dbg !27
  %196 = bitcast float %195 to i32, !dbg !33
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 16, i32 31), !dbg !33
  %198 = bitcast i32 %197 to float, !dbg !33
  %199 = fadd float %195, %198, !dbg !27
  %200 = bitcast float %199 to i32, !dbg !33
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 8, i32 31), !dbg !33
  %202 = bitcast i32 %201 to float, !dbg !33
  %203 = fadd float %199, %202, !dbg !27
  %204 = bitcast float %203 to i32, !dbg !33
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 4, i32 31), !dbg !33
  %206 = bitcast i32 %205 to float, !dbg !33
  %207 = fadd float %203, %206, !dbg !27
  %208 = bitcast float %207 to i32, !dbg !33
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 2, i32 31), !dbg !33
  %210 = bitcast i32 %209 to float, !dbg !33
  %211 = fadd float %207, %210, !dbg !27
  %212 = bitcast float %211 to i32, !dbg !33
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !33
  %214 = bitcast i32 %213 to float, !dbg !33
  %215 = fadd float %211, %214, !dbg !27
  %216 = icmp eq i32 %185, 0, !dbg !33
  %217 = zext nneg i32 %186 to i64, !dbg !33
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i64 %217, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, float %215, i1 %216) #6, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %219 = icmp slt i32 %8, 8, !dbg !33
  %220 = sext i32 %8 to i64, !dbg !33
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i64 %220, !dbg !33
  %222 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %221, i1 %219) #6, !dbg !33
  %223 = bitcast float %222 to i32, !dbg !33
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 4, i32 31), !dbg !33
  %225 = bitcast i32 %224 to float, !dbg !33
  %226 = fadd float %222, %225, !dbg !27
  %227 = bitcast float %226 to i32, !dbg !33
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 2, i32 31), !dbg !33
  %229 = bitcast i32 %228 to float, !dbg !33
  %230 = fadd float %226, %229, !dbg !27
  %231 = bitcast float %230 to i32, !dbg !33
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !33
  %233 = bitcast i32 %232 to float, !dbg !33
  %234 = fadd float %230, %233, !dbg !27
  %235 = and i32 %8, 7, !dbg !33
  %236 = icmp eq i32 %235, 0, !dbg !33
  %237 = and i1 %219, %236, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, float %234, i1 %237) #6, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %238 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !33
  %239 = sext i32 %12 to i64, !dbg !35
  %240 = getelementptr float, ptr addrspace(1) %4, i64 %239, !dbg !35
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #6, !dbg !36
  %242 = bitcast i32 %241 to float, !dbg !36
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #6, !dbg !36
  %244 = bitcast i32 %243 to float, !dbg !36
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #6, !dbg !36
  %246 = bitcast i32 %245 to float, !dbg !36
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #6, !dbg !36
  %248 = bitcast i32 %247 to float, !dbg !36
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #6, !dbg !36
  %250 = bitcast i32 %249 to float, !dbg !36
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #6, !dbg !36
  %252 = bitcast i32 %251 to float, !dbg !36
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #6, !dbg !36
  %254 = bitcast i32 %253 to float, !dbg !36
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #6, !dbg !36
  %256 = bitcast i32 %255 to float, !dbg !36
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float 2.304000e+03) #6, !dbg !37
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float 2.304000e+03) #6, !dbg !37
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float 2.304000e+03) #6, !dbg !37
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float 2.304000e+03) #6, !dbg !37
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float 2.304000e+03) #6, !dbg !37
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float 2.304000e+03) #6, !dbg !37
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float 2.304000e+03) #6, !dbg !37
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float 2.304000e+03) #6, !dbg !37
  %265 = fadd float %257, 0x3EE4F8B580000000, !dbg !38
  %266 = fadd float %258, 0x3EE4F8B580000000, !dbg !38
  %267 = fadd float %259, 0x3EE4F8B580000000, !dbg !38
  %268 = fadd float %260, 0x3EE4F8B580000000, !dbg !38
  %269 = fadd float %261, 0x3EE4F8B580000000, !dbg !38
  %270 = fadd float %262, 0x3EE4F8B580000000, !dbg !38
  %271 = fadd float %263, 0x3EE4F8B580000000, !dbg !38
  %272 = fadd float %264, 0x3EE4F8B580000000, !dbg !38
  %273 = fmul float %238, -5.000000e-01, !dbg !39
  %274 = zext nneg i32 %9 to i64
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i64 %274
  %276 = zext nneg i32 %11 to i64
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i64 %276
  %278 = zext nneg i32 %187 to i64
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i64 %278
  %280 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %277, i64 0, i64 1
  %281 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %277, i64 0, i64 2
  %282 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %277, i64 0, i64 3
  br label %283, !dbg !40

283:                                              ; preds = %7, %__nv_rsqrtf.exit43
  %284 = phi i1 [ true, %7 ], [ false, %__nv_rsqrtf.exit43 ]
  %285 = phi i32 [ 0, %7 ], [ 2048, %__nv_rsqrtf.exit43 ]
  %286 = or i32 %285, %9, !dbg !41
  %287 = or i32 %285, %10, !dbg !41
  %288 = or i32 %285, %11, !dbg !41
  %289 = or i32 %285, %187, !dbg !41
  %290 = icmp ult i32 %286, 2304, !dbg !42
  %291 = icmp ult i32 %288, 2304, !dbg !42
  %292 = icmp ult i32 %289, 2304, !dbg !42
  %293 = add i32 %286, %13, !dbg !43
  %294 = add i32 %287, %13, !dbg !43
  %295 = add i32 %288, %13, !dbg !43
  %296 = add i32 %289, %13, !dbg !43
  %297 = sext i32 %293 to i64, !dbg !44
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !44
  %299 = sext i32 %294 to i64, !dbg !44
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %299, !dbg !44
  %301 = sext i32 %295 to i64, !dbg !44
  %302 = getelementptr float, ptr addrspace(1) %0, i64 %301, !dbg !44
  %303 = sext i32 %296 to i64, !dbg !44
  %304 = getelementptr float, ptr addrspace(1) %0, i64 %303, !dbg !44
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %298, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290) #6, !dbg !45
  %306 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !45
  %307 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !45
  %308 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !45
  %309 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !45
  %310 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %300, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290) #6, !dbg !45
  %311 = extractvalue { i32, i32, i32, i32 } %310, 0, !dbg !45
  %312 = extractvalue { i32, i32, i32, i32 } %310, 1, !dbg !45
  %313 = extractvalue { i32, i32, i32, i32 } %310, 2, !dbg !45
  %314 = extractvalue { i32, i32, i32, i32 } %310, 3, !dbg !45
  %315 = insertelement <8 x i32> poison, i32 %306, i64 0, !dbg !45
  %316 = insertelement <8 x i32> %315, i32 %307, i64 1, !dbg !45
  %317 = insertelement <8 x i32> %316, i32 %308, i64 2, !dbg !45
  %318 = insertelement <8 x i32> %317, i32 %309, i64 3, !dbg !45
  %319 = insertelement <8 x i32> %318, i32 %311, i64 4, !dbg !45
  %320 = insertelement <8 x i32> %319, i32 %312, i64 5, !dbg !45
  %321 = insertelement <8 x i32> %320, i32 %313, i64 6, !dbg !45
  %322 = insertelement <8 x i32> %321, i32 %314, i64 7, !dbg !45
  %323 = bitcast <8 x i32> %322 to <8 x float>, !dbg !45
  %324 = getelementptr i16, ptr addrspace(1) %1, i64 %297, !dbg !46
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %324, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290) #6, !dbg !47
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !47
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !47
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !47
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !47
  %330 = trunc i32 %326 to i16, !dbg !47
  %extelt.offset = lshr i32 %326, 16, !dbg !47
  %331 = trunc i32 %extelt.offset to i16, !dbg !47
  %332 = trunc i32 %327 to i16, !dbg !47
  %extelt.offset2 = lshr i32 %327, 16, !dbg !47
  %333 = trunc i32 %extelt.offset2 to i16, !dbg !47
  %334 = trunc i32 %328 to i16, !dbg !47
  %extelt.offset3 = lshr i32 %328, 16, !dbg !47
  %335 = trunc i32 %extelt.offset3 to i16, !dbg !47
  %336 = trunc i32 %329 to i16, !dbg !47
  %extelt.offset4 = lshr i32 %329, 16, !dbg !47
  %337 = trunc i32 %extelt.offset4 to i16, !dbg !47
  %338 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %330) #6, !dbg !48
  %339 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %331) #6, !dbg !48
  %340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %332) #6, !dbg !48
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %333) #6, !dbg !48
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %334) #6, !dbg !48
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %335) #6, !dbg !48
  %344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %336) #6, !dbg !48
  %345 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #6, !dbg !48
  %346 = zext nneg i32 %286 to i64, !dbg !49
  %347 = getelementptr float, ptr addrspace(1) %2, i64 %346, !dbg !49
  %348 = zext nneg i32 %287 to i64, !dbg !49
  %349 = getelementptr float, ptr addrspace(1) %2, i64 %348, !dbg !49
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %347, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290) #6, !dbg !50
  %351 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !50
  %352 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !50
  %353 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !50
  %354 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !50
  %355 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %349, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290) #6, !dbg !50
  %356 = extractvalue { i32, i32, i32, i32 } %355, 0, !dbg !50
  %357 = extractvalue { i32, i32, i32, i32 } %355, 1, !dbg !50
  %358 = extractvalue { i32, i32, i32, i32 } %355, 2, !dbg !50
  %359 = extractvalue { i32, i32, i32, i32 } %355, 3, !dbg !50
  %360 = getelementptr float, ptr addrspace(1) %3, i64 %297, !dbg !51
  %361 = getelementptr float, ptr addrspace(1) %3, i64 %299, !dbg !51
  %362 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %360, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290) #6, !dbg !52
  %363 = extractvalue { i32, i32, i32, i32 } %362, 0, !dbg !52
  %364 = extractvalue { i32, i32, i32, i32 } %362, 1, !dbg !52
  %365 = extractvalue { i32, i32, i32, i32 } %362, 2, !dbg !52
  %366 = extractvalue { i32, i32, i32, i32 } %362, 3, !dbg !52
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %361, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290, i32 0, i1 %290) #6, !dbg !52
  %368 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !52
  %369 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !52
  %370 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !52
  %371 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !52
  %372 = insertelement <8 x i32> poison, i32 %363, i64 0, !dbg !52
  %373 = insertelement <8 x i32> %372, i32 %364, i64 1, !dbg !52
  %374 = insertelement <8 x i32> %373, i32 %365, i64 2, !dbg !52
  %375 = insertelement <8 x i32> %374, i32 %366, i64 3, !dbg !52
  %376 = insertelement <8 x i32> %375, i32 %368, i64 4, !dbg !52
  %377 = insertelement <8 x i32> %376, i32 %369, i64 5, !dbg !52
  %378 = insertelement <8 x i32> %377, i32 %370, i64 6, !dbg !52
  %379 = insertelement <8 x i32> %378, i32 %371, i64 7, !dbg !52
  %380 = bitcast <8 x i32> %379 to <8 x float>, !dbg !52
  %381 = insertelement <8 x i32> poison, i32 %351, i64 0, !dbg !50
  %382 = insertelement <8 x i32> %381, i32 %352, i64 1, !dbg !50
  %383 = insertelement <8 x i32> %382, i32 %353, i64 2, !dbg !50
  %384 = insertelement <8 x i32> %383, i32 %354, i64 3, !dbg !50
  %385 = insertelement <8 x i32> %384, i32 %356, i64 4, !dbg !50
  %386 = insertelement <8 x i32> %385, i32 %357, i64 5, !dbg !50
  %387 = insertelement <8 x i32> %386, i32 %358, i64 6, !dbg !50
  %388 = insertelement <8 x i32> %387, i32 %359, i64 7, !dbg !50
  %389 = bitcast <8 x i32> %388 to <8 x float>, !dbg !50
  %390 = fadd <8 x float> %389, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !53
  %391 = insertelement <8 x float> poison, float %338, i64 0, !dbg !54
  %392 = insertelement <8 x float> %391, float %339, i64 1, !dbg !54
  %393 = insertelement <8 x float> %392, float %340, i64 2, !dbg !54
  %394 = insertelement <8 x float> %393, float %341, i64 3, !dbg !54
  %395 = insertelement <8 x float> %394, float %342, i64 4, !dbg !54
  %396 = insertelement <8 x float> %395, float %343, i64 5, !dbg !54
  %397 = insertelement <8 x float> %396, float %344, i64 6, !dbg !54
  %398 = insertelement <8 x float> %397, float %345, i64 7, !dbg !54
  %399 = fmul <8 x float> %398, %390, !dbg !54
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i = icmp eq i32 %400, 0, !dbg !55
  br i1 %.not.i, label %403, label %401, !dbg !55

401:                                              ; preds = %283
  %402 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %265), !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !55

403:                                              ; preds = %283
  %404 = tail call float @llvm.nvvm.rsqrt.approx.f(float %265), !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !55

__nv_rsqrtf.exit:                                 ; preds = %401, %403
  %.0.i = phi float [ %402, %401 ], [ %404, %403 ], !dbg !55
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i23 = icmp eq i32 %405, 0, !dbg !55
  br i1 %.not.i23, label %408, label %406, !dbg !55

406:                                              ; preds = %__nv_rsqrtf.exit
  %407 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %266), !dbg !55
  br label %__nv_rsqrtf.exit25, !dbg !55

408:                                              ; preds = %__nv_rsqrtf.exit
  %409 = tail call float @llvm.nvvm.rsqrt.approx.f(float %266), !dbg !55
  br label %__nv_rsqrtf.exit25, !dbg !55

__nv_rsqrtf.exit25:                               ; preds = %406, %408
  %.0.i24 = phi float [ %407, %406 ], [ %409, %408 ], !dbg !55
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i26 = icmp eq i32 %410, 0, !dbg !55
  br i1 %.not.i26, label %413, label %411, !dbg !55

411:                                              ; preds = %__nv_rsqrtf.exit25
  %412 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %267), !dbg !55
  br label %__nv_rsqrtf.exit28, !dbg !55

413:                                              ; preds = %__nv_rsqrtf.exit25
  %414 = tail call float @llvm.nvvm.rsqrt.approx.f(float %267), !dbg !55
  br label %__nv_rsqrtf.exit28, !dbg !55

__nv_rsqrtf.exit28:                               ; preds = %411, %413
  %.0.i27 = phi float [ %412, %411 ], [ %414, %413 ], !dbg !55
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i29 = icmp eq i32 %415, 0, !dbg !55
  br i1 %.not.i29, label %418, label %416, !dbg !55

416:                                              ; preds = %__nv_rsqrtf.exit28
  %417 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %268), !dbg !55
  br label %__nv_rsqrtf.exit31, !dbg !55

418:                                              ; preds = %__nv_rsqrtf.exit28
  %419 = tail call float @llvm.nvvm.rsqrt.approx.f(float %268), !dbg !55
  br label %__nv_rsqrtf.exit31, !dbg !55

__nv_rsqrtf.exit31:                               ; preds = %416, %418
  %.0.i30 = phi float [ %417, %416 ], [ %419, %418 ], !dbg !55
  %420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i32 = icmp eq i32 %420, 0, !dbg !55
  br i1 %.not.i32, label %423, label %421, !dbg !55

421:                                              ; preds = %__nv_rsqrtf.exit31
  %422 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %269), !dbg !55
  br label %__nv_rsqrtf.exit34, !dbg !55

423:                                              ; preds = %__nv_rsqrtf.exit31
  %424 = tail call float @llvm.nvvm.rsqrt.approx.f(float %269), !dbg !55
  br label %__nv_rsqrtf.exit34, !dbg !55

__nv_rsqrtf.exit34:                               ; preds = %421, %423
  %.0.i33 = phi float [ %422, %421 ], [ %424, %423 ], !dbg !55
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i35 = icmp eq i32 %425, 0, !dbg !55
  br i1 %.not.i35, label %428, label %426, !dbg !55

426:                                              ; preds = %__nv_rsqrtf.exit34
  %427 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %270), !dbg !55
  br label %__nv_rsqrtf.exit37, !dbg !55

428:                                              ; preds = %__nv_rsqrtf.exit34
  %429 = tail call float @llvm.nvvm.rsqrt.approx.f(float %270), !dbg !55
  br label %__nv_rsqrtf.exit37, !dbg !55

__nv_rsqrtf.exit37:                               ; preds = %426, %428
  %.0.i36 = phi float [ %427, %426 ], [ %429, %428 ], !dbg !55
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i38 = icmp eq i32 %430, 0, !dbg !55
  br i1 %.not.i38, label %433, label %431, !dbg !55

431:                                              ; preds = %__nv_rsqrtf.exit37
  %432 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %271), !dbg !55
  br label %__nv_rsqrtf.exit40, !dbg !55

433:                                              ; preds = %__nv_rsqrtf.exit37
  %434 = tail call float @llvm.nvvm.rsqrt.approx.f(float %271), !dbg !55
  br label %__nv_rsqrtf.exit40, !dbg !55

__nv_rsqrtf.exit40:                               ; preds = %431, %433
  %.0.i39 = phi float [ %432, %431 ], [ %434, %433 ], !dbg !55
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i41 = icmp eq i32 %435, 0, !dbg !55
  br i1 %.not.i41, label %438, label %436, !dbg !55

436:                                              ; preds = %__nv_rsqrtf.exit40
  %437 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %272), !dbg !55
  br label %__nv_rsqrtf.exit43, !dbg !55

438:                                              ; preds = %__nv_rsqrtf.exit40
  %439 = tail call float @llvm.nvvm.rsqrt.approx.f(float %272), !dbg !55
  br label %__nv_rsqrtf.exit43, !dbg !55

__nv_rsqrtf.exit43:                               ; preds = %436, %438
  %.0.i42 = phi float [ %437, %436 ], [ %439, %438 ], !dbg !55
  %440 = insertelement <8 x float> poison, float %.0.i, i64 0, !dbg !56
  %441 = shufflevector <8 x float> %440, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !56
  %442 = fmul <8 x float> %399, %441, !dbg !56
  %443 = fmul float %.0.i, %.0.i, !dbg !57
  %444 = fmul float %.0.i24, %.0.i24, !dbg !57
  %445 = fmul float %.0.i27, %.0.i27, !dbg !57
  %446 = fmul float %.0.i30, %.0.i30, !dbg !57
  %447 = fmul float %.0.i33, %.0.i33, !dbg !57
  %448 = fmul float %.0.i36, %.0.i36, !dbg !57
  %449 = fmul float %.0.i39, %.0.i39, !dbg !57
  %450 = fmul float %.0.i42, %.0.i42, !dbg !57
  %451 = fmul float %.0.i, %443, !dbg !58
  %452 = fmul float %.0.i24, %444, !dbg !58
  %453 = fmul float %.0.i27, %445, !dbg !58
  %454 = fmul float %.0.i30, %446, !dbg !58
  %455 = fmul float %.0.i33, %447, !dbg !58
  %456 = fmul float %.0.i36, %448, !dbg !58
  %457 = fmul float %.0.i39, %449, !dbg !58
  %458 = fmul float %.0.i42, %450, !dbg !58
  %459 = fmul float %273, %451, !dbg !59
  %460 = fmul float %273, %452, !dbg !59
  %461 = fmul float %273, %453, !dbg !59
  %462 = fmul float %273, %454, !dbg !59
  %463 = fmul float %273, %455, !dbg !59
  %464 = fmul float %273, %456, !dbg !59
  %465 = fmul float %273, %457, !dbg !59
  %466 = fmul float %273, %458, !dbg !59
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %459, float 2.304000e+03) #6, !dbg !60
  %468 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %460, float 2.304000e+03) #6, !dbg !60
  %469 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %461, float 2.304000e+03) #6, !dbg !60
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %462, float 2.304000e+03) #6, !dbg !60
  %471 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %463, float 2.304000e+03) #6, !dbg !60
  %472 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %464, float 2.304000e+03) #6, !dbg !60
  %473 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %465, float 2.304000e+03) #6, !dbg !60
  %474 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %466, float 2.304000e+03) #6, !dbg !60
  %475 = fadd <8 x float> %442, %323, !dbg !61
  %476 = insertelement <8 x float> poison, float %467, i64 0, !dbg !62
  %477 = shufflevector <8 x float> %476, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !62
  %478 = fmul <8 x float> %477, %380, !dbg !62
  %479 = fadd <8 x float> %475, %478, !dbg !63
  %480 = fadd <8 x float> %478, %479, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  store <8 x float> %480, ptr addrspace(3) %275, align 32, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %481 = load <4 x i32>, ptr addrspace(3) %279, align 16, !dbg !65
  %.extract = load i32, ptr addrspace(3) %277, align 16, !dbg !65
  %.extract6 = load i32, ptr addrspace(3) %280, align 4, !dbg !65
  %.extract8 = load i32, ptr addrspace(3) %281, align 8, !dbg !65
  %.extract10 = load i32, ptr addrspace(3) %282, align 4, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract6, i32 %.extract8, i32 %.extract10, ptr addrspace(1) %302, i1 %291) #6, !dbg !65
  %.extract12 = extractelement <4 x i32> %481, i64 0, !dbg !65
  %.extract14 = extractelement <4 x i32> %481, i64 1, !dbg !65
  %.extract16 = extractelement <4 x i32> %481, i64 2, !dbg !65
  %.extract18 = extractelement <4 x i32> %481, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract14, i32 %.extract16, i32 %.extract18, ptr addrspace(1) %304, i1 %292) #6, !dbg !65
  br i1 %284, label %283, label %482, !dbg !40

482:                                              ; preds = %__nv_rsqrtf.exit43
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ccllnpqnkpduzd4vk2c4pvcp2ljcvsapr6xyke26tdejsie7ie6n.py", directory: "/tmp/torchinductor_zeus/cl")
!4 = !{ptr @triton__0d1d2d3d4d5de6de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5de6de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6de", linkageName: "triton__0d1d2d3d4d5de6de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 36, column: 22, scope: !7)
!22 = !DILocation(line: 37, column: 22, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 41, column: 39, scope: !7)
!25 = !DILocation(line: 28, column: 27, scope: !7)
!26 = !DILocation(line: 29, column: 25, scope: !7)
!27 = !DILocation(line: 233, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !32)
!32 = !DILocation(line: 42, column: 25, scope: !28)
!33 = !DILocation(line: 243, column: 36, scope: !30, inlinedAt: !34)
!34 = !DILocation(line: 42, column: 25, scope: !30)
!35 = !DILocation(line: 43, column: 31, scope: !7)
!36 = !DILocation(line: 43, column: 36, scope: !7)
!37 = !DILocation(line: 57, column: 24, scope: !7)
!38 = !DILocation(line: 59, column: 24, scope: !7)
!39 = !DILocation(line: 64, column: 23, scope: !7)
!40 = !DILocation(line: 44, column: 36, scope: !7)
!41 = !DILocation(line: 45, column: 27, scope: !7)
!42 = !DILocation(line: 46, column: 25, scope: !7)
!43 = !DILocation(line: 48, column: 45, scope: !7)
!44 = !DILocation(line: 48, column: 39, scope: !7)
!45 = !DILocation(line: 48, column: 56, scope: !7)
!46 = !DILocation(line: 49, column: 35, scope: !7)
!47 = !DILocation(line: 49, column: 52, scope: !7)
!48 = !DILocation(line: 49, column: 104, scope: !7)
!49 = !DILocation(line: 50, column: 35, scope: !7)
!50 = !DILocation(line: 50, column: 40, scope: !7)
!51 = !DILocation(line: 51, column: 35, scope: !7)
!52 = !DILocation(line: 51, column: 52, scope: !7)
!53 = !DILocation(line: 54, column: 24, scope: !7)
!54 = !DILocation(line: 55, column: 24, scope: !7)
!55 = !DILocation(line: 60, column: 30, scope: !7)
!56 = !DILocation(line: 61, column: 24, scope: !7)
!57 = !DILocation(line: 65, column: 24, scope: !7)
!58 = !DILocation(line: 66, column: 24, scope: !7)
!59 = !DILocation(line: 67, column: 24, scope: !7)
!60 = !DILocation(line: 68, column: 24, scope: !7)
!61 = !DILocation(line: 62, column: 24, scope: !7)
!62 = !DILocation(line: 69, column: 24, scope: !7)
!63 = !DILocation(line: 70, column: 24, scope: !7)
!64 = !DILocation(line: 71, column: 24, scope: !7)
!65 = !DILocation(line: 72, column: 56, scope: !7)
!66 = !DILocation(line: 44, column: 4, scope: !7)
