; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5d6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = shl i32 %8, 1, !dbg !8
  %10 = and i32 %9, 254, !dbg !8
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %12 = shl i32 %11, 8, !dbg !10
  %13 = or i32 %12, %10, !dbg !11
  %14 = sext i32 %13 to i64, !dbg !12
  %15 = getelementptr i16, ptr addrspace(1) %0, i64 %14, !dbg !12
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !13
  %17 = trunc i32 %16 to i16, !dbg !13
  %extelt.offset = lshr i32 %16, 16, !dbg !13
  %18 = trunc i32 %extelt.offset to i16, !dbg !13
  %19 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %17) #1, !dbg !14
  %20 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %18) #1, !dbg !14
  %21 = getelementptr i16, ptr addrspace(1) %1, i64 %14, !dbg !15
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !16
  %23 = trunc i32 %22 to i16, !dbg !16
  %extelt.offset1 = lshr i32 %22, 16, !dbg !16
  %24 = trunc i32 %extelt.offset1 to i16, !dbg !16
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #1, !dbg !17
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #1, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !18
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !19
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !19
  %31 = bitcast i32 %29 to float, !dbg !19
  %32 = bitcast i32 %30 to float, !dbg !19
  %33 = getelementptr i16, ptr addrspace(1) %3, i64 %14, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %35 = trunc i32 %34 to i16, !dbg !21
  %extelt.offset2 = lshr i32 %34, 16, !dbg !21
  %36 = trunc i32 %extelt.offset2 to i16, !dbg !21
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #1, !dbg !22
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #1, !dbg !22
  %39 = fmul float %25, 5.000000e-01, !dbg !23
  %40 = fmul float %26, 5.000000e-01, !dbg !23
  %41 = fadd float %31, 1.000000e+00, !dbg !24
  %42 = fadd float %32, 1.000000e+00, !dbg !24
  %43 = fmul float %39, %41, !dbg !25
  %44 = fmul float %40, %42, !dbg !25
  %45 = fmul float %19, %43, !dbg !26
  %46 = fmul float %20, %44, !dbg !26
  %47 = fmul float %19, %37, !dbg !27
  %48 = fmul float %20, %38, !dbg !27
  %49 = fmul float %41, 5.000000e-01, !dbg !28
  %50 = fmul float %42, 5.000000e-01, !dbg !28
  %51 = fmul float %31, %31, !dbg !29
  %52 = fmul float %32, %32, !dbg !29
  %53 = fsub float 1.000000e+00, %51, !dbg !30
  %54 = fsub float 1.000000e+00, %52, !dbg !30
  %55 = fmul float %39, %53, !dbg !31
  %56 = fmul float %40, %54, !dbg !31
  %57 = fmul float %25, %25, !dbg !32
  %58 = fmul float %26, %26, !dbg !32
  %59 = fmul float %57, 0x3FC12BA9E0000000, !dbg !33
  %60 = fmul float %58, 0x3FC12BA9E0000000, !dbg !33
  %61 = fadd float %59, 1.000000e+00, !dbg !34
  %62 = fadd float %60, 1.000000e+00, !dbg !34
  %63 = fmul float %61, 0x3FE9884540000000, !dbg !35
  %64 = fmul float %62, 0x3FE9884540000000, !dbg !35
  %65 = fmul float %63, %55, !dbg !36
  %66 = fmul float %64, %56, !dbg !36
  %67 = fadd float %49, %65, !dbg !37
  %68 = fadd float %50, %66, !dbg !37
  %69 = fmul float %47, %67, !dbg !38
  %70 = fmul float %48, %68, !dbg !38
  %71 = getelementptr i16, ptr addrspace(1) %4, i64 %14, !dbg !39
  %72 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %45) #1, !dbg !40
  %73 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %46) #1, !dbg !40
  %74 = insertelement <2 x i16> undef, i16 %72, i64 0, !dbg !40
  %75 = insertelement <2 x i16> %74, i16 %73, i64 1, !dbg !40
  %76 = bitcast <2 x i16> %75 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %76, ptr addrspace(1) %71, i1 true) #1, !dbg !40
  %77 = getelementptr i16, ptr addrspace(1) %5, i64 %14, !dbg !41
  %78 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %69) #1, !dbg !42
  %79 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %70) #1, !dbg !42
  %80 = insertelement <2 x i16> undef, i16 %78, i64 0, !dbg !42
  %81 = insertelement <2 x i16> %80, i16 %79, i64 1, !dbg !42
  %82 = bitcast <2 x i16> %81 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %82, ptr addrspace(1) %77, i1 true) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c6ruokce2jgzhf2yyh77v425m4sj6butsz5th6ai3j26h5mpnoyj.py", directory: "/tmp/torchinductor_zeus/6r")
!3 = !{ptr @triton__0d1d2d3d4d5d6de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de", linkageName: "triton__0d1d2d3d4d5d6de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 30, scope: !5)
!13 = !DILocation(line: 24, column: 35, scope: !5)
!14 = !DILocation(line: 24, column: 44, scope: !5)
!15 = !DILocation(line: 25, column: 30, scope: !5)
!16 = !DILocation(line: 25, column: 35, scope: !5)
!17 = !DILocation(line: 25, column: 44, scope: !5)
!18 = !DILocation(line: 26, column: 30, scope: !5)
!19 = !DILocation(line: 26, column: 35, scope: !5)
!20 = !DILocation(line: 27, column: 31, scope: !5)
!21 = !DILocation(line: 27, column: 36, scope: !5)
!22 = !DILocation(line: 27, column: 45, scope: !5)
!23 = !DILocation(line: 30, column: 18, scope: !5)
!24 = !DILocation(line: 32, column: 18, scope: !5)
!25 = !DILocation(line: 33, column: 18, scope: !5)
!26 = !DILocation(line: 35, column: 19, scope: !5)
!27 = !DILocation(line: 36, column: 19, scope: !5)
!28 = !DILocation(line: 38, column: 19, scope: !5)
!29 = !DILocation(line: 39, column: 19, scope: !5)
!30 = !DILocation(line: 40, column: 19, scope: !5)
!31 = !DILocation(line: 41, column: 19, scope: !5)
!32 = !DILocation(line: 42, column: 19, scope: !5)
!33 = !DILocation(line: 44, column: 20, scope: !5)
!34 = !DILocation(line: 45, column: 20, scope: !5)
!35 = !DILocation(line: 47, column: 20, scope: !5)
!36 = !DILocation(line: 48, column: 20, scope: !5)
!37 = !DILocation(line: 49, column: 20, scope: !5)
!38 = !DILocation(line: 50, column: 20, scope: !5)
!39 = !DILocation(line: 52, column: 25, scope: !5)
!40 = !DILocation(line: 52, column: 37, scope: !5)
!41 = !DILocation(line: 53, column: 25, scope: !5)
!42 = !DILocation(line: 53, column: 37, scope: !5)
!43 = !DILocation(line: 53, column: 4, scope: !5)
