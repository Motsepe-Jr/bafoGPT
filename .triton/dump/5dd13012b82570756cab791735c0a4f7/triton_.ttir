module {
  tt.func public @triton__0d1d2d3d4d5d67de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: i32, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c4_i32 = arith.constant 4 : i32
    %true = arith.constant true
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<2304> : tensor<1x1xi64>
    %cst_0 = arith.constant dense<0> : tensor<1x1xi64>
    %cst_1 = arith.constant dense<288256> : tensor<1x1xi64>
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_3 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_4 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_5 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32>
    %cst_6 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c4_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %5 = tt.addptr %arg1, %0 : !tt.ptr<i64, 1>, i32
    %6 = tt.splat %5 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>>
    %7 = tt.load %6, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64>
    %8 = arith.addi %7, %cst_1 : tensor<1x1xi64>
    %9 = arith.cmpi slt, %7, %cst_0 : tensor<1x1xi64>
    %10 = arith.select %9, %8, %7 : tensor<1x1xi1>, tensor<1x1xi64>
    %11 = arith.cmpi sge, %10, %cst_0 : tensor<1x1xi64>
    %12 = arith.cmpi slt, %10, %cst_1 : tensor<1x1xi64>
    %13 = arith.andi %11, %12 : tensor<1x1xi1>
    %14 = arith.xori %1, %true : i1
    %15 = tt.splat %14 : (i1) -> tensor<1x1xi1>
    %16 = arith.ori %13, %15 : tensor<1x1xi1>
    %17 = arith.muli %10, %cst : tensor<1x1xi64>
    %18 = tt.broadcast %17 : (tensor<1x1xi64>) -> tensor<1x2048xi64>
    %19 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %20 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %21 = arith.muli %0, %c2304_i32 : i32
    %22 = tt.splat %21 : (i32) -> tensor<1x2048xi32>
    %23 = tt.splat %arg4 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %24 = scf.for %arg8 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg9 = %cst_7) -> (tensor<1x2048xf32>)  : i32 {
      %39 = tt.splat %arg8 : (i32) -> tensor<1x2048xi32>
      %40 = arith.addi %39, %4 : tensor<1x2048xi32>
      %41 = arith.cmpi slt, %40, %cst_6 : tensor<1x2048xi32>
      tt.assert %16, "index out of bounds: 0 <= tmp3 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<1x1xi1>
      %42 = arith.extsi %40 : tensor<1x2048xi32> to tensor<1x2048xi64>
      %43 = arith.addi %42, %18 : tensor<1x2048xi64>
      %44 = tt.addptr %19, %43 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi64>
      %45 = arith.andi %41, %20 : tensor<1x2048xi1>
      %46 = tt.load %44, %45, %cst_7 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %47 = arith.mulf %46, %cst_5 : tensor<1x2048xf32>
      %48 = arith.mulf %47, %47 : tensor<1x2048xf32>
      %49 = arith.addf %arg9, %48 : tensor<1x2048xf32>
      %50 = arith.select %45, %49, %arg9 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %51 = arith.addi %40, %22 : tensor<1x2048xi32>
      %52 = tt.addptr %23, %51 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      tt.store %52, %46, %45 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32>
      scf.yield %50 : tensor<1x2048xf32>
    }
    %25 = "tt.reduce"(%24) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32, %arg9: f32):
      %39 = arith.addf %arg8, %arg9 : f32
      tt.reduce.return %39 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %26 = tt.expand_dims %25 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %27 = arith.divf %26, %cst_4 : tensor<1x1xf32>
    %28 = arith.addf %27, %cst_3 : tensor<1x1xf32>
    %29 = tt.extern_elementwise %28 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
    gpu.barrier
    %30 = tt.addptr %arg0, %0 : !tt.ptr<f32, 1>, i32
    %31 = tt.splat %30 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %31, %29, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %32 = arith.muli %0, %c2304_i32 : i32
    %33 = tt.splat %32 : (i32) -> tensor<1x2048xi32>
    %34 = tt.splat %arg4 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %35 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %36 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %37 = tt.broadcast %29 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %38 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg8 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %39 = tt.splat %arg8 : (i32) -> tensor<1x2048xi32>
      %40 = arith.addi %39, %4 : tensor<1x2048xi32>
      %41 = arith.cmpi slt, %40, %cst_6 : tensor<1x2048xi32>
      %42 = arith.addi %40, %33 : tensor<1x2048xi32>
      %43 = tt.addptr %34, %42 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %44 = arith.andi %41, %35 : tensor<1x2048xi1>
      %45 = tt.load %43, %44, %cst_7 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %46 = tt.addptr %36, %40 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %47 = tt.load %46, %41, %cst_7 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %48 = arith.mulf %45, %cst_5 : tensor<1x2048xf32>
      %49 = arith.mulf %48, %37 : tensor<1x2048xf32>
      %50 = arith.addf %47, %cst_2 : tensor<1x2048xf32>
      %51 = arith.mulf %49, %50 : tensor<1x2048xf32>
      %52 = tt.addptr %38, %42 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %53 = arith.truncf %51 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %52, %53, %44 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
