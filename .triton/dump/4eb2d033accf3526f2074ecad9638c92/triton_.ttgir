#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10d11de12de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x1024xi32, #blocked>
    %cst_0 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked>
    %c0_i32 = arith.constant 0 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %cst_2 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32, #blocked>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x1024xf32, #blocked>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32, #blocked>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x1024xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x1024xi32, #blocked>
    %3 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %4 = tt.splat %3 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %5 = tt.load %4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked>
    %6 = arith.muli %0, %c2304_i32 : i32
    %7 = tt.splat %6 : (i32) -> tensor<1x1024xi32, #blocked>
    %8 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    %9 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    %10 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %11 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    %12 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %13 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %14 = arith.divf %5, %cst_0 : tensor<1x1xf32, #blocked>
    %15 = arith.addf %14, %cst_1 : tensor<1x1xf32, #blocked>
    %16 = scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg14 = %cst_4) -> (tensor<1x1024xf32, #blocked>)  : i32 {
      %32 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32, #blocked>
      %33 = arith.addi %32, %2 : tensor<1x1024xi32, #blocked>
      %34 = arith.cmpi slt, %33, %cst : tensor<1x1024xi32, #blocked>
      %35 = arith.addi %33, %7 : tensor<1x1024xi32, #blocked>
      %36 = tt.addptr %8, %35 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %37 = tt.load %36, %34, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %38 = arith.extf %37 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %39 = tt.addptr %9, %35 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %40 = tt.load %39, %34, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %41 = arith.extf %40 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %42 = tt.addptr %10, %33 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %43 = tt.load %42, %34, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %44 = tt.addptr %11, %35 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %45 = tt.load %44, %34, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %46 = arith.extf %45 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %47 = tt.addptr %12, %33 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %48 = tt.load %47, %34, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %49 = tt.addptr %13, %35 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %50 = tt.load %49, %34, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %51 = arith.addf %38, %41 : tensor<1x1024xf32, #blocked>
      %52 = arith.addf %43, %cst_3 : tensor<1x1024xf32, #blocked>
      %53 = arith.mulf %51, %52 : tensor<1x1024xf32, #blocked>
      %54 = tt.extern_elementwise %15 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %55 = tt.broadcast %54 : (tensor<1x1xf32, #blocked>) -> tensor<1x1024xf32, #blocked>
      %56 = arith.mulf %46, %55 : tensor<1x1024xf32, #blocked>
      %57 = arith.addf %48, %cst_3 : tensor<1x1024xf32, #blocked>
      %58 = arith.mulf %56, %57 : tensor<1x1024xf32, #blocked>
      %59 = arith.addf %58, %50 : tensor<1x1024xf32, #blocked>
      %60 = arith.mulf %53, %59 : tensor<1x1024xf32, #blocked>
      %61 = arith.addf %arg14, %60 : tensor<1x1024xf32, #blocked>
      %62 = arith.select %34, %61, %arg14 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
      scf.yield %62 : tensor<1x1024xf32, #blocked>
    }
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32, %arg14: f32):
      %32 = arith.addf %arg13, %arg14 : f32
      tt.reduce.return %32 : f32
    }) : (tensor<1x1024xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %18 = tt.expand_dims %17 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %19 = tt.addptr %arg8, %0 : !tt.ptr<f32, 1>, i32
    %20 = tt.splat %19 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %21 = tt.load %20 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked>
    %22 = tt.splat %arg9 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %23 = arith.mulf %18, %cst_2 : tensor<1x1xf32, #blocked>
    %24 = arith.divf %21, %cst_0 : tensor<1x1xf32, #blocked>
    %25 = arith.addf %24, %cst_1 : tensor<1x1xf32, #blocked>
    %26 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %27 = scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg14 = %cst_4) -> (tensor<1x1024xf32, #blocked>)  : i32 {
      %32 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32, #blocked>
      %33 = arith.addi %32, %2 : tensor<1x1024xi32, #blocked>
      %34 = arith.cmpi slt, %33, %cst : tensor<1x1024xi32, #blocked>
      %35 = arith.addi %33, %7 : tensor<1x1024xi32, #blocked>
      %36 = tt.addptr %11, %35 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %37 = tt.load %36, %34, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %38 = arith.extf %37 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %39 = tt.addptr %12, %33 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %40 = tt.load %39, %34, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %41 = tt.addptr %13, %35 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %42 = tt.load %41, %34, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %43 = tt.addptr %22, %35 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %44 = tt.load %43, %34, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %45 = tt.addptr %8, %35 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %46 = tt.load %45, %34, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %47 = arith.extf %46 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %48 = tt.addptr %9, %35 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %49 = tt.load %48, %34, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %50 = arith.extf %49 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %51 = tt.addptr %10, %33 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %52 = tt.load %51, %34, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %53 = tt.extern_elementwise %25 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %54 = arith.mulf %53, %53 : tensor<1x1xf32, #blocked>
      %55 = arith.mulf %54, %53 : tensor<1x1xf32, #blocked>
      %56 = arith.mulf %23, %55 : tensor<1x1xf32, #blocked>
      %57 = arith.divf %56, %cst_0 : tensor<1x1xf32, #blocked>
      %58 = tt.extern_elementwise %15 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %59 = tt.broadcast %58 : (tensor<1x1xf32, #blocked>) -> tensor<1x1024xf32, #blocked>
      %60 = arith.mulf %38, %59 : tensor<1x1024xf32, #blocked>
      %61 = arith.addf %40, %cst_3 : tensor<1x1024xf32, #blocked>
      %62 = arith.mulf %60, %61 : tensor<1x1024xf32, #blocked>
      %63 = arith.addf %62, %42 : tensor<1x1024xf32, #blocked>
      %64 = tt.broadcast %57 : (tensor<1x1xf32, #blocked>) -> tensor<1x1024xf32, #blocked>
      %65 = arith.mulf %64, %63 : tensor<1x1024xf32, #blocked>
      %66 = arith.addf %47, %50 : tensor<1x1024xf32, #blocked>
      %67 = arith.addf %52, %cst_3 : tensor<1x1024xf32, #blocked>
      %68 = arith.mulf %66, %67 : tensor<1x1024xf32, #blocked>
      %69 = tt.broadcast %53 : (tensor<1x1xf32, #blocked>) -> tensor<1x1024xf32, #blocked>
      %70 = arith.mulf %68, %69 : tensor<1x1024xf32, #blocked>
      %71 = arith.addf %44, %70 : tensor<1x1024xf32, #blocked>
      %72 = arith.addf %71, %65 : tensor<1x1024xf32, #blocked>
      %73 = arith.addf %72, %65 : tensor<1x1024xf32, #blocked>
      %74 = arith.mulf %73, %61 : tensor<1x1024xf32, #blocked>
      %75 = arith.mulf %74, %38 : tensor<1x1024xf32, #blocked>
      %76 = arith.addf %arg14, %75 : tensor<1x1024xf32, #blocked>
      %77 = arith.select %34, %76, %arg14 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
      %78 = tt.addptr %26, %35 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      tt.store %78, %73, %34 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xf32, #blocked>
      scf.yield %77 : tensor<1x1024xf32, #blocked>
    }
    %28 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32, %arg14: f32):
      %32 = arith.addf %arg13, %arg14 : f32
      tt.reduce.return %32 : f32
    }) : (tensor<1x1024xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %29 = tt.expand_dims %28 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %30 = arith.mulf %29, %cst_2 : tensor<1x1xf32, #blocked>
    %31 = tt.splat %arg10 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32  : i32 {
      %32 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32, #blocked>
      %33 = arith.addi %32, %2 : tensor<1x1024xi32, #blocked>
      %34 = arith.cmpi slt, %33, %cst : tensor<1x1024xi32, #blocked>
      %35 = arith.addi %33, %7 : tensor<1x1024xi32, #blocked>
      %36 = tt.addptr %26, %35 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %37 = tt.load %36, %34, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %38 = tt.addptr %12, %33 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %39 = tt.load %38, %34, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %40 = tt.addptr %11, %35 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %41 = tt.load %40, %34, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16, #blocked>
      %42 = arith.extf %41 : tensor<1x1024xbf16, #blocked> to tensor<1x1024xf32, #blocked>
      %43 = arith.addf %39, %cst_3 : tensor<1x1024xf32, #blocked>
      %44 = arith.mulf %37, %43 : tensor<1x1024xf32, #blocked>
      %45 = tt.extern_elementwise %15 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %46 = tt.broadcast %45 : (tensor<1x1xf32, #blocked>) -> tensor<1x1024xf32, #blocked>
      %47 = arith.mulf %44, %46 : tensor<1x1024xf32, #blocked>
      %48 = arith.mulf %45, %45 : tensor<1x1xf32, #blocked>
      %49 = arith.mulf %48, %45 : tensor<1x1xf32, #blocked>
      %50 = arith.mulf %30, %49 : tensor<1x1xf32, #blocked>
      %51 = arith.divf %50, %cst_0 : tensor<1x1xf32, #blocked>
      %52 = tt.broadcast %51 : (tensor<1x1xf32, #blocked>) -> tensor<1x1024xf32, #blocked>
      %53 = arith.mulf %52, %42 : tensor<1x1024xf32, #blocked>
      %54 = arith.addf %47, %53 : tensor<1x1024xf32, #blocked>
      %55 = arith.addf %54, %53 : tensor<1x1024xf32, #blocked>
      %56 = tt.addptr %31, %35 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %57 = arith.truncf %55 : tensor<1x1024xf32, #blocked> to tensor<1x1024xbf16, #blocked>
      tt.store %56, %57, %34 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xbf16, #blocked>
    }
    tt.return
  }
}
