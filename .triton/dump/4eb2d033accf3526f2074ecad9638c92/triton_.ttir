module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10d11de12de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x1024xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32>
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x1024xf32>
    %cst_4 = arith.constant dense<2304> : tensor<1x1024xi32>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<1024xi32>) -> tensor<1x1024xi32>
    %3 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %4 = tt.splat %3 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %5 = tt.load %4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %6 = arith.muli %0, %c2304_i32 : i32
    %7 = tt.splat %6 : (i32) -> tensor<1x1024xi32>
    %8 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %9 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %10 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %11 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %12 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %13 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %14 = arith.divf %5, %cst_2 : tensor<1x1xf32>
    %15 = arith.addf %14, %cst_1 : tensor<1x1xf32>
    %16 = scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg14 = %cst_5) -> (tensor<1x1024xf32>)  : i32 {
      %49 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32>
      %50 = arith.addi %49, %2 : tensor<1x1024xi32>
      %51 = arith.cmpi slt, %50, %cst_4 : tensor<1x1024xi32>
      %52 = arith.addi %50, %7 : tensor<1x1024xi32>
      %53 = tt.addptr %8, %52 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %54 = tt.load %53, %51, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %55 = arith.extf %54 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %56 = tt.addptr %9, %52 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %57 = tt.load %56, %51, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %58 = arith.extf %57 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %59 = tt.addptr %10, %50 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %60 = tt.load %59, %51, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %61 = tt.addptr %11, %52 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %62 = tt.load %61, %51, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %63 = arith.extf %62 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %64 = tt.addptr %12, %50 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %65 = tt.load %64, %51, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %66 = tt.addptr %13, %52 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %67 = tt.load %66, %51, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %68 = arith.addf %55, %58 : tensor<1x1024xf32>
      %69 = arith.addf %60, %cst_3 : tensor<1x1024xf32>
      %70 = arith.mulf %68, %69 : tensor<1x1024xf32>
      %71 = tt.extern_elementwise %15 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %72 = tt.broadcast %71 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %73 = arith.mulf %63, %72 : tensor<1x1024xf32>
      %74 = arith.addf %65, %cst_3 : tensor<1x1024xf32>
      %75 = arith.mulf %73, %74 : tensor<1x1024xf32>
      %76 = arith.addf %75, %67 : tensor<1x1024xf32>
      %77 = arith.mulf %70, %76 : tensor<1x1024xf32>
      %78 = arith.addf %arg14, %77 : tensor<1x1024xf32>
      %79 = arith.select %51, %78, %arg14 : tensor<1x1024xi1>, tensor<1x1024xf32>
      scf.yield %79 : tensor<1x1024xf32>
    }
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32, %arg14: f32):
      %49 = arith.addf %arg13, %arg14 : f32
      tt.reduce.return %49 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %18 = tt.expand_dims %17 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %19 = tt.addptr %arg8, %0 : !tt.ptr<f32, 1>, i32
    %20 = tt.splat %19 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %21 = tt.load %20 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %22 = arith.muli %0, %c2304_i32 : i32
    %23 = tt.splat %22 : (i32) -> tensor<1x1024xi32>
    %24 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %25 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %26 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %27 = tt.splat %arg9 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %28 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %29 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %30 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %31 = arith.mulf %18, %cst_0 : tensor<1x1xf32>
    %32 = arith.divf %21, %cst_2 : tensor<1x1xf32>
    %33 = arith.addf %32, %cst_1 : tensor<1x1xf32>
    %34 = arith.divf %5, %cst_2 : tensor<1x1xf32>
    %35 = arith.addf %34, %cst_1 : tensor<1x1xf32>
    %36 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %37 = scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg14 = %cst_5) -> (tensor<1x1024xf32>)  : i32 {
      %49 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32>
      %50 = arith.addi %49, %2 : tensor<1x1024xi32>
      %51 = arith.cmpi slt, %50, %cst_4 : tensor<1x1024xi32>
      %52 = arith.addi %50, %23 : tensor<1x1024xi32>
      %53 = tt.addptr %24, %52 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %54 = tt.load %53, %51, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %55 = arith.extf %54 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %56 = tt.addptr %25, %50 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %57 = tt.load %56, %51, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %58 = tt.addptr %26, %52 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %59 = tt.load %58, %51, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32>
      %60 = tt.addptr %27, %52 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %61 = tt.load %60, %51, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32>
      %62 = tt.addptr %28, %52 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %63 = tt.load %62, %51, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %64 = arith.extf %63 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %65 = tt.addptr %29, %52 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %66 = tt.load %65, %51, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %67 = arith.extf %66 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %68 = tt.addptr %30, %50 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %69 = tt.load %68, %51, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %70 = tt.extern_elementwise %33 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %71 = arith.mulf %70, %70 : tensor<1x1xf32>
      %72 = arith.mulf %71, %70 : tensor<1x1xf32>
      %73 = arith.mulf %31, %72 : tensor<1x1xf32>
      %74 = arith.divf %73, %cst_2 : tensor<1x1xf32>
      %75 = tt.extern_elementwise %35 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %76 = tt.broadcast %75 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %77 = arith.mulf %55, %76 : tensor<1x1024xf32>
      %78 = arith.addf %57, %cst_3 : tensor<1x1024xf32>
      %79 = arith.mulf %77, %78 : tensor<1x1024xf32>
      %80 = arith.addf %79, %59 : tensor<1x1024xf32>
      %81 = tt.broadcast %74 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %82 = arith.mulf %81, %80 : tensor<1x1024xf32>
      %83 = arith.addf %64, %67 : tensor<1x1024xf32>
      %84 = arith.addf %69, %cst_3 : tensor<1x1024xf32>
      %85 = arith.mulf %83, %84 : tensor<1x1024xf32>
      %86 = tt.broadcast %70 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %87 = arith.mulf %85, %86 : tensor<1x1024xf32>
      %88 = arith.addf %61, %87 : tensor<1x1024xf32>
      %89 = arith.addf %88, %82 : tensor<1x1024xf32>
      %90 = arith.addf %89, %82 : tensor<1x1024xf32>
      %91 = arith.mulf %90, %78 : tensor<1x1024xf32>
      %92 = arith.mulf %91, %55 : tensor<1x1024xf32>
      %93 = arith.addf %arg14, %92 : tensor<1x1024xf32>
      %94 = arith.select %51, %93, %arg14 : tensor<1x1024xi1>, tensor<1x1024xf32>
      %95 = tt.addptr %36, %52 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      tt.store %95, %90, %51 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xf32>
      scf.yield %94 : tensor<1x1024xf32>
    }
    %38 = "tt.reduce"(%37) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32, %arg14: f32):
      %49 = arith.addf %arg13, %arg14 : f32
      tt.reduce.return %49 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %39 = tt.expand_dims %38 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %40 = arith.muli %0, %c2304_i32 : i32
    %41 = tt.splat %40 : (i32) -> tensor<1x1024xi32>
    %42 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %43 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %44 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %45 = arith.divf %5, %cst_2 : tensor<1x1xf32>
    %46 = arith.addf %45, %cst_1 : tensor<1x1xf32>
    %47 = arith.mulf %39, %cst_0 : tensor<1x1xf32>
    %48 = tt.splat %arg10 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    scf.for %arg13 = %c0_i32 to %c2304_i32 step %c1024_i32  : i32 {
      %49 = tt.splat %arg13 : (i32) -> tensor<1x1024xi32>
      %50 = arith.addi %49, %2 : tensor<1x1024xi32>
      %51 = arith.cmpi slt, %50, %cst_4 : tensor<1x1024xi32>
      %52 = arith.addi %50, %41 : tensor<1x1024xi32>
      %53 = tt.addptr %42, %52 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %54 = tt.load %53, %51, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32>
      %55 = tt.addptr %43, %50 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %56 = tt.load %55, %51, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %57 = tt.addptr %44, %52 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %58 = tt.load %57, %51, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %59 = arith.extf %58 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %60 = arith.addf %56, %cst_3 : tensor<1x1024xf32>
      %61 = arith.mulf %54, %60 : tensor<1x1024xf32>
      %62 = tt.extern_elementwise %46 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %63 = tt.broadcast %62 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %64 = arith.mulf %61, %63 : tensor<1x1024xf32>
      %65 = arith.mulf %62, %62 : tensor<1x1xf32>
      %66 = arith.mulf %65, %62 : tensor<1x1xf32>
      %67 = arith.mulf %47, %66 : tensor<1x1xf32>
      %68 = arith.divf %67, %cst_2 : tensor<1x1xf32>
      %69 = tt.broadcast %68 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
      %70 = arith.mulf %69, %59 : tensor<1x1024xf32>
      %71 = arith.addf %64, %70 : tensor<1x1024xf32>
      %72 = arith.addf %71, %70 : tensor<1x1024xf32>
      %73 = tt.addptr %48, %52 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %74 = arith.truncf %72 : tensor<1x1024xf32> to tensor<1x1024xbf16>
      tt.store %73, %74, %51 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xbf16>
    }
    tt.return
  }
}
