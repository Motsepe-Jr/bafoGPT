; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 5, !dbg !10
  %urem = and i32 %7, 255, !dbg !10
  %9 = shl nuw nsw i32 %urem, 3, !dbg !10
  %10 = or i32 %9, 4, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %12 = icmp slt i32 %11, 1024, !dbg !12
  %13 = mul i32 %11, 2304, !dbg !13
  %14 = add i32 %13, %10
  %15 = add i32 %9, %13, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = sext i32 %14 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #6, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #6, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %30 = or i32 %9, 2048, !dbg !17
  %31 = icmp ult i32 %30, 2304, !dbg !18
  %32 = add i32 %30, %13, !dbg !14
  %33 = add i32 %14, 2048, !dbg !14
  %34 = sext i32 %32 to i64, !dbg !15
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !15
  %36 = sext i32 %33 to i64, !dbg !15
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !15
  %38 = and i1 %12, %31, !dbg !19
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #6, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !16
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !16
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #6, !dbg !16
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !16
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !16
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !16
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !16
  %49 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !16
  %50 = insertelement <2 x i32> %49, i32 %22, i64 1, !dbg !16
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !16
  %52 = fmul <2 x float> %51, %51, !dbg !20
  %53 = insertelement <2 x i1> poison, i1 %12, i64 0, !dbg !21
  %54 = shufflevector <2 x i1> %53, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !21
  %55 = select <2 x i1> %54, <2 x float> %52, <2 x float> zeroinitializer, !dbg !21
  %56 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !16
  %57 = insertelement <2 x i32> %56, i32 %41, i64 1, !dbg !16
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !16
  %59 = fmul <2 x float> %58, %58, !dbg !20
  %60 = insertelement <2 x i1> poison, i1 %38, i64 0, !dbg !21
  %61 = shufflevector <2 x i1> %60, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !21
  %62 = select <2 x i1> %61, <2 x float> %59, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !21
  %63 = fadd <2 x float> %55, %62, !dbg !21
  %64 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !16
  %65 = insertelement <2 x i32> %64, i32 %23, i64 1, !dbg !16
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !16
  %67 = fmul <2 x float> %66, %66, !dbg !20
  %68 = select <2 x i1> %54, <2 x float> %67, <2 x float> zeroinitializer, !dbg !21
  %69 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !16
  %70 = insertelement <2 x i32> %69, i32 %42, i64 1, !dbg !16
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !16
  %72 = fmul <2 x float> %71, %71, !dbg !20
  %73 = select <2 x i1> %61, <2 x float> %72, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !21
  %74 = fadd <2 x float> %68, %73, !dbg !21
  %75 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !16
  %76 = insertelement <2 x i32> %75, i32 %26, i64 1, !dbg !16
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !16
  %78 = fmul <2 x float> %77, %77, !dbg !20
  %79 = select <2 x i1> %54, <2 x float> %78, <2 x float> zeroinitializer, !dbg !21
  %80 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !16
  %81 = insertelement <2 x i32> %80, i32 %45, i64 1, !dbg !16
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !16
  %83 = fmul <2 x float> %82, %82, !dbg !20
  %84 = select <2 x i1> %61, <2 x float> %83, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !21
  %85 = fadd <2 x float> %79, %84, !dbg !21
  %86 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !16
  %87 = insertelement <2 x i32> %86, i32 %28, i64 1, !dbg !16
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !16
  %89 = fmul <2 x float> %88, %88, !dbg !20
  %90 = select <2 x i1> %54, <2 x float> %89, <2 x float> zeroinitializer, !dbg !21
  %91 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !16
  %92 = insertelement <2 x i32> %91, i32 %47, i64 1, !dbg !16
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !16
  %94 = fmul <2 x float> %93, %93, !dbg !20
  %95 = select <2 x i1> %61, <2 x float> %94, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !21
  %96 = fadd <2 x float> %90, %95, !dbg !21
  %97 = and i32 %7, 31, !dbg !10
  %98 = and i32 %8, 7, !dbg !10
  %shift = shufflevector <2 x float> %63, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %99 = fadd <2 x float> %63, %shift, !dbg !22
  %shift30 = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %100 = fadd <2 x float> %shift30, %99, !dbg !22
  %101 = fadd <2 x float> %74, %100, !dbg !22
  %shift31 = shufflevector <2 x float> %85, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %102 = fadd <2 x float> %shift31, %101, !dbg !22
  %103 = fadd <2 x float> %85, %102, !dbg !22
  %shift32 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %104 = fadd <2 x float> %shift32, %103, !dbg !22
  %105 = fadd <2 x float> %96, %104, !dbg !22
  %106 = extractelement <2 x float> %105, i64 0, !dbg !22
  %107 = bitcast float %106 to i32, !dbg !28
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !28
  %109 = bitcast i32 %108 to float, !dbg !28
  %110 = fadd float %106, %109, !dbg !22
  %111 = bitcast float %110 to i32, !dbg !28
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !28
  %113 = bitcast i32 %112 to float, !dbg !28
  %114 = fadd float %110, %113, !dbg !22
  %115 = bitcast float %114 to i32, !dbg !28
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !28
  %117 = bitcast i32 %116 to float, !dbg !28
  %118 = fadd float %114, %117, !dbg !22
  %119 = bitcast float %118 to i32, !dbg !28
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !28
  %121 = bitcast i32 %120 to float, !dbg !28
  %122 = fadd float %118, %121, !dbg !22
  %123 = bitcast float %122 to i32, !dbg !28
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !28
  %125 = bitcast i32 %124 to float, !dbg !28
  %126 = fadd float %122, %125, !dbg !22
  %127 = icmp eq i32 %97, 0, !dbg !28
  %128 = zext nneg i32 %98 to i64, !dbg !28
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i64 %128, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, float %126, i1 %127) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %130 = icmp slt i32 %7, 8, !dbg !28
  %131 = sext i32 %7 to i64, !dbg !28
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %131, !dbg !28
  %133 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %132, i1 %130) #6, !dbg !28
  %134 = bitcast float %133 to i32, !dbg !28
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = fadd float %133, %136, !dbg !22
  %138 = bitcast float %137 to i32, !dbg !28
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !28
  %140 = bitcast i32 %139 to float, !dbg !28
  %141 = fadd float %137, %140, !dbg !22
  %142 = bitcast float %141 to i32, !dbg !28
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !28
  %144 = bitcast i32 %143 to float, !dbg !28
  %145 = fadd float %141, %144, !dbg !22
  %146 = and i32 %7, 7, !dbg !28
  %147 = icmp eq i32 %146, 0, !dbg !28
  %148 = and i1 %130, %147, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, float %145, i1 %148) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %149 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %150 = insertelement <1 x float> undef, float %149, i64 0, !dbg !30
  store <1 x float> %150, ptr addrspace(3) @global_smem, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %151 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !30
  %152 = sext i32 %11 to i64, !dbg !31
  %153 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !31
  %154 = icmp eq i32 %urem, 0, !dbg !32
  %155 = and i1 %154, %12, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %153, i1 %155) #6, !dbg !32
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !33
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !33
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !33
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !33
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !33
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !33
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !33
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !33
  %164 = fadd float %156, 0x3EE4F8B580000000, !dbg !34
  br label %165, !dbg !35

165:                                              ; preds = %6, %__nv_rsqrtf.exit
  %166 = phi i1 [ true, %6 ], [ false, %__nv_rsqrtf.exit ]
  %167 = phi i32 [ 0, %6 ], [ 2048, %__nv_rsqrtf.exit ]
  %168 = or i32 %167, %9, !dbg !36
  %169 = or i32 %167, %10, !dbg !36
  %170 = icmp ult i32 %168, 2304, !dbg !37
  %171 = add i32 %168, %13, !dbg !38
  %172 = add i32 %169, %13, !dbg !38
  %173 = sext i32 %171 to i64, !dbg !39
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !39
  %175 = sext i32 %172 to i64, !dbg !39
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !39
  %177 = and i1 %12, %170, !dbg !40
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %174, i1 %177, i32 0, i1 %177, i32 0, i1 %177, i32 0, i1 %177, i32 0, i1 %177) #6, !dbg !41
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !41
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !41
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !41
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !41
  %183 = bitcast i32 %179 to float, !dbg !41
  %184 = bitcast i32 %180 to float, !dbg !41
  %185 = bitcast i32 %181 to float, !dbg !41
  %186 = bitcast i32 %182 to float, !dbg !41
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %177, i32 0, i1 %177, i32 0, i1 %177, i32 0, i1 %177, i32 0, i1 %177) #6, !dbg !41
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !41
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !41
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !41
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !41
  %192 = bitcast i32 %188 to float, !dbg !41
  %193 = bitcast i32 %189 to float, !dbg !41
  %194 = bitcast i32 %190 to float, !dbg !41
  %195 = bitcast i32 %191 to float, !dbg !41
  %196 = zext nneg i32 %168 to i64, !dbg !42
  %197 = getelementptr float, ptr addrspace(1) %1, i64 %196, !dbg !42
  %198 = zext nneg i32 %169 to i64, !dbg !42
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %198, !dbg !42
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170) #6, !dbg !43
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !43
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !43
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !43
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !43
  %205 = bitcast i32 %201 to float, !dbg !43
  %206 = bitcast i32 %202 to float, !dbg !43
  %207 = bitcast i32 %203 to float, !dbg !43
  %208 = bitcast i32 %204 to float, !dbg !43
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %199, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170) #6, !dbg !43
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !43
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !43
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !43
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !43
  %214 = bitcast i32 %210 to float, !dbg !43
  %215 = bitcast i32 %211 to float, !dbg !43
  %216 = bitcast i32 %212 to float, !dbg !43
  %217 = bitcast i32 %213 to float, !dbg !43
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !44
  %.not.i = icmp eq i32 %218, 0, !dbg !44
  br i1 %.not.i, label %221, label %219, !dbg !44

219:                                              ; preds = %165
  %220 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %164), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

221:                                              ; preds = %165
  %222 = tail call float @llvm.nvvm.rsqrt.approx.f(float %164), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %219, %221
  %.0.i = phi float [ %220, %219 ], [ %222, %221 ], !dbg !44
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !44
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !44
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !44
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !44
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !44
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !44
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !44
  %230 = fmul float %.0.i, %183, !dbg !45
  %231 = fmul float %.0.i, %184, !dbg !45
  %232 = fmul float %.0.i, %185, !dbg !45
  %233 = fmul float %.0.i, %186, !dbg !45
  %234 = fmul float %.0.i, %192, !dbg !45
  %235 = fmul float %.0.i, %193, !dbg !45
  %236 = fmul float %.0.i, %194, !dbg !45
  %237 = fmul float %.0.i, %195, !dbg !45
  %238 = fadd float %205, 1.000000e+00, !dbg !46
  %239 = fadd float %206, 1.000000e+00, !dbg !46
  %240 = fadd float %207, 1.000000e+00, !dbg !46
  %241 = fadd float %208, 1.000000e+00, !dbg !46
  %242 = fadd float %214, 1.000000e+00, !dbg !46
  %243 = fadd float %215, 1.000000e+00, !dbg !46
  %244 = fadd float %216, 1.000000e+00, !dbg !46
  %245 = fadd float %217, 1.000000e+00, !dbg !46
  %246 = fmul float %238, %230, !dbg !47
  %247 = fmul float %239, %231, !dbg !47
  %248 = fmul float %240, %232, !dbg !47
  %249 = fmul float %241, %233, !dbg !47
  %250 = fmul float %242, %234, !dbg !47
  %251 = fmul float %243, %235, !dbg !47
  %252 = fmul float %244, %236, !dbg !47
  %253 = fmul float %245, %237, !dbg !47
  %254 = getelementptr i16, ptr addrspace(1) %3, i64 %173, !dbg !48
  %255 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %246) #6, !dbg !49
  %256 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %247) #6, !dbg !49
  %257 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %248) #6, !dbg !49
  %258 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %249) #6, !dbg !49
  %259 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %250) #6, !dbg !49
  %260 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %251) #6, !dbg !49
  %261 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %252) #6, !dbg !49
  %262 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %253) #6, !dbg !49
  %263 = insertelement <2 x i16> undef, i16 %255, i64 0, !dbg !49
  %264 = insertelement <2 x i16> %263, i16 %256, i64 1, !dbg !49
  %265 = bitcast <2 x i16> %264 to i32, !dbg !49
  %266 = insertelement <2 x i16> undef, i16 %257, i64 0, !dbg !49
  %267 = insertelement <2 x i16> %266, i16 %258, i64 1, !dbg !49
  %268 = bitcast <2 x i16> %267 to i32, !dbg !49
  %269 = insertelement <2 x i16> undef, i16 %259, i64 0, !dbg !49
  %270 = insertelement <2 x i16> %269, i16 %260, i64 1, !dbg !49
  %271 = bitcast <2 x i16> %270 to i32, !dbg !49
  %272 = insertelement <2 x i16> undef, i16 %261, i64 0, !dbg !49
  %273 = insertelement <2 x i16> %272, i16 %262, i64 1, !dbg !49
  %274 = bitcast <2 x i16> %273 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %265, i32 %268, i32 %271, i32 %274, ptr addrspace(1) %254, i1 %177) #6, !dbg !49
  br i1 %166, label %165, label %275, !dbg !35

275:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cqprlfypgnciqfvn6iuditvc5ffm2pzul5sjlossuv2temp4f326.py", directory: "/tmp/torchinductor_zeus/qp")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 28, column: 27, scope: !7)
!18 = !DILocation(line: 29, column: 25, scope: !7)
!19 = !DILocation(line: 31, column: 59, scope: !7)
!20 = !DILocation(line: 32, column: 22, scope: !7)
!21 = !DILocation(line: 35, column: 46, scope: !7)
!22 = !DILocation(line: 233, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 243, column: 36, scope: !23, inlinedAt: !27)
!27 = !DILocation(line: 36, column: 25, scope: !23)
!28 = !DILocation(line: 243, column: 36, scope: !25, inlinedAt: !29)
!29 = !DILocation(line: 36, column: 25, scope: !25)
!30 = !DILocation(line: 36, column: 28, scope: !7)
!31 = !DILocation(line: 37, column: 25, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 45, column: 22, scope: !7)
!34 = !DILocation(line: 47, column: 22, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 27, scope: !7)
!37 = !DILocation(line: 40, column: 25, scope: !7)
!38 = !DILocation(line: 42, column: 40, scope: !7)
!39 = !DILocation(line: 42, column: 34, scope: !7)
!40 = !DILocation(line: 42, column: 59, scope: !7)
!41 = !DILocation(line: 42, column: 51, scope: !7)
!42 = !DILocation(line: 43, column: 35, scope: !7)
!43 = !DILocation(line: 43, column: 40, scope: !7)
!44 = !DILocation(line: 48, column: 30, scope: !7)
!45 = !DILocation(line: 49, column: 23, scope: !7)
!46 = !DILocation(line: 51, column: 24, scope: !7)
!47 = !DILocation(line: 52, column: 24, scope: !7)
!48 = !DILocation(line: 54, column: 29, scope: !7)
!49 = !DILocation(line: 54, column: 53, scope: !7)
!50 = !DILocation(line: 38, column: 4, scope: !7)
