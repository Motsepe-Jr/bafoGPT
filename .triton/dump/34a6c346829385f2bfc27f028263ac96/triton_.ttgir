#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [8, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d45de(%arg0: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x2048xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<1x1xi64, #blocked>
    %cst_1 = arith.constant dense<0> : tensor<1x1xi64, #blocked>
    %cst_2 = arith.constant dense<288256> : tensor<1x1xi64, #blocked>
    %cst_3 = arith.constant dense<288256> : tensor<1x1xi64, #blocked1>
    %cst_4 = arith.constant dense<0> : tensor<1x1xi64, #blocked1>
    %c0_i32 = arith.constant 0 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %c4_i32 = arith.constant 4 : i32
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_6 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked>
    %cst_7 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_8 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32, #blocked>
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c4_i32 : i32
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = tt.addptr %arg0, %0 : !tt.ptr<i64, 1>, i32
    %5 = tt.splat %4 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked>
    %6 = tt.splat %4 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked1>
    %7 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked>
    %8 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked1>
    %9 = tt.load %5, %7 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked>
    %10 = tt.load %6, %8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked1>
    %11 = arith.addi %9, %cst_2 : tensor<1x1xi64, #blocked>
    %12 = arith.addi %10, %cst_3 : tensor<1x1xi64, #blocked1>
    %13 = arith.cmpi slt, %9, %cst_1 : tensor<1x1xi64, #blocked>
    %14 = arith.cmpi slt, %10, %cst_4 : tensor<1x1xi64, #blocked1>
    %15 = arith.select %13, %11, %9 : tensor<1x1xi1, #blocked>, tensor<1x1xi64, #blocked>
    %16 = arith.select %14, %12, %10 : tensor<1x1xi1, #blocked1>, tensor<1x1xi64, #blocked1>
    %17 = arith.cmpi sge, %16, %cst_4 : tensor<1x1xi64, #blocked1>
    %18 = arith.cmpi slt, %16, %cst_3 : tensor<1x1xi64, #blocked1>
    %19 = arith.andi %17, %18 : tensor<1x1xi1, #blocked1>
    %20 = arith.cmpi sge, %0, %c4_i32 : i32
    %21 = tt.splat %20 : (i1) -> tensor<1x1xi1, #blocked1>
    %22 = arith.ori %19, %21 : tensor<1x1xi1, #blocked1>
    %23 = arith.muli %15, %cst_0 : tensor<1x1xi64, #blocked>
    %24 = tt.broadcast %23 : (tensor<1x1xi64, #blocked>) -> tensor<1x2048xi64, #blocked>
    %25 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %26 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked>
    %27 = scf.for %arg6 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg7 = %cst_9) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %36 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32, #blocked>
      %37 = arith.addi %36, %3 : tensor<1x2048xi32, #blocked>
      %38 = arith.cmpi slt, %37, %cst : tensor<1x2048xi32, #blocked>
      tt.assert %22, "index out of bounds: 0 <= tmp3 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<1x1xi1, #blocked1>
      %39 = arith.extsi %37 : tensor<1x2048xi32, #blocked> to tensor<1x2048xi64, #blocked>
      %40 = arith.addi %39, %24 : tensor<1x2048xi64, #blocked>
      %41 = tt.addptr %25, %40 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi64, #blocked>
      %42 = arith.andi %38, %26 : tensor<1x2048xi1, #blocked>
      %43 = tt.load %41, %42, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %44 = arith.mulf %43, %cst_8 : tensor<1x2048xf32, #blocked>
      %45 = arith.mulf %44, %44 : tensor<1x2048xf32, #blocked>
      %46 = arith.addf %arg7, %45 : tensor<1x2048xf32, #blocked>
      %47 = arith.select %42, %46, %arg7 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %47 : tensor<1x2048xf32, #blocked>
    }
    %28 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %36 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %36 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %29 = tt.expand_dims %28 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %30 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %31 = arith.divf %29, %cst_7 : tensor<1x1xf32, #blocked>
    %32 = arith.addf %31, %cst_6 : tensor<1x1xf32, #blocked>
    %33 = arith.muli %0, %c2304_i32 : i32
    %34 = tt.splat %33 : (i32) -> tensor<1x2048xi32, #blocked>
    %35 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg6 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %36 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32, #blocked>
      %37 = arith.addi %36, %3 : tensor<1x2048xi32, #blocked>
      %38 = arith.cmpi slt, %37, %cst : tensor<1x2048xi32, #blocked>
      %39 = tt.addptr %30, %37 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %40 = tt.load %39, %38, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      tt.assert %22, "index out of bounds: 0 <= tmp13 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<1x1xi1, #blocked1>
      %41 = arith.extsi %37 : tensor<1x2048xi32, #blocked> to tensor<1x2048xi64, #blocked>
      %42 = arith.addi %41, %24 : tensor<1x2048xi64, #blocked>
      %43 = tt.addptr %25, %42 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi64, #blocked>
      %44 = arith.andi %38, %26 : tensor<1x2048xi1, #blocked>
      %45 = tt.load %43, %44, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %46 = arith.mulf %45, %cst_8 : tensor<1x2048xf32, #blocked>
      %47 = tt.extern_elementwise %32 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %48 = tt.broadcast %47 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %49 = arith.mulf %46, %48 : tensor<1x2048xf32, #blocked>
      %50 = arith.addf %40, %cst_5 : tensor<1x2048xf32, #blocked>
      %51 = arith.mulf %49, %50 : tensor<1x2048xf32, #blocked>
      %52 = arith.addi %37, %34 : tensor<1x2048xi32, #blocked>
      %53 = tt.addptr %35, %52 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %54 = arith.truncf %51 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
      tt.store %53, %54, %44 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    }
    tt.return
  }
}
