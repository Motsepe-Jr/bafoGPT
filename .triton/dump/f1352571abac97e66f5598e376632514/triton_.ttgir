#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x2048xi32, #blocked>
    %cst_0 = arith.constant dense<2048> : tensor<1x2048xi32, #blocked>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %c2304_i32 = arith.constant 2304 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c2304_i32 : i32
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = arith.cmpi slt, %3, %cst_0 : tensor<1x2048xi32, #blocked>
    %5 = arith.muli %3, %cst : tensor<1x2048xi32, #blocked>
    %6 = tt.splat %0 : (i32) -> tensor<1x2048xi32, #blocked>
    %7 = arith.addi %6, %5 : tensor<1x2048xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %9 = tt.addptr %8, %7 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %10 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked>
    %11 = arith.andi %4, %10 : tensor<1x2048xi1, #blocked>
    %12 = tt.load %9, %11, %cst_2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
    %13 = arith.extf %12 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
    %14 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %15 = tt.addptr %14, %7 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %16 = tt.load %15, %11, %cst_2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
    %17 = arith.extf %16 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
    %18 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %19 = tt.addptr %18, %7 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %20 = tt.load %19, %11, %cst_1 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
    %21 = arith.addf %13, %17 : tensor<1x2048xf32, #blocked>
    %22 = arith.mulf %21, %20 : tensor<1x2048xf32, #blocked>
    %23 = arith.addf %22, %cst_1 : tensor<1x2048xf32, #blocked>
    %24 = arith.select %11, %23, %cst_1 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
    %25 = "tt.reduce"(%24) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %30 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %30 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %26 = tt.expand_dims %25 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %27 = tt.addptr %arg3, %0 : !tt.ptr<f32, 1>, i32
    %28 = tt.splat %27 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %29 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked>
    tt.store %28, %26, %29 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32, #blocked>
    tt.return
  }
}
