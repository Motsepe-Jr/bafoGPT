; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = and i32 %9, 7, !dbg !8
  %urem = and i32 %7, 255, !dbg !8
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %12 = icmp slt i32 %11, 2304, !dbg !10
  %13 = mul nuw nsw i32 %urem, 2304, !dbg !11
  %14 = add i32 %11, %13, !dbg !12
  %15 = add i32 %14, 589824, !dbg !12
  %16 = add i32 %14, 1179648, !dbg !12
  %17 = add i32 %14, 1769472, !dbg !12
  %18 = add i32 %14, 2359296, !dbg !12
  %19 = add i32 %14, 2949120, !dbg !12
  %20 = add i32 %14, 3538944, !dbg !12
  %21 = add i32 %14, 4128768, !dbg !12
  %22 = sext i32 %14 to i64, !dbg !13
  %23 = getelementptr i16, ptr addrspace(1) %0, i64 %22, !dbg !13
  %24 = sext i32 %15 to i64, !dbg !13
  %25 = getelementptr i16, ptr addrspace(1) %0, i64 %24, !dbg !13
  %26 = sext i32 %16 to i64, !dbg !13
  %27 = getelementptr i16, ptr addrspace(1) %0, i64 %26, !dbg !13
  %28 = sext i32 %17 to i64, !dbg !13
  %29 = getelementptr i16, ptr addrspace(1) %0, i64 %28, !dbg !13
  %30 = sext i32 %18 to i64, !dbg !13
  %31 = getelementptr i16, ptr addrspace(1) %0, i64 %30, !dbg !13
  %32 = sext i32 %19 to i64, !dbg !13
  %33 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !13
  %34 = sext i32 %20 to i64, !dbg !13
  %35 = getelementptr i16, ptr addrspace(1) %0, i64 %34, !dbg !13
  %36 = sext i32 %21 to i64, !dbg !13
  %37 = getelementptr i16, ptr addrspace(1) %0, i64 %36, !dbg !13
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %23, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %25, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %27, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %29, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %31, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %33, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %35, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %37, i1 %12, i16 0, i1 %12) #3, !dbg !14
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !15
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #3, !dbg !15
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !15
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #3, !dbg !15
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #3, !dbg !15
  %51 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #3, !dbg !15
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #3, !dbg !15
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #3, !dbg !15
  %54 = getelementptr i16, ptr addrspace(1) %1, i64 %22, !dbg !16
  %55 = getelementptr i16, ptr addrspace(1) %1, i64 %24, !dbg !16
  %56 = getelementptr i16, ptr addrspace(1) %1, i64 %26, !dbg !16
  %57 = getelementptr i16, ptr addrspace(1) %1, i64 %28, !dbg !16
  %58 = getelementptr i16, ptr addrspace(1) %1, i64 %30, !dbg !16
  %59 = getelementptr i16, ptr addrspace(1) %1, i64 %32, !dbg !16
  %60 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !16
  %61 = getelementptr i16, ptr addrspace(1) %1, i64 %36, !dbg !16
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %54, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %55, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %56, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %57, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %58, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %59, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %60, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %61, i1 %12, i16 0, i1 %12) #3, !dbg !17
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #3, !dbg !18
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #3, !dbg !18
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #3, !dbg !18
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #3, !dbg !18
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #3, !dbg !18
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #3, !dbg !18
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #3, !dbg !18
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #3, !dbg !18
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !19
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !19
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !19
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !19
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !19
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %87 = bitcast i32 %86 to float, !dbg !20
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %89 = bitcast i32 %88 to float, !dbg !20
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %12, i32 0, i1 %12) #3, !dbg !20
  %96 = fadd float %46, %70, !dbg !21
  %97 = fadd float %47, %71, !dbg !21
  %98 = fmul float %96, %87, !dbg !22
  %99 = fmul float %97, %89, !dbg !22
  %100 = fadd float %98, 0.000000e+00, !dbg !23
  %101 = fadd float %99, 0.000000e+00, !dbg !23
  %102 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !20
  %103 = insertelement <2 x i32> %102, i32 %91, i64 1, !dbg !20
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !20
  %105 = insertelement <2 x float> poison, float %48, i64 0, !dbg !21
  %106 = insertelement <2 x float> %105, float %49, i64 1, !dbg !21
  %107 = insertelement <2 x float> poison, float %72, i64 0, !dbg !21
  %108 = insertelement <2 x float> %107, float %73, i64 1, !dbg !21
  %109 = fadd <2 x float> %106, %108, !dbg !21
  %110 = fmul <2 x float> %109, %104, !dbg !22
  %111 = fadd <2 x float> %110, zeroinitializer, !dbg !23
  %112 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !20
  %113 = insertelement <2 x i32> %112, i32 %93, i64 1, !dbg !20
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !20
  %115 = insertelement <2 x float> poison, float %50, i64 0, !dbg !21
  %116 = insertelement <2 x float> %115, float %51, i64 1, !dbg !21
  %117 = insertelement <2 x float> poison, float %74, i64 0, !dbg !21
  %118 = insertelement <2 x float> %117, float %75, i64 1, !dbg !21
  %119 = fadd <2 x float> %116, %118, !dbg !21
  %120 = fmul <2 x float> %119, %114, !dbg !22
  %121 = fadd <2 x float> %120, zeroinitializer, !dbg !23
  %122 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !20
  %123 = insertelement <2 x i32> %122, i32 %95, i64 1, !dbg !20
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !20
  %125 = insertelement <2 x float> poison, float %52, i64 0, !dbg !21
  %126 = insertelement <2 x float> %125, float %53, i64 1, !dbg !21
  %127 = insertelement <2 x float> poison, float %76, i64 0, !dbg !21
  %128 = insertelement <2 x float> %127, float %77, i64 1, !dbg !21
  %129 = fadd <2 x float> %126, %128, !dbg !21
  %130 = fmul <2 x float> %129, %124, !dbg !22
  %131 = fadd <2 x float> %130, zeroinitializer, !dbg !23
  %132 = fadd float %100, %101, !dbg !24
  %133 = extractelement <2 x float> %111, i64 0, !dbg !24
  %134 = fadd float %132, %133, !dbg !24
  %135 = extractelement <2 x float> %111, i64 1, !dbg !24
  %136 = fadd float %134, %135, !dbg !24
  %137 = extractelement <2 x float> %121, i64 0, !dbg !24
  %138 = fadd float %136, %137, !dbg !24
  %139 = extractelement <2 x float> %121, i64 1, !dbg !24
  %140 = fadd float %138, %139, !dbg !24
  %141 = extractelement <2 x float> %131, i64 0, !dbg !24
  %142 = fadd float %140, %141, !dbg !24
  %143 = extractelement <2 x float> %131, i64 1, !dbg !24
  %144 = fadd float %142, %143, !dbg !24
  %145 = select i1 %12, float %144, float 0.000000e+00, !dbg !24
  %146 = bitcast float %145 to i32, !dbg !30
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 16, i32 31), !dbg !30
  %148 = bitcast i32 %147 to float, !dbg !30
  %149 = fadd float %145, %148, !dbg !24
  %150 = bitcast float %149 to i32, !dbg !30
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 8, i32 31), !dbg !30
  %152 = bitcast i32 %151 to float, !dbg !30
  %153 = fadd float %149, %152, !dbg !24
  %154 = bitcast float %153 to i32, !dbg !30
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !30
  %156 = bitcast i32 %155 to float, !dbg !30
  %157 = fadd float %153, %156, !dbg !24
  %158 = bitcast float %157 to i32, !dbg !30
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 2, i32 31), !dbg !30
  %160 = bitcast i32 %159 to float, !dbg !30
  %161 = fadd float %157, %160, !dbg !24
  %162 = bitcast float %161 to i32, !dbg !30
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !30
  %164 = bitcast i32 %163 to float, !dbg !30
  %165 = fadd float %161, %164, !dbg !24
  %166 = icmp eq i32 %8, 0, !dbg !30
  %167 = zext nneg i32 %10 to i64, !dbg !30
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i64 %167, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, float %165, i1 %166) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %169 = icmp slt i32 %7, 8, !dbg !30
  %170 = sext i32 %7 to i64, !dbg !30
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i64 %170, !dbg !30
  %172 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %171, i1 %169) #3, !dbg !30
  %173 = bitcast float %172 to i32, !dbg !30
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !30
  %175 = bitcast i32 %174 to float, !dbg !30
  %176 = fadd float %172, %175, !dbg !24
  %177 = bitcast float %176 to i32, !dbg !30
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !30
  %179 = bitcast i32 %178 to float, !dbg !30
  %180 = fadd float %176, %179, !dbg !24
  %181 = bitcast float %180 to i32, !dbg !30
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !30
  %183 = bitcast i32 %182 to float, !dbg !30
  %184 = fadd float %180, %183, !dbg !24
  %185 = and i32 %7, 7, !dbg !30
  %186 = icmp eq i32 %185, 0, !dbg !30
  %187 = and i1 %169, %186, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, float %184, i1 %187) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %188 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !30
  %189 = sext i32 %11 to i64, !dbg !32
  %190 = getelementptr float, ptr addrspace(1) %3, i64 %189, !dbg !32
  %191 = icmp eq i32 %urem, 0, !dbg !33
  %192 = and i1 %191, %12, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %190, i1 %192) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "czx7fjzk43u7ggxsr3jqadfxaih7xpqs3vqmu3jgoiygonc2q4xe.py", directory: "/tmp/torchinductor_zeus/zx")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 31, column: 45, scope: !5)
!12 = !DILocation(line: 31, column: 40, scope: !5)
!13 = !DILocation(line: 31, column: 34, scope: !5)
!14 = !DILocation(line: 31, column: 51, scope: !5)
!15 = !DILocation(line: 31, column: 110, scope: !5)
!16 = !DILocation(line: 32, column: 34, scope: !5)
!17 = !DILocation(line: 32, column: 51, scope: !5)
!18 = !DILocation(line: 32, column: 110, scope: !5)
!19 = !DILocation(line: 33, column: 34, scope: !5)
!20 = !DILocation(line: 33, column: 51, scope: !5)
!21 = !DILocation(line: 36, column: 22, scope: !5)
!22 = !DILocation(line: 37, column: 22, scope: !5)
!23 = !DILocation(line: 39, column: 23, scope: !5)
!24 = !DILocation(line: 233, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !5, file: !26, discriminator: 0)
!28 = !DILocation(line: 243, column: 36, scope: !25, inlinedAt: !29)
!29 = !DILocation(line: 41, column: 25, scope: !25)
!30 = !DILocation(line: 243, column: 36, scope: !27, inlinedAt: !31)
!31 = !DILocation(line: 41, column: 25, scope: !27)
!32 = !DILocation(line: 42, column: 25, scope: !5)
!33 = !DILocation(line: 42, column: 36, scope: !5)
!34 = !DILocation(line: 42, column: 4, scope: !5)
