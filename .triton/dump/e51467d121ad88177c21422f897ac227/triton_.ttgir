#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [8], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: i64 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<67108864> : tensor<512xi64, #blocked>
    %cst_0 = arith.constant dense<8192> : tensor<512xi64, #blocked>
    %cst_1 = arith.constant dense<1024> : tensor<512xi64, #blocked>
    %cst_2 = arith.constant dense<2> : tensor<512xi64, #blocked>
    %cst_3 = arith.constant dense<512> : tensor<512xi64, #blocked>
    %cst_4 = arith.constant dense<384> : tensor<512xi64, #blocked>
    %cst_5 = arith.constant dense<640> : tensor<512xi64, #blocked>
    %cst_6 = arith.constant dense<256> : tensor<512xi64, #blocked>
    %cst_7 = arith.constant dense<-128> : tensor<512xi64, #blocked>
    %cst_8 = arith.constant dense<128> : tensor<512xi64, #blocked>
    %cst_9 = arith.constant dense<2097152> : tensor<512xi64, #blocked>
    %cst_10 = arith.constant dense<33554432> : tensor<512xi64, #blocked>
    %cst_11 = arith.constant dense<16> : tensor<512xi64, #blocked>
    %c512_i64 = arith.constant 512 : i64
    %cst_12 = arith.constant dense<0.000000e+00> : tensor<512xf32, #blocked>
    %cst_13 = arith.constant dense<0.000000e+00> : tensor<512xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.extsi %0 : i32 to i64
    %2 = arith.muli %1, %c512_i64 : i64
    %3 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked>
    %4 = arith.extsi %3 : tensor<512xi32, #blocked> to tensor<512xi64, #blocked>
    %5 = tt.splat %2 : (i64) -> tensor<512xi64, #blocked>
    %6 = arith.addi %5, %4 : tensor<512xi64, #blocked>
    %7 = arith.remsi %6, %cst_6 : tensor<512xi64, #blocked>
    %8 = arith.divsi %6, %cst_6 : tensor<512xi64, #blocked>
    %9 = arith.remsi %8, %cst_0 : tensor<512xi64, #blocked>
    %10 = arith.divsi %6, %cst_9 : tensor<512xi64, #blocked>
    %11 = arith.remsi %10, %cst_11 : tensor<512xi64, #blocked>
    %12 = arith.divsi %6, %cst_10 : tensor<512xi64, #blocked>
    %13 = arith.remsi %6, %cst_9 : tensor<512xi64, #blocked>
    %14 = arith.cmpi slt, %7, %cst_6 : tensor<512xi64, #blocked>
    %15 = arith.remsi %11, %cst_2 : tensor<512xi64, #blocked>
    %16 = arith.muli %15, %cst_6 : tensor<512xi64, #blocked>
    %17 = arith.addi %7, %16 : tensor<512xi64, #blocked>
    %18 = arith.divsi %11, %cst_2 : tensor<512xi64, #blocked>
    %19 = arith.muli %18, %cst_1 : tensor<512xi64, #blocked>
    %20 = arith.addi %17, %19 : tensor<512xi64, #blocked>
    %21 = arith.muli %9, %cst_0 : tensor<512xi64, #blocked>
    %22 = arith.addi %20, %21 : tensor<512xi64, #blocked>
    %23 = arith.muli %12, %cst : tensor<512xi64, #blocked>
    %24 = arith.addi %22, %23 : tensor<512xi64, #blocked>
    %25 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %26 = tt.addptr %25, %24 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi64, #blocked>
    %27 = tt.load %26, %14, %cst_13 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %28 = arith.extf %27 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %29 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %30 = tt.addptr %29, %13 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi64, #blocked>
    %31 = tt.load %30, %14, %cst_12 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %32 = arith.mulf %28, %31 : tensor<512xf32, #blocked>
    %33 = arith.cmpi slt, %7, %cst_8 : tensor<512xi64, #blocked>
    %34 = arith.andi %33, %14 : tensor<512xi1, #blocked>
    %35 = arith.addi %7, %cst_8 : tensor<512xi64, #blocked>
    %36 = arith.addi %35, %16 : tensor<512xi64, #blocked>
    %37 = arith.addi %36, %19 : tensor<512xi64, #blocked>
    %38 = arith.addi %37, %21 : tensor<512xi64, #blocked>
    %39 = arith.addi %38, %23 : tensor<512xi64, #blocked>
    %40 = tt.addptr %25, %39 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi64, #blocked>
    %41 = tt.load %40, %34, %cst_13 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %42 = arith.extf %41 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %43 = arith.subf %cst_12, %42 : tensor<512xf32, #blocked>
    %44 = arith.select %34, %43, %cst_12 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %45 = arith.cmpi sge, %7, %cst_8 : tensor<512xi64, #blocked>
    %46 = arith.andi %45, %14 : tensor<512xi1, #blocked>
    %47 = arith.addi %7, %cst_7 : tensor<512xi64, #blocked>
    %48 = arith.addi %47, %16 : tensor<512xi64, #blocked>
    %49 = arith.addi %48, %19 : tensor<512xi64, #blocked>
    %50 = arith.addi %49, %21 : tensor<512xi64, #blocked>
    %51 = arith.addi %50, %23 : tensor<512xi64, #blocked>
    %52 = tt.addptr %25, %51 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi64, #blocked>
    %53 = tt.load %52, %46, %cst_13 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %54 = arith.extf %53 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %55 = arith.select %46, %54, %cst_12 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %56 = arith.select %33, %44, %55 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %57 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %58 = tt.addptr %57, %13 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi64, #blocked>
    %59 = tt.load %58, %14, %cst_12 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %60 = arith.mulf %56, %59 : tensor<512xf32, #blocked>
    %61 = arith.addf %32, %60 : tensor<512xf32, #blocked>
    %62 = arith.cmpi sge, %7, %cst_6 : tensor<512xi64, #blocked>
    %63 = tt.load %26, %62, %cst_13 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %64 = arith.extf %63 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %65 = arith.select %62, %64, %cst_12 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %66 = arith.select %14, %61, %65 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %67 = arith.addi %7, %cst_3 : tensor<512xi64, #blocked>
    %68 = arith.addi %67, %19 : tensor<512xi64, #blocked>
    %69 = arith.addi %68, %21 : tensor<512xi64, #blocked>
    %70 = arith.addi %69, %23 : tensor<512xi64, #blocked>
    %71 = tt.addptr %25, %70 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi64, #blocked>
    %72 = tt.load %71, %14, %cst_13 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %73 = arith.extf %72 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %74 = arith.mulf %73, %31 : tensor<512xf32, #blocked>
    %75 = arith.addi %7, %cst_5 : tensor<512xi64, #blocked>
    %76 = arith.addi %75, %19 : tensor<512xi64, #blocked>
    %77 = arith.addi %76, %21 : tensor<512xi64, #blocked>
    %78 = arith.addi %77, %23 : tensor<512xi64, #blocked>
    %79 = tt.addptr %25, %78 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi64, #blocked>
    %80 = tt.load %79, %34, %cst_13 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %81 = arith.extf %80 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %82 = arith.subf %cst_12, %81 : tensor<512xf32, #blocked>
    %83 = arith.select %34, %82, %cst_12 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %84 = arith.addi %7, %cst_4 : tensor<512xi64, #blocked>
    %85 = arith.addi %84, %19 : tensor<512xi64, #blocked>
    %86 = arith.addi %85, %21 : tensor<512xi64, #blocked>
    %87 = arith.addi %86, %23 : tensor<512xi64, #blocked>
    %88 = tt.addptr %25, %87 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi64, #blocked>
    %89 = tt.load %88, %46, %cst_13 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %90 = arith.extf %89 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %91 = arith.select %46, %90, %cst_12 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %92 = arith.select %33, %83, %91 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %93 = arith.mulf %92, %59 : tensor<512xf32, #blocked>
    %94 = arith.addf %74, %93 : tensor<512xf32, #blocked>
    %95 = tt.load %71, %62, %cst_13 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %96 = arith.extf %95 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %97 = arith.select %62, %96, %cst_12 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %98 = arith.select %14, %94, %97 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %99 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %100 = tt.addptr %99, %6 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi64, #blocked>
    %101 = arith.truncf %66 : tensor<512xf32, #blocked> to tensor<512xbf16, #blocked>
    tt.store %100, %101 {cache = 1 : i32, evict = 1 : i32} : tensor<512xbf16, #blocked>
    %102 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %103 = tt.addptr %102, %6 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi64, #blocked>
    %104 = arith.truncf %98 : tensor<512xf32, #blocked> to tensor<512xbf16, #blocked>
    tt.store %103, %104 {cache = 1 : i32, evict = 1 : i32} : tensor<512xbf16, #blocked>
    tt.return
  }
}
