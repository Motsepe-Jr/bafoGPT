; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 127, !dbg !8
  %9 = shl nuw nsw i32 %8, 3, !dbg !8
  %10 = or i32 %8, 128, !dbg !8
  %11 = or i32 %8, 256, !dbg !8
  %12 = or i32 %8, 384, !dbg !8
  %13 = or i32 %8, 512, !dbg !8
  %14 = or i32 %8, 640, !dbg !8
  %15 = or i32 %8, 768, !dbg !8
  %16 = or i32 %8, 896, !dbg !8
  %17 = shl nuw nsw i32 %8, 2, !dbg !8
  %18 = or i32 %17, 512, !dbg !8
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %20 = shl i32 %19, 10, !dbg !10
  %21 = or i32 %20, %9, !dbg !11
  %22 = or i32 %20, %8, !dbg !11
  %23 = or i32 %20, %10, !dbg !11
  %24 = or i32 %20, %11, !dbg !11
  %25 = or i32 %20, %12, !dbg !11
  %26 = or i32 %20, %14, !dbg !11
  %27 = or i32 %20, %15, !dbg !11
  %28 = or i32 %20, %16, !dbg !11
  %29 = or i32 %20, %17, !dbg !11
  %30 = or i32 %20, %18, !dbg !11
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %32 = icmp slt i32 %31, 256, !dbg !13
  %.frozen = freeze i32 %21
  %33 = sdiv i32 %.frozen, 512, !dbg !14
  %34 = mul i32 %33, 512
  %.decomposed = sub i32 %.frozen, %34
  %35 = srem i32 %22, 512, !dbg !15
  %36 = srem i32 %23, 512, !dbg !15
  %37 = srem i32 %24, 512, !dbg !15
  %38 = srem i32 %25, 512, !dbg !15
  %39 = srem i32 %26, 512, !dbg !15
  %40 = srem i32 %27, 512, !dbg !15
  %41 = srem i32 %28, 512, !dbg !15
  %.frozen46 = freeze i32 %29
  %42 = sdiv i32 %.frozen46, 512, !dbg !14
  %43 = mul i32 %42, 512
  %.decomposed47 = sub i32 %.frozen46, %43
  %.frozen48 = freeze i32 %30
  %44 = sdiv i32 %.frozen48, 512, !dbg !14
  %45 = mul i32 %44, 512
  %.decomposed49 = sub i32 %.frozen48, %45
  %46 = shl i32 %31, 9, !dbg !16
  %47 = add i32 %.decomposed, %46, !dbg !17
  %48 = add i32 %.decomposed47, %46, !dbg !17
  %49 = add i32 %.decomposed49, %46, !dbg !17
  %50 = shl i32 %33, 18, !dbg !18
  %51 = add i32 %47, %50, !dbg !19
  %52 = sext i32 %51 to i64, !dbg !20
  %53 = getelementptr i16, ptr addrspace(1) %0, i64 %52, !dbg !20
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %32) #2, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !21
  %59 = trunc i32 %55 to i16, !dbg !21
  %extelt.offset = lshr i32 %55, 16, !dbg !21
  %60 = trunc i32 %extelt.offset to i16, !dbg !21
  %61 = trunc i32 %56 to i16, !dbg !21
  %extelt.offset1 = lshr i32 %56, 16, !dbg !21
  %62 = trunc i32 %extelt.offset1 to i16, !dbg !21
  %63 = trunc i32 %57 to i16, !dbg !21
  %extelt.offset2 = lshr i32 %57, 16, !dbg !21
  %64 = trunc i32 %extelt.offset2 to i16, !dbg !21
  %65 = trunc i32 %58 to i16, !dbg !21
  %extelt.offset3 = lshr i32 %58, 16, !dbg !21
  %66 = trunc i32 %extelt.offset3 to i16, !dbg !21
  %67 = shl nuw nsw i32 %8, 4, !dbg !22
  %68 = zext nneg i32 %67 to i64, !dbg !22
  %69 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %68, !dbg !22
  %70 = insertelement <1 x i16> undef, i16 %59, i64 0, !dbg !22
  store <1 x i16> %70, ptr addrspace(3) %69, align 2, !dbg !22
  %71 = or i32 %67, 2, !dbg !22
  %72 = zext nneg i32 %71 to i64, !dbg !22
  %73 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %72, !dbg !22
  %74 = insertelement <1 x i16> undef, i16 %60, i64 0, !dbg !22
  store <1 x i16> %74, ptr addrspace(3) %73, align 2, !dbg !22
  %75 = or i32 %67, 4, !dbg !22
  %76 = zext nneg i32 %75 to i64, !dbg !22
  %77 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %76, !dbg !22
  %78 = insertelement <1 x i16> undef, i16 %61, i64 0, !dbg !22
  store <1 x i16> %78, ptr addrspace(3) %77, align 2, !dbg !22
  %79 = or i32 %67, 6, !dbg !22
  %80 = zext nneg i32 %79 to i64, !dbg !22
  %81 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %80, !dbg !22
  %82 = insertelement <1 x i16> undef, i16 %62, i64 0, !dbg !22
  store <1 x i16> %82, ptr addrspace(3) %81, align 2, !dbg !22
  %83 = or i32 %67, 8, !dbg !22
  %84 = zext nneg i32 %83 to i64, !dbg !22
  %85 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %84, !dbg !22
  %86 = insertelement <1 x i16> undef, i16 %63, i64 0, !dbg !22
  store <1 x i16> %86, ptr addrspace(3) %85, align 2, !dbg !22
  %87 = or i32 %67, 10, !dbg !22
  %88 = zext nneg i32 %87 to i64, !dbg !22
  %89 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %88, !dbg !22
  %90 = insertelement <1 x i16> undef, i16 %64, i64 0, !dbg !22
  store <1 x i16> %90, ptr addrspace(3) %89, align 2, !dbg !22
  %91 = or i32 %67, 12, !dbg !22
  %92 = zext nneg i32 %91 to i64, !dbg !22
  %93 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %92, !dbg !22
  %94 = insertelement <1 x i16> undef, i16 %65, i64 0, !dbg !22
  store <1 x i16> %94, ptr addrspace(3) %93, align 2, !dbg !22
  %95 = or i32 %67, 14, !dbg !22
  %96 = zext nneg i32 %95 to i64, !dbg !22
  %97 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %96, !dbg !22
  %98 = insertelement <1 x i16> undef, i16 %66, i64 0, !dbg !22
  store <1 x i16> %98, ptr addrspace(3) %97, align 2, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %99 = shl nuw nsw i32 %8, 1, !dbg !22
  %100 = zext nneg i32 %99 to i64, !dbg !22
  %101 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %100, !dbg !22
  %102 = load i16, ptr addrspace(3) %101, align 2, !dbg !22
  %103 = shl nuw nsw i32 %10, 1, !dbg !22
  %104 = zext nneg i32 %103 to i64, !dbg !22
  %105 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %104, !dbg !22
  %106 = load i16, ptr addrspace(3) %105, align 2, !dbg !22
  %107 = shl nuw nsw i32 %11, 1, !dbg !22
  %108 = zext nneg i32 %107 to i64, !dbg !22
  %109 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %108, !dbg !22
  %110 = load i16, ptr addrspace(3) %109, align 2, !dbg !22
  %111 = shl nuw nsw i32 %12, 1, !dbg !22
  %112 = zext nneg i32 %111 to i64, !dbg !22
  %113 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %112, !dbg !22
  %114 = load i16, ptr addrspace(3) %113, align 2, !dbg !22
  %115 = shl nuw nsw i32 %13, 1, !dbg !22
  %116 = zext nneg i32 %115 to i64, !dbg !22
  %117 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %116, !dbg !22
  %118 = load i16, ptr addrspace(3) %117, align 2, !dbg !22
  %119 = shl nuw nsw i32 %14, 1, !dbg !22
  %120 = zext nneg i32 %119 to i64, !dbg !22
  %121 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %120, !dbg !22
  %122 = load i16, ptr addrspace(3) %121, align 2, !dbg !22
  %123 = shl nuw nsw i32 %15, 1, !dbg !22
  %124 = zext nneg i32 %123 to i64, !dbg !22
  %125 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %124, !dbg !22
  %126 = load i16, ptr addrspace(3) %125, align 2, !dbg !22
  %127 = shl nuw nsw i32 %16, 1, !dbg !22
  %128 = zext nneg i32 %127 to i64, !dbg !22
  %129 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %128, !dbg !22
  %130 = load i16, ptr addrspace(3) %129, align 2, !dbg !22
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #2, !dbg !22
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #2, !dbg !22
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #2, !dbg !22
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #2, !dbg !22
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #2, !dbg !22
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #2, !dbg !22
  %137 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #2, !dbg !22
  %138 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %130) #2, !dbg !22
  %139 = shl nsw i32 %35, 8, !dbg !23
  %140 = shl nsw i32 %36, 8, !dbg !23
  %141 = shl nsw i32 %37, 8, !dbg !23
  %142 = shl nsw i32 %38, 8, !dbg !23
  %143 = shl nsw i32 %39, 8, !dbg !23
  %144 = shl nsw i32 %40, 8, !dbg !23
  %145 = shl nsw i32 %41, 8, !dbg !23
  %146 = add i32 %139, %31, !dbg !24
  %147 = add i32 %140, %31, !dbg !24
  %148 = add i32 %141, %31, !dbg !24
  %149 = add i32 %142, %31, !dbg !24
  %150 = add i32 %143, %31, !dbg !24
  %151 = add i32 %144, %31, !dbg !24
  %152 = add i32 %145, %31, !dbg !24
  %153 = sext i32 %146 to i64, !dbg !25
  %154 = getelementptr i16, ptr addrspace(1) %1, i64 %153, !dbg !25
  %155 = sext i32 %147 to i64, !dbg !25
  %156 = getelementptr i16, ptr addrspace(1) %1, i64 %155, !dbg !25
  %157 = sext i32 %148 to i64, !dbg !25
  %158 = getelementptr i16, ptr addrspace(1) %1, i64 %157, !dbg !25
  %159 = sext i32 %149 to i64, !dbg !25
  %160 = getelementptr i16, ptr addrspace(1) %1, i64 %159, !dbg !25
  %161 = sext i32 %150 to i64, !dbg !25
  %162 = getelementptr i16, ptr addrspace(1) %1, i64 %161, !dbg !25
  %163 = sext i32 %151 to i64, !dbg !25
  %164 = getelementptr i16, ptr addrspace(1) %1, i64 %163, !dbg !25
  %165 = sext i32 %152 to i64, !dbg !25
  %166 = getelementptr i16, ptr addrspace(1) %1, i64 %165, !dbg !25
  %167 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %154, i1 %32) #2, !dbg !26
  %168 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %156, i1 %32) #2, !dbg !26
  %169 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %158, i1 %32) #2, !dbg !26
  %170 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %160, i1 %32) #2, !dbg !26
  %171 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %154, i1 %32) #2, !dbg !26
  %172 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %162, i1 %32) #2, !dbg !26
  %173 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %164, i1 %32) #2, !dbg !26
  %174 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %166, i1 %32) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %175 = zext nneg i32 %8 to i64, !dbg !27
  %176 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %175, !dbg !27
  %177 = insertelement <1 x i16> undef, i16 %167, i64 0, !dbg !27
  store <1 x i16> %177, ptr addrspace(3) %176, align 2, !dbg !27
  %178 = zext nneg i32 %10 to i64, !dbg !27
  %179 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %178, !dbg !27
  %180 = insertelement <1 x i16> undef, i16 %168, i64 0, !dbg !27
  store <1 x i16> %180, ptr addrspace(3) %179, align 2, !dbg !27
  %181 = zext nneg i32 %11 to i64, !dbg !27
  %182 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %181, !dbg !27
  %183 = insertelement <1 x i16> undef, i16 %169, i64 0, !dbg !27
  store <1 x i16> %183, ptr addrspace(3) %182, align 2, !dbg !27
  %184 = zext nneg i32 %12 to i64, !dbg !27
  %185 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %184, !dbg !27
  %186 = insertelement <1 x i16> undef, i16 %170, i64 0, !dbg !27
  store <1 x i16> %186, ptr addrspace(3) %185, align 2, !dbg !27
  %187 = zext nneg i32 %13 to i64, !dbg !27
  %188 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %187, !dbg !27
  %189 = insertelement <1 x i16> undef, i16 %171, i64 0, !dbg !27
  store <1 x i16> %189, ptr addrspace(3) %188, align 2, !dbg !27
  %190 = zext nneg i32 %14 to i64, !dbg !27
  %191 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %190, !dbg !27
  %192 = insertelement <1 x i16> undef, i16 %172, i64 0, !dbg !27
  store <1 x i16> %192, ptr addrspace(3) %191, align 2, !dbg !27
  %193 = zext nneg i32 %15 to i64, !dbg !27
  %194 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %193, !dbg !27
  %195 = insertelement <1 x i16> undef, i16 %173, i64 0, !dbg !27
  store <1 x i16> %195, ptr addrspace(3) %194, align 2, !dbg !27
  %196 = zext nneg i32 %16 to i64, !dbg !27
  %197 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %196, !dbg !27
  %198 = insertelement <1 x i16> undef, i16 %174, i64 0, !dbg !27
  store <1 x i16> %198, ptr addrspace(3) %197, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %199 = zext nneg i32 %9 to i64, !dbg !27
  %200 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %199, !dbg !27
  %201 = load i16, ptr addrspace(3) %200, align 16, !dbg !27
  %202 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %200, i64 0, i64 1, !dbg !27
  %203 = load i16, ptr addrspace(3) %202, align 2, !dbg !27
  %204 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %200, i64 0, i64 2, !dbg !27
  %205 = load i16, ptr addrspace(3) %204, align 4, !dbg !27
  %206 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %200, i64 0, i64 3, !dbg !27
  %207 = load i16, ptr addrspace(3) %206, align 2, !dbg !27
  %208 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %200, i64 0, i64 4, !dbg !27
  %209 = load i16, ptr addrspace(3) %208, align 8, !dbg !27
  %210 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %200, i64 0, i64 5, !dbg !27
  %211 = load i16, ptr addrspace(3) %210, align 2, !dbg !27
  %212 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %200, i64 0, i64 6, !dbg !27
  %213 = load i16, ptr addrspace(3) %212, align 4, !dbg !27
  %214 = getelementptr inbounds <8 x i16>, ptr addrspace(3) %200, i64 0, i64 7, !dbg !27
  %215 = load i16, ptr addrspace(3) %214, align 2, !dbg !27
  %216 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %201) #2, !dbg !27
  %217 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %203) #2, !dbg !27
  %218 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %205) #2, !dbg !27
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %207) #2, !dbg !27
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %209) #2, !dbg !27
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %211) #2, !dbg !27
  %222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %213) #2, !dbg !27
  %223 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %215) #2, !dbg !27
  %224 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %167) #2, !dbg !27
  %225 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %168) #2, !dbg !27
  %226 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %169) #2, !dbg !27
  %227 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %170) #2, !dbg !27
  %228 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %171) #2, !dbg !27
  %229 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %172) #2, !dbg !27
  %230 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %173) #2, !dbg !27
  %231 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %174) #2, !dbg !27
  %232 = add i32 %47, 131072, !dbg !28
  %233 = add i32 %232, %50, !dbg !29
  %234 = sext i32 %233 to i64, !dbg !30
  %235 = getelementptr i16, ptr addrspace(1) %0, i64 %234, !dbg !30
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %235, i1 %32) #2, !dbg !31
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !31
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !31
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !31
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !31
  %241 = trunc i32 %237 to i16, !dbg !31
  %extelt.offset4 = lshr i32 %237, 16, !dbg !31
  %242 = trunc i32 %extelt.offset4 to i16, !dbg !31
  %243 = trunc i32 %238 to i16, !dbg !31
  %extelt.offset5 = lshr i32 %238, 16, !dbg !31
  %244 = trunc i32 %extelt.offset5 to i16, !dbg !31
  %245 = trunc i32 %239 to i16, !dbg !31
  %extelt.offset6 = lshr i32 %239, 16, !dbg !31
  %246 = trunc i32 %extelt.offset6 to i16, !dbg !31
  %247 = trunc i32 %240 to i16, !dbg !31
  %extelt.offset7 = lshr i32 %240, 16, !dbg !31
  %248 = trunc i32 %extelt.offset7 to i16, !dbg !31
  %249 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %241) #2, !dbg !32
  %250 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %242) #2, !dbg !32
  %251 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %243) #2, !dbg !32
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %244) #2, !dbg !32
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %245) #2, !dbg !32
  %254 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %246) #2, !dbg !32
  %255 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %247) #2, !dbg !32
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %248) #2, !dbg !32
  %257 = icmp sgt i32 %31, 255, !dbg !33
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !34
  %259 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !34
  %260 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !34
  %261 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !34
  %262 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !34
  %263 = trunc i32 %259 to i16, !dbg !34
  %extelt.offset8 = lshr i32 %259, 16, !dbg !34
  %264 = trunc i32 %extelt.offset8 to i16, !dbg !34
  %265 = trunc i32 %260 to i16, !dbg !34
  %extelt.offset9 = lshr i32 %260, 16, !dbg !34
  %266 = trunc i32 %extelt.offset9 to i16, !dbg !34
  %267 = trunc i32 %261 to i16, !dbg !34
  %extelt.offset10 = lshr i32 %261, 16, !dbg !34
  %268 = trunc i32 %extelt.offset10 to i16, !dbg !34
  %269 = trunc i32 %262 to i16, !dbg !34
  %extelt.offset11 = lshr i32 %262, 16, !dbg !34
  %270 = trunc i32 %extelt.offset11 to i16, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %271 = insertelement <1 x i16> undef, i16 %263, i64 0, !dbg !35
  store <1 x i16> %271, ptr addrspace(3) %69, align 2, !dbg !35
  %272 = insertelement <1 x i16> undef, i16 %264, i64 0, !dbg !35
  store <1 x i16> %272, ptr addrspace(3) %73, align 2, !dbg !35
  %273 = insertelement <1 x i16> undef, i16 %265, i64 0, !dbg !35
  store <1 x i16> %273, ptr addrspace(3) %77, align 2, !dbg !35
  %274 = insertelement <1 x i16> undef, i16 %266, i64 0, !dbg !35
  store <1 x i16> %274, ptr addrspace(3) %81, align 2, !dbg !35
  %275 = insertelement <1 x i16> undef, i16 %267, i64 0, !dbg !35
  store <1 x i16> %275, ptr addrspace(3) %85, align 2, !dbg !35
  %276 = insertelement <1 x i16> undef, i16 %268, i64 0, !dbg !35
  store <1 x i16> %276, ptr addrspace(3) %89, align 2, !dbg !35
  %277 = insertelement <1 x i16> undef, i16 %269, i64 0, !dbg !35
  store <1 x i16> %277, ptr addrspace(3) %93, align 2, !dbg !35
  %278 = insertelement <1 x i16> undef, i16 %270, i64 0, !dbg !35
  store <1 x i16> %278, ptr addrspace(3) %97, align 2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %279 = load i16, ptr addrspace(3) %101, align 2, !dbg !35
  %280 = load i16, ptr addrspace(3) %105, align 2, !dbg !35
  %281 = load i16, ptr addrspace(3) %109, align 2, !dbg !35
  %282 = load i16, ptr addrspace(3) %113, align 2, !dbg !35
  %283 = load i16, ptr addrspace(3) %117, align 2, !dbg !35
  %284 = load i16, ptr addrspace(3) %121, align 2, !dbg !35
  %285 = load i16, ptr addrspace(3) %125, align 2, !dbg !35
  %286 = load i16, ptr addrspace(3) %129, align 2, !dbg !35
  %287 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %279) #2, !dbg !36
  %288 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %280) #2, !dbg !36
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %281) #2, !dbg !36
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %282) #2, !dbg !36
  %291 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %283) #2, !dbg !36
  %292 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %284) #2, !dbg !36
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #2, !dbg !36
  %294 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #2, !dbg !36
  %295 = select i1 %257, float %287, float 0.000000e+00, !dbg !35
  %296 = select i1 %257, float %288, float 0.000000e+00, !dbg !35
  %297 = select i1 %257, float %289, float 0.000000e+00, !dbg !35
  %298 = select i1 %257, float %290, float 0.000000e+00, !dbg !35
  %299 = select i1 %257, float %291, float 0.000000e+00, !dbg !35
  %300 = select i1 %257, float %292, float 0.000000e+00, !dbg !35
  %301 = select i1 %257, float %293, float 0.000000e+00, !dbg !35
  %302 = select i1 %257, float %294, float 0.000000e+00, !dbg !35
  %303 = fmul float %131, %224, !dbg !37
  %304 = fmul float %132, %225, !dbg !37
  %305 = fmul float %133, %226, !dbg !37
  %306 = fmul float %134, %227, !dbg !37
  %307 = fmul float %135, %228, !dbg !37
  %308 = fmul float %136, %229, !dbg !37
  %309 = fmul float %137, %230, !dbg !37
  %310 = fmul float %138, %231, !dbg !37
  %311 = icmp sgt i32 %31, 127, !dbg !38
  %312 = add i32 %47, -65536, !dbg !39
  %313 = add i32 %312, %50, !dbg !40
  %314 = sext i32 %313 to i64, !dbg !41
  %315 = getelementptr i16, ptr addrspace(1) %0, i64 %314, !dbg !41
  %316 = and i32 %31, -128, !dbg !42
  %317 = icmp eq i32 %316, 128, !dbg !42
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %315, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317) #2, !dbg !43
  %319 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !43
  %320 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !43
  %321 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !43
  %322 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !43
  %323 = trunc i32 %319 to i16, !dbg !43
  %extelt.offset12 = lshr i32 %319, 16, !dbg !43
  %324 = trunc i32 %extelt.offset12 to i16, !dbg !43
  %325 = trunc i32 %320 to i16, !dbg !43
  %extelt.offset13 = lshr i32 %320, 16, !dbg !43
  %326 = trunc i32 %extelt.offset13 to i16, !dbg !43
  %327 = trunc i32 %321 to i16, !dbg !43
  %extelt.offset14 = lshr i32 %321, 16, !dbg !43
  %328 = trunc i32 %extelt.offset14 to i16, !dbg !43
  %329 = trunc i32 %322 to i16, !dbg !43
  %extelt.offset15 = lshr i32 %322, 16, !dbg !43
  %330 = trunc i32 %extelt.offset15 to i16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %331 = insertelement <1 x i16> undef, i16 %323, i64 0, !dbg !44
  store <1 x i16> %331, ptr addrspace(3) %69, align 2, !dbg !44
  %332 = insertelement <1 x i16> undef, i16 %324, i64 0, !dbg !44
  store <1 x i16> %332, ptr addrspace(3) %73, align 2, !dbg !44
  %333 = insertelement <1 x i16> undef, i16 %325, i64 0, !dbg !44
  store <1 x i16> %333, ptr addrspace(3) %77, align 2, !dbg !44
  %334 = insertelement <1 x i16> undef, i16 %326, i64 0, !dbg !44
  store <1 x i16> %334, ptr addrspace(3) %81, align 2, !dbg !44
  %335 = insertelement <1 x i16> undef, i16 %327, i64 0, !dbg !44
  store <1 x i16> %335, ptr addrspace(3) %85, align 2, !dbg !44
  %336 = insertelement <1 x i16> undef, i16 %328, i64 0, !dbg !44
  store <1 x i16> %336, ptr addrspace(3) %89, align 2, !dbg !44
  %337 = insertelement <1 x i16> undef, i16 %329, i64 0, !dbg !44
  store <1 x i16> %337, ptr addrspace(3) %93, align 2, !dbg !44
  %338 = insertelement <1 x i16> undef, i16 %330, i64 0, !dbg !44
  store <1 x i16> %338, ptr addrspace(3) %97, align 2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %339 = load i16, ptr addrspace(3) %101, align 2, !dbg !44
  %340 = load i16, ptr addrspace(3) %105, align 2, !dbg !44
  %341 = load i16, ptr addrspace(3) %109, align 2, !dbg !44
  %342 = load i16, ptr addrspace(3) %113, align 2, !dbg !44
  %343 = load i16, ptr addrspace(3) %117, align 2, !dbg !44
  %344 = load i16, ptr addrspace(3) %121, align 2, !dbg !44
  %345 = load i16, ptr addrspace(3) %125, align 2, !dbg !44
  %346 = load i16, ptr addrspace(3) %129, align 2, !dbg !44
  %347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #2, !dbg !44
  %348 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %340) #2, !dbg !44
  %349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %341) #2, !dbg !44
  %350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %342) #2, !dbg !44
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %343) #2, !dbg !44
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %344) #2, !dbg !44
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #2, !dbg !44
  %354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #2, !dbg !44
  %355 = add i32 %31, -128, !dbg !45
  %356 = add i32 %139, %355, !dbg !46
  %357 = add i32 %140, %355, !dbg !46
  %358 = add i32 %141, %355, !dbg !46
  %359 = add i32 %142, %355, !dbg !46
  %360 = add i32 %143, %355, !dbg !46
  %361 = add i32 %144, %355, !dbg !46
  %362 = add i32 %145, %355, !dbg !46
  %363 = sext i32 %356 to i64, !dbg !47
  %364 = getelementptr i16, ptr addrspace(1) %2, i64 %363, !dbg !47
  %365 = sext i32 %357 to i64, !dbg !47
  %366 = getelementptr i16, ptr addrspace(1) %2, i64 %365, !dbg !47
  %367 = sext i32 %358 to i64, !dbg !47
  %368 = getelementptr i16, ptr addrspace(1) %2, i64 %367, !dbg !47
  %369 = sext i32 %359 to i64, !dbg !47
  %370 = getelementptr i16, ptr addrspace(1) %2, i64 %369, !dbg !47
  %371 = sext i32 %360 to i64, !dbg !47
  %372 = getelementptr i16, ptr addrspace(1) %2, i64 %371, !dbg !47
  %373 = sext i32 %361 to i64, !dbg !47
  %374 = getelementptr i16, ptr addrspace(1) %2, i64 %373, !dbg !47
  %375 = sext i32 %362 to i64, !dbg !47
  %376 = getelementptr i16, ptr addrspace(1) %2, i64 %375, !dbg !47
  %377 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %364, i1 %317, i16 0, i1 %317) #2, !dbg !48
  %378 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %366, i1 %317, i16 0, i1 %317) #2, !dbg !48
  %379 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %368, i1 %317, i16 0, i1 %317) #2, !dbg !48
  %380 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %370, i1 %317, i16 0, i1 %317) #2, !dbg !48
  %381 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %364, i1 %317, i16 0, i1 %317) #2, !dbg !48
  %382 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %372, i1 %317, i16 0, i1 %317) #2, !dbg !48
  %383 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %374, i1 %317, i16 0, i1 %317) #2, !dbg !48
  %384 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %376, i1 %317, i16 0, i1 %317) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %385 = insertelement <1 x i16> undef, i16 %377, i64 0, !dbg !49
  store <1 x i16> %385, ptr addrspace(3) %176, align 2, !dbg !49
  %386 = insertelement <1 x i16> undef, i16 %378, i64 0, !dbg !49
  store <1 x i16> %386, ptr addrspace(3) %179, align 2, !dbg !49
  %387 = insertelement <1 x i16> undef, i16 %379, i64 0, !dbg !49
  store <1 x i16> %387, ptr addrspace(3) %182, align 2, !dbg !49
  %388 = insertelement <1 x i16> undef, i16 %380, i64 0, !dbg !49
  store <1 x i16> %388, ptr addrspace(3) %185, align 2, !dbg !49
  %389 = insertelement <1 x i16> undef, i16 %381, i64 0, !dbg !49
  store <1 x i16> %389, ptr addrspace(3) %188, align 2, !dbg !49
  %390 = insertelement <1 x i16> undef, i16 %382, i64 0, !dbg !49
  store <1 x i16> %390, ptr addrspace(3) %191, align 2, !dbg !49
  %391 = insertelement <1 x i16> undef, i16 %383, i64 0, !dbg !49
  store <1 x i16> %391, ptr addrspace(3) %194, align 2, !dbg !49
  %392 = insertelement <1 x i16> undef, i16 %384, i64 0, !dbg !49
  store <1 x i16> %392, ptr addrspace(3) %197, align 2, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %393 = load i16, ptr addrspace(3) %200, align 16, !dbg !49
  %394 = load i16, ptr addrspace(3) %202, align 2, !dbg !49
  %395 = load i16, ptr addrspace(3) %204, align 4, !dbg !49
  %396 = load i16, ptr addrspace(3) %206, align 2, !dbg !49
  %397 = load i16, ptr addrspace(3) %208, align 8, !dbg !49
  %398 = load i16, ptr addrspace(3) %210, align 2, !dbg !49
  %399 = load i16, ptr addrspace(3) %212, align 4, !dbg !49
  %400 = load i16, ptr addrspace(3) %214, align 2, !dbg !49
  %401 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %393) #2, !dbg !49
  %402 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %394) #2, !dbg !49
  %403 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %395) #2, !dbg !49
  %404 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %396) #2, !dbg !49
  %405 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %397) #2, !dbg !49
  %406 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %398) #2, !dbg !49
  %407 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %399) #2, !dbg !49
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %400) #2, !dbg !49
  %409 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #2, !dbg !49
  %410 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %378) #2, !dbg !49
  %411 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #2, !dbg !49
  %412 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #2, !dbg !49
  %413 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #2, !dbg !49
  %414 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #2, !dbg !49
  %415 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %383) #2, !dbg !49
  %416 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %384) #2, !dbg !49
  %417 = fmul float %347, %409, !dbg !50
  %418 = fmul float %348, %410, !dbg !50
  %419 = fmul float %349, %411, !dbg !50
  %420 = fmul float %350, %412, !dbg !50
  %421 = fmul float %351, %413, !dbg !50
  %422 = fmul float %352, %414, !dbg !50
  %423 = fmul float %353, %415, !dbg !50
  %424 = fmul float %354, %416, !dbg !50
  %425 = fsub float 0.000000e+00, %417, !dbg !51
  %426 = fsub float 0.000000e+00, %418, !dbg !51
  %427 = fsub float 0.000000e+00, %419, !dbg !51
  %428 = fsub float 0.000000e+00, %420, !dbg !51
  %429 = fsub float 0.000000e+00, %421, !dbg !51
  %430 = fsub float 0.000000e+00, %422, !dbg !51
  %431 = fsub float 0.000000e+00, %423, !dbg !51
  %432 = fsub float 0.000000e+00, %424, !dbg !51
  %433 = select i1 %311, float %425, float 0.000000e+00, !dbg !35
  %434 = select i1 %311, float %426, float 0.000000e+00, !dbg !35
  %435 = select i1 %311, float %427, float 0.000000e+00, !dbg !35
  %436 = select i1 %311, float %428, float 0.000000e+00, !dbg !35
  %437 = select i1 %311, float %429, float 0.000000e+00, !dbg !35
  %438 = select i1 %311, float %430, float 0.000000e+00, !dbg !35
  %439 = select i1 %311, float %431, float 0.000000e+00, !dbg !35
  %440 = select i1 %311, float %432, float 0.000000e+00, !dbg !35
  %441 = fadd float %303, %433, !dbg !52
  %442 = fadd float %304, %434, !dbg !52
  %443 = fadd float %305, %435, !dbg !52
  %444 = fadd float %306, %436, !dbg !52
  %445 = fadd float %307, %437, !dbg !52
  %446 = fadd float %308, %438, !dbg !52
  %447 = fadd float %309, %439, !dbg !52
  %448 = fadd float %310, %440, !dbg !52
  %449 = icmp slt i32 %31, 128, !dbg !53
  %450 = add i32 %47, 65536, !dbg !54
  %451 = add i32 %450, %50, !dbg !55
  %452 = sext i32 %451 to i64, !dbg !56
  %453 = getelementptr i16, ptr addrspace(1) %0, i64 %452, !dbg !56
  %454 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %453, i1 %449, i32 0, i1 %449, i32 0, i1 %449, i32 0, i1 %449, i32 0, i1 %449) #2, !dbg !57
  %455 = extractvalue { i32, i32, i32, i32 } %454, 0, !dbg !57
  %456 = extractvalue { i32, i32, i32, i32 } %454, 1, !dbg !57
  %457 = extractvalue { i32, i32, i32, i32 } %454, 2, !dbg !57
  %458 = extractvalue { i32, i32, i32, i32 } %454, 3, !dbg !57
  %459 = trunc i32 %455 to i16, !dbg !57
  %extelt.offset16 = lshr i32 %455, 16, !dbg !57
  %460 = trunc i32 %extelt.offset16 to i16, !dbg !57
  %461 = trunc i32 %456 to i16, !dbg !57
  %extelt.offset17 = lshr i32 %456, 16, !dbg !57
  %462 = trunc i32 %extelt.offset17 to i16, !dbg !57
  %463 = trunc i32 %457 to i16, !dbg !57
  %extelt.offset18 = lshr i32 %457, 16, !dbg !57
  %464 = trunc i32 %extelt.offset18 to i16, !dbg !57
  %465 = trunc i32 %458 to i16, !dbg !57
  %extelt.offset19 = lshr i32 %458, 16, !dbg !57
  %466 = trunc i32 %extelt.offset19 to i16, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %467 = insertelement <1 x i16> undef, i16 %459, i64 0, !dbg !58
  store <1 x i16> %467, ptr addrspace(3) %69, align 2, !dbg !58
  %468 = insertelement <1 x i16> undef, i16 %460, i64 0, !dbg !58
  store <1 x i16> %468, ptr addrspace(3) %73, align 2, !dbg !58
  %469 = insertelement <1 x i16> undef, i16 %461, i64 0, !dbg !58
  store <1 x i16> %469, ptr addrspace(3) %77, align 2, !dbg !58
  %470 = insertelement <1 x i16> undef, i16 %462, i64 0, !dbg !58
  store <1 x i16> %470, ptr addrspace(3) %81, align 2, !dbg !58
  %471 = insertelement <1 x i16> undef, i16 %463, i64 0, !dbg !58
  store <1 x i16> %471, ptr addrspace(3) %85, align 2, !dbg !58
  %472 = insertelement <1 x i16> undef, i16 %464, i64 0, !dbg !58
  store <1 x i16> %472, ptr addrspace(3) %89, align 2, !dbg !58
  %473 = insertelement <1 x i16> undef, i16 %465, i64 0, !dbg !58
  store <1 x i16> %473, ptr addrspace(3) %93, align 2, !dbg !58
  %474 = insertelement <1 x i16> undef, i16 %466, i64 0, !dbg !58
  store <1 x i16> %474, ptr addrspace(3) %97, align 2, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %475 = load i16, ptr addrspace(3) %101, align 2, !dbg !58
  %476 = load i16, ptr addrspace(3) %105, align 2, !dbg !58
  %477 = load i16, ptr addrspace(3) %109, align 2, !dbg !58
  %478 = load i16, ptr addrspace(3) %113, align 2, !dbg !58
  %479 = load i16, ptr addrspace(3) %117, align 2, !dbg !58
  %480 = load i16, ptr addrspace(3) %121, align 2, !dbg !58
  %481 = load i16, ptr addrspace(3) %125, align 2, !dbg !58
  %482 = load i16, ptr addrspace(3) %129, align 2, !dbg !58
  %483 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %475) #2, !dbg !58
  %484 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %476) #2, !dbg !58
  %485 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %477) #2, !dbg !58
  %486 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %478) #2, !dbg !58
  %487 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %479) #2, !dbg !58
  %488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #2, !dbg !58
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #2, !dbg !58
  %490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #2, !dbg !58
  %491 = add i32 %31, 128, !dbg !59
  %492 = add i32 %139, %491, !dbg !60
  %493 = add i32 %140, %491, !dbg !60
  %494 = add i32 %141, %491, !dbg !60
  %495 = add i32 %142, %491, !dbg !60
  %496 = add i32 %143, %491, !dbg !60
  %497 = add i32 %144, %491, !dbg !60
  %498 = add i32 %145, %491, !dbg !60
  %499 = sext i32 %492 to i64, !dbg !61
  %500 = getelementptr i16, ptr addrspace(1) %2, i64 %499, !dbg !61
  %501 = sext i32 %493 to i64, !dbg !61
  %502 = getelementptr i16, ptr addrspace(1) %2, i64 %501, !dbg !61
  %503 = sext i32 %494 to i64, !dbg !61
  %504 = getelementptr i16, ptr addrspace(1) %2, i64 %503, !dbg !61
  %505 = sext i32 %495 to i64, !dbg !61
  %506 = getelementptr i16, ptr addrspace(1) %2, i64 %505, !dbg !61
  %507 = sext i32 %496 to i64, !dbg !61
  %508 = getelementptr i16, ptr addrspace(1) %2, i64 %507, !dbg !61
  %509 = sext i32 %497 to i64, !dbg !61
  %510 = getelementptr i16, ptr addrspace(1) %2, i64 %509, !dbg !61
  %511 = sext i32 %498 to i64, !dbg !61
  %512 = getelementptr i16, ptr addrspace(1) %2, i64 %511, !dbg !61
  %513 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %500, i1 %449, i16 0, i1 %449) #2, !dbg !62
  %514 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %502, i1 %449, i16 0, i1 %449) #2, !dbg !62
  %515 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %504, i1 %449, i16 0, i1 %449) #2, !dbg !62
  %516 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %506, i1 %449, i16 0, i1 %449) #2, !dbg !62
  %517 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %500, i1 %449, i16 0, i1 %449) #2, !dbg !62
  %518 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %508, i1 %449, i16 0, i1 %449) #2, !dbg !62
  %519 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %510, i1 %449, i16 0, i1 %449) #2, !dbg !62
  %520 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %512, i1 %449, i16 0, i1 %449) #2, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %521 = insertelement <1 x i16> undef, i16 %513, i64 0, !dbg !63
  store <1 x i16> %521, ptr addrspace(3) %176, align 2, !dbg !63
  %522 = insertelement <1 x i16> undef, i16 %514, i64 0, !dbg !63
  store <1 x i16> %522, ptr addrspace(3) %179, align 2, !dbg !63
  %523 = insertelement <1 x i16> undef, i16 %515, i64 0, !dbg !63
  store <1 x i16> %523, ptr addrspace(3) %182, align 2, !dbg !63
  %524 = insertelement <1 x i16> undef, i16 %516, i64 0, !dbg !63
  store <1 x i16> %524, ptr addrspace(3) %185, align 2, !dbg !63
  %525 = insertelement <1 x i16> undef, i16 %517, i64 0, !dbg !63
  store <1 x i16> %525, ptr addrspace(3) %188, align 2, !dbg !63
  %526 = insertelement <1 x i16> undef, i16 %518, i64 0, !dbg !63
  store <1 x i16> %526, ptr addrspace(3) %191, align 2, !dbg !63
  %527 = insertelement <1 x i16> undef, i16 %519, i64 0, !dbg !63
  store <1 x i16> %527, ptr addrspace(3) %194, align 2, !dbg !63
  %528 = insertelement <1 x i16> undef, i16 %520, i64 0, !dbg !63
  store <1 x i16> %528, ptr addrspace(3) %197, align 2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %529 = load i16, ptr addrspace(3) %200, align 16, !dbg !63
  %530 = load i16, ptr addrspace(3) %202, align 2, !dbg !63
  %531 = load i16, ptr addrspace(3) %204, align 4, !dbg !63
  %532 = load i16, ptr addrspace(3) %206, align 2, !dbg !63
  %533 = load i16, ptr addrspace(3) %208, align 8, !dbg !63
  %534 = load i16, ptr addrspace(3) %210, align 2, !dbg !63
  %535 = load i16, ptr addrspace(3) %212, align 4, !dbg !63
  %536 = load i16, ptr addrspace(3) %214, align 2, !dbg !63
  %537 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %529) #2, !dbg !63
  %538 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %530) #2, !dbg !63
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %531) #2, !dbg !63
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %532) #2, !dbg !63
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %533) #2, !dbg !63
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %534) #2, !dbg !63
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %535) #2, !dbg !63
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %536) #2, !dbg !63
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %513) #2, !dbg !63
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %514) #2, !dbg !63
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %515) #2, !dbg !63
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %516) #2, !dbg !63
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %517) #2, !dbg !63
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %518) #2, !dbg !63
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #2, !dbg !63
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #2, !dbg !63
  %553 = fmul float %483, %545, !dbg !64
  %554 = fmul float %484, %546, !dbg !64
  %555 = fmul float %485, %547, !dbg !64
  %556 = fmul float %486, %548, !dbg !64
  %557 = fmul float %487, %549, !dbg !64
  %558 = fmul float %488, %550, !dbg !64
  %559 = fmul float %489, %551, !dbg !64
  %560 = fmul float %490, %552, !dbg !64
  %561 = select i1 %449, float %553, float 0.000000e+00, !dbg !35
  %562 = select i1 %449, float %554, float 0.000000e+00, !dbg !35
  %563 = select i1 %449, float %555, float 0.000000e+00, !dbg !35
  %564 = select i1 %449, float %556, float 0.000000e+00, !dbg !35
  %565 = select i1 %449, float %557, float 0.000000e+00, !dbg !35
  %566 = select i1 %449, float %558, float 0.000000e+00, !dbg !35
  %567 = select i1 %449, float %559, float 0.000000e+00, !dbg !35
  %568 = select i1 %449, float %560, float 0.000000e+00, !dbg !35
  %569 = fadd float %441, %561, !dbg !65
  %570 = fadd float %442, %562, !dbg !65
  %571 = fadd float %443, %563, !dbg !65
  %572 = fadd float %444, %564, !dbg !65
  %573 = fadd float %445, %565, !dbg !65
  %574 = fadd float %446, %566, !dbg !65
  %575 = fadd float %447, %567, !dbg !65
  %576 = fadd float %448, %568, !dbg !65
  %577 = fadd float %295, %569, !dbg !66
  %578 = fadd float %296, %570, !dbg !66
  %579 = fadd float %297, %571, !dbg !66
  %580 = fadd float %298, %572, !dbg !66
  %581 = fadd float %299, %573, !dbg !66
  %582 = fadd float %300, %574, !dbg !66
  %583 = fadd float %301, %575, !dbg !66
  %584 = fadd float %302, %576, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %585 = getelementptr float, ptr addrspace(3) @global_smem, i64 %175, !dbg !66
  %586 = insertelement <1 x float> undef, float %577, i64 0, !dbg !66
  store <1 x float> %586, ptr addrspace(3) %585, align 4, !dbg !66
  %587 = getelementptr float, ptr addrspace(3) @global_smem, i64 %178, !dbg !66
  %588 = insertelement <1 x float> undef, float %578, i64 0, !dbg !66
  store <1 x float> %588, ptr addrspace(3) %587, align 4, !dbg !66
  %589 = getelementptr float, ptr addrspace(3) @global_smem, i64 %181, !dbg !66
  %590 = insertelement <1 x float> undef, float %579, i64 0, !dbg !66
  store <1 x float> %590, ptr addrspace(3) %589, align 4, !dbg !66
  %591 = getelementptr float, ptr addrspace(3) @global_smem, i64 %184, !dbg !66
  %592 = insertelement <1 x float> undef, float %580, i64 0, !dbg !66
  store <1 x float> %592, ptr addrspace(3) %591, align 4, !dbg !66
  %593 = getelementptr float, ptr addrspace(3) @global_smem, i64 %187, !dbg !66
  %594 = insertelement <1 x float> undef, float %581, i64 0, !dbg !66
  store <1 x float> %594, ptr addrspace(3) %593, align 4, !dbg !66
  %595 = getelementptr float, ptr addrspace(3) @global_smem, i64 %190, !dbg !66
  %596 = insertelement <1 x float> undef, float %582, i64 0, !dbg !66
  store <1 x float> %596, ptr addrspace(3) %595, align 4, !dbg !66
  %597 = getelementptr float, ptr addrspace(3) @global_smem, i64 %193, !dbg !66
  %598 = insertelement <1 x float> undef, float %583, i64 0, !dbg !66
  store <1 x float> %598, ptr addrspace(3) %597, align 4, !dbg !66
  %599 = getelementptr float, ptr addrspace(3) @global_smem, i64 %196, !dbg !66
  %600 = insertelement <1 x float> undef, float %584, i64 0, !dbg !66
  store <1 x float> %600, ptr addrspace(3) %599, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %601 = getelementptr float, ptr addrspace(3) @global_smem, i64 %199, !dbg !66
  %602 = add i32 %47, 196608, !dbg !67
  %603 = add i32 %602, %50, !dbg !68
  %604 = sext i32 %603 to i64, !dbg !69
  %605 = getelementptr i16, ptr addrspace(1) %0, i64 %604, !dbg !69
  %606 = load <8 x float>, ptr addrspace(3) %601, align 32, !dbg !66
  %607 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %235, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !70
  %608 = extractvalue { i32, i32, i32, i32 } %607, 0, !dbg !70
  %609 = extractvalue { i32, i32, i32, i32 } %607, 1, !dbg !70
  %610 = extractvalue { i32, i32, i32, i32 } %607, 2, !dbg !70
  %611 = extractvalue { i32, i32, i32, i32 } %607, 3, !dbg !70
  %612 = trunc i32 %608 to i16, !dbg !70
  %extelt.offset20 = lshr i32 %608, 16, !dbg !70
  %613 = trunc i32 %extelt.offset20 to i16, !dbg !70
  %614 = trunc i32 %609 to i16, !dbg !70
  %extelt.offset21 = lshr i32 %609, 16, !dbg !70
  %615 = trunc i32 %extelt.offset21 to i16, !dbg !70
  %616 = trunc i32 %610 to i16, !dbg !70
  %extelt.offset22 = lshr i32 %610, 16, !dbg !70
  %617 = trunc i32 %extelt.offset22 to i16, !dbg !70
  %618 = trunc i32 %611 to i16, !dbg !70
  %extelt.offset23 = lshr i32 %611, 16, !dbg !70
  %619 = trunc i32 %extelt.offset23 to i16, !dbg !70
  %620 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %612) #2, !dbg !71
  %621 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %613) #2, !dbg !71
  %622 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %614) #2, !dbg !71
  %623 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %615) #2, !dbg !71
  %624 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %616) #2, !dbg !71
  %625 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %617) #2, !dbg !71
  %626 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %618) #2, !dbg !71
  %627 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %619) #2, !dbg !71
  %628 = insertelement <8 x i1> poison, i1 %257, i64 0, !dbg !35
  %629 = shufflevector <8 x i1> %628, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !35
  %630 = insertelement <8 x float> poison, float %620, i64 0, !dbg !35
  %631 = insertelement <8 x float> %630, float %621, i64 1, !dbg !35
  %632 = insertelement <8 x float> %631, float %622, i64 2, !dbg !35
  %633 = insertelement <8 x float> %632, float %623, i64 3, !dbg !35
  %634 = insertelement <8 x float> %633, float %624, i64 4, !dbg !35
  %635 = insertelement <8 x float> %634, float %625, i64 5, !dbg !35
  %636 = insertelement <8 x float> %635, float %626, i64 6, !dbg !35
  %637 = insertelement <8 x float> %636, float %627, i64 7, !dbg !35
  %638 = select <8 x i1> %629, <8 x float> %637, <8 x float> zeroinitializer, !dbg !35
  %639 = insertelement <8 x float> poison, float %216, i64 0, !dbg !72
  %640 = insertelement <8 x float> %639, float %217, i64 1, !dbg !72
  %641 = insertelement <8 x float> %640, float %218, i64 2, !dbg !72
  %642 = insertelement <8 x float> %641, float %219, i64 3, !dbg !72
  %643 = insertelement <8 x float> %642, float %220, i64 4, !dbg !72
  %644 = insertelement <8 x float> %643, float %221, i64 5, !dbg !72
  %645 = insertelement <8 x float> %644, float %222, i64 6, !dbg !72
  %646 = insertelement <8 x float> %645, float %223, i64 7, !dbg !72
  %647 = insertelement <8 x float> poison, float %249, i64 0, !dbg !72
  %648 = insertelement <8 x float> %647, float %250, i64 1, !dbg !72
  %649 = insertelement <8 x float> %648, float %251, i64 2, !dbg !72
  %650 = insertelement <8 x float> %649, float %252, i64 3, !dbg !72
  %651 = insertelement <8 x float> %650, float %253, i64 4, !dbg !72
  %652 = insertelement <8 x float> %651, float %254, i64 5, !dbg !72
  %653 = insertelement <8 x float> %652, float %255, i64 6, !dbg !72
  %654 = insertelement <8 x float> %653, float %256, i64 7, !dbg !72
  %655 = fmul <8 x float> %646, %654, !dbg !72
  %656 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %453, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317) #2, !dbg !73
  %657 = extractvalue { i32, i32, i32, i32 } %656, 0, !dbg !73
  %658 = extractvalue { i32, i32, i32, i32 } %656, 1, !dbg !73
  %659 = extractvalue { i32, i32, i32, i32 } %656, 2, !dbg !73
  %660 = extractvalue { i32, i32, i32, i32 } %656, 3, !dbg !73
  %661 = trunc i32 %657 to i16, !dbg !73
  %extelt.offset24 = lshr i32 %657, 16, !dbg !73
  %662 = trunc i32 %extelt.offset24 to i16, !dbg !73
  %663 = trunc i32 %658 to i16, !dbg !73
  %extelt.offset25 = lshr i32 %658, 16, !dbg !73
  %664 = trunc i32 %extelt.offset25 to i16, !dbg !73
  %665 = trunc i32 %659 to i16, !dbg !73
  %extelt.offset26 = lshr i32 %659, 16, !dbg !73
  %666 = trunc i32 %extelt.offset26 to i16, !dbg !73
  %667 = trunc i32 %660 to i16, !dbg !73
  %extelt.offset27 = lshr i32 %660, 16, !dbg !73
  %668 = trunc i32 %extelt.offset27 to i16, !dbg !73
  %669 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %661) #2, !dbg !74
  %670 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %662) #2, !dbg !74
  %671 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %663) #2, !dbg !74
  %672 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %664) #2, !dbg !74
  %673 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %665) #2, !dbg !74
  %674 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %666) #2, !dbg !74
  %675 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %667) #2, !dbg !74
  %676 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %668) #2, !dbg !74
  %677 = insertelement <8 x float> poison, float %401, i64 0, !dbg !75
  %678 = insertelement <8 x float> %677, float %402, i64 1, !dbg !75
  %679 = insertelement <8 x float> %678, float %403, i64 2, !dbg !75
  %680 = insertelement <8 x float> %679, float %404, i64 3, !dbg !75
  %681 = insertelement <8 x float> %680, float %405, i64 4, !dbg !75
  %682 = insertelement <8 x float> %681, float %406, i64 5, !dbg !75
  %683 = insertelement <8 x float> %682, float %407, i64 6, !dbg !75
  %684 = insertelement <8 x float> %683, float %408, i64 7, !dbg !75
  %685 = insertelement <8 x float> poison, float %669, i64 0, !dbg !75
  %686 = insertelement <8 x float> %685, float %670, i64 1, !dbg !75
  %687 = insertelement <8 x float> %686, float %671, i64 2, !dbg !75
  %688 = insertelement <8 x float> %687, float %672, i64 3, !dbg !75
  %689 = insertelement <8 x float> %688, float %673, i64 4, !dbg !75
  %690 = insertelement <8 x float> %689, float %674, i64 5, !dbg !75
  %691 = insertelement <8 x float> %690, float %675, i64 6, !dbg !75
  %692 = insertelement <8 x float> %691, float %676, i64 7, !dbg !75
  %693 = fmul <8 x float> %684, %692, !dbg !75
  %694 = fsub <8 x float> zeroinitializer, %693, !dbg !76
  %695 = insertelement <8 x i1> poison, i1 %311, i64 0, !dbg !35
  %696 = shufflevector <8 x i1> %695, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !35
  %697 = select <8 x i1> %696, <8 x float> %694, <8 x float> zeroinitializer, !dbg !35
  %698 = fadd <8 x float> %655, %697, !dbg !77
  %699 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %605, i1 %449, i32 0, i1 %449, i32 0, i1 %449, i32 0, i1 %449, i32 0, i1 %449) #2, !dbg !78
  %700 = extractvalue { i32, i32, i32, i32 } %699, 0, !dbg !78
  %701 = extractvalue { i32, i32, i32, i32 } %699, 1, !dbg !78
  %702 = extractvalue { i32, i32, i32, i32 } %699, 2, !dbg !78
  %703 = extractvalue { i32, i32, i32, i32 } %699, 3, !dbg !78
  %704 = trunc i32 %700 to i16, !dbg !78
  %extelt.offset28 = lshr i32 %700, 16, !dbg !78
  %705 = trunc i32 %extelt.offset28 to i16, !dbg !78
  %706 = trunc i32 %701 to i16, !dbg !78
  %extelt.offset29 = lshr i32 %701, 16, !dbg !78
  %707 = trunc i32 %extelt.offset29 to i16, !dbg !78
  %708 = trunc i32 %702 to i16, !dbg !78
  %extelt.offset30 = lshr i32 %702, 16, !dbg !78
  %709 = trunc i32 %extelt.offset30 to i16, !dbg !78
  %710 = trunc i32 %703 to i16, !dbg !78
  %extelt.offset31 = lshr i32 %703, 16, !dbg !78
  %711 = trunc i32 %extelt.offset31 to i16, !dbg !78
  %712 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %704) #2, !dbg !79
  %713 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %705) #2, !dbg !79
  %714 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %706) #2, !dbg !79
  %715 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %707) #2, !dbg !79
  %716 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %708) #2, !dbg !79
  %717 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %709) #2, !dbg !79
  %718 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %710) #2, !dbg !79
  %719 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %711) #2, !dbg !79
  %720 = insertelement <8 x float> poison, float %537, i64 0, !dbg !80
  %721 = insertelement <8 x float> %720, float %538, i64 1, !dbg !80
  %722 = insertelement <8 x float> %721, float %539, i64 2, !dbg !80
  %723 = insertelement <8 x float> %722, float %540, i64 3, !dbg !80
  %724 = insertelement <8 x float> %723, float %541, i64 4, !dbg !80
  %725 = insertelement <8 x float> %724, float %542, i64 5, !dbg !80
  %726 = insertelement <8 x float> %725, float %543, i64 6, !dbg !80
  %727 = insertelement <8 x float> %726, float %544, i64 7, !dbg !80
  %728 = insertelement <8 x float> poison, float %712, i64 0, !dbg !80
  %729 = insertelement <8 x float> %728, float %713, i64 1, !dbg !80
  %730 = insertelement <8 x float> %729, float %714, i64 2, !dbg !80
  %731 = insertelement <8 x float> %730, float %715, i64 3, !dbg !80
  %732 = insertelement <8 x float> %731, float %716, i64 4, !dbg !80
  %733 = insertelement <8 x float> %732, float %717, i64 5, !dbg !80
  %734 = insertelement <8 x float> %733, float %718, i64 6, !dbg !80
  %735 = insertelement <8 x float> %734, float %719, i64 7, !dbg !80
  %736 = fmul <8 x float> %727, %735, !dbg !80
  %737 = insertelement <8 x i1> poison, i1 %449, i64 0, !dbg !35
  %738 = shufflevector <8 x i1> %737, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !35
  %739 = select <8 x i1> %738, <8 x float> %736, <8 x float> zeroinitializer, !dbg !35
  %740 = fadd <8 x float> %698, %739, !dbg !81
  %741 = fadd <8 x float> %638, %740, !dbg !82
  %742 = fadd <8 x float> %606, %741, !dbg !83
  %743 = shl i32 %42, 17, !dbg !84
  %744 = shl i32 %44, 17, !dbg !84
  %745 = add i32 %48, %743, !dbg !85
  %746 = add i32 %49, %744, !dbg !85
  %747 = sext i32 %745 to i64, !dbg !86
  %748 = getelementptr float, ptr addrspace(1) %3, i64 %747, !dbg !86
  %749 = sext i32 %746 to i64, !dbg !86
  %750 = getelementptr float, ptr addrspace(1) %3, i64 %749, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  store <8 x float> %742, ptr addrspace(3) %601, align 32, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %751 = zext nneg i32 %17 to i64, !dbg !87
  %752 = getelementptr float, ptr addrspace(3) @global_smem, i64 %751, !dbg !87
  %753 = zext nneg i32 %18 to i64, !dbg !87
  %754 = getelementptr float, ptr addrspace(3) @global_smem, i64 %753, !dbg !87
  %755 = load <4 x i32>, ptr addrspace(3) %754, align 16, !dbg !87
  %.extract = load i32, ptr addrspace(3) %752, align 16, !dbg !87
  %756 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %752, i64 0, i64 1, !dbg !87
  %.extract33 = load i32, ptr addrspace(3) %756, align 4, !dbg !87
  %757 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %752, i64 0, i64 2, !dbg !87
  %.extract35 = load i32, ptr addrspace(3) %757, align 8, !dbg !87
  %758 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %752, i64 0, i64 3, !dbg !87
  %.extract37 = load i32, ptr addrspace(3) %758, align 4, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract33, i32 %.extract35, i32 %.extract37, ptr addrspace(1) %748, i1 %32) #2, !dbg !87
  %.extract39 = extractelement <4 x i32> %755, i64 0, !dbg !87
  %.extract41 = extractelement <4 x i32> %755, i64 1, !dbg !87
  %.extract43 = extractelement <4 x i32> %755, i64 2, !dbg !87
  %.extract45 = extractelement <4 x i32> %755, i64 3, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract41, i32 %.extract43, i32 %.extract45, ptr addrspace(1) %750, i1 %32) #2, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cexb3fxv27xo3isieqli4ygwbrvzecpsqvkmtxaxofllauf5fthu.py", directory: "/tmp/torchinductor_zeus/ex")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 28, scope: !5)
!13 = !DILocation(line: 26, column: 21, scope: !5)
!14 = !DILocation(line: 29, column: 20, scope: !5)
!15 = !DILocation(line: 28, column: 18, scope: !5)
!16 = !DILocation(line: 30, column: 40, scope: !5)
!17 = !DILocation(line: 30, column: 36, scope: !5)
!18 = !DILocation(line: 30, column: 54, scope: !5)
!19 = !DILocation(line: 30, column: 47, scope: !5)
!20 = !DILocation(line: 30, column: 30, scope: !5)
!21 = !DILocation(line: 30, column: 60, scope: !5)
!22 = !DILocation(line: 30, column: 100, scope: !5)
!23 = !DILocation(line: 31, column: 40, scope: !5)
!24 = !DILocation(line: 31, column: 36, scope: !5)
!25 = !DILocation(line: 31, column: 30, scope: !5)
!26 = !DILocation(line: 31, column: 46, scope: !5)
!27 = !DILocation(line: 31, column: 86, scope: !5)
!28 = !DILocation(line: 32, column: 46, scope: !5)
!29 = !DILocation(line: 32, column: 57, scope: !5)
!30 = !DILocation(line: 32, column: 31, scope: !5)
!31 = !DILocation(line: 32, column: 70, scope: !5)
!32 = !DILocation(line: 32, column: 110, scope: !5)
!33 = !DILocation(line: 35, column: 19, scope: !5)
!34 = !DILocation(line: 36, column: 60, scope: !5)
!35 = !DILocation(line: 0, scope: !5)
!36 = !DILocation(line: 36, column: 118, scope: !5)
!37 = !DILocation(line: 41, column: 19, scope: !5)
!38 = !DILocation(line: 43, column: 20, scope: !5)
!39 = !DILocation(line: 44, column: 48, scope: !5)
!40 = !DILocation(line: 44, column: 59, scope: !5)
!41 = !DILocation(line: 44, column: 31, scope: !5)
!42 = !DILocation(line: 44, column: 80, scope: !5)
!43 = !DILocation(line: 44, column: 72, scope: !5)
!44 = !DILocation(line: 44, column: 131, scope: !5)
!45 = !DILocation(line: 45, column: 40, scope: !5)
!46 = !DILocation(line: 45, column: 46, scope: !5)
!47 = !DILocation(line: 45, column: 31, scope: !5)
!48 = !DILocation(line: 45, column: 56, scope: !5)
!49 = !DILocation(line: 45, column: 115, scope: !5)
!50 = !DILocation(line: 46, column: 20, scope: !5)
!51 = !DILocation(line: 47, column: 13, scope: !5)
!52 = !DILocation(line: 51, column: 20, scope: !5)
!53 = !DILocation(line: 52, column: 19, scope: !5)
!54 = !DILocation(line: 53, column: 45, scope: !5)
!55 = !DILocation(line: 53, column: 56, scope: !5)
!56 = !DILocation(line: 53, column: 31, scope: !5)
!57 = !DILocation(line: 53, column: 69, scope: !5)
!58 = !DILocation(line: 53, column: 128, scope: !5)
!59 = !DILocation(line: 54, column: 37, scope: !5)
!60 = !DILocation(line: 54, column: 43, scope: !5)
!61 = !DILocation(line: 54, column: 31, scope: !5)
!62 = !DILocation(line: 54, column: 53, scope: !5)
!63 = !DILocation(line: 54, column: 112, scope: !5)
!64 = !DILocation(line: 55, column: 20, scope: !5)
!65 = !DILocation(line: 59, column: 20, scope: !5)
!66 = !DILocation(line: 60, column: 19, scope: !5)
!67 = !DILocation(line: 74, column: 46, scope: !5)
!68 = !DILocation(line: 74, column: 57, scope: !5)
!69 = !DILocation(line: 74, column: 31, scope: !5)
!70 = !DILocation(line: 62, column: 70, scope: !5)
!71 = !DILocation(line: 62, column: 128, scope: !5)
!72 = !DILocation(line: 66, column: 20, scope: !5)
!73 = !DILocation(line: 67, column: 69, scope: !5)
!74 = !DILocation(line: 67, column: 128, scope: !5)
!75 = !DILocation(line: 68, column: 20, scope: !5)
!76 = !DILocation(line: 69, column: 13, scope: !5)
!77 = !DILocation(line: 73, column: 20, scope: !5)
!78 = !DILocation(line: 74, column: 70, scope: !5)
!79 = !DILocation(line: 74, column: 129, scope: !5)
!80 = !DILocation(line: 75, column: 20, scope: !5)
!81 = !DILocation(line: 79, column: 20, scope: !5)
!82 = !DILocation(line: 80, column: 20, scope: !5)
!83 = !DILocation(line: 82, column: 20, scope: !5)
!84 = !DILocation(line: 83, column: 49, scope: !5)
!85 = !DILocation(line: 83, column: 42, scope: !5)
!86 = !DILocation(line: 83, column: 25, scope: !5)
!87 = !DILocation(line: 83, column: 62, scope: !5)
!88 = !DILocation(line: 83, column: 4, scope: !5)
