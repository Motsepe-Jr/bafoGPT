module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c512_i32 = arith.constant 512 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_1 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c512_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %5 = arith.muli %0, %c2304_i32 : i32
    %6 = tt.splat %5 : (i32) -> tensor<1x2048xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %8 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %9 = scf.for %arg6 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg7 = %cst_3) -> (tensor<1x2048xf32>)  : i32 {
      %22 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32>
      %23 = arith.addi %22, %4 : tensor<1x2048xi32>
      %24 = arith.cmpi slt, %23, %cst_2 : tensor<1x2048xi32>
      %25 = arith.addi %23, %6 : tensor<1x2048xi32>
      %26 = tt.addptr %7, %25 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %27 = arith.andi %24, %8 : tensor<1x2048xi1>
      %28 = tt.load %26, %27, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %29 = arith.mulf %28, %28 : tensor<1x2048xf32>
      %30 = arith.addf %arg7, %29 : tensor<1x2048xf32>
      %31 = arith.select %27, %30, %arg7 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %31 : tensor<1x2048xf32>
    }
    %10 = "tt.reduce"(%9) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %22 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %22 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %11 = tt.expand_dims %10 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %12 = tt.addptr %arg2, %0 : !tt.ptr<f32, 1>, i32
    %13 = tt.splat %12 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %13, %11, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %14 = arith.muli %0, %c2304_i32 : i32
    %15 = tt.splat %14 : (i32) -> tensor<1x2048xi32>
    %16 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %17 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %18 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %19 = arith.divf %11, %cst_1 : tensor<1x1xf32>
    %20 = arith.addf %19, %cst_0 : tensor<1x1xf32>
    %21 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg6 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %22 = tt.splat %arg6 : (i32) -> tensor<1x2048xi32>
      %23 = arith.addi %22, %4 : tensor<1x2048xi32>
      %24 = arith.cmpi slt, %23, %cst_2 : tensor<1x2048xi32>
      %25 = arith.addi %23, %15 : tensor<1x2048xi32>
      %26 = tt.addptr %16, %25 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %27 = arith.andi %24, %17 : tensor<1x2048xi1>
      %28 = tt.load %26, %27, %cst_3 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %29 = tt.addptr %18, %23 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %30 = tt.load %29, %24, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %31 = tt.extern_elementwise %20 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %32 = tt.broadcast %31 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %33 = arith.mulf %28, %32 : tensor<1x2048xf32>
      %34 = arith.addf %30, %cst : tensor<1x2048xf32>
      %35 = arith.mulf %33, %34 : tensor<1x2048xf32>
      %36 = tt.addptr %21, %25 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %37 = arith.truncf %35 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %36, %37, %27 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
