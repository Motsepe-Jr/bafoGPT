#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10de11de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x2048xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<1x2048xi32, #blocked1>
    %c0_i32 = arith.constant 0 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %cst_1 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_2 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32, #blocked>
    %cst_3 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32, #blocked>
    %cst_4 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %3 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x2048xi32, #blocked1>
    %5 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %6 = tt.splat %5 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %7 = tt.load %6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked>
    %8 = arith.muli %0, %c2304_i32 : i32
    %9 = tt.splat %8 : (i32) -> tensor<1x2048xi32, #blocked>
    %10 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %11 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %12 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %13 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %14 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %15 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %16 = tt.broadcast %7 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %17 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg13 = %cst_5) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %43 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32, #blocked>
      %44 = arith.addi %43, %3 : tensor<1x2048xi32, #blocked>
      %45 = arith.cmpi slt, %44, %cst : tensor<1x2048xi32, #blocked>
      %46 = arith.addi %44, %9 : tensor<1x2048xi32, #blocked>
      %47 = tt.addptr %10, %46 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %48 = tt.load %47, %45, %cst_6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %49 = arith.extf %48 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %50 = tt.addptr %11, %46 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %51 = tt.load %50, %45, %cst_6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %52 = arith.extf %51 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %53 = tt.addptr %12, %44 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %54 = tt.load %53, %45, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %55 = tt.addptr %13, %46 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %56 = tt.load %55, %45, %cst_6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %57 = arith.extf %56 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %58 = tt.addptr %14, %44 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %59 = tt.load %58, %45, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %60 = tt.addptr %15, %46 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %61 = tt.load %60, %45, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %62 = arith.addf %49, %52 : tensor<1x2048xf32, #blocked>
      %63 = arith.addf %54, %cst_4 : tensor<1x2048xf32, #blocked>
      %64 = arith.mulf %62, %63 : tensor<1x2048xf32, #blocked>
      %65 = arith.mulf %57, %16 : tensor<1x2048xf32, #blocked>
      %66 = arith.addf %59, %cst_4 : tensor<1x2048xf32, #blocked>
      %67 = arith.mulf %65, %66 : tensor<1x2048xf32, #blocked>
      %68 = arith.mulf %61, %cst_3 : tensor<1x2048xf32, #blocked>
      %69 = arith.addf %67, %68 : tensor<1x2048xf32, #blocked>
      %70 = arith.mulf %64, %69 : tensor<1x2048xf32, #blocked>
      %71 = arith.addf %arg13, %70 : tensor<1x2048xf32, #blocked>
      %72 = arith.select %45, %71, %arg13 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %72 : tensor<1x2048xf32, #blocked>
    }
    %18 = "tt.reduce"(%17) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %43 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %43 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %19 = tt.expand_dims %18 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %20 = tt.addptr %arg8, %0 : !tt.ptr<f32, 1>, i32
    %21 = tt.splat %20 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %22 = tt.load %21 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked>
    %23 = tt.splat %8 : (i32) -> tensor<1x2048xi32, #blocked1>
    %24 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %25 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>
    %26 = arith.mulf %19, %cst_2 : tensor<1x1xf32, #blocked>
    %27 = arith.mulf %22, %22 : tensor<1x1xf32, #blocked>
    %28 = arith.mulf %27, %22 : tensor<1x1xf32, #blocked>
    %29 = arith.mulf %26, %28 : tensor<1x1xf32, #blocked>
    %30 = arith.divf %29, %cst_1 : tensor<1x1xf32, #blocked>
    %31 = tt.broadcast %30 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %32 = tt.broadcast %22 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %33 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg13 = %cst_5) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %43 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32, #blocked>
      %44 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32, #blocked1>
      %45 = arith.addi %43, %3 : tensor<1x2048xi32, #blocked>
      %46 = arith.addi %44, %4 : tensor<1x2048xi32, #blocked1>
      %47 = arith.cmpi slt, %45, %cst : tensor<1x2048xi32, #blocked>
      %48 = arith.cmpi slt, %46, %cst_0 : tensor<1x2048xi32, #blocked1>
      %49 = arith.addi %45, %9 : tensor<1x2048xi32, #blocked>
      %50 = arith.addi %46, %23 : tensor<1x2048xi32, #blocked1>
      %51 = tt.addptr %13, %49 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %52 = tt.load %51, %47, %cst_6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %53 = arith.extf %52 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %54 = tt.addptr %14, %45 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %55 = tt.load %54, %47, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %56 = tt.addptr %15, %49 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %57 = tt.load %56, %47, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %58 = tt.addptr %24, %49 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %59 = tt.addptr %25, %50 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xi32, #blocked1>
      %60 = tt.load %58, %47, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %61 = tt.addptr %10, %49 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %62 = tt.load %61, %47, %cst_6 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %63 = arith.extf %62 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %64 = tt.addptr %11, %49 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %65 = tt.load %64, %47, %cst_6 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %66 = arith.extf %65 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %67 = tt.addptr %12, %45 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %68 = tt.load %67, %47, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %69 = arith.mulf %53, %16 : tensor<1x2048xf32, #blocked>
      %70 = arith.addf %55, %cst_4 : tensor<1x2048xf32, #blocked>
      %71 = arith.mulf %69, %70 : tensor<1x2048xf32, #blocked>
      %72 = arith.mulf %57, %cst_3 : tensor<1x2048xf32, #blocked>
      %73 = arith.addf %71, %72 : tensor<1x2048xf32, #blocked>
      %74 = arith.mulf %31, %73 : tensor<1x2048xf32, #blocked>
      %75 = arith.addf %63, %66 : tensor<1x2048xf32, #blocked>
      %76 = arith.addf %68, %cst_4 : tensor<1x2048xf32, #blocked>
      %77 = arith.mulf %75, %76 : tensor<1x2048xf32, #blocked>
      %78 = arith.mulf %77, %32 : tensor<1x2048xf32, #blocked>
      %79 = arith.addf %60, %78 : tensor<1x2048xf32, #blocked>
      %80 = arith.addf %79, %74 : tensor<1x2048xf32, #blocked>
      %81 = arith.addf %80, %74 : tensor<1x2048xf32, #blocked>
      %82 = arith.mulf %81, %70 : tensor<1x2048xf32, #blocked>
      %83 = arith.mulf %82, %53 : tensor<1x2048xf32, #blocked>
      %84 = arith.addf %arg13, %83 : tensor<1x2048xf32, #blocked>
      %85 = arith.select %47, %84, %arg13 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %86 = triton_gpu.convert_layout %81 : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked1>
      tt.store %59, %86, %48 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32, #blocked1>
      scf.yield %85 : tensor<1x2048xf32, #blocked>
    }
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %43 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %43 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %35 = tt.expand_dims %34 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %36 = arith.mulf %35, %cst_2 : tensor<1x1xf32, #blocked>
    %37 = arith.mulf %7, %7 : tensor<1x1xf32, #blocked>
    %38 = arith.mulf %37, %7 : tensor<1x1xf32, #blocked>
    %39 = arith.mulf %36, %38 : tensor<1x1xf32, #blocked>
    %40 = arith.divf %39, %cst_1 : tensor<1x1xf32, #blocked>
    %41 = tt.broadcast %40 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %42 = tt.splat %arg9 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %43 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32, #blocked>
      %44 = arith.addi %43, %3 : tensor<1x2048xi32, #blocked>
      %45 = arith.cmpi slt, %44, %cst : tensor<1x2048xi32, #blocked>
      %46 = arith.addi %44, %9 : tensor<1x2048xi32, #blocked>
      %47 = tt.addptr %24, %46 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %48 = tt.load %47, %45, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %49 = tt.addptr %14, %44 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %50 = tt.load %49, %45, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %51 = tt.addptr %13, %46 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %52 = tt.load %51, %45, %cst_6 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %53 = arith.extf %52 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %54 = arith.addf %50, %cst_4 : tensor<1x2048xf32, #blocked>
      %55 = arith.mulf %48, %54 : tensor<1x2048xf32, #blocked>
      %56 = arith.mulf %55, %16 : tensor<1x2048xf32, #blocked>
      %57 = arith.mulf %41, %53 : tensor<1x2048xf32, #blocked>
      %58 = arith.addf %56, %57 : tensor<1x2048xf32, #blocked>
      %59 = arith.addf %58, %57 : tensor<1x2048xf32, #blocked>
      %60 = tt.addptr %42, %46 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %61 = arith.truncf %59 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
      tt.store %60, %61, %45 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    }
    tt.return
  }
}
