module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10de11de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_1 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_4 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %3 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %4 = tt.splat %3 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %5 = tt.load %4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %6 = arith.muli %0, %c2304_i32 : i32
    %7 = tt.splat %6 : (i32) -> tensor<1x2048xi32>
    %8 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %9 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %10 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %11 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %12 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %13 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %14 = tt.broadcast %5 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %15 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg13 = %cst_5) -> (tensor<1x2048xf32>)  : i32 {
      %54 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32>
      %55 = arith.addi %54, %2 : tensor<1x2048xi32>
      %56 = arith.cmpi slt, %55, %cst_4 : tensor<1x2048xi32>
      %57 = arith.addi %55, %7 : tensor<1x2048xi32>
      %58 = tt.addptr %8, %57 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %59 = tt.load %58, %56, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %60 = arith.extf %59 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %61 = tt.addptr %9, %57 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %62 = tt.load %61, %56, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %63 = arith.extf %62 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %64 = tt.addptr %10, %55 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %65 = tt.load %64, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %66 = tt.addptr %11, %57 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %67 = tt.load %66, %56, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %68 = arith.extf %67 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %69 = tt.addptr %12, %55 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %70 = tt.load %69, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %71 = tt.addptr %13, %57 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %72 = tt.load %71, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %73 = arith.addf %60, %63 : tensor<1x2048xf32>
      %74 = arith.addf %65, %cst_3 : tensor<1x2048xf32>
      %75 = arith.mulf %73, %74 : tensor<1x2048xf32>
      %76 = arith.mulf %68, %14 : tensor<1x2048xf32>
      %77 = arith.addf %70, %cst_3 : tensor<1x2048xf32>
      %78 = arith.mulf %76, %77 : tensor<1x2048xf32>
      %79 = arith.mulf %72, %cst_2 : tensor<1x2048xf32>
      %80 = arith.addf %78, %79 : tensor<1x2048xf32>
      %81 = arith.mulf %75, %80 : tensor<1x2048xf32>
      %82 = arith.addf %arg13, %81 : tensor<1x2048xf32>
      %83 = arith.select %56, %82, %arg13 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %83 : tensor<1x2048xf32>
    }
    %16 = "tt.reduce"(%15) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %54 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %54 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %17 = tt.expand_dims %16 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %18 = tt.addptr %arg8, %0 : !tt.ptr<f32, 1>, i32
    %19 = tt.splat %18 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %20 = tt.load %19 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %21 = arith.muli %0, %c2304_i32 : i32
    %22 = tt.splat %21 : (i32) -> tensor<1x2048xi32>
    %23 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %24 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %25 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %26 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %27 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %28 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %29 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %30 = arith.mulf %17, %cst_1 : tensor<1x1xf32>
    %31 = arith.mulf %20, %20 : tensor<1x1xf32>
    %32 = arith.mulf %31, %20 : tensor<1x1xf32>
    %33 = arith.mulf %30, %32 : tensor<1x1xf32>
    %34 = arith.divf %33, %cst_0 : tensor<1x1xf32>
    %35 = tt.broadcast %5 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %36 = tt.broadcast %34 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %37 = tt.broadcast %20 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %38 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg13 = %cst_5) -> (tensor<1x2048xf32>)  : i32 {
      %54 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32>
      %55 = arith.addi %54, %2 : tensor<1x2048xi32>
      %56 = arith.cmpi slt, %55, %cst_4 : tensor<1x2048xi32>
      %57 = arith.addi %55, %22 : tensor<1x2048xi32>
      %58 = tt.addptr %23, %57 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %59 = tt.load %58, %56, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %60 = arith.extf %59 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %61 = tt.addptr %24, %55 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %62 = tt.load %61, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %63 = tt.addptr %25, %57 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %64 = tt.load %63, %56, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %65 = tt.addptr %26, %57 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %66 = tt.load %65, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %67 = tt.addptr %27, %57 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %68 = tt.load %67, %56, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %69 = arith.extf %68 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %70 = tt.addptr %28, %57 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %71 = tt.load %70, %56, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %72 = arith.extf %71 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %73 = tt.addptr %29, %55 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %74 = tt.load %73, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %75 = arith.mulf %60, %35 : tensor<1x2048xf32>
      %76 = arith.addf %62, %cst_3 : tensor<1x2048xf32>
      %77 = arith.mulf %75, %76 : tensor<1x2048xf32>
      %78 = arith.mulf %64, %cst_2 : tensor<1x2048xf32>
      %79 = arith.addf %77, %78 : tensor<1x2048xf32>
      %80 = arith.mulf %36, %79 : tensor<1x2048xf32>
      %81 = arith.addf %69, %72 : tensor<1x2048xf32>
      %82 = arith.addf %74, %cst_3 : tensor<1x2048xf32>
      %83 = arith.mulf %81, %82 : tensor<1x2048xf32>
      %84 = arith.mulf %83, %37 : tensor<1x2048xf32>
      %85 = arith.addf %66, %84 : tensor<1x2048xf32>
      %86 = arith.addf %85, %80 : tensor<1x2048xf32>
      %87 = arith.addf %86, %80 : tensor<1x2048xf32>
      %88 = arith.mulf %87, %76 : tensor<1x2048xf32>
      %89 = arith.mulf %88, %60 : tensor<1x2048xf32>
      %90 = arith.addf %arg13, %89 : tensor<1x2048xf32>
      %91 = arith.select %56, %90, %arg13 : tensor<1x2048xi1>, tensor<1x2048xf32>
      tt.store %65, %87, %56 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32>
      scf.yield %91 : tensor<1x2048xf32>
    }
    %39 = "tt.reduce"(%38) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %54 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %54 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %40 = tt.expand_dims %39 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %41 = arith.muli %0, %c2304_i32 : i32
    %42 = tt.splat %41 : (i32) -> tensor<1x2048xi32>
    %43 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %44 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %45 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %46 = tt.broadcast %5 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %47 = arith.mulf %40, %cst_1 : tensor<1x1xf32>
    %48 = arith.mulf %5, %5 : tensor<1x1xf32>
    %49 = arith.mulf %48, %5 : tensor<1x1xf32>
    %50 = arith.mulf %47, %49 : tensor<1x1xf32>
    %51 = arith.divf %50, %cst_0 : tensor<1x1xf32>
    %52 = tt.broadcast %51 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %53 = tt.splat %arg9 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %54 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32>
      %55 = arith.addi %54, %2 : tensor<1x2048xi32>
      %56 = arith.cmpi slt, %55, %cst_4 : tensor<1x2048xi32>
      %57 = arith.addi %55, %42 : tensor<1x2048xi32>
      %58 = tt.addptr %43, %57 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %59 = tt.load %58, %56, %cst_5 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %60 = tt.addptr %44, %55 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %61 = tt.load %60, %56, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %62 = tt.addptr %45, %57 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %63 = tt.load %62, %56, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %64 = arith.extf %63 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %65 = arith.addf %61, %cst_3 : tensor<1x2048xf32>
      %66 = arith.mulf %59, %65 : tensor<1x2048xf32>
      %67 = arith.mulf %66, %46 : tensor<1x2048xf32>
      %68 = arith.mulf %52, %64 : tensor<1x2048xf32>
      %69 = arith.addf %67, %68 : tensor<1x2048xf32>
      %70 = arith.addf %69, %68 : tensor<1x2048xf32>
      %71 = tt.addptr %53, %57 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %72 = arith.truncf %70 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %71, %72, %56 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
