; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d10de11de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !5 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %14 = lshr i32 %13, 5, !dbg !8
  %urem = and i32 %13, 255, !dbg !8
  %15 = shl nuw nsw i32 %urem, 3, !dbg !8
  %16 = or i32 %15, 4, !dbg !8
  %17 = shl nuw nsw i32 %urem, 2, !dbg !8
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %19 = sext i32 %18 to i64, !dbg !10
  %20 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !10
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %22 = bitcast i32 %21 to float, !dbg !11
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !11
  %30 = mul i32 %18, 2304, !dbg !12
  %31 = insertelement <8 x float> poison, float %22, i64 0, !dbg !13
  %32 = shufflevector <8 x float> %31, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !13
  br label %33, !dbg !14

33:                                               ; preds = %12, %33
  %34 = phi i1 [ true, %12 ], [ false, %33 ]
  %35 = phi i32 [ 0, %12 ], [ 2048, %33 ]
  %36 = phi <8 x float> [ zeroinitializer, %12 ], [ %211, %33 ]
  %37 = or i32 %35, %15, !dbg !15
  %38 = or i32 %35, %16, !dbg !15
  %39 = icmp ult i32 %37, 2304, !dbg !16
  %40 = add i32 %37, %30, !dbg !17
  %41 = add i32 %38, %30, !dbg !17
  %42 = sext i32 %40 to i64, !dbg !18
  %43 = getelementptr i16, ptr addrspace(1) %1, i64 %42, !dbg !18
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !19
  %49 = trunc i32 %45 to i16, !dbg !19
  %extelt.offset32 = lshr i32 %45, 16, !dbg !19
  %50 = trunc i32 %extelt.offset32 to i16, !dbg !19
  %51 = trunc i32 %46 to i16, !dbg !19
  %extelt.offset33 = lshr i32 %46, 16, !dbg !19
  %52 = trunc i32 %extelt.offset33 to i16, !dbg !19
  %53 = trunc i32 %47 to i16, !dbg !19
  %extelt.offset34 = lshr i32 %47, 16, !dbg !19
  %54 = trunc i32 %extelt.offset34 to i16, !dbg !19
  %55 = trunc i32 %48 to i16, !dbg !19
  %extelt.offset35 = lshr i32 %48, 16, !dbg !19
  %56 = trunc i32 %extelt.offset35 to i16, !dbg !19
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #3, !dbg !20
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #3, !dbg !20
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !20
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #3, !dbg !20
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #3, !dbg !20
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #3, !dbg !20
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #3, !dbg !20
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #3, !dbg !20
  %65 = getelementptr i16, ptr addrspace(1) %2, i64 %42, !dbg !21
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !22
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !22
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !22
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !22
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !22
  %71 = trunc i32 %67 to i16, !dbg !22
  %extelt.offset36 = lshr i32 %67, 16, !dbg !22
  %72 = trunc i32 %extelt.offset36 to i16, !dbg !22
  %73 = trunc i32 %68 to i16, !dbg !22
  %extelt.offset37 = lshr i32 %68, 16, !dbg !22
  %74 = trunc i32 %extelt.offset37 to i16, !dbg !22
  %75 = trunc i32 %69 to i16, !dbg !22
  %extelt.offset38 = lshr i32 %69, 16, !dbg !22
  %76 = trunc i32 %extelt.offset38 to i16, !dbg !22
  %77 = trunc i32 %70 to i16, !dbg !22
  %extelt.offset39 = lshr i32 %70, 16, !dbg !22
  %78 = trunc i32 %extelt.offset39 to i16, !dbg !22
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #3, !dbg !23
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #3, !dbg !23
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #3, !dbg !23
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #3, !dbg !23
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #3, !dbg !23
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #3, !dbg !23
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #3, !dbg !23
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #3, !dbg !23
  %87 = zext nneg i32 %37 to i64, !dbg !24
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !24
  %89 = zext nneg i32 %38 to i64, !dbg !24
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !24
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !25
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !25
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !25
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !25
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !25
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !25
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !25
  %101 = getelementptr i16, ptr addrspace(1) %4, i64 %42, !dbg !26
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !27
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !27
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !27
  %107 = trunc i32 %103 to i16, !dbg !27
  %extelt.offset40 = lshr i32 %103, 16, !dbg !27
  %108 = trunc i32 %extelt.offset40 to i16, !dbg !27
  %109 = trunc i32 %104 to i16, !dbg !27
  %extelt.offset41 = lshr i32 %104, 16, !dbg !27
  %110 = trunc i32 %extelt.offset41 to i16, !dbg !27
  %111 = trunc i32 %105 to i16, !dbg !27
  %extelt.offset42 = lshr i32 %105, 16, !dbg !27
  %112 = trunc i32 %extelt.offset42 to i16, !dbg !27
  %113 = trunc i32 %106 to i16, !dbg !27
  %extelt.offset43 = lshr i32 %106, 16, !dbg !27
  %114 = trunc i32 %extelt.offset43 to i16, !dbg !27
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #3, !dbg !28
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #3, !dbg !28
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %109) #3, !dbg !28
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #3, !dbg !28
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %111) #3, !dbg !28
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #3, !dbg !28
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #3, !dbg !28
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #3, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %6, i64 %87, !dbg !29
  %124 = getelementptr float, ptr addrspace(1) %6, i64 %89, !dbg !29
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %123, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !30
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !30
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !30
  %135 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !31
  %136 = sext i32 %41 to i64, !dbg !31
  %137 = getelementptr float, ptr addrspace(1) %7, i64 %136, !dbg !31
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !32
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !32
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !32
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !32
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !32
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !32
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !32
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !32
  %148 = insertelement <8 x i32> poison, i32 %92, i64 0, !dbg !25
  %149 = insertelement <8 x i32> %148, i32 %93, i64 1, !dbg !25
  %150 = insertelement <8 x i32> %149, i32 %94, i64 2, !dbg !25
  %151 = insertelement <8 x i32> %150, i32 %95, i64 3, !dbg !25
  %152 = insertelement <8 x i32> %151, i32 %97, i64 4, !dbg !25
  %153 = insertelement <8 x i32> %152, i32 %98, i64 5, !dbg !25
  %154 = insertelement <8 x i32> %153, i32 %99, i64 6, !dbg !25
  %155 = insertelement <8 x i32> %154, i32 %100, i64 7, !dbg !25
  %156 = bitcast <8 x i32> %155 to <8 x float>, !dbg !25
  %157 = insertelement <8 x i32> poison, i32 %126, i64 0, !dbg !30
  %158 = insertelement <8 x i32> %157, i32 %127, i64 1, !dbg !30
  %159 = insertelement <8 x i32> %158, i32 %128, i64 2, !dbg !30
  %160 = insertelement <8 x i32> %159, i32 %129, i64 3, !dbg !30
  %161 = insertelement <8 x i32> %160, i32 %131, i64 4, !dbg !30
  %162 = insertelement <8 x i32> %161, i32 %132, i64 5, !dbg !30
  %163 = insertelement <8 x i32> %162, i32 %133, i64 6, !dbg !30
  %164 = insertelement <8 x i32> %163, i32 %134, i64 7, !dbg !30
  %165 = bitcast <8 x i32> %164 to <8 x float>, !dbg !30
  %166 = insertelement <8 x i32> poison, i32 %139, i64 0, !dbg !32
  %167 = insertelement <8 x i32> %166, i32 %140, i64 1, !dbg !32
  %168 = insertelement <8 x i32> %167, i32 %141, i64 2, !dbg !32
  %169 = insertelement <8 x i32> %168, i32 %142, i64 3, !dbg !32
  %170 = insertelement <8 x i32> %169, i32 %144, i64 4, !dbg !32
  %171 = insertelement <8 x i32> %170, i32 %145, i64 5, !dbg !32
  %172 = insertelement <8 x i32> %171, i32 %146, i64 6, !dbg !32
  %173 = insertelement <8 x i32> %172, i32 %147, i64 7, !dbg !32
  %174 = bitcast <8 x i32> %173 to <8 x float>, !dbg !32
  %175 = insertelement <8 x float> poison, float %57, i64 0, !dbg !33
  %176 = insertelement <8 x float> %175, float %58, i64 1, !dbg !33
  %177 = insertelement <8 x float> %176, float %59, i64 2, !dbg !33
  %178 = insertelement <8 x float> %177, float %60, i64 3, !dbg !33
  %179 = insertelement <8 x float> %178, float %61, i64 4, !dbg !33
  %180 = insertelement <8 x float> %179, float %62, i64 5, !dbg !33
  %181 = insertelement <8 x float> %180, float %63, i64 6, !dbg !33
  %182 = insertelement <8 x float> %181, float %64, i64 7, !dbg !33
  %183 = insertelement <8 x float> poison, float %79, i64 0, !dbg !33
  %184 = insertelement <8 x float> %183, float %80, i64 1, !dbg !33
  %185 = insertelement <8 x float> %184, float %81, i64 2, !dbg !33
  %186 = insertelement <8 x float> %185, float %82, i64 3, !dbg !33
  %187 = insertelement <8 x float> %186, float %83, i64 4, !dbg !33
  %188 = insertelement <8 x float> %187, float %84, i64 5, !dbg !33
  %189 = insertelement <8 x float> %188, float %85, i64 6, !dbg !33
  %190 = insertelement <8 x float> %189, float %86, i64 7, !dbg !33
  %191 = fadd <8 x float> %182, %190, !dbg !33
  %192 = fadd <8 x float> %156, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !34
  %193 = fmul <8 x float> %191, %192, !dbg !35
  %194 = insertelement <8 x float> poison, float %115, i64 0, !dbg !13
  %195 = insertelement <8 x float> %194, float %116, i64 1, !dbg !13
  %196 = insertelement <8 x float> %195, float %117, i64 2, !dbg !13
  %197 = insertelement <8 x float> %196, float %118, i64 3, !dbg !13
  %198 = insertelement <8 x float> %197, float %119, i64 4, !dbg !13
  %199 = insertelement <8 x float> %198, float %120, i64 5, !dbg !13
  %200 = insertelement <8 x float> %199, float %121, i64 6, !dbg !13
  %201 = insertelement <8 x float> %200, float %122, i64 7, !dbg !13
  %202 = fmul <8 x float> %201, %32, !dbg !13
  %203 = fadd <8 x float> %165, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !36
  %204 = fmul <8 x float> %202, %203, !dbg !37
  %205 = fmul <8 x float> %174, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !38
  %206 = fadd <8 x float> %204, %205, !dbg !39
  %207 = fmul <8 x float> %193, %206, !dbg !40
  %208 = insertelement <8 x i1> poison, i1 %39, i64 0, !dbg !41
  %209 = shufflevector <8 x i1> %208, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !41
  %210 = select <8 x i1> %209, <8 x float> %207, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !41
  %211 = fadd <8 x float> %36, %210, !dbg !41
  br i1 %34, label %33, label %212, !dbg !14

212:                                              ; preds = %33
  %213 = and i32 %13, 31, !dbg !8
  %214 = and i32 %14, 7, !dbg !8
  %215 = or i32 %17, 1024, !dbg !8
  %216 = bitcast i32 %24 to float, !dbg !11
  %217 = bitcast i32 %26 to float, !dbg !11
  %218 = bitcast i32 %28 to float, !dbg !11
  %shift = shufflevector <8 x float> %211, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %219 = fadd <8 x float> %211, %shift, !dbg !42
  %shift90 = shufflevector <8 x float> %211, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %220 = fadd <8 x float> %shift90, %219, !dbg !42
  %shift91 = shufflevector <8 x float> %211, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %221 = fadd <8 x float> %shift91, %220, !dbg !42
  %shift92 = shufflevector <8 x float> %211, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %222 = fadd <8 x float> %shift92, %221, !dbg !42
  %shift93 = shufflevector <8 x float> %211, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %223 = fadd <8 x float> %shift93, %222, !dbg !42
  %shift94 = shufflevector <8 x float> %211, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %224 = fadd <8 x float> %shift94, %223, !dbg !42
  %shift95 = shufflevector <8 x float> %211, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %225 = fadd <8 x float> %shift95, %224, !dbg !42
  %226 = extractelement <8 x float> %225, i64 0, !dbg !42
  %227 = bitcast float %226 to i32, !dbg !48
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 16, i32 31), !dbg !48
  %229 = bitcast i32 %228 to float, !dbg !48
  %230 = fadd float %226, %229, !dbg !42
  %231 = bitcast float %230 to i32, !dbg !48
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !48
  %233 = bitcast i32 %232 to float, !dbg !48
  %234 = fadd float %230, %233, !dbg !42
  %235 = bitcast float %234 to i32, !dbg !48
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 4, i32 31), !dbg !48
  %237 = bitcast i32 %236 to float, !dbg !48
  %238 = fadd float %234, %237, !dbg !42
  %239 = bitcast float %238 to i32, !dbg !48
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 2, i32 31), !dbg !48
  %241 = bitcast i32 %240 to float, !dbg !48
  %242 = fadd float %238, %241, !dbg !42
  %243 = bitcast float %242 to i32, !dbg !48
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 1, i32 31), !dbg !48
  %245 = bitcast i32 %244 to float, !dbg !48
  %246 = fadd float %242, %245, !dbg !42
  %247 = icmp eq i32 %213, 0, !dbg !48
  %248 = zext nneg i32 %214 to i64, !dbg !48
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i64 %248, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, float %246, i1 %247) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %250 = icmp slt i32 %13, 8, !dbg !48
  %251 = sext i32 %13 to i64, !dbg !48
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i64 %251, !dbg !48
  %253 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %252, i1 %250) #3, !dbg !48
  %254 = bitcast float %253 to i32, !dbg !48
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 4, i32 31), !dbg !48
  %256 = bitcast i32 %255 to float, !dbg !48
  %257 = fadd float %253, %256, !dbg !42
  %258 = bitcast float %257 to i32, !dbg !48
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !48
  %260 = bitcast i32 %259 to float, !dbg !48
  %261 = fadd float %257, %260, !dbg !42
  %262 = bitcast float %261 to i32, !dbg !48
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 1, i32 31), !dbg !48
  %264 = bitcast i32 %263 to float, !dbg !48
  %265 = fadd float %261, %264, !dbg !42
  %266 = and i32 %13, 7, !dbg !48
  %267 = icmp eq i32 %266, 0, !dbg !48
  %268 = and i1 %250, %267, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, float %265, i1 %268) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %269 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !48
  %270 = getelementptr float, ptr addrspace(1) %8, i64 %19, !dbg !50
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #3, !dbg !51
  %272 = bitcast i32 %271 to float, !dbg !51
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #3, !dbg !51
  %274 = bitcast i32 %273 to float, !dbg !51
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #3, !dbg !51
  %276 = bitcast i32 %275 to float, !dbg !51
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #3, !dbg !51
  %278 = bitcast i32 %277 to float, !dbg !51
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #3, !dbg !51
  %280 = bitcast i32 %279 to float, !dbg !51
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #3, !dbg !51
  %282 = bitcast i32 %281 to float, !dbg !51
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #3, !dbg !51
  %284 = bitcast i32 %283 to float, !dbg !51
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #3, !dbg !51
  %286 = bitcast i32 %285 to float, !dbg !51
  %287 = fmul float %269, -5.000000e-01, !dbg !52
  %288 = fmul float %272, %272, !dbg !53
  %289 = fmul float %274, %274, !dbg !53
  %290 = fmul float %276, %276, !dbg !53
  %291 = fmul float %278, %278, !dbg !53
  %292 = fmul float %280, %280, !dbg !53
  %293 = fmul float %282, %282, !dbg !53
  %294 = fmul float %284, %284, !dbg !53
  %295 = fmul float %286, %286, !dbg !53
  %296 = fmul float %288, %272, !dbg !54
  %297 = fmul float %289, %274, !dbg !54
  %298 = fmul float %290, %276, !dbg !54
  %299 = fmul float %291, %278, !dbg !54
  %300 = fmul float %292, %280, !dbg !54
  %301 = fmul float %293, %282, !dbg !54
  %302 = fmul float %294, %284, !dbg !54
  %303 = fmul float %295, %286, !dbg !54
  %304 = fmul float %287, %296, !dbg !55
  %305 = fmul float %287, %297, !dbg !55
  %306 = fmul float %287, %298, !dbg !55
  %307 = fmul float %287, %299, !dbg !55
  %308 = fmul float %287, %300, !dbg !55
  %309 = fmul float %287, %301, !dbg !55
  %310 = fmul float %287, %302, !dbg !55
  %311 = fmul float %287, %303, !dbg !55
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float 2.304000e+03) #3, !dbg !56
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %305, float 2.304000e+03) #3, !dbg !56
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float 2.304000e+03) #3, !dbg !56
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #3, !dbg !56
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float 2.304000e+03) #3, !dbg !56
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float 2.304000e+03) #3, !dbg !56
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float 2.304000e+03) #3, !dbg !56
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float 2.304000e+03) #3, !dbg !56
  %320 = zext nneg i32 %15 to i64
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320
  %322 = zext nneg i32 %17 to i64
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i64 %322
  %324 = zext nneg i32 %215 to i64
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i64 %324
  %326 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %323, i64 0, i64 1
  %327 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %323, i64 0, i64 2
  %328 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %323, i64 0, i64 3
  %329 = insertelement <8 x float> poison, float %312, i64 0, !dbg !57
  %330 = shufflevector <8 x float> %329, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !57
  %331 = insertelement <8 x float> poison, float %272, i64 0, !dbg !58
  %332 = shufflevector <8 x float> %331, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !58
  br label %333, !dbg !59

333:                                              ; preds = %212, %333
  %334 = phi i1 [ true, %212 ], [ false, %333 ]
  %335 = phi i32 [ 0, %212 ], [ 2048, %333 ]
  %336 = phi <8 x float> [ zeroinitializer, %212 ], [ %548, %333 ]
  %337 = or i32 %335, %15, !dbg !60
  %338 = or i32 %335, %16, !dbg !60
  %339 = or i32 %335, %17, !dbg !60
  %340 = or i32 %335, %215, !dbg !60
  %341 = icmp ult i32 %337, 2304, !dbg !61
  %342 = icmp ult i32 %339, 2304, !dbg !61
  %343 = icmp ult i32 %340, 2304, !dbg !61
  %344 = add i32 %337, %30, !dbg !62
  %345 = add i32 %338, %30, !dbg !62
  %346 = add i32 %339, %30, !dbg !62
  %347 = add i32 %340, %30, !dbg !62
  %348 = sext i32 %344 to i64, !dbg !63
  %349 = getelementptr i16, ptr addrspace(1) %4, i64 %348, !dbg !63
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %349, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #3, !dbg !64
  %351 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !64
  %352 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !64
  %353 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !64
  %354 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !64
  %355 = trunc i32 %351 to i16, !dbg !64
  %extelt.offset6 = lshr i32 %351, 16, !dbg !64
  %356 = trunc i32 %extelt.offset6 to i16, !dbg !64
  %357 = trunc i32 %352 to i16, !dbg !64
  %extelt.offset7 = lshr i32 %352, 16, !dbg !64
  %358 = trunc i32 %extelt.offset7 to i16, !dbg !64
  %359 = trunc i32 %353 to i16, !dbg !64
  %extelt.offset8 = lshr i32 %353, 16, !dbg !64
  %360 = trunc i32 %extelt.offset8 to i16, !dbg !64
  %361 = trunc i32 %354 to i16, !dbg !64
  %extelt.offset9 = lshr i32 %354, 16, !dbg !64
  %362 = trunc i32 %extelt.offset9 to i16, !dbg !64
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #3, !dbg !65
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #3, !dbg !65
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #3, !dbg !65
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #3, !dbg !65
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #3, !dbg !65
  %368 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #3, !dbg !65
  %369 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #3, !dbg !65
  %370 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %362) #3, !dbg !65
  %371 = zext nneg i32 %337 to i64, !dbg !66
  %372 = getelementptr float, ptr addrspace(1) %6, i64 %371, !dbg !66
  %373 = zext nneg i32 %338 to i64, !dbg !66
  %374 = getelementptr float, ptr addrspace(1) %6, i64 %373, !dbg !66
  %375 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %372, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #3, !dbg !67
  %376 = extractvalue { i32, i32, i32, i32 } %375, 0, !dbg !67
  %377 = extractvalue { i32, i32, i32, i32 } %375, 1, !dbg !67
  %378 = extractvalue { i32, i32, i32, i32 } %375, 2, !dbg !67
  %379 = extractvalue { i32, i32, i32, i32 } %375, 3, !dbg !67
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %374, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #3, !dbg !67
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !67
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !67
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !67
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !67
  %385 = getelementptr float, ptr addrspace(1) %7, i64 %348, !dbg !68
  %386 = sext i32 %345 to i64, !dbg !68
  %387 = getelementptr float, ptr addrspace(1) %7, i64 %386, !dbg !68
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %385, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #3, !dbg !69
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !69
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !69
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !69
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !69
  %393 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %387, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #3, !dbg !69
  %394 = extractvalue { i32, i32, i32, i32 } %393, 0, !dbg !69
  %395 = extractvalue { i32, i32, i32, i32 } %393, 1, !dbg !69
  %396 = extractvalue { i32, i32, i32, i32 } %393, 2, !dbg !69
  %397 = extractvalue { i32, i32, i32, i32 } %393, 3, !dbg !69
  %398 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !70
  %399 = getelementptr float, ptr addrspace(1) %0, i64 %386, !dbg !70
  %400 = sext i32 %346 to i64, !dbg !70
  %401 = getelementptr float, ptr addrspace(1) %0, i64 %400, !dbg !70
  %402 = sext i32 %347 to i64, !dbg !70
  %403 = getelementptr float, ptr addrspace(1) %0, i64 %402, !dbg !70
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %398, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #3, !dbg !71
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !71
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !71
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !71
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !71
  %409 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %399, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #3, !dbg !71
  %410 = extractvalue { i32, i32, i32, i32 } %409, 0, !dbg !71
  %411 = extractvalue { i32, i32, i32, i32 } %409, 1, !dbg !71
  %412 = extractvalue { i32, i32, i32, i32 } %409, 2, !dbg !71
  %413 = extractvalue { i32, i32, i32, i32 } %409, 3, !dbg !71
  %414 = getelementptr i16, ptr addrspace(1) %1, i64 %348, !dbg !72
  %415 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %414, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #3, !dbg !73
  %416 = extractvalue { i32, i32, i32, i32 } %415, 0, !dbg !73
  %417 = extractvalue { i32, i32, i32, i32 } %415, 1, !dbg !73
  %418 = extractvalue { i32, i32, i32, i32 } %415, 2, !dbg !73
  %419 = extractvalue { i32, i32, i32, i32 } %415, 3, !dbg !73
  %420 = trunc i32 %416 to i16, !dbg !73
  %extelt.offset10 = lshr i32 %416, 16, !dbg !73
  %421 = trunc i32 %extelt.offset10 to i16, !dbg !73
  %422 = trunc i32 %417 to i16, !dbg !73
  %extelt.offset11 = lshr i32 %417, 16, !dbg !73
  %423 = trunc i32 %extelt.offset11 to i16, !dbg !73
  %424 = trunc i32 %418 to i16, !dbg !73
  %extelt.offset12 = lshr i32 %418, 16, !dbg !73
  %425 = trunc i32 %extelt.offset12 to i16, !dbg !73
  %426 = trunc i32 %419 to i16, !dbg !73
  %extelt.offset13 = lshr i32 %419, 16, !dbg !73
  %427 = trunc i32 %extelt.offset13 to i16, !dbg !73
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #3, !dbg !74
  %429 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #3, !dbg !74
  %430 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %422) #3, !dbg !74
  %431 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #3, !dbg !74
  %432 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #3, !dbg !74
  %433 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #3, !dbg !74
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #3, !dbg !74
  %435 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %427) #3, !dbg !74
  %436 = getelementptr i16, ptr addrspace(1) %2, i64 %348, !dbg !75
  %437 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %436, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #3, !dbg !76
  %438 = extractvalue { i32, i32, i32, i32 } %437, 0, !dbg !76
  %439 = extractvalue { i32, i32, i32, i32 } %437, 1, !dbg !76
  %440 = extractvalue { i32, i32, i32, i32 } %437, 2, !dbg !76
  %441 = extractvalue { i32, i32, i32, i32 } %437, 3, !dbg !76
  %442 = trunc i32 %438 to i16, !dbg !76
  %extelt.offset14 = lshr i32 %438, 16, !dbg !76
  %443 = trunc i32 %extelt.offset14 to i16, !dbg !76
  %444 = trunc i32 %439 to i16, !dbg !76
  %extelt.offset15 = lshr i32 %439, 16, !dbg !76
  %445 = trunc i32 %extelt.offset15 to i16, !dbg !76
  %446 = trunc i32 %440 to i16, !dbg !76
  %extelt.offset16 = lshr i32 %440, 16, !dbg !76
  %447 = trunc i32 %extelt.offset16 to i16, !dbg !76
  %448 = trunc i32 %441 to i16, !dbg !76
  %extelt.offset17 = lshr i32 %441, 16, !dbg !76
  %449 = trunc i32 %extelt.offset17 to i16, !dbg !76
  %450 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #3, !dbg !77
  %451 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #3, !dbg !77
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #3, !dbg !77
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #3, !dbg !77
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #3, !dbg !77
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #3, !dbg !77
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #3, !dbg !77
  %457 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #3, !dbg !77
  %458 = getelementptr float, ptr addrspace(1) %3, i64 %371, !dbg !78
  %459 = getelementptr float, ptr addrspace(1) %3, i64 %373, !dbg !78
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %458, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #3, !dbg !79
  %461 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !79
  %462 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !79
  %463 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !79
  %464 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !79
  %465 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %459, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #3, !dbg !79
  %466 = extractvalue { i32, i32, i32, i32 } %465, 0, !dbg !79
  %467 = extractvalue { i32, i32, i32, i32 } %465, 1, !dbg !79
  %468 = extractvalue { i32, i32, i32, i32 } %465, 2, !dbg !79
  %469 = extractvalue { i32, i32, i32, i32 } %465, 3, !dbg !79
  %470 = insertelement <8 x i32> poison, i32 %376, i64 0, !dbg !67
  %471 = insertelement <8 x i32> %470, i32 %377, i64 1, !dbg !67
  %472 = insertelement <8 x i32> %471, i32 %378, i64 2, !dbg !67
  %473 = insertelement <8 x i32> %472, i32 %379, i64 3, !dbg !67
  %474 = insertelement <8 x i32> %473, i32 %381, i64 4, !dbg !67
  %475 = insertelement <8 x i32> %474, i32 %382, i64 5, !dbg !67
  %476 = insertelement <8 x i32> %475, i32 %383, i64 6, !dbg !67
  %477 = insertelement <8 x i32> %476, i32 %384, i64 7, !dbg !67
  %478 = bitcast <8 x i32> %477 to <8 x float>, !dbg !67
  %479 = insertelement <8 x i32> poison, i32 %389, i64 0, !dbg !69
  %480 = insertelement <8 x i32> %479, i32 %390, i64 1, !dbg !69
  %481 = insertelement <8 x i32> %480, i32 %391, i64 2, !dbg !69
  %482 = insertelement <8 x i32> %481, i32 %392, i64 3, !dbg !69
  %483 = insertelement <8 x i32> %482, i32 %394, i64 4, !dbg !69
  %484 = insertelement <8 x i32> %483, i32 %395, i64 5, !dbg !69
  %485 = insertelement <8 x i32> %484, i32 %396, i64 6, !dbg !69
  %486 = insertelement <8 x i32> %485, i32 %397, i64 7, !dbg !69
  %487 = bitcast <8 x i32> %486 to <8 x float>, !dbg !69
  %488 = insertelement <8 x i32> poison, i32 %405, i64 0, !dbg !71
  %489 = insertelement <8 x i32> %488, i32 %406, i64 1, !dbg !71
  %490 = insertelement <8 x i32> %489, i32 %407, i64 2, !dbg !71
  %491 = insertelement <8 x i32> %490, i32 %408, i64 3, !dbg !71
  %492 = insertelement <8 x i32> %491, i32 %410, i64 4, !dbg !71
  %493 = insertelement <8 x i32> %492, i32 %411, i64 5, !dbg !71
  %494 = insertelement <8 x i32> %493, i32 %412, i64 6, !dbg !71
  %495 = insertelement <8 x i32> %494, i32 %413, i64 7, !dbg !71
  %496 = bitcast <8 x i32> %495 to <8 x float>, !dbg !71
  %497 = insertelement <8 x i32> poison, i32 %461, i64 0, !dbg !79
  %498 = insertelement <8 x i32> %497, i32 %462, i64 1, !dbg !79
  %499 = insertelement <8 x i32> %498, i32 %463, i64 2, !dbg !79
  %500 = insertelement <8 x i32> %499, i32 %464, i64 3, !dbg !79
  %501 = insertelement <8 x i32> %500, i32 %466, i64 4, !dbg !79
  %502 = insertelement <8 x i32> %501, i32 %467, i64 5, !dbg !79
  %503 = insertelement <8 x i32> %502, i32 %468, i64 6, !dbg !79
  %504 = insertelement <8 x i32> %503, i32 %469, i64 7, !dbg !79
  %505 = bitcast <8 x i32> %504 to <8 x float>, !dbg !79
  %506 = insertelement <8 x float> poison, float %363, i64 0, !dbg !80
  %507 = insertelement <8 x float> %506, float %364, i64 1, !dbg !80
  %508 = insertelement <8 x float> %507, float %365, i64 2, !dbg !80
  %509 = insertelement <8 x float> %508, float %366, i64 3, !dbg !80
  %510 = insertelement <8 x float> %509, float %367, i64 4, !dbg !80
  %511 = insertelement <8 x float> %510, float %368, i64 5, !dbg !80
  %512 = insertelement <8 x float> %511, float %369, i64 6, !dbg !80
  %513 = insertelement <8 x float> %512, float %370, i64 7, !dbg !80
  %514 = fmul <8 x float> %513, %32, !dbg !80
  %515 = fadd <8 x float> %478, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !81
  %516 = fmul <8 x float> %514, %515, !dbg !82
  %517 = fmul <8 x float> %487, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !83
  %518 = fadd <8 x float> %516, %517, !dbg !84
  %519 = fmul <8 x float> %330, %518, !dbg !57
  %520 = insertelement <8 x float> poison, float %428, i64 0, !dbg !85
  %521 = insertelement <8 x float> %520, float %429, i64 1, !dbg !85
  %522 = insertelement <8 x float> %521, float %430, i64 2, !dbg !85
  %523 = insertelement <8 x float> %522, float %431, i64 3, !dbg !85
  %524 = insertelement <8 x float> %523, float %432, i64 4, !dbg !85
  %525 = insertelement <8 x float> %524, float %433, i64 5, !dbg !85
  %526 = insertelement <8 x float> %525, float %434, i64 6, !dbg !85
  %527 = insertelement <8 x float> %526, float %435, i64 7, !dbg !85
  %528 = insertelement <8 x float> poison, float %450, i64 0, !dbg !85
  %529 = insertelement <8 x float> %528, float %451, i64 1, !dbg !85
  %530 = insertelement <8 x float> %529, float %452, i64 2, !dbg !85
  %531 = insertelement <8 x float> %530, float %453, i64 3, !dbg !85
  %532 = insertelement <8 x float> %531, float %454, i64 4, !dbg !85
  %533 = insertelement <8 x float> %532, float %455, i64 5, !dbg !85
  %534 = insertelement <8 x float> %533, float %456, i64 6, !dbg !85
  %535 = insertelement <8 x float> %534, float %457, i64 7, !dbg !85
  %536 = fadd <8 x float> %527, %535, !dbg !85
  %537 = fadd <8 x float> %505, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !86
  %538 = fmul <8 x float> %536, %537, !dbg !87
  %539 = fmul <8 x float> %538, %332, !dbg !58
  %540 = fadd <8 x float> %539, %496, !dbg !88
  %541 = fadd <8 x float> %519, %540, !dbg !89
  %542 = fadd <8 x float> %519, %541, !dbg !90
  %543 = fmul <8 x float> %515, %542, !dbg !91
  %544 = fmul <8 x float> %513, %543, !dbg !92
  %545 = insertelement <8 x i1> poison, i1 %341, i64 0, !dbg !93
  %546 = shufflevector <8 x i1> %545, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !93
  %547 = select <8 x i1> %546, <8 x float> %544, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !93
  %548 = fadd <8 x float> %336, %547, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  store <8 x float> %542, ptr addrspace(3) %321, align 32, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %549 = load <4 x i32>, ptr addrspace(3) %325, align 16, !dbg !94
  %.extract = load i32, ptr addrspace(3) %323, align 16, !dbg !94
  %.extract19 = load i32, ptr addrspace(3) %326, align 4, !dbg !94
  %.extract21 = load i32, ptr addrspace(3) %327, align 8, !dbg !94
  %.extract23 = load i32, ptr addrspace(3) %328, align 4, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract21, i32 %.extract23, ptr addrspace(1) %401, i1 %342) #3, !dbg !94
  %.extract25 = extractelement <4 x i32> %549, i64 0, !dbg !94
  %.extract27 = extractelement <4 x i32> %549, i64 1, !dbg !94
  %.extract29 = extractelement <4 x i32> %549, i64 2, !dbg !94
  %.extract31 = extractelement <4 x i32> %549, i64 3, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract27, i32 %.extract29, i32 %.extract31, ptr addrspace(1) %403, i1 %343) #3, !dbg !94
  br i1 %334, label %333, label %550, !dbg !59

550:                                              ; preds = %333
  %551 = bitcast i32 %23 to float, !dbg !11
  %552 = bitcast i32 %25 to float, !dbg !11
  %553 = bitcast i32 %27 to float, !dbg !11
  %554 = bitcast i32 %29 to float, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %shift96 = shufflevector <8 x float> %548, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !97
  %555 = fadd <8 x float> %548, %shift96, !dbg !97
  %shift97 = shufflevector <8 x float> %548, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !97
  %556 = fadd <8 x float> %shift97, %555, !dbg !97
  %shift98 = shufflevector <8 x float> %548, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !97
  %557 = fadd <8 x float> %shift98, %556, !dbg !97
  %shift99 = shufflevector <8 x float> %548, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !97
  %558 = fadd <8 x float> %shift99, %557, !dbg !97
  %shift100 = shufflevector <8 x float> %548, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !97
  %559 = fadd <8 x float> %shift100, %558, !dbg !97
  %shift101 = shufflevector <8 x float> %548, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !97
  %560 = fadd <8 x float> %shift101, %559, !dbg !97
  %shift102 = shufflevector <8 x float> %548, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !97
  %561 = fadd <8 x float> %shift102, %560, !dbg !97
  %562 = extractelement <8 x float> %561, i64 0, !dbg !97
  %563 = bitcast float %562 to i32, !dbg !95
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %563, i32 16, i32 31), !dbg !95
  %565 = bitcast i32 %564 to float, !dbg !95
  %566 = fadd float %562, %565, !dbg !97
  %567 = bitcast float %566 to i32, !dbg !95
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 8, i32 31), !dbg !95
  %569 = bitcast i32 %568 to float, !dbg !95
  %570 = fadd float %566, %569, !dbg !97
  %571 = bitcast float %570 to i32, !dbg !95
  %572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 4, i32 31), !dbg !95
  %573 = bitcast i32 %572 to float, !dbg !95
  %574 = fadd float %570, %573, !dbg !97
  %575 = bitcast float %574 to i32, !dbg !95
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 2, i32 31), !dbg !95
  %577 = bitcast i32 %576 to float, !dbg !95
  %578 = fadd float %574, %577, !dbg !97
  %579 = bitcast float %578 to i32, !dbg !95
  %580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %579, i32 1, i32 31), !dbg !95
  %581 = bitcast i32 %580 to float, !dbg !95
  %582 = fadd float %578, %581, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, float %582, i1 %247) #3, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %583 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %252, i1 %250) #3, !dbg !95
  %584 = bitcast float %583 to i32, !dbg !95
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 4, i32 31), !dbg !95
  %586 = bitcast i32 %585 to float, !dbg !95
  %587 = fadd float %583, %586, !dbg !97
  %588 = bitcast float %587 to i32, !dbg !95
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 2, i32 31), !dbg !95
  %590 = bitcast i32 %589 to float, !dbg !95
  %591 = fadd float %587, %590, !dbg !97
  %592 = bitcast float %591 to i32, !dbg !95
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 1, i32 31), !dbg !95
  %594 = bitcast i32 %593 to float, !dbg !95
  %595 = fadd float %591, %594, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, float %595, i1 %268) #3, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %596 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !95
  %597 = fmul float %596, -5.000000e-01, !dbg !100
  %598 = fmul float %22, %22, !dbg !101
  %599 = fmul float %551, %551, !dbg !101
  %600 = fmul float %216, %216, !dbg !101
  %601 = fmul float %552, %552, !dbg !101
  %602 = fmul float %217, %217, !dbg !101
  %603 = fmul float %553, %553, !dbg !101
  %604 = fmul float %218, %218, !dbg !101
  %605 = fmul float %554, %554, !dbg !101
  %606 = fmul float %598, %22, !dbg !102
  %607 = fmul float %599, %551, !dbg !102
  %608 = fmul float %600, %216, !dbg !102
  %609 = fmul float %601, %552, !dbg !102
  %610 = fmul float %602, %217, !dbg !102
  %611 = fmul float %603, %553, !dbg !102
  %612 = fmul float %604, %218, !dbg !102
  %613 = fmul float %605, %554, !dbg !102
  %614 = fmul float %606, %597, !dbg !103
  %615 = fmul float %607, %597, !dbg !103
  %616 = fmul float %608, %597, !dbg !103
  %617 = fmul float %609, %597, !dbg !103
  %618 = fmul float %610, %597, !dbg !103
  %619 = fmul float %611, %597, !dbg !103
  %620 = fmul float %612, %597, !dbg !103
  %621 = fmul float %613, %597, !dbg !103
  %622 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %614, float 2.304000e+03) #3, !dbg !104
  %623 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %615, float 2.304000e+03) #3, !dbg !104
  %624 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %616, float 2.304000e+03) #3, !dbg !104
  %625 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %617, float 2.304000e+03) #3, !dbg !104
  %626 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %618, float 2.304000e+03) #3, !dbg !104
  %627 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %619, float 2.304000e+03) #3, !dbg !104
  %628 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %620, float 2.304000e+03) #3, !dbg !104
  %629 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %621, float 2.304000e+03) #3, !dbg !104
  br label %630, !dbg !105

630:                                              ; preds = %550, %630
  %631 = phi i1 [ true, %550 ], [ false, %630 ]
  %632 = phi i32 [ 0, %550 ], [ 2048, %630 ]
  %633 = or i32 %632, %15, !dbg !106
  %634 = or i32 %632, %16, !dbg !106
  %635 = icmp ult i32 %633, 2304, !dbg !107
  %636 = add i32 %633, %30, !dbg !108
  %637 = add i32 %634, %30, !dbg !108
  %638 = sext i32 %636 to i64, !dbg !109
  %639 = getelementptr float, ptr addrspace(1) %0, i64 %638, !dbg !109
  %640 = sext i32 %637 to i64, !dbg !109
  %641 = getelementptr float, ptr addrspace(1) %0, i64 %640, !dbg !109
  %642 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %639, i1 %635, i32 0, i1 %635, i32 0, i1 %635, i32 0, i1 %635, i32 0, i1 %635) #3, !dbg !110
  %643 = extractvalue { i32, i32, i32, i32 } %642, 0, !dbg !110
  %644 = extractvalue { i32, i32, i32, i32 } %642, 1, !dbg !110
  %645 = extractvalue { i32, i32, i32, i32 } %642, 2, !dbg !110
  %646 = extractvalue { i32, i32, i32, i32 } %642, 3, !dbg !110
  %647 = bitcast i32 %643 to float, !dbg !110
  %648 = bitcast i32 %644 to float, !dbg !110
  %649 = bitcast i32 %645 to float, !dbg !110
  %650 = bitcast i32 %646 to float, !dbg !110
  %651 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %641, i1 %635, i32 0, i1 %635, i32 0, i1 %635, i32 0, i1 %635, i32 0, i1 %635) #3, !dbg !110
  %652 = extractvalue { i32, i32, i32, i32 } %651, 0, !dbg !110
  %653 = extractvalue { i32, i32, i32, i32 } %651, 1, !dbg !110
  %654 = extractvalue { i32, i32, i32, i32 } %651, 2, !dbg !110
  %655 = extractvalue { i32, i32, i32, i32 } %651, 3, !dbg !110
  %656 = bitcast i32 %652 to float, !dbg !110
  %657 = bitcast i32 %653 to float, !dbg !110
  %658 = bitcast i32 %654 to float, !dbg !110
  %659 = bitcast i32 %655 to float, !dbg !110
  %660 = zext nneg i32 %633 to i64, !dbg !111
  %661 = getelementptr float, ptr addrspace(1) %6, i64 %660, !dbg !111
  %662 = zext nneg i32 %634 to i64, !dbg !111
  %663 = getelementptr float, ptr addrspace(1) %6, i64 %662, !dbg !111
  %664 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %661, i1 %635, i32 0, i1 %635, i32 0, i1 %635, i32 0, i1 %635, i32 0, i1 %635) #3, !dbg !112
  %665 = extractvalue { i32, i32, i32, i32 } %664, 0, !dbg !112
  %666 = extractvalue { i32, i32, i32, i32 } %664, 1, !dbg !112
  %667 = extractvalue { i32, i32, i32, i32 } %664, 2, !dbg !112
  %668 = extractvalue { i32, i32, i32, i32 } %664, 3, !dbg !112
  %669 = bitcast i32 %665 to float, !dbg !112
  %670 = bitcast i32 %666 to float, !dbg !112
  %671 = bitcast i32 %667 to float, !dbg !112
  %672 = bitcast i32 %668 to float, !dbg !112
  %673 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %663, i1 %635, i32 0, i1 %635, i32 0, i1 %635, i32 0, i1 %635, i32 0, i1 %635) #3, !dbg !112
  %674 = extractvalue { i32, i32, i32, i32 } %673, 0, !dbg !112
  %675 = extractvalue { i32, i32, i32, i32 } %673, 1, !dbg !112
  %676 = extractvalue { i32, i32, i32, i32 } %673, 2, !dbg !112
  %677 = extractvalue { i32, i32, i32, i32 } %673, 3, !dbg !112
  %678 = bitcast i32 %674 to float, !dbg !112
  %679 = bitcast i32 %675 to float, !dbg !112
  %680 = bitcast i32 %676 to float, !dbg !112
  %681 = bitcast i32 %677 to float, !dbg !112
  %682 = getelementptr i16, ptr addrspace(1) %4, i64 %638, !dbg !113
  %683 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %682, i1 %635, i32 0, i1 %635, i32 0, i1 %635, i32 0, i1 %635, i32 0, i1 %635) #3, !dbg !114
  %684 = extractvalue { i32, i32, i32, i32 } %683, 0, !dbg !114
  %685 = extractvalue { i32, i32, i32, i32 } %683, 1, !dbg !114
  %686 = extractvalue { i32, i32, i32, i32 } %683, 2, !dbg !114
  %687 = extractvalue { i32, i32, i32, i32 } %683, 3, !dbg !114
  %688 = trunc i32 %684 to i16, !dbg !114
  %extelt.offset = lshr i32 %684, 16, !dbg !114
  %689 = trunc i32 %extelt.offset to i16, !dbg !114
  %690 = trunc i32 %685 to i16, !dbg !114
  %extelt.offset3 = lshr i32 %685, 16, !dbg !114
  %691 = trunc i32 %extelt.offset3 to i16, !dbg !114
  %692 = trunc i32 %686 to i16, !dbg !114
  %extelt.offset4 = lshr i32 %686, 16, !dbg !114
  %693 = trunc i32 %extelt.offset4 to i16, !dbg !114
  %694 = trunc i32 %687 to i16, !dbg !114
  %extelt.offset5 = lshr i32 %687, 16, !dbg !114
  %695 = trunc i32 %extelt.offset5 to i16, !dbg !114
  %696 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %688) #3, !dbg !115
  %697 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %689) #3, !dbg !115
  %698 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %690) #3, !dbg !115
  %699 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %691) #3, !dbg !115
  %700 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %692) #3, !dbg !115
  %701 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %693) #3, !dbg !115
  %702 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %694) #3, !dbg !115
  %703 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %695) #3, !dbg !115
  %704 = fadd float %669, 1.000000e+00, !dbg !116
  %705 = fadd float %670, 1.000000e+00, !dbg !116
  %706 = fadd float %671, 1.000000e+00, !dbg !116
  %707 = fadd float %672, 1.000000e+00, !dbg !116
  %708 = fadd float %678, 1.000000e+00, !dbg !116
  %709 = fadd float %679, 1.000000e+00, !dbg !116
  %710 = fadd float %680, 1.000000e+00, !dbg !116
  %711 = fadd float %681, 1.000000e+00, !dbg !116
  %712 = fmul float %704, %647, !dbg !117
  %713 = fmul float %705, %648, !dbg !117
  %714 = fmul float %706, %649, !dbg !117
  %715 = fmul float %707, %650, !dbg !117
  %716 = fmul float %708, %656, !dbg !117
  %717 = fmul float %709, %657, !dbg !117
  %718 = fmul float %710, %658, !dbg !117
  %719 = fmul float %711, %659, !dbg !117
  %720 = fmul float %712, %22, !dbg !118
  %721 = fmul float %713, %22, !dbg !118
  %722 = fmul float %714, %22, !dbg !118
  %723 = fmul float %715, %22, !dbg !118
  %724 = fmul float %716, %22, !dbg !118
  %725 = fmul float %717, %22, !dbg !118
  %726 = fmul float %718, %22, !dbg !118
  %727 = fmul float %719, %22, !dbg !118
  %728 = fmul float %622, %696, !dbg !119
  %729 = fmul float %622, %697, !dbg !119
  %730 = fmul float %622, %698, !dbg !119
  %731 = fmul float %622, %699, !dbg !119
  %732 = fmul float %622, %700, !dbg !119
  %733 = fmul float %622, %701, !dbg !119
  %734 = fmul float %622, %702, !dbg !119
  %735 = fmul float %622, %703, !dbg !119
  %736 = fadd float %728, %720, !dbg !120
  %737 = fadd float %721, %729, !dbg !120
  %738 = fadd float %722, %730, !dbg !120
  %739 = fadd float %723, %731, !dbg !120
  %740 = fadd float %724, %732, !dbg !120
  %741 = fadd float %725, %733, !dbg !120
  %742 = fadd float %726, %734, !dbg !120
  %743 = fadd float %727, %735, !dbg !120
  %744 = fadd float %728, %736, !dbg !121
  %745 = fadd float %729, %737, !dbg !121
  %746 = fadd float %730, %738, !dbg !121
  %747 = fadd float %731, %739, !dbg !121
  %748 = fadd float %732, %740, !dbg !121
  %749 = fadd float %733, %741, !dbg !121
  %750 = fadd float %734, %742, !dbg !121
  %751 = fadd float %735, %743, !dbg !121
  %752 = getelementptr i16, ptr addrspace(1) %9, i64 %638, !dbg !122
  %753 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %744) #3, !dbg !123
  %754 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %745) #3, !dbg !123
  %755 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %746) #3, !dbg !123
  %756 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %747) #3, !dbg !123
  %757 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %748) #3, !dbg !123
  %758 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %749) #3, !dbg !123
  %759 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %750) #3, !dbg !123
  %760 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %751) #3, !dbg !123
  %761 = insertelement <2 x i16> undef, i16 %753, i64 0, !dbg !123
  %762 = insertelement <2 x i16> %761, i16 %754, i64 1, !dbg !123
  %763 = bitcast <2 x i16> %762 to i32, !dbg !123
  %764 = insertelement <2 x i16> undef, i16 %755, i64 0, !dbg !123
  %765 = insertelement <2 x i16> %764, i16 %756, i64 1, !dbg !123
  %766 = bitcast <2 x i16> %765 to i32, !dbg !123
  %767 = insertelement <2 x i16> undef, i16 %757, i64 0, !dbg !123
  %768 = insertelement <2 x i16> %767, i16 %758, i64 1, !dbg !123
  %769 = bitcast <2 x i16> %768 to i32, !dbg !123
  %770 = insertelement <2 x i16> undef, i16 %759, i64 0, !dbg !123
  %771 = insertelement <2 x i16> %770, i16 %760, i64 1, !dbg !123
  %772 = bitcast <2 x i16> %771 to i32, !dbg !123
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %763, i32 %766, i32 %769, i32 %772, ptr addrspace(1) %752, i1 %635) #3, !dbg !123
  br i1 %631, label %630, label %773, !dbg !105

773:                                              ; preds = %630
  ret void, !dbg !124
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cm2skr2yj4io2d2kiptcqd26hikjgl7j2qs6qmplxo7hrklsylgw.py", directory: "/tmp/torchinductor_zeus/m2")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 26, column: 31, scope: !5)
!11 = !DILocation(line: 26, column: 36, scope: !5)
!12 = !DILocation(line: 32, column: 45, scope: !5)
!13 = !DILocation(line: 45, column: 24, scope: !5)
!14 = !DILocation(line: 28, column: 36, scope: !5)
!15 = !DILocation(line: 29, column: 27, scope: !5)
!16 = !DILocation(line: 30, column: 25, scope: !5)
!17 = !DILocation(line: 32, column: 40, scope: !5)
!18 = !DILocation(line: 32, column: 34, scope: !5)
!19 = !DILocation(line: 32, column: 51, scope: !5)
!20 = !DILocation(line: 32, column: 102, scope: !5)
!21 = !DILocation(line: 33, column: 34, scope: !5)
!22 = !DILocation(line: 33, column: 51, scope: !5)
!23 = !DILocation(line: 33, column: 102, scope: !5)
!24 = !DILocation(line: 34, column: 34, scope: !5)
!25 = !DILocation(line: 34, column: 39, scope: !5)
!26 = !DILocation(line: 35, column: 34, scope: !5)
!27 = !DILocation(line: 35, column: 51, scope: !5)
!28 = !DILocation(line: 35, column: 102, scope: !5)
!29 = !DILocation(line: 36, column: 35, scope: !5)
!30 = !DILocation(line: 36, column: 40, scope: !5)
!31 = !DILocation(line: 37, column: 35, scope: !5)
!32 = !DILocation(line: 37, column: 52, scope: !5)
!33 = !DILocation(line: 40, column: 22, scope: !5)
!34 = !DILocation(line: 42, column: 22, scope: !5)
!35 = !DILocation(line: 43, column: 22, scope: !5)
!36 = !DILocation(line: 46, column: 24, scope: !5)
!37 = !DILocation(line: 47, column: 24, scope: !5)
!38 = !DILocation(line: 51, column: 24, scope: !5)
!39 = !DILocation(line: 52, column: 24, scope: !5)
!40 = !DILocation(line: 53, column: 23, scope: !5)
!41 = !DILocation(line: 56, column: 40, scope: !5)
!42 = !DILocation(line: 233, column: 15, scope: !43, inlinedAt: !46)
!43 = distinct !DILexicalBlockFile(scope: !45, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!45 = distinct !DILexicalBlockFile(scope: !5, file: !44, discriminator: 0)
!46 = !DILocation(line: 243, column: 36, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 57, column: 27, scope: !43)
!48 = !DILocation(line: 243, column: 36, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 57, column: 27, scope: !45)
!50 = !DILocation(line: 58, column: 31, scope: !5)
!51 = !DILocation(line: 58, column: 36, scope: !5)
!52 = !DILocation(line: 72, column: 24, scope: !5)
!53 = !DILocation(line: 73, column: 24, scope: !5)
!54 = !DILocation(line: 74, column: 24, scope: !5)
!55 = !DILocation(line: 75, column: 24, scope: !5)
!56 = !DILocation(line: 77, column: 24, scope: !5)
!57 = !DILocation(line: 88, column: 24, scope: !5)
!58 = !DILocation(line: 94, column: 24, scope: !5)
!59 = !DILocation(line: 60, column: 36, scope: !5)
!60 = !DILocation(line: 61, column: 27, scope: !5)
!61 = !DILocation(line: 62, column: 25, scope: !5)
!62 = !DILocation(line: 64, column: 41, scope: !5)
!63 = !DILocation(line: 64, column: 35, scope: !5)
!64 = !DILocation(line: 64, column: 52, scope: !5)
!65 = !DILocation(line: 64, column: 103, scope: !5)
!66 = !DILocation(line: 65, column: 35, scope: !5)
!67 = !DILocation(line: 65, column: 40, scope: !5)
!68 = !DILocation(line: 66, column: 35, scope: !5)
!69 = !DILocation(line: 66, column: 52, scope: !5)
!70 = !DILocation(line: 67, column: 39, scope: !5)
!71 = !DILocation(line: 67, column: 56, scope: !5)
!72 = !DILocation(line: 68, column: 35, scope: !5)
!73 = !DILocation(line: 68, column: 52, scope: !5)
!74 = !DILocation(line: 68, column: 104, scope: !5)
!75 = !DILocation(line: 69, column: 35, scope: !5)
!76 = !DILocation(line: 69, column: 52, scope: !5)
!77 = !DILocation(line: 69, column: 104, scope: !5)
!78 = !DILocation(line: 70, column: 35, scope: !5)
!79 = !DILocation(line: 70, column: 40, scope: !5)
!80 = !DILocation(line: 79, column: 24, scope: !5)
!81 = !DILocation(line: 81, column: 24, scope: !5)
!82 = !DILocation(line: 82, column: 24, scope: !5)
!83 = !DILocation(line: 86, column: 24, scope: !5)
!84 = !DILocation(line: 87, column: 24, scope: !5)
!85 = !DILocation(line: 91, column: 24, scope: !5)
!86 = !DILocation(line: 92, column: 24, scope: !5)
!87 = !DILocation(line: 93, column: 24, scope: !5)
!88 = !DILocation(line: 95, column: 24, scope: !5)
!89 = !DILocation(line: 96, column: 24, scope: !5)
!90 = !DILocation(line: 97, column: 24, scope: !5)
!91 = !DILocation(line: 98, column: 24, scope: !5)
!92 = !DILocation(line: 99, column: 24, scope: !5)
!93 = !DILocation(line: 102, column: 40, scope: !5)
!94 = !DILocation(line: 103, column: 56, scope: !5)
!95 = !DILocation(line: 243, column: 36, scope: !45, inlinedAt: !96)
!96 = !DILocation(line: 104, column: 27, scope: !45)
!97 = !DILocation(line: 233, column: 15, scope: !43, inlinedAt: !98)
!98 = !DILocation(line: 243, column: 36, scope: !43, inlinedAt: !99)
!99 = !DILocation(line: 104, column: 27, scope: !43)
!100 = !DILocation(line: 117, column: 24, scope: !5)
!101 = !DILocation(line: 118, column: 24, scope: !5)
!102 = !DILocation(line: 119, column: 24, scope: !5)
!103 = !DILocation(line: 120, column: 24, scope: !5)
!104 = !DILocation(line: 122, column: 24, scope: !5)
!105 = !DILocation(line: 105, column: 36, scope: !5)
!106 = !DILocation(line: 106, column: 27, scope: !5)
!107 = !DILocation(line: 107, column: 25, scope: !5)
!108 = !DILocation(line: 109, column: 45, scope: !5)
!109 = !DILocation(line: 109, column: 39, scope: !5)
!110 = !DILocation(line: 109, column: 56, scope: !5)
!111 = !DILocation(line: 110, column: 35, scope: !5)
!112 = !DILocation(line: 110, column: 40, scope: !5)
!113 = !DILocation(line: 111, column: 35, scope: !5)
!114 = !DILocation(line: 111, column: 52, scope: !5)
!115 = !DILocation(line: 111, column: 104, scope: !5)
!116 = !DILocation(line: 113, column: 24, scope: !5)
!117 = !DILocation(line: 114, column: 24, scope: !5)
!118 = !DILocation(line: 115, column: 24, scope: !5)
!119 = !DILocation(line: 124, column: 24, scope: !5)
!120 = !DILocation(line: 125, column: 24, scope: !5)
!121 = !DILocation(line: 126, column: 24, scope: !5)
!122 = !DILocation(line: 128, column: 29, scope: !5)
!123 = !DILocation(line: 128, column: 53, scope: !5)
!124 = !DILocation(line: 105, column: 4, scope: !5)
