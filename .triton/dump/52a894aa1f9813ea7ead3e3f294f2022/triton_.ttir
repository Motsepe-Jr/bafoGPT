module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xbf16>
    %cst_0 = arith.constant dense<786432> : tensor<1x32xi32>
    %cst_1 = arith.constant dense<128> : tensor<32x1xi32>
    %cst_2 = arith.constant dense<262144> : tensor<1x32xi32>
    %cst_3 = arith.constant dense<-128> : tensor<32x1xi32>
    %cst_4 = arith.constant dense<-262144> : tensor<1x32xi32>
    %cst_5 = arith.constant dense<128> : tensor<32x1xi64>
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<32x32xf32>
    %cst_7 = arith.constant dense<256> : tensor<32x1xi64>
    %cst_8 = arith.constant dense<524288> : tensor<1x32xi32>
    %cst_9 = arith.constant dense<256> : tensor<1x32xi32>
    %cst_10 = arith.constant dense<1048576> : tensor<1x32xi32>
    %cst_11 = arith.constant dense<2048> : tensor<32x1xi32>
    %cst_12 = arith.constant dense<2048> : tensor<1x32xi32>
    %cst_13 = arith.constant dense<256> : tensor<32x1xi32>
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c32_i32 : i32
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %4 = tt.splat %1 : (i32) -> tensor<1x32xi32>
    %5 = arith.addi %4, %3 : tensor<1x32xi32>
    %6 = tt.get_program_id x : i32
    %7 = arith.muli %6, %c32_i32 : i32
    %8 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %9 = tt.splat %7 : (i32) -> tensor<32x1xi32>
    %10 = arith.addi %9, %8 : tensor<32x1xi32>
    %11 = arith.cmpi slt, %10, %cst_13 : tensor<32x1xi32>
    %12 = arith.remsi %5, %cst_12 : tensor<1x32xi32>
    %13 = arith.divsi %5, %cst_12 : tensor<1x32xi32>
    %14 = arith.muli %10, %cst_11 : tensor<32x1xi32>
    %15 = tt.broadcast %12 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %16 = tt.broadcast %14 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %17 = arith.addi %15, %16 : tensor<32x32xi32>
    %18 = arith.muli %13, %cst_10 : tensor<1x32xi32>
    %19 = tt.broadcast %18 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %20 = arith.addi %17, %19 : tensor<32x32xi32>
    %21 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<32x32x!tt.ptr<bf16, 1>>
    %22 = tt.addptr %21, %20 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %23 = tt.broadcast %11 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %24 = tt.load %22, %23 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %25 = arith.extf %24 : tensor<32x32xbf16> to tensor<32x32xf32>
    %26 = arith.muli %12, %cst_9 : tensor<1x32xi32>
    %27 = tt.broadcast %10 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %28 = tt.broadcast %26 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %29 = arith.addi %27, %28 : tensor<32x32xi32>
    %30 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<32x32x!tt.ptr<bf16, 1>>
    %31 = tt.addptr %30, %29 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %32 = tt.load %31, %23 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %33 = arith.extf %32 : tensor<32x32xbf16> to tensor<32x32xf32>
    %34 = arith.addi %12, %cst_8 : tensor<1x32xi32>
    %35 = tt.broadcast %34 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %36 = arith.addi %35, %16 : tensor<32x32xi32>
    %37 = arith.addi %36, %19 : tensor<32x32xi32>
    %38 = tt.addptr %21, %37 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %39 = tt.load %38, %23 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %40 = arith.extf %39 : tensor<32x32xbf16> to tensor<32x32xf32>
    %41 = arith.extsi %10 : tensor<32x1xi32> to tensor<32x1xi64>
    %42 = arith.cmpi sge, %41, %cst_7 : tensor<32x1xi64>
    %43 = arith.andi %42, %11 : tensor<32x1xi1>
    %44 = tt.broadcast %43 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %45 = tt.load %22, %44, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %46 = arith.extf %45 : tensor<32x32xbf16> to tensor<32x32xf32>
    %47 = tt.broadcast %42 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %48 = arith.select %47, %46, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %49 = arith.mulf %25, %33 : tensor<32x32xf32>
    %50 = arith.cmpi sge, %41, %cst_5 : tensor<32x1xi64>
    %51 = arith.addi %12, %cst_4 : tensor<1x32xi32>
    %52 = tt.broadcast %51 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %53 = arith.addi %52, %16 : tensor<32x32xi32>
    %54 = arith.addi %53, %19 : tensor<32x32xi32>
    %55 = tt.addptr %21, %54 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %56 = arith.andi %50, %11 : tensor<32x1xi1>
    %57 = tt.broadcast %56 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %58 = tt.load %55, %57, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %59 = arith.extf %58 : tensor<32x32xbf16> to tensor<32x32xf32>
    %60 = arith.addi %10, %cst_3 : tensor<32x1xi32>
    %61 = tt.broadcast %60 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %62 = arith.addi %61, %28 : tensor<32x32xi32>
    %63 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<32x32x!tt.ptr<bf16, 1>>
    %64 = tt.addptr %63, %62 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %65 = tt.load %64, %57, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %66 = arith.extf %65 : tensor<32x32xbf16> to tensor<32x32xf32>
    %67 = arith.mulf %59, %66 : tensor<32x32xf32>
    %68 = arith.subf %cst_6, %67 : tensor<32x32xf32>
    %69 = tt.broadcast %50 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %70 = arith.select %69, %68, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %71 = arith.addf %49, %70 : tensor<32x32xf32>
    %72 = arith.cmpi slt, %41, %cst_5 : tensor<32x1xi64>
    %73 = arith.addi %12, %cst_2 : tensor<1x32xi32>
    %74 = tt.broadcast %73 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %75 = arith.addi %74, %16 : tensor<32x32xi32>
    %76 = arith.addi %75, %19 : tensor<32x32xi32>
    %77 = tt.addptr %21, %76 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %78 = arith.andi %72, %11 : tensor<32x1xi1>
    %79 = tt.broadcast %78 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %80 = tt.load %77, %79, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %81 = arith.extf %80 : tensor<32x32xbf16> to tensor<32x32xf32>
    %82 = arith.addi %10, %cst_1 : tensor<32x1xi32>
    %83 = tt.broadcast %82 : (tensor<32x1xi32>) -> tensor<32x32xi32>
    %84 = arith.addi %83, %28 : tensor<32x32xi32>
    %85 = tt.addptr %63, %84 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %86 = tt.load %85, %79, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %87 = arith.extf %86 : tensor<32x32xbf16> to tensor<32x32xf32>
    %88 = arith.mulf %81, %87 : tensor<32x32xf32>
    %89 = tt.broadcast %72 : (tensor<32x1xi1>) -> tensor<32x32xi1>
    %90 = arith.select %89, %88, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %91 = arith.addf %71, %90 : tensor<32x32xf32>
    %92 = arith.addf %48, %91 : tensor<32x32xf32>
    %93 = tt.load %38, %44, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %94 = arith.extf %93 : tensor<32x32xbf16> to tensor<32x32xf32>
    %95 = arith.select %47, %94, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %96 = arith.mulf %40, %33 : tensor<32x32xf32>
    %97 = tt.load %77, %57, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %98 = arith.extf %97 : tensor<32x32xbf16> to tensor<32x32xf32>
    %99 = arith.mulf %98, %66 : tensor<32x32xf32>
    %100 = arith.subf %cst_6, %99 : tensor<32x32xf32>
    %101 = arith.select %69, %100, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %102 = arith.addf %96, %101 : tensor<32x32xf32>
    %103 = arith.addi %12, %cst_0 : tensor<1x32xi32>
    %104 = tt.broadcast %103 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %105 = arith.addi %104, %16 : tensor<32x32xi32>
    %106 = arith.addi %105, %19 : tensor<32x32xi32>
    %107 = tt.addptr %21, %106 : tensor<32x32x!tt.ptr<bf16, 1>>, tensor<32x32xi32>
    %108 = tt.load %107, %79, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<32x32xbf16>
    %109 = arith.extf %108 : tensor<32x32xbf16> to tensor<32x32xf32>
    %110 = arith.mulf %109, %87 : tensor<32x32xf32>
    %111 = arith.select %89, %110, %cst_6 : tensor<32x32xi1>, tensor<32x32xf32>
    %112 = arith.addf %102, %111 : tensor<32x32xf32>
    %113 = arith.addf %95, %112 : tensor<32x32xf32>
    %114 = arith.addf %92, %113 : tensor<32x32xf32>
    %115 = arith.muli %13, %cst_8 : tensor<1x32xi32>
    %116 = tt.broadcast %115 : (tensor<1x32xi32>) -> tensor<32x32xi32>
    %117 = arith.addi %17, %116 : tensor<32x32xi32>
    %118 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<32x32x!tt.ptr<f32, 1>>
    %119 = tt.addptr %118, %117 : tensor<32x32x!tt.ptr<f32, 1>>, tensor<32x32xi32>
    tt.store %119, %114, %23 {cache = 1 : i32, evict = 1 : i32} : tensor<32x32xf32>
    tt.return
  }
}
