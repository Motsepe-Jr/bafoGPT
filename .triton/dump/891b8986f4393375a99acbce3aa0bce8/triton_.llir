; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7de8de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = lshr i32 %10, 5, !dbg !10
  %urem = and i32 %10, 255, !dbg !10
  %12 = shl nuw nsw i32 %urem, 3, !dbg !10
  %13 = shl nuw nsw i32 %urem, 2, !dbg !10
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %15 = icmp slt i32 %14, 512, !dbg !12
  %16 = mul i32 %14, 2304, !dbg !13
  %17 = add i32 %12, %16, !dbg !14
  %18 = sext i32 %17 to i64, !dbg !15
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #6, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %25 = trunc i32 %21 to i16, !dbg !16
  %extelt.offset23 = lshr i32 %21, 16, !dbg !16
  %26 = trunc i32 %extelt.offset23 to i16, !dbg !16
  %27 = trunc i32 %22 to i16, !dbg !16
  %extelt.offset24 = lshr i32 %22, 16, !dbg !16
  %28 = trunc i32 %extelt.offset24 to i16, !dbg !16
  %29 = trunc i32 %23 to i16, !dbg !16
  %extelt.offset25 = lshr i32 %23, 16, !dbg !16
  %30 = trunc i32 %extelt.offset25 to i16, !dbg !16
  %31 = trunc i32 %24 to i16, !dbg !16
  %extelt.offset26 = lshr i32 %24, 16, !dbg !16
  %32 = trunc i32 %extelt.offset26 to i16, !dbg !16
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !17
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !17
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !17
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !17
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !17
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !17
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !17
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #6, !dbg !17
  %41 = fmul float %33, %33, !dbg !18
  %42 = fmul float %34, %34, !dbg !18
  %43 = fmul float %35, %35, !dbg !18
  %44 = fmul float %36, %36, !dbg !18
  %45 = fmul float %37, %37, !dbg !18
  %46 = fmul float %38, %38, !dbg !18
  %47 = fmul float %39, %39, !dbg !18
  %48 = fmul float %40, %40, !dbg !18
  %49 = select i1 %15, float %41, float 0.000000e+00, !dbg !19
  %50 = select i1 %15, float %42, float 0.000000e+00, !dbg !19
  %51 = select i1 %15, float %43, float 0.000000e+00, !dbg !19
  %52 = select i1 %15, float %44, float 0.000000e+00, !dbg !19
  %53 = select i1 %15, float %45, float 0.000000e+00, !dbg !19
  %54 = select i1 %15, float %46, float 0.000000e+00, !dbg !19
  %55 = select i1 %15, float %47, float 0.000000e+00, !dbg !19
  %56 = select i1 %15, float %48, float 0.000000e+00, !dbg !19
  %57 = or i32 %12, 2048, !dbg !20
  %58 = icmp ult i32 %57, 2304, !dbg !21
  %59 = add i32 %57, %16, !dbg !14
  %60 = sext i32 %59 to i64, !dbg !15
  %61 = getelementptr i16, ptr addrspace(1) %0, i64 %60, !dbg !15
  %62 = and i1 %15, %58, !dbg !22
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #6, !dbg !16
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !16
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !16
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !16
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !16
  %68 = trunc i32 %64 to i16, !dbg !16
  %extelt.offset23.1 = lshr i32 %64, 16, !dbg !16
  %69 = trunc i32 %extelt.offset23.1 to i16, !dbg !16
  %70 = trunc i32 %65 to i16, !dbg !16
  %extelt.offset24.1 = lshr i32 %65, 16, !dbg !16
  %71 = trunc i32 %extelt.offset24.1 to i16, !dbg !16
  %72 = trunc i32 %66 to i16, !dbg !16
  %extelt.offset25.1 = lshr i32 %66, 16, !dbg !16
  %73 = trunc i32 %extelt.offset25.1 to i16, !dbg !16
  %74 = trunc i32 %67 to i16, !dbg !16
  %extelt.offset26.1 = lshr i32 %67, 16, !dbg !16
  %75 = trunc i32 %extelt.offset26.1 to i16, !dbg !16
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #6, !dbg !17
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #6, !dbg !17
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #6, !dbg !17
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #6, !dbg !17
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #6, !dbg !17
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #6, !dbg !17
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #6, !dbg !17
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #6, !dbg !17
  %84 = fmul float %76, %76, !dbg !18
  %85 = fmul float %77, %77, !dbg !18
  %86 = fmul float %78, %78, !dbg !18
  %87 = fmul float %79, %79, !dbg !18
  %88 = fmul float %80, %80, !dbg !18
  %89 = fmul float %81, %81, !dbg !18
  %90 = fmul float %82, %82, !dbg !18
  %91 = fmul float %83, %83, !dbg !18
  %92 = select i1 %62, float %84, float -0.000000e+00, !dbg !19
  %93 = fadd float %49, %92, !dbg !19
  %94 = select i1 %62, float %85, float -0.000000e+00, !dbg !19
  %95 = fadd float %50, %94, !dbg !19
  %96 = select i1 %62, float %86, float -0.000000e+00, !dbg !19
  %97 = fadd float %51, %96, !dbg !19
  %98 = select i1 %62, float %87, float -0.000000e+00, !dbg !19
  %99 = fadd float %52, %98, !dbg !19
  %100 = select i1 %62, float %88, float -0.000000e+00, !dbg !19
  %101 = fadd float %53, %100, !dbg !19
  %102 = select i1 %62, float %89, float -0.000000e+00, !dbg !19
  %103 = fadd float %54, %102, !dbg !19
  %104 = select i1 %62, float %90, float -0.000000e+00, !dbg !19
  %105 = fadd float %55, %104, !dbg !19
  %106 = select i1 %62, float %91, float -0.000000e+00, !dbg !19
  %107 = fadd float %56, %106, !dbg !19
  %108 = and i32 %10, 31, !dbg !10
  %109 = and i32 %11, 7, !dbg !10
  %110 = or i32 %13, 1024, !dbg !10
  %111 = fadd float %93, %95, !dbg !23
  %112 = fadd float %97, %111, !dbg !23
  %113 = fadd float %99, %112, !dbg !23
  %114 = fadd float %101, %113, !dbg !23
  %115 = fadd float %103, %114, !dbg !23
  %116 = fadd float %105, %115, !dbg !23
  %117 = fadd float %107, %116, !dbg !23
  %118 = bitcast float %117 to i32, !dbg !29
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = fadd float %117, %120, !dbg !23
  %122 = bitcast float %121 to i32, !dbg !29
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 8, i32 31), !dbg !29
  %124 = bitcast i32 %123 to float, !dbg !29
  %125 = fadd float %121, %124, !dbg !23
  %126 = bitcast float %125 to i32, !dbg !29
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 4, i32 31), !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = fadd float %125, %128, !dbg !23
  %130 = bitcast float %129 to i32, !dbg !29
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !29
  %132 = bitcast i32 %131 to float, !dbg !29
  %133 = fadd float %129, %132, !dbg !23
  %134 = bitcast float %133 to i32, !dbg !29
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !29
  %136 = bitcast i32 %135 to float, !dbg !29
  %137 = fadd float %133, %136, !dbg !23
  %138 = icmp eq i32 %108, 0, !dbg !29
  %139 = zext nneg i32 %109 to i64, !dbg !29
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i64 %139, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, float %137, i1 %138) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %141 = icmp slt i32 %10, 8, !dbg !29
  %142 = sext i32 %10 to i64, !dbg !29
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i64 %142, !dbg !29
  %144 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %143, i1 %141) #6, !dbg !29
  %145 = bitcast float %144 to i32, !dbg !29
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 4, i32 31), !dbg !29
  %147 = bitcast i32 %146 to float, !dbg !29
  %148 = fadd float %144, %147, !dbg !23
  %149 = bitcast float %148 to i32, !dbg !29
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 2, i32 31), !dbg !29
  %151 = bitcast i32 %150 to float, !dbg !29
  %152 = fadd float %148, %151, !dbg !23
  %153 = bitcast float %152 to i32, !dbg !29
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 1, i32 31), !dbg !29
  %155 = bitcast i32 %154 to float, !dbg !29
  %156 = fadd float %152, %155, !dbg !23
  %157 = and i32 %10, 7, !dbg !29
  %158 = icmp eq i32 %157, 0, !dbg !29
  %159 = and i1 %141, %158, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, float %156, i1 %159) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %160 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %161 = sext i32 %14 to i64, !dbg !31
  %162 = getelementptr float, ptr addrspace(1) %3, i64 %161, !dbg !31
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %15) #6, !dbg !32
  %164 = bitcast i32 %163 to float, !dbg !32
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %15) #6, !dbg !32
  %166 = bitcast i32 %165 to float, !dbg !32
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %15) #6, !dbg !32
  %168 = bitcast i32 %167 to float, !dbg !32
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %15) #6, !dbg !32
  %170 = bitcast i32 %169 to float, !dbg !32
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %15) #6, !dbg !32
  %172 = bitcast i32 %171 to float, !dbg !32
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %15) #6, !dbg !32
  %174 = bitcast i32 %173 to float, !dbg !32
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %15) #6, !dbg !32
  %176 = bitcast i32 %175 to float, !dbg !32
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %15) #6, !dbg !32
  %178 = bitcast i32 %177 to float, !dbg !32
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 2.304000e+03) #6, !dbg !33
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 2.304000e+03) #6, !dbg !33
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 2.304000e+03) #6, !dbg !33
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 2.304000e+03) #6, !dbg !33
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 2.304000e+03) #6, !dbg !33
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 2.304000e+03) #6, !dbg !33
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 2.304000e+03) #6, !dbg !33
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 2.304000e+03) #6, !dbg !33
  %187 = fadd float %179, 0x3EE4F8B580000000, !dbg !34
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.304000e+03) #6, !dbg !35
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float 2.304000e+03) #6, !dbg !35
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float 2.304000e+03) #6, !dbg !35
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float 2.304000e+03) #6, !dbg !35
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float 2.304000e+03) #6, !dbg !35
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float 2.304000e+03) #6, !dbg !35
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float 2.304000e+03) #6, !dbg !35
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float 2.304000e+03) #6, !dbg !35
  %196 = fadd float %188, 0x3EE4F8B580000000, !dbg !36
  %197 = zext nneg i32 %12 to i64
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i64 %197
  %199 = zext nneg i32 %13 to i64
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i64 %199
  %201 = zext nneg i32 %110 to i64
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i64 %201
  %203 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %200, i64 0, i64 1
  %204 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %200, i64 0, i64 2
  %205 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %200, i64 0, i64 3
  br label %206, !dbg !37

206:                                              ; preds = %9, %__nv_rsqrtf.exit50
  %207 = phi i1 [ true, %9 ], [ false, %__nv_rsqrtf.exit50 ]
  %208 = phi i32 [ 0, %9 ], [ 2048, %__nv_rsqrtf.exit50 ]
  %209 = or i32 %208, %12, !dbg !38
  %210 = or i32 %209, 4, !dbg !38
  %211 = or i32 %208, %13, !dbg !38
  %212 = or i32 %208, %110, !dbg !38
  %213 = icmp ult i32 %209, 2304, !dbg !39
  %214 = icmp ult i32 %211, 2304, !dbg !39
  %215 = icmp ult i32 %212, 2304, !dbg !39
  %216 = add i32 %209, %16, !dbg !40
  %217 = add i32 %210, %16, !dbg !40
  %218 = add i32 %211, %16, !dbg !40
  %219 = add i32 %212, %16, !dbg !40
  %220 = sext i32 %216 to i64, !dbg !41
  %221 = getelementptr i16, ptr addrspace(1) %0, i64 %220, !dbg !41
  %222 = and i1 %15, %213, !dbg !42
  %223 = and i1 %15, %214, !dbg !42
  %224 = and i1 %15, %215, !dbg !42
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %221, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #6, !dbg !43
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !43
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !43
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !43
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !43
  %230 = trunc i32 %226 to i16, !dbg !43
  %extelt.offset = lshr i32 %226, 16, !dbg !43
  %231 = trunc i32 %extelt.offset to i16, !dbg !43
  %232 = trunc i32 %227 to i16, !dbg !43
  %extelt.offset2 = lshr i32 %227, 16, !dbg !43
  %233 = trunc i32 %extelt.offset2 to i16, !dbg !43
  %234 = trunc i32 %228 to i16, !dbg !43
  %extelt.offset3 = lshr i32 %228, 16, !dbg !43
  %235 = trunc i32 %extelt.offset3 to i16, !dbg !43
  %236 = trunc i32 %229 to i16, !dbg !43
  %extelt.offset4 = lshr i32 %229, 16, !dbg !43
  %237 = trunc i32 %extelt.offset4 to i16, !dbg !43
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %230) #6, !dbg !44
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #6, !dbg !44
  %240 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #6, !dbg !44
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #6, !dbg !44
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #6, !dbg !44
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #6, !dbg !44
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #6, !dbg !44
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %237) #6, !dbg !44
  %246 = zext nneg i32 %209 to i64, !dbg !45
  %247 = getelementptr float, ptr addrspace(1) %1, i64 %246, !dbg !45
  %248 = zext nneg i32 %210 to i64, !dbg !45
  %249 = getelementptr float, ptr addrspace(1) %1, i64 %248, !dbg !45
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %247, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213) #6, !dbg !46
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !46
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !46
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !46
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !46
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %249, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213) #6, !dbg !46
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !46
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !46
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !46
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !46
  %260 = insertelement <8 x i32> poison, i32 %251, i64 0, !dbg !46
  %261 = insertelement <8 x i32> %260, i32 %252, i64 1, !dbg !46
  %262 = insertelement <8 x i32> %261, i32 %253, i64 2, !dbg !46
  %263 = insertelement <8 x i32> %262, i32 %254, i64 3, !dbg !46
  %264 = insertelement <8 x i32> %263, i32 %256, i64 4, !dbg !46
  %265 = insertelement <8 x i32> %264, i32 %257, i64 5, !dbg !46
  %266 = insertelement <8 x i32> %265, i32 %258, i64 6, !dbg !46
  %267 = insertelement <8 x i32> %266, i32 %259, i64 7, !dbg !46
  %268 = bitcast <8 x i32> %267 to <8 x float>, !dbg !46
  %269 = getelementptr i16, ptr addrspace(1) %2, i64 %220, !dbg !47
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %269, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #6, !dbg !48
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !48
  %272 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !48
  %273 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !48
  %274 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !48
  %275 = trunc i32 %271 to i16, !dbg !48
  %extelt.offset5 = lshr i32 %271, 16, !dbg !48
  %276 = trunc i32 %extelt.offset5 to i16, !dbg !48
  %277 = trunc i32 %272 to i16, !dbg !48
  %extelt.offset6 = lshr i32 %272, 16, !dbg !48
  %278 = trunc i32 %extelt.offset6 to i16, !dbg !48
  %279 = trunc i32 %273 to i16, !dbg !48
  %extelt.offset7 = lshr i32 %273, 16, !dbg !48
  %280 = trunc i32 %extelt.offset7 to i16, !dbg !48
  %281 = trunc i32 %274 to i16, !dbg !48
  %extelt.offset8 = lshr i32 %274, 16, !dbg !48
  %282 = trunc i32 %extelt.offset8 to i16, !dbg !48
  %283 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %275) #6, !dbg !49
  %284 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %276) #6, !dbg !49
  %285 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %277) #6, !dbg !49
  %286 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %278) #6, !dbg !49
  %287 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %279) #6, !dbg !49
  %288 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %280) #6, !dbg !49
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %281) #6, !dbg !49
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %282) #6, !dbg !49
  %291 = getelementptr float, ptr addrspace(1) %4, i64 %246, !dbg !50
  %292 = getelementptr float, ptr addrspace(1) %4, i64 %248, !dbg !50
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %291, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213) #6, !dbg !51
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !51
  %295 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !51
  %296 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !51
  %297 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !51
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %292, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213) #6, !dbg !51
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !51
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !51
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !51
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !51
  %303 = insertelement <8 x i32> poison, i32 %294, i64 0, !dbg !51
  %304 = insertelement <8 x i32> %303, i32 %295, i64 1, !dbg !51
  %305 = insertelement <8 x i32> %304, i32 %296, i64 2, !dbg !51
  %306 = insertelement <8 x i32> %305, i32 %297, i64 3, !dbg !51
  %307 = insertelement <8 x i32> %306, i32 %299, i64 4, !dbg !51
  %308 = insertelement <8 x i32> %307, i32 %300, i64 5, !dbg !51
  %309 = insertelement <8 x i32> %308, i32 %301, i64 6, !dbg !51
  %310 = insertelement <8 x i32> %309, i32 %302, i64 7, !dbg !51
  %311 = bitcast <8 x i32> %310 to <8 x float>, !dbg !51
  %312 = getelementptr float, ptr addrspace(1) %5, i64 %220, !dbg !52
  %313 = sext i32 %217 to i64, !dbg !52
  %314 = getelementptr float, ptr addrspace(1) %5, i64 %313, !dbg !52
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %312, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #6, !dbg !53
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !53
  %317 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !53
  %318 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !53
  %319 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !53
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %314, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #6, !dbg !53
  %321 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !53
  %322 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !53
  %323 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !53
  %324 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !53
  %325 = insertelement <8 x i32> poison, i32 %316, i64 0, !dbg !53
  %326 = insertelement <8 x i32> %325, i32 %317, i64 1, !dbg !53
  %327 = insertelement <8 x i32> %326, i32 %318, i64 2, !dbg !53
  %328 = insertelement <8 x i32> %327, i32 %319, i64 3, !dbg !53
  %329 = insertelement <8 x i32> %328, i32 %321, i64 4, !dbg !53
  %330 = insertelement <8 x i32> %329, i32 %322, i64 5, !dbg !53
  %331 = insertelement <8 x i32> %330, i32 %323, i64 6, !dbg !53
  %332 = insertelement <8 x i32> %331, i32 %324, i64 7, !dbg !53
  %333 = bitcast <8 x i32> %332 to <8 x float>, !dbg !53
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !54
  %.not.i = icmp eq i32 %334, 0, !dbg !54
  br i1 %.not.i, label %337, label %335, !dbg !54

335:                                              ; preds = %206
  %336 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %187), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

337:                                              ; preds = %206
  %338 = tail call float @llvm.nvvm.rsqrt.approx.f(float %187), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

__nv_rsqrtf.exit:                                 ; preds = %335, %337
  %.0.i = phi float [ %336, %335 ], [ %338, %337 ], !dbg !54
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !54
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !54
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !54
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !54
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !54
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !54
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !54
  %346 = insertelement <8 x float> poison, float %238, i64 0, !dbg !55
  %347 = insertelement <8 x float> %346, float %239, i64 1, !dbg !55
  %348 = insertelement <8 x float> %347, float %240, i64 2, !dbg !55
  %349 = insertelement <8 x float> %348, float %241, i64 3, !dbg !55
  %350 = insertelement <8 x float> %349, float %242, i64 4, !dbg !55
  %351 = insertelement <8 x float> %350, float %243, i64 5, !dbg !55
  %352 = insertelement <8 x float> %351, float %244, i64 6, !dbg !55
  %353 = insertelement <8 x float> %352, float %245, i64 7, !dbg !55
  %354 = insertelement <8 x float> poison, float %.0.i, i64 0, !dbg !55
  %355 = shufflevector <8 x float> %354, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !55
  %356 = fmul <8 x float> %353, %355, !dbg !55
  %357 = fadd <8 x float> %268, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !56
  %358 = fmul <8 x float> %357, %356, !dbg !57
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %.not.i48 = icmp eq i32 %359, 0, !dbg !58
  br i1 %.not.i48, label %362, label %360, !dbg !58

360:                                              ; preds = %__nv_rsqrtf.exit
  %361 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %196), !dbg !58
  br label %__nv_rsqrtf.exit50, !dbg !58

362:                                              ; preds = %__nv_rsqrtf.exit
  %363 = tail call float @llvm.nvvm.rsqrt.approx.f(float %196), !dbg !58
  br label %__nv_rsqrtf.exit50, !dbg !58

__nv_rsqrtf.exit50:                               ; preds = %360, %362
  %.0.i49 = phi float [ %361, %360 ], [ %363, %362 ], !dbg !58
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %367 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !58
  %371 = insertelement <8 x float> poison, float %283, i64 0, !dbg !59
  %372 = insertelement <8 x float> %371, float %284, i64 1, !dbg !59
  %373 = insertelement <8 x float> %372, float %285, i64 2, !dbg !59
  %374 = insertelement <8 x float> %373, float %286, i64 3, !dbg !59
  %375 = insertelement <8 x float> %374, float %287, i64 4, !dbg !59
  %376 = insertelement <8 x float> %375, float %288, i64 5, !dbg !59
  %377 = insertelement <8 x float> %376, float %289, i64 6, !dbg !59
  %378 = insertelement <8 x float> %377, float %290, i64 7, !dbg !59
  %379 = insertelement <8 x float> poison, float %.0.i49, i64 0, !dbg !59
  %380 = shufflevector <8 x float> %379, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !59
  %381 = fmul <8 x float> %378, %380, !dbg !59
  %382 = fadd <8 x float> %311, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !60
  %383 = fmul <8 x float> %382, %381, !dbg !61
  %384 = fadd <8 x float> %383, %333, !dbg !62
  %385 = fadd <8 x float> %358, %384, !dbg !63
  %386 = sext i32 %218 to i64, !dbg !64
  %387 = getelementptr float, ptr addrspace(1) %6, i64 %386, !dbg !64
  %388 = sext i32 %219 to i64, !dbg !64
  %389 = getelementptr float, ptr addrspace(1) %6, i64 %388, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  store <8 x float> %385, ptr addrspace(3) %198, align 32, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %390 = load <4 x i32>, ptr addrspace(3) %202, align 16, !dbg !65
  %.extract = load i32, ptr addrspace(3) %200, align 16, !dbg !65
  %.extract10 = load i32, ptr addrspace(3) %203, align 4, !dbg !65
  %.extract12 = load i32, ptr addrspace(3) %204, align 8, !dbg !65
  %.extract14 = load i32, ptr addrspace(3) %205, align 4, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract12, i32 %.extract14, ptr addrspace(1) %387, i1 %223) #6, !dbg !65
  %.extract16 = extractelement <4 x i32> %390, i64 0, !dbg !65
  %.extract18 = extractelement <4 x i32> %390, i64 1, !dbg !65
  %.extract20 = extractelement <4 x i32> %390, i64 2, !dbg !65
  %.extract22 = extractelement <4 x i32> %390, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract16, i32 %.extract18, i32 %.extract20, i32 %.extract22, ptr addrspace(1) %389, i1 %224) #6, !dbg !65
  br i1 %207, label %206, label %391, !dbg !37

391:                                              ; preds = %__nv_rsqrtf.exit50
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ckg3mhytfmtwpq4iksb7ck6uw2squdeabjxidhfadjkhemp6p6sc.py", directory: "/tmp/torchinductor_zeus/kg")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7de8de", linkageName: "triton__0d1d2d3d4d5d6d7de8de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 110, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 36, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 29, column: 25, scope: !7)
!22 = !DILocation(line: 31, column: 59, scope: !7)
!23 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 37, column: 25, scope: !26)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 50, column: 22, scope: !7)
!34 = !DILocation(line: 52, column: 23, scope: !7)
!35 = !DILocation(line: 61, column: 24, scope: !7)
!36 = !DILocation(line: 62, column: 24, scope: !7)
!37 = !DILocation(line: 39, column: 36, scope: !7)
!38 = !DILocation(line: 40, column: 27, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 43, column: 40, scope: !7)
!41 = !DILocation(line: 43, column: 34, scope: !7)
!42 = !DILocation(line: 43, column: 59, scope: !7)
!43 = !DILocation(line: 43, column: 51, scope: !7)
!44 = !DILocation(line: 43, column: 111, scope: !7)
!45 = !DILocation(line: 44, column: 35, scope: !7)
!46 = !DILocation(line: 44, column: 40, scope: !7)
!47 = !DILocation(line: 45, column: 35, scope: !7)
!48 = !DILocation(line: 45, column: 52, scope: !7)
!49 = !DILocation(line: 45, column: 112, scope: !7)
!50 = !DILocation(line: 46, column: 35, scope: !7)
!51 = !DILocation(line: 46, column: 40, scope: !7)
!52 = !DILocation(line: 47, column: 35, scope: !7)
!53 = !DILocation(line: 47, column: 52, scope: !7)
!54 = !DILocation(line: 53, column: 30, scope: !7)
!55 = !DILocation(line: 54, column: 23, scope: !7)
!56 = !DILocation(line: 56, column: 24, scope: !7)
!57 = !DILocation(line: 57, column: 24, scope: !7)
!58 = !DILocation(line: 63, column: 30, scope: !7)
!59 = !DILocation(line: 64, column: 24, scope: !7)
!60 = !DILocation(line: 65, column: 24, scope: !7)
!61 = !DILocation(line: 66, column: 24, scope: !7)
!62 = !DILocation(line: 69, column: 24, scope: !7)
!63 = !DILocation(line: 70, column: 24, scope: !7)
!64 = !DILocation(line: 71, column: 29, scope: !7)
!65 = !DILocation(line: 71, column: 53, scope: !7)
!66 = !DILocation(line: 39, column: 4, scope: !7)
