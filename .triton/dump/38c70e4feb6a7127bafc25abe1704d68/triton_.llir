; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = shl i32 %6, 2, !dbg !10
  %8 = and i32 %7, 508, !dbg !10
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %10 = shl i32 %9, 9, !dbg !12
  %11 = or i32 %10, %8, !dbg !13
  %12 = sext i32 %11 to i64, !dbg !14
  %13 = getelementptr i16, ptr addrspace(1) %0, i64 %12, !dbg !14
  %14 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %13, i1 true) #4, !dbg !15
  %15 = extractvalue { i32, i32 } %14, 0, !dbg !15
  %16 = extractvalue { i32, i32 } %14, 1, !dbg !15
  %17 = trunc i32 %15 to i16, !dbg !15
  %extelt.offset = lshr i32 %15, 16, !dbg !15
  %18 = trunc i32 %extelt.offset to i16, !dbg !15
  %19 = trunc i32 %16 to i16, !dbg !15
  %extelt.offset1 = lshr i32 %16, 16, !dbg !15
  %20 = trunc i32 %extelt.offset1 to i16, !dbg !15
  %21 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %17) #4, !dbg !16
  %22 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %18) #4, !dbg !16
  %23 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #4, !dbg !16
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #4, !dbg !16
  %25 = getelementptr i16, ptr addrspace(1) %1, i64 %12, !dbg !17
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !18
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !18
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !18
  %29 = trunc i32 %27 to i16, !dbg !18
  %extelt.offset2 = lshr i32 %27, 16, !dbg !18
  %30 = trunc i32 %extelt.offset2 to i16, !dbg !18
  %31 = trunc i32 %28 to i16, !dbg !18
  %extelt.offset3 = lshr i32 %28, 16, !dbg !18
  %32 = trunc i32 %extelt.offset3 to i16, !dbg !18
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #4, !dbg !19
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #4, !dbg !19
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #4, !dbg !19
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #4, !dbg !19
  %37 = fmul float %21, %21, !dbg !20
  %38 = fmul float %22, %22, !dbg !20
  %39 = fmul float %23, %23, !dbg !20
  %40 = fmul float %24, %24, !dbg !20
  %41 = fmul float %21, %37, !dbg !21
  %42 = fmul float %22, %38, !dbg !21
  %43 = fmul float %23, %39, !dbg !21
  %44 = fmul float %24, %40, !dbg !21
  %45 = fmul float %41, 0x3FA6E4E260000000, !dbg !22
  %46 = fmul float %42, 0x3FA6E4E260000000, !dbg !22
  %47 = fmul float %43, 0x3FA6E4E260000000, !dbg !22
  %48 = fmul float %44, 0x3FA6E4E260000000, !dbg !22
  %49 = fadd float %21, %45, !dbg !23
  %50 = fadd float %22, %46, !dbg !23
  %51 = fadd float %23, %47, !dbg !23
  %52 = fadd float %24, %48, !dbg !23
  %53 = fmul float %49, 0x3FE9884540000000, !dbg !24
  %54 = fmul float %50, 0x3FE9884540000000, !dbg !24
  %55 = fmul float %51, 0x3FE9884540000000, !dbg !24
  %56 = fmul float %52, 0x3FE9884540000000, !dbg !24
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i = icmp eq i32 %57, 0, !dbg !25
  %58 = tail call float @llvm.nvvm.fabs.ftz.f(float %53) #4, !dbg !25
  %59 = tail call float @llvm.nvvm.fabs.f(float %53) #4, !dbg !25
  %.01.i = select i1 %.not.i, float %59, float %58, !dbg !25
  %60 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !25
  br i1 %60, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !25

__internal_fmad.exit1.i:                          ; preds = %5
  %61 = fmul float %.01.i, 0x4007154760000000, !dbg !25
  %62 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %61) #4, !dbg !25
  %63 = fadd float %62, 1.000000e+00, !dbg !25
  %64 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %63) #5, !dbg !25, !srcloc !26
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not6.i = icmp eq i32 %65, 0, !dbg !25
  %66 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %64, float -2.000000e+00, float 1.000000e+00) #4, !dbg !25
  %67 = tail call float @llvm.nvvm.fma.rn.f(float %64, float -2.000000e+00, float 1.000000e+00) #4, !dbg !25
  %.03.i = select i1 %.not6.i, float %67, float %66, !dbg !25
  %68 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !25
  %s.0.i = select i1 %68, float 1.000000e+00, float %.03.i, !dbg !25
  %69 = bitcast float %s.0.i to i32, !dbg !25
  %70 = bitcast float %53 to i32, !dbg !25
  %71 = and i32 %70, -2147483648, !dbg !25
  %72 = or i32 %71, %69, !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  br label %__nv_tanhf.exit, !dbg !25

__internal_fmad.exit3.i:                          ; preds = %5
  %74 = fmul float %53, %53, !dbg !25
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not1.i = icmp eq i32 %75, 0, !dbg !25
  %76 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %74, float 0xBFAAC795C0000000) #4, !dbg !25
  %77 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %74, float 0xBFAAC795C0000000) #4, !dbg !25
  %.06.i = select i1 %.not1.i, float %77, float %76, !dbg !25
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not2.i = icmp eq i32 %78, 0, !dbg !25
  %79 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %74, float 0x3FC10B2820000000) #4, !dbg !25
  %80 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %74, float 0x3FC10B2820000000) #4, !dbg !25
  %.05.i = select i1 %.not2.i, float %80, float %79, !dbg !25
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not3.i = icmp eq i32 %81, 0, !dbg !25
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %74, float 0xBFD5553DA0000000) #4, !dbg !25
  %83 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %74, float 0xBFD5553DA0000000) #4, !dbg !25
  %.0.i = select i1 %.not3.i, float %83, float %82, !dbg !25
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not4.i = icmp eq i32 %84, 0, !dbg !25
  %85 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %74, float 0.000000e+00) #4, !dbg !25
  %86 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %74, float 0.000000e+00) #4, !dbg !25
  %.04.i = select i1 %.not4.i, float %86, float %85, !dbg !25
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not5.i = icmp eq i32 %87, 0, !dbg !25
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %53, float %53) #4, !dbg !25
  %89 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %53, float %53) #4, !dbg !25
  %.02.i = select i1 %.not5.i, float %89, float %88, !dbg !25
  br label %__nv_tanhf.exit, !dbg !25

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %73, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !25
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i4 = icmp eq i32 %90, 0, !dbg !25
  %91 = tail call float @llvm.nvvm.fabs.ftz.f(float %54) #4, !dbg !25
  %92 = tail call float @llvm.nvvm.fabs.f(float %54) #4, !dbg !25
  %.01.i5 = select i1 %.not.i4, float %92, float %91, !dbg !25
  %93 = fcmp ult float %.01.i5, 0x3FE3333340000000, !dbg !25
  br i1 %93, label %__internal_fmad.exit3.i11, label %__internal_fmad.exit1.i6, !dbg !25

__internal_fmad.exit1.i6:                         ; preds = %__nv_tanhf.exit
  %94 = fmul float %.01.i5, 0x4007154760000000, !dbg !25
  %95 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %94) #4, !dbg !25
  %96 = fadd float %95, 1.000000e+00, !dbg !25
  %97 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %96) #5, !dbg !25, !srcloc !26
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not6.i7 = icmp eq i32 %98, 0, !dbg !25
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %97, float -2.000000e+00, float 1.000000e+00) #4, !dbg !25
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %97, float -2.000000e+00, float 1.000000e+00) #4, !dbg !25
  %.03.i8 = select i1 %.not6.i7, float %100, float %99, !dbg !25
  %101 = fcmp oge float %.01.i5, 0x4022059680000000, !dbg !25
  %s.0.i9 = select i1 %101, float 1.000000e+00, float %.03.i8, !dbg !25
  %102 = bitcast float %s.0.i9 to i32, !dbg !25
  %103 = bitcast float %54 to i32, !dbg !25
  %104 = and i32 %103, -2147483648, !dbg !25
  %105 = or i32 %104, %102, !dbg !25
  %106 = bitcast i32 %105 to float, !dbg !25
  br label %__nv_tanhf.exit22, !dbg !25

__internal_fmad.exit3.i11:                        ; preds = %__nv_tanhf.exit
  %107 = fmul float %54, %54, !dbg !25
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not1.i12 = icmp eq i32 %108, 0, !dbg !25
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %107, float 0xBFAAC795C0000000) #4, !dbg !25
  %110 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %107, float 0xBFAAC795C0000000) #4, !dbg !25
  %.06.i13 = select i1 %.not1.i12, float %110, float %109, !dbg !25
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not2.i14 = icmp eq i32 %111, 0, !dbg !25
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i13, float %107, float 0x3FC10B2820000000) #4, !dbg !25
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i13, float %107, float 0x3FC10B2820000000) #4, !dbg !25
  %.05.i15 = select i1 %.not2.i14, float %113, float %112, !dbg !25
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not3.i16 = icmp eq i32 %114, 0, !dbg !25
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i15, float %107, float 0xBFD5553DA0000000) #4, !dbg !25
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i15, float %107, float 0xBFD5553DA0000000) #4, !dbg !25
  %.0.i17 = select i1 %.not3.i16, float %116, float %115, !dbg !25
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not4.i18 = icmp eq i32 %117, 0, !dbg !25
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i17, float %107, float 0.000000e+00) #4, !dbg !25
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i17, float %107, float 0.000000e+00) #4, !dbg !25
  %.04.i19 = select i1 %.not4.i18, float %119, float %118, !dbg !25
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not5.i20 = icmp eq i32 %120, 0, !dbg !25
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i19, float %54, float %54) #4, !dbg !25
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i19, float %54, float %54) #4, !dbg !25
  %.02.i21 = select i1 %.not5.i20, float %122, float %121, !dbg !25
  br label %__nv_tanhf.exit22, !dbg !25

__nv_tanhf.exit22:                                ; preds = %__internal_fmad.exit1.i6, %__internal_fmad.exit3.i11
  %s.1.i10 = phi float [ %106, %__internal_fmad.exit1.i6 ], [ %.02.i21, %__internal_fmad.exit3.i11 ], !dbg !25
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i23 = icmp eq i32 %123, 0, !dbg !25
  %124 = tail call float @llvm.nvvm.fabs.ftz.f(float %55) #4, !dbg !25
  %125 = tail call float @llvm.nvvm.fabs.f(float %55) #4, !dbg !25
  %.01.i24 = select i1 %.not.i23, float %125, float %124, !dbg !25
  %126 = fcmp ult float %.01.i24, 0x3FE3333340000000, !dbg !25
  br i1 %126, label %__internal_fmad.exit3.i30, label %__internal_fmad.exit1.i25, !dbg !25

__internal_fmad.exit1.i25:                        ; preds = %__nv_tanhf.exit22
  %127 = fmul float %.01.i24, 0x4007154760000000, !dbg !25
  %128 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %127) #4, !dbg !25
  %129 = fadd float %128, 1.000000e+00, !dbg !25
  %130 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %129) #5, !dbg !25, !srcloc !26
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not6.i26 = icmp eq i32 %131, 0, !dbg !25
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %130, float -2.000000e+00, float 1.000000e+00) #4, !dbg !25
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %130, float -2.000000e+00, float 1.000000e+00) #4, !dbg !25
  %.03.i27 = select i1 %.not6.i26, float %133, float %132, !dbg !25
  %134 = fcmp oge float %.01.i24, 0x4022059680000000, !dbg !25
  %s.0.i28 = select i1 %134, float 1.000000e+00, float %.03.i27, !dbg !25
  %135 = bitcast float %s.0.i28 to i32, !dbg !25
  %136 = bitcast float %55 to i32, !dbg !25
  %137 = and i32 %136, -2147483648, !dbg !25
  %138 = or i32 %137, %135, !dbg !25
  %139 = bitcast i32 %138 to float, !dbg !25
  br label %__nv_tanhf.exit41, !dbg !25

__internal_fmad.exit3.i30:                        ; preds = %__nv_tanhf.exit22
  %140 = fmul float %55, %55, !dbg !25
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not1.i31 = icmp eq i32 %141, 0, !dbg !25
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %140, float 0xBFAAC795C0000000) #4, !dbg !25
  %143 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %140, float 0xBFAAC795C0000000) #4, !dbg !25
  %.06.i32 = select i1 %.not1.i31, float %143, float %142, !dbg !25
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not2.i33 = icmp eq i32 %144, 0, !dbg !25
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i32, float %140, float 0x3FC10B2820000000) #4, !dbg !25
  %146 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i32, float %140, float 0x3FC10B2820000000) #4, !dbg !25
  %.05.i34 = select i1 %.not2.i33, float %146, float %145, !dbg !25
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not3.i35 = icmp eq i32 %147, 0, !dbg !25
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i34, float %140, float 0xBFD5553DA0000000) #4, !dbg !25
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i34, float %140, float 0xBFD5553DA0000000) #4, !dbg !25
  %.0.i36 = select i1 %.not3.i35, float %149, float %148, !dbg !25
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not4.i37 = icmp eq i32 %150, 0, !dbg !25
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i36, float %140, float 0.000000e+00) #4, !dbg !25
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i36, float %140, float 0.000000e+00) #4, !dbg !25
  %.04.i38 = select i1 %.not4.i37, float %152, float %151, !dbg !25
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not5.i39 = icmp eq i32 %153, 0, !dbg !25
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i38, float %55, float %55) #4, !dbg !25
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i38, float %55, float %55) #4, !dbg !25
  %.02.i40 = select i1 %.not5.i39, float %155, float %154, !dbg !25
  br label %__nv_tanhf.exit41, !dbg !25

__nv_tanhf.exit41:                                ; preds = %__internal_fmad.exit1.i25, %__internal_fmad.exit3.i30
  %s.1.i29 = phi float [ %139, %__internal_fmad.exit1.i25 ], [ %.02.i40, %__internal_fmad.exit3.i30 ], !dbg !25
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i42 = icmp eq i32 %156, 0, !dbg !25
  %157 = tail call float @llvm.nvvm.fabs.ftz.f(float %56) #4, !dbg !25
  %158 = tail call float @llvm.nvvm.fabs.f(float %56) #4, !dbg !25
  %.01.i43 = select i1 %.not.i42, float %158, float %157, !dbg !25
  %159 = fcmp ult float %.01.i43, 0x3FE3333340000000, !dbg !25
  br i1 %159, label %__internal_fmad.exit3.i49, label %__internal_fmad.exit1.i44, !dbg !25

__internal_fmad.exit1.i44:                        ; preds = %__nv_tanhf.exit41
  %160 = fmul float %.01.i43, 0x4007154760000000, !dbg !25
  %161 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %160) #4, !dbg !25
  %162 = fadd float %161, 1.000000e+00, !dbg !25
  %163 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %162) #5, !dbg !25, !srcloc !26
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not6.i45 = icmp eq i32 %164, 0, !dbg !25
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %163, float -2.000000e+00, float 1.000000e+00) #4, !dbg !25
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %163, float -2.000000e+00, float 1.000000e+00) #4, !dbg !25
  %.03.i46 = select i1 %.not6.i45, float %166, float %165, !dbg !25
  %167 = fcmp oge float %.01.i43, 0x4022059680000000, !dbg !25
  %s.0.i47 = select i1 %167, float 1.000000e+00, float %.03.i46, !dbg !25
  %168 = bitcast float %s.0.i47 to i32, !dbg !25
  %169 = bitcast float %56 to i32, !dbg !25
  %170 = and i32 %169, -2147483648, !dbg !25
  %171 = or i32 %170, %168, !dbg !25
  %172 = bitcast i32 %171 to float, !dbg !25
  br label %__nv_tanhf.exit60, !dbg !25

__internal_fmad.exit3.i49:                        ; preds = %__nv_tanhf.exit41
  %173 = fmul float %56, %56, !dbg !25
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not1.i50 = icmp eq i32 %174, 0, !dbg !25
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %173, float 0xBFAAC795C0000000) #4, !dbg !25
  %176 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %173, float 0xBFAAC795C0000000) #4, !dbg !25
  %.06.i51 = select i1 %.not1.i50, float %176, float %175, !dbg !25
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not2.i52 = icmp eq i32 %177, 0, !dbg !25
  %178 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i51, float %173, float 0x3FC10B2820000000) #4, !dbg !25
  %179 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i51, float %173, float 0x3FC10B2820000000) #4, !dbg !25
  %.05.i53 = select i1 %.not2.i52, float %179, float %178, !dbg !25
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not3.i54 = icmp eq i32 %180, 0, !dbg !25
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i53, float %173, float 0xBFD5553DA0000000) #4, !dbg !25
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i53, float %173, float 0xBFD5553DA0000000) #4, !dbg !25
  %.0.i55 = select i1 %.not3.i54, float %182, float %181, !dbg !25
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not4.i56 = icmp eq i32 %183, 0, !dbg !25
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i55, float %173, float 0.000000e+00) #4, !dbg !25
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i55, float %173, float 0.000000e+00) #4, !dbg !25
  %.04.i57 = select i1 %.not4.i56, float %185, float %184, !dbg !25
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not5.i58 = icmp eq i32 %186, 0, !dbg !25
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i57, float %56, float %56) #4, !dbg !25
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i57, float %56, float %56) #4, !dbg !25
  %.02.i59 = select i1 %.not5.i58, float %188, float %187, !dbg !25
  br label %__nv_tanhf.exit60, !dbg !25

__nv_tanhf.exit60:                                ; preds = %__internal_fmad.exit1.i44, %__internal_fmad.exit3.i49
  %s.1.i48 = phi float [ %172, %__internal_fmad.exit1.i44 ], [ %.02.i59, %__internal_fmad.exit3.i49 ], !dbg !25
  %189 = fmul float %21, 5.000000e-01, !dbg !27
  %190 = fmul float %22, 5.000000e-01, !dbg !27
  %191 = fmul float %23, 5.000000e-01, !dbg !27
  %192 = fmul float %24, 5.000000e-01, !dbg !27
  %193 = fadd float %s.1.i, 1.000000e+00, !dbg !28
  %194 = fadd float %s.1.i10, 1.000000e+00, !dbg !28
  %195 = fadd float %s.1.i29, 1.000000e+00, !dbg !28
  %196 = fadd float %s.1.i48, 1.000000e+00, !dbg !28
  %197 = fmul float %189, %193, !dbg !29
  %198 = fmul float %190, %194, !dbg !29
  %199 = fmul float %191, %195, !dbg !29
  %200 = fmul float %192, %196, !dbg !29
  %201 = fmul float %33, %197, !dbg !30
  %202 = fmul float %34, %198, !dbg !30
  %203 = fmul float %35, %199, !dbg !30
  %204 = fmul float %36, %200, !dbg !30
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !31
  %206 = bitcast float %s.1.i to i32, !dbg !32
  %207 = bitcast float %s.1.i10 to i32, !dbg !32
  %208 = bitcast float %s.1.i29 to i32, !dbg !32
  %209 = bitcast float %s.1.i48 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %207, i32 %208, i32 %209, ptr addrspace(1) %205, i1 true) #4, !dbg !32
  %210 = getelementptr i16, ptr addrspace(1) %3, i64 %12, !dbg !33
  %211 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %201) #4, !dbg !34
  %212 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %202) #4, !dbg !34
  %213 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %203) #4, !dbg !34
  %214 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %204) #4, !dbg !34
  %215 = insertelement <2 x i16> undef, i16 %211, i64 0, !dbg !34
  %216 = insertelement <2 x i16> %215, i16 %212, i64 1, !dbg !34
  %217 = bitcast <2 x i16> %216 to i32, !dbg !34
  %218 = insertelement <2 x i16> undef, i16 %213, i64 0, !dbg !34
  %219 = insertelement <2 x i16> %218, i16 %214, i64 1, !dbg !34
  %220 = bitcast <2 x i16> %219 to i32, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %217, i32 %220, ptr addrspace(1) %210, i1 true) #4, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: alwaysinline nounwind
define float @__nv_tanhf(float %a) local_unnamed_addr #1 {
__nv_fabsf.exit:
  %0 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not = icmp eq i32 %0, 0
  %1 = tail call float @llvm.nvvm.fabs.ftz.f(float %a) #4
  %2 = tail call float @llvm.nvvm.fabs.f(float %a) #4
  %.01 = select i1 %.not, float %2, float %1
  %3 = fcmp ult float %.01, 0x3FE3333340000000
  br i1 %3, label %__internal_fmad.exit3, label %__internal_fmad.exit1

__internal_fmad.exit1:                            ; preds = %__nv_fabsf.exit
  %4 = fmul float %.01, 0x4007154760000000
  %5 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %4) #4
  %6 = fadd float %5, 1.000000e+00
  %7 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %6) #5, !srcloc !26
  %8 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not6 = icmp eq i32 %8, 0
  %9 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %7, float -2.000000e+00, float 1.000000e+00) #4
  %10 = tail call float @llvm.nvvm.fma.rn.f(float %7, float -2.000000e+00, float 1.000000e+00) #4
  %.03 = select i1 %.not6, float %10, float %9
  %11 = fcmp oge float %.01, 0x4022059680000000
  %s.0 = select i1 %11, float 1.000000e+00, float %.03
  %12 = bitcast float %s.0 to i32
  %13 = bitcast float %a to i32
  %14 = and i32 %13, -2147483648
  %15 = or i32 %14, %12
  %16 = bitcast i32 %15 to float
  br label %33

__internal_fmad.exit3:                            ; preds = %__nv_fabsf.exit
  %17 = fmul float %a, %a
  %18 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not1 = icmp eq i32 %18, 0
  %19 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #4
  %20 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #4
  %.06 = select i1 %.not1, float %20, float %19
  %21 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not2 = icmp eq i32 %21, 0
  %22 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06, float %17, float 0x3FC10B2820000000) #4
  %23 = tail call float @llvm.nvvm.fma.rn.f(float %.06, float %17, float 0x3FC10B2820000000) #4
  %.05 = select i1 %.not2, float %23, float %22
  %24 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not3 = icmp eq i32 %24, 0
  %25 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05, float %17, float 0xBFD5553DA0000000) #4
  %26 = tail call float @llvm.nvvm.fma.rn.f(float %.05, float %17, float 0xBFD5553DA0000000) #4
  %.0 = select i1 %.not3, float %26, float %25
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not4 = icmp eq i32 %27, 0
  %28 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0, float %17, float 0.000000e+00) #4
  %29 = tail call float @llvm.nvvm.fma.rn.f(float %.0, float %17, float 0.000000e+00) #4
  %.04 = select i1 %.not4, float %29, float %28
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not5 = icmp eq i32 %30, 0
  %31 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04, float %a, float %a) #4
  %32 = tail call float @llvm.nvvm.fma.rn.f(float %.04, float %a, float %a) #4
  %.02 = select i1 %.not5, float %32, float %31
  br label %33

33:                                               ; preds = %__internal_fmad.exit3, %__internal_fmad.exit1
  %s.1 = phi float [ %16, %__internal_fmad.exit1 ], [ %.02, %__internal_fmad.exit3 ]
  ret float %s.1
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "chj52w2o7vcnrpoinqb2kw526ekb2oxiv65xast44xk6ymmou7zb.py", directory: "/tmp/torchinductor_zeus/hj")
!4 = !{ptr @triton__0d1d2d3d4de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de", linkageName: "triton__0d1d2d3d4de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 36, scope: !7)
!11 = !DILocation(line: 20, column: 28, scope: !7)
!12 = !DILocation(line: 20, column: 33, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 30, scope: !7)
!15 = !DILocation(line: 24, column: 35, scope: !7)
!16 = !DILocation(line: 24, column: 44, scope: !7)
!17 = !DILocation(line: 25, column: 31, scope: !7)
!18 = !DILocation(line: 25, column: 36, scope: !7)
!19 = !DILocation(line: 25, column: 45, scope: !7)
!20 = !DILocation(line: 27, column: 18, scope: !7)
!21 = !DILocation(line: 28, column: 18, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 31, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 34, column: 24, scope: !7)
!26 = !{i32 21046}
!27 = !DILocation(line: 36, column: 19, scope: !7)
!28 = !DILocation(line: 38, column: 19, scope: !7)
!29 = !DILocation(line: 39, column: 20, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 42, column: 25, scope: !7)
!32 = !DILocation(line: 42, column: 36, scope: !7)
!33 = !DILocation(line: 43, column: 25, scope: !7)
!34 = !DILocation(line: 43, column: 37, scope: !7)
!35 = !DILocation(line: 43, column: 4, scope: !7)
