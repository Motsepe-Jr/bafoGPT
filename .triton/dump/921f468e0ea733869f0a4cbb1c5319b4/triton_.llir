; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2de(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = shl i32 %4, 1, !dbg !10
  %6 = and i32 %5, 510, !dbg !10
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %8 = shl i32 %7, 9, !dbg !12
  %9 = or i32 %8, %6, !dbg !13
  %10 = sext i32 %9 to i64, !dbg !14
  %11 = getelementptr i16, ptr addrspace(1) %0, i64 %10, !dbg !14
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !15
  %13 = trunc i32 %12 to i16, !dbg !15
  %extelt.offset = lshr i32 %12, 16, !dbg !15
  %14 = trunc i32 %extelt.offset to i16, !dbg !15
  %15 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %13) #4, !dbg !16
  %16 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %14) #4, !dbg !16
  %17 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %15, float 3.000000e+01) #4, !dbg !17
  %18 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %16, float 3.000000e+01) #4, !dbg !17
  %19 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not.i = icmp eq i32 %19, 0, !dbg !18
  %20 = tail call float @llvm.nvvm.fabs.ftz.f(float %17) #4, !dbg !18
  %21 = tail call float @llvm.nvvm.fabs.f(float %17) #4, !dbg !18
  %.01.i = select i1 %.not.i, float %21, float %20, !dbg !18
  %22 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !18
  br i1 %22, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !18

__internal_fmad.exit1.i:                          ; preds = %3
  %23 = fmul float %.01.i, 0x4007154760000000, !dbg !18
  %24 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %23) #4, !dbg !18
  %25 = fadd float %24, 1.000000e+00, !dbg !18
  %26 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %25) #5, !dbg !18, !srcloc !19
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not6.i = icmp eq i32 %27, 0, !dbg !18
  %28 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %26, float -2.000000e+00, float 1.000000e+00) #4, !dbg !18
  %29 = tail call float @llvm.nvvm.fma.rn.f(float %26, float -2.000000e+00, float 1.000000e+00) #4, !dbg !18
  %.03.i = select i1 %.not6.i, float %29, float %28, !dbg !18
  %30 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !18
  %s.0.i = select i1 %30, float 1.000000e+00, float %.03.i, !dbg !18
  %31 = bitcast float %s.0.i to i32, !dbg !18
  %32 = bitcast float %17 to i32, !dbg !18
  %33 = and i32 %32, -2147483648, !dbg !18
  %34 = or i32 %33, %31, !dbg !18
  %35 = bitcast i32 %34 to float, !dbg !18
  br label %__nv_tanhf.exit, !dbg !18

__internal_fmad.exit3.i:                          ; preds = %3
  %36 = fmul float %17, %17, !dbg !18
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not1.i = icmp eq i32 %37, 0, !dbg !18
  %38 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %36, float 0xBFAAC795C0000000) #4, !dbg !18
  %39 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %36, float 0xBFAAC795C0000000) #4, !dbg !18
  %.06.i = select i1 %.not1.i, float %39, float %38, !dbg !18
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not2.i = icmp eq i32 %40, 0, !dbg !18
  %41 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %36, float 0x3FC10B2820000000) #4, !dbg !18
  %42 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %36, float 0x3FC10B2820000000) #4, !dbg !18
  %.05.i = select i1 %.not2.i, float %42, float %41, !dbg !18
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not3.i = icmp eq i32 %43, 0, !dbg !18
  %44 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %36, float 0xBFD5553DA0000000) #4, !dbg !18
  %45 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %36, float 0xBFD5553DA0000000) #4, !dbg !18
  %.0.i = select i1 %.not3.i, float %45, float %44, !dbg !18
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not4.i = icmp eq i32 %46, 0, !dbg !18
  %47 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %36, float 0.000000e+00) #4, !dbg !18
  %48 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %36, float 0.000000e+00) #4, !dbg !18
  %.04.i = select i1 %.not4.i, float %48, float %47, !dbg !18
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not5.i = icmp eq i32 %49, 0, !dbg !18
  %50 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %17, float %17) #4, !dbg !18
  %51 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %17, float %17) #4, !dbg !18
  %.02.i = select i1 %.not5.i, float %51, float %50, !dbg !18
  br label %__nv_tanhf.exit, !dbg !18

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %35, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !18
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not.i1 = icmp eq i32 %52, 0, !dbg !18
  %53 = tail call float @llvm.nvvm.fabs.ftz.f(float %18) #4, !dbg !18
  %54 = tail call float @llvm.nvvm.fabs.f(float %18) #4, !dbg !18
  %.01.i2 = select i1 %.not.i1, float %54, float %53, !dbg !18
  %55 = fcmp ult float %.01.i2, 0x3FE3333340000000, !dbg !18
  br i1 %55, label %__internal_fmad.exit3.i8, label %__internal_fmad.exit1.i3, !dbg !18

__internal_fmad.exit1.i3:                         ; preds = %__nv_tanhf.exit
  %56 = fmul float %.01.i2, 0x4007154760000000, !dbg !18
  %57 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %56) #4, !dbg !18
  %58 = fadd float %57, 1.000000e+00, !dbg !18
  %59 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %58) #5, !dbg !18, !srcloc !19
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not6.i4 = icmp eq i32 %60, 0, !dbg !18
  %61 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %59, float -2.000000e+00, float 1.000000e+00) #4, !dbg !18
  %62 = tail call float @llvm.nvvm.fma.rn.f(float %59, float -2.000000e+00, float 1.000000e+00) #4, !dbg !18
  %.03.i5 = select i1 %.not6.i4, float %62, float %61, !dbg !18
  %63 = fcmp oge float %.01.i2, 0x4022059680000000, !dbg !18
  %s.0.i6 = select i1 %63, float 1.000000e+00, float %.03.i5, !dbg !18
  %64 = bitcast float %s.0.i6 to i32, !dbg !18
  %65 = bitcast float %18 to i32, !dbg !18
  %66 = and i32 %65, -2147483648, !dbg !18
  %67 = or i32 %66, %64, !dbg !18
  %68 = bitcast i32 %67 to float, !dbg !18
  br label %__nv_tanhf.exit19, !dbg !18

__internal_fmad.exit3.i8:                         ; preds = %__nv_tanhf.exit
  %69 = fmul float %18, %18, !dbg !18
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not1.i9 = icmp eq i32 %70, 0, !dbg !18
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %69, float 0xBFAAC795C0000000) #4, !dbg !18
  %72 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %69, float 0xBFAAC795C0000000) #4, !dbg !18
  %.06.i10 = select i1 %.not1.i9, float %72, float %71, !dbg !18
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not2.i11 = icmp eq i32 %73, 0, !dbg !18
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %69, float 0x3FC10B2820000000) #4, !dbg !18
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %69, float 0x3FC10B2820000000) #4, !dbg !18
  %.05.i12 = select i1 %.not2.i11, float %75, float %74, !dbg !18
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not3.i13 = icmp eq i32 %76, 0, !dbg !18
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i12, float %69, float 0xBFD5553DA0000000) #4, !dbg !18
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i12, float %69, float 0xBFD5553DA0000000) #4, !dbg !18
  %.0.i14 = select i1 %.not3.i13, float %78, float %77, !dbg !18
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not4.i15 = icmp eq i32 %79, 0, !dbg !18
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %69, float 0.000000e+00) #4, !dbg !18
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %69, float 0.000000e+00) #4, !dbg !18
  %.04.i16 = select i1 %.not4.i15, float %81, float %80, !dbg !18
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !18
  %.not5.i17 = icmp eq i32 %82, 0, !dbg !18
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i16, float %18, float %18) #4, !dbg !18
  %84 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i16, float %18, float %18) #4, !dbg !18
  %.02.i18 = select i1 %.not5.i17, float %84, float %83, !dbg !18
  br label %__nv_tanhf.exit19, !dbg !18

__nv_tanhf.exit19:                                ; preds = %__internal_fmad.exit1.i3, %__internal_fmad.exit3.i8
  %s.1.i7 = phi float [ %68, %__internal_fmad.exit1.i3 ], [ %.02.i18, %__internal_fmad.exit3.i8 ], !dbg !18
  %85 = fmul float %s.1.i, 3.000000e+01, !dbg !20
  %86 = fmul float %s.1.i7, 3.000000e+01, !dbg !20
  %87 = getelementptr i16, ptr addrspace(1) %1, i64 %10, !dbg !21
  %88 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %85) #4, !dbg !22
  %89 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %86) #4, !dbg !22
  %90 = insertelement <2 x i16> undef, i16 %88, i64 0, !dbg !22
  %91 = insertelement <2 x i16> %90, i16 %89, i64 1, !dbg !22
  %92 = bitcast <2 x i16> %91 to i32, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %87, i1 true) #4, !dbg !22
  ret void, !dbg !23
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: alwaysinline nounwind
define float @__nv_tanhf(float %a) local_unnamed_addr #1 {
__nv_fabsf.exit:
  %0 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not = icmp eq i32 %0, 0
  %1 = tail call float @llvm.nvvm.fabs.ftz.f(float %a) #4
  %2 = tail call float @llvm.nvvm.fabs.f(float %a) #4
  %.01 = select i1 %.not, float %2, float %1
  %3 = fcmp ult float %.01, 0x3FE3333340000000
  br i1 %3, label %__internal_fmad.exit3, label %__internal_fmad.exit1

__internal_fmad.exit1:                            ; preds = %__nv_fabsf.exit
  %4 = fmul float %.01, 0x4007154760000000
  %5 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %4) #4
  %6 = fadd float %5, 1.000000e+00
  %7 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %6) #5, !srcloc !19
  %8 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not6 = icmp eq i32 %8, 0
  %9 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %7, float -2.000000e+00, float 1.000000e+00) #4
  %10 = tail call float @llvm.nvvm.fma.rn.f(float %7, float -2.000000e+00, float 1.000000e+00) #4
  %.03 = select i1 %.not6, float %10, float %9
  %11 = fcmp oge float %.01, 0x4022059680000000
  %s.0 = select i1 %11, float 1.000000e+00, float %.03
  %12 = bitcast float %s.0 to i32
  %13 = bitcast float %a to i32
  %14 = and i32 %13, -2147483648
  %15 = or i32 %14, %12
  %16 = bitcast i32 %15 to float
  br label %33

__internal_fmad.exit3:                            ; preds = %__nv_fabsf.exit
  %17 = fmul float %a, %a
  %18 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not1 = icmp eq i32 %18, 0
  %19 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #4
  %20 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #4
  %.06 = select i1 %.not1, float %20, float %19
  %21 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not2 = icmp eq i32 %21, 0
  %22 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06, float %17, float 0x3FC10B2820000000) #4
  %23 = tail call float @llvm.nvvm.fma.rn.f(float %.06, float %17, float 0x3FC10B2820000000) #4
  %.05 = select i1 %.not2, float %23, float %22
  %24 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not3 = icmp eq i32 %24, 0
  %25 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05, float %17, float 0xBFD5553DA0000000) #4
  %26 = tail call float @llvm.nvvm.fma.rn.f(float %.05, float %17, float 0xBFD5553DA0000000) #4
  %.0 = select i1 %.not3, float %26, float %25
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not4 = icmp eq i32 %27, 0
  %28 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0, float %17, float 0.000000e+00) #4
  %29 = tail call float @llvm.nvvm.fma.rn.f(float %.0, float %17, float 0.000000e+00) #4
  %.04 = select i1 %.not4, float %29, float %28
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not5 = icmp eq i32 %30, 0
  %31 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04, float %a, float %a) #4
  %32 = tail call float @llvm.nvvm.fma.rn.f(float %.04, float %a, float %a) #4
  %.02 = select i1 %.not5, float %32, float %31
  br label %33

33:                                               ; preds = %__internal_fmad.exit3, %__internal_fmad.exit1
  %s.1 = phi float [ %16, %__internal_fmad.exit1 ], [ %.02, %__internal_fmad.exit3 ]
  ret float %s.1
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c6aapnoisnl5rourrxazwstj5dkx5cpr7bf2yejlyvx453jnal2d.py", directory: "/tmp/torchinductor_zeus/6a")
!4 = !{ptr @triton__0d1d2de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2de", linkageName: "triton__0d1d2de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 36, scope: !7)
!11 = !DILocation(line: 20, column: 28, scope: !7)
!12 = !DILocation(line: 20, column: 33, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 30, scope: !7)
!15 = !DILocation(line: 24, column: 35, scope: !7)
!16 = !DILocation(line: 24, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 18, scope: !7)
!18 = !DILocation(line: 27, column: 24, scope: !7)
!19 = !{i32 21046}
!20 = !DILocation(line: 28, column: 18, scope: !7)
!21 = !DILocation(line: 29, column: 25, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 29, column: 4, scope: !7)
