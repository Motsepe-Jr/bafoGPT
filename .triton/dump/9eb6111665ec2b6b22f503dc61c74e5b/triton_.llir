; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = and i32 %9, 3, !dbg !8
  %urem = and i32 %7, 127, !dbg !8
  %11 = shl nuw nsw i32 %urem, 2, !dbg !8
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %13 = icmp slt i32 %12, 2304, !dbg !10
  %14 = mul nuw nsw i32 %urem, 9216, !dbg !11
  %15 = add i32 %12, %14, !dbg !12
  %16 = add i32 %15, 2304, !dbg !12
  %17 = add i32 %15, 4608, !dbg !12
  %18 = add i32 %15, 6912, !dbg !12
  %19 = sext i32 %15 to i64, !dbg !13
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !13
  %21 = sext i32 %16 to i64, !dbg !13
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !13
  %23 = sext i32 %17 to i64, !dbg !13
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !13
  %25 = sext i32 %18 to i64, !dbg !13
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !13
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %13, i32 0, i1 %13) #3, !dbg !14
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %13, i32 0, i1 %13) #3, !dbg !14
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %13, i32 0, i1 %13) #3, !dbg !14
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %13, i32 0, i1 %13) #3, !dbg !14
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !15
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !15
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !15
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !15
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %13, i32 0, i1 %13) #3, !dbg !16
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %13, i32 0, i1 %13) #3, !dbg !16
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %13, i32 0, i1 %13) #3, !dbg !16
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %13, i32 0, i1 %13) #3, !dbg !16
  %39 = zext nneg i32 %11 to i64, !dbg !17
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !17
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !18
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !18
  %46 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !14
  %47 = insertelement <2 x i32> %46, i32 %28, i64 1, !dbg !14
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !14
  %49 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !16
  %50 = insertelement <2 x i32> %49, i32 %36, i64 1, !dbg !16
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !16
  %52 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !18
  %53 = insertelement <2 x i32> %52, i32 %43, i64 1, !dbg !18
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !18
  %55 = fmul <2 x float> %51, %54, !dbg !19
  %56 = fmul <2 x float> %55, %48, !dbg !20
  %57 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !14
  %58 = insertelement <2 x i32> %57, i32 %29, i64 1, !dbg !14
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !14
  %60 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !16
  %61 = insertelement <2 x i32> %60, i32 %37, i64 1, !dbg !16
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !16
  %63 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !18
  %64 = insertelement <2 x i32> %63, i32 %44, i64 1, !dbg !18
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !18
  %66 = fmul <2 x float> %62, %65, !dbg !19
  %67 = fmul <2 x float> %66, %59, !dbg !20
  %shift = shufflevector <2 x float> %56, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %68 = fadd <2 x float> %56, %shift, !dbg !21
  %shift1 = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %69 = fadd <2 x float> %shift1, %68, !dbg !21
  %70 = fadd <2 x float> %67, %69, !dbg !21
  %71 = extractelement <2 x float> %70, i64 0, !dbg !21
  %72 = select i1 %13, float %71, float 0.000000e+00, !dbg !21
  %73 = bitcast float %72 to i32, !dbg !27
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !27
  %75 = bitcast i32 %74 to float, !dbg !27
  %76 = fadd float %72, %75, !dbg !21
  %77 = bitcast float %76 to i32, !dbg !27
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !27
  %79 = bitcast i32 %78 to float, !dbg !27
  %80 = fadd float %76, %79, !dbg !21
  %81 = bitcast float %80 to i32, !dbg !27
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !27
  %83 = bitcast i32 %82 to float, !dbg !27
  %84 = fadd float %80, %83, !dbg !21
  %85 = bitcast float %84 to i32, !dbg !27
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = fadd float %84, %87, !dbg !21
  %89 = bitcast float %88 to i32, !dbg !27
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !27
  %91 = bitcast i32 %90 to float, !dbg !27
  %92 = fadd float %88, %91, !dbg !21
  %93 = icmp eq i32 %8, 0, !dbg !27
  %94 = zext nneg i32 %10 to i64, !dbg !27
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i64 %94, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, float %92, i1 %93) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %96 = icmp slt i32 %7, 4, !dbg !27
  %97 = sext i32 %7 to i64, !dbg !27
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i64 %97, !dbg !27
  %99 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %96) #3, !dbg !27
  %100 = bitcast float %99 to i32, !dbg !27
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !27
  %102 = bitcast i32 %101 to float, !dbg !27
  %103 = fadd float %99, %102, !dbg !21
  %104 = bitcast float %103 to i32, !dbg !27
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !27
  %106 = bitcast i32 %105 to float, !dbg !27
  %107 = fadd float %103, %106, !dbg !21
  %108 = and i32 %7, 3, !dbg !27
  %109 = icmp eq i32 %108, 0, !dbg !27
  %110 = and i1 %96, %109, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, float %107, i1 %110) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %111 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  %112 = fadd float %111, 0.000000e+00, !dbg !29
  %113 = sext i32 %12 to i64, !dbg !33
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !33
  %115 = icmp eq i32 %urem, 0, !dbg !34
  %116 = bitcast float %112 to i32, !dbg !34
  %117 = and i1 %115, %13, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %114, i1 %117) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "clkuht53rjgqa3l4gr3ht3odeltzhfwx7fxavzcj3tpwobzgyrql.py", directory: "/tmp/torchinductor_zeus/lk")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 26, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 25, column: 21, scope: !5)
!11 = !DILocation(line: 30, column: 41, scope: !5)
!12 = !DILocation(line: 30, column: 36, scope: !5)
!13 = !DILocation(line: 30, column: 30, scope: !5)
!14 = !DILocation(line: 30, column: 47, scope: !5)
!15 = !DILocation(line: 31, column: 30, scope: !5)
!16 = !DILocation(line: 31, column: 47, scope: !5)
!17 = !DILocation(line: 32, column: 30, scope: !5)
!18 = !DILocation(line: 32, column: 35, scope: !5)
!19 = !DILocation(line: 33, column: 18, scope: !5)
!20 = !DILocation(line: 34, column: 18, scope: !5)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !5, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 57, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 57, scope: !24)
!29 = !DILocation(line: 8, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !5, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor")
!32 = !DILocation(line: 37, column: 44, scope: !30)
!33 = !DILocation(line: 38, column: 25, scope: !5)
!34 = !DILocation(line: 38, column: 36, scope: !5)
!35 = !DILocation(line: 38, column: 4, scope: !5)
