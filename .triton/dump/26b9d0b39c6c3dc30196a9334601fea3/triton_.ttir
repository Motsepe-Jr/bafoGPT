module {
  tt.func public @triton__0d1d2d3d4d5de6de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32
    %c-1_i32 = arith.constant -1 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1024xbf16>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1024xf32>
    %cst_2 = arith.constant dense<-3.38953139E+38> : tensor<1024xf32>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1024xf32>
    %cst_4 = arith.constant dense<1> : tensor<1024xi64>
    %cst_5 = arith.constant dense<5.000000e+01> : tensor<1024xf32>
    %cst_6 = arith.constant dense<6.250000e-02> : tensor<1024xf32>
    %cst_7 = arith.constant dense<1024> : tensor<1024xi32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %2 = arith.cmpi slt, %1, %cst_7 : tensor<1024xi32>
    %3 = arith.remsi %0, %c1024_i32 : i32
    %4 = arith.muli %0, %c1024_i32 : i32
    %5 = tt.splat %4 : (i32) -> tensor<1024xi32>
    %6 = arith.addi %1, %5 : tensor<1024xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>>
    %8 = tt.addptr %7, %6 : tensor<1024x!tt.ptr<bf16, 1>>, tensor<1024xi32>
    %9 = tt.load %8, %2, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16>
    %10 = arith.extf %9 : tensor<1024xbf16> to tensor<1024xf32>
    %11 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>>
    %12 = tt.addptr %11, %6 : tensor<1024x!tt.ptr<bf16, 1>>, tensor<1024xi32>
    %13 = tt.load %12, %2, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16>
    %14 = arith.extf %13 : tensor<1024xbf16> to tensor<1024xf32>
    %15 = tt.addptr %arg2, %0 : !tt.ptr<f32, 1>, i32
    %16 = tt.splat %15 : (!tt.ptr<f32, 1>) -> tensor<1x!tt.ptr<f32, 1>>
    %17 = tt.load %16 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1xf32>
    %18 = tt.addptr %arg3, %0 : !tt.ptr<f32, 1>, i32
    %19 = tt.splat %18 : (!tt.ptr<f32, 1>) -> tensor<1x!tt.ptr<f32, 1>>
    %20 = tt.load %19 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1xf32>
    %21 = arith.mulf %14, %cst_6 : tensor<1024xf32>
    %22 = arith.divf %21, %cst_5 : tensor<1024xf32>
    %23 = tt.extern_elementwise %22 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1024xf32>) -> tensor<1024xf32>
    %24 = arith.mulf %23, %cst_5 : tensor<1024xf32>
    %25 = arith.muli %3, %c-1_i32 : i32
    %26 = tt.splat %25 : (i32) -> tensor<1024xi32>
    %27 = arith.addi %1, %26 : tensor<1024xi32>
    %28 = arith.extsi %27 : tensor<1024xi32> to tensor<1024xi64>
    %29 = arith.cmpi sge, %28, %cst_4 : tensor<1024xi64>
    %30 = arith.select %29, %cst_3, %cst_1 : tensor<1024xi1>, tensor<1024xf32>
    %31 = arith.cmpf une, %30, %cst_1 : tensor<1024xf32>
    %32 = arith.select %31, %cst_2, %30 : tensor<1024xi1>, tensor<1024xf32>
    %33 = arith.addf %24, %32 : tensor<1024xf32>
    %34 = tt.broadcast %17 : (tensor<1xf32>) -> tensor<1024xf32>
    %35 = arith.subf %33, %34 : tensor<1024xf32>
    %36 = math.exp %35 : tensor<1024xf32>
    %37 = tt.broadcast %20 : (tensor<1xf32>) -> tensor<1024xf32>
    %38 = arith.divf %36, %37 : tensor<1024xf32>
    %39 = arith.mulf %10, %38 : tensor<1024xf32>
    %40 = arith.select %2, %39, %cst_1 : tensor<1024xi1>, tensor<1024xf32>
    %41 = "tt.reduce"(%40) <{axis = 0 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %55 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %55 : f32
    }) : (tensor<1024xf32>) -> f32
    %42 = arith.addf %41, %cst_0 : f32
    %43 = tt.splat %42 : (f32) -> tensor<1024xf32>
    %44 = arith.mulf %38, %43 : tensor<1024xf32>
    %45 = arith.subf %39, %44 : tensor<1024xf32>
    %46 = arith.mulf %45, %cst_5 : tensor<1024xf32>
    %47 = arith.mulf %23, %23 : tensor<1024xf32>
    %48 = arith.subf %cst_3, %47 : tensor<1024xf32>
    %49 = arith.mulf %46, %48 : tensor<1024xf32>
    %50 = arith.divf %49, %cst_5 : tensor<1024xf32>
    %51 = arith.mulf %50, %cst_6 : tensor<1024xf32>
    %52 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>>
    %53 = tt.addptr %52, %6 : tensor<1024x!tt.ptr<bf16, 1>>, tensor<1024xi32>
    %54 = arith.truncf %51 : tensor<1024xf32> to tensor<1024xbf16>
    tt.store %53, %54, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xbf16>
    tt.return
  }
}
