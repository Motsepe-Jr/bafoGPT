; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %urem = and i32 %7, 255, !dbg !10
  %8 = shl nuw nsw i32 %urem, 2, !dbg !10
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %10 = icmp slt i32 %9, 2304, !dbg !12
  %11 = mul nuw nsw i32 %urem, 9216, !dbg !13
  %12 = add i32 %9, %11, !dbg !14
  %13 = add i32 %12, 2304, !dbg !14
  %14 = add i32 %12, 4608, !dbg !14
  %15 = add i32 %12, 6912, !dbg !14
  %16 = sext i32 %12 to i64, !dbg !15
  %17 = getelementptr i16, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = sext i32 %13 to i64, !dbg !15
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = sext i32 %14 to i64, !dbg !15
  %21 = getelementptr i16, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = sext i32 %15 to i64, !dbg !15
  %23 = getelementptr i16, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %17, i1 %10, i16 0, i1 %10) #6, !dbg !16
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %19, i1 %10, i16 0, i1 %10) #6, !dbg !16
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %21, i1 %10, i16 0, i1 %10) #6, !dbg !16
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %23, i1 %10, i16 0, i1 %10) #6, !dbg !16
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !17
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !17
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !17
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %10, i32 0, i1 %10) #6, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %10, i32 0, i1 %10) #6, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %10, i32 0, i1 %10) #6, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %10, i32 0, i1 %10) #6, !dbg !19
  %40 = zext nneg i32 %8 to i64, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !20
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !21
  %47 = bitcast i32 %43 to float, !dbg !21
  %48 = bitcast i32 %44 to float, !dbg !21
  %49 = bitcast i32 %45 to float, !dbg !21
  %50 = bitcast i32 %46 to float, !dbg !21
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 2.304000e+03) #6, !dbg !22
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 2.304000e+03) #6, !dbg !22
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 2.304000e+03) #6, !dbg !22
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 2.304000e+03) #6, !dbg !22
  %55 = fadd float %51, 0x3EE4F8B580000000, !dbg !23
  %56 = fadd float %52, 0x3EE4F8B580000000, !dbg !23
  %57 = fadd float %53, 0x3EE4F8B580000000, !dbg !23
  %58 = fadd float %54, 0x3EE4F8B580000000, !dbg !23
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i = icmp eq i32 %59, 0, !dbg !24
  br i1 %.not.i, label %62, label %60, !dbg !24

60:                                               ; preds = %6
  %61 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %55), !dbg !24
  br label %__nv_rsqrtf.exit, !dbg !24

62:                                               ; preds = %6
  %63 = tail call float @llvm.nvvm.rsqrt.approx.f(float %55), !dbg !24
  br label %__nv_rsqrtf.exit, !dbg !24

__nv_rsqrtf.exit:                                 ; preds = %60, %62
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], !dbg !24
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i1 = icmp eq i32 %64, 0, !dbg !24
  br i1 %.not.i1, label %67, label %65, !dbg !24

65:                                               ; preds = %__nv_rsqrtf.exit
  %66 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %56), !dbg !24
  br label %__nv_rsqrtf.exit3, !dbg !24

67:                                               ; preds = %__nv_rsqrtf.exit
  %68 = tail call float @llvm.nvvm.rsqrt.approx.f(float %56), !dbg !24
  br label %__nv_rsqrtf.exit3, !dbg !24

__nv_rsqrtf.exit3:                                ; preds = %65, %67
  %.0.i2 = phi float [ %66, %65 ], [ %68, %67 ], !dbg !24
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i4 = icmp eq i32 %69, 0, !dbg !24
  br i1 %.not.i4, label %72, label %70, !dbg !24

70:                                               ; preds = %__nv_rsqrtf.exit3
  %71 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %57), !dbg !24
  br label %__nv_rsqrtf.exit6, !dbg !24

72:                                               ; preds = %__nv_rsqrtf.exit3
  %73 = tail call float @llvm.nvvm.rsqrt.approx.f(float %57), !dbg !24
  br label %__nv_rsqrtf.exit6, !dbg !24

__nv_rsqrtf.exit6:                                ; preds = %70, %72
  %.0.i5 = phi float [ %71, %70 ], [ %73, %72 ], !dbg !24
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !24
  %.not.i7 = icmp eq i32 %74, 0, !dbg !24
  br i1 %.not.i7, label %77, label %75, !dbg !24

75:                                               ; preds = %__nv_rsqrtf.exit6
  %76 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %58), !dbg !24
  br label %__nv_rsqrtf.exit9, !dbg !24

77:                                               ; preds = %__nv_rsqrtf.exit6
  %78 = tail call float @llvm.nvvm.rsqrt.approx.f(float %58), !dbg !24
  br label %__nv_rsqrtf.exit9, !dbg !24

__nv_rsqrtf.exit9:                                ; preds = %75, %77
  %.0.i8 = phi float [ %76, %75 ], [ %78, %77 ], !dbg !24
  %79 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !19
  %80 = insertelement <2 x i32> %79, i32 %39, i64 1, !dbg !19
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !19
  %82 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !19
  %83 = insertelement <2 x i32> %82, i32 %37, i64 1, !dbg !19
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !19
  %85 = lshr i32 %7, 5, !dbg !10
  %86 = and i32 %85, 7, !dbg !10
  %87 = and i32 %7, 31, !dbg !10
  %88 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !25
  %89 = insertelement <2 x float> %88, float %.0.i2, i64 1, !dbg !25
  %90 = fmul <2 x float> %89, %84, !dbg !25
  %91 = insertelement <2 x float> poison, float %28, i64 0, !dbg !26
  %92 = insertelement <2 x float> %91, float %29, i64 1, !dbg !26
  %93 = fmul <2 x float> %92, %90, !dbg !26
  %94 = insertelement <2 x float> poison, float %.0.i5, i64 0, !dbg !25
  %95 = insertelement <2 x float> %94, float %.0.i8, i64 1, !dbg !25
  %96 = fmul <2 x float> %95, %81, !dbg !25
  %97 = insertelement <2 x float> poison, float %30, i64 0, !dbg !26
  %98 = insertelement <2 x float> %97, float %31, i64 1, !dbg !26
  %99 = fmul <2 x float> %98, %96, !dbg !26
  %shift = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %100 = fadd <2 x float> %93, %shift, !dbg !27
  %101 = fadd <2 x float> %100, %99, !dbg !27
  %shift10 = shufflevector <2 x float> %99, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %102 = fadd <2 x float> %101, %shift10, !dbg !27
  %103 = extractelement <2 x float> %102, i64 0, !dbg !27
  %104 = select i1 %10, float %103, float 0.000000e+00, !dbg !27
  %105 = bitcast float %104 to i32, !dbg !33
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 16, i32 31), !dbg !33
  %107 = bitcast i32 %106 to float, !dbg !33
  %108 = fadd float %104, %107, !dbg !27
  %109 = bitcast float %108 to i32, !dbg !33
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 8, i32 31), !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = fadd float %108, %111, !dbg !27
  %113 = bitcast float %112 to i32, !dbg !33
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 4, i32 31), !dbg !33
  %115 = bitcast i32 %114 to float, !dbg !33
  %116 = fadd float %112, %115, !dbg !27
  %117 = bitcast float %116 to i32, !dbg !33
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !33
  %119 = bitcast i32 %118 to float, !dbg !33
  %120 = fadd float %116, %119, !dbg !27
  %121 = bitcast float %120 to i32, !dbg !33
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !33
  %123 = bitcast i32 %122 to float, !dbg !33
  %124 = fadd float %120, %123, !dbg !27
  %125 = icmp eq i32 %87, 0, !dbg !33
  %126 = zext nneg i32 %86 to i64, !dbg !33
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i64 %126, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, float %124, i1 %125) #6, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %128 = icmp slt i32 %7, 8, !dbg !33
  %129 = sext i32 %7 to i64, !dbg !33
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %129, !dbg !33
  %131 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %130, i1 %128) #6, !dbg !33
  %132 = bitcast float %131 to i32, !dbg !33
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !33
  %134 = bitcast i32 %133 to float, !dbg !33
  %135 = fadd float %131, %134, !dbg !27
  %136 = bitcast float %135 to i32, !dbg !33
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !33
  %138 = bitcast i32 %137 to float, !dbg !33
  %139 = fadd float %135, %138, !dbg !27
  %140 = bitcast float %139 to i32, !dbg !33
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !33
  %142 = bitcast i32 %141 to float, !dbg !33
  %143 = fadd float %139, %142, !dbg !27
  %144 = and i32 %7, 7, !dbg !33
  %145 = icmp eq i32 %144, 0, !dbg !33
  %146 = and i1 %128, %145, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, float %143, i1 %146) #6, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %147 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !33
  %148 = fadd float %147, 0.000000e+00, !dbg !35
  %149 = sext i32 %9 to i64, !dbg !39
  %150 = getelementptr float, ptr addrspace(1) %3, i64 %149, !dbg !39
  %151 = icmp eq i32 %urem, 0, !dbg !40
  %152 = bitcast float %148 to i32, !dbg !40
  %153 = and i1 %151, %10, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %150, i1 %153) #6, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "chcxg2lgqfpy3nze7fao5ayv6mi3ny724vw7pvgcxmpkre76teqh.py", directory: "/tmp/torchinductor_zeus/hc")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 26, scope: !7)
!11 = !DILocation(line: 23, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 21, scope: !7)
!13 = !DILocation(line: 30, column: 41, scope: !7)
!14 = !DILocation(line: 30, column: 36, scope: !7)
!15 = !DILocation(line: 30, column: 30, scope: !7)
!16 = !DILocation(line: 30, column: 47, scope: !7)
!17 = !DILocation(line: 30, column: 76, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 18, scope: !7)
!23 = !DILocation(line: 37, column: 18, scope: !7)
!24 = !DILocation(line: 38, column: 25, scope: !7)
!25 = !DILocation(line: 39, column: 18, scope: !7)
!26 = !DILocation(line: 40, column: 19, scope: !7)
!27 = !DILocation(line: 233, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !32)
!32 = !DILocation(line: 43, column: 59, scope: !28)
!33 = !DILocation(line: 243, column: 36, scope: !30, inlinedAt: !34)
!34 = !DILocation(line: 43, column: 59, scope: !30)
!35 = !DILocation(line: 8, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor")
!38 = !DILocation(line: 43, column: 45, scope: !36)
!39 = !DILocation(line: 44, column: 25, scope: !7)
!40 = !DILocation(line: 44, column: 37, scope: !7)
!41 = !DILocation(line: 44, column: 4, scope: !7)
