; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = shl i32 %7, 1, !dbg !8
  %9 = and i32 %8, 14, !dbg !8
  %10 = lshr i32 %7, 3, !dbg !8
  %11 = and i32 %10, 15, !dbg !8
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %13 = shl i32 %12, 4, !dbg !10
  %14 = or i32 %13, %9, !dbg !11
  %15 = or i32 %13, %11, !dbg !11
  %16 = icmp slt i32 %14, 16, !dbg !12
  %17 = icmp slt i32 %15, 16, !dbg !12
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %19 = shl i32 %18, 4, !dbg !14
  %20 = or i32 %19, %11, !dbg !15
  %21 = or i32 %19, %9, !dbg !15
  %22 = icmp slt i32 %20, 256, !dbg !16
  %23 = icmp slt i32 %21, 256, !dbg !16
  %.frozen = freeze i32 %14
  %24 = sdiv i32 %.frozen, 4, !dbg !17
  %25 = mul i32 %24, 4
  %.decomposed = sub i32 %.frozen, %25
  %26 = srem i32 %15, 4, !dbg !18
  %27 = shl i32 %20, 2, !dbg !19
  %28 = add i32 %27, %.decomposed, !dbg !20
  %29 = shl i32 %24, 11, !dbg !21
  %30 = add i32 %28, %29, !dbg !22
  %31 = sext i32 %30 to i64, !dbg !23
  %32 = getelementptr i16, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = and i1 %16, %22, !dbg !24
  %34 = and i1 %17, %23, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %33) #2, !dbg !25
  %36 = trunc i32 %35 to i16, !dbg !25
  %extelt.offset = lshr i32 %35, 16, !dbg !25
  %37 = trunc i32 %extelt.offset to i16, !dbg !25
  %38 = mul nuw nsw i32 %9, 17, !dbg !26
  %39 = add nuw nsw i32 %38, %11, !dbg !26
  %40 = zext nneg i32 %39 to i64, !dbg !26
  %41 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %40, !dbg !26
  %42 = insertelement <1 x i16> undef, i16 %36, i64 0, !dbg !26
  store <1 x i16> %42, ptr addrspace(3) %41, align 2, !dbg !26
  %43 = or i32 %9, 1, !dbg !26
  %44 = mul nuw nsw i32 %43, 17, !dbg !26
  %45 = add nuw nsw i32 %44, %11, !dbg !26
  %46 = zext nneg i32 %45 to i64, !dbg !26
  %47 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %46, !dbg !26
  %48 = insertelement <1 x i16> undef, i16 %37, i64 0, !dbg !26
  store <1 x i16> %48, ptr addrspace(3) %47, align 2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %49 = mul nuw nsw i32 %11, 17, !dbg !26
  %50 = add nuw nsw i32 %49, %9, !dbg !26
  %51 = zext nneg i32 %50 to i64, !dbg !26
  %52 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %51, !dbg !26
  %53 = load i16, ptr addrspace(3) %52, align 2, !dbg !26
  %54 = add nuw nsw i32 %49, %43, !dbg !26
  %55 = zext nneg i32 %54 to i64, !dbg !26
  %56 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %55, !dbg !26
  %57 = load i16, ptr addrspace(3) %56, align 2, !dbg !26
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #2, !dbg !26
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #2, !dbg !26
  %60 = shl nsw i32 %26, 8, !dbg !27
  %61 = add i32 %60, %21, !dbg !28
  %62 = sext i32 %61 to i64, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !29
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %34) #2, !dbg !30
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !30
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !30
  %67 = bitcast i32 %65 to float, !dbg !30
  %68 = bitcast i32 %66 to float, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %69 = mul nuw nsw i32 %9, 18, !dbg !30
  %70 = add nuw nsw i32 %69, %11, !dbg !30
  %71 = zext nneg i32 %70 to i64, !dbg !30
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i64 %71, !dbg !30
  %73 = insertelement <1 x float> undef, float %67, i64 0, !dbg !30
  store <1 x float> %73, ptr addrspace(3) %72, align 4, !dbg !30
  %74 = mul nuw nsw i32 %43, 18, !dbg !30
  %75 = add nuw nsw i32 %74, %11, !dbg !30
  %76 = zext nneg i32 %75 to i64, !dbg !30
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i64 %76, !dbg !30
  %78 = insertelement <1 x float> undef, float %68, i64 0, !dbg !30
  store <1 x float> %78, ptr addrspace(3) %77, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %79 = mul nuw nsw i32 %11, 18, !dbg !30
  %80 = add nuw nsw i32 %79, %9, !dbg !30
  %81 = zext nneg i32 %80 to i64, !dbg !30
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i64 %81, !dbg !30
  %83 = load float, ptr addrspace(3) %82, align 8, !dbg !30
  %84 = getelementptr inbounds <2 x float>, ptr addrspace(3) %82, i64 0, i64 1, !dbg !30
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !30
  %86 = add i32 %28, 1024, !dbg !31
  %87 = add i32 %86, %29, !dbg !32
  %88 = sext i32 %87 to i64, !dbg !33
  %89 = getelementptr i16, ptr addrspace(1) %0, i64 %88, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %33) #2, !dbg !34
  %91 = trunc i32 %90 to i16, !dbg !34
  %extelt.offset1 = lshr i32 %90, 16, !dbg !34
  %92 = trunc i32 %extelt.offset1 to i16, !dbg !34
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #2, !dbg !35
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #2, !dbg !35
  %95 = icmp sgt i32 %20, 255, !dbg !36
  %96 = icmp sgt i32 %21, 255, !dbg !36
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 false, i32 0, i1 false) #2, !dbg !37
  %98 = trunc i32 %97 to i16, !dbg !37
  %extelt.offset2 = lshr i32 %97, 16, !dbg !37
  %99 = trunc i32 %extelt.offset2 to i16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %100 = insertelement <1 x i16> undef, i16 %98, i64 0, !dbg !38
  store <1 x i16> %100, ptr addrspace(3) %41, align 2, !dbg !38
  %101 = insertelement <1 x i16> undef, i16 %99, i64 0, !dbg !38
  store <1 x i16> %101, ptr addrspace(3) %47, align 2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %102 = load i16, ptr addrspace(3) %52, align 2, !dbg !38
  %103 = load i16, ptr addrspace(3) %56, align 2, !dbg !38
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #2, !dbg !39
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #2, !dbg !39
  %106 = select i1 %96, float %104, float 0.000000e+00, !dbg !38
  %107 = select i1 %96, float %105, float 0.000000e+00, !dbg !38
  %108 = fmul float %58, %67, !dbg !40
  %109 = fmul float %59, %68, !dbg !40
  %110 = icmp sgt i32 %20, 127, !dbg !41
  %111 = icmp sgt i32 %21, 127, !dbg !41
  %112 = add i32 %28, -512, !dbg !42
  %113 = add i32 %112, %29, !dbg !43
  %114 = sext i32 %113 to i64, !dbg !44
  %115 = getelementptr i16, ptr addrspace(1) %0, i64 %114, !dbg !44
  %116 = and i32 %18, 268435448, !dbg !45
  %117 = icmp eq i32 %116, 8, !dbg !45
  %118 = and i1 %117, %16, !dbg !46
  %119 = and i1 %117, %17, !dbg !46
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %118, i32 0, i1 %118) #2, !dbg !47
  %121 = trunc i32 %120 to i16, !dbg !47
  %extelt.offset3 = lshr i32 %120, 16, !dbg !47
  %122 = trunc i32 %extelt.offset3 to i16, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %123 = insertelement <1 x i16> undef, i16 %121, i64 0, !dbg !48
  store <1 x i16> %123, ptr addrspace(3) %41, align 2, !dbg !48
  %124 = insertelement <1 x i16> undef, i16 %122, i64 0, !dbg !48
  store <1 x i16> %124, ptr addrspace(3) %47, align 2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %125 = load i16, ptr addrspace(3) %52, align 2, !dbg !48
  %126 = load i16, ptr addrspace(3) %56, align 2, !dbg !48
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %125) #2, !dbg !48
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #2, !dbg !48
  %129 = add i32 %61, -128, !dbg !49
  %130 = sext i32 %129 to i64, !dbg !50
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !50
  %132 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %131, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #2, !dbg !51
  %133 = extractvalue { i32, i32 } %132, 0, !dbg !51
  %134 = extractvalue { i32, i32 } %132, 1, !dbg !51
  %135 = bitcast i32 %133 to float, !dbg !51
  %136 = bitcast i32 %134 to float, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %137 = insertelement <1 x float> undef, float %135, i64 0, !dbg !51
  store <1 x float> %137, ptr addrspace(3) %72, align 4, !dbg !51
  %138 = insertelement <1 x float> undef, float %136, i64 0, !dbg !51
  store <1 x float> %138, ptr addrspace(3) %77, align 4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %139 = load float, ptr addrspace(3) %82, align 8, !dbg !51
  %140 = load float, ptr addrspace(3) %84, align 4, !dbg !51
  %141 = fmul float %127, %135, !dbg !52
  %142 = fmul float %128, %136, !dbg !52
  %143 = fsub float 0.000000e+00, %141, !dbg !53
  %144 = fsub float 0.000000e+00, %142, !dbg !53
  %145 = select i1 %111, float %143, float 0.000000e+00, !dbg !38
  %146 = select i1 %111, float %144, float 0.000000e+00, !dbg !38
  %147 = fadd float %108, %145, !dbg !54
  %148 = fadd float %109, %146, !dbg !54
  %149 = icmp slt i32 %20, 128, !dbg !55
  %150 = icmp slt i32 %21, 128, !dbg !55
  %151 = add i32 %28, 512, !dbg !56
  %152 = add i32 %151, %29, !dbg !57
  %153 = sext i32 %152 to i64, !dbg !58
  %154 = getelementptr i16, ptr addrspace(1) %0, i64 %153, !dbg !58
  %155 = and i1 %16, %149, !dbg !59
  %156 = and i1 %17, %150, !dbg !59
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %155, i32 0, i1 %155) #2, !dbg !60
  %158 = trunc i32 %157 to i16, !dbg !60
  %extelt.offset4 = lshr i32 %157, 16, !dbg !60
  %159 = trunc i32 %extelt.offset4 to i16, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %160 = insertelement <1 x i16> undef, i16 %158, i64 0, !dbg !61
  store <1 x i16> %160, ptr addrspace(3) %41, align 2, !dbg !61
  %161 = insertelement <1 x i16> undef, i16 %159, i64 0, !dbg !61
  store <1 x i16> %161, ptr addrspace(3) %47, align 2, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %162 = load i16, ptr addrspace(3) %52, align 2, !dbg !61
  %163 = load i16, ptr addrspace(3) %56, align 2, !dbg !61
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %162) #2, !dbg !61
  %165 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %163) #2, !dbg !61
  %166 = add i32 %61, 128, !dbg !62
  %167 = sext i32 %166 to i64, !dbg !63
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !63
  %169 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %168, i1 %156, i32 0, i1 %156, i32 0, i1 %156) #2, !dbg !64
  %170 = extractvalue { i32, i32 } %169, 0, !dbg !64
  %171 = extractvalue { i32, i32 } %169, 1, !dbg !64
  %172 = bitcast i32 %170 to float, !dbg !64
  %173 = bitcast i32 %171 to float, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %174 = insertelement <1 x float> undef, float %172, i64 0, !dbg !64
  store <1 x float> %174, ptr addrspace(3) %72, align 4, !dbg !64
  %175 = insertelement <1 x float> undef, float %173, i64 0, !dbg !64
  store <1 x float> %175, ptr addrspace(3) %77, align 4, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %176 = load float, ptr addrspace(3) %82, align 8, !dbg !64
  %177 = load float, ptr addrspace(3) %84, align 4, !dbg !64
  %178 = fmul float %164, %172, !dbg !65
  %179 = fmul float %165, %173, !dbg !65
  %180 = select i1 %150, float %178, float 0.000000e+00, !dbg !38
  %181 = select i1 %150, float %179, float 0.000000e+00, !dbg !38
  %182 = fadd float %147, %180, !dbg !66
  %183 = fadd float %148, %181, !dbg !66
  %184 = fadd float %106, %182, !dbg !67
  %185 = fadd float %107, %183, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %186 = insertelement <1 x float> undef, float %184, i64 0, !dbg !67
  store <1 x float> %186, ptr addrspace(3) %72, align 4, !dbg !67
  %187 = insertelement <1 x float> undef, float %185, i64 0, !dbg !67
  store <1 x float> %187, ptr addrspace(3) %77, align 4, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %188 = load float, ptr addrspace(3) %82, align 8, !dbg !67
  %189 = load float, ptr addrspace(3) %84, align 4, !dbg !67
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 false, i32 0, i1 false) #2, !dbg !68
  %191 = trunc i32 %190 to i16, !dbg !68
  %extelt.offset5 = lshr i32 %190, 16, !dbg !68
  %192 = trunc i32 %extelt.offset5 to i16, !dbg !68
  %193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %191) #2, !dbg !69
  %194 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %192) #2, !dbg !69
  %195 = select i1 %95, float %193, float 0.000000e+00, !dbg !38
  %196 = select i1 %95, float %194, float 0.000000e+00, !dbg !38
  %197 = fmul float %83, %93, !dbg !70
  %198 = fmul float %85, %94, !dbg !70
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %118, i32 0, i1 %118) #2, !dbg !71
  %200 = trunc i32 %199 to i16, !dbg !71
  %extelt.offset6 = lshr i32 %199, 16, !dbg !71
  %201 = trunc i32 %extelt.offset6 to i16, !dbg !71
  %202 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %200) #2, !dbg !72
  %203 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %201) #2, !dbg !72
  %204 = fmul float %139, %202, !dbg !73
  %205 = fmul float %140, %203, !dbg !73
  %206 = fsub float 0.000000e+00, %204, !dbg !74
  %207 = fsub float 0.000000e+00, %205, !dbg !74
  %208 = select i1 %110, float %206, float 0.000000e+00, !dbg !38
  %209 = select i1 %110, float %207, float 0.000000e+00, !dbg !38
  %210 = fadd float %197, %208, !dbg !75
  %211 = fadd float %198, %209, !dbg !75
  %212 = add i32 %28, 1536, !dbg !76
  %213 = add i32 %212, %29, !dbg !77
  %214 = sext i32 %213 to i64, !dbg !78
  %215 = getelementptr i16, ptr addrspace(1) %0, i64 %214, !dbg !78
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 %155, i32 0, i1 %155) #2, !dbg !79
  %217 = trunc i32 %216 to i16, !dbg !79
  %extelt.offset7 = lshr i32 %216, 16, !dbg !79
  %218 = trunc i32 %extelt.offset7 to i16, !dbg !79
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %217) #2, !dbg !80
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %218) #2, !dbg !80
  %221 = fmul float %176, %219, !dbg !81
  %222 = fmul float %177, %220, !dbg !81
  %223 = select i1 %149, float %221, float 0.000000e+00, !dbg !38
  %224 = select i1 %149, float %222, float 0.000000e+00, !dbg !38
  %225 = fadd float %210, %223, !dbg !82
  %226 = fadd float %211, %224, !dbg !82
  %227 = fadd float %195, %225, !dbg !83
  %228 = fadd float %196, %226, !dbg !83
  %229 = fadd float %188, %227, !dbg !84
  %230 = fadd float %189, %228, !dbg !84
  %231 = shl i32 %24, 10, !dbg !85
  %232 = add i32 %28, %231, !dbg !86
  %233 = sext i32 %232 to i64, !dbg !87
  %234 = getelementptr float, ptr addrspace(1) %3, i64 %233, !dbg !87
  %235 = bitcast float %229 to i32, !dbg !88
  %236 = bitcast float %230 to i32, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %235, i32 %236, ptr addrspace(1) %234, i1 %33) #2, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cweommahz3d6dh25umjoe2a2air6wu6fu4adabr3tywgaxk6jehq.py", directory: "/tmp/torchinductor_zeus/we")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 21, scope: !5)
!13 = !DILocation(line: 24, column: 28, scope: !5)
!14 = !DILocation(line: 24, column: 33, scope: !5)
!15 = !DILocation(line: 25, column: 23, scope: !5)
!16 = !DILocation(line: 26, column: 21, scope: !5)
!17 = !DILocation(line: 29, column: 20, scope: !5)
!18 = !DILocation(line: 28, column: 18, scope: !5)
!19 = !DILocation(line: 30, column: 38, scope: !5)
!20 = !DILocation(line: 30, column: 36, scope: !5)
!21 = !DILocation(line: 30, column: 50, scope: !5)
!22 = !DILocation(line: 30, column: 45, scope: !5)
!23 = !DILocation(line: 30, column: 30, scope: !5)
!24 = !DILocation(line: 30, column: 64, scope: !5)
!25 = !DILocation(line: 30, column: 56, scope: !5)
!26 = !DILocation(line: 30, column: 104, scope: !5)
!27 = !DILocation(line: 31, column: 41, scope: !5)
!28 = !DILocation(line: 31, column: 37, scope: !5)
!29 = !DILocation(line: 31, column: 31, scope: !5)
!30 = !DILocation(line: 31, column: 47, scope: !5)
!31 = !DILocation(line: 32, column: 44, scope: !5)
!32 = !DILocation(line: 32, column: 53, scope: !5)
!33 = !DILocation(line: 32, column: 31, scope: !5)
!34 = !DILocation(line: 32, column: 64, scope: !5)
!35 = !DILocation(line: 32, column: 112, scope: !5)
!36 = !DILocation(line: 35, column: 19, scope: !5)
!37 = !DILocation(line: 36, column: 56, scope: !5)
!38 = !DILocation(line: 0, scope: !5)
!39 = !DILocation(line: 36, column: 122, scope: !5)
!40 = !DILocation(line: 42, column: 19, scope: !5)
!41 = !DILocation(line: 45, column: 20, scope: !5)
!42 = !DILocation(line: 46, column: 46, scope: !5)
!43 = !DILocation(line: 46, column: 55, scope: !5)
!44 = !DILocation(line: 46, column: 31, scope: !5)
!45 = !DILocation(line: 46, column: 74, scope: !5)
!46 = !DILocation(line: 46, column: 82, scope: !5)
!47 = !DILocation(line: 46, column: 66, scope: !5)
!48 = !DILocation(line: 46, column: 133, scope: !5)
!49 = !DILocation(line: 48, column: 46, scope: !5)
!50 = !DILocation(line: 48, column: 31, scope: !5)
!51 = !DILocation(line: 48, column: 56, scope: !5)
!52 = !DILocation(line: 49, column: 20, scope: !5)
!53 = !DILocation(line: 51, column: 13, scope: !5)
!54 = !DILocation(line: 55, column: 20, scope: !5)
!55 = !DILocation(line: 56, column: 19, scope: !5)
!56 = !DILocation(line: 57, column: 43, scope: !5)
!57 = !DILocation(line: 57, column: 52, scope: !5)
!58 = !DILocation(line: 57, column: 31, scope: !5)
!59 = !DILocation(line: 57, column: 79, scope: !5)
!60 = !DILocation(line: 57, column: 63, scope: !5)
!61 = !DILocation(line: 57, column: 130, scope: !5)
!62 = !DILocation(line: 59, column: 43, scope: !5)
!63 = !DILocation(line: 59, column: 31, scope: !5)
!64 = !DILocation(line: 59, column: 53, scope: !5)
!65 = !DILocation(line: 60, column: 20, scope: !5)
!66 = !DILocation(line: 65, column: 20, scope: !5)
!67 = !DILocation(line: 66, column: 19, scope: !5)
!68 = !DILocation(line: 68, column: 64, scope: !5)
!69 = !DILocation(line: 68, column: 130, scope: !5)
!70 = !DILocation(line: 73, column: 20, scope: !5)
!71 = !DILocation(line: 75, column: 63, scope: !5)
!72 = !DILocation(line: 75, column: 130, scope: !5)
!73 = !DILocation(line: 77, column: 20, scope: !5)
!74 = !DILocation(line: 79, column: 13, scope: !5)
!75 = !DILocation(line: 83, column: 20, scope: !5)
!76 = !DILocation(line: 84, column: 44, scope: !5)
!77 = !DILocation(line: 84, column: 53, scope: !5)
!78 = !DILocation(line: 84, column: 31, scope: !5)
!79 = !DILocation(line: 84, column: 64, scope: !5)
!80 = !DILocation(line: 84, column: 131, scope: !5)
!81 = !DILocation(line: 86, column: 20, scope: !5)
!82 = !DILocation(line: 91, column: 20, scope: !5)
!83 = !DILocation(line: 92, column: 20, scope: !5)
!84 = !DILocation(line: 94, column: 20, scope: !5)
!85 = !DILocation(line: 95, column: 45, scope: !5)
!86 = !DILocation(line: 95, column: 40, scope: !5)
!87 = !DILocation(line: 95, column: 25, scope: !5)
!88 = !DILocation(line: 95, column: 58, scope: !5)
!89 = !DILocation(line: 95, column: 4, scope: !5)
