module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xbf16>
    %cst_0 = arith.constant dense<1536> : tensor<1x16xi32>
    %cst_1 = arith.constant dense<128> : tensor<16x1xi32>
    %cst_2 = arith.constant dense<512> : tensor<1x16xi32>
    %cst_3 = arith.constant dense<-128> : tensor<16x1xi32>
    %cst_4 = arith.constant dense<-512> : tensor<1x16xi32>
    %cst_5 = arith.constant dense<128> : tensor<16x1xi64>
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<16x16xf32>
    %cst_7 = arith.constant dense<256> : tensor<16x1xi64>
    %cst_8 = arith.constant dense<1024> : tensor<1x16xi32>
    %cst_9 = arith.constant dense<256> : tensor<1x16xi32>
    %cst_10 = arith.constant dense<2048> : tensor<1x16xi32>
    %cst_11 = arith.constant dense<4> : tensor<16x1xi32>
    %cst_12 = arith.constant dense<4> : tensor<1x16xi32>
    %cst_13 = arith.constant dense<256> : tensor<16x1xi32>
    %cst_14 = arith.constant dense<16> : tensor<1x16xi32>
    %c16_i32 = arith.constant 16 : i32
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c16_i32 : i32
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<16xi32>) -> tensor<1x16xi32>
    %4 = tt.splat %1 : (i32) -> tensor<1x16xi32>
    %5 = arith.addi %4, %3 : tensor<1x16xi32>
    %6 = arith.cmpi slt, %5, %cst_14 : tensor<1x16xi32>
    %7 = tt.get_program_id x : i32
    %8 = arith.muli %7, %c16_i32 : i32
    %9 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<16xi32>) -> tensor<16x1xi32>
    %10 = tt.splat %8 : (i32) -> tensor<16x1xi32>
    %11 = arith.addi %10, %9 : tensor<16x1xi32>
    %12 = arith.cmpi slt, %11, %cst_13 : tensor<16x1xi32>
    %13 = arith.remsi %5, %cst_12 : tensor<1x16xi32>
    %14 = arith.divsi %5, %cst_12 : tensor<1x16xi32>
    %15 = arith.muli %11, %cst_11 : tensor<16x1xi32>
    %16 = tt.broadcast %13 : (tensor<1x16xi32>) -> tensor<16x16xi32>
    %17 = tt.broadcast %15 : (tensor<16x1xi32>) -> tensor<16x16xi32>
    %18 = arith.addi %16, %17 : tensor<16x16xi32>
    %19 = arith.muli %14, %cst_10 : tensor<1x16xi32>
    %20 = tt.broadcast %19 : (tensor<1x16xi32>) -> tensor<16x16xi32>
    %21 = arith.addi %18, %20 : tensor<16x16xi32>
    %22 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<16x16x!tt.ptr<bf16, 1>>
    %23 = tt.addptr %22, %21 : tensor<16x16x!tt.ptr<bf16, 1>>, tensor<16x16xi32>
    %24 = tt.broadcast %12 : (tensor<16x1xi1>) -> tensor<16x16xi1>
    %25 = tt.broadcast %6 : (tensor<1x16xi1>) -> tensor<16x16xi1>
    %26 = arith.andi %24, %25 : tensor<16x16xi1>
    %27 = tt.load %23, %26 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xbf16>
    %28 = arith.extf %27 : tensor<16x16xbf16> to tensor<16x16xf32>
    %29 = arith.muli %13, %cst_9 : tensor<1x16xi32>
    %30 = tt.broadcast %11 : (tensor<16x1xi32>) -> tensor<16x16xi32>
    %31 = tt.broadcast %29 : (tensor<1x16xi32>) -> tensor<16x16xi32>
    %32 = arith.addi %30, %31 : tensor<16x16xi32>
    %33 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<16x16x!tt.ptr<f32, 1>>
    %34 = tt.addptr %33, %32 : tensor<16x16x!tt.ptr<f32, 1>>, tensor<16x16xi32>
    %35 = tt.load %34, %26 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xf32>
    %36 = arith.addi %13, %cst_8 : tensor<1x16xi32>
    %37 = tt.broadcast %36 : (tensor<1x16xi32>) -> tensor<16x16xi32>
    %38 = arith.addi %37, %17 : tensor<16x16xi32>
    %39 = arith.addi %38, %20 : tensor<16x16xi32>
    %40 = tt.addptr %22, %39 : tensor<16x16x!tt.ptr<bf16, 1>>, tensor<16x16xi32>
    %41 = tt.load %40, %26 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xbf16>
    %42 = arith.extf %41 : tensor<16x16xbf16> to tensor<16x16xf32>
    %43 = arith.extsi %11 : tensor<16x1xi32> to tensor<16x1xi64>
    %44 = arith.cmpi sge, %43, %cst_7 : tensor<16x1xi64>
    %45 = arith.andi %44, %12 : tensor<16x1xi1>
    %46 = tt.broadcast %45 : (tensor<16x1xi1>) -> tensor<16x16xi1>
    %47 = arith.andi %46, %25 : tensor<16x16xi1>
    %48 = tt.load %23, %47, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xbf16>
    %49 = arith.extf %48 : tensor<16x16xbf16> to tensor<16x16xf32>
    %50 = tt.broadcast %44 : (tensor<16x1xi1>) -> tensor<16x16xi1>
    %51 = arith.select %50, %49, %cst_6 : tensor<16x16xi1>, tensor<16x16xf32>
    %52 = arith.mulf %28, %35 : tensor<16x16xf32>
    %53 = arith.cmpi sge, %43, %cst_5 : tensor<16x1xi64>
    %54 = arith.addi %13, %cst_4 : tensor<1x16xi32>
    %55 = tt.broadcast %54 : (tensor<1x16xi32>) -> tensor<16x16xi32>
    %56 = arith.addi %55, %17 : tensor<16x16xi32>
    %57 = arith.addi %56, %20 : tensor<16x16xi32>
    %58 = tt.addptr %22, %57 : tensor<16x16x!tt.ptr<bf16, 1>>, tensor<16x16xi32>
    %59 = arith.andi %53, %12 : tensor<16x1xi1>
    %60 = tt.broadcast %59 : (tensor<16x1xi1>) -> tensor<16x16xi1>
    %61 = arith.andi %60, %25 : tensor<16x16xi1>
    %62 = tt.load %58, %61, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xbf16>
    %63 = arith.extf %62 : tensor<16x16xbf16> to tensor<16x16xf32>
    %64 = arith.addi %11, %cst_3 : tensor<16x1xi32>
    %65 = tt.broadcast %64 : (tensor<16x1xi32>) -> tensor<16x16xi32>
    %66 = arith.addi %65, %31 : tensor<16x16xi32>
    %67 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<16x16x!tt.ptr<f32, 1>>
    %68 = tt.addptr %67, %66 : tensor<16x16x!tt.ptr<f32, 1>>, tensor<16x16xi32>
    %69 = tt.load %68, %61, %cst_6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xf32>
    %70 = arith.mulf %63, %69 : tensor<16x16xf32>
    %71 = arith.subf %cst_6, %70 : tensor<16x16xf32>
    %72 = tt.broadcast %53 : (tensor<16x1xi1>) -> tensor<16x16xi1>
    %73 = arith.select %72, %71, %cst_6 : tensor<16x16xi1>, tensor<16x16xf32>
    %74 = arith.addf %52, %73 : tensor<16x16xf32>
    %75 = arith.cmpi slt, %43, %cst_5 : tensor<16x1xi64>
    %76 = arith.addi %13, %cst_2 : tensor<1x16xi32>
    %77 = tt.broadcast %76 : (tensor<1x16xi32>) -> tensor<16x16xi32>
    %78 = arith.addi %77, %17 : tensor<16x16xi32>
    %79 = arith.addi %78, %20 : tensor<16x16xi32>
    %80 = tt.addptr %22, %79 : tensor<16x16x!tt.ptr<bf16, 1>>, tensor<16x16xi32>
    %81 = arith.andi %75, %12 : tensor<16x1xi1>
    %82 = tt.broadcast %81 : (tensor<16x1xi1>) -> tensor<16x16xi1>
    %83 = arith.andi %82, %25 : tensor<16x16xi1>
    %84 = tt.load %80, %83, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xbf16>
    %85 = arith.extf %84 : tensor<16x16xbf16> to tensor<16x16xf32>
    %86 = arith.addi %11, %cst_1 : tensor<16x1xi32>
    %87 = tt.broadcast %86 : (tensor<16x1xi32>) -> tensor<16x16xi32>
    %88 = arith.addi %87, %31 : tensor<16x16xi32>
    %89 = tt.addptr %67, %88 : tensor<16x16x!tt.ptr<f32, 1>>, tensor<16x16xi32>
    %90 = tt.load %89, %83, %cst_6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xf32>
    %91 = arith.mulf %85, %90 : tensor<16x16xf32>
    %92 = tt.broadcast %75 : (tensor<16x1xi1>) -> tensor<16x16xi1>
    %93 = arith.select %92, %91, %cst_6 : tensor<16x16xi1>, tensor<16x16xf32>
    %94 = arith.addf %74, %93 : tensor<16x16xf32>
    %95 = arith.addf %51, %94 : tensor<16x16xf32>
    %96 = tt.load %40, %47, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xbf16>
    %97 = arith.extf %96 : tensor<16x16xbf16> to tensor<16x16xf32>
    %98 = arith.select %50, %97, %cst_6 : tensor<16x16xi1>, tensor<16x16xf32>
    %99 = arith.mulf %42, %35 : tensor<16x16xf32>
    %100 = tt.load %80, %61, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xbf16>
    %101 = arith.extf %100 : tensor<16x16xbf16> to tensor<16x16xf32>
    %102 = arith.mulf %101, %69 : tensor<16x16xf32>
    %103 = arith.subf %cst_6, %102 : tensor<16x16xf32>
    %104 = arith.select %72, %103, %cst_6 : tensor<16x16xi1>, tensor<16x16xf32>
    %105 = arith.addf %99, %104 : tensor<16x16xf32>
    %106 = arith.addi %13, %cst_0 : tensor<1x16xi32>
    %107 = tt.broadcast %106 : (tensor<1x16xi32>) -> tensor<16x16xi32>
    %108 = arith.addi %107, %17 : tensor<16x16xi32>
    %109 = arith.addi %108, %20 : tensor<16x16xi32>
    %110 = tt.addptr %22, %109 : tensor<16x16x!tt.ptr<bf16, 1>>, tensor<16x16xi32>
    %111 = tt.load %110, %83, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<16x16xbf16>
    %112 = arith.extf %111 : tensor<16x16xbf16> to tensor<16x16xf32>
    %113 = arith.mulf %112, %90 : tensor<16x16xf32>
    %114 = arith.select %92, %113, %cst_6 : tensor<16x16xi1>, tensor<16x16xf32>
    %115 = arith.addf %105, %114 : tensor<16x16xf32>
    %116 = arith.addf %98, %115 : tensor<16x16xf32>
    %117 = arith.addf %95, %116 : tensor<16x16xf32>
    %118 = arith.muli %14, %cst_8 : tensor<1x16xi32>
    %119 = tt.broadcast %118 : (tensor<1x16xi32>) -> tensor<16x16xi32>
    %120 = arith.addi %18, %119 : tensor<16x16xi32>
    %121 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<16x16x!tt.ptr<f32, 1>>
    %122 = tt.addptr %121, %120 : tensor<16x16x!tt.ptr<f32, 1>>, tensor<16x16xi32>
    tt.store %122, %117, %26 {cache = 1 : i32, evict = 1 : i32} : tensor<16x16xf32>
    tt.return
  }
}
