; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7de8de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = lshr i32 %10, 5, !dbg !10
  %urem = and i32 %10, 255, !dbg !10
  %12 = shl nuw nsw i32 %urem, 3, !dbg !10
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %14 = mul i32 %13, 2304, !dbg !12
  %15 = add i32 %12, %14, !dbg !13
  %16 = sext i32 %15 to i64, !dbg !14
  %17 = getelementptr i16, ptr addrspace(1) %0, i64 %16, !dbg !14
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !15
  %23 = trunc i32 %19 to i16, !dbg !15
  %extelt.offset10 = lshr i32 %19, 16, !dbg !15
  %24 = trunc i32 %extelt.offset10 to i16, !dbg !15
  %25 = trunc i32 %20 to i16, !dbg !15
  %extelt.offset11 = lshr i32 %20, 16, !dbg !15
  %26 = trunc i32 %extelt.offset11 to i16, !dbg !15
  %27 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset12 = lshr i32 %21, 16, !dbg !15
  %28 = trunc i32 %extelt.offset12 to i16, !dbg !15
  %29 = trunc i32 %22 to i16, !dbg !15
  %extelt.offset13 = lshr i32 %22, 16, !dbg !15
  %30 = trunc i32 %extelt.offset13 to i16, !dbg !15
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #6, !dbg !16
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !16
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !16
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !16
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !16
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !16
  %39 = fmul float %31, %31, !dbg !17
  %40 = fmul float %32, %32, !dbg !17
  %41 = fmul float %33, %33, !dbg !17
  %42 = fmul float %34, %34, !dbg !17
  %43 = fmul float %35, %35, !dbg !17
  %44 = fmul float %36, %36, !dbg !17
  %45 = fmul float %37, %37, !dbg !17
  %46 = fmul float %38, %38, !dbg !17
  %47 = or i32 %12, 2048, !dbg !18
  %48 = icmp ult i32 %47, 2304, !dbg !19
  %49 = add i32 %47, %14, !dbg !13
  %50 = sext i32 %49 to i64, !dbg !14
  %51 = getelementptr i16, ptr addrspace(1) %0, i64 %50, !dbg !14
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #6, !dbg !15
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !15
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !15
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !15
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !15
  %57 = trunc i32 %53 to i16, !dbg !15
  %extelt.offset10.1 = lshr i32 %53, 16, !dbg !15
  %58 = trunc i32 %extelt.offset10.1 to i16, !dbg !15
  %59 = trunc i32 %54 to i16, !dbg !15
  %extelt.offset11.1 = lshr i32 %54, 16, !dbg !15
  %60 = trunc i32 %extelt.offset11.1 to i16, !dbg !15
  %61 = trunc i32 %55 to i16, !dbg !15
  %extelt.offset12.1 = lshr i32 %55, 16, !dbg !15
  %62 = trunc i32 %extelt.offset12.1 to i16, !dbg !15
  %63 = trunc i32 %56 to i16, !dbg !15
  %extelt.offset13.1 = lshr i32 %56, 16, !dbg !15
  %64 = trunc i32 %extelt.offset13.1 to i16, !dbg !15
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #6, !dbg !16
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #6, !dbg !16
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #6, !dbg !16
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #6, !dbg !16
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #6, !dbg !16
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #6, !dbg !16
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #6, !dbg !16
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #6, !dbg !16
  %73 = fmul float %65, %65, !dbg !17
  %74 = fmul float %66, %66, !dbg !17
  %75 = fmul float %67, %67, !dbg !17
  %76 = fmul float %68, %68, !dbg !17
  %77 = fmul float %69, %69, !dbg !17
  %78 = fmul float %70, %70, !dbg !17
  %79 = fmul float %71, %71, !dbg !17
  %80 = fmul float %72, %72, !dbg !17
  %81 = select i1 %48, float %73, float -0.000000e+00, !dbg !20
  %82 = fadd float %39, %81, !dbg !20
  %83 = select i1 %48, float %74, float -0.000000e+00, !dbg !20
  %84 = fadd float %40, %83, !dbg !20
  %85 = select i1 %48, float %75, float -0.000000e+00, !dbg !20
  %86 = fadd float %41, %85, !dbg !20
  %87 = select i1 %48, float %76, float -0.000000e+00, !dbg !20
  %88 = fadd float %42, %87, !dbg !20
  %89 = select i1 %48, float %77, float -0.000000e+00, !dbg !20
  %90 = fadd float %43, %89, !dbg !20
  %91 = select i1 %48, float %78, float -0.000000e+00, !dbg !20
  %92 = fadd float %44, %91, !dbg !20
  %93 = select i1 %48, float %79, float -0.000000e+00, !dbg !20
  %94 = fadd float %45, %93, !dbg !20
  %95 = select i1 %48, float %80, float -0.000000e+00, !dbg !20
  %96 = fadd float %46, %95, !dbg !20
  %97 = and i32 %10, 31, !dbg !10
  %98 = and i32 %11, 7, !dbg !10
  %99 = or i32 %12, 4, !dbg !10
  %100 = fadd float %82, %84, !dbg !21
  %101 = fadd float %86, %100, !dbg !21
  %102 = fadd float %88, %101, !dbg !21
  %103 = fadd float %90, %102, !dbg !21
  %104 = fadd float %92, %103, !dbg !21
  %105 = fadd float %94, %104, !dbg !21
  %106 = fadd float %96, %105, !dbg !21
  %107 = bitcast float %106 to i32, !dbg !27
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !27
  %109 = bitcast i32 %108 to float, !dbg !27
  %110 = fadd float %106, %109, !dbg !21
  %111 = bitcast float %110 to i32, !dbg !27
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !27
  %113 = bitcast i32 %112 to float, !dbg !27
  %114 = fadd float %110, %113, !dbg !21
  %115 = bitcast float %114 to i32, !dbg !27
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !27
  %117 = bitcast i32 %116 to float, !dbg !27
  %118 = fadd float %114, %117, !dbg !21
  %119 = bitcast float %118 to i32, !dbg !27
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !27
  %121 = bitcast i32 %120 to float, !dbg !27
  %122 = fadd float %118, %121, !dbg !21
  %123 = bitcast float %122 to i32, !dbg !27
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !27
  %125 = bitcast i32 %124 to float, !dbg !27
  %126 = fadd float %122, %125, !dbg !21
  %127 = icmp eq i32 %97, 0, !dbg !27
  %128 = zext nneg i32 %98 to i64, !dbg !27
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i64 %128, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, float %126, i1 %127) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %130 = icmp slt i32 %10, 8, !dbg !27
  %131 = sext i32 %10 to i64, !dbg !27
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %131, !dbg !27
  %133 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %132, i1 %130) #6, !dbg !27
  %134 = bitcast float %133 to i32, !dbg !27
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !27
  %136 = bitcast i32 %135 to float, !dbg !27
  %137 = fadd float %133, %136, !dbg !21
  %138 = bitcast float %137 to i32, !dbg !27
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !27
  %140 = bitcast i32 %139 to float, !dbg !27
  %141 = fadd float %137, %140, !dbg !21
  %142 = bitcast float %141 to i32, !dbg !27
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !27
  %144 = bitcast i32 %143 to float, !dbg !27
  %145 = fadd float %141, %144, !dbg !21
  %146 = and i32 %10, 7, !dbg !27
  %147 = icmp eq i32 %146, 0, !dbg !27
  %148 = and i1 %130, %147, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, float %145, i1 %148) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %149 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %150 = insertelement <1 x float> undef, float %149, i64 0, !dbg !29
  store <1 x float> %150, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %151 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %152 = sext i32 %13 to i64, !dbg !30
  %153 = getelementptr float, ptr addrspace(1) %4, i64 %152, !dbg !30
  %154 = icmp eq i32 %urem, 0, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %153, i1 %154) #6, !dbg !31
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !32
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !32
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !32
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !32
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !32
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !32
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !32
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !32
  %163 = fadd float %155, 0x3EE4F8B580000000, !dbg !33
  br label %164, !dbg !34

164:                                              ; preds = %9, %__nv_rsqrtf.exit61
  %165 = phi i1 [ true, %9 ], [ false, %__nv_rsqrtf.exit61 ]
  %166 = phi i32 [ 0, %9 ], [ 2048, %__nv_rsqrtf.exit61 ]
  %167 = phi <8 x float> [ zeroinitializer, %9 ], [ %271, %__nv_rsqrtf.exit61 ]
  %168 = or i32 %166, %12, !dbg !35
  %169 = or i32 %166, %99, !dbg !35
  %170 = icmp ult i32 %168, 2304, !dbg !36
  %171 = add i32 %168, %14, !dbg !37
  %172 = add i32 %169, %14, !dbg !37
  %173 = sext i32 %171 to i64, !dbg !38
  %174 = getelementptr i16, ptr addrspace(1) %0, i64 %173, !dbg !38
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %174, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170) #6, !dbg !39
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !39
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !39
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !39
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !39
  %180 = trunc i32 %176 to i16, !dbg !39
  %extelt.offset6 = lshr i32 %176, 16, !dbg !39
  %181 = trunc i32 %extelt.offset6 to i16, !dbg !39
  %182 = trunc i32 %177 to i16, !dbg !39
  %extelt.offset7 = lshr i32 %177, 16, !dbg !39
  %183 = trunc i32 %extelt.offset7 to i16, !dbg !39
  %184 = trunc i32 %178 to i16, !dbg !39
  %extelt.offset8 = lshr i32 %178, 16, !dbg !39
  %185 = trunc i32 %extelt.offset8 to i16, !dbg !39
  %186 = trunc i32 %179 to i16, !dbg !39
  %extelt.offset9 = lshr i32 %179, 16, !dbg !39
  %187 = trunc i32 %extelt.offset9 to i16, !dbg !39
  %188 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %180) #6, !dbg !40
  %189 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %181) #6, !dbg !40
  %190 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %182) #6, !dbg !40
  %191 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %183) #6, !dbg !40
  %192 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %184) #6, !dbg !40
  %193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %185) #6, !dbg !40
  %194 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %186) #6, !dbg !40
  %195 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %187) #6, !dbg !40
  %196 = zext nneg i32 %168 to i64, !dbg !41
  %197 = getelementptr float, ptr addrspace(1) %1, i64 %196, !dbg !41
  %198 = zext nneg i32 %169 to i64, !dbg !41
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %198, !dbg !41
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170) #6, !dbg !42
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !42
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !42
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !42
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !42
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %199, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170) #6, !dbg !42
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !42
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !42
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !42
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !42
  %210 = insertelement <8 x i32> poison, i32 %201, i64 0, !dbg !42
  %211 = insertelement <8 x i32> %210, i32 %202, i64 1, !dbg !42
  %212 = insertelement <8 x i32> %211, i32 %203, i64 2, !dbg !42
  %213 = insertelement <8 x i32> %212, i32 %204, i64 3, !dbg !42
  %214 = insertelement <8 x i32> %213, i32 %206, i64 4, !dbg !42
  %215 = insertelement <8 x i32> %214, i32 %207, i64 5, !dbg !42
  %216 = insertelement <8 x i32> %215, i32 %208, i64 6, !dbg !42
  %217 = insertelement <8 x i32> %216, i32 %209, i64 7, !dbg !42
  %218 = bitcast <8 x i32> %217 to <8 x float>, !dbg !42
  %219 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !43
  %220 = sext i32 %172 to i64, !dbg !43
  %221 = getelementptr float, ptr addrspace(1) %2, i64 %220, !dbg !43
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %219, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170) #6, !dbg !44
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !44
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !44
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !44
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !44
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %221, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170) #6, !dbg !44
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !44
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !44
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !44
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !44
  %232 = insertelement <8 x i32> poison, i32 %223, i64 0, !dbg !44
  %233 = insertelement <8 x i32> %232, i32 %224, i64 1, !dbg !44
  %234 = insertelement <8 x i32> %233, i32 %225, i64 2, !dbg !44
  %235 = insertelement <8 x i32> %234, i32 %226, i64 3, !dbg !44
  %236 = insertelement <8 x i32> %235, i32 %228, i64 4, !dbg !44
  %237 = insertelement <8 x i32> %236, i32 %229, i64 5, !dbg !44
  %238 = insertelement <8 x i32> %237, i32 %230, i64 6, !dbg !44
  %239 = insertelement <8 x i32> %238, i32 %231, i64 7, !dbg !44
  %240 = bitcast <8 x i32> %239 to <8 x float>, !dbg !44
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %.not.i59 = icmp eq i32 %241, 0, !dbg !45
  br i1 %.not.i59, label %244, label %242, !dbg !45

242:                                              ; preds = %164
  %243 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %163), !dbg !45
  br label %__nv_rsqrtf.exit61, !dbg !45

244:                                              ; preds = %164
  %245 = tail call float @llvm.nvvm.rsqrt.approx.f(float %163), !dbg !45
  br label %__nv_rsqrtf.exit61, !dbg !45

__nv_rsqrtf.exit61:                               ; preds = %242, %244
  %.0.i60 = phi float [ %243, %242 ], [ %245, %244 ], !dbg !45
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %253 = insertelement <8 x float> poison, float %188, i64 0, !dbg !46
  %254 = insertelement <8 x float> %253, float %189, i64 1, !dbg !46
  %255 = insertelement <8 x float> %254, float %190, i64 2, !dbg !46
  %256 = insertelement <8 x float> %255, float %191, i64 3, !dbg !46
  %257 = insertelement <8 x float> %256, float %192, i64 4, !dbg !46
  %258 = insertelement <8 x float> %257, float %193, i64 5, !dbg !46
  %259 = insertelement <8 x float> %258, float %194, i64 6, !dbg !46
  %260 = insertelement <8 x float> %259, float %195, i64 7, !dbg !46
  %261 = insertelement <8 x float> poison, float %.0.i60, i64 0, !dbg !46
  %262 = shufflevector <8 x float> %261, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !46
  %263 = fmul <8 x float> %260, %262, !dbg !46
  %264 = fadd <8 x float> %218, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !47
  %265 = fmul <8 x float> %264, %263, !dbg !48
  %266 = fadd <8 x float> %265, %240, !dbg !49
  %267 = fmul <8 x float> %266, %266, !dbg !50
  %268 = insertelement <8 x i1> poison, i1 %170, i64 0, !dbg !51
  %269 = shufflevector <8 x i1> %268, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !51
  %270 = select <8 x i1> %269, <8 x float> %267, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !51
  %271 = fadd <8 x float> %167, %270, !dbg !51
  br i1 %165, label %164, label %272, !dbg !34

272:                                              ; preds = %__nv_rsqrtf.exit61
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %shift = shufflevector <8 x float> %271, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %273 = fadd <8 x float> %271, %shift, !dbg !54
  %shift113 = shufflevector <8 x float> %271, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %274 = fadd <8 x float> %shift113, %273, !dbg !54
  %shift114 = shufflevector <8 x float> %271, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %275 = fadd <8 x float> %shift114, %274, !dbg !54
  %shift115 = shufflevector <8 x float> %271, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %276 = fadd <8 x float> %shift115, %275, !dbg !54
  %shift116 = shufflevector <8 x float> %271, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %277 = fadd <8 x float> %shift116, %276, !dbg !54
  %shift117 = shufflevector <8 x float> %271, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %278 = fadd <8 x float> %shift117, %277, !dbg !54
  %shift118 = shufflevector <8 x float> %271, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %279 = fadd <8 x float> %shift118, %278, !dbg !54
  %280 = extractelement <8 x float> %279, i64 0, !dbg !54
  %281 = bitcast float %280 to i32, !dbg !52
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 16, i32 31), !dbg !52
  %283 = bitcast i32 %282 to float, !dbg !52
  %284 = fadd float %280, %283, !dbg !54
  %285 = bitcast float %284 to i32, !dbg !52
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 8, i32 31), !dbg !52
  %287 = bitcast i32 %286 to float, !dbg !52
  %288 = fadd float %284, %287, !dbg !54
  %289 = bitcast float %288 to i32, !dbg !52
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 4, i32 31), !dbg !52
  %291 = bitcast i32 %290 to float, !dbg !52
  %292 = fadd float %288, %291, !dbg !54
  %293 = bitcast float %292 to i32, !dbg !52
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 2, i32 31), !dbg !52
  %295 = bitcast i32 %294 to float, !dbg !52
  %296 = fadd float %292, %295, !dbg !54
  %297 = bitcast float %296 to i32, !dbg !52
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 1, i32 31), !dbg !52
  %299 = bitcast i32 %298 to float, !dbg !52
  %300 = fadd float %296, %299, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, float %300, i1 %127) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %301 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %132, i1 %130) #6, !dbg !52
  %302 = bitcast float %301 to i32, !dbg !52
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 4, i32 31), !dbg !52
  %304 = bitcast i32 %303 to float, !dbg !52
  %305 = fadd float %301, %304, !dbg !54
  %306 = bitcast float %305 to i32, !dbg !52
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 2, i32 31), !dbg !52
  %308 = bitcast i32 %307 to float, !dbg !52
  %309 = fadd float %305, %308, !dbg !54
  %310 = bitcast float %309 to i32, !dbg !52
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 1, i32 31), !dbg !52
  %312 = bitcast i32 %311 to float, !dbg !52
  %313 = fadd float %309, %312, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, float %313, i1 %148) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %314 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !52
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !57
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !57
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !57
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !57
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !57
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !57
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !57
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 2.304000e+03) #6, !dbg !57
  %323 = fadd float %315, 0x3EE4F8B580000000, !dbg !58
  br label %324, !dbg !59

324:                                              ; preds = %272, %__nv_rsqrtf.exit37
  %325 = phi i1 [ true, %272 ], [ false, %__nv_rsqrtf.exit37 ]
  %326 = phi i32 [ 0, %272 ], [ 2048, %__nv_rsqrtf.exit37 ]
  %327 = or i32 %326, %12, !dbg !60
  %328 = or i32 %326, %99, !dbg !60
  %329 = icmp ult i32 %327, 2304, !dbg !61
  %330 = add i32 %327, %14, !dbg !62
  %331 = add i32 %328, %14, !dbg !62
  %332 = sext i32 %330 to i64, !dbg !63
  %333 = getelementptr i16, ptr addrspace(1) %0, i64 %332, !dbg !63
  %334 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %333, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329) #6, !dbg !64
  %335 = extractvalue { i32, i32, i32, i32 } %334, 0, !dbg !64
  %336 = extractvalue { i32, i32, i32, i32 } %334, 1, !dbg !64
  %337 = extractvalue { i32, i32, i32, i32 } %334, 2, !dbg !64
  %338 = extractvalue { i32, i32, i32, i32 } %334, 3, !dbg !64
  %339 = trunc i32 %335 to i16, !dbg !64
  %extelt.offset = lshr i32 %335, 16, !dbg !64
  %340 = trunc i32 %extelt.offset to i16, !dbg !64
  %341 = trunc i32 %336 to i16, !dbg !64
  %extelt.offset3 = lshr i32 %336, 16, !dbg !64
  %342 = trunc i32 %extelt.offset3 to i16, !dbg !64
  %343 = trunc i32 %337 to i16, !dbg !64
  %extelt.offset4 = lshr i32 %337, 16, !dbg !64
  %344 = trunc i32 %extelt.offset4 to i16, !dbg !64
  %345 = trunc i32 %338 to i16, !dbg !64
  %extelt.offset5 = lshr i32 %338, 16, !dbg !64
  %346 = trunc i32 %extelt.offset5 to i16, !dbg !64
  %347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #6, !dbg !65
  %348 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %340) #6, !dbg !65
  %349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %341) #6, !dbg !65
  %350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %342) #6, !dbg !65
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %343) #6, !dbg !65
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %344) #6, !dbg !65
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #6, !dbg !65
  %354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #6, !dbg !65
  %355 = zext nneg i32 %327 to i64, !dbg !66
  %356 = getelementptr float, ptr addrspace(1) %1, i64 %355, !dbg !66
  %357 = zext nneg i32 %328 to i64, !dbg !66
  %358 = getelementptr float, ptr addrspace(1) %1, i64 %357, !dbg !66
  %359 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %356, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329) #6, !dbg !67
  %360 = extractvalue { i32, i32, i32, i32 } %359, 0, !dbg !67
  %361 = extractvalue { i32, i32, i32, i32 } %359, 1, !dbg !67
  %362 = extractvalue { i32, i32, i32, i32 } %359, 2, !dbg !67
  %363 = extractvalue { i32, i32, i32, i32 } %359, 3, !dbg !67
  %364 = bitcast i32 %360 to float, !dbg !67
  %365 = bitcast i32 %361 to float, !dbg !67
  %366 = bitcast i32 %362 to float, !dbg !67
  %367 = bitcast i32 %363 to float, !dbg !67
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %358, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329) #6, !dbg !67
  %369 = extractvalue { i32, i32, i32, i32 } %368, 0, !dbg !67
  %370 = extractvalue { i32, i32, i32, i32 } %368, 1, !dbg !67
  %371 = extractvalue { i32, i32, i32, i32 } %368, 2, !dbg !67
  %372 = extractvalue { i32, i32, i32, i32 } %368, 3, !dbg !67
  %373 = bitcast i32 %369 to float, !dbg !67
  %374 = bitcast i32 %370 to float, !dbg !67
  %375 = bitcast i32 %371 to float, !dbg !67
  %376 = bitcast i32 %372 to float, !dbg !67
  %377 = getelementptr float, ptr addrspace(1) %2, i64 %332, !dbg !68
  %378 = sext i32 %331 to i64, !dbg !68
  %379 = getelementptr float, ptr addrspace(1) %2, i64 %378, !dbg !68
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %377, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329) #6, !dbg !69
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !69
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !69
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !69
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !69
  %385 = bitcast i32 %381 to float, !dbg !69
  %386 = bitcast i32 %382 to float, !dbg !69
  %387 = bitcast i32 %383 to float, !dbg !69
  %388 = bitcast i32 %384 to float, !dbg !69
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %379, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329) #6, !dbg !69
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !69
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !69
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !69
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !69
  %394 = bitcast i32 %390 to float, !dbg !69
  %395 = bitcast i32 %391 to float, !dbg !69
  %396 = bitcast i32 %392 to float, !dbg !69
  %397 = bitcast i32 %393 to float, !dbg !69
  %398 = getelementptr float, ptr addrspace(1) %3, i64 %355, !dbg !70
  %399 = getelementptr float, ptr addrspace(1) %3, i64 %357, !dbg !70
  %400 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %398, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329) #6, !dbg !71
  %401 = extractvalue { i32, i32, i32, i32 } %400, 0, !dbg !71
  %402 = extractvalue { i32, i32, i32, i32 } %400, 1, !dbg !71
  %403 = extractvalue { i32, i32, i32, i32 } %400, 2, !dbg !71
  %404 = extractvalue { i32, i32, i32, i32 } %400, 3, !dbg !71
  %405 = bitcast i32 %401 to float, !dbg !71
  %406 = bitcast i32 %402 to float, !dbg !71
  %407 = bitcast i32 %403 to float, !dbg !71
  %408 = bitcast i32 %404 to float, !dbg !71
  %409 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %399, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329) #6, !dbg !71
  %410 = extractvalue { i32, i32, i32, i32 } %409, 0, !dbg !71
  %411 = extractvalue { i32, i32, i32, i32 } %409, 1, !dbg !71
  %412 = extractvalue { i32, i32, i32, i32 } %409, 2, !dbg !71
  %413 = extractvalue { i32, i32, i32, i32 } %409, 3, !dbg !71
  %414 = bitcast i32 %410 to float, !dbg !71
  %415 = bitcast i32 %411 to float, !dbg !71
  %416 = bitcast i32 %412 to float, !dbg !71
  %417 = bitcast i32 %413 to float, !dbg !71
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %.not.i = icmp eq i32 %418, 0, !dbg !72
  br i1 %.not.i, label %421, label %419, !dbg !72

419:                                              ; preds = %324
  %420 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %163), !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !72

421:                                              ; preds = %324
  %422 = tail call float @llvm.nvvm.rsqrt.approx.f(float %163), !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !72

__nv_rsqrtf.exit:                                 ; preds = %419, %421
  %.0.i = phi float [ %420, %419 ], [ %422, %421 ], !dbg !72
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %430 = fmul float %347, %.0.i, !dbg !73
  %431 = fmul float %348, %.0.i, !dbg !73
  %432 = fmul float %349, %.0.i, !dbg !73
  %433 = fmul float %350, %.0.i, !dbg !73
  %434 = fmul float %351, %.0.i, !dbg !73
  %435 = fmul float %352, %.0.i, !dbg !73
  %436 = fmul float %353, %.0.i, !dbg !73
  %437 = fmul float %354, %.0.i, !dbg !73
  %438 = fadd float %364, 1.000000e+00, !dbg !74
  %439 = fadd float %365, 1.000000e+00, !dbg !74
  %440 = fadd float %366, 1.000000e+00, !dbg !74
  %441 = fadd float %367, 1.000000e+00, !dbg !74
  %442 = fadd float %373, 1.000000e+00, !dbg !74
  %443 = fadd float %374, 1.000000e+00, !dbg !74
  %444 = fadd float %375, 1.000000e+00, !dbg !74
  %445 = fadd float %376, 1.000000e+00, !dbg !74
  %446 = fmul float %438, %430, !dbg !75
  %447 = fmul float %439, %431, !dbg !75
  %448 = fmul float %440, %432, !dbg !75
  %449 = fmul float %441, %433, !dbg !75
  %450 = fmul float %442, %434, !dbg !75
  %451 = fmul float %443, %435, !dbg !75
  %452 = fmul float %444, %436, !dbg !75
  %453 = fmul float %445, %437, !dbg !75
  %454 = fadd float %446, %385, !dbg !76
  %455 = fadd float %447, %386, !dbg !76
  %456 = fadd float %448, %387, !dbg !76
  %457 = fadd float %449, %388, !dbg !76
  %458 = fadd float %450, %394, !dbg !76
  %459 = fadd float %451, %395, !dbg !76
  %460 = fadd float %452, %396, !dbg !76
  %461 = fadd float %453, %397, !dbg !76
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not.i35 = icmp eq i32 %462, 0, !dbg !77
  br i1 %.not.i35, label %465, label %463, !dbg !77

463:                                              ; preds = %__nv_rsqrtf.exit
  %464 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %323), !dbg !77
  br label %__nv_rsqrtf.exit37, !dbg !77

465:                                              ; preds = %__nv_rsqrtf.exit
  %466 = tail call float @llvm.nvvm.rsqrt.approx.f(float %323), !dbg !77
  br label %__nv_rsqrtf.exit37, !dbg !77

__nv_rsqrtf.exit37:                               ; preds = %463, %465
  %.0.i36 = phi float [ %464, %463 ], [ %466, %465 ], !dbg !77
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %474 = fmul float %454, %.0.i36, !dbg !78
  %475 = fmul float %455, %.0.i36, !dbg !78
  %476 = fmul float %456, %.0.i36, !dbg !78
  %477 = fmul float %457, %.0.i36, !dbg !78
  %478 = fmul float %458, %.0.i36, !dbg !78
  %479 = fmul float %459, %.0.i36, !dbg !78
  %480 = fmul float %460, %.0.i36, !dbg !78
  %481 = fmul float %461, %.0.i36, !dbg !78
  %482 = fadd float %405, 1.000000e+00, !dbg !79
  %483 = fadd float %406, 1.000000e+00, !dbg !79
  %484 = fadd float %407, 1.000000e+00, !dbg !79
  %485 = fadd float %408, 1.000000e+00, !dbg !79
  %486 = fadd float %414, 1.000000e+00, !dbg !79
  %487 = fadd float %415, 1.000000e+00, !dbg !79
  %488 = fadd float %416, 1.000000e+00, !dbg !79
  %489 = fadd float %417, 1.000000e+00, !dbg !79
  %490 = fmul float %482, %474, !dbg !80
  %491 = fmul float %483, %475, !dbg !80
  %492 = fmul float %484, %476, !dbg !80
  %493 = fmul float %485, %477, !dbg !80
  %494 = fmul float %486, %478, !dbg !80
  %495 = fmul float %487, %479, !dbg !80
  %496 = fmul float %488, %480, !dbg !80
  %497 = fmul float %489, %481, !dbg !80
  %498 = getelementptr i16, ptr addrspace(1) %5, i64 %332, !dbg !81
  %499 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %490) #6, !dbg !82
  %500 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %491) #6, !dbg !82
  %501 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %492) #6, !dbg !82
  %502 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %493) #6, !dbg !82
  %503 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %494) #6, !dbg !82
  %504 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %495) #6, !dbg !82
  %505 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %496) #6, !dbg !82
  %506 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %497) #6, !dbg !82
  %507 = insertelement <2 x i16> undef, i16 %499, i64 0, !dbg !82
  %508 = insertelement <2 x i16> %507, i16 %500, i64 1, !dbg !82
  %509 = bitcast <2 x i16> %508 to i32, !dbg !82
  %510 = insertelement <2 x i16> undef, i16 %501, i64 0, !dbg !82
  %511 = insertelement <2 x i16> %510, i16 %502, i64 1, !dbg !82
  %512 = bitcast <2 x i16> %511 to i32, !dbg !82
  %513 = insertelement <2 x i16> undef, i16 %503, i64 0, !dbg !82
  %514 = insertelement <2 x i16> %513, i16 %504, i64 1, !dbg !82
  %515 = bitcast <2 x i16> %514 to i32, !dbg !82
  %516 = insertelement <2 x i16> undef, i16 %505, i64 0, !dbg !82
  %517 = insertelement <2 x i16> %516, i16 %506, i64 1, !dbg !82
  %518 = bitcast <2 x i16> %517 to i32, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %509, i32 %512, i32 %515, i32 %518, ptr addrspace(1) %498, i1 %329) #6, !dbg !82
  %519 = getelementptr i16, ptr addrspace(1) %6, i64 %332, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %509, i32 %512, i32 %515, i32 %518, ptr addrspace(1) %519, i1 %329) #6, !dbg !84
  br i1 %325, label %324, label %520, !dbg !59

520:                                              ; preds = %__nv_rsqrtf.exit37
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cbn5j3lsmqehcqg5ij544usmrkndgbxbqjh6xcbajaoqqqpxbrji.py", directory: "/tmp/torchinductor_zeus/bn")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7de8de", linkageName: "triton__0d1d2d3d4d5d6d7de8de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 37, column: 28, scope: !7)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 49, column: 22, scope: !7)
!33 = !DILocation(line: 51, column: 23, scope: !7)
!34 = !DILocation(line: 40, column: 36, scope: !7)
!35 = !DILocation(line: 41, column: 27, scope: !7)
!36 = !DILocation(line: 42, column: 25, scope: !7)
!37 = !DILocation(line: 44, column: 40, scope: !7)
!38 = !DILocation(line: 44, column: 34, scope: !7)
!39 = !DILocation(line: 44, column: 51, scope: !7)
!40 = !DILocation(line: 44, column: 102, scope: !7)
!41 = !DILocation(line: 45, column: 35, scope: !7)
!42 = !DILocation(line: 45, column: 40, scope: !7)
!43 = !DILocation(line: 46, column: 35, scope: !7)
!44 = !DILocation(line: 46, column: 52, scope: !7)
!45 = !DILocation(line: 52, column: 30, scope: !7)
!46 = !DILocation(line: 53, column: 23, scope: !7)
!47 = !DILocation(line: 55, column: 24, scope: !7)
!48 = !DILocation(line: 56, column: 24, scope: !7)
!49 = !DILocation(line: 59, column: 24, scope: !7)
!50 = !DILocation(line: 60, column: 24, scope: !7)
!51 = !DILocation(line: 63, column: 40, scope: !7)
!52 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !53)
!53 = !DILocation(line: 64, column: 27, scope: !24)
!54 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !55)
!55 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !56)
!56 = !DILocation(line: 64, column: 27, scope: !22)
!57 = !DILocation(line: 86, column: 24, scope: !7)
!58 = !DILocation(line: 87, column: 24, scope: !7)
!59 = !DILocation(line: 65, column: 36, scope: !7)
!60 = !DILocation(line: 66, column: 27, scope: !7)
!61 = !DILocation(line: 67, column: 25, scope: !7)
!62 = !DILocation(line: 69, column: 41, scope: !7)
!63 = !DILocation(line: 69, column: 35, scope: !7)
!64 = !DILocation(line: 69, column: 52, scope: !7)
!65 = !DILocation(line: 69, column: 104, scope: !7)
!66 = !DILocation(line: 70, column: 35, scope: !7)
!67 = !DILocation(line: 70, column: 40, scope: !7)
!68 = !DILocation(line: 71, column: 35, scope: !7)
!69 = !DILocation(line: 71, column: 52, scope: !7)
!70 = !DILocation(line: 72, column: 35, scope: !7)
!71 = !DILocation(line: 72, column: 40, scope: !7)
!72 = !DILocation(line: 78, column: 30, scope: !7)
!73 = !DILocation(line: 79, column: 24, scope: !7)
!74 = !DILocation(line: 81, column: 24, scope: !7)
!75 = !DILocation(line: 82, column: 24, scope: !7)
!76 = !DILocation(line: 85, column: 24, scope: !7)
!77 = !DILocation(line: 88, column: 30, scope: !7)
!78 = !DILocation(line: 89, column: 24, scope: !7)
!79 = !DILocation(line: 90, column: 24, scope: !7)
!80 = !DILocation(line: 91, column: 24, scope: !7)
!81 = !DILocation(line: 93, column: 29, scope: !7)
!82 = !DILocation(line: 93, column: 53, scope: !7)
!83 = !DILocation(line: 94, column: 29, scope: !7)
!84 = !DILocation(line: 94, column: 53, scope: !7)
!85 = !DILocation(line: 65, column: 4, scope: !7)
