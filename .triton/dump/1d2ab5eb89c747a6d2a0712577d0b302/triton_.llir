; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4d5d6de7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = lshr i32 %9, 5, !dbg !10
  %urem = and i32 %9, 255, !dbg !10
  %11 = shl nuw nsw i32 %urem, 3, !dbg !10
  %12 = or i32 %11, 4, !dbg !10
  %13 = shl nuw nsw i32 %urem, 2, !dbg !10
  %14 = or i32 %13, 1024, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %16 = icmp slt i32 %15, 512, !dbg !12
  %17 = sext i32 %15 to i64, !dbg !13
  %18 = getelementptr i64, ptr addrspace(1) %1, i64 %17, !dbg !13
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %16) #6, !dbg !14
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %16) #6, !dbg !14
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %16) #6, !dbg !14
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %16) #6, !dbg !14
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %16) #6, !dbg !14
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %16) #6, !dbg !14
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %16) #6, !dbg !14
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %16) #6, !dbg !14
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %16) #6, !dbg !14
  %28 = add i64 %19, 288256, !dbg !15
  %29 = add i64 %27, 288256, !dbg !15
  %30 = icmp slt i64 %19, 0, !dbg !16
  %31 = icmp slt i64 %27, 0, !dbg !16
  %32 = select i1 %30, i64 %28, i64 %19, !dbg !17
  %33 = select i1 %31, i64 %29, i64 %27, !dbg !17
  %34 = icmp ugt i64 %33, 288255, !dbg !18
  %.not3 = and i1 %16, %34, !dbg !19
  %35 = mul i64 %32, 2304, !dbg !19
  %36 = mul i32 %15, 2304, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %35
  %38 = zext nneg i32 %11 to i64
  %39 = getelementptr float, ptr addrspace(3) @global_smem, i64 %38
  %40 = zext nneg i32 %13 to i64
  %41 = getelementptr float, ptr addrspace(3) @global_smem, i64 %40
  %42 = zext nneg i32 %14 to i64
  %43 = getelementptr float, ptr addrspace(3) @global_smem, i64 %42
  br i1 %.not3, label %44, label %45, !dbg !21

44:                                               ; preds = %8
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !21
  br label %45, !dbg !21

45:                                               ; preds = %44, %8
  %46 = zext nneg i32 %12 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %37, i64 %38, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %37, i64 %46, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %54 = bitcast i32 %51 to float, !dbg !24
  %55 = bitcast i32 %53 to float, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = bitcast i32 %58 to float, !dbg !24
  %63 = bitcast i32 %59 to float, !dbg !24
  %64 = bitcast i32 %60 to float, !dbg !24
  %65 = fmul float %54, 4.800000e+01, !dbg !25
  %66 = fmul float %55, 4.800000e+01, !dbg !25
  %67 = fmul float %61, 4.800000e+01, !dbg !25
  %68 = fmul float %62, 4.800000e+01, !dbg !25
  %69 = fmul float %63, 4.800000e+01, !dbg !25
  %70 = fmul float %64, 4.800000e+01, !dbg !25
  %71 = fmul float %65, %65, !dbg !26
  %72 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !24
  %73 = insertelement <2 x i32> %72, i32 %50, i64 1, !dbg !24
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !24
  %75 = fmul <2 x float> %74, <float 4.800000e+01, float 4.800000e+01>, !dbg !25
  %76 = fmul <2 x float> %75, %75, !dbg !26
  %77 = fmul float %66, %66, !dbg !26
  %78 = fmul float %67, %67, !dbg !26
  %79 = fmul float %68, %68, !dbg !26
  %80 = fmul float %69, %69, !dbg !26
  %81 = fmul float %70, %70, !dbg !26
  %82 = select i1 %16, float %71, float 0.000000e+00, !dbg !27
  %83 = insertelement <2 x i1> poison, i1 %16, i64 0, !dbg !27
  %84 = shufflevector <2 x i1> %83, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !27
  %85 = select <2 x i1> %84, <2 x float> %76, <2 x float> zeroinitializer, !dbg !27
  %86 = select i1 %16, float %77, float 0.000000e+00, !dbg !27
  %87 = select i1 %16, float %78, float 0.000000e+00, !dbg !27
  %88 = select i1 %16, float %79, float 0.000000e+00, !dbg !27
  %89 = select i1 %16, float %80, float 0.000000e+00, !dbg !27
  %90 = select i1 %16, float %81, float 0.000000e+00, !dbg !27
  %91 = add i32 %13, %36, !dbg !28
  %92 = add i32 %14, %36, !dbg !28
  %93 = sext i32 %91 to i64, !dbg !29
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !29
  %95 = sext i32 %92 to i64, !dbg !29
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %97 = shufflevector <2 x float> %74, <2 x float> poison, <8 x i32> <i32 1, i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %98 = insertelement <8 x float> %97, float %54, i64 1, !dbg !30
  %99 = insertelement <8 x float> %98, float %55, i64 3, !dbg !30
  %100 = insertelement <8 x float> %99, float %61, i64 4, !dbg !30
  %101 = insertelement <8 x float> %100, float %62, i64 5, !dbg !30
  %102 = insertelement <8 x float> %101, float %63, i64 6, !dbg !30
  %103 = insertelement <8 x float> %102, float %64, i64 7, !dbg !30
  store <8 x float> %103, ptr addrspace(3) %39, align 32, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %104 = load <4 x i32>, ptr addrspace(3) %43, align 16, !dbg !30
  %.extract = load i32, ptr addrspace(3) %41, align 16, !dbg !30
  %105 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %41, i64 0, i64 1, !dbg !30
  %.extract5 = load i32, ptr addrspace(3) %105, align 4, !dbg !30
  %106 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %41, i64 0, i64 2, !dbg !30
  %.extract7 = load i32, ptr addrspace(3) %106, align 8, !dbg !30
  %107 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %41, i64 0, i64 3, !dbg !30
  %.extract9 = load i32, ptr addrspace(3) %107, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract5, i32 %.extract7, i32 %.extract9, ptr addrspace(1) %94, i1 %16) #6, !dbg !30
  %.extract11 = extractelement <4 x i32> %104, i64 0, !dbg !30
  %.extract13 = extractelement <4 x i32> %104, i64 1, !dbg !30
  %.extract15 = extractelement <4 x i32> %104, i64 2, !dbg !30
  %.extract17 = extractelement <4 x i32> %104, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract13, i32 %.extract15, i32 %.extract17, ptr addrspace(1) %96, i1 %16) #6, !dbg !30
  %108 = or i32 %11, 2048, !dbg !31
  %109 = or i32 %11, 2052, !dbg !31
  %110 = or i32 %13, 2048, !dbg !31
  %111 = or i32 %13, 3072, !dbg !31
  %112 = icmp ult i32 %108, 2304, !dbg !32
  %113 = icmp ult i32 %110, 2304, !dbg !32
  br i1 %.not3, label %114, label %115, !dbg !21

114:                                              ; preds = %45
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !21
  br label %115, !dbg !21

115:                                              ; preds = %114, %45
  %116 = zext nneg i32 %108 to i64, !dbg !22
  %117 = zext nneg i32 %109 to i64, !dbg !22
  %118 = getelementptr float, ptr addrspace(1) %37, i64 %116, !dbg !23
  %119 = getelementptr float, ptr addrspace(1) %37, i64 %117, !dbg !23
  %120 = and i1 %16, %112, !dbg !33
  %121 = and i1 %16, %113, !dbg !33
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #6, !dbg !24
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !24
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !24
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !24
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !24
  %127 = bitcast i32 %124 to float, !dbg !24
  %128 = bitcast i32 %126 to float, !dbg !24
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %119, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #6, !dbg !24
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !24
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !24
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !24
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !24
  %134 = bitcast i32 %130 to float, !dbg !24
  %135 = bitcast i32 %131 to float, !dbg !24
  %136 = bitcast i32 %132 to float, !dbg !24
  %137 = bitcast i32 %133 to float, !dbg !24
  %138 = fmul float %127, 4.800000e+01, !dbg !25
  %139 = fmul float %128, 4.800000e+01, !dbg !25
  %140 = fmul float %134, 4.800000e+01, !dbg !25
  %141 = fmul float %135, 4.800000e+01, !dbg !25
  %142 = fmul float %136, 4.800000e+01, !dbg !25
  %143 = fmul float %137, 4.800000e+01, !dbg !25
  %144 = fmul float %138, %138, !dbg !26
  %145 = fmul float %139, %139, !dbg !26
  %146 = fmul float %140, %140, !dbg !26
  %147 = fmul float %141, %141, !dbg !26
  %148 = fmul float %142, %142, !dbg !26
  %149 = fmul float %143, %143, !dbg !26
  %150 = select i1 %120, float %144, float -0.000000e+00, !dbg !27
  %151 = fadd float %82, %150, !dbg !27
  %152 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !24
  %153 = insertelement <2 x i32> %152, i32 %123, i64 1, !dbg !24
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !24
  %155 = fmul <2 x float> %154, <float 4.800000e+01, float 4.800000e+01>, !dbg !25
  %156 = fmul <2 x float> %155, %155, !dbg !26
  %157 = insertelement <2 x i1> poison, i1 %120, i64 0, !dbg !27
  %158 = shufflevector <2 x i1> %157, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !27
  %159 = select <2 x i1> %158, <2 x float> %156, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !27
  %160 = fadd <2 x float> %85, %159, !dbg !27
  %161 = select i1 %120, float %145, float -0.000000e+00, !dbg !27
  %162 = fadd float %86, %161, !dbg !27
  %163 = select i1 %120, float %146, float -0.000000e+00, !dbg !27
  %164 = fadd float %87, %163, !dbg !27
  %165 = select i1 %120, float %147, float -0.000000e+00, !dbg !27
  %166 = fadd float %88, %165, !dbg !27
  %167 = select i1 %120, float %148, float -0.000000e+00, !dbg !27
  %168 = fadd float %89, %167, !dbg !27
  %169 = select i1 %120, float %149, float -0.000000e+00, !dbg !27
  %170 = fadd float %90, %169, !dbg !27
  %171 = add i32 %110, %36, !dbg !28
  %172 = add i32 %111, %36, !dbg !28
  %173 = sext i32 %171 to i64, !dbg !29
  %174 = getelementptr float, ptr addrspace(1) %4, i64 %173, !dbg !29
  %175 = sext i32 %172 to i64, !dbg !29
  %176 = getelementptr float, ptr addrspace(1) %4, i64 %175, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %177 = shufflevector <2 x float> %154, <2 x float> poison, <8 x i32> <i32 1, i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %178 = insertelement <8 x float> %177, float %127, i64 1, !dbg !30
  %179 = insertelement <8 x float> %178, float %128, i64 3, !dbg !30
  %180 = insertelement <8 x float> %179, float %134, i64 4, !dbg !30
  %181 = insertelement <8 x float> %180, float %135, i64 5, !dbg !30
  %182 = insertelement <8 x float> %181, float %136, i64 6, !dbg !30
  %183 = insertelement <8 x float> %182, float %137, i64 7, !dbg !30
  store <8 x float> %183, ptr addrspace(3) %39, align 32, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %184 = load <4 x i32>, ptr addrspace(3) %43, align 16, !dbg !30
  %.extract.1 = load i32, ptr addrspace(3) %41, align 16, !dbg !30
  %.extract5.1 = load i32, ptr addrspace(3) %105, align 4, !dbg !30
  %.extract7.1 = load i32, ptr addrspace(3) %106, align 8, !dbg !30
  %.extract9.1 = load i32, ptr addrspace(3) %107, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract.1, i32 %.extract5.1, i32 %.extract7.1, i32 %.extract9.1, ptr addrspace(1) %174, i1 %121) #6, !dbg !30
  %.extract11.1 = extractelement <4 x i32> %184, i64 0, !dbg !30
  %.extract13.1 = extractelement <4 x i32> %184, i64 1, !dbg !30
  %.extract15.1 = extractelement <4 x i32> %184, i64 2, !dbg !30
  %.extract17.1 = extractelement <4 x i32> %184, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11.1, i32 %.extract13.1, i32 %.extract15.1, i32 %.extract17.1, ptr addrspace(1) %176, i1 false) #6, !dbg !30
  %185 = and i32 %9, 31, !dbg !10
  %186 = and i32 %10, 7, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %187 = extractelement <2 x float> %160, i64 1, !dbg !38
  %188 = fadd float %187, %151, !dbg !38
  %189 = extractelement <2 x float> %160, i64 0, !dbg !38
  %190 = fadd float %189, %188, !dbg !38
  %191 = fadd float %162, %190, !dbg !38
  %192 = fadd float %164, %191, !dbg !38
  %193 = fadd float %166, %192, !dbg !38
  %194 = fadd float %168, %193, !dbg !38
  %195 = fadd float %170, %194, !dbg !38
  %196 = bitcast float %195 to i32, !dbg !34
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 16, i32 31), !dbg !34
  %198 = bitcast i32 %197 to float, !dbg !34
  %199 = fadd float %195, %198, !dbg !38
  %200 = bitcast float %199 to i32, !dbg !34
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 8, i32 31), !dbg !34
  %202 = bitcast i32 %201 to float, !dbg !34
  %203 = fadd float %199, %202, !dbg !38
  %204 = bitcast float %203 to i32, !dbg !34
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 4, i32 31), !dbg !34
  %206 = bitcast i32 %205 to float, !dbg !34
  %207 = fadd float %203, %206, !dbg !38
  %208 = bitcast float %207 to i32, !dbg !34
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 2, i32 31), !dbg !34
  %210 = bitcast i32 %209 to float, !dbg !34
  %211 = fadd float %207, %210, !dbg !38
  %212 = bitcast float %211 to i32, !dbg !34
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !34
  %214 = bitcast i32 %213 to float, !dbg !34
  %215 = fadd float %211, %214, !dbg !38
  %216 = icmp eq i32 %185, 0, !dbg !34
  %217 = zext nneg i32 %186 to i64, !dbg !34
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i64 %217, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, float %215, i1 %216) #6, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %219 = icmp slt i32 %9, 8, !dbg !34
  %220 = sext i32 %9 to i64, !dbg !34
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i64 %220, !dbg !34
  %222 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %221, i1 %219) #6, !dbg !34
  %223 = bitcast float %222 to i32, !dbg !34
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 4, i32 31), !dbg !34
  %225 = bitcast i32 %224 to float, !dbg !34
  %226 = fadd float %222, %225, !dbg !38
  %227 = bitcast float %226 to i32, !dbg !34
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 2, i32 31), !dbg !34
  %229 = bitcast i32 %228 to float, !dbg !34
  %230 = fadd float %226, %229, !dbg !38
  %231 = bitcast float %230 to i32, !dbg !34
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !34
  %233 = bitcast i32 %232 to float, !dbg !34
  %234 = fadd float %230, %233, !dbg !38
  %235 = and i32 %9, 7, !dbg !34
  %236 = icmp eq i32 %235, 0, !dbg !34
  %237 = and i1 %219, %236, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, float %234, i1 %237) #6, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %238 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %239 = insertelement <1 x float> undef, float %238, i64 0, !dbg !42
  store <1 x float> %239, ptr addrspace(3) @global_smem, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %240 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !42
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float 2.304000e+03) #6, !dbg !43
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float 2.304000e+03) #6, !dbg !43
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float 2.304000e+03) #6, !dbg !43
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float 2.304000e+03) #6, !dbg !43
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float 2.304000e+03) #6, !dbg !43
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float 2.304000e+03) #6, !dbg !43
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float 2.304000e+03) #6, !dbg !43
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float 2.304000e+03) #6, !dbg !43
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float 2.304000e+03) #6, !dbg !43
  %250 = fadd float %241, 0x3EE4F8B580000000, !dbg !44
  %251 = fadd float %242, 0x3EE4F8B580000000, !dbg !44
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %.not.i = icmp eq i32 %252, 0, !dbg !42
  br i1 %.not.i, label %255, label %253, !dbg !42

253:                                              ; preds = %115
  %254 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %250), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

255:                                              ; preds = %115
  %256 = tail call float @llvm.nvvm.rsqrt.approx.f(float %250), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %253, %255
  %.0.i = phi float [ %254, %253 ], [ %256, %255 ], !dbg !42
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %.not.i18 = icmp eq i32 %257, 0, !dbg !42
  br i1 %.not.i18, label %260, label %258, !dbg !42

258:                                              ; preds = %__nv_rsqrtf.exit
  %259 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %251), !dbg !42
  br label %__nv_rsqrtf.exit20, !dbg !42

260:                                              ; preds = %__nv_rsqrtf.exit
  %261 = tail call float @llvm.nvvm.rsqrt.approx.f(float %251), !dbg !42
  br label %__nv_rsqrtf.exit20, !dbg !42

__nv_rsqrtf.exit20:                               ; preds = %258, %260
  %.0.i19 = phi float [ %259, %258 ], [ %261, %260 ], !dbg !42
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %269 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !46
  %270 = icmp eq i32 %urem, 0, !dbg !47
  %271 = bitcast float %.0.i to i32, !dbg !47
  %272 = and i1 %270, %16, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %271, ptr addrspace(1) %269, i1 %272) #6, !dbg !47
  %273 = add i32 %11, %36, !dbg !48
  %274 = add i32 %12, %36, !dbg !48
  %275 = sext i32 %273 to i64, !dbg !49
  %276 = getelementptr float, ptr addrspace(1) %4, i64 %275, !dbg !49
  %277 = sext i32 %274 to i64, !dbg !49
  %278 = getelementptr float, ptr addrspace(1) %4, i64 %277, !dbg !49
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %276, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !50
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !50
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !50
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !50
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !50
  %284 = bitcast i32 %280 to float, !dbg !50
  %285 = bitcast i32 %281 to float, !dbg !50
  %286 = bitcast i32 %282 to float, !dbg !50
  %287 = bitcast i32 %283 to float, !dbg !50
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %278, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !50
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !50
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !50
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !50
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !50
  %293 = bitcast i32 %289 to float, !dbg !50
  %294 = bitcast i32 %290 to float, !dbg !50
  %295 = bitcast i32 %291 to float, !dbg !50
  %296 = bitcast i32 %292 to float, !dbg !50
  %297 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !51
  %298 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !51
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %297, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !52
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !52
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !52
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !52
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !52
  %304 = bitcast i32 %300 to float, !dbg !52
  %305 = bitcast i32 %301 to float, !dbg !52
  %306 = bitcast i32 %302 to float, !dbg !52
  %307 = bitcast i32 %303 to float, !dbg !52
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %298, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !52
  %309 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !52
  %310 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !52
  %311 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !52
  %312 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !52
  %313 = bitcast i32 %309 to float, !dbg !52
  %314 = bitcast i32 %310 to float, !dbg !52
  %315 = bitcast i32 %311 to float, !dbg !52
  %316 = bitcast i32 %312 to float, !dbg !52
  %317 = fmul float %284, 4.800000e+01, !dbg !53
  %318 = fmul float %285, 4.800000e+01, !dbg !53
  %319 = fmul float %286, 4.800000e+01, !dbg !53
  %320 = fmul float %287, 4.800000e+01, !dbg !53
  %321 = fmul float %293, 4.800000e+01, !dbg !53
  %322 = fmul float %294, 4.800000e+01, !dbg !53
  %323 = fmul float %295, 4.800000e+01, !dbg !53
  %324 = fmul float %296, 4.800000e+01, !dbg !53
  %325 = fmul float %.0.i19, %317, !dbg !54
  %326 = fmul float %.0.i19, %318, !dbg !54
  %327 = fmul float %.0.i19, %319, !dbg !54
  %328 = fmul float %.0.i19, %320, !dbg !54
  %329 = fmul float %.0.i19, %321, !dbg !54
  %330 = fmul float %.0.i19, %322, !dbg !54
  %331 = fmul float %.0.i19, %323, !dbg !54
  %332 = fmul float %.0.i19, %324, !dbg !54
  %333 = fadd float %304, 1.000000e+00, !dbg !55
  %334 = fadd float %305, 1.000000e+00, !dbg !55
  %335 = fadd float %306, 1.000000e+00, !dbg !55
  %336 = fadd float %307, 1.000000e+00, !dbg !55
  %337 = fadd float %313, 1.000000e+00, !dbg !55
  %338 = fadd float %314, 1.000000e+00, !dbg !55
  %339 = fadd float %315, 1.000000e+00, !dbg !55
  %340 = fadd float %316, 1.000000e+00, !dbg !55
  %341 = fmul float %325, %333, !dbg !56
  %342 = fmul float %326, %334, !dbg !56
  %343 = fmul float %327, %335, !dbg !56
  %344 = fmul float %328, %336, !dbg !56
  %345 = fmul float %329, %337, !dbg !56
  %346 = fmul float %330, %338, !dbg !56
  %347 = fmul float %331, %339, !dbg !56
  %348 = fmul float %332, %340, !dbg !56
  %349 = getelementptr i16, ptr addrspace(1) %5, i64 %275, !dbg !57
  %350 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %341) #6, !dbg !58
  %351 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %342) #6, !dbg !58
  %352 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %343) #6, !dbg !58
  %353 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %344) #6, !dbg !58
  %354 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %345) #6, !dbg !58
  %355 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %346) #6, !dbg !58
  %356 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %347) #6, !dbg !58
  %357 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %348) #6, !dbg !58
  %358 = insertelement <2 x i16> undef, i16 %350, i64 0, !dbg !58
  %359 = insertelement <2 x i16> %358, i16 %351, i64 1, !dbg !58
  %360 = bitcast <2 x i16> %359 to i32, !dbg !58
  %361 = insertelement <2 x i16> undef, i16 %352, i64 0, !dbg !58
  %362 = insertelement <2 x i16> %361, i16 %353, i64 1, !dbg !58
  %363 = bitcast <2 x i16> %362 to i32, !dbg !58
  %364 = insertelement <2 x i16> undef, i16 %354, i64 0, !dbg !58
  %365 = insertelement <2 x i16> %364, i16 %355, i64 1, !dbg !58
  %366 = bitcast <2 x i16> %365 to i32, !dbg !58
  %367 = insertelement <2 x i16> undef, i16 %356, i64 0, !dbg !58
  %368 = insertelement <2 x i16> %367, i16 %357, i64 1, !dbg !58
  %369 = bitcast <2 x i16> %368 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %360, i32 %363, i32 %366, i32 %369, ptr addrspace(1) %349, i1 %16) #6, !dbg !58
  %370 = add i32 %108, %36, !dbg !48
  %371 = add i32 %109, %36, !dbg !48
  %372 = sext i32 %370 to i64, !dbg !49
  %373 = getelementptr float, ptr addrspace(1) %4, i64 %372, !dbg !49
  %374 = sext i32 %371 to i64, !dbg !49
  %375 = getelementptr float, ptr addrspace(1) %4, i64 %374, !dbg !49
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %373, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #6, !dbg !50
  %377 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !50
  %378 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !50
  %379 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !50
  %380 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !50
  %381 = bitcast i32 %377 to float, !dbg !50
  %382 = bitcast i32 %378 to float, !dbg !50
  %383 = bitcast i32 %379 to float, !dbg !50
  %384 = bitcast i32 %380 to float, !dbg !50
  %385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %375, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #6, !dbg !50
  %386 = extractvalue { i32, i32, i32, i32 } %385, 0, !dbg !50
  %387 = extractvalue { i32, i32, i32, i32 } %385, 1, !dbg !50
  %388 = extractvalue { i32, i32, i32, i32 } %385, 2, !dbg !50
  %389 = extractvalue { i32, i32, i32, i32 } %385, 3, !dbg !50
  %390 = bitcast i32 %386 to float, !dbg !50
  %391 = bitcast i32 %387 to float, !dbg !50
  %392 = bitcast i32 %388 to float, !dbg !50
  %393 = bitcast i32 %389 to float, !dbg !50
  %394 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !51
  %395 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !51
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %394, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #6, !dbg !52
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !52
  %398 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !52
  %399 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !52
  %400 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !52
  %401 = bitcast i32 %397 to float, !dbg !52
  %402 = bitcast i32 %398 to float, !dbg !52
  %403 = bitcast i32 %399 to float, !dbg !52
  %404 = bitcast i32 %400 to float, !dbg !52
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %395, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #6, !dbg !52
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !52
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !52
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !52
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !52
  %410 = bitcast i32 %406 to float, !dbg !52
  %411 = bitcast i32 %407 to float, !dbg !52
  %412 = bitcast i32 %408 to float, !dbg !52
  %413 = bitcast i32 %409 to float, !dbg !52
  %414 = fmul float %381, 4.800000e+01, !dbg !53
  %415 = fmul float %382, 4.800000e+01, !dbg !53
  %416 = fmul float %383, 4.800000e+01, !dbg !53
  %417 = fmul float %384, 4.800000e+01, !dbg !53
  %418 = fmul float %390, 4.800000e+01, !dbg !53
  %419 = fmul float %391, 4.800000e+01, !dbg !53
  %420 = fmul float %392, 4.800000e+01, !dbg !53
  %421 = fmul float %393, 4.800000e+01, !dbg !53
  %422 = fmul float %.0.i19, %414, !dbg !54
  %423 = fmul float %.0.i19, %415, !dbg !54
  %424 = fmul float %.0.i19, %416, !dbg !54
  %425 = fmul float %.0.i19, %417, !dbg !54
  %426 = fmul float %.0.i19, %418, !dbg !54
  %427 = fmul float %.0.i19, %419, !dbg !54
  %428 = fmul float %.0.i19, %420, !dbg !54
  %429 = fmul float %.0.i19, %421, !dbg !54
  %430 = fadd float %401, 1.000000e+00, !dbg !55
  %431 = fadd float %402, 1.000000e+00, !dbg !55
  %432 = fadd float %403, 1.000000e+00, !dbg !55
  %433 = fadd float %404, 1.000000e+00, !dbg !55
  %434 = fadd float %410, 1.000000e+00, !dbg !55
  %435 = fadd float %411, 1.000000e+00, !dbg !55
  %436 = fadd float %412, 1.000000e+00, !dbg !55
  %437 = fadd float %413, 1.000000e+00, !dbg !55
  %438 = fmul float %422, %430, !dbg !56
  %439 = fmul float %423, %431, !dbg !56
  %440 = fmul float %424, %432, !dbg !56
  %441 = fmul float %425, %433, !dbg !56
  %442 = fmul float %426, %434, !dbg !56
  %443 = fmul float %427, %435, !dbg !56
  %444 = fmul float %428, %436, !dbg !56
  %445 = fmul float %429, %437, !dbg !56
  %446 = getelementptr i16, ptr addrspace(1) %5, i64 %372, !dbg !57
  %447 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %438) #6, !dbg !58
  %448 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %439) #6, !dbg !58
  %449 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %440) #6, !dbg !58
  %450 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %441) #6, !dbg !58
  %451 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %442) #6, !dbg !58
  %452 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %443) #6, !dbg !58
  %453 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %444) #6, !dbg !58
  %454 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %445) #6, !dbg !58
  %455 = insertelement <2 x i16> undef, i16 %447, i64 0, !dbg !58
  %456 = insertelement <2 x i16> %455, i16 %448, i64 1, !dbg !58
  %457 = bitcast <2 x i16> %456 to i32, !dbg !58
  %458 = insertelement <2 x i16> undef, i16 %449, i64 0, !dbg !58
  %459 = insertelement <2 x i16> %458, i16 %450, i64 1, !dbg !58
  %460 = bitcast <2 x i16> %459 to i32, !dbg !58
  %461 = insertelement <2 x i16> undef, i16 %451, i64 0, !dbg !58
  %462 = insertelement <2 x i16> %461, i16 %452, i64 1, !dbg !58
  %463 = bitcast <2 x i16> %462 to i32, !dbg !58
  %464 = insertelement <2 x i16> undef, i16 %453, i64 0, !dbg !58
  %465 = insertelement <2 x i16> %464, i16 %454, i64 1, !dbg !58
  %466 = bitcast <2 x i16> %465 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %457, i32 %460, i32 %463, i32 %466, ptr addrspace(1) %446, i1 %120) #6, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ctppsre4y3opbmrcy44tmfd6p45pjknguphsnskpsclfbu6qfelq.py", directory: "/tmp/torchinductor_zeus/tp")
!4 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7de", linkageName: "triton__0d1d2d3d4d5d6de7de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 26, column: 30, scope: !7)
!14 = !DILocation(line: 26, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 22, scope: !7)
!16 = !DILocation(line: 33, column: 22, scope: !7)
!17 = !DILocation(line: 34, column: 36, scope: !7)
!18 = !DILocation(line: 35, column: 41, scope: !7)
!19 = !DILocation(line: 36, column: 45, scope: !7)
!20 = !DILocation(line: 43, column: 40, scope: !7)
!21 = !DILocation(line: 35, column: 67, scope: !7)
!22 = !DILocation(line: 36, column: 40, scope: !7)
!23 = !DILocation(line: 36, column: 34, scope: !7)
!24 = !DILocation(line: 36, column: 53, scope: !7)
!25 = !DILocation(line: 38, column: 22, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 42, column: 47, scope: !7)
!28 = !DILocation(line: 43, column: 35, scope: !7)
!29 = !DILocation(line: 43, column: 29, scope: !7)
!30 = !DILocation(line: 43, column: 52, scope: !7)
!31 = !DILocation(line: 29, column: 27, scope: !7)
!32 = !DILocation(line: 30, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 61, scope: !7)
!34 = !DILocation(line: 243, column: 36, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!37 = !DILocation(line: 44, column: 25, scope: !35)
!38 = !DILocation(line: 233, column: 15, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!40 = !DILocation(line: 243, column: 36, scope: !39, inlinedAt: !41)
!41 = !DILocation(line: 44, column: 25, scope: !39)
!42 = !DILocation(line: 49, column: 26, scope: !7)
!43 = !DILocation(line: 46, column: 19, scope: !7)
!44 = !DILocation(line: 48, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 4, scope: !7)
!46 = !DILocation(line: 51, column: 28, scope: !7)
!47 = !DILocation(line: 51, column: 40, scope: !7)
!48 = !DILocation(line: 56, column: 42, scope: !7)
!49 = !DILocation(line: 56, column: 36, scope: !7)
!50 = !DILocation(line: 56, column: 53, scope: !7)
!51 = !DILocation(line: 57, column: 35, scope: !7)
!52 = !DILocation(line: 57, column: 40, scope: !7)
!53 = !DILocation(line: 59, column: 24, scope: !7)
!54 = !DILocation(line: 60, column: 24, scope: !7)
!55 = !DILocation(line: 62, column: 24, scope: !7)
!56 = !DILocation(line: 63, column: 24, scope: !7)
!57 = !DILocation(line: 65, column: 29, scope: !7)
!58 = !DILocation(line: 65, column: 53, scope: !7)
!59 = !DILocation(line: 52, column: 4, scope: !7)
