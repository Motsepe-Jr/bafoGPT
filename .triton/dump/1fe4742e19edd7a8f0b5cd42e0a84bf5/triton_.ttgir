#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<1x2048xf32, #blocked>
    %cst_0 = arith.constant dense<2048> : tensor<1x2048xi32, #blocked>
    %cst_1 = arith.constant dense<2048> : tensor<1x2048xi32, #blocked1>
    %cst_2 = arith.constant dense<1> : tensor<1x2048xi64, #blocked>
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %c-1_i32 = arith.constant -1 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %cst_5 = arith.constant dense<true> : tensor<1x2048xi1, #blocked>
    %cst_6 = arith.constant dense<5.000000e+01> : tensor<1x2048xf32, #blocked>
    %cst_7 = arith.constant dense<6.250000e-02> : tensor<1x2048xf32, #blocked>
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %3 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x2048xi32, #blocked1>
    %5 = arith.remsi %0, %c2048_i32 : i32
    %6 = arith.cmpi slt, %3, %cst_0 : tensor<1x2048xi32, #blocked>
    %7 = arith.cmpi slt, %4, %cst_1 : tensor<1x2048xi32, #blocked1>
    %8 = arith.muli %0, %c2048_i32 : i32
    %9 = tt.splat %8 : (i32) -> tensor<1x2048xi32, #blocked>
    %10 = tt.splat %8 : (i32) -> tensor<1x2048xi32, #blocked1>
    %11 = arith.addi %3, %9 : tensor<1x2048xi32, #blocked>
    %12 = arith.addi %4, %10 : tensor<1x2048xi32, #blocked1>
    %13 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %14 = tt.addptr %13, %11 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %15 = tt.load %14, %6, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
    %16 = arith.extf %15 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
    %17 = arith.mulf %16, %cst_7 : tensor<1x2048xf32, #blocked>
    %18 = arith.divf %17, %cst_6 : tensor<1x2048xf32, #blocked>
    %19 = tt.extern_elementwise %18 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %20 = arith.mulf %19, %cst_6 : tensor<1x2048xf32, #blocked>
    %21 = arith.muli %5, %c-1_i32 : i32
    %22 = tt.splat %21 : (i32) -> tensor<1x2048xi32, #blocked>
    %23 = arith.addi %3, %22 : tensor<1x2048xi32, #blocked>
    %24 = arith.extsi %23 : tensor<1x2048xi32, #blocked> to tensor<1x2048xi64, #blocked>
    %25 = arith.cmpi sge, %24, %cst_2 : tensor<1x2048xi64, #blocked>
    %26 = arith.select %25, %cst_3, %cst_4 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
    %27 = arith.cmpf une, %26, %cst_4 : tensor<1x2048xf32, #blocked>
    %28 = arith.select %27, %cst, %26 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
    %29 = arith.addf %20, %28 : tensor<1x2048xf32, #blocked>
    %30 = arith.cmpf ogt, %cst, %29 : tensor<1x2048xf32, #blocked>
    %31 = arith.xori %30, %cst_5 : tensor<1x2048xi1, #blocked>
    %32 = arith.andi %6, %31 : tensor<1x2048xi1, #blocked>
    %33 = arith.select %32, %29, %cst : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %63 = arith.cmpf ogt, %arg6, %arg7 : f32
      %64 = arith.cmpf une, %arg6, %arg6 : f32
      %65 = arith.ori %63, %64 : i1
      %66 = arith.select %65, %arg6, %arg7 : f32
      tt.reduce.return %66 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %35 = tt.expand_dims %34 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %36 = tt.broadcast %35 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %37 = arith.subf %29, %36 : tensor<1x2048xf32, #blocked>
    %38 = math.exp %37 : tensor<1x2048xf32, #blocked>
    %39 = arith.addf %38, %cst_4 : tensor<1x2048xf32, #blocked>
    %40 = arith.select %6, %39, %cst_4 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
    %41 = "tt.reduce"(%40) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %63 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %63 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %42 = tt.expand_dims %41 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %43 = tt.load %14, %6, %cst_8 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
    %44 = arith.extf %43 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
    %45 = arith.mulf %44, %cst_7 : tensor<1x2048xf32, #blocked>
    %46 = arith.divf %45, %cst_6 : tensor<1x2048xf32, #blocked>
    %47 = tt.extern_elementwise %46 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %48 = arith.mulf %47, %cst_6 : tensor<1x2048xf32, #blocked>
    %49 = arith.addf %48, %28 : tensor<1x2048xf32, #blocked>
    %50 = arith.subf %49, %36 : tensor<1x2048xf32, #blocked>
    %51 = math.exp %50 : tensor<1x2048xf32, #blocked>
    %52 = tt.broadcast %42 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %53 = arith.divf %51, %52 : tensor<1x2048xf32, #blocked>
    %54 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %55 = tt.addptr %54, %11 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %56 = arith.truncf %53 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
    tt.store %55, %56, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    %57 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>
    %58 = tt.addptr %57, %12 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xi32, #blocked1>
    %59 = triton_gpu.convert_layout %53 : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked1>
    tt.store %58, %59, %7 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32, #blocked1>
    %60 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %61 = tt.addptr %60, %11 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
    %62 = arith.truncf %47 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
    tt.store %61, %62, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    tt.return
  }
}
