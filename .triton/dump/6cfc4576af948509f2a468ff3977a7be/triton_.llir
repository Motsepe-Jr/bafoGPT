; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8de9de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = lshr i32 %11, 5, !dbg !10
  %urem = and i32 %11, 255, !dbg !10
  %13 = shl nuw nsw i32 %urem, 3, !dbg !10
  %14 = shl nuw nsw i32 %urem, 2, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %16 = mul i32 %15, 3584, !dbg !12
  %17 = add i32 %13, %16, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr i16, ptr addrspace(1) %1, i64 %18, !dbg !14
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !15
  %25 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset23 = lshr i32 %21, 16, !dbg !15
  %26 = trunc i32 %extelt.offset23 to i16, !dbg !15
  %27 = trunc i32 %22 to i16, !dbg !15
  %extelt.offset24 = lshr i32 %22, 16, !dbg !15
  %28 = trunc i32 %extelt.offset24 to i16, !dbg !15
  %29 = trunc i32 %23 to i16, !dbg !15
  %extelt.offset25 = lshr i32 %23, 16, !dbg !15
  %30 = trunc i32 %extelt.offset25 to i16, !dbg !15
  %31 = trunc i32 %24 to i16, !dbg !15
  %extelt.offset26 = lshr i32 %24, 16, !dbg !15
  %32 = trunc i32 %extelt.offset26 to i16, !dbg !15
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !16
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !16
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !16
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !16
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !16
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #6, !dbg !16
  %41 = fmul float %33, %33, !dbg !17
  %42 = fmul float %34, %34, !dbg !17
  %43 = fmul float %35, %35, !dbg !17
  %44 = fmul float %36, %36, !dbg !17
  %45 = fmul float %37, %37, !dbg !17
  %46 = fmul float %38, %38, !dbg !17
  %47 = fmul float %39, %39, !dbg !17
  %48 = fmul float %40, %40, !dbg !17
  %49 = or i32 %13, 2048, !dbg !18
  %50 = icmp ult i32 %49, 3584, !dbg !19
  %51 = add i32 %49, %16, !dbg !13
  %52 = sext i32 %51 to i64, !dbg !14
  %53 = getelementptr i16, ptr addrspace(1) %1, i64 %52, !dbg !14
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #6, !dbg !15
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !15
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !15
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !15
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !15
  %59 = trunc i32 %55 to i16, !dbg !15
  %extelt.offset23.1 = lshr i32 %55, 16, !dbg !15
  %60 = trunc i32 %extelt.offset23.1 to i16, !dbg !15
  %61 = trunc i32 %56 to i16, !dbg !15
  %extelt.offset24.1 = lshr i32 %56, 16, !dbg !15
  %62 = trunc i32 %extelt.offset24.1 to i16, !dbg !15
  %63 = trunc i32 %57 to i16, !dbg !15
  %extelt.offset25.1 = lshr i32 %57, 16, !dbg !15
  %64 = trunc i32 %extelt.offset25.1 to i16, !dbg !15
  %65 = trunc i32 %58 to i16, !dbg !15
  %extelt.offset26.1 = lshr i32 %58, 16, !dbg !15
  %66 = trunc i32 %extelt.offset26.1 to i16, !dbg !15
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #6, !dbg !16
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #6, !dbg !16
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #6, !dbg !16
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #6, !dbg !16
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #6, !dbg !16
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #6, !dbg !16
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #6, !dbg !16
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #6, !dbg !16
  %75 = fmul float %67, %67, !dbg !17
  %76 = fmul float %68, %68, !dbg !17
  %77 = fmul float %69, %69, !dbg !17
  %78 = fmul float %70, %70, !dbg !17
  %79 = fmul float %71, %71, !dbg !17
  %80 = fmul float %72, %72, !dbg !17
  %81 = fmul float %73, %73, !dbg !17
  %82 = fmul float %74, %74, !dbg !17
  %83 = select i1 %50, float %75, float -0.000000e+00, !dbg !20
  %84 = fadd float %41, %83, !dbg !20
  %85 = select i1 %50, float %76, float -0.000000e+00, !dbg !20
  %86 = fadd float %42, %85, !dbg !20
  %87 = select i1 %50, float %77, float -0.000000e+00, !dbg !20
  %88 = fadd float %43, %87, !dbg !20
  %89 = select i1 %50, float %78, float -0.000000e+00, !dbg !20
  %90 = fadd float %44, %89, !dbg !20
  %91 = select i1 %50, float %79, float -0.000000e+00, !dbg !20
  %92 = fadd float %45, %91, !dbg !20
  %93 = select i1 %50, float %80, float -0.000000e+00, !dbg !20
  %94 = fadd float %46, %93, !dbg !20
  %95 = select i1 %50, float %81, float -0.000000e+00, !dbg !20
  %96 = fadd float %47, %95, !dbg !20
  %97 = select i1 %50, float %82, float -0.000000e+00, !dbg !20
  %98 = fadd float %48, %97, !dbg !20
  %99 = and i32 %11, 31, !dbg !10
  %100 = and i32 %12, 7, !dbg !10
  %101 = or i32 %14, 1024, !dbg !10
  %102 = fadd float %84, %86, !dbg !21
  %103 = fadd float %88, %102, !dbg !21
  %104 = fadd float %90, %103, !dbg !21
  %105 = fadd float %92, %104, !dbg !21
  %106 = fadd float %94, %105, !dbg !21
  %107 = fadd float %96, %106, !dbg !21
  %108 = fadd float %98, %107, !dbg !21
  %109 = bitcast float %108 to i32, !dbg !27
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = fadd float %108, %111, !dbg !21
  %113 = bitcast float %112 to i32, !dbg !27
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !27
  %115 = bitcast i32 %114 to float, !dbg !27
  %116 = fadd float %112, %115, !dbg !21
  %117 = bitcast float %116 to i32, !dbg !27
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = fadd float %116, %119, !dbg !21
  %121 = bitcast float %120 to i32, !dbg !27
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = fadd float %120, %123, !dbg !21
  %125 = bitcast float %124 to i32, !dbg !27
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = fadd float %124, %127, !dbg !21
  %129 = icmp eq i32 %99, 0, !dbg !27
  %130 = zext nneg i32 %100 to i64, !dbg !27
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i64 %130, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, float %128, i1 %129) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %132 = icmp slt i32 %11, 8, !dbg !27
  %133 = sext i32 %11 to i64, !dbg !27
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !27
  %135 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #6, !dbg !27
  %136 = bitcast float %135 to i32, !dbg !27
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !27
  %138 = bitcast i32 %137 to float, !dbg !27
  %139 = fadd float %135, %138, !dbg !21
  %140 = bitcast float %139 to i32, !dbg !27
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !27
  %142 = bitcast i32 %141 to float, !dbg !27
  %143 = fadd float %139, %142, !dbg !21
  %144 = bitcast float %143 to i32, !dbg !27
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !27
  %146 = bitcast i32 %145 to float, !dbg !27
  %147 = fadd float %143, %146, !dbg !21
  %148 = and i32 %11, 7, !dbg !27
  %149 = icmp eq i32 %148, 0, !dbg !27
  %150 = and i1 %132, %149, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, float %147, i1 %150) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %151 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %152 = insertelement <1 x float> undef, float %151, i64 0, !dbg !29
  store <1 x float> %152, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %153 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float 3.584000e+03) #6, !dbg !30
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #6, !dbg !30
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #6, !dbg !30
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #6, !dbg !30
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #6, !dbg !30
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #6, !dbg !30
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #6, !dbg !30
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #6, !dbg !30
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.584000e+03) #6, !dbg !30
  %163 = fadd float %154, 0x3EE4F8B580000000, !dbg !31
  %164 = fadd float %155, 0x3EE4F8B580000000, !dbg !31
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %.not.i = icmp eq i32 %165, 0, !dbg !29
  br i1 %.not.i, label %168, label %166, !dbg !29

166:                                              ; preds = %10
  %167 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %163), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

168:                                              ; preds = %10
  %169 = tail call float @llvm.nvvm.rsqrt.approx.f(float %163), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %166, %168
  %.0.i = phi float [ %167, %166 ], [ %169, %168 ], !dbg !29
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %.not.i27 = icmp eq i32 %170, 0, !dbg !29
  br i1 %.not.i27, label %173, label %171, !dbg !29

171:                                              ; preds = %__nv_rsqrtf.exit
  %172 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %164), !dbg !29
  br label %__nv_rsqrtf.exit29, !dbg !29

173:                                              ; preds = %__nv_rsqrtf.exit
  %174 = tail call float @llvm.nvvm.rsqrt.approx.f(float %164), !dbg !29
  br label %__nv_rsqrtf.exit29, !dbg !29

__nv_rsqrtf.exit29:                               ; preds = %171, %173
  %.0.i28 = phi float [ %172, %171 ], [ %174, %173 ], !dbg !29
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %182 = sext i32 %15 to i64, !dbg !33
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !33
  %184 = icmp eq i32 %urem, 0, !dbg !34
  %185 = bitcast float %.0.i to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %183, i1 %184) #6, !dbg !34
  %186 = getelementptr float, ptr addrspace(1) %4, i64 %182, !dbg !35
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #6, !dbg !36
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #6, !dbg !36
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #6, !dbg !36
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #6, !dbg !36
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #6, !dbg !36
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #6, !dbg !36
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #6, !dbg !36
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #6, !dbg !36
  %195 = zext nneg i32 %13 to i64
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i64 %195
  %197 = zext nneg i32 %14 to i64
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i64 %197
  %199 = zext nneg i32 %101 to i64
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i64 %199
  %201 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %198, i64 0, i64 1
  %202 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %198, i64 0, i64 2
  %203 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %198, i64 0, i64 3
  %204 = insertelement <8 x float> poison, float %.0.i28, i64 0, !dbg !37
  %205 = shufflevector <8 x float> %204, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %206 = insertelement <8 x i32> undef, i32 %187, i64 0, !dbg !38
  %207 = bitcast <8 x i32> %206 to <8 x float>, !dbg !38
  %208 = shufflevector <8 x float> %207, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !38
  br label %209, !dbg !39

209:                                              ; preds = %__nv_rsqrtf.exit29, %209
  %210 = phi i1 [ true, %__nv_rsqrtf.exit29 ], [ false, %209 ]
  %211 = phi i32 [ 0, %__nv_rsqrtf.exit29 ], [ 2048, %209 ]
  %212 = or i32 %211, %13, !dbg !40
  %213 = or i32 %212, 4, !dbg !40
  %214 = or i32 %211, %14, !dbg !40
  %215 = or i32 %211, %101, !dbg !40
  %216 = icmp ult i32 %212, 3584, !dbg !41
  %217 = icmp ult i32 %215, 3584, !dbg !41
  %218 = add i32 %212, %16, !dbg !42
  %219 = add i32 %213, %16, !dbg !42
  %220 = add i32 %214, %16, !dbg !42
  %221 = add i32 %215, %16, !dbg !42
  %222 = sext i32 %218 to i64, !dbg !43
  %223 = getelementptr i16, ptr addrspace(1) %1, i64 %222, !dbg !43
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %223, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #6, !dbg !44
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !44
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !44
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !44
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !44
  %229 = trunc i32 %225 to i16, !dbg !44
  %extelt.offset = lshr i32 %225, 16, !dbg !44
  %230 = trunc i32 %extelt.offset to i16, !dbg !44
  %231 = trunc i32 %226 to i16, !dbg !44
  %extelt.offset2 = lshr i32 %226, 16, !dbg !44
  %232 = trunc i32 %extelt.offset2 to i16, !dbg !44
  %233 = trunc i32 %227 to i16, !dbg !44
  %extelt.offset3 = lshr i32 %227, 16, !dbg !44
  %234 = trunc i32 %extelt.offset3 to i16, !dbg !44
  %235 = trunc i32 %228 to i16, !dbg !44
  %extelt.offset4 = lshr i32 %228, 16, !dbg !44
  %236 = trunc i32 %extelt.offset4 to i16, !dbg !44
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %229) #6, !dbg !45
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %230) #6, !dbg !45
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #6, !dbg !45
  %240 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #6, !dbg !45
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #6, !dbg !45
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #6, !dbg !45
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #6, !dbg !45
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #6, !dbg !45
  %245 = zext nneg i32 %212 to i64, !dbg !46
  %246 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !46
  %247 = zext nneg i32 %213 to i64, !dbg !46
  %248 = getelementptr float, ptr addrspace(1) %2, i64 %247, !dbg !46
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %246, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #6, !dbg !47
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !47
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !47
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !47
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !47
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %248, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #6, !dbg !47
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !47
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !47
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !47
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !47
  %259 = getelementptr i16, ptr addrspace(1) %3, i64 %222, !dbg !48
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %259, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #6, !dbg !49
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !49
  %262 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !49
  %263 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !49
  %264 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !49
  %265 = trunc i32 %261 to i16, !dbg !49
  %extelt.offset5 = lshr i32 %261, 16, !dbg !49
  %266 = trunc i32 %extelt.offset5 to i16, !dbg !49
  %267 = trunc i32 %262 to i16, !dbg !49
  %extelt.offset6 = lshr i32 %262, 16, !dbg !49
  %268 = trunc i32 %extelt.offset6 to i16, !dbg !49
  %269 = trunc i32 %263 to i16, !dbg !49
  %extelt.offset7 = lshr i32 %263, 16, !dbg !49
  %270 = trunc i32 %extelt.offset7 to i16, !dbg !49
  %271 = trunc i32 %264 to i16, !dbg !49
  %extelt.offset8 = lshr i32 %264, 16, !dbg !49
  %272 = trunc i32 %extelt.offset8 to i16, !dbg !49
  %273 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #6, !dbg !50
  %274 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #6, !dbg !50
  %275 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #6, !dbg !50
  %276 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #6, !dbg !50
  %277 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %269) #6, !dbg !50
  %278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %270) #6, !dbg !50
  %279 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %271) #6, !dbg !50
  %280 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %272) #6, !dbg !50
  %281 = getelementptr float, ptr addrspace(1) %5, i64 %245, !dbg !51
  %282 = getelementptr float, ptr addrspace(1) %5, i64 %247, !dbg !51
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %281, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #6, !dbg !52
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !52
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !52
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !52
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !52
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %282, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #6, !dbg !52
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !52
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !52
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !52
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !52
  %293 = getelementptr float, ptr addrspace(1) %6, i64 %222, !dbg !53
  %294 = sext i32 %219 to i64, !dbg !53
  %295 = getelementptr float, ptr addrspace(1) %6, i64 %294, !dbg !53
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %293, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #6, !dbg !54
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !54
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !54
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !54
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !54
  %301 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %295, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216, i32 0, i1 %216) #6, !dbg !54
  %302 = extractvalue { i32, i32, i32, i32 } %301, 0, !dbg !54
  %303 = extractvalue { i32, i32, i32, i32 } %301, 1, !dbg !54
  %304 = extractvalue { i32, i32, i32, i32 } %301, 2, !dbg !54
  %305 = extractvalue { i32, i32, i32, i32 } %301, 3, !dbg !54
  %306 = insertelement <8 x i32> poison, i32 %250, i64 0, !dbg !47
  %307 = insertelement <8 x i32> %306, i32 %251, i64 1, !dbg !47
  %308 = insertelement <8 x i32> %307, i32 %252, i64 2, !dbg !47
  %309 = insertelement <8 x i32> %308, i32 %253, i64 3, !dbg !47
  %310 = insertelement <8 x i32> %309, i32 %255, i64 4, !dbg !47
  %311 = insertelement <8 x i32> %310, i32 %256, i64 5, !dbg !47
  %312 = insertelement <8 x i32> %311, i32 %257, i64 6, !dbg !47
  %313 = insertelement <8 x i32> %312, i32 %258, i64 7, !dbg !47
  %314 = bitcast <8 x i32> %313 to <8 x float>, !dbg !47
  %315 = insertelement <8 x i32> poison, i32 %284, i64 0, !dbg !52
  %316 = insertelement <8 x i32> %315, i32 %285, i64 1, !dbg !52
  %317 = insertelement <8 x i32> %316, i32 %286, i64 2, !dbg !52
  %318 = insertelement <8 x i32> %317, i32 %287, i64 3, !dbg !52
  %319 = insertelement <8 x i32> %318, i32 %289, i64 4, !dbg !52
  %320 = insertelement <8 x i32> %319, i32 %290, i64 5, !dbg !52
  %321 = insertelement <8 x i32> %320, i32 %291, i64 6, !dbg !52
  %322 = insertelement <8 x i32> %321, i32 %292, i64 7, !dbg !52
  %323 = bitcast <8 x i32> %322 to <8 x float>, !dbg !52
  %324 = insertelement <8 x i32> poison, i32 %297, i64 0, !dbg !54
  %325 = insertelement <8 x i32> %324, i32 %298, i64 1, !dbg !54
  %326 = insertelement <8 x i32> %325, i32 %299, i64 2, !dbg !54
  %327 = insertelement <8 x i32> %326, i32 %300, i64 3, !dbg !54
  %328 = insertelement <8 x i32> %327, i32 %302, i64 4, !dbg !54
  %329 = insertelement <8 x i32> %328, i32 %303, i64 5, !dbg !54
  %330 = insertelement <8 x i32> %329, i32 %304, i64 6, !dbg !54
  %331 = insertelement <8 x i32> %330, i32 %305, i64 7, !dbg !54
  %332 = bitcast <8 x i32> %331 to <8 x float>, !dbg !54
  %333 = insertelement <8 x float> poison, float %237, i64 0, !dbg !37
  %334 = insertelement <8 x float> %333, float %238, i64 1, !dbg !37
  %335 = insertelement <8 x float> %334, float %239, i64 2, !dbg !37
  %336 = insertelement <8 x float> %335, float %240, i64 3, !dbg !37
  %337 = insertelement <8 x float> %336, float %241, i64 4, !dbg !37
  %338 = insertelement <8 x float> %337, float %242, i64 5, !dbg !37
  %339 = insertelement <8 x float> %338, float %243, i64 6, !dbg !37
  %340 = insertelement <8 x float> %339, float %244, i64 7, !dbg !37
  %341 = fmul <8 x float> %205, %340, !dbg !37
  %342 = fadd <8 x float> %314, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !55
  %343 = fmul <8 x float> %341, %342, !dbg !56
  %344 = insertelement <8 x float> poison, float %273, i64 0, !dbg !38
  %345 = insertelement <8 x float> %344, float %274, i64 1, !dbg !38
  %346 = insertelement <8 x float> %345, float %275, i64 2, !dbg !38
  %347 = insertelement <8 x float> %346, float %276, i64 3, !dbg !38
  %348 = insertelement <8 x float> %347, float %277, i64 4, !dbg !38
  %349 = insertelement <8 x float> %348, float %278, i64 5, !dbg !38
  %350 = insertelement <8 x float> %349, float %279, i64 6, !dbg !38
  %351 = insertelement <8 x float> %350, float %280, i64 7, !dbg !38
  %352 = fmul <8 x float> %351, %208, !dbg !38
  %353 = fadd <8 x float> %323, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !57
  %354 = fmul <8 x float> %352, %353, !dbg !58
  %355 = fadd <8 x float> %354, %332, !dbg !59
  %356 = fadd <8 x float> %343, %355, !dbg !60
  %357 = sext i32 %220 to i64, !dbg !61
  %358 = getelementptr float, ptr addrspace(1) %7, i64 %357, !dbg !61
  %359 = sext i32 %221 to i64, !dbg !61
  %360 = getelementptr float, ptr addrspace(1) %7, i64 %359, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  store <8 x float> %356, ptr addrspace(3) %196, align 32, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %361 = load <4 x i32>, ptr addrspace(3) %200, align 16, !dbg !62
  %.extract = load i32, ptr addrspace(3) %198, align 16, !dbg !62
  %.extract10 = load i32, ptr addrspace(3) %201, align 4, !dbg !62
  %.extract12 = load i32, ptr addrspace(3) %202, align 8, !dbg !62
  %.extract14 = load i32, ptr addrspace(3) %203, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract12, i32 %.extract14, ptr addrspace(1) %358, i1 true) #6, !dbg !62
  %.extract16 = extractelement <4 x i32> %361, i64 0, !dbg !62
  %.extract18 = extractelement <4 x i32> %361, i64 1, !dbg !62
  %.extract20 = extractelement <4 x i32> %361, i64 2, !dbg !62
  %.extract22 = extractelement <4 x i32> %361, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract16, i32 %.extract18, i32 %.extract20, i32 %.extract22, ptr addrspace(1) %360, i1 %217) #6, !dbg !62
  br i1 %210, label %209, label %362, !dbg !39

362:                                              ; preds = %209
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cp2pqgl5ubnfkqktasrazpr3elzj6dsfxkmbofewnqfvllqxo5ur.py", directory: "/tmp/torchinductor_zeus/p2")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8de9de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8de9de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8de9de", linkageName: "triton__0d1d2d3d4d5d6d7d8de9de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 42, column: 26, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 43, column: 4, scope: !7)
!33 = !DILocation(line: 44, column: 28, scope: !7)
!34 = !DILocation(line: 44, column: 40, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 36, scope: !7)
!37 = !DILocation(line: 56, column: 24, scope: !7)
!38 = !DILocation(line: 63, column: 24, scope: !7)
!39 = !DILocation(line: 46, column: 36, scope: !7)
!40 = !DILocation(line: 47, column: 27, scope: !7)
!41 = !DILocation(line: 48, column: 25, scope: !7)
!42 = !DILocation(line: 50, column: 41, scope: !7)
!43 = !DILocation(line: 50, column: 35, scope: !7)
!44 = !DILocation(line: 50, column: 52, scope: !7)
!45 = !DILocation(line: 50, column: 104, scope: !7)
!46 = !DILocation(line: 51, column: 35, scope: !7)
!47 = !DILocation(line: 51, column: 40, scope: !7)
!48 = !DILocation(line: 52, column: 35, scope: !7)
!49 = !DILocation(line: 52, column: 52, scope: !7)
!50 = !DILocation(line: 52, column: 104, scope: !7)
!51 = !DILocation(line: 53, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 40, scope: !7)
!53 = !DILocation(line: 54, column: 35, scope: !7)
!54 = !DILocation(line: 54, column: 52, scope: !7)
!55 = !DILocation(line: 58, column: 24, scope: !7)
!56 = !DILocation(line: 59, column: 24, scope: !7)
!57 = !DILocation(line: 64, column: 24, scope: !7)
!58 = !DILocation(line: 65, column: 24, scope: !7)
!59 = !DILocation(line: 68, column: 24, scope: !7)
!60 = !DILocation(line: 69, column: 24, scope: !7)
!61 = !DILocation(line: 70, column: 29, scope: !7)
!62 = !DILocation(line: 70, column: 53, scope: !7)
!63 = !DILocation(line: 46, column: 4, scope: !7)
