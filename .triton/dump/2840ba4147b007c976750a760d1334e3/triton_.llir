; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6de7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = lshr i32 %9, 1, !dbg !8
  %11 = and i32 %10, 127, !dbg !8
  %12 = or i32 %11, 128, !dbg !8
  %13 = shl i32 %9, 2, !dbg !8
  %14 = and i32 %13, 252, !dbg !8
  %15 = shl i32 %9, 3, !dbg !9
  %16 = and i32 %15, 8, !dbg !9
  %17 = lshr i32 %9, 6, !dbg !9
  %18 = and i32 %17, 3, !dbg !9
  %19 = or i32 %18, 4, !dbg !9
  %20 = or i32 %18, 8, !dbg !9
  %21 = or i32 %18, 12, !dbg !9
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %23 = shl i32 %22, 8, !dbg !11
  %24 = or i32 %23, %11, !dbg !12
  %25 = or i32 %23, %12, !dbg !12
  %26 = or i32 %23, %14, !dbg !12
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %28 = shl i32 %27, 4, !dbg !14
  %29 = or i32 %28, %16, !dbg !15
  %30 = or i32 %28, %18, !dbg !15
  %31 = or i32 %28, %19, !dbg !15
  %32 = or i32 %28, %20, !dbg !15
  %33 = or i32 %28, %21, !dbg !15
  %34 = icmp slt i32 %29, 256, !dbg !16
  %35 = icmp slt i32 %30, 256, !dbg !16
  %36 = icmp slt i32 %31, 256, !dbg !16
  %37 = icmp slt i32 %32, 256, !dbg !16
  %38 = icmp slt i32 %33, 256, !dbg !16
  %.frozen74 = freeze i32 %24
  %39 = sdiv i32 %.frozen74, 512, !dbg !17
  %.frozen76 = freeze i32 %25
  %40 = sdiv i32 %.frozen76, 512, !dbg !17
  %.frozen78 = freeze i32 %26
  %41 = sdiv i32 %.frozen78, 512, !dbg !17
  %42 = srem i32 %39, 4, !dbg !18
  %43 = srem i32 %40, 4, !dbg !18
  %.frozen = freeze i32 %24
  %44 = sdiv i32 %.frozen, 2048, !dbg !19
  %.frozen72 = freeze i32 %25
  %45 = sdiv i32 %.frozen72, 2048, !dbg !19
  %46 = sdiv i32 %26, 2048, !dbg !19
  %47 = mul i32 %44, 2048
  %.decomposed = sub i32 %.frozen, %47
  %48 = mul i32 %45, 2048
  %.decomposed73 = sub i32 %.frozen72, %48
  %49 = mul i32 %39, 512
  %.decomposed75 = sub i32 %.frozen74, %49
  %50 = mul i32 %40, 512
  %.decomposed77 = sub i32 %.frozen76, %50
  %51 = mul i32 %41, 512
  %.decomposed79 = sub i32 %.frozen78, %51
  %52 = icmp slt i32 %42, 2, !dbg !20
  %53 = icmp slt i32 %43, 2, !dbg !20
  %54 = icmp sgt i32 %29, 255, !dbg !21
  %55 = and i1 %54, %52, !dbg !22
  %56 = and i1 %54, %53, !dbg !22
  %57 = shl nsw i32 %.decomposed, 8, !dbg !23
  %58 = shl nsw i32 %.decomposed73, 8, !dbg !23
  %59 = shl i32 %44, 18, !dbg !24
  %60 = shl i32 %45, 18, !dbg !24
  %61 = add i32 %59, %57, !dbg !25
  %62 = add i32 %61, %29, !dbg !26
  %63 = add i32 %60, %58, !dbg !25
  %64 = add i32 %63, %29, !dbg !26
  %65 = sext i32 %62 to i64, !dbg !27
  %66 = getelementptr i16, ptr addrspace(1) %0, i64 %65, !dbg !27
  %67 = sext i32 %64 to i64, !dbg !27
  %68 = getelementptr i16, ptr addrspace(1) %0, i64 %67, !dbg !27
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !28
  %74 = trunc i32 %70 to i16, !dbg !28
  %extelt.offset = lshr i32 %70, 16, !dbg !28
  %75 = trunc i32 %extelt.offset to i16, !dbg !28
  %76 = trunc i32 %71 to i16, !dbg !28
  %extelt.offset1 = lshr i32 %71, 16, !dbg !28
  %77 = trunc i32 %extelt.offset1 to i16, !dbg !28
  %78 = trunc i32 %72 to i16, !dbg !28
  %extelt.offset2 = lshr i32 %72, 16, !dbg !28
  %79 = trunc i32 %extelt.offset2 to i16, !dbg !28
  %80 = trunc i32 %73 to i16, !dbg !28
  %extelt.offset3 = lshr i32 %73, 16, !dbg !28
  %81 = trunc i32 %extelt.offset3 to i16, !dbg !28
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !28
  %87 = trunc i32 %83 to i16, !dbg !28
  %extelt.offset4 = lshr i32 %83, 16, !dbg !28
  %88 = trunc i32 %extelt.offset4 to i16, !dbg !28
  %89 = trunc i32 %84 to i16, !dbg !28
  %extelt.offset5 = lshr i32 %84, 16, !dbg !28
  %90 = trunc i32 %extelt.offset5 to i16, !dbg !28
  %91 = trunc i32 %85 to i16, !dbg !28
  %extelt.offset6 = lshr i32 %85, 16, !dbg !28
  %92 = trunc i32 %extelt.offset6 to i16, !dbg !28
  %93 = trunc i32 %86 to i16, !dbg !28
  %extelt.offset7 = lshr i32 %86, 16, !dbg !28
  %94 = trunc i32 %extelt.offset7 to i16, !dbg !28
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #2, !dbg !29
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #2, !dbg !29
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #2, !dbg !29
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #2, !dbg !29
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #2, !dbg !29
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #2, !dbg !29
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #2, !dbg !29
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #2, !dbg !29
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #2, !dbg !29
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #2, !dbg !29
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #2, !dbg !29
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #2, !dbg !29
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #2, !dbg !29
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #2, !dbg !29
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #2, !dbg !29
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #2, !dbg !29
  %111 = select i1 %55, float %95, float 0.000000e+00, !dbg !30
  %112 = select i1 %55, float %96, float 0.000000e+00, !dbg !30
  %113 = select i1 %55, float %97, float 0.000000e+00, !dbg !30
  %114 = select i1 %55, float %98, float 0.000000e+00, !dbg !30
  %115 = select i1 %55, float %99, float 0.000000e+00, !dbg !30
  %116 = select i1 %55, float %100, float 0.000000e+00, !dbg !30
  %117 = select i1 %55, float %101, float 0.000000e+00, !dbg !30
  %118 = select i1 %55, float %102, float 0.000000e+00, !dbg !30
  %119 = select i1 %56, float %103, float 0.000000e+00, !dbg !30
  %120 = select i1 %56, float %104, float 0.000000e+00, !dbg !30
  %121 = select i1 %56, float %105, float 0.000000e+00, !dbg !30
  %122 = select i1 %56, float %106, float 0.000000e+00, !dbg !30
  %123 = select i1 %56, float %107, float 0.000000e+00, !dbg !30
  %124 = select i1 %56, float %108, float 0.000000e+00, !dbg !30
  %125 = select i1 %56, float %109, float 0.000000e+00, !dbg !30
  %126 = select i1 %56, float %110, float 0.000000e+00, !dbg !30
  %127 = and i1 %34, %52, !dbg !31
  %128 = and i1 %34, %53, !dbg !31
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #2, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !32
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !32
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !32
  %134 = trunc i32 %130 to i16, !dbg !32
  %extelt.offset8 = lshr i32 %130, 16, !dbg !32
  %135 = trunc i32 %extelt.offset8 to i16, !dbg !32
  %136 = trunc i32 %131 to i16, !dbg !32
  %extelt.offset9 = lshr i32 %131, 16, !dbg !32
  %137 = trunc i32 %extelt.offset9 to i16, !dbg !32
  %138 = trunc i32 %132 to i16, !dbg !32
  %extelt.offset10 = lshr i32 %132, 16, !dbg !32
  %139 = trunc i32 %extelt.offset10 to i16, !dbg !32
  %140 = trunc i32 %133 to i16, !dbg !32
  %extelt.offset11 = lshr i32 %133, 16, !dbg !32
  %141 = trunc i32 %extelt.offset11 to i16, !dbg !32
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #2, !dbg !32
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !32
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !32
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !32
  %147 = trunc i32 %143 to i16, !dbg !32
  %extelt.offset12 = lshr i32 %143, 16, !dbg !32
  %148 = trunc i32 %extelt.offset12 to i16, !dbg !32
  %149 = trunc i32 %144 to i16, !dbg !32
  %extelt.offset13 = lshr i32 %144, 16, !dbg !32
  %150 = trunc i32 %extelt.offset13 to i16, !dbg !32
  %151 = trunc i32 %145 to i16, !dbg !32
  %extelt.offset14 = lshr i32 %145, 16, !dbg !32
  %152 = trunc i32 %extelt.offset14 to i16, !dbg !32
  %153 = trunc i32 %146 to i16, !dbg !32
  %extelt.offset15 = lshr i32 %146, 16, !dbg !32
  %154 = trunc i32 %extelt.offset15 to i16, !dbg !32
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %134) #2, !dbg !33
  %156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %135) #2, !dbg !33
  %157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %136) #2, !dbg !33
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %137) #2, !dbg !33
  %159 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #2, !dbg !33
  %160 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #2, !dbg !33
  %161 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %140) #2, !dbg !33
  %162 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %141) #2, !dbg !33
  %163 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %147) #2, !dbg !33
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %148) #2, !dbg !33
  %165 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %149) #2, !dbg !33
  %166 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %150) #2, !dbg !33
  %167 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %151) #2, !dbg !33
  %168 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %152) #2, !dbg !33
  %169 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %153) #2, !dbg !33
  %170 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %154) #2, !dbg !33
  %171 = shl nsw i32 %.decomposed75, 8, !dbg !34
  %172 = shl nsw i32 %.decomposed77, 8, !dbg !34
  %173 = add i32 %171, %29, !dbg !35
  %174 = add i32 %172, %29, !dbg !35
  %175 = sext i32 %173 to i64, !dbg !36
  %176 = getelementptr i16, ptr addrspace(1) %1, i64 %175, !dbg !36
  %177 = sext i32 %174 to i64, !dbg !36
  %178 = getelementptr i16, ptr addrspace(1) %1, i64 %177, !dbg !36
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #2, !dbg !37
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !37
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !37
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !37
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !37
  %184 = trunc i32 %180 to i16, !dbg !37
  %extelt.offset16 = lshr i32 %180, 16, !dbg !37
  %185 = trunc i32 %extelt.offset16 to i16, !dbg !37
  %186 = trunc i32 %181 to i16, !dbg !37
  %extelt.offset17 = lshr i32 %181, 16, !dbg !37
  %187 = trunc i32 %extelt.offset17 to i16, !dbg !37
  %188 = trunc i32 %182 to i16, !dbg !37
  %extelt.offset18 = lshr i32 %182, 16, !dbg !37
  %189 = trunc i32 %extelt.offset18 to i16, !dbg !37
  %190 = trunc i32 %183 to i16, !dbg !37
  %extelt.offset19 = lshr i32 %183, 16, !dbg !37
  %191 = trunc i32 %extelt.offset19 to i16, !dbg !37
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #2, !dbg !37
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !37
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !37
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !37
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !37
  %197 = trunc i32 %193 to i16, !dbg !37
  %extelt.offset20 = lshr i32 %193, 16, !dbg !37
  %198 = trunc i32 %extelt.offset20 to i16, !dbg !37
  %199 = trunc i32 %194 to i16, !dbg !37
  %extelt.offset21 = lshr i32 %194, 16, !dbg !37
  %200 = trunc i32 %extelt.offset21 to i16, !dbg !37
  %201 = trunc i32 %195 to i16, !dbg !37
  %extelt.offset22 = lshr i32 %195, 16, !dbg !37
  %202 = trunc i32 %extelt.offset22 to i16, !dbg !37
  %203 = trunc i32 %196 to i16, !dbg !37
  %extelt.offset23 = lshr i32 %196, 16, !dbg !37
  %204 = trunc i32 %extelt.offset23 to i16, !dbg !37
  %205 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %184) #2, !dbg !38
  %206 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %185) #2, !dbg !38
  %207 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %186) #2, !dbg !38
  %208 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %187) #2, !dbg !38
  %209 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %188) #2, !dbg !38
  %210 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #2, !dbg !38
  %211 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %190) #2, !dbg !38
  %212 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %191) #2, !dbg !38
  %213 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %197) #2, !dbg !38
  %214 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %198) #2, !dbg !38
  %215 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %199) #2, !dbg !38
  %216 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %200) #2, !dbg !38
  %217 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %201) #2, !dbg !38
  %218 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %202) #2, !dbg !38
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %203) #2, !dbg !38
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %204) #2, !dbg !38
  %221 = fmul float %155, %205, !dbg !39
  %222 = fmul float %156, %206, !dbg !39
  %223 = fmul float %157, %207, !dbg !39
  %224 = fmul float %158, %208, !dbg !39
  %225 = fmul float %159, %209, !dbg !39
  %226 = fmul float %160, %210, !dbg !39
  %227 = fmul float %161, %211, !dbg !39
  %228 = fmul float %162, %212, !dbg !39
  %229 = fmul float %163, %213, !dbg !39
  %230 = fmul float %164, %214, !dbg !39
  %231 = fmul float %165, %215, !dbg !39
  %232 = fmul float %166, %216, !dbg !39
  %233 = fmul float %167, %217, !dbg !39
  %234 = fmul float %168, %218, !dbg !39
  %235 = fmul float %169, %219, !dbg !39
  %236 = fmul float %170, %220, !dbg !39
  %237 = icmp sgt i32 %29, 127, !dbg !40
  %238 = and i1 %237, %52, !dbg !41
  %239 = and i1 %237, %53, !dbg !41
  %240 = add i32 %29, -128, !dbg !42
  %241 = add i32 %61, %240, !dbg !43
  %242 = add i32 %63, %240, !dbg !43
  %243 = sext i32 %241 to i64, !dbg !44
  %244 = getelementptr i16, ptr addrspace(1) %0, i64 %243, !dbg !44
  %245 = sext i32 %242 to i64, !dbg !44
  %246 = getelementptr i16, ptr addrspace(1) %0, i64 %245, !dbg !44
  %247 = and i1 %34, %238, !dbg !45
  %248 = and i1 %34, %239, !dbg !45
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %244, i1 %247, i32 0, i1 %247, i32 0, i1 %247, i32 0, i1 %247, i32 0, i1 %247) #2, !dbg !46
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !46
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !46
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !46
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !46
  %254 = trunc i32 %250 to i16, !dbg !46
  %extelt.offset24 = lshr i32 %250, 16, !dbg !46
  %255 = trunc i32 %extelt.offset24 to i16, !dbg !46
  %256 = trunc i32 %251 to i16, !dbg !46
  %extelt.offset25 = lshr i32 %251, 16, !dbg !46
  %257 = trunc i32 %extelt.offset25 to i16, !dbg !46
  %258 = trunc i32 %252 to i16, !dbg !46
  %extelt.offset26 = lshr i32 %252, 16, !dbg !46
  %259 = trunc i32 %extelt.offset26 to i16, !dbg !46
  %260 = trunc i32 %253 to i16, !dbg !46
  %extelt.offset27 = lshr i32 %253, 16, !dbg !46
  %261 = trunc i32 %extelt.offset27 to i16, !dbg !46
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %246, i1 %248, i32 0, i1 %248, i32 0, i1 %248, i32 0, i1 %248, i32 0, i1 %248) #2, !dbg !46
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !46
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !46
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !46
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !46
  %267 = trunc i32 %263 to i16, !dbg !46
  %extelt.offset28 = lshr i32 %263, 16, !dbg !46
  %268 = trunc i32 %extelt.offset28 to i16, !dbg !46
  %269 = trunc i32 %264 to i16, !dbg !46
  %extelt.offset29 = lshr i32 %264, 16, !dbg !46
  %270 = trunc i32 %extelt.offset29 to i16, !dbg !46
  %271 = trunc i32 %265 to i16, !dbg !46
  %extelt.offset30 = lshr i32 %265, 16, !dbg !46
  %272 = trunc i32 %extelt.offset30 to i16, !dbg !46
  %273 = trunc i32 %266 to i16, !dbg !46
  %extelt.offset31 = lshr i32 %266, 16, !dbg !46
  %274 = trunc i32 %extelt.offset31 to i16, !dbg !46
  %275 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %254) #2, !dbg !47
  %276 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %255) #2, !dbg !47
  %277 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %256) #2, !dbg !47
  %278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %257) #2, !dbg !47
  %279 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %258) #2, !dbg !47
  %280 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %259) #2, !dbg !47
  %281 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %260) #2, !dbg !47
  %282 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %261) #2, !dbg !47
  %283 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #2, !dbg !47
  %284 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #2, !dbg !47
  %285 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %269) #2, !dbg !47
  %286 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %270) #2, !dbg !47
  %287 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %271) #2, !dbg !47
  %288 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %272) #2, !dbg !47
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %273) #2, !dbg !47
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %274) #2, !dbg !47
  %291 = add i32 %240, %171, !dbg !48
  %292 = add i32 %240, %172, !dbg !48
  %293 = sext i32 %291 to i64, !dbg !49
  %294 = getelementptr i16, ptr addrspace(1) %2, i64 %293, !dbg !49
  %295 = sext i32 %292 to i64, !dbg !49
  %296 = getelementptr i16, ptr addrspace(1) %2, i64 %295, !dbg !49
  %297 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %294, i1 %247, i32 0, i1 %247, i32 0, i1 %247, i32 0, i1 %247, i32 0, i1 %247) #2, !dbg !50
  %298 = extractvalue { i32, i32, i32, i32 } %297, 0, !dbg !50
  %299 = extractvalue { i32, i32, i32, i32 } %297, 1, !dbg !50
  %300 = extractvalue { i32, i32, i32, i32 } %297, 2, !dbg !50
  %301 = extractvalue { i32, i32, i32, i32 } %297, 3, !dbg !50
  %302 = trunc i32 %298 to i16, !dbg !50
  %extelt.offset32 = lshr i32 %298, 16, !dbg !50
  %303 = trunc i32 %extelt.offset32 to i16, !dbg !50
  %304 = trunc i32 %299 to i16, !dbg !50
  %extelt.offset33 = lshr i32 %299, 16, !dbg !50
  %305 = trunc i32 %extelt.offset33 to i16, !dbg !50
  %306 = trunc i32 %300 to i16, !dbg !50
  %extelt.offset34 = lshr i32 %300, 16, !dbg !50
  %307 = trunc i32 %extelt.offset34 to i16, !dbg !50
  %308 = trunc i32 %301 to i16, !dbg !50
  %extelt.offset35 = lshr i32 %301, 16, !dbg !50
  %309 = trunc i32 %extelt.offset35 to i16, !dbg !50
  %310 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %296, i1 %248, i32 0, i1 %248, i32 0, i1 %248, i32 0, i1 %248, i32 0, i1 %248) #2, !dbg !50
  %311 = extractvalue { i32, i32, i32, i32 } %310, 0, !dbg !50
  %312 = extractvalue { i32, i32, i32, i32 } %310, 1, !dbg !50
  %313 = extractvalue { i32, i32, i32, i32 } %310, 2, !dbg !50
  %314 = extractvalue { i32, i32, i32, i32 } %310, 3, !dbg !50
  %315 = trunc i32 %311 to i16, !dbg !50
  %extelt.offset36 = lshr i32 %311, 16, !dbg !50
  %316 = trunc i32 %extelt.offset36 to i16, !dbg !50
  %317 = trunc i32 %312 to i16, !dbg !50
  %extelt.offset37 = lshr i32 %312, 16, !dbg !50
  %318 = trunc i32 %extelt.offset37 to i16, !dbg !50
  %319 = trunc i32 %313 to i16, !dbg !50
  %extelt.offset38 = lshr i32 %313, 16, !dbg !50
  %320 = trunc i32 %extelt.offset38 to i16, !dbg !50
  %321 = trunc i32 %314 to i16, !dbg !50
  %extelt.offset39 = lshr i32 %314, 16, !dbg !50
  %322 = trunc i32 %extelt.offset39 to i16, !dbg !50
  %323 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %302) #2, !dbg !51
  %324 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %303) #2, !dbg !51
  %325 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %304) #2, !dbg !51
  %326 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %305) #2, !dbg !51
  %327 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %306) #2, !dbg !51
  %328 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %307) #2, !dbg !51
  %329 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %308) #2, !dbg !51
  %330 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %309) #2, !dbg !51
  %331 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %315) #2, !dbg !51
  %332 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %316) #2, !dbg !51
  %333 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %317) #2, !dbg !51
  %334 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %318) #2, !dbg !51
  %335 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %319) #2, !dbg !51
  %336 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %320) #2, !dbg !51
  %337 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %321) #2, !dbg !51
  %338 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %322) #2, !dbg !51
  %339 = fmul float %275, %323, !dbg !52
  %340 = fmul float %276, %324, !dbg !52
  %341 = fmul float %277, %325, !dbg !52
  %342 = fmul float %278, %326, !dbg !52
  %343 = fmul float %279, %327, !dbg !52
  %344 = fmul float %280, %328, !dbg !52
  %345 = fmul float %281, %329, !dbg !52
  %346 = fmul float %282, %330, !dbg !52
  %347 = fmul float %283, %331, !dbg !52
  %348 = fmul float %284, %332, !dbg !52
  %349 = fmul float %285, %333, !dbg !52
  %350 = fmul float %286, %334, !dbg !52
  %351 = fmul float %287, %335, !dbg !52
  %352 = fmul float %288, %336, !dbg !52
  %353 = fmul float %289, %337, !dbg !52
  %354 = fmul float %290, %338, !dbg !52
  %355 = fsub float 0.000000e+00, %339, !dbg !53
  %356 = fsub float 0.000000e+00, %340, !dbg !53
  %357 = fsub float 0.000000e+00, %341, !dbg !53
  %358 = fsub float 0.000000e+00, %342, !dbg !53
  %359 = fsub float 0.000000e+00, %343, !dbg !53
  %360 = fsub float 0.000000e+00, %344, !dbg !53
  %361 = fsub float 0.000000e+00, %345, !dbg !53
  %362 = fsub float 0.000000e+00, %346, !dbg !53
  %363 = fsub float 0.000000e+00, %347, !dbg !53
  %364 = fsub float 0.000000e+00, %348, !dbg !53
  %365 = fsub float 0.000000e+00, %349, !dbg !53
  %366 = fsub float 0.000000e+00, %350, !dbg !53
  %367 = fsub float 0.000000e+00, %351, !dbg !53
  %368 = fsub float 0.000000e+00, %352, !dbg !53
  %369 = fsub float 0.000000e+00, %353, !dbg !53
  %370 = fsub float 0.000000e+00, %354, !dbg !53
  %371 = select i1 %238, float %355, float 0.000000e+00, !dbg !30
  %372 = select i1 %238, float %356, float 0.000000e+00, !dbg !30
  %373 = select i1 %238, float %357, float 0.000000e+00, !dbg !30
  %374 = select i1 %238, float %358, float 0.000000e+00, !dbg !30
  %375 = select i1 %238, float %359, float 0.000000e+00, !dbg !30
  %376 = select i1 %238, float %360, float 0.000000e+00, !dbg !30
  %377 = select i1 %238, float %361, float 0.000000e+00, !dbg !30
  %378 = select i1 %238, float %362, float 0.000000e+00, !dbg !30
  %379 = select i1 %239, float %363, float 0.000000e+00, !dbg !30
  %380 = select i1 %239, float %364, float 0.000000e+00, !dbg !30
  %381 = select i1 %239, float %365, float 0.000000e+00, !dbg !30
  %382 = select i1 %239, float %366, float 0.000000e+00, !dbg !30
  %383 = select i1 %239, float %367, float 0.000000e+00, !dbg !30
  %384 = select i1 %239, float %368, float 0.000000e+00, !dbg !30
  %385 = select i1 %239, float %369, float 0.000000e+00, !dbg !30
  %386 = select i1 %239, float %370, float 0.000000e+00, !dbg !30
  %387 = fadd float %221, %371, !dbg !54
  %388 = fadd float %222, %372, !dbg !54
  %389 = fadd float %223, %373, !dbg !54
  %390 = fadd float %224, %374, !dbg !54
  %391 = fadd float %225, %375, !dbg !54
  %392 = fadd float %226, %376, !dbg !54
  %393 = fadd float %227, %377, !dbg !54
  %394 = fadd float %228, %378, !dbg !54
  %395 = fadd float %229, %379, !dbg !54
  %396 = fadd float %230, %380, !dbg !54
  %397 = fadd float %231, %381, !dbg !54
  %398 = fadd float %232, %382, !dbg !54
  %399 = fadd float %233, %383, !dbg !54
  %400 = fadd float %234, %384, !dbg !54
  %401 = fadd float %235, %385, !dbg !54
  %402 = fadd float %236, %386, !dbg !54
  %403 = icmp slt i32 %29, 128, !dbg !55
  %404 = and i1 %403, %52, !dbg !56
  %405 = and i1 %403, %53, !dbg !56
  %406 = add i32 %29, 128, !dbg !57
  %407 = add i32 %61, %406, !dbg !58
  %408 = add i32 %63, %406, !dbg !58
  %409 = sext i32 %407 to i64, !dbg !59
  %410 = getelementptr i16, ptr addrspace(1) %0, i64 %409, !dbg !59
  %411 = sext i32 %408 to i64, !dbg !59
  %412 = getelementptr i16, ptr addrspace(1) %0, i64 %411, !dbg !59
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %410, i1 %404, i32 0, i1 %404, i32 0, i1 %404, i32 0, i1 %404, i32 0, i1 %404) #2, !dbg !60
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !60
  %415 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !60
  %416 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !60
  %417 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !60
  %418 = trunc i32 %414 to i16, !dbg !60
  %extelt.offset40 = lshr i32 %414, 16, !dbg !60
  %419 = trunc i32 %extelt.offset40 to i16, !dbg !60
  %420 = trunc i32 %415 to i16, !dbg !60
  %extelt.offset41 = lshr i32 %415, 16, !dbg !60
  %421 = trunc i32 %extelt.offset41 to i16, !dbg !60
  %422 = trunc i32 %416 to i16, !dbg !60
  %extelt.offset42 = lshr i32 %416, 16, !dbg !60
  %423 = trunc i32 %extelt.offset42 to i16, !dbg !60
  %424 = trunc i32 %417 to i16, !dbg !60
  %extelt.offset43 = lshr i32 %417, 16, !dbg !60
  %425 = trunc i32 %extelt.offset43 to i16, !dbg !60
  %426 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %412, i1 %405, i32 0, i1 %405, i32 0, i1 %405, i32 0, i1 %405, i32 0, i1 %405) #2, !dbg !60
  %427 = extractvalue { i32, i32, i32, i32 } %426, 0, !dbg !60
  %428 = extractvalue { i32, i32, i32, i32 } %426, 1, !dbg !60
  %429 = extractvalue { i32, i32, i32, i32 } %426, 2, !dbg !60
  %430 = extractvalue { i32, i32, i32, i32 } %426, 3, !dbg !60
  %431 = trunc i32 %427 to i16, !dbg !60
  %extelt.offset44 = lshr i32 %427, 16, !dbg !60
  %432 = trunc i32 %extelt.offset44 to i16, !dbg !60
  %433 = trunc i32 %428 to i16, !dbg !60
  %extelt.offset45 = lshr i32 %428, 16, !dbg !60
  %434 = trunc i32 %extelt.offset45 to i16, !dbg !60
  %435 = trunc i32 %429 to i16, !dbg !60
  %extelt.offset46 = lshr i32 %429, 16, !dbg !60
  %436 = trunc i32 %extelt.offset46 to i16, !dbg !60
  %437 = trunc i32 %430 to i16, !dbg !60
  %extelt.offset47 = lshr i32 %430, 16, !dbg !60
  %438 = trunc i32 %extelt.offset47 to i16, !dbg !60
  %439 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #2, !dbg !61
  %440 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #2, !dbg !61
  %441 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #2, !dbg !61
  %442 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #2, !dbg !61
  %443 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %422) #2, !dbg !61
  %444 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #2, !dbg !61
  %445 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #2, !dbg !61
  %446 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #2, !dbg !61
  %447 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #2, !dbg !61
  %448 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #2, !dbg !61
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #2, !dbg !61
  %450 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %434) #2, !dbg !61
  %451 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %435) #2, !dbg !61
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #2, !dbg !61
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #2, !dbg !61
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #2, !dbg !61
  %455 = add i32 %406, %171, !dbg !62
  %456 = add i32 %406, %172, !dbg !62
  %457 = sext i32 %455 to i64, !dbg !63
  %458 = getelementptr i16, ptr addrspace(1) %2, i64 %457, !dbg !63
  %459 = sext i32 %456 to i64, !dbg !63
  %460 = getelementptr i16, ptr addrspace(1) %2, i64 %459, !dbg !63
  %461 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %458, i1 %404, i32 0, i1 %404, i32 0, i1 %404, i32 0, i1 %404, i32 0, i1 %404) #2, !dbg !64
  %462 = extractvalue { i32, i32, i32, i32 } %461, 0, !dbg !64
  %463 = extractvalue { i32, i32, i32, i32 } %461, 1, !dbg !64
  %464 = extractvalue { i32, i32, i32, i32 } %461, 2, !dbg !64
  %465 = extractvalue { i32, i32, i32, i32 } %461, 3, !dbg !64
  %466 = trunc i32 %462 to i16, !dbg !64
  %extelt.offset48 = lshr i32 %462, 16, !dbg !64
  %467 = trunc i32 %extelt.offset48 to i16, !dbg !64
  %468 = trunc i32 %463 to i16, !dbg !64
  %extelt.offset49 = lshr i32 %463, 16, !dbg !64
  %469 = trunc i32 %extelt.offset49 to i16, !dbg !64
  %470 = trunc i32 %464 to i16, !dbg !64
  %extelt.offset50 = lshr i32 %464, 16, !dbg !64
  %471 = trunc i32 %extelt.offset50 to i16, !dbg !64
  %472 = trunc i32 %465 to i16, !dbg !64
  %extelt.offset51 = lshr i32 %465, 16, !dbg !64
  %473 = trunc i32 %extelt.offset51 to i16, !dbg !64
  %474 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %460, i1 %405, i32 0, i1 %405, i32 0, i1 %405, i32 0, i1 %405, i32 0, i1 %405) #2, !dbg !64
  %475 = extractvalue { i32, i32, i32, i32 } %474, 0, !dbg !64
  %476 = extractvalue { i32, i32, i32, i32 } %474, 1, !dbg !64
  %477 = extractvalue { i32, i32, i32, i32 } %474, 2, !dbg !64
  %478 = extractvalue { i32, i32, i32, i32 } %474, 3, !dbg !64
  %479 = trunc i32 %475 to i16, !dbg !64
  %extelt.offset52 = lshr i32 %475, 16, !dbg !64
  %480 = trunc i32 %extelt.offset52 to i16, !dbg !64
  %481 = trunc i32 %476 to i16, !dbg !64
  %extelt.offset53 = lshr i32 %476, 16, !dbg !64
  %482 = trunc i32 %extelt.offset53 to i16, !dbg !64
  %483 = trunc i32 %477 to i16, !dbg !64
  %extelt.offset54 = lshr i32 %477, 16, !dbg !64
  %484 = trunc i32 %extelt.offset54 to i16, !dbg !64
  %485 = trunc i32 %478 to i16, !dbg !64
  %extelt.offset55 = lshr i32 %478, 16, !dbg !64
  %486 = trunc i32 %extelt.offset55 to i16, !dbg !64
  %487 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %466) #2, !dbg !65
  %488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %467) #2, !dbg !65
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %468) #2, !dbg !65
  %490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %469) #2, !dbg !65
  %491 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %470) #2, !dbg !65
  %492 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %471) #2, !dbg !65
  %493 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %472) #2, !dbg !65
  %494 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %473) #2, !dbg !65
  %495 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %479) #2, !dbg !65
  %496 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #2, !dbg !65
  %497 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #2, !dbg !65
  %498 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #2, !dbg !65
  %499 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #2, !dbg !65
  %500 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #2, !dbg !65
  %501 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #2, !dbg !65
  %502 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #2, !dbg !65
  %503 = fmul float %439, %487, !dbg !66
  %504 = fmul float %440, %488, !dbg !66
  %505 = fmul float %441, %489, !dbg !66
  %506 = fmul float %442, %490, !dbg !66
  %507 = fmul float %443, %491, !dbg !66
  %508 = fmul float %444, %492, !dbg !66
  %509 = fmul float %445, %493, !dbg !66
  %510 = fmul float %446, %494, !dbg !66
  %511 = fmul float %447, %495, !dbg !66
  %512 = fmul float %448, %496, !dbg !66
  %513 = fmul float %449, %497, !dbg !66
  %514 = fmul float %450, %498, !dbg !66
  %515 = fmul float %451, %499, !dbg !66
  %516 = fmul float %452, %500, !dbg !66
  %517 = fmul float %453, %501, !dbg !66
  %518 = fmul float %454, %502, !dbg !66
  %519 = select i1 %404, float %503, float 0.000000e+00, !dbg !30
  %520 = select i1 %404, float %504, float 0.000000e+00, !dbg !30
  %521 = select i1 %404, float %505, float 0.000000e+00, !dbg !30
  %522 = select i1 %404, float %506, float 0.000000e+00, !dbg !30
  %523 = select i1 %404, float %507, float 0.000000e+00, !dbg !30
  %524 = select i1 %404, float %508, float 0.000000e+00, !dbg !30
  %525 = select i1 %404, float %509, float 0.000000e+00, !dbg !30
  %526 = select i1 %404, float %510, float 0.000000e+00, !dbg !30
  %527 = select i1 %405, float %511, float 0.000000e+00, !dbg !30
  %528 = select i1 %405, float %512, float 0.000000e+00, !dbg !30
  %529 = select i1 %405, float %513, float 0.000000e+00, !dbg !30
  %530 = select i1 %405, float %514, float 0.000000e+00, !dbg !30
  %531 = select i1 %405, float %515, float 0.000000e+00, !dbg !30
  %532 = select i1 %405, float %516, float 0.000000e+00, !dbg !30
  %533 = select i1 %405, float %517, float 0.000000e+00, !dbg !30
  %534 = select i1 %405, float %518, float 0.000000e+00, !dbg !30
  %535 = fadd float %387, %519, !dbg !67
  %536 = fadd float %388, %520, !dbg !67
  %537 = fadd float %389, %521, !dbg !67
  %538 = fadd float %390, %522, !dbg !67
  %539 = fadd float %391, %523, !dbg !67
  %540 = fadd float %392, %524, !dbg !67
  %541 = fadd float %393, %525, !dbg !67
  %542 = fadd float %394, %526, !dbg !67
  %543 = fadd float %395, %527, !dbg !67
  %544 = fadd float %396, %528, !dbg !67
  %545 = fadd float %397, %529, !dbg !67
  %546 = fadd float %398, %530, !dbg !67
  %547 = fadd float %399, %531, !dbg !67
  %548 = fadd float %400, %532, !dbg !67
  %549 = fadd float %401, %533, !dbg !67
  %550 = fadd float %402, %534, !dbg !67
  %551 = fadd float %111, %535, !dbg !68
  %552 = fadd float %112, %536, !dbg !68
  %553 = fadd float %113, %537, !dbg !68
  %554 = fadd float %114, %538, !dbg !68
  %555 = fadd float %115, %539, !dbg !68
  %556 = fadd float %116, %540, !dbg !68
  %557 = fadd float %117, %541, !dbg !68
  %558 = fadd float %118, %542, !dbg !68
  %559 = fadd float %119, %543, !dbg !68
  %560 = fadd float %120, %544, !dbg !68
  %561 = fadd float %121, %545, !dbg !68
  %562 = fadd float %122, %546, !dbg !68
  %563 = fadd float %123, %547, !dbg !68
  %564 = fadd float %124, %548, !dbg !68
  %565 = fadd float %125, %549, !dbg !68
  %566 = fadd float %126, %550, !dbg !68
  %567 = icmp eq i32 %42, 2, !dbg !69
  %568 = icmp eq i32 %43, 2, !dbg !69
  %569 = and i32 %41, -2147483645, !dbg !69
  %570 = icmp eq i32 %569, 2, !dbg !69
  %571 = shl i32 %30, 9, !dbg !70
  %572 = shl i32 %31, 9, !dbg !70
  %573 = shl i32 %32, 9, !dbg !70
  %574 = shl i32 %33, 9, !dbg !70
  %575 = shl i32 %46, 17, !dbg !71
  %576 = add i32 %575, %.decomposed79, !dbg !72
  %577 = add i32 %576, %571, !dbg !73
  %578 = add i32 %576, %572, !dbg !73
  %579 = add i32 %576, %573, !dbg !73
  %580 = add i32 %576, %574, !dbg !73
  %581 = sext i32 %577 to i64, !dbg !74
  %582 = getelementptr float, ptr addrspace(1) %3, i64 %581, !dbg !74
  %583 = sext i32 %578 to i64, !dbg !74
  %584 = getelementptr float, ptr addrspace(1) %3, i64 %583, !dbg !74
  %585 = sext i32 %579 to i64, !dbg !74
  %586 = getelementptr float, ptr addrspace(1) %3, i64 %585, !dbg !74
  %587 = sext i32 %580 to i64, !dbg !74
  %588 = getelementptr float, ptr addrspace(1) %3, i64 %587, !dbg !74
  %589 = and i1 %35, %570, !dbg !75
  %590 = and i1 %36, %570, !dbg !75
  %591 = and i1 %37, %570, !dbg !75
  %592 = and i1 %38, %570, !dbg !75
  %593 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %582, i1 %589, i32 0, i1 %589, i32 0, i1 %589, i32 0, i1 %589, i32 0, i1 %589) #2, !dbg !76
  %594 = extractvalue { i32, i32, i32, i32 } %593, 0, !dbg !76
  %595 = extractvalue { i32, i32, i32, i32 } %593, 1, !dbg !76
  %596 = extractvalue { i32, i32, i32, i32 } %593, 2, !dbg !76
  %597 = extractvalue { i32, i32, i32, i32 } %593, 3, !dbg !76
  %598 = bitcast i32 %594 to float, !dbg !76
  %599 = bitcast i32 %595 to float, !dbg !76
  %600 = bitcast i32 %596 to float, !dbg !76
  %601 = bitcast i32 %597 to float, !dbg !76
  %602 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %584, i1 %590, i32 0, i1 %590, i32 0, i1 %590, i32 0, i1 %590, i32 0, i1 %590) #2, !dbg !76
  %603 = extractvalue { i32, i32, i32, i32 } %602, 0, !dbg !76
  %604 = extractvalue { i32, i32, i32, i32 } %602, 1, !dbg !76
  %605 = extractvalue { i32, i32, i32, i32 } %602, 2, !dbg !76
  %606 = extractvalue { i32, i32, i32, i32 } %602, 3, !dbg !76
  %607 = bitcast i32 %603 to float, !dbg !76
  %608 = bitcast i32 %604 to float, !dbg !76
  %609 = bitcast i32 %605 to float, !dbg !76
  %610 = bitcast i32 %606 to float, !dbg !76
  %611 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %586, i1 %591, i32 0, i1 %591, i32 0, i1 %591, i32 0, i1 %591, i32 0, i1 %591) #2, !dbg !76
  %612 = extractvalue { i32, i32, i32, i32 } %611, 0, !dbg !76
  %613 = extractvalue { i32, i32, i32, i32 } %611, 1, !dbg !76
  %614 = extractvalue { i32, i32, i32, i32 } %611, 2, !dbg !76
  %615 = extractvalue { i32, i32, i32, i32 } %611, 3, !dbg !76
  %616 = bitcast i32 %612 to float, !dbg !76
  %617 = bitcast i32 %613 to float, !dbg !76
  %618 = bitcast i32 %614 to float, !dbg !76
  %619 = bitcast i32 %615 to float, !dbg !76
  %620 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %588, i1 %592, i32 0, i1 %592, i32 0, i1 %592, i32 0, i1 %592, i32 0, i1 %592) #2, !dbg !76
  %621 = extractvalue { i32, i32, i32, i32 } %620, 0, !dbg !76
  %622 = extractvalue { i32, i32, i32, i32 } %620, 1, !dbg !76
  %623 = extractvalue { i32, i32, i32, i32 } %620, 2, !dbg !76
  %624 = extractvalue { i32, i32, i32, i32 } %620, 3, !dbg !76
  %625 = bitcast i32 %621 to float, !dbg !76
  %626 = bitcast i32 %622 to float, !dbg !76
  %627 = bitcast i32 %623 to float, !dbg !76
  %628 = bitcast i32 %624 to float, !dbg !76
  %629 = select i1 %570, float %598, float 0.000000e+00, !dbg !77
  %630 = select i1 %570, float %599, float 0.000000e+00, !dbg !77
  %631 = select i1 %570, float %600, float 0.000000e+00, !dbg !77
  %632 = select i1 %570, float %601, float 0.000000e+00, !dbg !77
  %633 = select i1 %570, float %607, float 0.000000e+00, !dbg !77
  %634 = select i1 %570, float %608, float 0.000000e+00, !dbg !77
  %635 = select i1 %570, float %609, float 0.000000e+00, !dbg !77
  %636 = select i1 %570, float %610, float 0.000000e+00, !dbg !77
  %637 = select i1 %570, float %616, float 0.000000e+00, !dbg !77
  %638 = select i1 %570, float %617, float 0.000000e+00, !dbg !77
  %639 = select i1 %570, float %618, float 0.000000e+00, !dbg !77
  %640 = select i1 %570, float %619, float 0.000000e+00, !dbg !77
  %641 = select i1 %570, float %625, float 0.000000e+00, !dbg !77
  %642 = select i1 %570, float %626, float 0.000000e+00, !dbg !77
  %643 = select i1 %570, float %627, float 0.000000e+00, !dbg !77
  %644 = select i1 %570, float %628, float 0.000000e+00, !dbg !77
  %645 = mul nuw nsw i32 %14, 17, !dbg !77
  %646 = or i32 %645, %18, !dbg !77
  %647 = zext nneg i32 %646 to i64, !dbg !77
  %648 = getelementptr float, ptr addrspace(3) @global_smem, i64 %647, !dbg !77
  %649 = insertelement <1 x float> undef, float %629, i64 0, !dbg !77
  store <1 x float> %649, ptr addrspace(3) %648, align 4, !dbg !77
  %650 = add nuw nsw i32 %645, 17, !dbg !77
  %651 = add nuw nsw i32 %650, %18, !dbg !77
  %652 = zext nneg i32 %651 to i64, !dbg !77
  %653 = getelementptr float, ptr addrspace(3) @global_smem, i64 %652, !dbg !77
  %654 = insertelement <1 x float> undef, float %630, i64 0, !dbg !77
  store <1 x float> %654, ptr addrspace(3) %653, align 4, !dbg !77
  %655 = add nuw nsw i32 %645, 34, !dbg !77
  %656 = add nuw nsw i32 %655, %18, !dbg !77
  %657 = zext nneg i32 %656 to i64, !dbg !77
  %658 = getelementptr float, ptr addrspace(3) @global_smem, i64 %657, !dbg !77
  %659 = insertelement <1 x float> undef, float %631, i64 0, !dbg !77
  store <1 x float> %659, ptr addrspace(3) %658, align 4, !dbg !77
  %660 = add nuw nsw i32 %645, 51, !dbg !77
  %661 = add nuw nsw i32 %660, %18, !dbg !77
  %662 = zext nneg i32 %661 to i64, !dbg !77
  %663 = getelementptr float, ptr addrspace(3) @global_smem, i64 %662, !dbg !77
  %664 = insertelement <1 x float> undef, float %632, i64 0, !dbg !77
  store <1 x float> %664, ptr addrspace(3) %663, align 4, !dbg !77
  %665 = add nuw nsw i32 %645, %19, !dbg !77
  %666 = zext nneg i32 %665 to i64, !dbg !77
  %667 = getelementptr float, ptr addrspace(3) @global_smem, i64 %666, !dbg !77
  %668 = insertelement <1 x float> undef, float %633, i64 0, !dbg !77
  store <1 x float> %668, ptr addrspace(3) %667, align 4, !dbg !77
  %669 = add nuw nsw i32 %650, %19, !dbg !77
  %670 = zext nneg i32 %669 to i64, !dbg !77
  %671 = getelementptr float, ptr addrspace(3) @global_smem, i64 %670, !dbg !77
  %672 = insertelement <1 x float> undef, float %634, i64 0, !dbg !77
  store <1 x float> %672, ptr addrspace(3) %671, align 4, !dbg !77
  %673 = add nuw nsw i32 %655, %19, !dbg !77
  %674 = zext nneg i32 %673 to i64, !dbg !77
  %675 = getelementptr float, ptr addrspace(3) @global_smem, i64 %674, !dbg !77
  %676 = insertelement <1 x float> undef, float %635, i64 0, !dbg !77
  store <1 x float> %676, ptr addrspace(3) %675, align 4, !dbg !77
  %677 = add nuw nsw i32 %660, %19, !dbg !77
  %678 = zext nneg i32 %677 to i64, !dbg !77
  %679 = getelementptr float, ptr addrspace(3) @global_smem, i64 %678, !dbg !77
  %680 = insertelement <1 x float> undef, float %636, i64 0, !dbg !77
  store <1 x float> %680, ptr addrspace(3) %679, align 4, !dbg !77
  %681 = add nuw nsw i32 %645, %20, !dbg !77
  %682 = zext nneg i32 %681 to i64, !dbg !77
  %683 = getelementptr float, ptr addrspace(3) @global_smem, i64 %682, !dbg !77
  %684 = insertelement <1 x float> undef, float %637, i64 0, !dbg !77
  store <1 x float> %684, ptr addrspace(3) %683, align 4, !dbg !77
  %685 = add nuw nsw i32 %650, %20, !dbg !77
  %686 = zext nneg i32 %685 to i64, !dbg !77
  %687 = getelementptr float, ptr addrspace(3) @global_smem, i64 %686, !dbg !77
  %688 = insertelement <1 x float> undef, float %638, i64 0, !dbg !77
  store <1 x float> %688, ptr addrspace(3) %687, align 4, !dbg !77
  %689 = add nuw nsw i32 %655, %20, !dbg !77
  %690 = zext nneg i32 %689 to i64, !dbg !77
  %691 = getelementptr float, ptr addrspace(3) @global_smem, i64 %690, !dbg !77
  %692 = insertelement <1 x float> undef, float %639, i64 0, !dbg !77
  store <1 x float> %692, ptr addrspace(3) %691, align 4, !dbg !77
  %693 = add nuw nsw i32 %660, %20, !dbg !77
  %694 = zext nneg i32 %693 to i64, !dbg !77
  %695 = getelementptr float, ptr addrspace(3) @global_smem, i64 %694, !dbg !77
  %696 = insertelement <1 x float> undef, float %640, i64 0, !dbg !77
  store <1 x float> %696, ptr addrspace(3) %695, align 4, !dbg !77
  %697 = add nuw nsw i32 %645, %21, !dbg !77
  %698 = zext nneg i32 %697 to i64, !dbg !77
  %699 = getelementptr float, ptr addrspace(3) @global_smem, i64 %698, !dbg !77
  %700 = insertelement <1 x float> undef, float %641, i64 0, !dbg !77
  store <1 x float> %700, ptr addrspace(3) %699, align 4, !dbg !77
  %701 = add nuw nsw i32 %650, %21, !dbg !77
  %702 = zext nneg i32 %701 to i64, !dbg !77
  %703 = getelementptr float, ptr addrspace(3) @global_smem, i64 %702, !dbg !77
  %704 = insertelement <1 x float> undef, float %642, i64 0, !dbg !77
  store <1 x float> %704, ptr addrspace(3) %703, align 4, !dbg !77
  %705 = add nuw nsw i32 %655, %21, !dbg !77
  %706 = zext nneg i32 %705 to i64, !dbg !77
  %707 = getelementptr float, ptr addrspace(3) @global_smem, i64 %706, !dbg !77
  %708 = insertelement <1 x float> undef, float %643, i64 0, !dbg !77
  store <1 x float> %708, ptr addrspace(3) %707, align 4, !dbg !77
  %709 = add nuw nsw i32 %660, %21, !dbg !77
  %710 = zext nneg i32 %709 to i64, !dbg !77
  %711 = getelementptr float, ptr addrspace(3) @global_smem, i64 %710, !dbg !77
  %712 = insertelement <1 x float> undef, float %644, i64 0, !dbg !77
  store <1 x float> %712, ptr addrspace(3) %711, align 4, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %713 = mul nuw nsw i32 %11, 17, !dbg !77
  %714 = add nuw nsw i32 %713, %16, !dbg !77
  %715 = zext nneg i32 %714 to i64, !dbg !77
  %716 = getelementptr float, ptr addrspace(3) @global_smem, i64 %715, !dbg !77
  %717 = load float, ptr addrspace(3) %716, align 4, !dbg !77
  %718 = or i32 %16, 1, !dbg !77
  %719 = add nuw nsw i32 %713, %718, !dbg !77
  %720 = zext nneg i32 %719 to i64, !dbg !77
  %721 = getelementptr float, ptr addrspace(3) @global_smem, i64 %720, !dbg !77
  %722 = load float, ptr addrspace(3) %721, align 4, !dbg !77
  %723 = or i32 %16, 2, !dbg !77
  %724 = add nuw nsw i32 %713, %723, !dbg !77
  %725 = zext nneg i32 %724 to i64, !dbg !77
  %726 = getelementptr float, ptr addrspace(3) @global_smem, i64 %725, !dbg !77
  %727 = load float, ptr addrspace(3) %726, align 4, !dbg !77
  %728 = or i32 %16, 3, !dbg !77
  %729 = add nuw nsw i32 %713, %728, !dbg !77
  %730 = zext nneg i32 %729 to i64, !dbg !77
  %731 = getelementptr float, ptr addrspace(3) @global_smem, i64 %730, !dbg !77
  %732 = load float, ptr addrspace(3) %731, align 4, !dbg !77
  %733 = or i32 %16, 4, !dbg !77
  %734 = add nuw nsw i32 %713, %733, !dbg !77
  %735 = zext nneg i32 %734 to i64, !dbg !77
  %736 = getelementptr float, ptr addrspace(3) @global_smem, i64 %735, !dbg !77
  %737 = load float, ptr addrspace(3) %736, align 4, !dbg !77
  %738 = or i32 %16, 5, !dbg !77
  %739 = add nuw nsw i32 %713, %738, !dbg !77
  %740 = zext nneg i32 %739 to i64, !dbg !77
  %741 = getelementptr float, ptr addrspace(3) @global_smem, i64 %740, !dbg !77
  %742 = load float, ptr addrspace(3) %741, align 4, !dbg !77
  %743 = or i32 %16, 6, !dbg !77
  %744 = add nuw nsw i32 %713, %743, !dbg !77
  %745 = zext nneg i32 %744 to i64, !dbg !77
  %746 = getelementptr float, ptr addrspace(3) @global_smem, i64 %745, !dbg !77
  %747 = load float, ptr addrspace(3) %746, align 4, !dbg !77
  %748 = or i32 %16, 7, !dbg !77
  %749 = add nuw nsw i32 %713, %748, !dbg !77
  %750 = zext nneg i32 %749 to i64, !dbg !77
  %751 = getelementptr float, ptr addrspace(3) @global_smem, i64 %750, !dbg !77
  %752 = load float, ptr addrspace(3) %751, align 4, !dbg !77
  %753 = mul nuw nsw i32 %12, 17, !dbg !77
  %754 = add nuw nsw i32 %753, %16, !dbg !77
  %755 = zext nneg i32 %754 to i64, !dbg !77
  %756 = getelementptr float, ptr addrspace(3) @global_smem, i64 %755, !dbg !77
  %757 = load float, ptr addrspace(3) %756, align 4, !dbg !77
  %758 = add nuw nsw i32 %753, %718, !dbg !77
  %759 = zext nneg i32 %758 to i64, !dbg !77
  %760 = getelementptr float, ptr addrspace(3) @global_smem, i64 %759, !dbg !77
  %761 = load float, ptr addrspace(3) %760, align 4, !dbg !77
  %762 = add nuw nsw i32 %753, %723, !dbg !77
  %763 = zext nneg i32 %762 to i64, !dbg !77
  %764 = getelementptr float, ptr addrspace(3) @global_smem, i64 %763, !dbg !77
  %765 = load float, ptr addrspace(3) %764, align 4, !dbg !77
  %766 = add nuw nsw i32 %753, %728, !dbg !77
  %767 = zext nneg i32 %766 to i64, !dbg !77
  %768 = getelementptr float, ptr addrspace(3) @global_smem, i64 %767, !dbg !77
  %769 = load float, ptr addrspace(3) %768, align 4, !dbg !77
  %770 = add nuw nsw i32 %753, %733, !dbg !77
  %771 = zext nneg i32 %770 to i64, !dbg !77
  %772 = getelementptr float, ptr addrspace(3) @global_smem, i64 %771, !dbg !77
  %773 = load float, ptr addrspace(3) %772, align 4, !dbg !77
  %774 = add nuw nsw i32 %753, %738, !dbg !77
  %775 = zext nneg i32 %774 to i64, !dbg !77
  %776 = getelementptr float, ptr addrspace(3) @global_smem, i64 %775, !dbg !77
  %777 = load float, ptr addrspace(3) %776, align 4, !dbg !77
  %778 = add nuw nsw i32 %753, %743, !dbg !77
  %779 = zext nneg i32 %778 to i64, !dbg !77
  %780 = getelementptr float, ptr addrspace(3) @global_smem, i64 %779, !dbg !77
  %781 = load float, ptr addrspace(3) %780, align 4, !dbg !77
  %782 = add nuw nsw i32 %753, %748, !dbg !77
  %783 = zext nneg i32 %782 to i64, !dbg !77
  %784 = getelementptr float, ptr addrspace(3) @global_smem, i64 %783, !dbg !77
  %785 = load float, ptr addrspace(3) %784, align 4, !dbg !77
  %786 = icmp sgt i32 %42, 2, !dbg !78
  %787 = icmp sgt i32 %43, 2, !dbg !78
  %788 = add i32 %173, %59, !dbg !79
  %789 = add i32 %174, %60, !dbg !79
  %790 = sext i32 %788 to i64, !dbg !80
  %791 = getelementptr i16, ptr addrspace(1) %4, i64 %790, !dbg !80
  %792 = sext i32 %789 to i64, !dbg !80
  %793 = getelementptr i16, ptr addrspace(1) %4, i64 %792, !dbg !80
  %794 = and i1 %34, %786, !dbg !81
  %795 = and i1 %34, %787, !dbg !81
  %796 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %791, i1 %794, i32 0, i1 %794, i32 0, i1 %794, i32 0, i1 %794, i32 0, i1 %794) #2, !dbg !82
  %797 = extractvalue { i32, i32, i32, i32 } %796, 0, !dbg !82
  %798 = extractvalue { i32, i32, i32, i32 } %796, 1, !dbg !82
  %799 = extractvalue { i32, i32, i32, i32 } %796, 2, !dbg !82
  %800 = extractvalue { i32, i32, i32, i32 } %796, 3, !dbg !82
  %801 = trunc i32 %797 to i16, !dbg !82
  %extelt.offset56 = lshr i32 %797, 16, !dbg !82
  %802 = trunc i32 %extelt.offset56 to i16, !dbg !82
  %803 = trunc i32 %798 to i16, !dbg !82
  %extelt.offset57 = lshr i32 %798, 16, !dbg !82
  %804 = trunc i32 %extelt.offset57 to i16, !dbg !82
  %805 = trunc i32 %799 to i16, !dbg !82
  %extelt.offset58 = lshr i32 %799, 16, !dbg !82
  %806 = trunc i32 %extelt.offset58 to i16, !dbg !82
  %807 = trunc i32 %800 to i16, !dbg !82
  %extelt.offset59 = lshr i32 %800, 16, !dbg !82
  %808 = trunc i32 %extelt.offset59 to i16, !dbg !82
  %809 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %793, i1 %795, i32 0, i1 %795, i32 0, i1 %795, i32 0, i1 %795, i32 0, i1 %795) #2, !dbg !82
  %810 = extractvalue { i32, i32, i32, i32 } %809, 0, !dbg !82
  %811 = extractvalue { i32, i32, i32, i32 } %809, 1, !dbg !82
  %812 = extractvalue { i32, i32, i32, i32 } %809, 2, !dbg !82
  %813 = extractvalue { i32, i32, i32, i32 } %809, 3, !dbg !82
  %814 = trunc i32 %810 to i16, !dbg !82
  %extelt.offset60 = lshr i32 %810, 16, !dbg !82
  %815 = trunc i32 %extelt.offset60 to i16, !dbg !82
  %816 = trunc i32 %811 to i16, !dbg !82
  %extelt.offset61 = lshr i32 %811, 16, !dbg !82
  %817 = trunc i32 %extelt.offset61 to i16, !dbg !82
  %818 = trunc i32 %812 to i16, !dbg !82
  %extelt.offset62 = lshr i32 %812, 16, !dbg !82
  %819 = trunc i32 %extelt.offset62 to i16, !dbg !82
  %820 = trunc i32 %813 to i16, !dbg !82
  %extelt.offset63 = lshr i32 %813, 16, !dbg !82
  %821 = trunc i32 %extelt.offset63 to i16, !dbg !82
  %822 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %801) #2, !dbg !83
  %823 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %802) #2, !dbg !83
  %824 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %803) #2, !dbg !83
  %825 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %804) #2, !dbg !83
  %826 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %805) #2, !dbg !83
  %827 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %806) #2, !dbg !83
  %828 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %807) #2, !dbg !83
  %829 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %808) #2, !dbg !83
  %830 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %814) #2, !dbg !83
  %831 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %815) #2, !dbg !83
  %832 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %816) #2, !dbg !83
  %833 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %817) #2, !dbg !83
  %834 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %818) #2, !dbg !83
  %835 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %819) #2, !dbg !83
  %836 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %820) #2, !dbg !83
  %837 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %821) #2, !dbg !83
  %838 = add i32 %29, 131072, !dbg !84
  %839 = add i32 %838, %171, !dbg !85
  %840 = add i32 %838, %172, !dbg !85
  %841 = add i32 %839, %59, !dbg !86
  %842 = add i32 %840, %60, !dbg !86
  %843 = sext i32 %841 to i64, !dbg !87
  %844 = getelementptr i16, ptr addrspace(1) %4, i64 %843, !dbg !87
  %845 = sext i32 %842 to i64, !dbg !87
  %846 = getelementptr i16, ptr addrspace(1) %4, i64 %845, !dbg !87
  %847 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %844, i1 %794, i32 0, i1 %794, i32 0, i1 %794, i32 0, i1 %794, i32 0, i1 %794) #2, !dbg !88
  %848 = extractvalue { i32, i32, i32, i32 } %847, 0, !dbg !88
  %849 = extractvalue { i32, i32, i32, i32 } %847, 1, !dbg !88
  %850 = extractvalue { i32, i32, i32, i32 } %847, 2, !dbg !88
  %851 = extractvalue { i32, i32, i32, i32 } %847, 3, !dbg !88
  %852 = trunc i32 %848 to i16, !dbg !88
  %extelt.offset64 = lshr i32 %848, 16, !dbg !88
  %853 = trunc i32 %extelt.offset64 to i16, !dbg !88
  %854 = trunc i32 %849 to i16, !dbg !88
  %extelt.offset65 = lshr i32 %849, 16, !dbg !88
  %855 = trunc i32 %extelt.offset65 to i16, !dbg !88
  %856 = trunc i32 %850 to i16, !dbg !88
  %extelt.offset66 = lshr i32 %850, 16, !dbg !88
  %857 = trunc i32 %extelt.offset66 to i16, !dbg !88
  %858 = trunc i32 %851 to i16, !dbg !88
  %extelt.offset67 = lshr i32 %851, 16, !dbg !88
  %859 = trunc i32 %extelt.offset67 to i16, !dbg !88
  %860 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %846, i1 %795, i32 0, i1 %795, i32 0, i1 %795, i32 0, i1 %795, i32 0, i1 %795) #2, !dbg !88
  %861 = extractvalue { i32, i32, i32, i32 } %860, 0, !dbg !88
  %862 = extractvalue { i32, i32, i32, i32 } %860, 1, !dbg !88
  %863 = extractvalue { i32, i32, i32, i32 } %860, 2, !dbg !88
  %864 = extractvalue { i32, i32, i32, i32 } %860, 3, !dbg !88
  %865 = trunc i32 %861 to i16, !dbg !88
  %extelt.offset68 = lshr i32 %861, 16, !dbg !88
  %866 = trunc i32 %extelt.offset68 to i16, !dbg !88
  %867 = trunc i32 %862 to i16, !dbg !88
  %extelt.offset69 = lshr i32 %862, 16, !dbg !88
  %868 = trunc i32 %extelt.offset69 to i16, !dbg !88
  %869 = trunc i32 %863 to i16, !dbg !88
  %extelt.offset70 = lshr i32 %863, 16, !dbg !88
  %870 = trunc i32 %extelt.offset70 to i16, !dbg !88
  %871 = trunc i32 %864 to i16, !dbg !88
  %extelt.offset71 = lshr i32 %864, 16, !dbg !88
  %872 = trunc i32 %extelt.offset71 to i16, !dbg !88
  %873 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %852) #2, !dbg !89
  %874 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %853) #2, !dbg !89
  %875 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %854) #2, !dbg !89
  %876 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %855) #2, !dbg !89
  %877 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %856) #2, !dbg !89
  %878 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %857) #2, !dbg !89
  %879 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %858) #2, !dbg !89
  %880 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %859) #2, !dbg !89
  %881 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %865) #2, !dbg !89
  %882 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %866) #2, !dbg !89
  %883 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %867) #2, !dbg !89
  %884 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %868) #2, !dbg !89
  %885 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %869) #2, !dbg !89
  %886 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %870) #2, !dbg !89
  %887 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %871) #2, !dbg !89
  %888 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %872) #2, !dbg !89
  %889 = fadd float %822, %873, !dbg !90
  %890 = fadd float %823, %874, !dbg !90
  %891 = fadd float %824, %875, !dbg !90
  %892 = fadd float %825, %876, !dbg !90
  %893 = fadd float %826, %877, !dbg !90
  %894 = fadd float %827, %878, !dbg !90
  %895 = fadd float %828, %879, !dbg !90
  %896 = fadd float %829, %880, !dbg !90
  %897 = fadd float %830, %881, !dbg !90
  %898 = fadd float %831, %882, !dbg !90
  %899 = fadd float %832, %883, !dbg !90
  %900 = fadd float %833, %884, !dbg !90
  %901 = fadd float %834, %885, !dbg !90
  %902 = fadd float %835, %886, !dbg !90
  %903 = fadd float %836, %887, !dbg !90
  %904 = fadd float %837, %888, !dbg !90
  %905 = select i1 %786, float %889, float 0.000000e+00, !dbg !91
  %906 = select i1 %786, float %890, float 0.000000e+00, !dbg !91
  %907 = select i1 %786, float %891, float 0.000000e+00, !dbg !91
  %908 = select i1 %786, float %892, float 0.000000e+00, !dbg !91
  %909 = select i1 %786, float %893, float 0.000000e+00, !dbg !91
  %910 = select i1 %786, float %894, float 0.000000e+00, !dbg !91
  %911 = select i1 %786, float %895, float 0.000000e+00, !dbg !91
  %912 = select i1 %786, float %896, float 0.000000e+00, !dbg !91
  %913 = select i1 %787, float %897, float 0.000000e+00, !dbg !91
  %914 = select i1 %787, float %898, float 0.000000e+00, !dbg !91
  %915 = select i1 %787, float %899, float 0.000000e+00, !dbg !91
  %916 = select i1 %787, float %900, float 0.000000e+00, !dbg !91
  %917 = select i1 %787, float %901, float 0.000000e+00, !dbg !91
  %918 = select i1 %787, float %902, float 0.000000e+00, !dbg !91
  %919 = select i1 %787, float %903, float 0.000000e+00, !dbg !91
  %920 = select i1 %787, float %904, float 0.000000e+00, !dbg !91
  %921 = select i1 %567, float %717, float %905, !dbg !92
  %922 = select i1 %567, float %722, float %906, !dbg !92
  %923 = select i1 %567, float %727, float %907, !dbg !92
  %924 = select i1 %567, float %732, float %908, !dbg !92
  %925 = select i1 %567, float %737, float %909, !dbg !92
  %926 = select i1 %567, float %742, float %910, !dbg !92
  %927 = select i1 %567, float %747, float %911, !dbg !92
  %928 = select i1 %567, float %752, float %912, !dbg !92
  %929 = select i1 %568, float %757, float %913, !dbg !92
  %930 = select i1 %568, float %761, float %914, !dbg !92
  %931 = select i1 %568, float %765, float %915, !dbg !92
  %932 = select i1 %568, float %769, float %916, !dbg !92
  %933 = select i1 %568, float %773, float %917, !dbg !92
  %934 = select i1 %568, float %777, float %918, !dbg !92
  %935 = select i1 %568, float %781, float %919, !dbg !92
  %936 = select i1 %568, float %785, float %920, !dbg !92
  %937 = select i1 %52, float %551, float %921, !dbg !30
  %938 = select i1 %52, float %552, float %922, !dbg !30
  %939 = select i1 %52, float %553, float %923, !dbg !30
  %940 = select i1 %52, float %554, float %924, !dbg !30
  %941 = select i1 %52, float %555, float %925, !dbg !30
  %942 = select i1 %52, float %556, float %926, !dbg !30
  %943 = select i1 %52, float %557, float %927, !dbg !30
  %944 = select i1 %52, float %558, float %928, !dbg !30
  %945 = select i1 %53, float %559, float %929, !dbg !30
  %946 = select i1 %53, float %560, float %930, !dbg !30
  %947 = select i1 %53, float %561, float %931, !dbg !30
  %948 = select i1 %53, float %562, float %932, !dbg !30
  %949 = select i1 %53, float %563, float %933, !dbg !30
  %950 = select i1 %53, float %564, float %934, !dbg !30
  %951 = select i1 %53, float %565, float %935, !dbg !30
  %952 = select i1 %53, float %566, float %936, !dbg !30
  %953 = shl i32 %24, 8, !dbg !93
  %954 = shl i32 %25, 8, !dbg !93
  %955 = add i32 %29, %953, !dbg !94
  %956 = add i32 %29, %954, !dbg !94
  %957 = sext i32 %955 to i64, !dbg !95
  %958 = getelementptr i16, ptr addrspace(1) %5, i64 %957, !dbg !95
  %959 = sext i32 %956 to i64, !dbg !95
  %960 = getelementptr i16, ptr addrspace(1) %5, i64 %959, !dbg !95
  %961 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %937) #2, !dbg !96
  %962 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %938) #2, !dbg !96
  %963 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %939) #2, !dbg !96
  %964 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %940) #2, !dbg !96
  %965 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %941) #2, !dbg !96
  %966 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %942) #2, !dbg !96
  %967 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %943) #2, !dbg !96
  %968 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %944) #2, !dbg !96
  %969 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %945) #2, !dbg !96
  %970 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %946) #2, !dbg !96
  %971 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %947) #2, !dbg !96
  %972 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %948) #2, !dbg !96
  %973 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %949) #2, !dbg !96
  %974 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %950) #2, !dbg !96
  %975 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %951) #2, !dbg !96
  %976 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %952) #2, !dbg !96
  %977 = insertelement <2 x i16> undef, i16 %961, i64 0, !dbg !96
  %978 = insertelement <2 x i16> %977, i16 %962, i64 1, !dbg !96
  %979 = bitcast <2 x i16> %978 to i32, !dbg !96
  %980 = insertelement <2 x i16> undef, i16 %963, i64 0, !dbg !96
  %981 = insertelement <2 x i16> %980, i16 %964, i64 1, !dbg !96
  %982 = bitcast <2 x i16> %981 to i32, !dbg !96
  %983 = insertelement <2 x i16> undef, i16 %965, i64 0, !dbg !96
  %984 = insertelement <2 x i16> %983, i16 %966, i64 1, !dbg !96
  %985 = bitcast <2 x i16> %984 to i32, !dbg !96
  %986 = insertelement <2 x i16> undef, i16 %967, i64 0, !dbg !96
  %987 = insertelement <2 x i16> %986, i16 %968, i64 1, !dbg !96
  %988 = bitcast <2 x i16> %987 to i32, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %979, i32 %982, i32 %985, i32 %988, ptr addrspace(1) %958, i1 %34) #2, !dbg !96
  %989 = insertelement <2 x i16> undef, i16 %969, i64 0, !dbg !96
  %990 = insertelement <2 x i16> %989, i16 %970, i64 1, !dbg !96
  %991 = bitcast <2 x i16> %990 to i32, !dbg !96
  %992 = insertelement <2 x i16> undef, i16 %971, i64 0, !dbg !96
  %993 = insertelement <2 x i16> %992, i16 %972, i64 1, !dbg !96
  %994 = bitcast <2 x i16> %993 to i32, !dbg !96
  %995 = insertelement <2 x i16> undef, i16 %973, i64 0, !dbg !96
  %996 = insertelement <2 x i16> %995, i16 %974, i64 1, !dbg !96
  %997 = bitcast <2 x i16> %996 to i32, !dbg !96
  %998 = insertelement <2 x i16> undef, i16 %975, i64 0, !dbg !96
  %999 = insertelement <2 x i16> %998, i16 %976, i64 1, !dbg !96
  %1000 = bitcast <2 x i16> %999 to i32, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %991, i32 %994, i32 %997, i32 %1000, ptr addrspace(1) %960, i1 %34) #2, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cdie5zvzegnhg4un2jmmqtipvubnkuv44rpowbc3msybvkuuyro6.py", directory: "/tmp/torchinductor_zeus/di")
!3 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7de", linkageName: "triton__0d1d2d3d4d5d6de7de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 24, column: 28, scope: !5)
!14 = !DILocation(line: 24, column: 33, scope: !5)
!15 = !DILocation(line: 25, column: 23, scope: !5)
!16 = !DILocation(line: 26, column: 21, scope: !5)
!17 = !DILocation(line: 27, column: 20, scope: !5)
!18 = !DILocation(line: 27, column: 27, scope: !5)
!19 = !DILocation(line: 29, column: 20, scope: !5)
!20 = !DILocation(line: 37, column: 18, scope: !5)
!21 = !DILocation(line: 40, column: 19, scope: !5)
!22 = !DILocation(line: 41, column: 18, scope: !5)
!23 = !DILocation(line: 42, column: 40, scope: !5)
!24 = !DILocation(line: 42, column: 54, scope: !5)
!25 = !DILocation(line: 42, column: 36, scope: !5)
!26 = !DILocation(line: 42, column: 47, scope: !5)
!27 = !DILocation(line: 42, column: 30, scope: !5)
!28 = !DILocation(line: 42, column: 60, scope: !5)
!29 = !DILocation(line: 42, column: 118, scope: !5)
!30 = !DILocation(line: 0, scope: !5)
!31 = !DILocation(line: 47, column: 68, scope: !5)
!32 = !DILocation(line: 47, column: 61, scope: !5)
!33 = !DILocation(line: 47, column: 119, scope: !5)
!34 = !DILocation(line: 48, column: 41, scope: !5)
!35 = !DILocation(line: 48, column: 37, scope: !5)
!36 = !DILocation(line: 48, column: 31, scope: !5)
!37 = !DILocation(line: 48, column: 47, scope: !5)
!38 = !DILocation(line: 48, column: 105, scope: !5)
!39 = !DILocation(line: 49, column: 20, scope: !5)
!40 = !DILocation(line: 51, column: 20, scope: !5)
!41 = !DILocation(line: 52, column: 20, scope: !5)
!42 = !DILocation(line: 53, column: 40, scope: !5)
!43 = !DILocation(line: 53, column: 57, scope: !5)
!44 = !DILocation(line: 53, column: 31, scope: !5)
!45 = !DILocation(line: 53, column: 78, scope: !5)
!46 = !DILocation(line: 53, column: 70, scope: !5)
!47 = !DILocation(line: 53, column: 129, scope: !5)
!48 = !DILocation(line: 54, column: 46, scope: !5)
!49 = !DILocation(line: 54, column: 31, scope: !5)
!50 = !DILocation(line: 54, column: 56, scope: !5)
!51 = !DILocation(line: 54, column: 115, scope: !5)
!52 = !DILocation(line: 55, column: 20, scope: !5)
!53 = !DILocation(line: 56, column: 13, scope: !5)
!54 = !DILocation(line: 60, column: 20, scope: !5)
!55 = !DILocation(line: 61, column: 19, scope: !5)
!56 = !DILocation(line: 62, column: 20, scope: !5)
!57 = !DILocation(line: 63, column: 37, scope: !5)
!58 = !DILocation(line: 63, column: 54, scope: !5)
!59 = !DILocation(line: 63, column: 31, scope: !5)
!60 = !DILocation(line: 63, column: 67, scope: !5)
!61 = !DILocation(line: 63, column: 126, scope: !5)
!62 = !DILocation(line: 64, column: 43, scope: !5)
!63 = !DILocation(line: 64, column: 31, scope: !5)
!64 = !DILocation(line: 64, column: 53, scope: !5)
!65 = !DILocation(line: 64, column: 112, scope: !5)
!66 = !DILocation(line: 65, column: 20, scope: !5)
!67 = !DILocation(line: 69, column: 20, scope: !5)
!68 = !DILocation(line: 70, column: 20, scope: !5)
!69 = !DILocation(line: 76, column: 20, scope: !5)
!70 = !DILocation(line: 77, column: 41, scope: !5)
!71 = !DILocation(line: 77, column: 55, scope: !5)
!72 = !DILocation(line: 77, column: 37, scope: !5)
!73 = !DILocation(line: 77, column: 48, scope: !5)
!74 = !DILocation(line: 77, column: 31, scope: !5)
!75 = !DILocation(line: 77, column: 69, scope: !5)
!76 = !DILocation(line: 77, column: 61, scope: !5)
!77 = !DILocation(line: 80, column: 35, scope: !5)
!78 = !DILocation(line: 81, column: 20, scope: !5)
!79 = !DILocation(line: 84, column: 48, scope: !5)
!80 = !DILocation(line: 84, column: 31, scope: !5)
!81 = !DILocation(line: 84, column: 69, scope: !5)
!82 = !DILocation(line: 84, column: 61, scope: !5)
!83 = !DILocation(line: 84, column: 120, scope: !5)
!84 = !DILocation(line: 86, column: 40, scope: !5)
!85 = !DILocation(line: 86, column: 46, scope: !5)
!86 = !DILocation(line: 86, column: 57, scope: !5)
!87 = !DILocation(line: 86, column: 31, scope: !5)
!88 = !DILocation(line: 86, column: 70, scope: !5)
!89 = !DILocation(line: 86, column: 129, scope: !5)
!90 = !DILocation(line: 88, column: 20, scope: !5)
!91 = !DILocation(line: 91, column: 35, scope: !5)
!92 = !DILocation(line: 92, column: 35, scope: !5)
!93 = !DILocation(line: 94, column: 35, scope: !5)
!94 = !DILocation(line: 94, column: 31, scope: !5)
!95 = !DILocation(line: 94, column: 25, scope: !5)
!96 = !DILocation(line: 94, column: 48, scope: !5)
!97 = !DILocation(line: 94, column: 4, scope: !5)
