; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6de7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = and i32 %9, 31, !dbg !8
  %11 = lshr i32 %9, 5, !dbg !8
  %12 = and i32 %11, 3, !dbg !8
  %13 = lshr i32 %10, 2, !dbg !8
  %14 = shl nuw nsw i32 %12, 3, !dbg !8
  %15 = or i32 %14, %13, !dbg !8
  %16 = shl i32 %9, 2, !dbg !8
  %17 = and i32 %16, 28, !dbg !8
  %18 = shl i32 %9, 3, !dbg !9
  %19 = and i32 %18, 24, !dbg !9
  %20 = or i32 %19, 4, !dbg !9
  %21 = lshr i32 %10, 3, !dbg !9
  %22 = shl nuw nsw i32 %12, 2, !dbg !9
  %23 = or i32 %22, %21, !dbg !9
  %24 = or i32 %23, 16, !dbg !9
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %26 = shl i32 %25, 5, !dbg !11
  %27 = or i32 %26, %15, !dbg !12
  %28 = or i32 %26, %17, !dbg !12
  %29 = icmp slt i32 %27, 64, !dbg !13
  %30 = icmp slt i32 %28, 64, !dbg !13
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %32 = shl i32 %31, 5, !dbg !15
  %33 = or i32 %32, %19, !dbg !16
  %34 = or i32 %32, %20, !dbg !16
  %35 = or i32 %32, %23, !dbg !16
  %36 = or i32 %32, %24, !dbg !16
  %37 = icmp slt i32 %33, 256, !dbg !17
  %38 = icmp slt i32 %35, 256, !dbg !17
  %39 = icmp slt i32 %36, 256, !dbg !17
  %.frozen24 = freeze i32 %27
  %40 = sdiv i32 %.frozen24, 4, !dbg !18
  %41 = ashr exact i32 %28, 2, !dbg !18
  %42 = srem i32 %40, 4, !dbg !19
  %.frozen = freeze i32 %27
  %43 = sdiv i32 %.frozen, 16, !dbg !20
  %44 = sdiv i32 %28, 16, !dbg !20
  %45 = mul i32 %43, 16
  %.decomposed = sub i32 %.frozen, %45
  %46 = mul i32 %40, 4
  %.decomposed25 = sub i32 %.frozen24, %46
  %47 = icmp slt i32 %42, 2, !dbg !21
  %48 = icmp sgt i32 %33, 255, !dbg !22
  %49 = and i1 %48, %47, !dbg !23
  %50 = shl nsw i32 %.decomposed, 8, !dbg !24
  %51 = shl i32 %43, 11, !dbg !25
  %52 = add i32 %51, %50, !dbg !26
  %53 = add i32 %52, %33, !dbg !27
  %54 = sext i32 %53 to i64, !dbg !28
  %55 = getelementptr i16, ptr addrspace(1) %0, i64 %54, !dbg !28
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !29
  %61 = trunc i32 %57 to i16, !dbg !29
  %extelt.offset = lshr i32 %57, 16, !dbg !29
  %62 = trunc i32 %extelt.offset to i16, !dbg !29
  %63 = trunc i32 %58 to i16, !dbg !29
  %extelt.offset1 = lshr i32 %58, 16, !dbg !29
  %64 = trunc i32 %extelt.offset1 to i16, !dbg !29
  %65 = trunc i32 %59 to i16, !dbg !29
  %extelt.offset2 = lshr i32 %59, 16, !dbg !29
  %66 = trunc i32 %extelt.offset2 to i16, !dbg !29
  %67 = trunc i32 %60 to i16, !dbg !29
  %extelt.offset3 = lshr i32 %60, 16, !dbg !29
  %68 = trunc i32 %extelt.offset3 to i16, !dbg !29
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #2, !dbg !30
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #2, !dbg !30
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #2, !dbg !30
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #2, !dbg !30
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #2, !dbg !30
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #2, !dbg !30
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #2, !dbg !30
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #2, !dbg !30
  %77 = select i1 %49, float %69, float 0.000000e+00, !dbg !31
  %78 = select i1 %49, float %70, float 0.000000e+00, !dbg !31
  %79 = select i1 %49, float %71, float 0.000000e+00, !dbg !31
  %80 = select i1 %49, float %72, float 0.000000e+00, !dbg !31
  %81 = select i1 %49, float %73, float 0.000000e+00, !dbg !31
  %82 = select i1 %49, float %74, float 0.000000e+00, !dbg !31
  %83 = select i1 %49, float %75, float 0.000000e+00, !dbg !31
  %84 = select i1 %49, float %76, float 0.000000e+00, !dbg !31
  %85 = and i1 %37, %47, !dbg !32
  %86 = and i1 %29, %85, !dbg !33
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #2, !dbg !34
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !34
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !34
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !34
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !34
  %92 = trunc i32 %88 to i16, !dbg !34
  %extelt.offset4 = lshr i32 %88, 16, !dbg !34
  %93 = trunc i32 %extelt.offset4 to i16, !dbg !34
  %94 = trunc i32 %89 to i16, !dbg !34
  %extelt.offset5 = lshr i32 %89, 16, !dbg !34
  %95 = trunc i32 %extelt.offset5 to i16, !dbg !34
  %96 = trunc i32 %90 to i16, !dbg !34
  %extelt.offset6 = lshr i32 %90, 16, !dbg !34
  %97 = trunc i32 %extelt.offset6 to i16, !dbg !34
  %98 = trunc i32 %91 to i16, !dbg !34
  %extelt.offset7 = lshr i32 %91, 16, !dbg !34
  %99 = trunc i32 %extelt.offset7 to i16, !dbg !34
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #2, !dbg !35
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #2, !dbg !35
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #2, !dbg !35
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #2, !dbg !35
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #2, !dbg !35
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #2, !dbg !35
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #2, !dbg !35
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #2, !dbg !35
  %108 = shl nsw i32 %.decomposed25, 8, !dbg !36
  %109 = add i32 %108, %33, !dbg !37
  %110 = add i32 %108, %34, !dbg !37
  %111 = sext i32 %109 to i64, !dbg !38
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !38
  %113 = sext i32 %110 to i64, !dbg !38
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !38
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #2, !dbg !39
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !39
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !39
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !39
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !39
  %120 = bitcast i32 %116 to float, !dbg !39
  %121 = bitcast i32 %117 to float, !dbg !39
  %122 = bitcast i32 %118 to float, !dbg !39
  %123 = bitcast i32 %119 to float, !dbg !39
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #2, !dbg !39
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !39
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !39
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !39
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !39
  %129 = bitcast i32 %125 to float, !dbg !39
  %130 = bitcast i32 %126 to float, !dbg !39
  %131 = bitcast i32 %127 to float, !dbg !39
  %132 = bitcast i32 %128 to float, !dbg !39
  %133 = fmul float %100, %120, !dbg !40
  %134 = fmul float %101, %121, !dbg !40
  %135 = fmul float %102, %122, !dbg !40
  %136 = fmul float %103, %123, !dbg !40
  %137 = fmul float %104, %129, !dbg !40
  %138 = fmul float %105, %130, !dbg !40
  %139 = fmul float %106, %131, !dbg !40
  %140 = fmul float %107, %132, !dbg !40
  %141 = icmp sgt i32 %33, 127, !dbg !41
  %142 = and i1 %141, %47, !dbg !42
  %143 = add i32 %33, -128, !dbg !43
  %144 = add i32 %52, %143, !dbg !44
  %145 = sext i32 %144 to i64, !dbg !45
  %146 = getelementptr i16, ptr addrspace(1) %0, i64 %145, !dbg !45
  %147 = and i1 %37, %142, !dbg !46
  %148 = and i1 %29, %147, !dbg !47
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148) #2, !dbg !48
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !48
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !48
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !48
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !48
  %154 = trunc i32 %150 to i16, !dbg !48
  %extelt.offset8 = lshr i32 %150, 16, !dbg !48
  %155 = trunc i32 %extelt.offset8 to i16, !dbg !48
  %156 = trunc i32 %151 to i16, !dbg !48
  %extelt.offset9 = lshr i32 %151, 16, !dbg !48
  %157 = trunc i32 %extelt.offset9 to i16, !dbg !48
  %158 = trunc i32 %152 to i16, !dbg !48
  %extelt.offset10 = lshr i32 %152, 16, !dbg !48
  %159 = trunc i32 %extelt.offset10 to i16, !dbg !48
  %160 = trunc i32 %153 to i16, !dbg !48
  %extelt.offset11 = lshr i32 %153, 16, !dbg !48
  %161 = trunc i32 %extelt.offset11 to i16, !dbg !48
  %162 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %154) #2, !dbg !49
  %163 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #2, !dbg !49
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %156) #2, !dbg !49
  %165 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %157) #2, !dbg !49
  %166 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %158) #2, !dbg !49
  %167 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %159) #2, !dbg !49
  %168 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %160) #2, !dbg !49
  %169 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %161) #2, !dbg !49
  %170 = add i32 %143, %108, !dbg !50
  %171 = add i32 %110, -128, !dbg !50
  %172 = sext i32 %170 to i64, !dbg !51
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !51
  %174 = sext i32 %171 to i64, !dbg !51
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %174, !dbg !51
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %173, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148) #2, !dbg !52
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !52
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !52
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !52
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !52
  %181 = bitcast i32 %177 to float, !dbg !52
  %182 = bitcast i32 %178 to float, !dbg !52
  %183 = bitcast i32 %179 to float, !dbg !52
  %184 = bitcast i32 %180 to float, !dbg !52
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %175, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148) #2, !dbg !52
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !52
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !52
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !52
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !52
  %190 = bitcast i32 %186 to float, !dbg !52
  %191 = bitcast i32 %187 to float, !dbg !52
  %192 = bitcast i32 %188 to float, !dbg !52
  %193 = bitcast i32 %189 to float, !dbg !52
  %194 = fmul float %162, %181, !dbg !53
  %195 = fmul float %163, %182, !dbg !53
  %196 = fmul float %164, %183, !dbg !53
  %197 = fmul float %165, %184, !dbg !53
  %198 = fmul float %166, %190, !dbg !53
  %199 = fmul float %167, %191, !dbg !53
  %200 = fmul float %168, %192, !dbg !53
  %201 = fmul float %169, %193, !dbg !53
  %202 = fsub float 0.000000e+00, %194, !dbg !54
  %203 = fsub float 0.000000e+00, %195, !dbg !54
  %204 = fsub float 0.000000e+00, %196, !dbg !54
  %205 = fsub float 0.000000e+00, %197, !dbg !54
  %206 = fsub float 0.000000e+00, %198, !dbg !54
  %207 = fsub float 0.000000e+00, %199, !dbg !54
  %208 = fsub float 0.000000e+00, %200, !dbg !54
  %209 = fsub float 0.000000e+00, %201, !dbg !54
  %210 = select i1 %142, float %202, float 0.000000e+00, !dbg !31
  %211 = select i1 %142, float %203, float 0.000000e+00, !dbg !31
  %212 = select i1 %142, float %204, float 0.000000e+00, !dbg !31
  %213 = select i1 %142, float %205, float 0.000000e+00, !dbg !31
  %214 = select i1 %142, float %206, float 0.000000e+00, !dbg !31
  %215 = select i1 %142, float %207, float 0.000000e+00, !dbg !31
  %216 = select i1 %142, float %208, float 0.000000e+00, !dbg !31
  %217 = select i1 %142, float %209, float 0.000000e+00, !dbg !31
  %218 = fadd float %133, %210, !dbg !55
  %219 = fadd float %134, %211, !dbg !55
  %220 = fadd float %135, %212, !dbg !55
  %221 = fadd float %136, %213, !dbg !55
  %222 = fadd float %137, %214, !dbg !55
  %223 = fadd float %138, %215, !dbg !55
  %224 = fadd float %139, %216, !dbg !55
  %225 = fadd float %140, %217, !dbg !55
  %226 = icmp slt i32 %33, 128, !dbg !56
  %227 = and i1 %226, %47, !dbg !57
  %228 = add i32 %33, 128, !dbg !58
  %229 = add i32 %52, %228, !dbg !59
  %230 = sext i32 %229 to i64, !dbg !60
  %231 = getelementptr i16, ptr addrspace(1) %0, i64 %230, !dbg !60
  %232 = and i1 %29, %227, !dbg !61
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %231, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232) #2, !dbg !62
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !62
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !62
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !62
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !62
  %238 = trunc i32 %234 to i16, !dbg !62
  %extelt.offset12 = lshr i32 %234, 16, !dbg !62
  %239 = trunc i32 %extelt.offset12 to i16, !dbg !62
  %240 = trunc i32 %235 to i16, !dbg !62
  %extelt.offset13 = lshr i32 %235, 16, !dbg !62
  %241 = trunc i32 %extelt.offset13 to i16, !dbg !62
  %242 = trunc i32 %236 to i16, !dbg !62
  %extelt.offset14 = lshr i32 %236, 16, !dbg !62
  %243 = trunc i32 %extelt.offset14 to i16, !dbg !62
  %244 = trunc i32 %237 to i16, !dbg !62
  %extelt.offset15 = lshr i32 %237, 16, !dbg !62
  %245 = trunc i32 %extelt.offset15 to i16, !dbg !62
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %238) #2, !dbg !63
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %239) #2, !dbg !63
  %248 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %240) #2, !dbg !63
  %249 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %241) #2, !dbg !63
  %250 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %242) #2, !dbg !63
  %251 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %243) #2, !dbg !63
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %244) #2, !dbg !63
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %245) #2, !dbg !63
  %254 = add i32 %228, %108, !dbg !64
  %255 = add i32 %110, 128, !dbg !64
  %256 = sext i32 %254 to i64, !dbg !65
  %257 = getelementptr float, ptr addrspace(1) %2, i64 %256, !dbg !65
  %258 = sext i32 %255 to i64, !dbg !65
  %259 = getelementptr float, ptr addrspace(1) %2, i64 %258, !dbg !65
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %257, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232) #2, !dbg !66
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !66
  %262 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !66
  %263 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !66
  %264 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !66
  %265 = bitcast i32 %261 to float, !dbg !66
  %266 = bitcast i32 %262 to float, !dbg !66
  %267 = bitcast i32 %263 to float, !dbg !66
  %268 = bitcast i32 %264 to float, !dbg !66
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %259, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232, i32 0, i1 %232) #2, !dbg !66
  %270 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !66
  %271 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !66
  %272 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !66
  %273 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !66
  %274 = bitcast i32 %270 to float, !dbg !66
  %275 = bitcast i32 %271 to float, !dbg !66
  %276 = bitcast i32 %272 to float, !dbg !66
  %277 = bitcast i32 %273 to float, !dbg !66
  %278 = fmul float %246, %265, !dbg !67
  %279 = fmul float %247, %266, !dbg !67
  %280 = fmul float %248, %267, !dbg !67
  %281 = fmul float %249, %268, !dbg !67
  %282 = fmul float %250, %274, !dbg !67
  %283 = fmul float %251, %275, !dbg !67
  %284 = fmul float %252, %276, !dbg !67
  %285 = fmul float %253, %277, !dbg !67
  %286 = select i1 %227, float %278, float 0.000000e+00, !dbg !31
  %287 = select i1 %227, float %279, float 0.000000e+00, !dbg !31
  %288 = select i1 %227, float %280, float 0.000000e+00, !dbg !31
  %289 = select i1 %227, float %281, float 0.000000e+00, !dbg !31
  %290 = select i1 %227, float %282, float 0.000000e+00, !dbg !31
  %291 = select i1 %227, float %283, float 0.000000e+00, !dbg !31
  %292 = select i1 %227, float %284, float 0.000000e+00, !dbg !31
  %293 = select i1 %227, float %285, float 0.000000e+00, !dbg !31
  %294 = fadd float %218, %286, !dbg !68
  %295 = fadd float %219, %287, !dbg !68
  %296 = fadd float %220, %288, !dbg !68
  %297 = fadd float %221, %289, !dbg !68
  %298 = fadd float %222, %290, !dbg !68
  %299 = fadd float %223, %291, !dbg !68
  %300 = fadd float %224, %292, !dbg !68
  %301 = fadd float %225, %293, !dbg !68
  %302 = fadd float %77, %294, !dbg !69
  %303 = fadd float %78, %295, !dbg !69
  %304 = fadd float %79, %296, !dbg !69
  %305 = fadd float %80, %297, !dbg !69
  %306 = fadd float %81, %298, !dbg !69
  %307 = fadd float %82, %299, !dbg !69
  %308 = fadd float %83, %300, !dbg !69
  %309 = fadd float %84, %301, !dbg !69
  %310 = icmp eq i32 %42, 2, !dbg !70
  %311 = and i32 %41, -2147483645, !dbg !70
  %312 = icmp eq i32 %311, 2, !dbg !70
  %313 = shl i32 %35, 2, !dbg !71
  %314 = shl i32 %36, 2, !dbg !71
  %315 = shl i32 %44, 10, !dbg !72
  %316 = add i32 %313, %315, !dbg !73
  %317 = add i32 %314, %315, !dbg !73
  %318 = sext i32 %316 to i64, !dbg !74
  %319 = getelementptr float, ptr addrspace(1) %3, i64 %318, !dbg !74
  %320 = sext i32 %317 to i64, !dbg !74
  %321 = getelementptr float, ptr addrspace(1) %3, i64 %320, !dbg !74
  %322 = and i1 %38, %312, !dbg !75
  %323 = and i1 %39, %312, !dbg !75
  %324 = and i1 %30, %322, !dbg !76
  %325 = and i1 %30, %323, !dbg !76
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %319, i1 %324, i32 0, i1 %324, i32 0, i1 %324, i32 0, i1 %324, i32 0, i1 %324) #2, !dbg !77
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !77
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !77
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !77
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !77
  %331 = bitcast i32 %327 to float, !dbg !77
  %332 = bitcast i32 %328 to float, !dbg !77
  %333 = bitcast i32 %329 to float, !dbg !77
  %334 = bitcast i32 %330 to float, !dbg !77
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %321, i1 %325, i32 0, i1 %325, i32 0, i1 %325, i32 0, i1 %325, i32 0, i1 %325) #2, !dbg !77
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !77
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !77
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !77
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !77
  %340 = bitcast i32 %336 to float, !dbg !77
  %341 = bitcast i32 %337 to float, !dbg !77
  %342 = bitcast i32 %338 to float, !dbg !77
  %343 = bitcast i32 %339 to float, !dbg !77
  %344 = select i1 %312, float %331, float 0.000000e+00, !dbg !78
  %345 = select i1 %312, float %332, float 0.000000e+00, !dbg !78
  %346 = select i1 %312, float %333, float 0.000000e+00, !dbg !78
  %347 = select i1 %312, float %334, float 0.000000e+00, !dbg !78
  %348 = select i1 %312, float %340, float 0.000000e+00, !dbg !78
  %349 = select i1 %312, float %341, float 0.000000e+00, !dbg !78
  %350 = select i1 %312, float %342, float 0.000000e+00, !dbg !78
  %351 = select i1 %312, float %343, float 0.000000e+00, !dbg !78
  %352 = mul nuw nsw i32 %17, 33, !dbg !78
  %353 = add nuw nsw i32 %23, %352, !dbg !78
  %354 = zext nneg i32 %353 to i64, !dbg !78
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i64 %354, !dbg !78
  %356 = insertelement <1 x float> undef, float %344, i64 0, !dbg !78
  store <1 x float> %356, ptr addrspace(3) %355, align 4, !dbg !78
  %357 = add nuw nsw i32 %352, 33, !dbg !78
  %358 = add nuw nsw i32 %357, %23, !dbg !78
  %359 = zext nneg i32 %358 to i64, !dbg !78
  %360 = getelementptr float, ptr addrspace(3) @global_smem, i64 %359, !dbg !78
  %361 = insertelement <1 x float> undef, float %345, i64 0, !dbg !78
  store <1 x float> %361, ptr addrspace(3) %360, align 4, !dbg !78
  %362 = add nuw nsw i32 %352, 66, !dbg !78
  %363 = add nuw nsw i32 %362, %23, !dbg !78
  %364 = zext nneg i32 %363 to i64, !dbg !78
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i64 %364, !dbg !78
  %366 = insertelement <1 x float> undef, float %346, i64 0, !dbg !78
  store <1 x float> %366, ptr addrspace(3) %365, align 4, !dbg !78
  %367 = add nuw nsw i32 %352, 99, !dbg !78
  %368 = add nuw nsw i32 %367, %23, !dbg !78
  %369 = zext nneg i32 %368 to i64, !dbg !78
  %370 = getelementptr float, ptr addrspace(3) @global_smem, i64 %369, !dbg !78
  %371 = insertelement <1 x float> undef, float %347, i64 0, !dbg !78
  store <1 x float> %371, ptr addrspace(3) %370, align 4, !dbg !78
  %372 = add nuw nsw i32 %24, %352, !dbg !78
  %373 = zext nneg i32 %372 to i64, !dbg !78
  %374 = getelementptr float, ptr addrspace(3) @global_smem, i64 %373, !dbg !78
  %375 = insertelement <1 x float> undef, float %348, i64 0, !dbg !78
  store <1 x float> %375, ptr addrspace(3) %374, align 4, !dbg !78
  %376 = add nuw nsw i32 %24, %357, !dbg !78
  %377 = zext nneg i32 %376 to i64, !dbg !78
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i64 %377, !dbg !78
  %379 = insertelement <1 x float> undef, float %349, i64 0, !dbg !78
  store <1 x float> %379, ptr addrspace(3) %378, align 4, !dbg !78
  %380 = add nuw nsw i32 %24, %362, !dbg !78
  %381 = zext nneg i32 %380 to i64, !dbg !78
  %382 = getelementptr float, ptr addrspace(3) @global_smem, i64 %381, !dbg !78
  %383 = insertelement <1 x float> undef, float %350, i64 0, !dbg !78
  store <1 x float> %383, ptr addrspace(3) %382, align 4, !dbg !78
  %384 = add nuw nsw i32 %24, %367, !dbg !78
  %385 = zext nneg i32 %384 to i64, !dbg !78
  %386 = getelementptr float, ptr addrspace(3) @global_smem, i64 %385, !dbg !78
  %387 = insertelement <1 x float> undef, float %351, i64 0, !dbg !78
  store <1 x float> %387, ptr addrspace(3) %386, align 4, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %388 = mul nuw nsw i32 %15, 33, !dbg !78
  %389 = add nuw nsw i32 %388, %19, !dbg !78
  %390 = zext nneg i32 %389 to i64, !dbg !78
  %391 = getelementptr float, ptr addrspace(3) @global_smem, i64 %390, !dbg !78
  %392 = load float, ptr addrspace(3) %391, align 4, !dbg !78
  %393 = or i32 %19, 1, !dbg !78
  %394 = add nuw nsw i32 %393, %388, !dbg !78
  %395 = zext nneg i32 %394 to i64, !dbg !78
  %396 = getelementptr float, ptr addrspace(3) @global_smem, i64 %395, !dbg !78
  %397 = load float, ptr addrspace(3) %396, align 4, !dbg !78
  %398 = or i32 %19, 2, !dbg !78
  %399 = add nuw nsw i32 %398, %388, !dbg !78
  %400 = zext nneg i32 %399 to i64, !dbg !78
  %401 = getelementptr float, ptr addrspace(3) @global_smem, i64 %400, !dbg !78
  %402 = load float, ptr addrspace(3) %401, align 4, !dbg !78
  %403 = or i32 %19, 3, !dbg !78
  %404 = add nuw nsw i32 %403, %388, !dbg !78
  %405 = zext nneg i32 %404 to i64, !dbg !78
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i64 %405, !dbg !78
  %407 = load float, ptr addrspace(3) %406, align 4, !dbg !78
  %408 = add nuw nsw i32 %388, %20, !dbg !78
  %409 = zext nneg i32 %408 to i64, !dbg !78
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i64 %409, !dbg !78
  %411 = load float, ptr addrspace(3) %410, align 4, !dbg !78
  %412 = or i32 %19, 5, !dbg !78
  %413 = add nuw nsw i32 %412, %388, !dbg !78
  %414 = zext nneg i32 %413 to i64, !dbg !78
  %415 = getelementptr float, ptr addrspace(3) @global_smem, i64 %414, !dbg !78
  %416 = load float, ptr addrspace(3) %415, align 4, !dbg !78
  %417 = or i32 %19, 6, !dbg !78
  %418 = add nuw nsw i32 %417, %388, !dbg !78
  %419 = zext nneg i32 %418 to i64, !dbg !78
  %420 = getelementptr float, ptr addrspace(3) @global_smem, i64 %419, !dbg !78
  %421 = load float, ptr addrspace(3) %420, align 4, !dbg !78
  %422 = or i32 %19, 7, !dbg !78
  %423 = add nuw nsw i32 %422, %388, !dbg !78
  %424 = zext nneg i32 %423 to i64, !dbg !78
  %425 = getelementptr float, ptr addrspace(3) @global_smem, i64 %424, !dbg !78
  %426 = load float, ptr addrspace(3) %425, align 4, !dbg !78
  %427 = icmp sgt i32 %42, 2, !dbg !79
  %428 = add i32 %109, %51, !dbg !80
  %429 = sext i32 %428 to i64, !dbg !81
  %430 = getelementptr i16, ptr addrspace(1) %4, i64 %429, !dbg !81
  %431 = and i1 %37, %427, !dbg !82
  %432 = and i1 %29, %431, !dbg !83
  %433 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %430, i1 %432, i32 0, i1 %432, i32 0, i1 %432, i32 0, i1 %432, i32 0, i1 %432) #2, !dbg !84
  %434 = extractvalue { i32, i32, i32, i32 } %433, 0, !dbg !84
  %435 = extractvalue { i32, i32, i32, i32 } %433, 1, !dbg !84
  %436 = extractvalue { i32, i32, i32, i32 } %433, 2, !dbg !84
  %437 = extractvalue { i32, i32, i32, i32 } %433, 3, !dbg !84
  %438 = trunc i32 %434 to i16, !dbg !84
  %extelt.offset16 = lshr i32 %434, 16, !dbg !84
  %439 = trunc i32 %extelt.offset16 to i16, !dbg !84
  %440 = trunc i32 %435 to i16, !dbg !84
  %extelt.offset17 = lshr i32 %435, 16, !dbg !84
  %441 = trunc i32 %extelt.offset17 to i16, !dbg !84
  %442 = trunc i32 %436 to i16, !dbg !84
  %extelt.offset18 = lshr i32 %436, 16, !dbg !84
  %443 = trunc i32 %extelt.offset18 to i16, !dbg !84
  %444 = trunc i32 %437 to i16, !dbg !84
  %extelt.offset19 = lshr i32 %437, 16, !dbg !84
  %445 = trunc i32 %extelt.offset19 to i16, !dbg !84
  %446 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #2, !dbg !85
  %447 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %439) #2, !dbg !85
  %448 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %440) #2, !dbg !85
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %441) #2, !dbg !85
  %450 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #2, !dbg !85
  %451 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #2, !dbg !85
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #2, !dbg !85
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #2, !dbg !85
  %454 = add i32 %109, 1024, !dbg !86
  %455 = add i32 %454, %51, !dbg !87
  %456 = sext i32 %455 to i64, !dbg !88
  %457 = getelementptr i16, ptr addrspace(1) %4, i64 %456, !dbg !88
  %458 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %457, i1 %432, i32 0, i1 %432, i32 0, i1 %432, i32 0, i1 %432, i32 0, i1 %432) #2, !dbg !89
  %459 = extractvalue { i32, i32, i32, i32 } %458, 0, !dbg !89
  %460 = extractvalue { i32, i32, i32, i32 } %458, 1, !dbg !89
  %461 = extractvalue { i32, i32, i32, i32 } %458, 2, !dbg !89
  %462 = extractvalue { i32, i32, i32, i32 } %458, 3, !dbg !89
  %463 = trunc i32 %459 to i16, !dbg !89
  %extelt.offset20 = lshr i32 %459, 16, !dbg !89
  %464 = trunc i32 %extelt.offset20 to i16, !dbg !89
  %465 = trunc i32 %460 to i16, !dbg !89
  %extelt.offset21 = lshr i32 %460, 16, !dbg !89
  %466 = trunc i32 %extelt.offset21 to i16, !dbg !89
  %467 = trunc i32 %461 to i16, !dbg !89
  %extelt.offset22 = lshr i32 %461, 16, !dbg !89
  %468 = trunc i32 %extelt.offset22 to i16, !dbg !89
  %469 = trunc i32 %462 to i16, !dbg !89
  %extelt.offset23 = lshr i32 %462, 16, !dbg !89
  %470 = trunc i32 %extelt.offset23 to i16, !dbg !89
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #2, !dbg !90
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #2, !dbg !90
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %465) #2, !dbg !90
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %466) #2, !dbg !90
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %467) #2, !dbg !90
  %476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %468) #2, !dbg !90
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %469) #2, !dbg !90
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %470) #2, !dbg !90
  %479 = fadd float %446, %471, !dbg !91
  %480 = fadd float %447, %472, !dbg !91
  %481 = fadd float %448, %473, !dbg !91
  %482 = fadd float %449, %474, !dbg !91
  %483 = fadd float %450, %475, !dbg !91
  %484 = fadd float %451, %476, !dbg !91
  %485 = fadd float %452, %477, !dbg !91
  %486 = fadd float %453, %478, !dbg !91
  %487 = select i1 %427, float %479, float 0.000000e+00, !dbg !92
  %488 = select i1 %427, float %480, float 0.000000e+00, !dbg !92
  %489 = select i1 %427, float %481, float 0.000000e+00, !dbg !92
  %490 = select i1 %427, float %482, float 0.000000e+00, !dbg !92
  %491 = select i1 %427, float %483, float 0.000000e+00, !dbg !92
  %492 = select i1 %427, float %484, float 0.000000e+00, !dbg !92
  %493 = select i1 %427, float %485, float 0.000000e+00, !dbg !92
  %494 = select i1 %427, float %486, float 0.000000e+00, !dbg !92
  %495 = select i1 %310, float %392, float %487, !dbg !93
  %496 = select i1 %310, float %397, float %488, !dbg !93
  %497 = select i1 %310, float %402, float %489, !dbg !93
  %498 = select i1 %310, float %407, float %490, !dbg !93
  %499 = select i1 %310, float %411, float %491, !dbg !93
  %500 = select i1 %310, float %416, float %492, !dbg !93
  %501 = select i1 %310, float %421, float %493, !dbg !93
  %502 = select i1 %310, float %426, float %494, !dbg !93
  %503 = select i1 %47, float %302, float %495, !dbg !31
  %504 = select i1 %47, float %303, float %496, !dbg !31
  %505 = select i1 %47, float %304, float %497, !dbg !31
  %506 = select i1 %47, float %305, float %498, !dbg !31
  %507 = select i1 %47, float %306, float %499, !dbg !31
  %508 = select i1 %47, float %307, float %500, !dbg !31
  %509 = select i1 %47, float %308, float %501, !dbg !31
  %510 = select i1 %47, float %309, float %502, !dbg !31
  %511 = shl i32 %27, 8, !dbg !94
  %512 = add i32 %33, %511, !dbg !95
  %513 = sext i32 %512 to i64, !dbg !96
  %514 = getelementptr i16, ptr addrspace(1) %5, i64 %513, !dbg !96
  %515 = and i1 %29, %37, !dbg !97
  %516 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #2, !dbg !98
  %517 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %504) #2, !dbg !98
  %518 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #2, !dbg !98
  %519 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #2, !dbg !98
  %520 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %507) #2, !dbg !98
  %521 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %508) #2, !dbg !98
  %522 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %509) #2, !dbg !98
  %523 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %510) #2, !dbg !98
  %524 = insertelement <2 x i16> undef, i16 %516, i64 0, !dbg !98
  %525 = insertelement <2 x i16> %524, i16 %517, i64 1, !dbg !98
  %526 = bitcast <2 x i16> %525 to i32, !dbg !98
  %527 = insertelement <2 x i16> undef, i16 %518, i64 0, !dbg !98
  %528 = insertelement <2 x i16> %527, i16 %519, i64 1, !dbg !98
  %529 = bitcast <2 x i16> %528 to i32, !dbg !98
  %530 = insertelement <2 x i16> undef, i16 %520, i64 0, !dbg !98
  %531 = insertelement <2 x i16> %530, i16 %521, i64 1, !dbg !98
  %532 = bitcast <2 x i16> %531 to i32, !dbg !98
  %533 = insertelement <2 x i16> undef, i16 %522, i64 0, !dbg !98
  %534 = insertelement <2 x i16> %533, i16 %523, i64 1, !dbg !98
  %535 = bitcast <2 x i16> %534 to i32, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %526, i32 %529, i32 %532, i32 %535, ptr addrspace(1) %514, i1 %515) #2, !dbg !98
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cfc2gcnsfqxu2s5i5dia3tq4evgi5rrmhipe2sd2ombmmpot2rzk.py", directory: "/tmp/torchinductor_zeus/fc")
!3 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7de", linkageName: "triton__0d1d2d3d4d5d6de7de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 23, column: 21, scope: !5)
!14 = !DILocation(line: 24, column: 28, scope: !5)
!15 = !DILocation(line: 24, column: 33, scope: !5)
!16 = !DILocation(line: 25, column: 23, scope: !5)
!17 = !DILocation(line: 26, column: 21, scope: !5)
!18 = !DILocation(line: 27, column: 20, scope: !5)
!19 = !DILocation(line: 27, column: 25, scope: !5)
!20 = !DILocation(line: 29, column: 20, scope: !5)
!21 = !DILocation(line: 37, column: 18, scope: !5)
!22 = !DILocation(line: 40, column: 19, scope: !5)
!23 = !DILocation(line: 41, column: 18, scope: !5)
!24 = !DILocation(line: 42, column: 40, scope: !5)
!25 = !DILocation(line: 42, column: 52, scope: !5)
!26 = !DILocation(line: 42, column: 36, scope: !5)
!27 = !DILocation(line: 42, column: 47, scope: !5)
!28 = !DILocation(line: 42, column: 30, scope: !5)
!29 = !DILocation(line: 42, column: 58, scope: !5)
!30 = !DILocation(line: 42, column: 124, scope: !5)
!31 = !DILocation(line: 0, scope: !5)
!32 = !DILocation(line: 47, column: 66, scope: !5)
!33 = !DILocation(line: 47, column: 74, scope: !5)
!34 = !DILocation(line: 47, column: 59, scope: !5)
!35 = !DILocation(line: 47, column: 125, scope: !5)
!36 = !DILocation(line: 49, column: 41, scope: !5)
!37 = !DILocation(line: 49, column: 37, scope: !5)
!38 = !DILocation(line: 49, column: 31, scope: !5)
!39 = !DILocation(line: 49, column: 47, scope: !5)
!40 = !DILocation(line: 50, column: 20, scope: !5)
!41 = !DILocation(line: 53, column: 20, scope: !5)
!42 = !DILocation(line: 54, column: 20, scope: !5)
!43 = !DILocation(line: 55, column: 40, scope: !5)
!44 = !DILocation(line: 55, column: 57, scope: !5)
!45 = !DILocation(line: 55, column: 31, scope: !5)
!46 = !DILocation(line: 55, column: 76, scope: !5)
!47 = !DILocation(line: 55, column: 84, scope: !5)
!48 = !DILocation(line: 55, column: 68, scope: !5)
!49 = !DILocation(line: 55, column: 135, scope: !5)
!50 = !DILocation(line: 57, column: 46, scope: !5)
!51 = !DILocation(line: 57, column: 31, scope: !5)
!52 = !DILocation(line: 57, column: 56, scope: !5)
!53 = !DILocation(line: 58, column: 20, scope: !5)
!54 = !DILocation(line: 60, column: 13, scope: !5)
!55 = !DILocation(line: 64, column: 20, scope: !5)
!56 = !DILocation(line: 65, column: 19, scope: !5)
!57 = !DILocation(line: 66, column: 20, scope: !5)
!58 = !DILocation(line: 67, column: 37, scope: !5)
!59 = !DILocation(line: 67, column: 54, scope: !5)
!60 = !DILocation(line: 67, column: 31, scope: !5)
!61 = !DILocation(line: 67, column: 81, scope: !5)
!62 = !DILocation(line: 67, column: 65, scope: !5)
!63 = !DILocation(line: 67, column: 132, scope: !5)
!64 = !DILocation(line: 69, column: 43, scope: !5)
!65 = !DILocation(line: 69, column: 31, scope: !5)
!66 = !DILocation(line: 69, column: 53, scope: !5)
!67 = !DILocation(line: 70, column: 20, scope: !5)
!68 = !DILocation(line: 75, column: 20, scope: !5)
!69 = !DILocation(line: 76, column: 20, scope: !5)
!70 = !DILocation(line: 82, column: 20, scope: !5)
!71 = !DILocation(line: 83, column: 39, scope: !5)
!72 = !DILocation(line: 83, column: 51, scope: !5)
!73 = !DILocation(line: 83, column: 46, scope: !5)
!74 = !DILocation(line: 83, column: 31, scope: !5)
!75 = !DILocation(line: 83, column: 65, scope: !5)
!76 = !DILocation(line: 83, column: 73, scope: !5)
!77 = !DILocation(line: 83, column: 57, scope: !5)
!78 = !DILocation(line: 86, column: 35, scope: !5)
!79 = !DILocation(line: 87, column: 20, scope: !5)
!80 = !DILocation(line: 90, column: 48, scope: !5)
!81 = !DILocation(line: 90, column: 31, scope: !5)
!82 = !DILocation(line: 90, column: 67, scope: !5)
!83 = !DILocation(line: 90, column: 75, scope: !5)
!84 = !DILocation(line: 90, column: 59, scope: !5)
!85 = !DILocation(line: 90, column: 126, scope: !5)
!86 = !DILocation(line: 92, column: 44, scope: !5)
!87 = !DILocation(line: 92, column: 55, scope: !5)
!88 = !DILocation(line: 92, column: 31, scope: !5)
!89 = !DILocation(line: 92, column: 66, scope: !5)
!90 = !DILocation(line: 92, column: 133, scope: !5)
!91 = !DILocation(line: 94, column: 20, scope: !5)
!92 = !DILocation(line: 97, column: 35, scope: !5)
!93 = !DILocation(line: 98, column: 35, scope: !5)
!94 = !DILocation(line: 100, column: 35, scope: !5)
!95 = !DILocation(line: 100, column: 31, scope: !5)
!96 = !DILocation(line: 100, column: 25, scope: !5)
!97 = !DILocation(line: 100, column: 56, scope: !5)
!98 = !DILocation(line: 100, column: 48, scope: !5)
!99 = !DILocation(line: 100, column: 4, scope: !5)
