module {
  tt.func public @triton__0d1d2de3de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c8192_i32 = arith.constant 8192 : i32
    %c-1_i32 = arith.constant -1 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %cst_0 = arith.constant dense<true> : tensor<1x2048xi1>
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_1 = arith.constant dense<-4096> : tensor<1x2048xi64>
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_3 = arith.constant dense<1> : tensor<1x2048xi64>
    %cst_4 = arith.constant dense<5.000000e+01> : tensor<1x2048xf32>
    %cst_5 = arith.constant dense<6.250000e-02> : tensor<1x2048xf32>
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %cst_7 = arith.constant dense<8192> : tensor<1x2048xi32>
    %cst_8 = arith.constant dense<0xFF800000> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %3 = arith.remsi %0, %c8192_i32 : i32
    %4 = arith.muli %0, %c8192_i32 : i32
    %5 = tt.splat %4 : (i32) -> tensor<1x2048xi32>
    %6 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %7 = arith.muli %3, %c-1_i32 : i32
    %8 = tt.splat %7 : (i32) -> tensor<1x2048xi32>
    %9 = scf.for %arg4 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg5 = %cst_8) -> (tensor<1x2048xf32>)  : i32 {
      %25 = tt.splat %arg4 : (i32) -> tensor<1x2048xi32>
      %26 = arith.addi %25, %2 : tensor<1x2048xi32>
      %27 = arith.cmpi slt, %26, %cst_7 : tensor<1x2048xi32>
      %28 = arith.addi %26, %5 : tensor<1x2048xi32>
      %29 = tt.addptr %6, %28 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %30 = tt.load %29, %27, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %31 = arith.extf %30 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %32 = arith.mulf %31, %cst_5 : tensor<1x2048xf32>
      %33 = arith.divf %32, %cst_4 : tensor<1x2048xf32>
      %34 = tt.extern_elementwise %33 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<1x2048xf32>) -> tensor<1x2048xf32>
      %35 = arith.mulf %34, %cst_4 : tensor<1x2048xf32>
      %36 = arith.addi %26, %8 : tensor<1x2048xi32>
      %37 = arith.extsi %36 : tensor<1x2048xi32> to tensor<1x2048xi64>
      %38 = arith.cmpi sge, %37, %cst_3 : tensor<1x2048xi64>
      %39 = arith.select %38, %cst_2, %cst_6 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %40 = arith.cmpf une, %39, %cst_6 : tensor<1x2048xf32>
      %41 = arith.select %40, %cst_8, %39 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %42 = arith.cmpi sle, %37, %cst_1 : tensor<1x2048xi64>
      %43 = arith.select %42, %cst_2, %cst_6 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %44 = arith.cmpf une, %43, %cst_6 : tensor<1x2048xf32>
      %45 = arith.select %44, %cst_8, %43 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %46 = arith.addf %41, %45 : tensor<1x2048xf32>
      %47 = arith.addf %35, %46 : tensor<1x2048xf32>
      %48 = arith.cmpf ogt, %arg5, %47 : tensor<1x2048xf32>
      %49 = arith.cmpf une, %arg5, %arg5 : tensor<1x2048xf32>
      %50 = arith.ori %48, %49 : tensor<1x2048xi1>
      %51 = arith.xori %50, %cst_0 : tensor<1x2048xi1>
      %52 = arith.andi %27, %51 : tensor<1x2048xi1>
      %53 = arith.select %52, %47, %arg5 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %54 = arith.truncf %47 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %29, %54, %27 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
      scf.yield %53 : tensor<1x2048xf32>
    }
    %10 = "tt.reduce"(%9) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %25 = arith.cmpf ogt, %arg4, %arg5 : f32
      %26 = arith.cmpf une, %arg4, %arg4 : f32
      %27 = arith.ori %25, %26 : i1
      %28 = arith.select %27, %arg4, %arg5 : f32
      tt.reduce.return %28 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %11 = tt.expand_dims %10 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %12 = arith.muli %0, %c8192_i32 : i32
    %13 = tt.splat %12 : (i32) -> tensor<1x2048xi32>
    %14 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %15 = tt.broadcast %11 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %16 = scf.for %arg4 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg5 = %cst_6) -> (tensor<1x2048xf32>)  : i32 {
      %25 = tt.splat %arg4 : (i32) -> tensor<1x2048xi32>
      %26 = arith.addi %25, %2 : tensor<1x2048xi32>
      %27 = arith.cmpi slt, %26, %cst_7 : tensor<1x2048xi32>
      %28 = arith.addi %26, %13 : tensor<1x2048xi32>
      %29 = tt.addptr %14, %28 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %30 = tt.load %29, %27, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %31 = arith.extf %30 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %32 = arith.subf %31, %15 : tensor<1x2048xf32>
      %33 = math.exp %32 : tensor<1x2048xf32>
      %34 = arith.addf %arg5, %33 : tensor<1x2048xf32>
      %35 = arith.select %27, %34, %arg5 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %35 : tensor<1x2048xf32>
    }
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %25 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %25 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %18 = tt.expand_dims %17 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %19 = arith.muli %0, %c8192_i32 : i32
    %20 = tt.splat %19 : (i32) -> tensor<1x2048xi32>
    %21 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %22 = tt.broadcast %11 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %23 = tt.broadcast %18 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %24 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg4 = %c0_i32 to %c8192_i32 step %c2048_i32  : i32 {
      %25 = tt.splat %arg4 : (i32) -> tensor<1x2048xi32>
      %26 = arith.addi %25, %2 : tensor<1x2048xi32>
      %27 = arith.cmpi slt, %26, %cst_7 : tensor<1x2048xi32>
      %28 = arith.addi %26, %20 : tensor<1x2048xi32>
      %29 = tt.addptr %21, %28 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %30 = tt.load %29, %27, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %31 = arith.extf %30 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %32 = arith.subf %31, %22 : tensor<1x2048xf32>
      %33 = math.exp %32 : tensor<1x2048xf32>
      %34 = arith.divf %33, %23 : tensor<1x2048xf32>
      %35 = tt.addptr %24, %28 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %36 = arith.truncf %34 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %35, %36, %27 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
