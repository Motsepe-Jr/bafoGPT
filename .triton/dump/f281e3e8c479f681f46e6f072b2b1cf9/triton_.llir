; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5de6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 5, !dbg !10
  %urem = shl i32 %8, 3, !dbg !10
  %10 = and i32 %urem, 2040, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %12 = mul i32 %11, 3584, !dbg !12
  %13 = add i32 %10, %12, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr i16, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %21 = trunc i32 %17 to i16, !dbg !15
  %extelt.offset10 = lshr i32 %17, 16, !dbg !15
  %22 = trunc i32 %extelt.offset10 to i16, !dbg !15
  %23 = trunc i32 %18 to i16, !dbg !15
  %extelt.offset11 = lshr i32 %18, 16, !dbg !15
  %24 = trunc i32 %extelt.offset11 to i16, !dbg !15
  %25 = trunc i32 %19 to i16, !dbg !15
  %extelt.offset12 = lshr i32 %19, 16, !dbg !15
  %26 = trunc i32 %extelt.offset12 to i16, !dbg !15
  %27 = trunc i32 %20 to i16, !dbg !15
  %extelt.offset13 = lshr i32 %20, 16, !dbg !15
  %28 = trunc i32 %extelt.offset13 to i16, !dbg !15
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #6, !dbg !16
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #6, !dbg !16
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #6, !dbg !16
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !16
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !16
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !16
  %37 = fmul float %29, %29, !dbg !17
  %38 = fmul float %30, %30, !dbg !17
  %39 = fmul float %31, %31, !dbg !17
  %40 = fmul float %32, %32, !dbg !17
  %41 = fmul float %33, %33, !dbg !17
  %42 = fmul float %34, %34, !dbg !17
  %43 = fmul float %35, %35, !dbg !17
  %44 = fmul float %36, %36, !dbg !17
  %45 = or i32 %10, 2048, !dbg !18
  %46 = icmp ult i32 %45, 3584, !dbg !19
  %47 = add i32 %45, %12, !dbg !13
  %48 = sext i32 %47 to i64, !dbg !14
  %49 = getelementptr i16, ptr addrspace(1) %0, i64 %48, !dbg !14
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #6, !dbg !15
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !15
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !15
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !15
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !15
  %55 = trunc i32 %51 to i16, !dbg !15
  %extelt.offset10.1 = lshr i32 %51, 16, !dbg !15
  %56 = trunc i32 %extelt.offset10.1 to i16, !dbg !15
  %57 = trunc i32 %52 to i16, !dbg !15
  %extelt.offset11.1 = lshr i32 %52, 16, !dbg !15
  %58 = trunc i32 %extelt.offset11.1 to i16, !dbg !15
  %59 = trunc i32 %53 to i16, !dbg !15
  %extelt.offset12.1 = lshr i32 %53, 16, !dbg !15
  %60 = trunc i32 %extelt.offset12.1 to i16, !dbg !15
  %61 = trunc i32 %54 to i16, !dbg !15
  %extelt.offset13.1 = lshr i32 %54, 16, !dbg !15
  %62 = trunc i32 %extelt.offset13.1 to i16, !dbg !15
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #6, !dbg !16
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #6, !dbg !16
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #6, !dbg !16
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #6, !dbg !16
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #6, !dbg !16
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #6, !dbg !16
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #6, !dbg !16
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #6, !dbg !16
  %71 = fmul float %63, %63, !dbg !17
  %72 = fmul float %64, %64, !dbg !17
  %73 = fmul float %65, %65, !dbg !17
  %74 = fmul float %66, %66, !dbg !17
  %75 = fmul float %67, %67, !dbg !17
  %76 = fmul float %68, %68, !dbg !17
  %77 = fmul float %69, %69, !dbg !17
  %78 = fmul float %70, %70, !dbg !17
  %79 = select i1 %46, float %71, float -0.000000e+00, !dbg !20
  %80 = fadd float %37, %79, !dbg !20
  %81 = select i1 %46, float %72, float -0.000000e+00, !dbg !20
  %82 = fadd float %38, %81, !dbg !20
  %83 = select i1 %46, float %73, float -0.000000e+00, !dbg !20
  %84 = fadd float %39, %83, !dbg !20
  %85 = select i1 %46, float %74, float -0.000000e+00, !dbg !20
  %86 = fadd float %40, %85, !dbg !20
  %87 = select i1 %46, float %75, float -0.000000e+00, !dbg !20
  %88 = fadd float %41, %87, !dbg !20
  %89 = select i1 %46, float %76, float -0.000000e+00, !dbg !20
  %90 = fadd float %42, %89, !dbg !20
  %91 = select i1 %46, float %77, float -0.000000e+00, !dbg !20
  %92 = fadd float %43, %91, !dbg !20
  %93 = select i1 %46, float %78, float -0.000000e+00, !dbg !20
  %94 = fadd float %44, %93, !dbg !20
  %95 = and i32 %8, 31, !dbg !10
  %96 = and i32 %9, 7, !dbg !10
  %97 = or i32 %10, 4, !dbg !10
  %98 = fadd float %80, %82, !dbg !21
  %99 = fadd float %84, %98, !dbg !21
  %100 = fadd float %86, %99, !dbg !21
  %101 = fadd float %88, %100, !dbg !21
  %102 = fadd float %90, %101, !dbg !21
  %103 = fadd float %92, %102, !dbg !21
  %104 = fadd float %94, %103, !dbg !21
  %105 = bitcast float %104 to i32, !dbg !27
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 16, i32 31), !dbg !27
  %107 = bitcast i32 %106 to float, !dbg !27
  %108 = fadd float %104, %107, !dbg !21
  %109 = bitcast float %108 to i32, !dbg !27
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 8, i32 31), !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = fadd float %108, %111, !dbg !21
  %113 = bitcast float %112 to i32, !dbg !27
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 4, i32 31), !dbg !27
  %115 = bitcast i32 %114 to float, !dbg !27
  %116 = fadd float %112, %115, !dbg !21
  %117 = bitcast float %116 to i32, !dbg !27
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = fadd float %116, %119, !dbg !21
  %121 = bitcast float %120 to i32, !dbg !27
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = fadd float %120, %123, !dbg !21
  %125 = icmp eq i32 %95, 0, !dbg !27
  %126 = zext nneg i32 %96 to i64, !dbg !27
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i64 %126, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, float %124, i1 %125) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %128 = icmp slt i32 %8, 8, !dbg !27
  %129 = sext i32 %8 to i64, !dbg !27
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %129, !dbg !27
  %131 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %130, i1 %128) #6, !dbg !27
  %132 = bitcast float %131 to i32, !dbg !27
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !27
  %134 = bitcast i32 %133 to float, !dbg !27
  %135 = fadd float %131, %134, !dbg !21
  %136 = bitcast float %135 to i32, !dbg !27
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !27
  %138 = bitcast i32 %137 to float, !dbg !27
  %139 = fadd float %135, %138, !dbg !21
  %140 = bitcast float %139 to i32, !dbg !27
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !27
  %142 = bitcast i32 %141 to float, !dbg !27
  %143 = fadd float %139, %142, !dbg !21
  %144 = and i32 %8, 7, !dbg !27
  %145 = icmp eq i32 %144, 0, !dbg !27
  %146 = and i1 %128, %145, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, float %143, i1 %146) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %147 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 3.584000e+03) #6, !dbg !29
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 3.584000e+03) #6, !dbg !29
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 3.584000e+03) #6, !dbg !29
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 3.584000e+03) #6, !dbg !29
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 3.584000e+03) #6, !dbg !29
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 3.584000e+03) #6, !dbg !29
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 3.584000e+03) #6, !dbg !29
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 3.584000e+03) #6, !dbg !29
  %156 = fadd float %148, 0x3EE4F8B580000000, !dbg !30
  br label %157, !dbg !31

157:                                              ; preds = %7, %__nv_rsqrtf.exit61
  %158 = phi i1 [ true, %7 ], [ false, %__nv_rsqrtf.exit61 ]
  %159 = phi i32 [ 0, %7 ], [ 2048, %__nv_rsqrtf.exit61 ]
  %160 = phi <8 x float> [ zeroinitializer, %7 ], [ %264, %__nv_rsqrtf.exit61 ]
  %161 = or i32 %159, %10, !dbg !32
  %162 = or i32 %159, %97, !dbg !32
  %163 = icmp ult i32 %161, 3584, !dbg !33
  %164 = add i32 %161, %12, !dbg !34
  %165 = add i32 %162, %12, !dbg !34
  %166 = sext i32 %164 to i64, !dbg !35
  %167 = getelementptr i16, ptr addrspace(1) %0, i64 %166, !dbg !35
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %167, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163) #6, !dbg !36
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !36
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !36
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !36
  %173 = trunc i32 %169 to i16, !dbg !36
  %extelt.offset6 = lshr i32 %169, 16, !dbg !36
  %174 = trunc i32 %extelt.offset6 to i16, !dbg !36
  %175 = trunc i32 %170 to i16, !dbg !36
  %extelt.offset7 = lshr i32 %170, 16, !dbg !36
  %176 = trunc i32 %extelt.offset7 to i16, !dbg !36
  %177 = trunc i32 %171 to i16, !dbg !36
  %extelt.offset8 = lshr i32 %171, 16, !dbg !36
  %178 = trunc i32 %extelt.offset8 to i16, !dbg !36
  %179 = trunc i32 %172 to i16, !dbg !36
  %extelt.offset9 = lshr i32 %172, 16, !dbg !36
  %180 = trunc i32 %extelt.offset9 to i16, !dbg !36
  %181 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %173) #6, !dbg !37
  %182 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %174) #6, !dbg !37
  %183 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %175) #6, !dbg !37
  %184 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %176) #6, !dbg !37
  %185 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %177) #6, !dbg !37
  %186 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %178) #6, !dbg !37
  %187 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %179) #6, !dbg !37
  %188 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %180) #6, !dbg !37
  %189 = zext nneg i32 %161 to i64, !dbg !38
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %189, !dbg !38
  %191 = zext nneg i32 %162 to i64, !dbg !38
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %191, !dbg !38
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %190, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163) #6, !dbg !39
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !39
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !39
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !39
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !39
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %192, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163) #6, !dbg !39
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !39
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !39
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !39
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !39
  %203 = insertelement <8 x i32> poison, i32 %194, i64 0, !dbg !39
  %204 = insertelement <8 x i32> %203, i32 %195, i64 1, !dbg !39
  %205 = insertelement <8 x i32> %204, i32 %196, i64 2, !dbg !39
  %206 = insertelement <8 x i32> %205, i32 %197, i64 3, !dbg !39
  %207 = insertelement <8 x i32> %206, i32 %199, i64 4, !dbg !39
  %208 = insertelement <8 x i32> %207, i32 %200, i64 5, !dbg !39
  %209 = insertelement <8 x i32> %208, i32 %201, i64 6, !dbg !39
  %210 = insertelement <8 x i32> %209, i32 %202, i64 7, !dbg !39
  %211 = bitcast <8 x i32> %210 to <8 x float>, !dbg !39
  %212 = getelementptr float, ptr addrspace(1) %2, i64 %166, !dbg !40
  %213 = sext i32 %165 to i64, !dbg !40
  %214 = getelementptr float, ptr addrspace(1) %2, i64 %213, !dbg !40
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %212, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163) #6, !dbg !41
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !41
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !41
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !41
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !41
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %214, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163) #6, !dbg !41
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !41
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !41
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !41
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !41
  %225 = insertelement <8 x i32> poison, i32 %216, i64 0, !dbg !41
  %226 = insertelement <8 x i32> %225, i32 %217, i64 1, !dbg !41
  %227 = insertelement <8 x i32> %226, i32 %218, i64 2, !dbg !41
  %228 = insertelement <8 x i32> %227, i32 %219, i64 3, !dbg !41
  %229 = insertelement <8 x i32> %228, i32 %221, i64 4, !dbg !41
  %230 = insertelement <8 x i32> %229, i32 %222, i64 5, !dbg !41
  %231 = insertelement <8 x i32> %230, i32 %223, i64 6, !dbg !41
  %232 = insertelement <8 x i32> %231, i32 %224, i64 7, !dbg !41
  %233 = bitcast <8 x i32> %232 to <8 x float>, !dbg !41
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %.not.i59 = icmp eq i32 %234, 0, !dbg !42
  br i1 %.not.i59, label %237, label %235, !dbg !42

235:                                              ; preds = %157
  %236 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %156), !dbg !42
  br label %__nv_rsqrtf.exit61, !dbg !42

237:                                              ; preds = %157
  %238 = tail call float @llvm.nvvm.rsqrt.approx.f(float %156), !dbg !42
  br label %__nv_rsqrtf.exit61, !dbg !42

__nv_rsqrtf.exit61:                               ; preds = %235, %237
  %.0.i60 = phi float [ %236, %235 ], [ %238, %237 ], !dbg !42
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %246 = insertelement <8 x float> poison, float %181, i64 0, !dbg !43
  %247 = insertelement <8 x float> %246, float %182, i64 1, !dbg !43
  %248 = insertelement <8 x float> %247, float %183, i64 2, !dbg !43
  %249 = insertelement <8 x float> %248, float %184, i64 3, !dbg !43
  %250 = insertelement <8 x float> %249, float %185, i64 4, !dbg !43
  %251 = insertelement <8 x float> %250, float %186, i64 5, !dbg !43
  %252 = insertelement <8 x float> %251, float %187, i64 6, !dbg !43
  %253 = insertelement <8 x float> %252, float %188, i64 7, !dbg !43
  %254 = insertelement <8 x float> poison, float %.0.i60, i64 0, !dbg !43
  %255 = shufflevector <8 x float> %254, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !43
  %256 = fmul <8 x float> %253, %255, !dbg !43
  %257 = fadd <8 x float> %211, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !44
  %258 = fmul <8 x float> %257, %256, !dbg !45
  %259 = fadd <8 x float> %258, %233, !dbg !46
  %260 = fmul <8 x float> %259, %259, !dbg !47
  %261 = insertelement <8 x i1> poison, i1 %163, i64 0, !dbg !48
  %262 = shufflevector <8 x i1> %261, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !48
  %263 = select <8 x i1> %262, <8 x float> %260, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !48
  %264 = fadd <8 x float> %160, %263, !dbg !48
  br i1 %158, label %157, label %265, !dbg !31

265:                                              ; preds = %__nv_rsqrtf.exit61
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %shift = shufflevector <8 x float> %264, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %266 = fadd <8 x float> %264, %shift, !dbg !51
  %shift113 = shufflevector <8 x float> %264, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %267 = fadd <8 x float> %shift113, %266, !dbg !51
  %shift114 = shufflevector <8 x float> %264, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %268 = fadd <8 x float> %shift114, %267, !dbg !51
  %shift115 = shufflevector <8 x float> %264, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %269 = fadd <8 x float> %shift115, %268, !dbg !51
  %shift116 = shufflevector <8 x float> %264, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %270 = fadd <8 x float> %shift116, %269, !dbg !51
  %shift117 = shufflevector <8 x float> %264, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %271 = fadd <8 x float> %shift117, %270, !dbg !51
  %shift118 = shufflevector <8 x float> %264, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %272 = fadd <8 x float> %shift118, %271, !dbg !51
  %273 = extractelement <8 x float> %272, i64 0, !dbg !51
  %274 = bitcast float %273 to i32, !dbg !49
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 16, i32 31), !dbg !49
  %276 = bitcast i32 %275 to float, !dbg !49
  %277 = fadd float %273, %276, !dbg !51
  %278 = bitcast float %277 to i32, !dbg !49
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 8, i32 31), !dbg !49
  %280 = bitcast i32 %279 to float, !dbg !49
  %281 = fadd float %277, %280, !dbg !51
  %282 = bitcast float %281 to i32, !dbg !49
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 4, i32 31), !dbg !49
  %284 = bitcast i32 %283 to float, !dbg !49
  %285 = fadd float %281, %284, !dbg !51
  %286 = bitcast float %285 to i32, !dbg !49
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 2, i32 31), !dbg !49
  %288 = bitcast i32 %287 to float, !dbg !49
  %289 = fadd float %285, %288, !dbg !51
  %290 = bitcast float %289 to i32, !dbg !49
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 1, i32 31), !dbg !49
  %292 = bitcast i32 %291 to float, !dbg !49
  %293 = fadd float %289, %292, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, float %293, i1 %125) #6, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %294 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %130, i1 %128) #6, !dbg !49
  %295 = bitcast float %294 to i32, !dbg !49
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 4, i32 31), !dbg !49
  %297 = bitcast i32 %296 to float, !dbg !49
  %298 = fadd float %294, %297, !dbg !51
  %299 = bitcast float %298 to i32, !dbg !49
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 2, i32 31), !dbg !49
  %301 = bitcast i32 %300 to float, !dbg !49
  %302 = fadd float %298, %301, !dbg !51
  %303 = bitcast float %302 to i32, !dbg !49
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !49
  %305 = bitcast i32 %304 to float, !dbg !49
  %306 = fadd float %302, %305, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, float %306, i1 %146) #6, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %307 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !49
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 3.584000e+03) #6, !dbg !54
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 3.584000e+03) #6, !dbg !54
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 3.584000e+03) #6, !dbg !54
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 3.584000e+03) #6, !dbg !54
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 3.584000e+03) #6, !dbg !54
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 3.584000e+03) #6, !dbg !54
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 3.584000e+03) #6, !dbg !54
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 3.584000e+03) #6, !dbg !54
  %316 = fadd float %308, 0x3EE4F8B580000000, !dbg !55
  br label %317, !dbg !56

317:                                              ; preds = %265, %__nv_rsqrtf.exit37
  %318 = phi i1 [ true, %265 ], [ false, %__nv_rsqrtf.exit37 ]
  %319 = phi i32 [ 0, %265 ], [ 2048, %__nv_rsqrtf.exit37 ]
  %320 = or i32 %319, %10, !dbg !57
  %321 = or i32 %319, %97, !dbg !57
  %322 = icmp ult i32 %320, 3584, !dbg !58
  %323 = add i32 %320, %12, !dbg !59
  %324 = add i32 %321, %12, !dbg !59
  %325 = sext i32 %323 to i64, !dbg !60
  %326 = getelementptr i16, ptr addrspace(1) %0, i64 %325, !dbg !60
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %326, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #6, !dbg !61
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !61
  %329 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !61
  %330 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !61
  %331 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !61
  %332 = trunc i32 %328 to i16, !dbg !61
  %extelt.offset = lshr i32 %328, 16, !dbg !61
  %333 = trunc i32 %extelt.offset to i16, !dbg !61
  %334 = trunc i32 %329 to i16, !dbg !61
  %extelt.offset3 = lshr i32 %329, 16, !dbg !61
  %335 = trunc i32 %extelt.offset3 to i16, !dbg !61
  %336 = trunc i32 %330 to i16, !dbg !61
  %extelt.offset4 = lshr i32 %330, 16, !dbg !61
  %337 = trunc i32 %extelt.offset4 to i16, !dbg !61
  %338 = trunc i32 %331 to i16, !dbg !61
  %extelt.offset5 = lshr i32 %331, 16, !dbg !61
  %339 = trunc i32 %extelt.offset5 to i16, !dbg !61
  %340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %332) #6, !dbg !62
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %333) #6, !dbg !62
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %334) #6, !dbg !62
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %335) #6, !dbg !62
  %344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %336) #6, !dbg !62
  %345 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #6, !dbg !62
  %346 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #6, !dbg !62
  %347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #6, !dbg !62
  %348 = zext nneg i32 %320 to i64, !dbg !63
  %349 = getelementptr float, ptr addrspace(1) %1, i64 %348, !dbg !63
  %350 = zext nneg i32 %321 to i64, !dbg !63
  %351 = getelementptr float, ptr addrspace(1) %1, i64 %350, !dbg !63
  %352 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %349, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #6, !dbg !64
  %353 = extractvalue { i32, i32, i32, i32 } %352, 0, !dbg !64
  %354 = extractvalue { i32, i32, i32, i32 } %352, 1, !dbg !64
  %355 = extractvalue { i32, i32, i32, i32 } %352, 2, !dbg !64
  %356 = extractvalue { i32, i32, i32, i32 } %352, 3, !dbg !64
  %357 = bitcast i32 %353 to float, !dbg !64
  %358 = bitcast i32 %354 to float, !dbg !64
  %359 = bitcast i32 %355 to float, !dbg !64
  %360 = bitcast i32 %356 to float, !dbg !64
  %361 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %351, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #6, !dbg !64
  %362 = extractvalue { i32, i32, i32, i32 } %361, 0, !dbg !64
  %363 = extractvalue { i32, i32, i32, i32 } %361, 1, !dbg !64
  %364 = extractvalue { i32, i32, i32, i32 } %361, 2, !dbg !64
  %365 = extractvalue { i32, i32, i32, i32 } %361, 3, !dbg !64
  %366 = bitcast i32 %362 to float, !dbg !64
  %367 = bitcast i32 %363 to float, !dbg !64
  %368 = bitcast i32 %364 to float, !dbg !64
  %369 = bitcast i32 %365 to float, !dbg !64
  %370 = getelementptr float, ptr addrspace(1) %2, i64 %325, !dbg !65
  %371 = sext i32 %324 to i64, !dbg !65
  %372 = getelementptr float, ptr addrspace(1) %2, i64 %371, !dbg !65
  %373 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %370, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #6, !dbg !66
  %374 = extractvalue { i32, i32, i32, i32 } %373, 0, !dbg !66
  %375 = extractvalue { i32, i32, i32, i32 } %373, 1, !dbg !66
  %376 = extractvalue { i32, i32, i32, i32 } %373, 2, !dbg !66
  %377 = extractvalue { i32, i32, i32, i32 } %373, 3, !dbg !66
  %378 = bitcast i32 %374 to float, !dbg !66
  %379 = bitcast i32 %375 to float, !dbg !66
  %380 = bitcast i32 %376 to float, !dbg !66
  %381 = bitcast i32 %377 to float, !dbg !66
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %372, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #6, !dbg !66
  %383 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !66
  %384 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !66
  %385 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !66
  %386 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !66
  %387 = bitcast i32 %383 to float, !dbg !66
  %388 = bitcast i32 %384 to float, !dbg !66
  %389 = bitcast i32 %385 to float, !dbg !66
  %390 = bitcast i32 %386 to float, !dbg !66
  %391 = getelementptr float, ptr addrspace(1) %3, i64 %348, !dbg !67
  %392 = getelementptr float, ptr addrspace(1) %3, i64 %350, !dbg !67
  %393 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %391, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #6, !dbg !68
  %394 = extractvalue { i32, i32, i32, i32 } %393, 0, !dbg !68
  %395 = extractvalue { i32, i32, i32, i32 } %393, 1, !dbg !68
  %396 = extractvalue { i32, i32, i32, i32 } %393, 2, !dbg !68
  %397 = extractvalue { i32, i32, i32, i32 } %393, 3, !dbg !68
  %398 = bitcast i32 %394 to float, !dbg !68
  %399 = bitcast i32 %395 to float, !dbg !68
  %400 = bitcast i32 %396 to float, !dbg !68
  %401 = bitcast i32 %397 to float, !dbg !68
  %402 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %392, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #6, !dbg !68
  %403 = extractvalue { i32, i32, i32, i32 } %402, 0, !dbg !68
  %404 = extractvalue { i32, i32, i32, i32 } %402, 1, !dbg !68
  %405 = extractvalue { i32, i32, i32, i32 } %402, 2, !dbg !68
  %406 = extractvalue { i32, i32, i32, i32 } %402, 3, !dbg !68
  %407 = bitcast i32 %403 to float, !dbg !68
  %408 = bitcast i32 %404 to float, !dbg !68
  %409 = bitcast i32 %405 to float, !dbg !68
  %410 = bitcast i32 %406 to float, !dbg !68
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %.not.i = icmp eq i32 %411, 0, !dbg !69
  br i1 %.not.i, label %414, label %412, !dbg !69

412:                                              ; preds = %317
  %413 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %156), !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !69

414:                                              ; preds = %317
  %415 = tail call float @llvm.nvvm.rsqrt.approx.f(float %156), !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !69

__nv_rsqrtf.exit:                                 ; preds = %412, %414
  %.0.i = phi float [ %413, %412 ], [ %415, %414 ], !dbg !69
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %423 = fmul float %340, %.0.i, !dbg !70
  %424 = fmul float %341, %.0.i, !dbg !70
  %425 = fmul float %342, %.0.i, !dbg !70
  %426 = fmul float %343, %.0.i, !dbg !70
  %427 = fmul float %344, %.0.i, !dbg !70
  %428 = fmul float %345, %.0.i, !dbg !70
  %429 = fmul float %346, %.0.i, !dbg !70
  %430 = fmul float %347, %.0.i, !dbg !70
  %431 = fadd float %357, 1.000000e+00, !dbg !71
  %432 = fadd float %358, 1.000000e+00, !dbg !71
  %433 = fadd float %359, 1.000000e+00, !dbg !71
  %434 = fadd float %360, 1.000000e+00, !dbg !71
  %435 = fadd float %366, 1.000000e+00, !dbg !71
  %436 = fadd float %367, 1.000000e+00, !dbg !71
  %437 = fadd float %368, 1.000000e+00, !dbg !71
  %438 = fadd float %369, 1.000000e+00, !dbg !71
  %439 = fmul float %431, %423, !dbg !72
  %440 = fmul float %432, %424, !dbg !72
  %441 = fmul float %433, %425, !dbg !72
  %442 = fmul float %434, %426, !dbg !72
  %443 = fmul float %435, %427, !dbg !72
  %444 = fmul float %436, %428, !dbg !72
  %445 = fmul float %437, %429, !dbg !72
  %446 = fmul float %438, %430, !dbg !72
  %447 = fadd float %439, %378, !dbg !73
  %448 = fadd float %440, %379, !dbg !73
  %449 = fadd float %441, %380, !dbg !73
  %450 = fadd float %442, %381, !dbg !73
  %451 = fadd float %443, %387, !dbg !73
  %452 = fadd float %444, %388, !dbg !73
  %453 = fadd float %445, %389, !dbg !73
  %454 = fadd float %446, %390, !dbg !73
  %455 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %.not.i35 = icmp eq i32 %455, 0, !dbg !74
  br i1 %.not.i35, label %458, label %456, !dbg !74

456:                                              ; preds = %__nv_rsqrtf.exit
  %457 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %316), !dbg !74
  br label %__nv_rsqrtf.exit37, !dbg !74

458:                                              ; preds = %__nv_rsqrtf.exit
  %459 = tail call float @llvm.nvvm.rsqrt.approx.f(float %316), !dbg !74
  br label %__nv_rsqrtf.exit37, !dbg !74

__nv_rsqrtf.exit37:                               ; preds = %456, %458
  %.0.i36 = phi float [ %457, %456 ], [ %459, %458 ], !dbg !74
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %467 = fmul float %447, %.0.i36, !dbg !75
  %468 = fmul float %448, %.0.i36, !dbg !75
  %469 = fmul float %449, %.0.i36, !dbg !75
  %470 = fmul float %450, %.0.i36, !dbg !75
  %471 = fmul float %451, %.0.i36, !dbg !75
  %472 = fmul float %452, %.0.i36, !dbg !75
  %473 = fmul float %453, %.0.i36, !dbg !75
  %474 = fmul float %454, %.0.i36, !dbg !75
  %475 = fadd float %398, 1.000000e+00, !dbg !76
  %476 = fadd float %399, 1.000000e+00, !dbg !76
  %477 = fadd float %400, 1.000000e+00, !dbg !76
  %478 = fadd float %401, 1.000000e+00, !dbg !76
  %479 = fadd float %407, 1.000000e+00, !dbg !76
  %480 = fadd float %408, 1.000000e+00, !dbg !76
  %481 = fadd float %409, 1.000000e+00, !dbg !76
  %482 = fadd float %410, 1.000000e+00, !dbg !76
  %483 = fmul float %475, %467, !dbg !77
  %484 = fmul float %476, %468, !dbg !77
  %485 = fmul float %477, %469, !dbg !77
  %486 = fmul float %478, %470, !dbg !77
  %487 = fmul float %479, %471, !dbg !77
  %488 = fmul float %480, %472, !dbg !77
  %489 = fmul float %481, %473, !dbg !77
  %490 = fmul float %482, %474, !dbg !77
  %491 = getelementptr i16, ptr addrspace(1) %4, i64 %325, !dbg !78
  %492 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %483) #6, !dbg !79
  %493 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %484) #6, !dbg !79
  %494 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %485) #6, !dbg !79
  %495 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %486) #6, !dbg !79
  %496 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %487) #6, !dbg !79
  %497 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %488) #6, !dbg !79
  %498 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %489) #6, !dbg !79
  %499 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %490) #6, !dbg !79
  %500 = insertelement <2 x i16> undef, i16 %492, i64 0, !dbg !79
  %501 = insertelement <2 x i16> %500, i16 %493, i64 1, !dbg !79
  %502 = bitcast <2 x i16> %501 to i32, !dbg !79
  %503 = insertelement <2 x i16> undef, i16 %494, i64 0, !dbg !79
  %504 = insertelement <2 x i16> %503, i16 %495, i64 1, !dbg !79
  %505 = bitcast <2 x i16> %504 to i32, !dbg !79
  %506 = insertelement <2 x i16> undef, i16 %496, i64 0, !dbg !79
  %507 = insertelement <2 x i16> %506, i16 %497, i64 1, !dbg !79
  %508 = bitcast <2 x i16> %507 to i32, !dbg !79
  %509 = insertelement <2 x i16> undef, i16 %498, i64 0, !dbg !79
  %510 = insertelement <2 x i16> %509, i16 %499, i64 1, !dbg !79
  %511 = bitcast <2 x i16> %510 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %502, i32 %505, i32 %508, i32 %511, ptr addrspace(1) %491, i1 %322) #6, !dbg !79
  br i1 %318, label %317, label %512, !dbg !56

512:                                              ; preds = %__nv_rsqrtf.exit37
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cp3t6tmj53bteacrgfavufrz3jbcdmmnywlalihstlzcic4d4pvn.py", directory: "/tmp/torchinductor_zeus/p3")
!4 = !{ptr @triton__0d1d2d3d4d5de6de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5de6de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6de", linkageName: "triton__0d1d2d3d4d5de6de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 48, column: 22, scope: !7)
!30 = !DILocation(line: 50, column: 23, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 27, scope: !7)
!33 = !DILocation(line: 41, column: 25, scope: !7)
!34 = !DILocation(line: 43, column: 40, scope: !7)
!35 = !DILocation(line: 43, column: 34, scope: !7)
!36 = !DILocation(line: 43, column: 51, scope: !7)
!37 = !DILocation(line: 43, column: 102, scope: !7)
!38 = !DILocation(line: 44, column: 35, scope: !7)
!39 = !DILocation(line: 44, column: 40, scope: !7)
!40 = !DILocation(line: 45, column: 35, scope: !7)
!41 = !DILocation(line: 45, column: 52, scope: !7)
!42 = !DILocation(line: 51, column: 30, scope: !7)
!43 = !DILocation(line: 52, column: 23, scope: !7)
!44 = !DILocation(line: 54, column: 24, scope: !7)
!45 = !DILocation(line: 55, column: 24, scope: !7)
!46 = !DILocation(line: 58, column: 24, scope: !7)
!47 = !DILocation(line: 59, column: 24, scope: !7)
!48 = !DILocation(line: 62, column: 40, scope: !7)
!49 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !50)
!50 = !DILocation(line: 63, column: 27, scope: !24)
!51 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !52)
!52 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !53)
!53 = !DILocation(line: 63, column: 27, scope: !22)
!54 = !DILocation(line: 85, column: 24, scope: !7)
!55 = !DILocation(line: 86, column: 24, scope: !7)
!56 = !DILocation(line: 64, column: 36, scope: !7)
!57 = !DILocation(line: 65, column: 27, scope: !7)
!58 = !DILocation(line: 66, column: 25, scope: !7)
!59 = !DILocation(line: 68, column: 41, scope: !7)
!60 = !DILocation(line: 68, column: 35, scope: !7)
!61 = !DILocation(line: 68, column: 52, scope: !7)
!62 = !DILocation(line: 68, column: 104, scope: !7)
!63 = !DILocation(line: 69, column: 35, scope: !7)
!64 = !DILocation(line: 69, column: 40, scope: !7)
!65 = !DILocation(line: 70, column: 35, scope: !7)
!66 = !DILocation(line: 70, column: 52, scope: !7)
!67 = !DILocation(line: 71, column: 35, scope: !7)
!68 = !DILocation(line: 71, column: 40, scope: !7)
!69 = !DILocation(line: 77, column: 30, scope: !7)
!70 = !DILocation(line: 78, column: 24, scope: !7)
!71 = !DILocation(line: 80, column: 24, scope: !7)
!72 = !DILocation(line: 81, column: 24, scope: !7)
!73 = !DILocation(line: 84, column: 24, scope: !7)
!74 = !DILocation(line: 87, column: 30, scope: !7)
!75 = !DILocation(line: 88, column: 24, scope: !7)
!76 = !DILocation(line: 89, column: 24, scope: !7)
!77 = !DILocation(line: 90, column: 24, scope: !7)
!78 = !DILocation(line: 92, column: 29, scope: !7)
!79 = !DILocation(line: 92, column: 53, scope: !7)
!80 = !DILocation(line: 64, column: 4, scope: !7)
