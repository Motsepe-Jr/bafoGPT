#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [8, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7d89de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg8: i32, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x2048xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<1x2048xi32, #blocked1>
    %cst_1 = arith.constant dense<2304> : tensor<1x1xi64, #blocked>
    %cst_2 = arith.constant dense<0> : tensor<1x1xi64, #blocked>
    %cst_3 = arith.constant dense<288256> : tensor<1x1xi64, #blocked>
    %cst_4 = arith.constant dense<288256> : tensor<1x1xi64, #blocked2>
    %cst_5 = arith.constant dense<0> : tensor<1x1xi64, #blocked2>
    %c0_i32 = arith.constant 0 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %c4_i32 = arith.constant 4 : i32
    %cst_6 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32, #blocked>
    %cst_7 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_8 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked>
    %cst_9 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_11 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c4_i32 : i32
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %5 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x2048xi32, #blocked1>
    %6 = arith.muli %0, %c2304_i32 : i32
    %7 = tt.splat %6 : (i32) -> tensor<1x2048xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %9 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked>
    %10 = scf.for %arg10 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg11 = %cst_10) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %50 = tt.splat %arg10 : (i32) -> tensor<1x2048xi32, #blocked>
      %51 = arith.addi %50, %4 : tensor<1x2048xi32, #blocked>
      %52 = arith.cmpi slt, %51, %cst : tensor<1x2048xi32, #blocked>
      %53 = arith.addi %51, %7 : tensor<1x2048xi32, #blocked>
      %54 = tt.addptr %8, %53 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %55 = arith.andi %52, %9 : tensor<1x2048xi1, #blocked>
      %56 = tt.load %54, %55, %cst_11 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %57 = arith.extf %56 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %58 = arith.mulf %57, %57 : tensor<1x2048xf32, #blocked>
      %59 = arith.addf %arg11, %58 : tensor<1x2048xf32, #blocked>
      %60 = arith.select %55, %59, %arg11 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %60 : tensor<1x2048xf32, #blocked>
    }
    %11 = "tt.reduce"(%10) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32, %arg11: f32):
      %50 = arith.addf %arg10, %arg11 : f32
      tt.reduce.return %50 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %12 = tt.expand_dims %11 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %13 = tt.addptr %arg2, %0 : !tt.ptr<i64, 1>, i32
    %14 = tt.splat %13 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked>
    %15 = tt.splat %13 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked2>
    %16 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked>
    %17 = tt.splat %1 : (i1) -> tensor<1x1xi1, #blocked2>
    %18 = tt.load %14, %16 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked>
    %19 = tt.load %15, %17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked2>
    %20 = tt.splat %6 : (i32) -> tensor<1x2048xi32, #blocked1>
    %21 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked1>
    %22 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %23 = arith.divf %12, %cst_9 : tensor<1x1xf32, #blocked>
    %24 = arith.addf %23, %cst_8 : tensor<1x1xf32, #blocked>
    %25 = arith.addi %18, %cst_3 : tensor<1x1xi64, #blocked>
    %26 = arith.addi %19, %cst_4 : tensor<1x1xi64, #blocked2>
    %27 = arith.cmpi slt, %18, %cst_2 : tensor<1x1xi64, #blocked>
    %28 = arith.cmpi slt, %19, %cst_5 : tensor<1x1xi64, #blocked2>
    %29 = arith.select %27, %25, %18 : tensor<1x1xi1, #blocked>, tensor<1x1xi64, #blocked>
    %30 = arith.select %28, %26, %19 : tensor<1x1xi1, #blocked2>, tensor<1x1xi64, #blocked2>
    %31 = arith.cmpi sge, %30, %cst_5 : tensor<1x1xi64, #blocked2>
    %32 = arith.cmpi slt, %30, %cst_4 : tensor<1x1xi64, #blocked2>
    %33 = arith.andi %31, %32 : tensor<1x1xi1, #blocked2>
    %34 = arith.cmpi sge, %0, %c4_i32 : i32
    %35 = tt.splat %34 : (i1) -> tensor<1x1xi1, #blocked2>
    %36 = arith.ori %33, %35 : tensor<1x1xi1, #blocked2>
    %37 = arith.muli %29, %cst_1 : tensor<1x1xi64, #blocked>
    %38 = tt.broadcast %37 : (tensor<1x1xi64, #blocked>) -> tensor<1x2048xi64, #blocked>
    %39 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %40 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>
    %41 = scf.for %arg10 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg11 = %cst_10) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %50 = tt.splat %arg10 : (i32) -> tensor<1x2048xi32, #blocked>
      %51 = tt.splat %arg10 : (i32) -> tensor<1x2048xi32, #blocked1>
      %52 = arith.addi %50, %4 : tensor<1x2048xi32, #blocked>
      %53 = arith.addi %51, %5 : tensor<1x2048xi32, #blocked1>
      %54 = arith.cmpi slt, %52, %cst : tensor<1x2048xi32, #blocked>
      %55 = arith.cmpi slt, %53, %cst_0 : tensor<1x2048xi32, #blocked1>
      %56 = arith.addi %52, %7 : tensor<1x2048xi32, #blocked>
      %57 = arith.addi %53, %20 : tensor<1x2048xi32, #blocked1>
      %58 = tt.addptr %8, %56 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %59 = arith.andi %54, %9 : tensor<1x2048xi1, #blocked>
      %60 = arith.andi %55, %21 : tensor<1x2048xi1, #blocked1>
      %61 = tt.load %58, %59, %cst_11 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %62 = arith.extf %61 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %63 = tt.addptr %22, %52 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %64 = tt.load %63, %54, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %65 = tt.extern_elementwise %24 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %66 = tt.broadcast %65 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %67 = arith.mulf %62, %66 : tensor<1x2048xf32, #blocked>
      %68 = arith.addf %64, %cst_7 : tensor<1x2048xf32, #blocked>
      %69 = arith.mulf %67, %68 : tensor<1x2048xf32, #blocked>
      tt.assert %36, "index out of bounds: 0 <= tmp23 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<1x1xi1, #blocked2>
      %70 = arith.extsi %52 : tensor<1x2048xi32, #blocked> to tensor<1x2048xi64, #blocked>
      %71 = arith.addi %70, %38 : tensor<1x2048xi64, #blocked>
      %72 = tt.addptr %39, %71 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi64, #blocked>
      %73 = tt.load %72, %59, %cst_10 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %74 = arith.mulf %73, %cst_6 : tensor<1x2048xf32, #blocked>
      %75 = arith.addf %69, %74 : tensor<1x2048xf32, #blocked>
      %76 = arith.mulf %75, %75 : tensor<1x2048xf32, #blocked>
      %77 = arith.addf %arg11, %76 : tensor<1x2048xf32, #blocked>
      %78 = arith.select %59, %77, %arg11 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %79 = tt.addptr %40, %57 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xi32, #blocked1>
      %80 = triton_gpu.convert_layout %75 : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked1>
      tt.store %79, %80, %60 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32, #blocked1>
      scf.yield %78 : tensor<1x2048xf32, #blocked>
    }
    %42 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32, %arg11: f32):
      %50 = arith.addf %arg10, %arg11 : f32
      tt.reduce.return %50 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %43 = tt.expand_dims %42 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %44 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %45 = tt.splat %arg4 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %46 = arith.divf %43, %cst_9 : tensor<1x1xf32, #blocked>
    %47 = arith.addf %46, %cst_8 : tensor<1x1xf32, #blocked>
    %48 = tt.splat %arg6 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %49 = tt.splat %arg7 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg10 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %50 = tt.splat %arg10 : (i32) -> tensor<1x2048xi32, #blocked>
      %51 = arith.addi %50, %4 : tensor<1x2048xi32, #blocked>
      %52 = arith.cmpi slt, %51, %cst : tensor<1x2048xi32, #blocked>
      %53 = arith.addi %51, %7 : tensor<1x2048xi32, #blocked>
      %54 = tt.addptr %44, %53 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %55 = arith.andi %52, %9 : tensor<1x2048xi1, #blocked>
      %56 = tt.load %54, %55, %cst_10 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %57 = tt.addptr %45, %51 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %58 = tt.load %57, %52, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %59 = tt.extern_elementwise %47 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %60 = tt.broadcast %59 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %61 = arith.mulf %56, %60 : tensor<1x2048xf32, #blocked>
      %62 = arith.addf %58, %cst_7 : tensor<1x2048xf32, #blocked>
      %63 = arith.mulf %61, %62 : tensor<1x2048xf32, #blocked>
      %64 = tt.addptr %48, %53 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %65 = arith.truncf %63 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
      tt.store %64, %65, %55 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
      %66 = tt.addptr %49, %53 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      tt.store %66, %65, %55 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    }
    tt.return
  }
}
