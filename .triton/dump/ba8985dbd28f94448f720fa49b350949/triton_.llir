; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp23 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4d5d6d7d89de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = lshr i32 %11, 5, !dbg !10
  %urem = and i32 %11, 255, !dbg !10
  %13 = shl nuw nsw i32 %urem, 3, !dbg !10
  %14 = shl nuw nsw i32 %urem, 2, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %16 = icmp slt i32 %15, 4, !dbg !12
  %17 = mul i32 %15, 2304, !dbg !13
  %18 = add i32 %13, %17, !dbg !14
  %19 = sext i32 %18 to i64, !dbg !15
  %20 = getelementptr i16, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %26 = trunc i32 %22 to i16, !dbg !16
  %extelt.offset22 = lshr i32 %22, 16, !dbg !16
  %27 = trunc i32 %extelt.offset22 to i16, !dbg !16
  %28 = trunc i32 %23 to i16, !dbg !16
  %extelt.offset23 = lshr i32 %23, 16, !dbg !16
  %29 = trunc i32 %extelt.offset23 to i16, !dbg !16
  %30 = trunc i32 %24 to i16, !dbg !16
  %extelt.offset24 = lshr i32 %24, 16, !dbg !16
  %31 = trunc i32 %extelt.offset24 to i16, !dbg !16
  %32 = trunc i32 %25 to i16, !dbg !16
  %extelt.offset25 = lshr i32 %25, 16, !dbg !16
  %33 = trunc i32 %extelt.offset25 to i16, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !17
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !17
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !17
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !17
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !17
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !17
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #6, !dbg !17
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #6, !dbg !17
  %42 = fmul float %34, %34, !dbg !18
  %43 = fmul float %35, %35, !dbg !18
  %44 = fmul float %36, %36, !dbg !18
  %45 = fmul float %37, %37, !dbg !18
  %46 = fmul float %38, %38, !dbg !18
  %47 = fmul float %39, %39, !dbg !18
  %48 = fmul float %40, %40, !dbg !18
  %49 = fmul float %41, %41, !dbg !18
  %50 = select i1 %16, float %42, float 0.000000e+00, !dbg !19
  %51 = select i1 %16, float %43, float 0.000000e+00, !dbg !19
  %52 = select i1 %16, float %44, float 0.000000e+00, !dbg !19
  %53 = select i1 %16, float %45, float 0.000000e+00, !dbg !19
  %54 = select i1 %16, float %46, float 0.000000e+00, !dbg !19
  %55 = select i1 %16, float %47, float 0.000000e+00, !dbg !19
  %56 = select i1 %16, float %48, float 0.000000e+00, !dbg !19
  %57 = select i1 %16, float %49, float 0.000000e+00, !dbg !19
  %58 = or i32 %13, 2048, !dbg !20
  %59 = icmp ult i32 %58, 2304, !dbg !21
  %60 = add i32 %58, %17, !dbg !14
  %61 = sext i32 %60 to i64, !dbg !15
  %62 = getelementptr i16, ptr addrspace(1) %0, i64 %61, !dbg !15
  %63 = and i1 %16, %59, !dbg !22
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #6, !dbg !16
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !16
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !16
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !16
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !16
  %69 = trunc i32 %65 to i16, !dbg !16
  %extelt.offset22.1 = lshr i32 %65, 16, !dbg !16
  %70 = trunc i32 %extelt.offset22.1 to i16, !dbg !16
  %71 = trunc i32 %66 to i16, !dbg !16
  %extelt.offset23.1 = lshr i32 %66, 16, !dbg !16
  %72 = trunc i32 %extelt.offset23.1 to i16, !dbg !16
  %73 = trunc i32 %67 to i16, !dbg !16
  %extelt.offset24.1 = lshr i32 %67, 16, !dbg !16
  %74 = trunc i32 %extelt.offset24.1 to i16, !dbg !16
  %75 = trunc i32 %68 to i16, !dbg !16
  %extelt.offset25.1 = lshr i32 %68, 16, !dbg !16
  %76 = trunc i32 %extelt.offset25.1 to i16, !dbg !16
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #6, !dbg !17
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #6, !dbg !17
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #6, !dbg !17
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #6, !dbg !17
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #6, !dbg !17
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #6, !dbg !17
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #6, !dbg !17
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #6, !dbg !17
  %85 = fmul float %77, %77, !dbg !18
  %86 = fmul float %78, %78, !dbg !18
  %87 = fmul float %79, %79, !dbg !18
  %88 = fmul float %80, %80, !dbg !18
  %89 = fmul float %81, %81, !dbg !18
  %90 = fmul float %82, %82, !dbg !18
  %91 = fmul float %83, %83, !dbg !18
  %92 = fmul float %84, %84, !dbg !18
  %93 = select i1 %63, float %85, float -0.000000e+00, !dbg !19
  %94 = fadd float %50, %93, !dbg !19
  %95 = select i1 %63, float %86, float -0.000000e+00, !dbg !19
  %96 = fadd float %51, %95, !dbg !19
  %97 = select i1 %63, float %87, float -0.000000e+00, !dbg !19
  %98 = fadd float %52, %97, !dbg !19
  %99 = select i1 %63, float %88, float -0.000000e+00, !dbg !19
  %100 = fadd float %53, %99, !dbg !19
  %101 = select i1 %63, float %89, float -0.000000e+00, !dbg !19
  %102 = fadd float %54, %101, !dbg !19
  %103 = select i1 %63, float %90, float -0.000000e+00, !dbg !19
  %104 = fadd float %55, %103, !dbg !19
  %105 = select i1 %63, float %91, float -0.000000e+00, !dbg !19
  %106 = fadd float %56, %105, !dbg !19
  %107 = select i1 %63, float %92, float -0.000000e+00, !dbg !19
  %108 = fadd float %57, %107, !dbg !19
  %109 = and i32 %11, 31, !dbg !10
  %110 = and i32 %12, 7, !dbg !10
  %111 = or i32 %13, 4, !dbg !10
  %112 = or i32 %14, 1024, !dbg !10
  %113 = fadd float %94, %96, !dbg !23
  %114 = fadd float %98, %113, !dbg !23
  %115 = fadd float %100, %114, !dbg !23
  %116 = fadd float %102, %115, !dbg !23
  %117 = fadd float %104, %116, !dbg !23
  %118 = fadd float %106, %117, !dbg !23
  %119 = fadd float %108, %118, !dbg !23
  %120 = bitcast float %119 to i32, !dbg !29
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !29
  %122 = bitcast i32 %121 to float, !dbg !29
  %123 = fadd float %119, %122, !dbg !23
  %124 = bitcast float %123 to i32, !dbg !29
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 8, i32 31), !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = fadd float %123, %126, !dbg !23
  %128 = bitcast float %127 to i32, !dbg !29
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !29
  %130 = bitcast i32 %129 to float, !dbg !29
  %131 = fadd float %127, %130, !dbg !23
  %132 = bitcast float %131 to i32, !dbg !29
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !29
  %134 = bitcast i32 %133 to float, !dbg !29
  %135 = fadd float %131, %134, !dbg !23
  %136 = bitcast float %135 to i32, !dbg !29
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !29
  %138 = bitcast i32 %137 to float, !dbg !29
  %139 = fadd float %135, %138, !dbg !23
  %140 = icmp eq i32 %109, 0, !dbg !29
  %141 = zext nneg i32 %110 to i64, !dbg !29
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i64 %141, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, float %139, i1 %140) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %143 = icmp slt i32 %11, 8, !dbg !29
  %144 = sext i32 %11 to i64, !dbg !29
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i64 %144, !dbg !29
  %146 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %145, i1 %143) #6, !dbg !29
  %147 = bitcast float %146 to i32, !dbg !29
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !29
  %149 = bitcast i32 %148 to float, !dbg !29
  %150 = fadd float %146, %149, !dbg !23
  %151 = bitcast float %150 to i32, !dbg !29
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !29
  %153 = bitcast i32 %152 to float, !dbg !29
  %154 = fadd float %150, %153, !dbg !23
  %155 = bitcast float %154 to i32, !dbg !29
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !29
  %157 = bitcast i32 %156 to float, !dbg !29
  %158 = fadd float %154, %157, !dbg !23
  %159 = and i32 %11, 7, !dbg !29
  %160 = icmp eq i32 %159, 0, !dbg !29
  %161 = and i1 %143, %160, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, float %158, i1 %161) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %162 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %163 = sext i32 %15 to i64, !dbg !31
  %164 = getelementptr i64, ptr addrspace(1) %2, i64 %163, !dbg !31
  %165 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %164, i1 %16) #6, !dbg !32
  %166 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %164, i1 %16) #6, !dbg !32
  %167 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %164, i1 %16) #6, !dbg !32
  %168 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %164, i1 %16) #6, !dbg !32
  %169 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %164, i1 %16) #6, !dbg !32
  %170 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %164, i1 %16) #6, !dbg !32
  %171 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %164, i1 %16) #6, !dbg !32
  %172 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %164, i1 %16) #6, !dbg !32
  %173 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %164, i1 %16) #6, !dbg !32
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 2.304000e+03) #6, !dbg !33
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 2.304000e+03) #6, !dbg !33
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 2.304000e+03) #6, !dbg !33
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 2.304000e+03) #6, !dbg !33
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 2.304000e+03) #6, !dbg !33
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 2.304000e+03) #6, !dbg !33
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 2.304000e+03) #6, !dbg !33
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 2.304000e+03) #6, !dbg !33
  %182 = fadd float %174, 0x3EE4F8B580000000, !dbg !34
  %183 = add i64 %165, 288256, !dbg !35
  %184 = add i64 %173, 288256, !dbg !35
  %185 = icmp slt i64 %165, 0, !dbg !36
  %186 = icmp slt i64 %173, 0, !dbg !36
  %187 = select i1 %185, i64 %183, i64 %165, !dbg !37
  %188 = select i1 %186, i64 %184, i64 %173, !dbg !37
  %189 = icmp ugt i64 %188, 288255, !dbg !38
  %.not7 = and i1 %16, %189, !dbg !39
  %190 = mul i64 %187, 2304, !dbg !39
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %190
  %192 = zext nneg i32 %13 to i64
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i64 %192
  %194 = zext nneg i32 %14 to i64
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i64 %194
  %196 = zext nneg i32 %112 to i64
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i64 %196
  %198 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %195, i64 0, i64 1
  %199 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %195, i64 0, i64 2
  %200 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %195, i64 0, i64 3
  br label %201, !dbg !40

201:                                              ; preds = %10, %290
  %202 = phi i1 [ true, %10 ], [ false, %290 ]
  %203 = phi i32 [ 0, %10 ], [ 2048, %290 ]
  %204 = phi <8 x float> [ zeroinitializer, %10 ], [ %318, %290 ]
  %205 = or i32 %203, %13, !dbg !41
  %206 = or i32 %203, %111, !dbg !41
  %207 = or i32 %203, %14, !dbg !41
  %208 = or i32 %203, %112, !dbg !41
  %209 = icmp ult i32 %205, 2304, !dbg !42
  %210 = icmp ult i32 %207, 2304, !dbg !42
  %211 = icmp ult i32 %208, 2304, !dbg !42
  %212 = add i32 %205, %17, !dbg !43
  %213 = add i32 %207, %17, !dbg !43
  %214 = add i32 %208, %17, !dbg !43
  %215 = sext i32 %212 to i64, !dbg !44
  %216 = getelementptr i16, ptr addrspace(1) %0, i64 %215, !dbg !44
  %217 = and i1 %16, %209, !dbg !45
  %218 = and i1 %16, %210, !dbg !45
  %219 = and i1 %16, %211, !dbg !45
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %216, i1 %217, i32 0, i1 %217, i32 0, i1 %217, i32 0, i1 %217, i32 0, i1 %217) #6, !dbg !46
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !46
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !46
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !46
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !46
  %225 = trunc i32 %221 to i16, !dbg !46
  %extelt.offset = lshr i32 %221, 16, !dbg !46
  %226 = trunc i32 %extelt.offset to i16, !dbg !46
  %227 = trunc i32 %222 to i16, !dbg !46
  %extelt.offset3 = lshr i32 %222, 16, !dbg !46
  %228 = trunc i32 %extelt.offset3 to i16, !dbg !46
  %229 = trunc i32 %223 to i16, !dbg !46
  %extelt.offset4 = lshr i32 %223, 16, !dbg !46
  %230 = trunc i32 %extelt.offset4 to i16, !dbg !46
  %231 = trunc i32 %224 to i16, !dbg !46
  %extelt.offset5 = lshr i32 %224, 16, !dbg !46
  %232 = trunc i32 %extelt.offset5 to i16, !dbg !46
  %233 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %225) #6, !dbg !47
  %234 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #6, !dbg !47
  %235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %227) #6, !dbg !47
  %236 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #6, !dbg !47
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %229) #6, !dbg !47
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %230) #6, !dbg !47
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #6, !dbg !47
  %240 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #6, !dbg !47
  %241 = zext nneg i32 %205 to i64, !dbg !48
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !48
  %243 = zext nneg i32 %206 to i64, !dbg !48
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !48
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %242, i1 %209, i32 0, i1 %209, i32 0, i1 %209, i32 0, i1 %209, i32 0, i1 %209) #6, !dbg !49
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !49
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !49
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !49
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !49
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %244, i1 %209, i32 0, i1 %209, i32 0, i1 %209, i32 0, i1 %209, i32 0, i1 %209) #6, !dbg !49
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !49
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !49
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !49
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !49
  %255 = insertelement <8 x i32> poison, i32 %246, i64 0, !dbg !49
  %256 = insertelement <8 x i32> %255, i32 %247, i64 1, !dbg !49
  %257 = insertelement <8 x i32> %256, i32 %248, i64 2, !dbg !49
  %258 = insertelement <8 x i32> %257, i32 %249, i64 3, !dbg !49
  %259 = insertelement <8 x i32> %258, i32 %251, i64 4, !dbg !49
  %260 = insertelement <8 x i32> %259, i32 %252, i64 5, !dbg !49
  %261 = insertelement <8 x i32> %260, i32 %253, i64 6, !dbg !49
  %262 = insertelement <8 x i32> %261, i32 %254, i64 7, !dbg !49
  %263 = bitcast <8 x i32> %262 to <8 x float>, !dbg !49
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %.not.i47 = icmp eq i32 %264, 0, !dbg !50
  br i1 %.not.i47, label %267, label %265, !dbg !50

265:                                              ; preds = %201
  %266 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %182), !dbg !50
  br label %__nv_rsqrtf.exit49, !dbg !50

267:                                              ; preds = %201
  %268 = tail call float @llvm.nvvm.rsqrt.approx.f(float %182), !dbg !50
  br label %__nv_rsqrtf.exit49, !dbg !50

__nv_rsqrtf.exit49:                               ; preds = %265, %267
  %.0.i48 = phi float [ %266, %265 ], [ %268, %267 ], !dbg !50
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %276 = insertelement <8 x float> poison, float %233, i64 0, !dbg !51
  %277 = insertelement <8 x float> %276, float %234, i64 1, !dbg !51
  %278 = insertelement <8 x float> %277, float %235, i64 2, !dbg !51
  %279 = insertelement <8 x float> %278, float %236, i64 3, !dbg !51
  %280 = insertelement <8 x float> %279, float %237, i64 4, !dbg !51
  %281 = insertelement <8 x float> %280, float %238, i64 5, !dbg !51
  %282 = insertelement <8 x float> %281, float %239, i64 6, !dbg !51
  %283 = insertelement <8 x float> %282, float %240, i64 7, !dbg !51
  %284 = insertelement <8 x float> poison, float %.0.i48, i64 0, !dbg !51
  %285 = shufflevector <8 x float> %284, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !51
  %286 = fmul <8 x float> %283, %285, !dbg !51
  %287 = fadd <8 x float> %263, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !52
  %288 = fmul <8 x float> %287, %286, !dbg !53
  br i1 %.not7, label %289, label %290, !dbg !54

289:                                              ; preds = %__nv_rsqrtf.exit49
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !54
  br label %290, !dbg !54

290:                                              ; preds = %289, %__nv_rsqrtf.exit49
  %291 = getelementptr float, ptr addrspace(1) %191, i64 %241, !dbg !55
  %292 = getelementptr float, ptr addrspace(1) %191, i64 %243, !dbg !55
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %291, i1 %217, i32 0, i1 %217, i32 0, i1 %217, i32 0, i1 %217, i32 0, i1 %217) #6, !dbg !56
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !56
  %295 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !56
  %296 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !56
  %297 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !56
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %292, i1 %217, i32 0, i1 %217, i32 0, i1 %217, i32 0, i1 %217, i32 0, i1 %217) #6, !dbg !56
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !56
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !56
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !56
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !56
  %303 = insertelement <8 x i32> poison, i32 %294, i64 0, !dbg !56
  %304 = insertelement <8 x i32> %303, i32 %295, i64 1, !dbg !56
  %305 = insertelement <8 x i32> %304, i32 %296, i64 2, !dbg !56
  %306 = insertelement <8 x i32> %305, i32 %297, i64 3, !dbg !56
  %307 = insertelement <8 x i32> %306, i32 %299, i64 4, !dbg !56
  %308 = insertelement <8 x i32> %307, i32 %300, i64 5, !dbg !56
  %309 = insertelement <8 x i32> %308, i32 %301, i64 6, !dbg !56
  %310 = insertelement <8 x i32> %309, i32 %302, i64 7, !dbg !56
  %311 = bitcast <8 x i32> %310 to <8 x float>, !dbg !56
  %312 = fmul <8 x float> %311, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !57
  %313 = fadd <8 x float> %288, %312, !dbg !58
  %314 = fmul <8 x float> %313, %313, !dbg !59
  %315 = insertelement <8 x i1> poison, i1 %217, i64 0, !dbg !60
  %316 = shufflevector <8 x i1> %315, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !60
  %317 = select <8 x i1> %316, <8 x float> %314, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !60
  %318 = fadd <8 x float> %204, %317, !dbg !60
  %319 = sext i32 %213 to i64, !dbg !61
  %320 = getelementptr float, ptr addrspace(1) %5, i64 %319, !dbg !61
  %321 = sext i32 %214 to i64, !dbg !61
  %322 = getelementptr float, ptr addrspace(1) %5, i64 %321, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  store <8 x float> %313, ptr addrspace(3) %193, align 32, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %323 = load <4 x i32>, ptr addrspace(3) %197, align 16, !dbg !62
  %.extract = load i32, ptr addrspace(3) %195, align 16, !dbg !62
  %.extract9 = load i32, ptr addrspace(3) %198, align 4, !dbg !62
  %.extract11 = load i32, ptr addrspace(3) %199, align 8, !dbg !62
  %.extract13 = load i32, ptr addrspace(3) %200, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract11, i32 %.extract13, ptr addrspace(1) %320, i1 %218) #6, !dbg !62
  %.extract15 = extractelement <4 x i32> %323, i64 0, !dbg !62
  %.extract17 = extractelement <4 x i32> %323, i64 1, !dbg !62
  %.extract19 = extractelement <4 x i32> %323, i64 2, !dbg !62
  %.extract21 = extractelement <4 x i32> %323, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract17, i32 %.extract19, i32 %.extract21, ptr addrspace(1) %322, i1 %219) #6, !dbg !62
  br i1 %202, label %201, label %324, !dbg !40

324:                                              ; preds = %290
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %shift = shufflevector <8 x float> %318, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !65
  %325 = fadd <8 x float> %318, %shift, !dbg !65
  %shift101 = shufflevector <8 x float> %318, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !65
  %326 = fadd <8 x float> %shift101, %325, !dbg !65
  %shift102 = shufflevector <8 x float> %318, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !65
  %327 = fadd <8 x float> %shift102, %326, !dbg !65
  %shift103 = shufflevector <8 x float> %318, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !65
  %328 = fadd <8 x float> %shift103, %327, !dbg !65
  %shift104 = shufflevector <8 x float> %318, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !65
  %329 = fadd <8 x float> %shift104, %328, !dbg !65
  %shift105 = shufflevector <8 x float> %318, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !65
  %330 = fadd <8 x float> %shift105, %329, !dbg !65
  %shift106 = shufflevector <8 x float> %318, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !65
  %331 = fadd <8 x float> %shift106, %330, !dbg !65
  %332 = extractelement <8 x float> %331, i64 0, !dbg !65
  %333 = bitcast float %332 to i32, !dbg !63
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 16, i32 31), !dbg !63
  %335 = bitcast i32 %334 to float, !dbg !63
  %336 = fadd float %332, %335, !dbg !65
  %337 = bitcast float %336 to i32, !dbg !63
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 8, i32 31), !dbg !63
  %339 = bitcast i32 %338 to float, !dbg !63
  %340 = fadd float %336, %339, !dbg !65
  %341 = bitcast float %340 to i32, !dbg !63
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 4, i32 31), !dbg !63
  %343 = bitcast i32 %342 to float, !dbg !63
  %344 = fadd float %340, %343, !dbg !65
  %345 = bitcast float %344 to i32, !dbg !63
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !63
  %347 = bitcast i32 %346 to float, !dbg !63
  %348 = fadd float %344, %347, !dbg !65
  %349 = bitcast float %348 to i32, !dbg !63
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 1, i32 31), !dbg !63
  %351 = bitcast i32 %350 to float, !dbg !63
  %352 = fadd float %348, %351, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, float %352, i1 %140) #6, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %353 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %145, i1 %143) #6, !dbg !63
  %354 = bitcast float %353 to i32, !dbg !63
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 4, i32 31), !dbg !63
  %356 = bitcast i32 %355 to float, !dbg !63
  %357 = fadd float %353, %356, !dbg !65
  %358 = bitcast float %357 to i32, !dbg !63
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !63
  %360 = bitcast i32 %359 to float, !dbg !63
  %361 = fadd float %357, %360, !dbg !65
  %362 = bitcast float %361 to i32, !dbg !63
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 1, i32 31), !dbg !63
  %364 = bitcast i32 %363 to float, !dbg !63
  %365 = fadd float %361, %364, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, float %365, i1 %161) #6, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %366 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !63
  %367 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float 2.304000e+03) #6, !dbg !68
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float 2.304000e+03) #6, !dbg !68
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float 2.304000e+03) #6, !dbg !68
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float 2.304000e+03) #6, !dbg !68
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float 2.304000e+03) #6, !dbg !68
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float 2.304000e+03) #6, !dbg !68
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float 2.304000e+03) #6, !dbg !68
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float 2.304000e+03) #6, !dbg !68
  %375 = fadd float %367, 0x3EE4F8B580000000, !dbg !69
  br label %376, !dbg !70

376:                                              ; preds = %324, %__nv_rsqrtf.exit
  %377 = phi i1 [ true, %324 ], [ false, %__nv_rsqrtf.exit ]
  %378 = phi i32 [ 0, %324 ], [ 2048, %__nv_rsqrtf.exit ]
  %379 = or i32 %378, %13, !dbg !71
  %380 = or i32 %378, %111, !dbg !71
  %381 = icmp ult i32 %379, 2304, !dbg !72
  %382 = add i32 %379, %17, !dbg !73
  %383 = add i32 %380, %17, !dbg !73
  %384 = sext i32 %382 to i64, !dbg !74
  %385 = getelementptr float, ptr addrspace(1) %5, i64 %384, !dbg !74
  %386 = sext i32 %383 to i64, !dbg !74
  %387 = getelementptr float, ptr addrspace(1) %5, i64 %386, !dbg !74
  %388 = and i1 %16, %381, !dbg !75
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %385, i1 %388, i32 0, i1 %388, i32 0, i1 %388, i32 0, i1 %388, i32 0, i1 %388) #6, !dbg !76
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !76
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !76
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !76
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !76
  %394 = bitcast i32 %390 to float, !dbg !76
  %395 = bitcast i32 %391 to float, !dbg !76
  %396 = bitcast i32 %392 to float, !dbg !76
  %397 = bitcast i32 %393 to float, !dbg !76
  %398 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %387, i1 %388, i32 0, i1 %388, i32 0, i1 %388, i32 0, i1 %388, i32 0, i1 %388) #6, !dbg !76
  %399 = extractvalue { i32, i32, i32, i32 } %398, 0, !dbg !76
  %400 = extractvalue { i32, i32, i32, i32 } %398, 1, !dbg !76
  %401 = extractvalue { i32, i32, i32, i32 } %398, 2, !dbg !76
  %402 = extractvalue { i32, i32, i32, i32 } %398, 3, !dbg !76
  %403 = bitcast i32 %399 to float, !dbg !76
  %404 = bitcast i32 %400 to float, !dbg !76
  %405 = bitcast i32 %401 to float, !dbg !76
  %406 = bitcast i32 %402 to float, !dbg !76
  %407 = zext nneg i32 %379 to i64, !dbg !77
  %408 = getelementptr float, ptr addrspace(1) %4, i64 %407, !dbg !77
  %409 = zext nneg i32 %380 to i64, !dbg !77
  %410 = getelementptr float, ptr addrspace(1) %4, i64 %409, !dbg !77
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %408, i1 %381, i32 0, i1 %381, i32 0, i1 %381, i32 0, i1 %381, i32 0, i1 %381) #6, !dbg !78
  %412 = extractvalue { i32, i32, i32, i32 } %411, 0, !dbg !78
  %413 = extractvalue { i32, i32, i32, i32 } %411, 1, !dbg !78
  %414 = extractvalue { i32, i32, i32, i32 } %411, 2, !dbg !78
  %415 = extractvalue { i32, i32, i32, i32 } %411, 3, !dbg !78
  %416 = bitcast i32 %412 to float, !dbg !78
  %417 = bitcast i32 %413 to float, !dbg !78
  %418 = bitcast i32 %414 to float, !dbg !78
  %419 = bitcast i32 %415 to float, !dbg !78
  %420 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %410, i1 %381, i32 0, i1 %381, i32 0, i1 %381, i32 0, i1 %381, i32 0, i1 %381) #6, !dbg !78
  %421 = extractvalue { i32, i32, i32, i32 } %420, 0, !dbg !78
  %422 = extractvalue { i32, i32, i32, i32 } %420, 1, !dbg !78
  %423 = extractvalue { i32, i32, i32, i32 } %420, 2, !dbg !78
  %424 = extractvalue { i32, i32, i32, i32 } %420, 3, !dbg !78
  %425 = bitcast i32 %421 to float, !dbg !78
  %426 = bitcast i32 %422 to float, !dbg !78
  %427 = bitcast i32 %423 to float, !dbg !78
  %428 = bitcast i32 %424 to float, !dbg !78
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %.not.i = icmp eq i32 %429, 0, !dbg !79
  br i1 %.not.i, label %432, label %430, !dbg !79

430:                                              ; preds = %376
  %431 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %375), !dbg !79
  br label %__nv_rsqrtf.exit, !dbg !79

432:                                              ; preds = %376
  %433 = tail call float @llvm.nvvm.rsqrt.approx.f(float %375), !dbg !79
  br label %__nv_rsqrtf.exit, !dbg !79

__nv_rsqrtf.exit:                                 ; preds = %430, %432
  %.0.i = phi float [ %431, %430 ], [ %433, %432 ], !dbg !79
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %441 = fmul float %.0.i, %394, !dbg !80
  %442 = fmul float %.0.i, %395, !dbg !80
  %443 = fmul float %.0.i, %396, !dbg !80
  %444 = fmul float %.0.i, %397, !dbg !80
  %445 = fmul float %.0.i, %403, !dbg !80
  %446 = fmul float %.0.i, %404, !dbg !80
  %447 = fmul float %.0.i, %405, !dbg !80
  %448 = fmul float %.0.i, %406, !dbg !80
  %449 = fadd float %416, 1.000000e+00, !dbg !81
  %450 = fadd float %417, 1.000000e+00, !dbg !81
  %451 = fadd float %418, 1.000000e+00, !dbg !81
  %452 = fadd float %419, 1.000000e+00, !dbg !81
  %453 = fadd float %425, 1.000000e+00, !dbg !81
  %454 = fadd float %426, 1.000000e+00, !dbg !81
  %455 = fadd float %427, 1.000000e+00, !dbg !81
  %456 = fadd float %428, 1.000000e+00, !dbg !81
  %457 = fmul float %449, %441, !dbg !82
  %458 = fmul float %450, %442, !dbg !82
  %459 = fmul float %451, %443, !dbg !82
  %460 = fmul float %452, %444, !dbg !82
  %461 = fmul float %453, %445, !dbg !82
  %462 = fmul float %454, %446, !dbg !82
  %463 = fmul float %455, %447, !dbg !82
  %464 = fmul float %456, %448, !dbg !82
  %465 = getelementptr i16, ptr addrspace(1) %6, i64 %384, !dbg !83
  %466 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %457) #6, !dbg !84
  %467 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %458) #6, !dbg !84
  %468 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %459) #6, !dbg !84
  %469 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %460) #6, !dbg !84
  %470 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %461) #6, !dbg !84
  %471 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %462) #6, !dbg !84
  %472 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %463) #6, !dbg !84
  %473 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %464) #6, !dbg !84
  %474 = insertelement <2 x i16> undef, i16 %466, i64 0, !dbg !84
  %475 = insertelement <2 x i16> %474, i16 %467, i64 1, !dbg !84
  %476 = bitcast <2 x i16> %475 to i32, !dbg !84
  %477 = insertelement <2 x i16> undef, i16 %468, i64 0, !dbg !84
  %478 = insertelement <2 x i16> %477, i16 %469, i64 1, !dbg !84
  %479 = bitcast <2 x i16> %478 to i32, !dbg !84
  %480 = insertelement <2 x i16> undef, i16 %470, i64 0, !dbg !84
  %481 = insertelement <2 x i16> %480, i16 %471, i64 1, !dbg !84
  %482 = bitcast <2 x i16> %481 to i32, !dbg !84
  %483 = insertelement <2 x i16> undef, i16 %472, i64 0, !dbg !84
  %484 = insertelement <2 x i16> %483, i16 %473, i64 1, !dbg !84
  %485 = bitcast <2 x i16> %484 to i32, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %476, i32 %479, i32 %482, i32 %485, ptr addrspace(1) %465, i1 %388) #6, !dbg !84
  %486 = getelementptr i16, ptr addrspace(1) %7, i64 %384, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %476, i32 %479, i32 %482, i32 %485, ptr addrspace(1) %486, i1 %388) #6, !dbg !86
  br i1 %377, label %376, label %487, !dbg !70

487:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cs63ym43f7ebv3lnbno5udtigwsmjd622f4p4zox6w33p74ey5rq.py", directory: "/tmp/torchinductor_zeus/s6")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d89de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d89de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d89de", linkageName: "triton__0d1d2d3d4d5d6d7d89de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 110, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 36, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 29, column: 25, scope: !7)
!22 = !DILocation(line: 31, column: 59, scope: !7)
!23 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 37, column: 25, scope: !26)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 48, column: 22, scope: !7)
!34 = !DILocation(line: 50, column: 23, scope: !7)
!35 = !DILocation(line: 58, column: 24, scope: !7)
!36 = !DILocation(line: 59, column: 24, scope: !7)
!37 = !DILocation(line: 60, column: 39, scope: !7)
!38 = !DILocation(line: 61, column: 42, scope: !7)
!39 = !DILocation(line: 62, column: 46, scope: !7)
!40 = !DILocation(line: 40, column: 36, scope: !7)
!41 = !DILocation(line: 41, column: 27, scope: !7)
!42 = !DILocation(line: 42, column: 25, scope: !7)
!43 = !DILocation(line: 44, column: 40, scope: !7)
!44 = !DILocation(line: 44, column: 34, scope: !7)
!45 = !DILocation(line: 44, column: 59, scope: !7)
!46 = !DILocation(line: 44, column: 51, scope: !7)
!47 = !DILocation(line: 44, column: 111, scope: !7)
!48 = !DILocation(line: 45, column: 35, scope: !7)
!49 = !DILocation(line: 45, column: 40, scope: !7)
!50 = !DILocation(line: 51, column: 30, scope: !7)
!51 = !DILocation(line: 52, column: 23, scope: !7)
!52 = !DILocation(line: 54, column: 24, scope: !7)
!53 = !DILocation(line: 55, column: 24, scope: !7)
!54 = !DILocation(line: 61, column: 69, scope: !7)
!55 = !DILocation(line: 62, column: 35, scope: !7)
!56 = !DILocation(line: 62, column: 55, scope: !7)
!57 = !DILocation(line: 64, column: 24, scope: !7)
!58 = !DILocation(line: 65, column: 24, scope: !7)
!59 = !DILocation(line: 66, column: 24, scope: !7)
!60 = !DILocation(line: 69, column: 48, scope: !7)
!61 = !DILocation(line: 70, column: 29, scope: !7)
!62 = !DILocation(line: 70, column: 53, scope: !7)
!63 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !64)
!64 = !DILocation(line: 71, column: 27, scope: !26)
!65 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !66)
!66 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !67)
!67 = !DILocation(line: 71, column: 27, scope: !24)
!68 = !DILocation(line: 79, column: 24, scope: !7)
!69 = !DILocation(line: 81, column: 24, scope: !7)
!70 = !DILocation(line: 72, column: 36, scope: !7)
!71 = !DILocation(line: 73, column: 27, scope: !7)
!72 = !DILocation(line: 74, column: 25, scope: !7)
!73 = !DILocation(line: 76, column: 42, scope: !7)
!74 = !DILocation(line: 76, column: 36, scope: !7)
!75 = !DILocation(line: 76, column: 61, scope: !7)
!76 = !DILocation(line: 76, column: 53, scope: !7)
!77 = !DILocation(line: 77, column: 35, scope: !7)
!78 = !DILocation(line: 77, column: 40, scope: !7)
!79 = !DILocation(line: 82, column: 30, scope: !7)
!80 = !DILocation(line: 83, column: 24, scope: !7)
!81 = !DILocation(line: 85, column: 24, scope: !7)
!82 = !DILocation(line: 86, column: 24, scope: !7)
!83 = !DILocation(line: 88, column: 29, scope: !7)
!84 = !DILocation(line: 88, column: 53, scope: !7)
!85 = !DILocation(line: 89, column: 29, scope: !7)
!86 = !DILocation(line: 89, column: 53, scope: !7)
!87 = !DILocation(line: 72, column: 4, scope: !7)
