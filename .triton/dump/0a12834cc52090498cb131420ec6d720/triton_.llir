; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !5 {
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %16, 255, !dbg !8
  %17 = or i32 %urem, 256, !dbg !8
  %18 = or i32 %urem, 512, !dbg !8
  %19 = or i32 %urem, 768, !dbg !8
  %20 = shl nuw nsw i32 %urem, 2, !dbg !8
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %22 = icmp slt i32 %21, 2304, !dbg !10
  %23 = sext i32 %21 to i64, !dbg !11
  %24 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !11
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %26 = bitcast i32 %25 to float, !dbg !12
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %22) #3, !dbg !12
  %30 = fadd float %26, 1.000000e+00, !dbg !13
  %31 = zext nneg i32 %urem to i64
  %32 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %31
  %33 = zext nneg i32 %17 to i64
  %34 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %33
  %35 = zext nneg i32 %18 to i64
  %36 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %35
  %37 = zext nneg i32 %19 to i64
  %38 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %37
  %39 = zext nneg i32 %20 to i64
  %40 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %39
  %41 = getelementptr float, ptr addrspace(3) @global_smem, i64 %31
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i64 %33
  %43 = getelementptr float, ptr addrspace(3) @global_smem, i64 %35
  %44 = getelementptr float, ptr addrspace(3) @global_smem, i64 %37
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i64 %39
  %46 = shl nuw nsw i32 %urem, 3
  %47 = zext nneg i32 %46 to i64
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i64 %47
  %49 = or i32 %46, 2
  %50 = zext nneg i32 %49 to i64
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i64 %50
  %52 = or i32 %46, 4
  %53 = zext nneg i32 %52 to i64
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i64 %53
  %55 = or i32 %46, 6
  %56 = zext nneg i32 %55 to i64
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56
  %58 = shl nuw nsw i32 %urem, 1
  %59 = zext nneg i32 %58 to i64
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i64 %59
  %61 = shl nuw nsw i32 %17, 1
  %62 = zext nneg i32 %61 to i64
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i64 %62
  %64 = shl nuw nsw i32 %18, 1
  %65 = zext nneg i32 %64 to i64
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i64 %65
  %67 = shl nuw nsw i32 %19, 1
  %68 = zext nneg i32 %67 to i64
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i64 %68
  %70 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %40, i64 0, i64 1
  %71 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %40, i64 0, i64 2
  %72 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %40, i64 0, i64 3
  %73 = getelementptr inbounds <4 x float>, ptr addrspace(3) %45, i64 0, i64 1
  %74 = getelementptr inbounds <4 x float>, ptr addrspace(3) %45, i64 0, i64 2
  %75 = getelementptr inbounds <4 x float>, ptr addrspace(3) %45, i64 0, i64 3
  %76 = insertelement <8 x i1> poison, i1 %22, i64 0, !dbg !14
  %77 = shufflevector <8 x i1> %76, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !14
  br label %78, !dbg !15

78:                                               ; preds = %15, %78
  %79 = phi float [ 0.000000e+00, %15 ], [ %286, %78 ]
  %80 = phi float [ 0.000000e+00, %15 ], [ %288, %78 ]
  %81 = phi float [ 0.000000e+00, %15 ], [ %290, %78 ]
  %82 = phi float [ 0.000000e+00, %15 ], [ %292, %78 ]
  %83 = phi i1 [ true, %15 ], [ false, %78 ]
  %84 = phi i32 [ 0, %15 ], [ 1024, %78 ]
  %85 = phi <8 x float> [ zeroinitializer, %15 ], [ %305, %78 ]
  %86 = or i32 %84, %urem, !dbg !16
  %87 = or i32 %84, %17, !dbg !16
  %88 = or i32 %84, %18, !dbg !16
  %89 = or i32 %84, %19, !dbg !16
  %90 = or i32 %84, %20, !dbg !16
  %91 = mul nuw nsw i32 %86, 2304, !dbg !17
  %92 = mul nuw nsw i32 %87, 2304, !dbg !17
  %93 = mul nuw nsw i32 %88, 2304, !dbg !17
  %94 = mul nuw nsw i32 %89, 2304, !dbg !17
  %95 = add i32 %91, %21, !dbg !18
  %96 = add i32 %92, %21, !dbg !18
  %97 = add i32 %93, %21, !dbg !18
  %98 = add i32 %94, %21, !dbg !18
  %99 = sext i32 %95 to i64, !dbg !19
  %100 = getelementptr i16, ptr addrspace(1) %0, i64 %99, !dbg !19
  %101 = sext i32 %96 to i64, !dbg !19
  %102 = getelementptr i16, ptr addrspace(1) %0, i64 %101, !dbg !19
  %103 = sext i32 %97 to i64, !dbg !19
  %104 = getelementptr i16, ptr addrspace(1) %0, i64 %103, !dbg !19
  %105 = sext i32 %98 to i64, !dbg !19
  %106 = getelementptr i16, ptr addrspace(1) %0, i64 %105, !dbg !19
  %107 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %100, i1 %22, i16 0, i1 %22) #3, !dbg !20
  %108 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %102, i1 %22, i16 0, i1 %22) #3, !dbg !20
  %109 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %104, i1 %22, i16 0, i1 %22) #3, !dbg !20
  %110 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %106, i1 %22, i16 0, i1 %22) #3, !dbg !20
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #3, !dbg !21
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #3, !dbg !21
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %109) #3, !dbg !21
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #3, !dbg !21
  %115 = getelementptr i16, ptr addrspace(1) %1, i64 %99, !dbg !22
  %116 = getelementptr i16, ptr addrspace(1) %1, i64 %101, !dbg !22
  %117 = getelementptr i16, ptr addrspace(1) %1, i64 %103, !dbg !22
  %118 = getelementptr i16, ptr addrspace(1) %1, i64 %105, !dbg !22
  %119 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %115, i1 %22, i16 0, i1 %22) #3, !dbg !23
  %120 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %116, i1 %22, i16 0, i1 %22) #3, !dbg !23
  %121 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %117, i1 %22, i16 0, i1 %22) #3, !dbg !23
  %122 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %118, i1 %22, i16 0, i1 %22) #3, !dbg !23
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #3, !dbg !24
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #3, !dbg !24
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #3, !dbg !24
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #3, !dbg !24
  %127 = getelementptr i16, ptr addrspace(1) %2, i64 %99, !dbg !25
  %128 = getelementptr i16, ptr addrspace(1) %2, i64 %101, !dbg !25
  %129 = getelementptr i16, ptr addrspace(1) %2, i64 %103, !dbg !25
  %130 = getelementptr i16, ptr addrspace(1) %2, i64 %105, !dbg !25
  %131 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %127, i1 %22, i16 0, i1 %22) #3, !dbg !26
  %132 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %128, i1 %22, i16 0, i1 %22) #3, !dbg !26
  %133 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %129, i1 %22, i16 0, i1 %22) #3, !dbg !26
  %134 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %130, i1 %22, i16 0, i1 %22) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %135 = insertelement <1 x i16> undef, i16 %131, i64 0, !dbg !27
  store <1 x i16> %135, ptr addrspace(3) %32, align 2, !dbg !27
  %136 = insertelement <1 x i16> undef, i16 %132, i64 0, !dbg !27
  store <1 x i16> %136, ptr addrspace(3) %34, align 2, !dbg !27
  %137 = insertelement <1 x i16> undef, i16 %133, i64 0, !dbg !27
  store <1 x i16> %137, ptr addrspace(3) %36, align 2, !dbg !27
  %138 = insertelement <1 x i16> undef, i16 %134, i64 0, !dbg !27
  store <1 x i16> %138, ptr addrspace(3) %38, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %139 = load i16, ptr addrspace(3) %40, align 8, !dbg !27
  %140 = load i16, ptr addrspace(3) %70, align 2, !dbg !27
  %141 = load i16, ptr addrspace(3) %71, align 4, !dbg !27
  %142 = load i16, ptr addrspace(3) %72, align 2, !dbg !27
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #3, !dbg !27
  %144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %140) #3, !dbg !27
  %145 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %141) #3, !dbg !27
  %146 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %142) #3, !dbg !27
  %147 = zext nneg i32 %90 to i64, !dbg !28
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %147, !dbg !28
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %148, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !29
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !29
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !29
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !29
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !29
  %154 = bitcast i32 %150 to float, !dbg !29
  %155 = bitcast i32 %151 to float, !dbg !29
  %156 = bitcast i32 %152 to float, !dbg !29
  %157 = bitcast i32 %153 to float, !dbg !29
  %158 = getelementptr float, ptr addrspace(1) %5, i64 %99, !dbg !30
  %159 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !30
  %160 = getelementptr float, ptr addrspace(1) %5, i64 %103, !dbg !30
  %161 = getelementptr float, ptr addrspace(1) %5, i64 %105, !dbg !30
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %22, i32 0, i1 %22) #3, !dbg !31
  %163 = bitcast i32 %162 to float, !dbg !31
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %22, i32 0, i1 %22) #3, !dbg !31
  %165 = bitcast i32 %164 to float, !dbg !31
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %22, i32 0, i1 %22) #3, !dbg !31
  %167 = bitcast i32 %166 to float, !dbg !31
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %22, i32 0, i1 %22) #3, !dbg !31
  %169 = bitcast i32 %168 to float, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %170 = insertelement <1 x float> undef, float %163, i64 0, !dbg !31
  store <1 x float> %170, ptr addrspace(3) %41, align 4, !dbg !31
  %171 = insertelement <1 x float> undef, float %165, i64 0, !dbg !31
  store <1 x float> %171, ptr addrspace(3) %42, align 4, !dbg !31
  %172 = insertelement <1 x float> undef, float %167, i64 0, !dbg !31
  store <1 x float> %172, ptr addrspace(3) %43, align 4, !dbg !31
  %173 = insertelement <1 x float> undef, float %169, i64 0, !dbg !31
  store <1 x float> %173, ptr addrspace(3) %44, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %174 = getelementptr float, ptr addrspace(1) %6, i64 %147, !dbg !32
  %175 = getelementptr i16, ptr addrspace(1) %7, i64 %99, !dbg !33
  %176 = getelementptr i16, ptr addrspace(1) %7, i64 %101, !dbg !33
  %177 = getelementptr i16, ptr addrspace(1) %7, i64 %103, !dbg !33
  %178 = getelementptr i16, ptr addrspace(1) %7, i64 %105, !dbg !33
  %179 = getelementptr float, ptr addrspace(1) %8, i64 %147, !dbg !34
  %180 = getelementptr float, ptr addrspace(1) %9, i64 %99, !dbg !35
  %181 = getelementptr float, ptr addrspace(1) %9, i64 %101, !dbg !35
  %182 = getelementptr float, ptr addrspace(1) %9, i64 %103, !dbg !35
  %183 = getelementptr float, ptr addrspace(1) %9, i64 %105, !dbg !35
  %184 = fadd float %111, %123, !dbg !36
  %185 = fadd float %112, %124, !dbg !36
  %186 = fadd float %113, %125, !dbg !36
  %187 = fadd float %114, %126, !dbg !36
  %188 = insertelement <1 x float> undef, float %184, i64 0, !dbg !36
  %189 = insertelement <1 x float> undef, float %185, i64 0, !dbg !36
  %190 = insertelement <1 x float> undef, float %186, i64 0, !dbg !36
  %191 = insertelement <1 x float> undef, float %187, i64 0, !dbg !36
  %192 = fmul float %143, %154, !dbg !37
  %193 = fmul float %144, %155, !dbg !37
  %194 = fmul float %145, %156, !dbg !37
  %195 = fmul float %146, %157, !dbg !37
  %196 = insertelement <1 x float> undef, float %192, i64 0, !dbg !37
  %197 = insertelement <1 x float> undef, float %193, i64 0, !dbg !37
  %198 = insertelement <1 x float> undef, float %194, i64 0, !dbg !37
  %199 = insertelement <1 x float> undef, float %195, i64 0, !dbg !37
  %200 = fmul float %30, %192, !dbg !38
  %201 = fmul float %30, %193, !dbg !38
  %202 = fmul float %30, %194, !dbg !38
  %203 = fmul float %30, %195, !dbg !38
  %204 = insertelement <1 x float> undef, float %200, i64 0, !dbg !38
  %205 = insertelement <1 x float> undef, float %201, i64 0, !dbg !38
  %206 = insertelement <1 x float> undef, float %202, i64 0, !dbg !38
  %207 = insertelement <1 x float> undef, float %203, i64 0, !dbg !38
  %208 = load <4 x float>, ptr addrspace(3) %45, align 16, !dbg !31
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %174, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !39
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !39
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !39
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !39
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !39
  %214 = bitcast i32 %210 to float, !dbg !39
  %215 = bitcast i32 %211 to float, !dbg !39
  %216 = bitcast i32 %212 to float, !dbg !39
  %217 = bitcast i32 %213 to float, !dbg !39
  %218 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %175, i1 %22, i16 0, i1 %22) #3, !dbg !40
  %219 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %176, i1 %22, i16 0, i1 %22) #3, !dbg !40
  %220 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %177, i1 %22, i16 0, i1 %22) #3, !dbg !40
  %221 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %178, i1 %22, i16 0, i1 %22) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %222 = insertelement <1 x i16> undef, i16 %218, i64 0, !dbg !41
  store <1 x i16> %222, ptr addrspace(3) %32, align 2, !dbg !41
  %223 = insertelement <1 x i16> undef, i16 %219, i64 0, !dbg !41
  store <1 x i16> %223, ptr addrspace(3) %34, align 2, !dbg !41
  %224 = insertelement <1 x i16> undef, i16 %220, i64 0, !dbg !41
  store <1 x i16> %224, ptr addrspace(3) %36, align 2, !dbg !41
  %225 = insertelement <1 x i16> undef, i16 %221, i64 0, !dbg !41
  store <1 x i16> %225, ptr addrspace(3) %38, align 2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %226 = load i16, ptr addrspace(3) %40, align 8, !dbg !41
  %227 = load i16, ptr addrspace(3) %70, align 2, !dbg !41
  %228 = load i16, ptr addrspace(3) %71, align 4, !dbg !41
  %229 = load i16, ptr addrspace(3) %72, align 2, !dbg !41
  %230 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #3, !dbg !41
  %231 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %227) #3, !dbg !41
  %232 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #3, !dbg !41
  %233 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %229) #3, !dbg !41
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !42
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !42
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !42
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !42
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !42
  %239 = insertelement <4 x i32> poison, i32 %235, i64 0, !dbg !42
  %240 = insertelement <4 x i32> %239, i32 %236, i64 1, !dbg !42
  %241 = insertelement <4 x i32> %240, i32 %237, i64 2, !dbg !42
  %242 = insertelement <4 x i32> %241, i32 %238, i64 3, !dbg !42
  %243 = bitcast <4 x i32> %242 to <4 x float>, !dbg !42
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %22, i32 0, i1 %22) #3, !dbg !43
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %22, i32 0, i1 %22) #3, !dbg !43
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %22, i32 0, i1 %22) #3, !dbg !43
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %22, i32 0, i1 %22) #3, !dbg !43
  %248 = insertelement <4 x i32> poison, i32 %244, i64 0, !dbg !43
  %249 = insertelement <4 x i32> %248, i32 %245, i64 1, !dbg !43
  %250 = insertelement <4 x i32> %249, i32 %246, i64 2, !dbg !43
  %251 = insertelement <4 x i32> %250, i32 %247, i64 3, !dbg !43
  %252 = bitcast <4 x i32> %251 to <4 x float>, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  store <1 x float> %188, ptr addrspace(3) %41, align 4, !dbg !36
  store <1 x float> %189, ptr addrspace(3) %42, align 4, !dbg !36
  store <1 x float> %190, ptr addrspace(3) %43, align 4, !dbg !36
  store <1 x float> %191, ptr addrspace(3) %44, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %253 = load float, ptr addrspace(3) %45, align 16, !dbg !36
  %254 = load float, ptr addrspace(3) %73, align 4, !dbg !36
  %255 = load float, ptr addrspace(3) %74, align 8, !dbg !36
  %256 = load float, ptr addrspace(3) %75, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  store <1 x float> %196, ptr addrspace(3) %48, align 4, !dbg !37
  store <1 x float> %197, ptr addrspace(3) %51, align 4, !dbg !37
  store <1 x float> %198, ptr addrspace(3) %54, align 4, !dbg !37
  store <1 x float> %199, ptr addrspace(3) %57, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %257 = load float, ptr addrspace(3) %60, align 4, !dbg !37
  %258 = load float, ptr addrspace(3) %63, align 4, !dbg !37
  %259 = load float, ptr addrspace(3) %66, align 4, !dbg !37
  %260 = load float, ptr addrspace(3) %69, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  store <1 x float> %204, ptr addrspace(3) %48, align 4, !dbg !38
  store <1 x float> %205, ptr addrspace(3) %51, align 4, !dbg !38
  store <1 x float> %206, ptr addrspace(3) %54, align 4, !dbg !38
  store <1 x float> %207, ptr addrspace(3) %57, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %261 = load float, ptr addrspace(3) %60, align 4, !dbg !38
  %262 = load float, ptr addrspace(3) %63, align 4, !dbg !38
  %263 = load float, ptr addrspace(3) %66, align 4, !dbg !38
  %264 = load float, ptr addrspace(3) %69, align 4, !dbg !38
  %265 = fadd float %261, %163, !dbg !44
  %266 = fadd float %262, %165, !dbg !44
  %267 = fadd float %263, %167, !dbg !44
  %268 = fadd float %264, %169, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %269 = insertelement <1 x float> undef, float %265, i64 0, !dbg !44
  store <1 x float> %269, ptr addrspace(3) %41, align 4, !dbg !44
  %270 = insertelement <1 x float> undef, float %266, i64 0, !dbg !44
  store <1 x float> %270, ptr addrspace(3) %42, align 4, !dbg !44
  %271 = insertelement <1 x float> undef, float %267, i64 0, !dbg !44
  store <1 x float> %271, ptr addrspace(3) %43, align 4, !dbg !44
  %272 = insertelement <1 x float> undef, float %268, i64 0, !dbg !44
  store <1 x float> %272, ptr addrspace(3) %44, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %273 = load float, ptr addrspace(3) %45, align 16, !dbg !44
  %274 = load float, ptr addrspace(3) %73, align 4, !dbg !44
  %275 = load float, ptr addrspace(3) %74, align 8, !dbg !44
  %276 = load float, ptr addrspace(3) %75, align 4, !dbg !44
  %277 = fmul float %273, %214, !dbg !45
  %278 = fmul float %274, %215, !dbg !45
  %279 = fmul float %275, %216, !dbg !45
  %280 = fmul float %276, %217, !dbg !45
  %281 = fmul float %253, %277, !dbg !46
  %282 = fmul float %254, %278, !dbg !46
  %283 = fmul float %255, %279, !dbg !46
  %284 = fmul float %256, %280, !dbg !46
  %285 = select i1 %22, float %281, float -0.000000e+00, !dbg !47
  %286 = fadd float %79, %285, !dbg !47
  %287 = select i1 %22, float %282, float -0.000000e+00, !dbg !47
  %288 = fadd float %80, %287, !dbg !47
  %289 = select i1 %22, float %283, float -0.000000e+00, !dbg !47
  %290 = fadd float %81, %289, !dbg !47
  %291 = select i1 %22, float %284, float -0.000000e+00, !dbg !47
  %292 = fadd float %82, %291, !dbg !47
  %293 = fmul <4 x float> %208, %243, !dbg !48
  %294 = insertelement <8 x float> poison, float %257, i64 0, !dbg !49
  %295 = insertelement <8 x float> %294, float %258, i64 1, !dbg !49
  %296 = insertelement <8 x float> %295, float %259, i64 2, !dbg !49
  %297 = insertelement <8 x float> %296, float %260, i64 3, !dbg !49
  %298 = insertelement <8 x float> %297, float %230, i64 4, !dbg !49
  %299 = insertelement <8 x float> %298, float %231, i64 5, !dbg !49
  %300 = insertelement <8 x float> %299, float %232, i64 6, !dbg !49
  %301 = insertelement <8 x float> %300, float %233, i64 7, !dbg !49
  %302 = shufflevector <4 x float> %252, <4 x float> %293, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !49
  %303 = fmul <8 x float> %301, %302, !dbg !49
  %304 = select <8 x i1> %77, <8 x float> %303, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !14
  %305 = fadd <8 x float> %85, %304, !dbg !14
  br i1 %83, label %78, label %306, !dbg !15

306:                                              ; preds = %78
  %307 = lshr i32 %16, 5, !dbg !8
  %308 = and i32 %307, 7, !dbg !8
  %309 = and i32 %16, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %310 = fadd float %286, %288, !dbg !54
  %311 = fadd float %290, %310, !dbg !54
  %312 = fadd float %292, %311, !dbg !54
  %313 = bitcast float %312 to i32, !dbg !50
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 16, i32 31), !dbg !50
  %315 = bitcast i32 %314 to float, !dbg !50
  %316 = fadd float %312, %315, !dbg !54
  %317 = bitcast float %316 to i32, !dbg !50
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 8, i32 31), !dbg !50
  %319 = bitcast i32 %318 to float, !dbg !50
  %320 = fadd float %316, %319, !dbg !54
  %321 = bitcast float %320 to i32, !dbg !50
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 4, i32 31), !dbg !50
  %323 = bitcast i32 %322 to float, !dbg !50
  %324 = fadd float %320, %323, !dbg !54
  %325 = bitcast float %324 to i32, !dbg !50
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 2, i32 31), !dbg !50
  %327 = bitcast i32 %326 to float, !dbg !50
  %328 = fadd float %324, %327, !dbg !54
  %329 = bitcast float %328 to i32, !dbg !50
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 1, i32 31), !dbg !50
  %331 = bitcast i32 %330 to float, !dbg !50
  %332 = fadd float %328, %331, !dbg !54
  %333 = icmp eq i32 %309, 0, !dbg !50
  %334 = zext nneg i32 %308 to i64, !dbg !50
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i64 %334, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, float %332, i1 %333) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %336 = icmp slt i32 %16, 8, !dbg !50
  %337 = sext i32 %16 to i64, !dbg !50
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i64 %337, !dbg !50
  %339 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %338, i1 %336) #3, !dbg !50
  %340 = bitcast float %339 to i32, !dbg !50
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !50
  %342 = bitcast i32 %341 to float, !dbg !50
  %343 = fadd float %339, %342, !dbg !54
  %344 = bitcast float %343 to i32, !dbg !50
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 2, i32 31), !dbg !50
  %346 = bitcast i32 %345 to float, !dbg !50
  %347 = fadd float %343, %346, !dbg !54
  %348 = bitcast float %347 to i32, !dbg !50
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 1, i32 31), !dbg !50
  %350 = bitcast i32 %349 to float, !dbg !50
  %351 = fadd float %347, %350, !dbg !54
  %352 = and i32 %16, 7, !dbg !50
  %353 = icmp eq i32 %352, 0, !dbg !50
  %354 = and i1 %336, %353, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, float %351, i1 %354) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %355 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %356 = insertelement <1 x float> undef, float %355, i64 0, !dbg !58
  store <1 x float> %356, ptr addrspace(3) @global_smem, align 4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %357 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !58
  %358 = getelementptr float, ptr addrspace(1) %10, i64 %23, !dbg !59
  %359 = icmp eq i32 %urem, 0, !dbg !60
  %360 = and i1 %359, %22, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %357, ptr addrspace(1) %358, i1 %360) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %shift = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !63
  %361 = fadd <8 x float> %305, %shift, !dbg !63
  %shift36 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison>, !dbg !63
  %362 = fadd <8 x float> %shift36, %361, !dbg !63
  %shift37 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison>, !dbg !63
  %363 = fadd <8 x float> %shift37, %362, !dbg !63
  %364 = extractelement <8 x float> %363, i64 4, !dbg !63
  %365 = bitcast float %364 to i32, !dbg !61
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 16, i32 31), !dbg !61
  %367 = bitcast i32 %366 to float, !dbg !61
  %368 = fadd float %364, %367, !dbg !63
  %369 = bitcast float %368 to i32, !dbg !61
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 8, i32 31), !dbg !61
  %371 = bitcast i32 %370 to float, !dbg !61
  %372 = fadd float %368, %371, !dbg !63
  %373 = bitcast float %372 to i32, !dbg !61
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 4, i32 31), !dbg !61
  %375 = bitcast i32 %374 to float, !dbg !61
  %376 = fadd float %372, %375, !dbg !63
  %377 = bitcast float %376 to i32, !dbg !61
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 2, i32 31), !dbg !61
  %379 = bitcast i32 %378 to float, !dbg !61
  %380 = fadd float %376, %379, !dbg !63
  %381 = bitcast float %380 to i32, !dbg !61
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 1, i32 31), !dbg !61
  %383 = bitcast i32 %382 to float, !dbg !61
  %384 = fadd float %380, %383, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, float %384, i1 %333) #3, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %385 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %338, i1 %336) #3, !dbg !61
  %386 = bitcast float %385 to i32, !dbg !61
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 4, i32 31), !dbg !61
  %388 = bitcast i32 %387 to float, !dbg !61
  %389 = fadd float %385, %388, !dbg !63
  %390 = bitcast float %389 to i32, !dbg !61
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 2, i32 31), !dbg !61
  %392 = bitcast i32 %391 to float, !dbg !61
  %393 = fadd float %389, %392, !dbg !63
  %394 = bitcast float %393 to i32, !dbg !61
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 1, i32 31), !dbg !61
  %396 = bitcast i32 %395 to float, !dbg !61
  %397 = fadd float %393, %396, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, float %397, i1 %354) #3, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %398 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %399 = insertelement <1 x float> undef, float %398, i64 0, !dbg !66
  store <1 x float> %399, ptr addrspace(3) @global_smem, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %400 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !66
  %401 = getelementptr float, ptr addrspace(1) %11, i64 %23, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %400, ptr addrspace(1) %401, i1 %360) #3, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %shift38 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %402 = fadd <8 x float> %305, %shift38, !dbg !71
  %shift39 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %403 = fadd <8 x float> %shift39, %402, !dbg !71
  %shift40 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %404 = fadd <8 x float> %shift40, %403, !dbg !71
  %405 = extractelement <8 x float> %404, i64 0, !dbg !71
  %406 = bitcast float %405 to i32, !dbg !69
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 16, i32 31), !dbg !69
  %408 = bitcast i32 %407 to float, !dbg !69
  %409 = fadd float %405, %408, !dbg !71
  %410 = bitcast float %409 to i32, !dbg !69
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 8, i32 31), !dbg !69
  %412 = bitcast i32 %411 to float, !dbg !69
  %413 = fadd float %409, %412, !dbg !71
  %414 = bitcast float %413 to i32, !dbg !69
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 4, i32 31), !dbg !69
  %416 = bitcast i32 %415 to float, !dbg !69
  %417 = fadd float %413, %416, !dbg !71
  %418 = bitcast float %417 to i32, !dbg !69
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 2, i32 31), !dbg !69
  %420 = bitcast i32 %419 to float, !dbg !69
  %421 = fadd float %417, %420, !dbg !71
  %422 = bitcast float %421 to i32, !dbg !69
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 1, i32 31), !dbg !69
  %424 = bitcast i32 %423 to float, !dbg !69
  %425 = fadd float %421, %424, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, float %425, i1 %333) #3, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %426 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %338, i1 %336) #3, !dbg !69
  %427 = bitcast float %426 to i32, !dbg !69
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 4, i32 31), !dbg !69
  %429 = bitcast i32 %428 to float, !dbg !69
  %430 = fadd float %426, %429, !dbg !71
  %431 = bitcast float %430 to i32, !dbg !69
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 2, i32 31), !dbg !69
  %433 = bitcast i32 %432 to float, !dbg !69
  %434 = fadd float %430, %433, !dbg !71
  %435 = bitcast float %434 to i32, !dbg !69
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 1, i32 31), !dbg !69
  %437 = bitcast i32 %436 to float, !dbg !69
  %438 = fadd float %434, %437, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, float %438, i1 %354) #3, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %439 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !69
  %440 = getelementptr float, ptr addrspace(1) %12, i64 %23, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %439, ptr addrspace(1) %440, i1 %360) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cvvzq4ujm2jska5zzcbwn7dt5zyqheaskuqysxwcfrbkfntklusj.py", directory: "/tmp/torchinductor_zeus/vv")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 26, column: 30, scope: !5)
!12 = !DILocation(line: 26, column: 35, scope: !5)
!13 = !DILocation(line: 49, column: 23, scope: !5)
!14 = !DILocation(line: 68, column: 48, scope: !5)
!15 = !DILocation(line: 30, column: 36, scope: !5)
!16 = !DILocation(line: 31, column: 27, scope: !5)
!17 = !DILocation(line: 34, column: 45, scope: !5)
!18 = !DILocation(line: 34, column: 40, scope: !5)
!19 = !DILocation(line: 34, column: 34, scope: !5)
!20 = !DILocation(line: 34, column: 51, scope: !5)
!21 = !DILocation(line: 34, column: 111, scope: !5)
!22 = !DILocation(line: 35, column: 34, scope: !5)
!23 = !DILocation(line: 35, column: 51, scope: !5)
!24 = !DILocation(line: 35, column: 111, scope: !5)
!25 = !DILocation(line: 36, column: 34, scope: !5)
!26 = !DILocation(line: 36, column: 51, scope: !5)
!27 = !DILocation(line: 36, column: 111, scope: !5)
!28 = !DILocation(line: 37, column: 34, scope: !5)
!29 = !DILocation(line: 37, column: 39, scope: !5)
!30 = !DILocation(line: 38, column: 35, scope: !5)
!31 = !DILocation(line: 38, column: 52, scope: !5)
!32 = !DILocation(line: 39, column: 35, scope: !5)
!33 = !DILocation(line: 40, column: 35, scope: !5)
!34 = !DILocation(line: 41, column: 35, scope: !5)
!35 = !DILocation(line: 42, column: 35, scope: !5)
!36 = !DILocation(line: 45, column: 22, scope: !5)
!37 = !DILocation(line: 47, column: 22, scope: !5)
!38 = !DILocation(line: 50, column: 23, scope: !5)
!39 = !DILocation(line: 39, column: 40, scope: !5)
!40 = !DILocation(line: 40, column: 52, scope: !5)
!41 = !DILocation(line: 40, column: 112, scope: !5)
!42 = !DILocation(line: 41, column: 40, scope: !5)
!43 = !DILocation(line: 42, column: 52, scope: !5)
!44 = !DILocation(line: 53, column: 24, scope: !5)
!45 = !DILocation(line: 54, column: 24, scope: !5)
!46 = !DILocation(line: 55, column: 23, scope: !5)
!47 = !DILocation(line: 58, column: 48, scope: !5)
!48 = !DILocation(line: 60, column: 24, scope: !5)
!49 = !DILocation(line: 65, column: 24, scope: !5)
!50 = !DILocation(line: 243, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !5, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!53 = !DILocation(line: 69, column: 27, scope: !51)
!54 = !DILocation(line: 233, column: 15, scope: !55, inlinedAt: !56)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 243, column: 36, scope: !55, inlinedAt: !57)
!57 = !DILocation(line: 69, column: 27, scope: !55)
!58 = !DILocation(line: 69, column: 30, scope: !5)
!59 = !DILocation(line: 70, column: 25, scope: !5)
!60 = !DILocation(line: 70, column: 37, scope: !5)
!61 = !DILocation(line: 243, column: 36, scope: !51, inlinedAt: !62)
!62 = !DILocation(line: 71, column: 27, scope: !51)
!63 = !DILocation(line: 233, column: 15, scope: !55, inlinedAt: !64)
!64 = !DILocation(line: 243, column: 36, scope: !55, inlinedAt: !65)
!65 = !DILocation(line: 71, column: 27, scope: !55)
!66 = !DILocation(line: 71, column: 30, scope: !5)
!67 = !DILocation(line: 72, column: 25, scope: !5)
!68 = !DILocation(line: 72, column: 37, scope: !5)
!69 = !DILocation(line: 243, column: 36, scope: !51, inlinedAt: !70)
!70 = !DILocation(line: 73, column: 27, scope: !51)
!71 = !DILocation(line: 233, column: 15, scope: !55, inlinedAt: !72)
!72 = !DILocation(line: 243, column: 36, scope: !55, inlinedAt: !73)
!73 = !DILocation(line: 73, column: 27, scope: !55)
!74 = !DILocation(line: 74, column: 25, scope: !5)
!75 = !DILocation(line: 74, column: 37, scope: !5)
!76 = !DILocation(line: 74, column: 4, scope: !5)
