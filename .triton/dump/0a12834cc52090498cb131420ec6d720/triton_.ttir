module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg11: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg12: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg14: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c2304_i32 = arith.constant 2304 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x1024xbf16>
    %c1024_i32 = arith.constant 1024 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x1xf32>
    %cst_1 = arith.constant dense<2304> : tensor<1x1024xi32>
    %cst_2 = arith.constant dense<2048> : tensor<1x1024xi32>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c2304_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<1024xi32>) -> tensor<1x1024xi32>
    %5 = tt.addptr %arg4, %0 : !tt.ptr<f32, 1>, i32
    %6 = tt.splat %5 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %7 = tt.load %6, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %8 = tt.splat %0 : (i32) -> tensor<1x1024xi32>
    %9 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %10 = tt.splat %1 : (i1) -> tensor<1x1024xi1>
    %11 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %12 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %13 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %14 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %15 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %16 = tt.splat %arg7 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %17 = tt.splat %arg8 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %18 = tt.splat %arg9 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %19 = arith.addf %7, %cst_0 : tensor<1x1xf32>
    %20 = tt.broadcast %19 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
    %21:3 = scf.for %arg15 = %c0_i32 to %c2048_i32 step %c1024_i32 iter_args(%arg16 = %cst_3, %arg17 = %cst_3, %arg18 = %cst_3) -> (tensor<1x1024xf32>, tensor<1x1024xf32>, tensor<1x1024xf32>)  : i32 {
      %34 = tt.splat %arg15 : (i32) -> tensor<1x1024xi32>
      %35 = arith.addi %34, %4 : tensor<1x1024xi32>
      %36 = arith.cmpi slt, %35, %cst_2 : tensor<1x1024xi32>
      %37 = arith.muli %35, %cst_1 : tensor<1x1024xi32>
      %38 = arith.addi %8, %37 : tensor<1x1024xi32>
      %39 = tt.addptr %9, %38 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %40 = arith.andi %36, %10 : tensor<1x1024xi1>
      %41 = tt.load %39, %40, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %42 = arith.extf %41 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %43 = tt.addptr %11, %38 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %44 = tt.load %43, %40, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %45 = arith.extf %44 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %46 = tt.addptr %12, %38 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %47 = tt.load %46, %40, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %48 = arith.extf %47 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %49 = tt.addptr %13, %35 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %50 = tt.load %49, %36, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %51 = tt.addptr %14, %38 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %52 = tt.load %51, %40, %cst_3 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32>
      %53 = tt.addptr %15, %35 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %54 = tt.load %53, %36, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %55 = tt.addptr %16, %38 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %56 = tt.load %55, %40, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %57 = arith.extf %56 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %58 = tt.addptr %17, %35 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %59 = tt.load %58, %36, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %60 = tt.addptr %18, %38 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %61 = tt.load %60, %40, %cst_3 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32>
      %62 = arith.addf %42, %45 : tensor<1x1024xf32>
      %63 = arith.mulf %48, %50 : tensor<1x1024xf32>
      %64 = arith.mulf %63, %20 : tensor<1x1024xf32>
      %65 = arith.addf %64, %52 : tensor<1x1024xf32>
      %66 = arith.mulf %65, %54 : tensor<1x1024xf32>
      %67 = arith.mulf %62, %66 : tensor<1x1024xf32>
      %68 = arith.addf %arg16, %67 : tensor<1x1024xf32>
      %69 = arith.select %40, %68, %arg16 : tensor<1x1024xi1>, tensor<1x1024xf32>
      %70 = arith.mulf %52, %59 : tensor<1x1024xf32>
      %71 = arith.mulf %57, %70 : tensor<1x1024xf32>
      %72 = arith.addf %arg17, %71 : tensor<1x1024xf32>
      %73 = arith.select %40, %72, %arg17 : tensor<1x1024xi1>, tensor<1x1024xf32>
      %74 = arith.mulf %61, %63 : tensor<1x1024xf32>
      %75 = arith.addf %arg18, %74 : tensor<1x1024xf32>
      %76 = arith.select %40, %75, %arg18 : tensor<1x1024xi1>, tensor<1x1024xf32>
      scf.yield %69, %73, %76 : tensor<1x1024xf32>, tensor<1x1024xf32>, tensor<1x1024xf32>
    }
    %22 = "tt.reduce"(%21#0) <{axis = 1 : i32}> ({
    ^bb0(%arg15: f32, %arg16: f32):
      %34 = arith.addf %arg15, %arg16 : f32
      tt.reduce.return %34 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %23 = tt.expand_dims %22 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %24 = tt.addptr %arg10, %0 : !tt.ptr<f32, 1>, i32
    %25 = tt.splat %24 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %25, %23, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %26 = "tt.reduce"(%21#1) <{axis = 1 : i32}> ({
    ^bb0(%arg15: f32, %arg16: f32):
      %34 = arith.addf %arg15, %arg16 : f32
      tt.reduce.return %34 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %27 = tt.expand_dims %26 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %28 = tt.addptr %arg11, %0 : !tt.ptr<f32, 1>, i32
    %29 = tt.splat %28 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %29, %27, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %30 = "tt.reduce"(%21#2) <{axis = 1 : i32}> ({
    ^bb0(%arg15: f32, %arg16: f32):
      %34 = arith.addf %arg15, %arg16 : f32
      tt.reduce.return %34 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %31 = tt.expand_dims %30 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %32 = tt.addptr %arg12, %0 : !tt.ptr<f32, 1>, i32
    %33 = tt.splat %32 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %33, %31, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    tt.return
  }
}
