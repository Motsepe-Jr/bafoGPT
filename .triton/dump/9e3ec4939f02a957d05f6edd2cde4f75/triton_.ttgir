#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7de8de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<3584> : tensor<1x2048xi32, #blocked>
    %c0_i32 = arith.constant 0 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c3584_i32 = arith.constant 3584 : i32
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked>
    %cst_2 = arith.constant dense<3.584000e+03> : tensor<1x1xf32, #blocked>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %3 = arith.muli %0, %c3584_i32 : i32
    %4 = tt.splat %3 : (i32) -> tensor<1x2048xi32, #blocked>
    %5 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %6 = scf.for %arg9 = %c0_i32 to %c3584_i32 step %c2048_i32 iter_args(%arg10 = %cst_3) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %25 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked>
      %26 = arith.addi %25, %2 : tensor<1x2048xi32, #blocked>
      %27 = arith.cmpi slt, %26, %cst : tensor<1x2048xi32, #blocked>
      %28 = arith.addi %26, %4 : tensor<1x2048xi32, #blocked>
      %29 = tt.addptr %5, %28 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %30 = tt.load %29, %27, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %31 = arith.extf %30 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %32 = arith.mulf %31, %31 : tensor<1x2048xf32, #blocked>
      %33 = arith.addf %arg10, %32 : tensor<1x2048xf32, #blocked>
      %34 = arith.select %27, %33, %arg10 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %34 : tensor<1x2048xf32, #blocked>
    }
    %7 = "tt.reduce"(%6) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32, %arg10: f32):
      %25 = arith.addf %arg9, %arg10 : f32
      tt.reduce.return %25 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %8 = triton_gpu.convert_layout %7 : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %9 = tt.expand_dims %8 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<1x1xf32, #blocked1>
    %10 = tt.expand_dims %7 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %11 = tt.addptr %arg4, %0 : !tt.ptr<f32, 1>, i32
    %12 = tt.splat %11 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked1>
    tt.store %12, %9 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32, #blocked1>
    %13 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %14 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %15 = arith.divf %10, %cst_2 : tensor<1x1xf32, #blocked>
    %16 = arith.addf %15, %cst_1 : tensor<1x1xf32, #blocked>
    %17 = scf.for %arg9 = %c0_i32 to %c3584_i32 step %c2048_i32 iter_args(%arg10 = %cst_3) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %25 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked>
      %26 = arith.addi %25, %2 : tensor<1x2048xi32, #blocked>
      %27 = arith.cmpi slt, %26, %cst : tensor<1x2048xi32, #blocked>
      %28 = arith.addi %26, %4 : tensor<1x2048xi32, #blocked>
      %29 = tt.addptr %5, %28 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %30 = tt.load %29, %27, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %31 = arith.extf %30 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %32 = tt.addptr %13, %26 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %33 = tt.load %32, %27, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %34 = tt.addptr %14, %28 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %35 = tt.load %34, %27, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %36 = tt.extern_elementwise %16 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %37 = tt.broadcast %36 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %38 = arith.mulf %31, %37 : tensor<1x2048xf32, #blocked>
      %39 = arith.addf %33, %cst_0 : tensor<1x2048xf32, #blocked>
      %40 = arith.mulf %38, %39 : tensor<1x2048xf32, #blocked>
      %41 = arith.addf %40, %35 : tensor<1x2048xf32, #blocked>
      %42 = arith.mulf %41, %41 : tensor<1x2048xf32, #blocked>
      %43 = arith.addf %arg10, %42 : tensor<1x2048xf32, #blocked>
      %44 = arith.select %27, %43, %arg10 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %44 : tensor<1x2048xf32, #blocked>
    }
    %18 = "tt.reduce"(%17) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32, %arg10: f32):
      %25 = arith.addf %arg9, %arg10 : f32
      tt.reduce.return %25 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %19 = tt.expand_dims %18 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %20 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %21 = arith.divf %19, %cst_2 : tensor<1x1xf32, #blocked>
    %22 = arith.addf %21, %cst_1 : tensor<1x1xf32, #blocked>
    %23 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %24 = tt.splat %arg6 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg9 = %c0_i32 to %c3584_i32 step %c2048_i32  : i32 {
      %25 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked>
      %26 = arith.addi %25, %2 : tensor<1x2048xi32, #blocked>
      %27 = arith.cmpi slt, %26, %cst : tensor<1x2048xi32, #blocked>
      %28 = arith.addi %26, %4 : tensor<1x2048xi32, #blocked>
      %29 = tt.addptr %5, %28 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %30 = tt.load %29, %27, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %31 = arith.extf %30 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %32 = tt.addptr %13, %26 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %33 = tt.load %32, %27, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %34 = tt.addptr %14, %28 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %35 = tt.load %34, %27, %cst_3 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %36 = tt.addptr %20, %26 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %37 = tt.load %36, %27, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %38 = tt.extern_elementwise %16 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %39 = tt.broadcast %38 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %40 = arith.mulf %31, %39 : tensor<1x2048xf32, #blocked>
      %41 = arith.addf %33, %cst_0 : tensor<1x2048xf32, #blocked>
      %42 = arith.mulf %40, %41 : tensor<1x2048xf32, #blocked>
      %43 = arith.addf %42, %35 : tensor<1x2048xf32, #blocked>
      %44 = tt.extern_elementwise %22 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %45 = tt.broadcast %44 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %46 = arith.mulf %43, %45 : tensor<1x2048xf32, #blocked>
      %47 = arith.addf %37, %cst_0 : tensor<1x2048xf32, #blocked>
      %48 = arith.mulf %46, %47 : tensor<1x2048xf32, #blocked>
      %49 = tt.addptr %23, %28 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %50 = arith.truncf %48 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked>
      tt.store %49, %50, %27 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
      %51 = tt.addptr %24, %28 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      tt.store %51, %50, %27 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16, #blocked>
    }
    tt.return
  }
}
