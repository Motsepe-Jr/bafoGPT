; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3de4de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = lshr i32 %6, 5, !dbg !10
  %urem = shl i32 %6, 3, !dbg !10
  %8 = and i32 %urem, 2040, !dbg !10
  %9 = or i32 %8, 4, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %11 = mul i32 %10, 2304, !dbg !12
  %12 = add i32 %11, %9
  %13 = add i32 %8, %11, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = sext i32 %12 to i64, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !14
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !15
  %28 = or i32 %8, 2048, !dbg !16
  %29 = icmp ult i32 %28, 2304, !dbg !17
  %30 = add i32 %28, %11, !dbg !13
  %31 = add i32 %12, 2048, !dbg !13
  %32 = sext i32 %30 to i64, !dbg !14
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !14
  %34 = sext i32 %31 to i64, !dbg !14
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !14
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #6, !dbg !15
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !15
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !15
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !15
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #6, !dbg !15
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !15
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !15
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !15
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !15
  %46 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !15
  %47 = insertelement <2 x i32> %46, i32 %20, i64 1, !dbg !15
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !15
  %49 = fmul <2 x float> %48, %48, !dbg !18
  %50 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !15
  %51 = insertelement <2 x i32> %50, i32 %38, i64 1, !dbg !15
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !15
  %53 = fmul <2 x float> %52, %52, !dbg !18
  %54 = insertelement <2 x i1> poison, i1 %29, i64 0, !dbg !19
  %55 = shufflevector <2 x i1> %54, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !19
  %56 = select <2 x i1> %55, <2 x float> %53, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %57 = fadd <2 x float> %49, %56, !dbg !19
  %58 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !15
  %59 = insertelement <2 x i32> %58, i32 %21, i64 1, !dbg !15
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !15
  %61 = fmul <2 x float> %60, %60, !dbg !18
  %62 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !15
  %63 = insertelement <2 x i32> %62, i32 %39, i64 1, !dbg !15
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !15
  %65 = fmul <2 x float> %64, %64, !dbg !18
  %66 = select <2 x i1> %55, <2 x float> %65, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %67 = fadd <2 x float> %61, %66, !dbg !19
  %68 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !15
  %69 = insertelement <2 x i32> %68, i32 %24, i64 1, !dbg !15
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !15
  %71 = fmul <2 x float> %70, %70, !dbg !18
  %72 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !15
  %73 = insertelement <2 x i32> %72, i32 %42, i64 1, !dbg !15
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !15
  %75 = fmul <2 x float> %74, %74, !dbg !18
  %76 = select <2 x i1> %55, <2 x float> %75, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %77 = fadd <2 x float> %71, %76, !dbg !19
  %78 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !15
  %79 = insertelement <2 x i32> %78, i32 %26, i64 1, !dbg !15
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !15
  %81 = fmul <2 x float> %80, %80, !dbg !18
  %82 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !15
  %83 = insertelement <2 x i32> %82, i32 %44, i64 1, !dbg !15
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !15
  %85 = fmul <2 x float> %84, %84, !dbg !18
  %86 = select <2 x i1> %55, <2 x float> %85, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !19
  %87 = fadd <2 x float> %81, %86, !dbg !19
  %88 = and i32 %6, 31, !dbg !10
  %89 = and i32 %7, 7, !dbg !10
  %shift = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %90 = fadd <2 x float> %57, %shift, !dbg !20
  %shift30 = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %91 = fadd <2 x float> %shift30, %90, !dbg !20
  %92 = fadd <2 x float> %67, %91, !dbg !20
  %shift31 = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %93 = fadd <2 x float> %shift31, %92, !dbg !20
  %94 = fadd <2 x float> %77, %93, !dbg !20
  %shift32 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %95 = fadd <2 x float> %shift32, %94, !dbg !20
  %96 = fadd <2 x float> %87, %95, !dbg !20
  %97 = extractelement <2 x float> %96, i64 0, !dbg !20
  %98 = bitcast float %97 to i32, !dbg !26
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !26
  %100 = bitcast i32 %99 to float, !dbg !26
  %101 = fadd float %97, %100, !dbg !20
  %102 = bitcast float %101 to i32, !dbg !26
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !26
  %104 = bitcast i32 %103 to float, !dbg !26
  %105 = fadd float %101, %104, !dbg !20
  %106 = bitcast float %105 to i32, !dbg !26
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !26
  %108 = bitcast i32 %107 to float, !dbg !26
  %109 = fadd float %105, %108, !dbg !20
  %110 = bitcast float %109 to i32, !dbg !26
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !26
  %112 = bitcast i32 %111 to float, !dbg !26
  %113 = fadd float %109, %112, !dbg !20
  %114 = bitcast float %113 to i32, !dbg !26
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !26
  %116 = bitcast i32 %115 to float, !dbg !26
  %117 = fadd float %113, %116, !dbg !20
  %118 = icmp eq i32 %88, 0, !dbg !26
  %119 = zext nneg i32 %89 to i64, !dbg !26
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i64 %119, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, float %117, i1 %118) #6, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %121 = icmp slt i32 %6, 8, !dbg !26
  %122 = sext i32 %6 to i64, !dbg !26
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i64 %122, !dbg !26
  %124 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %123, i1 %121) #6, !dbg !26
  %125 = bitcast float %124 to i32, !dbg !26
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !26
  %127 = bitcast i32 %126 to float, !dbg !26
  %128 = fadd float %124, %127, !dbg !20
  %129 = bitcast float %128 to i32, !dbg !26
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !26
  %131 = bitcast i32 %130 to float, !dbg !26
  %132 = fadd float %128, %131, !dbg !20
  %133 = bitcast float %132 to i32, !dbg !26
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !26
  %135 = bitcast i32 %134 to float, !dbg !26
  %136 = fadd float %132, %135, !dbg !20
  %137 = and i32 %6, 7, !dbg !26
  %138 = icmp eq i32 %137, 0, !dbg !26
  %139 = and i1 %121, %138, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, float %136, i1 %139) #6, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %140 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !26
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.304000e+03) #6, !dbg !28
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.304000e+03) #6, !dbg !28
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.304000e+03) #6, !dbg !28
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.304000e+03) #6, !dbg !28
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.304000e+03) #6, !dbg !28
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.304000e+03) #6, !dbg !28
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.304000e+03) #6, !dbg !28
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.304000e+03) #6, !dbg !28
  %149 = fadd float %141, 0x3EE4F8B580000000, !dbg !29
  br label %150, !dbg !30

150:                                              ; preds = %5, %__nv_rsqrtf.exit
  %151 = phi i1 [ true, %5 ], [ false, %__nv_rsqrtf.exit ]
  %152 = phi i32 [ 0, %5 ], [ 2048, %__nv_rsqrtf.exit ]
  %153 = or i32 %152, %8, !dbg !31
  %154 = or i32 %152, %9, !dbg !31
  %155 = icmp ult i32 %153, 2304, !dbg !32
  %156 = add i32 %153, %11, !dbg !33
  %157 = add i32 %154, %11, !dbg !33
  %158 = sext i32 %156 to i64, !dbg !34
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !34
  %160 = sext i32 %157 to i64, !dbg !34
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !34
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %159, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155) #6, !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !35
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !35
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !35
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !35
  %167 = bitcast i32 %163 to float, !dbg !35
  %168 = bitcast i32 %164 to float, !dbg !35
  %169 = bitcast i32 %165 to float, !dbg !35
  %170 = bitcast i32 %166 to float, !dbg !35
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155) #6, !dbg !35
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !35
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !35
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !35
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !35
  %176 = bitcast i32 %172 to float, !dbg !35
  %177 = bitcast i32 %173 to float, !dbg !35
  %178 = bitcast i32 %174 to float, !dbg !35
  %179 = bitcast i32 %175 to float, !dbg !35
  %180 = zext nneg i32 %153 to i64, !dbg !36
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !36
  %182 = zext nneg i32 %154 to i64, !dbg !36
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %182, !dbg !36
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155) #6, !dbg !37
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !37
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !37
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !37
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !37
  %189 = bitcast i32 %185 to float, !dbg !37
  %190 = bitcast i32 %186 to float, !dbg !37
  %191 = bitcast i32 %187 to float, !dbg !37
  %192 = bitcast i32 %188 to float, !dbg !37
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %183, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155) #6, !dbg !37
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !37
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !37
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !37
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !37
  %198 = bitcast i32 %194 to float, !dbg !37
  %199 = bitcast i32 %195 to float, !dbg !37
  %200 = bitcast i32 %196 to float, !dbg !37
  %201 = bitcast i32 %197 to float, !dbg !37
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !38
  %.not.i = icmp eq i32 %202, 0, !dbg !38
  br i1 %.not.i, label %205, label %203, !dbg !38

203:                                              ; preds = %150
  %204 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %149), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

205:                                              ; preds = %150
  %206 = tail call float @llvm.nvvm.rsqrt.approx.f(float %149), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %203, %205
  %.0.i = phi float [ %204, %203 ], [ %206, %205 ], !dbg !38
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !38
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !38
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !38
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !38
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !38
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !38
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !38
  %214 = fmul float %.0.i, %167, !dbg !39
  %215 = fmul float %.0.i, %168, !dbg !39
  %216 = fmul float %.0.i, %169, !dbg !39
  %217 = fmul float %.0.i, %170, !dbg !39
  %218 = fmul float %.0.i, %176, !dbg !39
  %219 = fmul float %.0.i, %177, !dbg !39
  %220 = fmul float %.0.i, %178, !dbg !39
  %221 = fmul float %.0.i, %179, !dbg !39
  %222 = fadd float %189, 1.000000e+00, !dbg !40
  %223 = fadd float %190, 1.000000e+00, !dbg !40
  %224 = fadd float %191, 1.000000e+00, !dbg !40
  %225 = fadd float %192, 1.000000e+00, !dbg !40
  %226 = fadd float %198, 1.000000e+00, !dbg !40
  %227 = fadd float %199, 1.000000e+00, !dbg !40
  %228 = fadd float %200, 1.000000e+00, !dbg !40
  %229 = fadd float %201, 1.000000e+00, !dbg !40
  %230 = fmul float %222, %214, !dbg !41
  %231 = fmul float %223, %215, !dbg !41
  %232 = fmul float %224, %216, !dbg !41
  %233 = fmul float %225, %217, !dbg !41
  %234 = fmul float %226, %218, !dbg !41
  %235 = fmul float %227, %219, !dbg !41
  %236 = fmul float %228, %220, !dbg !41
  %237 = fmul float %229, %221, !dbg !41
  %238 = getelementptr i16, ptr addrspace(1) %2, i64 %158, !dbg !42
  %239 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %230) #6, !dbg !43
  %240 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %231) #6, !dbg !43
  %241 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %232) #6, !dbg !43
  %242 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %233) #6, !dbg !43
  %243 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %234) #6, !dbg !43
  %244 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %235) #6, !dbg !43
  %245 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %236) #6, !dbg !43
  %246 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %237) #6, !dbg !43
  %247 = insertelement <2 x i16> undef, i16 %239, i64 0, !dbg !43
  %248 = insertelement <2 x i16> %247, i16 %240, i64 1, !dbg !43
  %249 = bitcast <2 x i16> %248 to i32, !dbg !43
  %250 = insertelement <2 x i16> undef, i16 %241, i64 0, !dbg !43
  %251 = insertelement <2 x i16> %250, i16 %242, i64 1, !dbg !43
  %252 = bitcast <2 x i16> %251 to i32, !dbg !43
  %253 = insertelement <2 x i16> undef, i16 %243, i64 0, !dbg !43
  %254 = insertelement <2 x i16> %253, i16 %244, i64 1, !dbg !43
  %255 = bitcast <2 x i16> %254 to i32, !dbg !43
  %256 = insertelement <2 x i16> undef, i16 %245, i64 0, !dbg !43
  %257 = insertelement <2 x i16> %256, i16 %246, i64 1, !dbg !43
  %258 = bitcast <2 x i16> %257 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %249, i32 %252, i32 %255, i32 %258, ptr addrspace(1) %238, i1 %155) #6, !dbg !43
  br i1 %151, label %150, label %259, !dbg !30

259:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cgdssrcta2j3excrfzrf72ttdgsf6yx677vshcew2xv6uohy6avs.py", directory: "/tmp/torchinductor_zeus/gd")
!4 = !{ptr @triton__0d1d2d3de4de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3de4de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3de4de", linkageName: "triton__0d1d2d3de4de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 28, column: 27, scope: !7)
!17 = !DILocation(line: 29, column: 25, scope: !7)
!18 = !DILocation(line: 32, column: 22, scope: !7)
!19 = !DILocation(line: 35, column: 38, scope: !7)
!20 = !DILocation(line: 233, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 243, column: 36, scope: !21, inlinedAt: !25)
!25 = !DILocation(line: 36, column: 25, scope: !21)
!26 = !DILocation(line: 243, column: 36, scope: !23, inlinedAt: !27)
!27 = !DILocation(line: 36, column: 25, scope: !23)
!28 = !DILocation(line: 44, column: 22, scope: !7)
!29 = !DILocation(line: 46, column: 22, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 27, scope: !7)
!32 = !DILocation(line: 39, column: 25, scope: !7)
!33 = !DILocation(line: 41, column: 40, scope: !7)
!34 = !DILocation(line: 41, column: 34, scope: !7)
!35 = !DILocation(line: 41, column: 51, scope: !7)
!36 = !DILocation(line: 42, column: 35, scope: !7)
!37 = !DILocation(line: 42, column: 40, scope: !7)
!38 = !DILocation(line: 47, column: 30, scope: !7)
!39 = !DILocation(line: 48, column: 23, scope: !7)
!40 = !DILocation(line: 50, column: 24, scope: !7)
!41 = !DILocation(line: 51, column: 24, scope: !7)
!42 = !DILocation(line: 53, column: 29, scope: !7)
!43 = !DILocation(line: 53, column: 53, scope: !7)
!44 = !DILocation(line: 37, column: 4, scope: !7)
