; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2de(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !5 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %5 = shl i32 %4, 3, !dbg !8
  %6 = and i32 %5, 1016, !dbg !8
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %8 = shl i32 %7, 10, !dbg !10
  %9 = or i32 %8, %6, !dbg !11
  %.frozen = freeze i32 %9
  %10 = sdiv i32 %.frozen, 4096, !dbg !12
  %11 = mul i32 %10, 4096
  %.decomposed = sub i32 %.frozen, %11
  %12 = shl nsw i32 %10, 8, !dbg !13
  %.lhs.trunc = trunc i32 %.decomposed to i16, !dbg !14
  %13 = sdiv i16 %.lhs.trunc, 256, !dbg !14
  %.sext = sext i16 %13 to i32, !dbg !14
  %14 = shl nsw i32 %.sext, 18, !dbg !15
  %15 = mul i16 %13, 256
  %.decomposed6 = sub i16 %.lhs.trunc, %15
  %.sext5 = sext i16 %.decomposed6 to i32, !dbg !16
  %16 = add nsw i32 %12, %.sext5, !dbg !17
  %17 = add nsw i32 %16, %14, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !20
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !20
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !20
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !20
  %25 = trunc i32 %21 to i16, !dbg !20
  %extelt.offset = lshr i32 %21, 16, !dbg !20
  %26 = trunc i32 %extelt.offset to i16, !dbg !20
  %27 = trunc i32 %22 to i16, !dbg !20
  %extelt.offset1 = lshr i32 %22, 16, !dbg !20
  %28 = trunc i32 %extelt.offset1 to i16, !dbg !20
  %29 = trunc i32 %23 to i16, !dbg !20
  %extelt.offset2 = lshr i32 %23, 16, !dbg !20
  %30 = trunc i32 %extelt.offset2 to i16, !dbg !20
  %31 = trunc i32 %24 to i16, !dbg !20
  %extelt.offset3 = lshr i32 %24, 16, !dbg !20
  %32 = trunc i32 %extelt.offset3 to i16, !dbg !20
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #1, !dbg !21
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #1, !dbg !21
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #1, !dbg !21
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #1, !dbg !21
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #1, !dbg !21
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #1, !dbg !21
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #1, !dbg !21
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #1, !dbg !21
  %41 = sext i32 %9 to i64, !dbg !22
  %42 = getelementptr i16, ptr addrspace(1) %1, i64 %41, !dbg !22
  %43 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %33) #1, !dbg !23
  %44 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %34) #1, !dbg !23
  %45 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %35) #1, !dbg !23
  %46 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %36) #1, !dbg !23
  %47 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %37) #1, !dbg !23
  %48 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %38) #1, !dbg !23
  %49 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %39) #1, !dbg !23
  %50 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %40) #1, !dbg !23
  %51 = insertelement <2 x i16> undef, i16 %43, i64 0, !dbg !23
  %52 = insertelement <2 x i16> %51, i16 %44, i64 1, !dbg !23
  %53 = bitcast <2 x i16> %52 to i32, !dbg !23
  %54 = insertelement <2 x i16> undef, i16 %45, i64 0, !dbg !23
  %55 = insertelement <2 x i16> %54, i16 %46, i64 1, !dbg !23
  %56 = bitcast <2 x i16> %55 to i32, !dbg !23
  %57 = insertelement <2 x i16> undef, i16 %47, i64 0, !dbg !23
  %58 = insertelement <2 x i16> %57, i16 %48, i64 1, !dbg !23
  %59 = bitcast <2 x i16> %58 to i32, !dbg !23
  %60 = insertelement <2 x i16> undef, i16 %49, i64 0, !dbg !23
  %61 = insertelement <2 x i16> %60, i16 %50, i64 1, !dbg !23
  %62 = bitcast <2 x i16> %61 to i32, !dbg !23
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %53, i32 %56, i32 %59, i32 %62, ptr addrspace(1) %42, i1 true) #1, !dbg !23
  ret void, !dbg !24
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cneb5re3tqjrdcvb4yslov4pk3d6tilledclfarhyzao6itiip5l.py", directory: "/tmp/torchinductor_zeus/ne")
!3 = !{ptr @triton__0d1d2de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2de", linkageName: "triton__0d1d2de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 20, scope: !5)
!13 = !DILocation(line: 26, column: 35, scope: !5)
!14 = !DILocation(line: 26, column: 56, scope: !5)
!15 = !DILocation(line: 26, column: 50, scope: !5)
!16 = !DILocation(line: 26, column: 70, scope: !5)
!17 = !DILocation(line: 26, column: 42, scope: !5)
!18 = !DILocation(line: 26, column: 65, scope: !5)
!19 = !DILocation(line: 26, column: 30, scope: !5)
!20 = !DILocation(line: 26, column: 77, scope: !5)
!21 = !DILocation(line: 26, column: 86, scope: !5)
!22 = !DILocation(line: 27, column: 25, scope: !5)
!23 = !DILocation(line: 27, column: 36, scope: !5)
!24 = !DILocation(line: 27, column: 4, scope: !5)
