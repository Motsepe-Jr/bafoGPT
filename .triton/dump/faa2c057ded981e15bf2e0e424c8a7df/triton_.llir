; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d9d10d11de12de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %15 = lshr i32 %14, 5, !dbg !10
  %urem = and i32 %14, 255, !dbg !10
  %16 = shl nuw nsw i32 %urem, 2, !dbg !10
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %18 = mul i32 %17, 2304, !dbg !12
  %19 = add i32 %16, %18, !dbg !13
  %20 = sext i32 %19 to i64, !dbg !14
  %21 = getelementptr i16, ptr addrspace(1) %2, i64 %20, !dbg !14
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !15
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !15
  %25 = trunc i32 %23 to i16, !dbg !15
  %extelt.offset6 = lshr i32 %23, 16, !dbg !15
  %26 = trunc i32 %extelt.offset6 to i16, !dbg !15
  %27 = trunc i32 %24 to i16, !dbg !15
  %extelt.offset7 = lshr i32 %24, 16, !dbg !15
  %28 = trunc i32 %extelt.offset7 to i16, !dbg !15
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !16
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !16
  %33 = or i32 %16, 1024, !dbg !17
  %34 = add i32 %33, %18, !dbg !13
  %35 = sext i32 %34 to i64, !dbg !14
  %36 = getelementptr i16, ptr addrspace(1) %2, i64 %35, !dbg !14
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !15
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !15
  %40 = trunc i32 %38 to i16, !dbg !15
  %extelt.offset6.1 = lshr i32 %38, 16, !dbg !15
  %41 = trunc i32 %extelt.offset6.1 to i16, !dbg !15
  %42 = trunc i32 %39 to i16, !dbg !15
  %extelt.offset7.1 = lshr i32 %39, 16, !dbg !15
  %43 = trunc i32 %extelt.offset7.1 to i16, !dbg !15
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #6, !dbg !16
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #6, !dbg !16
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #6, !dbg !16
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #6, !dbg !16
  %48 = or i32 %16, 2048, !dbg !17
  %49 = icmp ult i32 %48, 2304, !dbg !18
  %50 = add i32 %48, %18, !dbg !13
  %51 = sext i32 %50 to i64, !dbg !14
  %52 = getelementptr i16, ptr addrspace(1) %2, i64 %51, !dbg !14
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #6, !dbg !15
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !15
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !15
  %56 = trunc i32 %54 to i16, !dbg !15
  %extelt.offset6.2 = lshr i32 %54, 16, !dbg !15
  %57 = trunc i32 %extelt.offset6.2 to i16, !dbg !15
  %58 = trunc i32 %55 to i16, !dbg !15
  %extelt.offset7.2 = lshr i32 %55, 16, !dbg !15
  %59 = trunc i32 %extelt.offset7.2 to i16, !dbg !15
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #6, !dbg !16
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #6, !dbg !16
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #6, !dbg !16
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #6, !dbg !16
  %64 = insertelement <2 x float> poison, float %29, i64 0, !dbg !19
  %65 = insertelement <2 x float> %64, float %30, i64 1, !dbg !19
  %66 = fmul <2 x float> %65, %65, !dbg !19
  %67 = insertelement <2 x float> poison, float %44, i64 0, !dbg !19
  %68 = insertelement <2 x float> %67, float %45, i64 1, !dbg !19
  %69 = fmul <2 x float> %68, %68, !dbg !19
  %70 = fadd <2 x float> %66, %69, !dbg !20
  %71 = insertelement <2 x float> poison, float %60, i64 0, !dbg !19
  %72 = insertelement <2 x float> %71, float %61, i64 1, !dbg !19
  %73 = fmul <2 x float> %72, %72, !dbg !19
  %74 = insertelement <2 x i1> poison, i1 %49, i64 0, !dbg !20
  %75 = shufflevector <2 x i1> %74, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !20
  %76 = select <2 x i1> %75, <2 x float> %73, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !20
  %77 = fadd <2 x float> %70, %76, !dbg !20
  %78 = insertelement <2 x float> poison, float %32, i64 0, !dbg !19
  %79 = insertelement <2 x float> %78, float %31, i64 1, !dbg !19
  %80 = fmul <2 x float> %79, %79, !dbg !19
  %81 = insertelement <2 x float> poison, float %47, i64 0, !dbg !19
  %82 = insertelement <2 x float> %81, float %46, i64 1, !dbg !19
  %83 = fmul <2 x float> %82, %82, !dbg !19
  %84 = fadd <2 x float> %80, %83, !dbg !20
  %85 = insertelement <2 x float> poison, float %63, i64 0, !dbg !19
  %86 = insertelement <2 x float> %85, float %62, i64 1, !dbg !19
  %87 = fmul <2 x float> %86, %86, !dbg !19
  %88 = select <2 x i1> %75, <2 x float> %87, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !20
  %89 = fadd <2 x float> %84, %88, !dbg !20
  %90 = and i32 %14, 31, !dbg !10
  %91 = and i32 %15, 7, !dbg !10
  %shift = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %92 = fadd <2 x float> %77, %shift, !dbg !21
  %shift49 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %93 = fadd <2 x float> %shift49, %92, !dbg !21
  %94 = fadd <2 x float> %89, %93, !dbg !21
  %95 = extractelement <2 x float> %94, i64 0, !dbg !21
  %96 = bitcast float %95 to i32, !dbg !27
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 16, i32 31), !dbg !27
  %98 = bitcast i32 %97 to float, !dbg !27
  %99 = fadd float %95, %98, !dbg !21
  %100 = bitcast float %99 to i32, !dbg !27
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !27
  %102 = bitcast i32 %101 to float, !dbg !27
  %103 = fadd float %99, %102, !dbg !21
  %104 = bitcast float %103 to i32, !dbg !27
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 4, i32 31), !dbg !27
  %106 = bitcast i32 %105 to float, !dbg !27
  %107 = fadd float %103, %106, !dbg !21
  %108 = bitcast float %107 to i32, !dbg !27
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !27
  %110 = bitcast i32 %109 to float, !dbg !27
  %111 = fadd float %107, %110, !dbg !21
  %112 = bitcast float %111 to i32, !dbg !27
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !27
  %114 = bitcast i32 %113 to float, !dbg !27
  %115 = fadd float %111, %114, !dbg !21
  %116 = icmp eq i32 %90, 0, !dbg !27
  %117 = zext nneg i32 %91 to i64, !dbg !27
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i64 %117, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, float %115, i1 %116) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %119 = icmp slt i32 %14, 8, !dbg !27
  %120 = sext i32 %14 to i64, !dbg !27
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i64 %120, !dbg !27
  %122 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %119) #6, !dbg !27
  %123 = bitcast float %122 to i32, !dbg !27
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !27
  %125 = bitcast i32 %124 to float, !dbg !27
  %126 = fadd float %122, %125, !dbg !21
  %127 = bitcast float %126 to i32, !dbg !27
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !27
  %129 = bitcast i32 %128 to float, !dbg !27
  %130 = fadd float %126, %129, !dbg !21
  %131 = bitcast float %130 to i32, !dbg !27
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !27
  %133 = bitcast i32 %132 to float, !dbg !27
  %134 = fadd float %130, %133, !dbg !21
  %135 = and i32 %14, 7, !dbg !27
  %136 = icmp eq i32 %135, 0, !dbg !27
  %137 = and i1 %119, %136, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, float %134, i1 %137) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %138 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %139 = insertelement <1 x float> undef, float %138, i64 0, !dbg !29
  store <1 x float> %139, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %140 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.304000e+03) #6, !dbg !30
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 2.304000e+03) #6, !dbg !30
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 2.304000e+03) #6, !dbg !30
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 2.304000e+03) #6, !dbg !30
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 2.304000e+03) #6, !dbg !30
  %146 = fadd float %141, 0x3EE4F8B580000000, !dbg !31
  %147 = fadd float %142, 0x3EE4F8B580000000, !dbg !31
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %.not.i = icmp eq i32 %148, 0, !dbg !29
  br i1 %.not.i, label %151, label %149, !dbg !29

149:                                              ; preds = %13
  %150 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %146), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

151:                                              ; preds = %13
  %152 = tail call float @llvm.nvvm.rsqrt.approx.f(float %146), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %149, %151
  %.0.i = phi float [ %150, %149 ], [ %152, %151 ], !dbg !29
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %.not.i8 = icmp eq i32 %153, 0, !dbg !29
  br i1 %.not.i8, label %156, label %154, !dbg !29

154:                                              ; preds = %__nv_rsqrtf.exit
  %155 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !29
  br label %__nv_rsqrtf.exit10, !dbg !29

156:                                              ; preds = %__nv_rsqrtf.exit
  %157 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !29
  br label %__nv_rsqrtf.exit10, !dbg !29

__nv_rsqrtf.exit10:                               ; preds = %154, %156
  %.0.i9 = phi float [ %155, %154 ], [ %157, %156 ], !dbg !29
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %161 = sext i32 %17 to i64, !dbg !33
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !33
  %163 = icmp eq i32 %urem, 0, !dbg !34
  %164 = bitcast float %.0.i to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %162, i1 %163) #6, !dbg !34
  %165 = getelementptr float, ptr addrspace(1) %5, i64 %161, !dbg !35
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #6, !dbg !36
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #6, !dbg !36
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #6, !dbg !36
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #6, !dbg !36
  %170 = insertelement <4 x float> poison, float %.0.i9, i64 0, !dbg !37
  %171 = shufflevector <4 x float> %170, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !37
  %172 = insertelement <4 x i32> undef, i32 %166, i64 0, !dbg !38
  %173 = bitcast <4 x i32> %172 to <4 x float>, !dbg !38
  %174 = shufflevector <4 x float> %173, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  br label %175, !dbg !39

175:                                              ; preds = %__nv_rsqrtf.exit10, %175
  %176 = phi i32 [ 0, %__nv_rsqrtf.exit10 ], [ %267, %175 ]
  %177 = phi <4 x float> [ zeroinitializer, %__nv_rsqrtf.exit10 ], [ %261, %175 ]
  %178 = or i32 %176, %16, !dbg !40
  %179 = icmp ult i32 %178, 2304, !dbg !41
  %180 = add i32 %178, %18, !dbg !42
  %181 = sext i32 %180 to i64, !dbg !43
  %182 = getelementptr i16, ptr addrspace(1) %2, i64 %181, !dbg !43
  %183 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %182, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #6, !dbg !44
  %184 = extractvalue { i32, i32 } %183, 0, !dbg !44
  %185 = extractvalue { i32, i32 } %183, 1, !dbg !44
  %186 = trunc i32 %184 to i16, !dbg !44
  %extelt.offset = lshr i32 %184, 16, !dbg !44
  %187 = trunc i32 %extelt.offset to i16, !dbg !44
  %188 = trunc i32 %185 to i16, !dbg !44
  %extelt.offset3 = lshr i32 %185, 16, !dbg !44
  %189 = trunc i32 %extelt.offset3 to i16, !dbg !44
  %190 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %186) #6, !dbg !45
  %191 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %187) #6, !dbg !45
  %192 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %188) #6, !dbg !45
  %193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #6, !dbg !45
  %194 = zext nneg i32 %178 to i64, !dbg !46
  %195 = getelementptr float, ptr addrspace(1) %3, i64 %194, !dbg !46
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #6, !dbg !47
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !47
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !47
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !47
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !47
  %201 = getelementptr i16, ptr addrspace(1) %4, i64 %181, !dbg !48
  %202 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %201, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #6, !dbg !49
  %203 = extractvalue { i32, i32 } %202, 0, !dbg !49
  %204 = extractvalue { i32, i32 } %202, 1, !dbg !49
  %205 = trunc i32 %203 to i16, !dbg !49
  %extelt.offset4 = lshr i32 %203, 16, !dbg !49
  %206 = trunc i32 %extelt.offset4 to i16, !dbg !49
  %207 = trunc i32 %204 to i16, !dbg !49
  %extelt.offset5 = lshr i32 %204, 16, !dbg !49
  %208 = trunc i32 %extelt.offset5 to i16, !dbg !49
  %209 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %205) #6, !dbg !50
  %210 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #6, !dbg !50
  %211 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %207) #6, !dbg !50
  %212 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %208) #6, !dbg !50
  %213 = getelementptr float, ptr addrspace(1) %6, i64 %194, !dbg !51
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %213, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #6, !dbg !52
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !52
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !52
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !52
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !52
  %219 = getelementptr float, ptr addrspace(1) %7, i64 %181, !dbg !53
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %219, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #6, !dbg !54
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !54
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !54
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !54
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !54
  %225 = insertelement <4 x i32> poison, i32 %197, i64 0, !dbg !47
  %226 = insertelement <4 x i32> %225, i32 %198, i64 1, !dbg !47
  %227 = insertelement <4 x i32> %226, i32 %199, i64 2, !dbg !47
  %228 = insertelement <4 x i32> %227, i32 %200, i64 3, !dbg !47
  %229 = bitcast <4 x i32> %228 to <4 x float>, !dbg !47
  %230 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !52
  %231 = insertelement <4 x i32> %230, i32 %216, i64 1, !dbg !52
  %232 = insertelement <4 x i32> %231, i32 %217, i64 2, !dbg !52
  %233 = insertelement <4 x i32> %232, i32 %218, i64 3, !dbg !52
  %234 = bitcast <4 x i32> %233 to <4 x float>, !dbg !52
  %235 = insertelement <4 x i32> poison, i32 %221, i64 0, !dbg !54
  %236 = insertelement <4 x i32> %235, i32 %222, i64 1, !dbg !54
  %237 = insertelement <4 x i32> %236, i32 %223, i64 2, !dbg !54
  %238 = insertelement <4 x i32> %237, i32 %224, i64 3, !dbg !54
  %239 = bitcast <4 x i32> %238 to <4 x float>, !dbg !54
  %240 = insertelement <4 x float> poison, float %190, i64 0, !dbg !37
  %241 = insertelement <4 x float> %240, float %191, i64 1, !dbg !37
  %242 = insertelement <4 x float> %241, float %192, i64 2, !dbg !37
  %243 = insertelement <4 x float> %242, float %193, i64 3, !dbg !37
  %244 = fmul <4 x float> %171, %243, !dbg !37
  %245 = fadd <4 x float> %229, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !55
  %246 = fmul <4 x float> %244, %245, !dbg !56
  %247 = insertelement <4 x float> poison, float %209, i64 0, !dbg !38
  %248 = insertelement <4 x float> %247, float %210, i64 1, !dbg !38
  %249 = insertelement <4 x float> %248, float %211, i64 2, !dbg !38
  %250 = insertelement <4 x float> %249, float %212, i64 3, !dbg !38
  %251 = fmul <4 x float> %250, %174, !dbg !38
  %252 = fadd <4 x float> %234, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !57
  %253 = fmul <4 x float> %251, %252, !dbg !58
  %254 = fmul <4 x float> %239, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !59
  %255 = fadd <4 x float> %253, %254, !dbg !60
  %256 = fadd <4 x float> %246, %255, !dbg !61
  %257 = fmul <4 x float> %256, %256, !dbg !62
  %258 = insertelement <4 x i1> poison, i1 %179, i64 0, !dbg !63
  %259 = shufflevector <4 x i1> %258, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !63
  %260 = select <4 x i1> %259, <4 x float> %257, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !63
  %261 = fadd <4 x float> %177, %260, !dbg !63
  %262 = getelementptr float, ptr addrspace(1) %9, i64 %181, !dbg !64
  %bc = bitcast <4 x float> %256 to <4 x i32>, !dbg !65
  %263 = extractelement <4 x i32> %bc, i64 0, !dbg !65
  %bc53 = bitcast <4 x float> %256 to <4 x i32>, !dbg !65
  %264 = extractelement <4 x i32> %bc53, i64 1, !dbg !65
  %bc54 = bitcast <4 x float> %256 to <4 x i32>, !dbg !65
  %265 = extractelement <4 x i32> %bc54, i64 2, !dbg !65
  %bc55 = bitcast <4 x float> %256 to <4 x i32>, !dbg !65
  %266 = extractelement <4 x i32> %bc55, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %263, i32 %264, i32 %265, i32 %266, ptr addrspace(1) %262, i1 %179) #6, !dbg !65
  %267 = add nuw nsw i32 %176, 1024, !dbg !39
  %268 = icmp ult i32 %176, 1280, !dbg !39
  br i1 %268, label %175, label %269, !dbg !39

269:                                              ; preds = %175
  %shift50 = shufflevector <4 x float> %261, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !66
  %270 = fadd <4 x float> %261, %shift50, !dbg !66
  %shift51 = shufflevector <4 x float> %261, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !66
  %271 = fadd <4 x float> %shift51, %270, !dbg !66
  %shift52 = shufflevector <4 x float> %261, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !66
  %272 = fadd <4 x float> %shift52, %271, !dbg !66
  %273 = extractelement <4 x float> %272, i64 0, !dbg !66
  %274 = bitcast float %273 to i32, !dbg !69
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 16, i32 31), !dbg !69
  %276 = bitcast i32 %275 to float, !dbg !69
  %277 = fadd float %273, %276, !dbg !66
  %278 = bitcast float %277 to i32, !dbg !69
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 8, i32 31), !dbg !69
  %280 = bitcast i32 %279 to float, !dbg !69
  %281 = fadd float %277, %280, !dbg !66
  %282 = bitcast float %281 to i32, !dbg !69
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 4, i32 31), !dbg !69
  %284 = bitcast i32 %283 to float, !dbg !69
  %285 = fadd float %281, %284, !dbg !66
  %286 = bitcast float %285 to i32, !dbg !69
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 2, i32 31), !dbg !69
  %288 = bitcast i32 %287 to float, !dbg !69
  %289 = fadd float %285, %288, !dbg !66
  %290 = bitcast float %289 to i32, !dbg !69
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 1, i32 31), !dbg !69
  %292 = bitcast i32 %291 to float, !dbg !69
  %293 = fadd float %289, %292, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, float %293, i1 %116) #6, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %294 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %119) #6, !dbg !69
  %295 = bitcast float %294 to i32, !dbg !69
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 4, i32 31), !dbg !69
  %297 = bitcast i32 %296 to float, !dbg !69
  %298 = fadd float %294, %297, !dbg !66
  %299 = bitcast float %298 to i32, !dbg !69
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 2, i32 31), !dbg !69
  %301 = bitcast i32 %300 to float, !dbg !69
  %302 = fadd float %298, %301, !dbg !66
  %303 = bitcast float %302 to i32, !dbg !69
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !69
  %305 = bitcast i32 %304 to float, !dbg !69
  %306 = fadd float %302, %305, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, float %306, i1 %137) #6, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %307 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %308 = insertelement <1 x float> undef, float %307, i64 0, !dbg !71
  store <1 x float> %308, ptr addrspace(3) @global_smem, align 4, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %309 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !71
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float 2.304000e+03) #6, !dbg !72
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #6, !dbg !72
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #6, !dbg !72
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #6, !dbg !72
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 2.304000e+03) #6, !dbg !72
  %315 = fadd float %310, 0x3EE4F8B580000000, !dbg !73
  %316 = fadd float %311, 0x3EE4F8B580000000, !dbg !73
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %.not.i20 = icmp eq i32 %317, 0, !dbg !71
  br i1 %.not.i20, label %320, label %318, !dbg !71

318:                                              ; preds = %269
  %319 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %315), !dbg !71
  br label %__nv_rsqrtf.exit22, !dbg !71

320:                                              ; preds = %269
  %321 = tail call float @llvm.nvvm.rsqrt.approx.f(float %315), !dbg !71
  br label %__nv_rsqrtf.exit22, !dbg !71

__nv_rsqrtf.exit22:                               ; preds = %318, %320
  %.0.i21 = phi float [ %319, %318 ], [ %321, %320 ], !dbg !71
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %.not.i23 = icmp eq i32 %322, 0, !dbg !71
  br i1 %.not.i23, label %325, label %323, !dbg !71

323:                                              ; preds = %__nv_rsqrtf.exit22
  %324 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %316), !dbg !71
  br label %__nv_rsqrtf.exit25, !dbg !71

325:                                              ; preds = %__nv_rsqrtf.exit22
  %326 = tail call float @llvm.nvvm.rsqrt.approx.f(float %316), !dbg !71
  br label %__nv_rsqrtf.exit25, !dbg !71

__nv_rsqrtf.exit25:                               ; preds = %323, %325
  %.0.i24 = phi float [ %324, %323 ], [ %326, %325 ], !dbg !71
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %330 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !75
  %331 = bitcast float %.0.i21 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %331, ptr addrspace(1) %330, i1 %163) #6, !dbg !76
  %332 = getelementptr float, ptr addrspace(1) %9, i64 %20, !dbg !77
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %332, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !78
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !78
  %335 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !78
  %336 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !78
  %337 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !78
  %338 = bitcast i32 %334 to float, !dbg !78
  %339 = bitcast i32 %335 to float, !dbg !78
  %340 = bitcast i32 %336 to float, !dbg !78
  %341 = bitcast i32 %337 to float, !dbg !78
  %342 = zext nneg i32 %16 to i64, !dbg !79
  %343 = getelementptr float, ptr addrspace(1) %8, i64 %342, !dbg !79
  %344 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %343, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !80
  %345 = extractvalue { i32, i32, i32, i32 } %344, 0, !dbg !80
  %346 = extractvalue { i32, i32, i32, i32 } %344, 1, !dbg !80
  %347 = extractvalue { i32, i32, i32, i32 } %344, 2, !dbg !80
  %348 = extractvalue { i32, i32, i32, i32 } %344, 3, !dbg !80
  %349 = bitcast i32 %345 to float, !dbg !80
  %350 = bitcast i32 %346 to float, !dbg !80
  %351 = bitcast i32 %347 to float, !dbg !80
  %352 = bitcast i32 %348 to float, !dbg !80
  %353 = fmul float %.0.i24, %338, !dbg !81
  %354 = fmul float %.0.i24, %339, !dbg !81
  %355 = fmul float %.0.i24, %340, !dbg !81
  %356 = fmul float %.0.i24, %341, !dbg !81
  %357 = fadd float %349, 1.000000e+00, !dbg !82
  %358 = fadd float %350, 1.000000e+00, !dbg !82
  %359 = fadd float %351, 1.000000e+00, !dbg !82
  %360 = fadd float %352, 1.000000e+00, !dbg !82
  %361 = fmul float %353, %357, !dbg !83
  %362 = fmul float %354, %358, !dbg !83
  %363 = fmul float %355, %359, !dbg !83
  %364 = fmul float %356, %360, !dbg !83
  %365 = getelementptr i16, ptr addrspace(1) %10, i64 %20, !dbg !84
  %366 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %361) #6, !dbg !85
  %367 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %362) #6, !dbg !85
  %368 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %363) #6, !dbg !85
  %369 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %364) #6, !dbg !85
  %370 = insertelement <2 x i16> undef, i16 %366, i64 0, !dbg !85
  %371 = insertelement <2 x i16> %370, i16 %367, i64 1, !dbg !85
  %372 = bitcast <2 x i16> %371 to i32, !dbg !85
  %373 = insertelement <2 x i16> undef, i16 %368, i64 0, !dbg !85
  %374 = insertelement <2 x i16> %373, i16 %369, i64 1, !dbg !85
  %375 = bitcast <2 x i16> %374 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %372, i32 %375, ptr addrspace(1) %365, i1 true) #6, !dbg !85
  %376 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !77
  %377 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %376, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !78
  %378 = extractvalue { i32, i32, i32, i32 } %377, 0, !dbg !78
  %379 = extractvalue { i32, i32, i32, i32 } %377, 1, !dbg !78
  %380 = extractvalue { i32, i32, i32, i32 } %377, 2, !dbg !78
  %381 = extractvalue { i32, i32, i32, i32 } %377, 3, !dbg !78
  %382 = bitcast i32 %378 to float, !dbg !78
  %383 = bitcast i32 %379 to float, !dbg !78
  %384 = bitcast i32 %380 to float, !dbg !78
  %385 = bitcast i32 %381 to float, !dbg !78
  %386 = zext nneg i32 %33 to i64, !dbg !79
  %387 = getelementptr float, ptr addrspace(1) %8, i64 %386, !dbg !79
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %387, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !80
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !80
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !80
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !80
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !80
  %393 = bitcast i32 %389 to float, !dbg !80
  %394 = bitcast i32 %390 to float, !dbg !80
  %395 = bitcast i32 %391 to float, !dbg !80
  %396 = bitcast i32 %392 to float, !dbg !80
  %397 = fmul float %.0.i24, %382, !dbg !81
  %398 = fmul float %.0.i24, %383, !dbg !81
  %399 = fmul float %.0.i24, %384, !dbg !81
  %400 = fmul float %.0.i24, %385, !dbg !81
  %401 = fadd float %393, 1.000000e+00, !dbg !82
  %402 = fadd float %394, 1.000000e+00, !dbg !82
  %403 = fadd float %395, 1.000000e+00, !dbg !82
  %404 = fadd float %396, 1.000000e+00, !dbg !82
  %405 = fmul float %397, %401, !dbg !83
  %406 = fmul float %398, %402, !dbg !83
  %407 = fmul float %399, %403, !dbg !83
  %408 = fmul float %400, %404, !dbg !83
  %409 = getelementptr i16, ptr addrspace(1) %10, i64 %35, !dbg !84
  %410 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %405) #6, !dbg !85
  %411 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %406) #6, !dbg !85
  %412 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %407) #6, !dbg !85
  %413 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %408) #6, !dbg !85
  %414 = insertelement <2 x i16> undef, i16 %410, i64 0, !dbg !85
  %415 = insertelement <2 x i16> %414, i16 %411, i64 1, !dbg !85
  %416 = bitcast <2 x i16> %415 to i32, !dbg !85
  %417 = insertelement <2 x i16> undef, i16 %412, i64 0, !dbg !85
  %418 = insertelement <2 x i16> %417, i16 %413, i64 1, !dbg !85
  %419 = bitcast <2 x i16> %418 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %416, i32 %419, ptr addrspace(1) %409, i1 true) #6, !dbg !85
  %420 = getelementptr float, ptr addrspace(1) %9, i64 %51, !dbg !77
  %421 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %420, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #6, !dbg !78
  %422 = extractvalue { i32, i32, i32, i32 } %421, 0, !dbg !78
  %423 = extractvalue { i32, i32, i32, i32 } %421, 1, !dbg !78
  %424 = extractvalue { i32, i32, i32, i32 } %421, 2, !dbg !78
  %425 = extractvalue { i32, i32, i32, i32 } %421, 3, !dbg !78
  %426 = bitcast i32 %422 to float, !dbg !78
  %427 = bitcast i32 %423 to float, !dbg !78
  %428 = bitcast i32 %424 to float, !dbg !78
  %429 = bitcast i32 %425 to float, !dbg !78
  %430 = zext nneg i32 %48 to i64, !dbg !79
  %431 = getelementptr float, ptr addrspace(1) %8, i64 %430, !dbg !79
  %432 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %431, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #6, !dbg !80
  %433 = extractvalue { i32, i32, i32, i32 } %432, 0, !dbg !80
  %434 = extractvalue { i32, i32, i32, i32 } %432, 1, !dbg !80
  %435 = extractvalue { i32, i32, i32, i32 } %432, 2, !dbg !80
  %436 = extractvalue { i32, i32, i32, i32 } %432, 3, !dbg !80
  %437 = bitcast i32 %433 to float, !dbg !80
  %438 = bitcast i32 %434 to float, !dbg !80
  %439 = bitcast i32 %435 to float, !dbg !80
  %440 = bitcast i32 %436 to float, !dbg !80
  %441 = fmul float %.0.i24, %426, !dbg !81
  %442 = fmul float %.0.i24, %427, !dbg !81
  %443 = fmul float %.0.i24, %428, !dbg !81
  %444 = fmul float %.0.i24, %429, !dbg !81
  %445 = fadd float %437, 1.000000e+00, !dbg !82
  %446 = fadd float %438, 1.000000e+00, !dbg !82
  %447 = fadd float %439, 1.000000e+00, !dbg !82
  %448 = fadd float %440, 1.000000e+00, !dbg !82
  %449 = fmul float %441, %445, !dbg !83
  %450 = fmul float %442, %446, !dbg !83
  %451 = fmul float %443, %447, !dbg !83
  %452 = fmul float %444, %448, !dbg !83
  %453 = getelementptr i16, ptr addrspace(1) %10, i64 %51, !dbg !84
  %454 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %449) #6, !dbg !85
  %455 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %450) #6, !dbg !85
  %456 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %451) #6, !dbg !85
  %457 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %452) #6, !dbg !85
  %458 = insertelement <2 x i16> undef, i16 %454, i64 0, !dbg !85
  %459 = insertelement <2 x i16> %458, i16 %455, i64 1, !dbg !85
  %460 = bitcast <2 x i16> %459 to i32, !dbg !85
  %461 = insertelement <2 x i16> undef, i16 %456, i64 0, !dbg !85
  %462 = insertelement <2 x i16> %461, i16 %457, i64 1, !dbg !85
  %463 = bitcast <2 x i16> %462 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %460, i32 %463, ptr addrspace(1) %453, i1 %49) #6, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c3hgkriuzga6rskfrlr3q2kcjpaar7cgyzqog2l5rbkfzxk6pbyu.py", directory: "/tmp/torchinductor_zeus/3h")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11de12de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11de12de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10d11de12de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10d11de12de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 28, column: 27, scope: !7)
!18 = !DILocation(line: 29, column: 25, scope: !7)
!19 = !DILocation(line: 33, column: 22, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 42, column: 26, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 43, column: 4, scope: !7)
!33 = !DILocation(line: 44, column: 28, scope: !7)
!34 = !DILocation(line: 44, column: 40, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 36, scope: !7)
!37 = !DILocation(line: 57, column: 24, scope: !7)
!38 = !DILocation(line: 64, column: 24, scope: !7)
!39 = !DILocation(line: 47, column: 36, scope: !7)
!40 = !DILocation(line: 48, column: 27, scope: !7)
!41 = !DILocation(line: 49, column: 25, scope: !7)
!42 = !DILocation(line: 51, column: 41, scope: !7)
!43 = !DILocation(line: 51, column: 35, scope: !7)
!44 = !DILocation(line: 51, column: 52, scope: !7)
!45 = !DILocation(line: 51, column: 104, scope: !7)
!46 = !DILocation(line: 52, column: 35, scope: !7)
!47 = !DILocation(line: 52, column: 40, scope: !7)
!48 = !DILocation(line: 53, column: 35, scope: !7)
!49 = !DILocation(line: 53, column: 52, scope: !7)
!50 = !DILocation(line: 53, column: 104, scope: !7)
!51 = !DILocation(line: 54, column: 35, scope: !7)
!52 = !DILocation(line: 54, column: 40, scope: !7)
!53 = !DILocation(line: 55, column: 35, scope: !7)
!54 = !DILocation(line: 55, column: 52, scope: !7)
!55 = !DILocation(line: 59, column: 24, scope: !7)
!56 = !DILocation(line: 60, column: 24, scope: !7)
!57 = !DILocation(line: 65, column: 24, scope: !7)
!58 = !DILocation(line: 66, column: 24, scope: !7)
!59 = !DILocation(line: 70, column: 24, scope: !7)
!60 = !DILocation(line: 71, column: 24, scope: !7)
!61 = !DILocation(line: 72, column: 24, scope: !7)
!62 = !DILocation(line: 73, column: 24, scope: !7)
!63 = !DILocation(line: 76, column: 40, scope: !7)
!64 = !DILocation(line: 77, column: 29, scope: !7)
!65 = !DILocation(line: 77, column: 53, scope: !7)
!66 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !67)
!67 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !68)
!68 = !DILocation(line: 78, column: 27, scope: !22)
!69 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !70)
!70 = !DILocation(line: 78, column: 27, scope: !24)
!71 = !DILocation(line: 83, column: 26, scope: !7)
!72 = !DILocation(line: 80, column: 20, scope: !7)
!73 = !DILocation(line: 82, column: 20, scope: !7)
!74 = !DILocation(line: 84, column: 4, scope: !7)
!75 = !DILocation(line: 85, column: 28, scope: !7)
!76 = !DILocation(line: 85, column: 40, scope: !7)
!77 = !DILocation(line: 90, column: 36, scope: !7)
!78 = !DILocation(line: 90, column: 53, scope: !7)
!79 = !DILocation(line: 91, column: 35, scope: !7)
!80 = !DILocation(line: 91, column: 40, scope: !7)
!81 = !DILocation(line: 92, column: 24, scope: !7)
!82 = !DILocation(line: 94, column: 24, scope: !7)
!83 = !DILocation(line: 95, column: 24, scope: !7)
!84 = !DILocation(line: 97, column: 29, scope: !7)
!85 = !DILocation(line: 97, column: 53, scope: !7)
!86 = !DILocation(line: 86, column: 4, scope: !7)
