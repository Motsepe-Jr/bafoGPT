; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = shl i32 %7, 1, !dbg !8
  %9 = and i32 %8, 254, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %11 = shl i32 %10, 8, !dbg !10
  %12 = or i32 %11, %9, !dbg !11
  %13 = srem i32 %12, 256, !dbg !12
  %14 = srem i32 %12, 1024, !dbg !13
  %15 = sdiv i32 %12, 2048, !dbg !14
  %16 = shl nsw i32 %15, 10, !dbg !15
  %17 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !16
  %18 = shufflevector <2 x i32> %17, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %19 = sdiv <2 x i32> %18, <i32 1024, i32 256>, !dbg !16
  %20 = srem <2 x i32> %19, <i32 2, i32 4>, !dbg !17
  %21 = shl nsw <2 x i32> %20, <i32 8, i32 12>, !dbg !18
  %22 = add nsw i32 %16, %13, !dbg !19
  %23 = extractelement <2 x i32> %21, i64 0, !dbg !20
  %24 = add i32 %22, %23, !dbg !21
  %25 = extractelement <2 x i32> %21, i64 1, !dbg !22
  %26 = add nsw i32 %24, %25, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr i16, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 true, i32 0, i1 true) #1, !dbg !24
  %30 = trunc i32 %29 to i16, !dbg !24
  %extelt.offset = lshr i32 %29, 16, !dbg !24
  %31 = trunc i32 %extelt.offset to i16, !dbg !24
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #1, !dbg !25
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #1, !dbg !25
  %34 = sext i32 %14 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !26
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true, i32 0, i1 true) #1, !dbg !27
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !27
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !27
  %39 = bitcast i32 %37 to float, !dbg !27
  %40 = bitcast i32 %38 to float, !dbg !27
  %41 = fmul float %32, %39, !dbg !28
  %42 = fmul float %33, %40, !dbg !28
  %43 = icmp slt i32 %13, 128, !dbg !29
  %44 = add i32 %22, 128, !dbg !30
  %45 = add i32 %44, %23, !dbg !31
  %46 = add nsw i32 %45, %25, !dbg !32
  %47 = sext i32 %46 to i64, !dbg !33
  %48 = getelementptr i16, ptr addrspace(1) %0, i64 %47, !dbg !33
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %43, i32 0, i1 %43) #1, !dbg !34
  %50 = trunc i32 %49 to i16, !dbg !34
  %extelt.offset1 = lshr i32 %49, 16, !dbg !34
  %51 = trunc i32 %extelt.offset1 to i16, !dbg !34
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #1, !dbg !35
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #1, !dbg !35
  %54 = fsub float 0.000000e+00, %52, !dbg !36
  %55 = fsub float 0.000000e+00, %53, !dbg !36
  %56 = icmp sgt i32 %13, 127, !dbg !37
  %57 = add i32 %22, -128, !dbg !38
  %58 = add i32 %57, %23, !dbg !20
  %59 = add nsw i32 %58, %25, !dbg !39
  %60 = sext i32 %59 to i64, !dbg !40
  %61 = getelementptr i16, ptr addrspace(1) %0, i64 %60, !dbg !40
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %56, i32 0, i1 %56) #1, !dbg !41
  %63 = trunc i32 %62 to i16, !dbg !41
  %extelt.offset2 = lshr i32 %62, 16, !dbg !41
  %64 = trunc i32 %extelt.offset2 to i16, !dbg !41
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #1, !dbg !42
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #1, !dbg !42
  %67 = select i1 %56, float %65, float 0.000000e+00, !dbg !43
  %68 = select i1 %56, float %66, float 0.000000e+00, !dbg !43
  %69 = select i1 %43, float %54, float %67, !dbg !44
  %70 = select i1 %43, float %55, float %68, !dbg !44
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !45
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %71, i1 true, i32 0, i1 true, i32 0, i1 true) #1, !dbg !46
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !46
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !46
  %75 = bitcast i32 %73 to float, !dbg !46
  %76 = bitcast i32 %74 to float, !dbg !46
  %77 = fmul float %69, %75, !dbg !47
  %78 = fmul float %70, %76, !dbg !47
  %79 = fadd float %41, %77, !dbg !48
  %80 = fadd float %42, %78, !dbg !48
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 false, i32 0, i1 false) #1, !dbg !49
  %82 = trunc i32 %81 to i16, !dbg !49
  %extelt.offset3 = lshr i32 %81, 16, !dbg !49
  %83 = trunc i32 %extelt.offset3 to i16, !dbg !49
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #1, !dbg !50
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #1, !dbg !50
  %86 = add i32 %22, 512, !dbg !51
  %87 = add nsw i32 %86, %25, !dbg !52
  %88 = sext i32 %87 to i64, !dbg !53
  %89 = getelementptr i16, ptr addrspace(1) %0, i64 %88, !dbg !53
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 true, i32 0, i1 true) #1, !dbg !54
  %91 = trunc i32 %90 to i16, !dbg !54
  %extelt.offset4 = lshr i32 %90, 16, !dbg !54
  %92 = trunc i32 %extelt.offset4 to i16, !dbg !54
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #1, !dbg !55
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #1, !dbg !55
  %95 = fmul float %93, %39, !dbg !56
  %96 = fmul float %94, %40, !dbg !56
  %97 = add i32 %22, 640, !dbg !57
  %98 = add nsw i32 %97, %25, !dbg !58
  %99 = sext i32 %98 to i64, !dbg !59
  %100 = getelementptr i16, ptr addrspace(1) %0, i64 %99, !dbg !59
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %43, i32 0, i1 %43) #1, !dbg !60
  %102 = trunc i32 %101 to i16, !dbg !60
  %extelt.offset5 = lshr i32 %101, 16, !dbg !60
  %103 = trunc i32 %extelt.offset5 to i16, !dbg !60
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #1, !dbg !61
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #1, !dbg !61
  %106 = fsub float 0.000000e+00, %104, !dbg !62
  %107 = fsub float 0.000000e+00, %105, !dbg !62
  %108 = add i32 %22, 384, !dbg !63
  %109 = add nsw i32 %108, %25, !dbg !64
  %110 = sext i32 %109 to i64, !dbg !65
  %111 = getelementptr i16, ptr addrspace(1) %0, i64 %110, !dbg !65
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %56, i32 0, i1 %56) #1, !dbg !66
  %113 = trunc i32 %112 to i16, !dbg !66
  %extelt.offset6 = lshr i32 %112, 16, !dbg !66
  %114 = trunc i32 %extelt.offset6 to i16, !dbg !66
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #1, !dbg !67
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #1, !dbg !67
  %117 = select i1 %56, float %115, float 0.000000e+00, !dbg !68
  %118 = select i1 %56, float %116, float 0.000000e+00, !dbg !68
  %119 = select i1 %43, float %106, float %117, !dbg !69
  %120 = select i1 %43, float %107, float %118, !dbg !69
  %121 = fmul float %119, %75, !dbg !70
  %122 = fmul float %120, %76, !dbg !70
  %123 = fadd float %95, %121, !dbg !71
  %124 = fadd float %96, %122, !dbg !71
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 false, i32 0, i1 false) #1, !dbg !72
  %126 = trunc i32 %125 to i16, !dbg !72
  %extelt.offset7 = lshr i32 %125, 16, !dbg !72
  %127 = trunc i32 %extelt.offset7 to i16, !dbg !72
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #1, !dbg !73
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %127) #1, !dbg !73
  %130 = sext i32 %12 to i64, !dbg !74
  %131 = getelementptr i16, ptr addrspace(1) %3, i64 %130, !dbg !74
  %132 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %79) #1, !dbg !75
  %133 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %80) #1, !dbg !75
  %134 = insertelement <2 x i16> undef, i16 %132, i64 0, !dbg !75
  %135 = insertelement <2 x i16> %134, i16 %133, i64 1, !dbg !75
  %136 = bitcast <2 x i16> %135 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %131, i1 true) #1, !dbg !75
  %137 = getelementptr i16, ptr addrspace(1) %4, i64 %130, !dbg !76
  %138 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %123) #1, !dbg !77
  %139 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %124) #1, !dbg !77
  %140 = insertelement <2 x i16> undef, i16 %138, i64 0, !dbg !77
  %141 = insertelement <2 x i16> %140, i16 %139, i64 1, !dbg !77
  %142 = bitcast <2 x i16> %141 to i32, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %137, i1 true) #1, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cfztofrruvwcaajdiger3yhijszpmyg4ufd3hl5yq3ps4gnucqm6.py", directory: "/tmp/torchinductor_zeus/fz")
!3 = !{ptr @triton__0d1d2d3d4d5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de", linkageName: "triton__0d1d2d3d4d5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 18, scope: !5)
!13 = !DILocation(line: 26, column: 18, scope: !5)
!14 = !DILocation(line: 33, column: 65, scope: !5)
!15 = !DILocation(line: 33, column: 59, scope: !5)
!16 = !DILocation(line: 25, column: 20, scope: !5)
!17 = !DILocation(line: 33, column: 46, scope: !5)
!18 = !DILocation(line: 33, column: 41, scope: !5)
!19 = !DILocation(line: 33, column: 36, scope: !5)
!20 = !DILocation(line: 46, column: 63, scope: !5)
!21 = !DILocation(line: 33, column: 53, scope: !5)
!22 = !DILocation(line: 33, column: 72, scope: !5)
!23 = !DILocation(line: 33, column: 30, scope: !5)
!24 = !DILocation(line: 33, column: 83, scope: !5)
!25 = !DILocation(line: 33, column: 103, scope: !5)
!26 = !DILocation(line: 35, column: 30, scope: !5)
!27 = !DILocation(line: 35, column: 35, scope: !5)
!28 = !DILocation(line: 36, column: 18, scope: !5)
!29 = !DILocation(line: 38, column: 19, scope: !5)
!30 = !DILocation(line: 40, column: 43, scope: !5)
!31 = !DILocation(line: 40, column: 60, scope: !5)
!32 = !DILocation(line: 40, column: 79, scope: !5)
!33 = !DILocation(line: 40, column: 31, scope: !5)
!34 = !DILocation(line: 40, column: 90, scope: !5)
!35 = !DILocation(line: 40, column: 111, scope: !5)
!36 = !DILocation(line: 41, column: 13, scope: !5)
!37 = !DILocation(line: 44, column: 20, scope: !5)
!38 = !DILocation(line: 46, column: 46, scope: !5)
!39 = !DILocation(line: 46, column: 82, scope: !5)
!40 = !DILocation(line: 46, column: 31, scope: !5)
!41 = !DILocation(line: 46, column: 93, scope: !5)
!42 = !DILocation(line: 46, column: 114, scope: !5)
!43 = !DILocation(line: 48, column: 35, scope: !5)
!44 = !DILocation(line: 49, column: 35, scope: !5)
!45 = !DILocation(line: 51, column: 31, scope: !5)
!46 = !DILocation(line: 51, column: 36, scope: !5)
!47 = !DILocation(line: 52, column: 20, scope: !5)
!48 = !DILocation(line: 53, column: 19, scope: !5)
!49 = !DILocation(line: 58, column: 84, scope: !5)
!50 = !DILocation(line: 58, column: 105, scope: !5)
!51 = !DILocation(line: 62, column: 43, scope: !5)
!52 = !DILocation(line: 62, column: 62, scope: !5)
!53 = !DILocation(line: 62, column: 31, scope: !5)
!54 = !DILocation(line: 62, column: 73, scope: !5)
!55 = !DILocation(line: 62, column: 93, scope: !5)
!56 = !DILocation(line: 64, column: 20, scope: !5)
!57 = !DILocation(line: 65, column: 43, scope: !5)
!58 = !DILocation(line: 65, column: 62, scope: !5)
!59 = !DILocation(line: 65, column: 31, scope: !5)
!60 = !DILocation(line: 65, column: 73, scope: !5)
!61 = !DILocation(line: 65, column: 94, scope: !5)
!62 = !DILocation(line: 66, column: 13, scope: !5)
!63 = !DILocation(line: 69, column: 43, scope: !5)
!64 = !DILocation(line: 69, column: 62, scope: !5)
!65 = !DILocation(line: 69, column: 31, scope: !5)
!66 = !DILocation(line: 69, column: 73, scope: !5)
!67 = !DILocation(line: 69, column: 94, scope: !5)
!68 = !DILocation(line: 71, column: 35, scope: !5)
!69 = !DILocation(line: 72, column: 35, scope: !5)
!70 = !DILocation(line: 74, column: 20, scope: !5)
!71 = !DILocation(line: 75, column: 20, scope: !5)
!72 = !DILocation(line: 79, column: 73, scope: !5)
!73 = !DILocation(line: 79, column: 94, scope: !5)
!74 = !DILocation(line: 83, column: 25, scope: !5)
!75 = !DILocation(line: 83, column: 37, scope: !5)
!76 = !DILocation(line: 84, column: 25, scope: !5)
!77 = !DILocation(line: 84, column: 37, scope: !5)
!78 = !DILocation(line: 84, column: 4, scope: !5)
