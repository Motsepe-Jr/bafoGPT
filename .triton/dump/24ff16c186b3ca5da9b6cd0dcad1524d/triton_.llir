; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7de8de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %10, 255, !dbg !8
  %11 = shl nuw nsw i32 %urem, 3, !dbg !8
  %12 = or i32 %11, 4, !dbg !8
  %13 = shl nuw nsw i32 %urem, 2, !dbg !8
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %15 = mul i32 %14, 2304, !dbg !10
  %16 = lshr i32 %10, 5, !dbg !8
  %17 = add i32 %11, %15, !dbg !11
  %18 = add i32 %12, %15, !dbg !11
  %19 = sext i32 %17 to i64, !dbg !12
  %20 = getelementptr i16, ptr addrspace(1) %0, i64 %19, !dbg !12
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !13
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !13
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !13
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !13
  %26 = trunc i32 %22 to i16, !dbg !13
  %extelt.offset5 = lshr i32 %22, 16, !dbg !13
  %27 = trunc i32 %extelt.offset5 to i16, !dbg !13
  %28 = trunc i32 %23 to i16, !dbg !13
  %extelt.offset6 = lshr i32 %23, 16, !dbg !13
  %29 = trunc i32 %extelt.offset6 to i16, !dbg !13
  %30 = trunc i32 %24 to i16, !dbg !13
  %extelt.offset7 = lshr i32 %24, 16, !dbg !13
  %31 = trunc i32 %extelt.offset7 to i16, !dbg !13
  %32 = trunc i32 %25 to i16, !dbg !13
  %extelt.offset8 = lshr i32 %25, 16, !dbg !13
  %33 = trunc i32 %extelt.offset8 to i16, !dbg !13
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #3, !dbg !14
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #3, !dbg !14
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #3, !dbg !14
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #3, !dbg !14
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #3, !dbg !14
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #3, !dbg !14
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #3, !dbg !14
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #3, !dbg !14
  %42 = zext nneg i32 %11 to i64, !dbg !15
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !15
  %44 = zext nneg i32 %12 to i64, !dbg !15
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !15
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !16
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !16
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !16
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !16
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !16
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !16
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !16
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !16
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !17
  %57 = sext i32 %18 to i64, !dbg !17
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !17
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !18
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !18
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !18
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !18
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !18
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !18
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !18
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !18
  %69 = insertelement <8 x i32> poison, i32 %47, i64 0, !dbg !16
  %70 = insertelement <8 x i32> %69, i32 %48, i64 1, !dbg !16
  %71 = insertelement <8 x i32> %70, i32 %49, i64 2, !dbg !16
  %72 = insertelement <8 x i32> %71, i32 %50, i64 3, !dbg !16
  %73 = insertelement <8 x i32> %72, i32 %52, i64 4, !dbg !16
  %74 = insertelement <8 x i32> %73, i32 %53, i64 5, !dbg !16
  %75 = insertelement <8 x i32> %74, i32 %54, i64 6, !dbg !16
  %76 = insertelement <8 x i32> %75, i32 %55, i64 7, !dbg !16
  %77 = bitcast <8 x i32> %76 to <8 x float>, !dbg !16
  %78 = insertelement <8 x i32> poison, i32 %60, i64 0, !dbg !18
  %79 = insertelement <8 x i32> %78, i32 %61, i64 1, !dbg !18
  %80 = insertelement <8 x i32> %79, i32 %62, i64 2, !dbg !18
  %81 = insertelement <8 x i32> %80, i32 %63, i64 3, !dbg !18
  %82 = insertelement <8 x i32> %81, i32 %65, i64 4, !dbg !18
  %83 = insertelement <8 x i32> %82, i32 %66, i64 5, !dbg !18
  %84 = insertelement <8 x i32> %83, i32 %67, i64 6, !dbg !18
  %85 = insertelement <8 x i32> %84, i32 %68, i64 7, !dbg !18
  %86 = bitcast <8 x i32> %85 to <8 x float>, !dbg !18
  %87 = fadd <8 x float> %77, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !19
  %88 = insertelement <8 x float> poison, float %34, i64 0, !dbg !20
  %89 = insertelement <8 x float> %88, float %35, i64 1, !dbg !20
  %90 = insertelement <8 x float> %89, float %36, i64 2, !dbg !20
  %91 = insertelement <8 x float> %90, float %37, i64 3, !dbg !20
  %92 = insertelement <8 x float> %91, float %38, i64 4, !dbg !20
  %93 = insertelement <8 x float> %92, float %39, i64 5, !dbg !20
  %94 = insertelement <8 x float> %93, float %40, i64 6, !dbg !20
  %95 = insertelement <8 x float> %94, float %41, i64 7, !dbg !20
  %96 = fmul <8 x float> %95, %87, !dbg !20
  %97 = fmul <8 x float> %86, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !21
  %98 = fmul <8 x float> %96, %97, !dbg !22
  %99 = fadd <8 x float> %98, zeroinitializer, !dbg !23
  %100 = or i32 %11, 2048, !dbg !24
  %101 = or i32 %11, 2052, !dbg !24
  %102 = icmp ult i32 %100, 2304, !dbg !25
  %103 = add i32 %100, %15, !dbg !11
  %104 = add i32 %101, %15, !dbg !11
  %105 = sext i32 %103 to i64, !dbg !12
  %106 = getelementptr i16, ptr addrspace(1) %0, i64 %105, !dbg !12
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !13
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !13
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !13
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !13
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !13
  %112 = trunc i32 %108 to i16, !dbg !13
  %extelt.offset5.1 = lshr i32 %108, 16, !dbg !13
  %113 = trunc i32 %extelt.offset5.1 to i16, !dbg !13
  %114 = trunc i32 %109 to i16, !dbg !13
  %extelt.offset6.1 = lshr i32 %109, 16, !dbg !13
  %115 = trunc i32 %extelt.offset6.1 to i16, !dbg !13
  %116 = trunc i32 %110 to i16, !dbg !13
  %extelt.offset7.1 = lshr i32 %110, 16, !dbg !13
  %117 = trunc i32 %extelt.offset7.1 to i16, !dbg !13
  %118 = trunc i32 %111 to i16, !dbg !13
  %extelt.offset8.1 = lshr i32 %111, 16, !dbg !13
  %119 = trunc i32 %extelt.offset8.1 to i16, !dbg !13
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #3, !dbg !14
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #3, !dbg !14
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #3, !dbg !14
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #3, !dbg !14
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #3, !dbg !14
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %117) #3, !dbg !14
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #3, !dbg !14
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #3, !dbg !14
  %128 = zext nneg i32 %100 to i64, !dbg !15
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !15
  %130 = zext nneg i32 %101 to i64, !dbg !15
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !15
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !16
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !16
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !16
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !16
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !16
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %131, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !16
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !16
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !16
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !16
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !16
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !17
  %143 = sext i32 %104 to i64, !dbg !17
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !17
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %142, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !18
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !18
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !18
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !18
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !18
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !18
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !18
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !18
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !18
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !18
  %155 = insertelement <8 x i32> poison, i32 %133, i64 0, !dbg !16
  %156 = insertelement <8 x i32> %155, i32 %134, i64 1, !dbg !16
  %157 = insertelement <8 x i32> %156, i32 %135, i64 2, !dbg !16
  %158 = insertelement <8 x i32> %157, i32 %136, i64 3, !dbg !16
  %159 = insertelement <8 x i32> %158, i32 %138, i64 4, !dbg !16
  %160 = insertelement <8 x i32> %159, i32 %139, i64 5, !dbg !16
  %161 = insertelement <8 x i32> %160, i32 %140, i64 6, !dbg !16
  %162 = insertelement <8 x i32> %161, i32 %141, i64 7, !dbg !16
  %163 = bitcast <8 x i32> %162 to <8 x float>, !dbg !16
  %164 = insertelement <8 x i32> poison, i32 %146, i64 0, !dbg !18
  %165 = insertelement <8 x i32> %164, i32 %147, i64 1, !dbg !18
  %166 = insertelement <8 x i32> %165, i32 %148, i64 2, !dbg !18
  %167 = insertelement <8 x i32> %166, i32 %149, i64 3, !dbg !18
  %168 = insertelement <8 x i32> %167, i32 %151, i64 4, !dbg !18
  %169 = insertelement <8 x i32> %168, i32 %152, i64 5, !dbg !18
  %170 = insertelement <8 x i32> %169, i32 %153, i64 6, !dbg !18
  %171 = insertelement <8 x i32> %170, i32 %154, i64 7, !dbg !18
  %172 = bitcast <8 x i32> %171 to <8 x float>, !dbg !18
  %173 = fadd <8 x float> %163, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !19
  %174 = insertelement <8 x float> poison, float %120, i64 0, !dbg !20
  %175 = insertelement <8 x float> %174, float %121, i64 1, !dbg !20
  %176 = insertelement <8 x float> %175, float %122, i64 2, !dbg !20
  %177 = insertelement <8 x float> %176, float %123, i64 3, !dbg !20
  %178 = insertelement <8 x float> %177, float %124, i64 4, !dbg !20
  %179 = insertelement <8 x float> %178, float %125, i64 5, !dbg !20
  %180 = insertelement <8 x float> %179, float %126, i64 6, !dbg !20
  %181 = insertelement <8 x float> %180, float %127, i64 7, !dbg !20
  %182 = fmul <8 x float> %181, %173, !dbg !20
  %183 = fmul <8 x float> %172, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !21
  %184 = fmul <8 x float> %182, %183, !dbg !22
  %185 = insertelement <8 x i1> poison, i1 %102, i64 0, !dbg !23
  %186 = shufflevector <8 x i1> %185, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !23
  %187 = select <8 x i1> %186, <8 x float> %184, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !23
  %188 = fadd <8 x float> %99, %187, !dbg !23
  %189 = and i32 %10, 31, !dbg !8
  %190 = and i32 %16, 7, !dbg !8
  %191 = or i32 %13, 1024, !dbg !8
  %shift = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %192 = fadd <8 x float> %188, %shift, !dbg !26
  %shift30 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %193 = fadd <8 x float> %shift30, %192, !dbg !26
  %shift31 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %194 = fadd <8 x float> %shift31, %193, !dbg !26
  %shift32 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %195 = fadd <8 x float> %shift32, %194, !dbg !26
  %shift33 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %196 = fadd <8 x float> %shift33, %195, !dbg !26
  %shift34 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %197 = fadd <8 x float> %shift34, %196, !dbg !26
  %shift35 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %198 = fadd <8 x float> %shift35, %197, !dbg !26
  %199 = extractelement <8 x float> %198, i64 0, !dbg !26
  %200 = bitcast float %199 to i32, !dbg !32
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 16, i32 31), !dbg !32
  %202 = bitcast i32 %201 to float, !dbg !32
  %203 = fadd float %199, %202, !dbg !26
  %204 = bitcast float %203 to i32, !dbg !32
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !32
  %206 = bitcast i32 %205 to float, !dbg !32
  %207 = fadd float %203, %206, !dbg !26
  %208 = bitcast float %207 to i32, !dbg !32
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 4, i32 31), !dbg !32
  %210 = bitcast i32 %209 to float, !dbg !32
  %211 = fadd float %207, %210, !dbg !26
  %212 = bitcast float %211 to i32, !dbg !32
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 2, i32 31), !dbg !32
  %214 = bitcast i32 %213 to float, !dbg !32
  %215 = fadd float %211, %214, !dbg !26
  %216 = bitcast float %215 to i32, !dbg !32
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !32
  %218 = bitcast i32 %217 to float, !dbg !32
  %219 = fadd float %215, %218, !dbg !26
  %220 = icmp eq i32 %189, 0, !dbg !32
  %221 = zext nneg i32 %190 to i64, !dbg !32
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i64 %221, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, float %219, i1 %220) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %223 = icmp slt i32 %10, 8, !dbg !32
  %224 = sext i32 %10 to i64, !dbg !32
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i64 %224, !dbg !32
  %226 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %225, i1 %223) #3, !dbg !32
  %227 = bitcast float %226 to i32, !dbg !32
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 4, i32 31), !dbg !32
  %229 = bitcast i32 %228 to float, !dbg !32
  %230 = fadd float %226, %229, !dbg !26
  %231 = bitcast float %230 to i32, !dbg !32
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 2, i32 31), !dbg !32
  %233 = bitcast i32 %232 to float, !dbg !32
  %234 = fadd float %230, %233, !dbg !26
  %235 = bitcast float %234 to i32, !dbg !32
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 1, i32 31), !dbg !32
  %237 = bitcast i32 %236 to float, !dbg !32
  %238 = fadd float %234, %237, !dbg !26
  %239 = and i32 %10, 7, !dbg !32
  %240 = icmp eq i32 %239, 0, !dbg !32
  %241 = and i1 %223, %240, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, float %238, i1 %241) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %242 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !32
  %243 = sext i32 %14 to i64, !dbg !34
  %244 = getelementptr i64, ptr addrspace(1) %3, i64 %243, !dbg !34
  %245 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %246 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %247 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %248 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %249 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %250 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %251 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %252 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %253 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %254 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %255 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %256 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !35
  %257 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !36
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #3, !dbg !37
  %259 = bitcast i32 %258 to float, !dbg !37
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #3, !dbg !37
  %261 = bitcast i32 %260 to float, !dbg !37
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #3, !dbg !37
  %263 = bitcast i32 %262 to float, !dbg !37
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #3, !dbg !37
  %265 = bitcast i32 %264 to float, !dbg !37
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #3, !dbg !37
  %267 = bitcast i32 %266 to float, !dbg !37
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #3, !dbg !37
  %269 = bitcast i32 %268 to float, !dbg !37
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #3, !dbg !37
  %271 = bitcast i32 %270 to float, !dbg !37
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #3, !dbg !37
  %273 = bitcast i32 %272 to float, !dbg !37
  %274 = add i64 %253, 288256, !dbg !38
  %275 = icmp slt i64 %253, 0, !dbg !39
  %276 = select i1 %275, i64 %274, i64 %253, !dbg !40
  %277 = icmp eq i64 %245, -1, !dbg !41
  %278 = fmul float %242, -5.000000e-01, !dbg !42
  %279 = fmul float %259, %259, !dbg !43
  %280 = fmul float %261, %261, !dbg !43
  %281 = fmul float %263, %263, !dbg !43
  %282 = fmul float %265, %265, !dbg !43
  %283 = fmul float %267, %267, !dbg !43
  %284 = fmul float %269, %269, !dbg !43
  %285 = fmul float %271, %271, !dbg !43
  %286 = fmul float %273, %273, !dbg !43
  %287 = fmul float %279, %259, !dbg !44
  %288 = fmul float %280, %261, !dbg !44
  %289 = fmul float %281, %263, !dbg !44
  %290 = fmul float %282, %265, !dbg !44
  %291 = fmul float %283, %267, !dbg !44
  %292 = fmul float %284, %269, !dbg !44
  %293 = fmul float %285, %271, !dbg !44
  %294 = fmul float %286, %273, !dbg !44
  %295 = fmul float %278, %287, !dbg !45
  %296 = fmul float %278, %288, !dbg !45
  %297 = fmul float %278, %289, !dbg !45
  %298 = fmul float %278, %290, !dbg !45
  %299 = fmul float %278, %291, !dbg !45
  %300 = fmul float %278, %292, !dbg !45
  %301 = fmul float %278, %293, !dbg !45
  %302 = fmul float %278, %294, !dbg !45
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float 2.304000e+03) #3, !dbg !46
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %296, float 2.304000e+03) #3, !dbg !46
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %297, float 2.304000e+03) #3, !dbg !46
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %298, float 2.304000e+03) #3, !dbg !46
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %299, float 2.304000e+03) #3, !dbg !46
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %300, float 2.304000e+03) #3, !dbg !46
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %301, float 2.304000e+03) #3, !dbg !46
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %302, float 2.304000e+03) #3, !dbg !46
  %311 = mul i64 %276, 2304, !dbg !47
  %312 = getelementptr float, ptr addrspace(1) %6, i64 %311
  %313 = zext nneg i32 %11 to i64
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i64 %313
  %315 = zext nneg i32 %13 to i64
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i64 %315
  %317 = zext nneg i32 %191 to i64
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i64 %317
  %319 = insertelement <8 x i1> poison, i1 %277, i64 0, !dbg !48
  %320 = shufflevector <8 x i1> %319, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !48
  %321 = insertelement <8 x float> poison, float %303, i64 0, !dbg !49
  %322 = shufflevector <8 x float> %321, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !49
  %323 = insertelement <8 x float> poison, float %259, i64 0, !dbg !50
  %324 = shufflevector <8 x float> %323, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !50
  br label %325, !dbg !51

325:                                              ; preds = %9, %325
  %326 = phi i1 [ true, %9 ], [ false, %325 ]
  %327 = phi i32 [ 0, %9 ], [ 2048, %325 ]
  %328 = or i32 %327, %11, !dbg !52
  %329 = or i32 %327, %12, !dbg !52
  %330 = or i32 %327, %13, !dbg !52
  %331 = or i32 %330, 1, !dbg !52
  %332 = or i32 %330, 2, !dbg !52
  %333 = or i32 %330, 3, !dbg !52
  %334 = or i32 %327, %191, !dbg !52
  %335 = or i32 %330, 1025, !dbg !52
  %336 = or i32 %330, 1026, !dbg !52
  %337 = or i32 %330, 1027, !dbg !52
  %338 = icmp ult i32 %328, 2304, !dbg !53
  %339 = icmp ult i32 %330, 2304, !dbg !53
  %340 = icmp ult i32 %334, 2304, !dbg !53
  %341 = add i32 %328, %15, !dbg !54
  %342 = add i32 %329, %15, !dbg !54
  %343 = sext i32 %341 to i64, !dbg !55
  %344 = getelementptr float, ptr addrspace(1) %4, i64 %343, !dbg !55
  %345 = sext i32 %342 to i64, !dbg !55
  %346 = getelementptr float, ptr addrspace(1) %4, i64 %345, !dbg !55
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %344, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338) #3, !dbg !56
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !56
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !56
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !56
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !56
  %352 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %346, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338) #3, !dbg !56
  %353 = extractvalue { i32, i32, i32, i32 } %352, 0, !dbg !56
  %354 = extractvalue { i32, i32, i32, i32 } %352, 1, !dbg !56
  %355 = extractvalue { i32, i32, i32, i32 } %352, 2, !dbg !56
  %356 = extractvalue { i32, i32, i32, i32 } %352, 3, !dbg !56
  %357 = getelementptr i16, ptr addrspace(1) %0, i64 %343, !dbg !57
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %357, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338) #3, !dbg !58
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !58
  %360 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !58
  %361 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !58
  %362 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !58
  %363 = trunc i32 %359 to i16, !dbg !58
  %extelt.offset = lshr i32 %359, 16, !dbg !58
  %364 = trunc i32 %extelt.offset to i16, !dbg !58
  %365 = trunc i32 %360 to i16, !dbg !58
  %extelt.offset2 = lshr i32 %360, 16, !dbg !58
  %366 = trunc i32 %extelt.offset2 to i16, !dbg !58
  %367 = trunc i32 %361 to i16, !dbg !58
  %extelt.offset3 = lshr i32 %361, 16, !dbg !58
  %368 = trunc i32 %extelt.offset3 to i16, !dbg !58
  %369 = trunc i32 %362 to i16, !dbg !58
  %extelt.offset4 = lshr i32 %362, 16, !dbg !58
  %370 = trunc i32 %extelt.offset4 to i16, !dbg !58
  %371 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #3, !dbg !59
  %372 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %364) #3, !dbg !59
  %373 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #3, !dbg !59
  %374 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %366) #3, !dbg !59
  %375 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %367) #3, !dbg !59
  %376 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %368) #3, !dbg !59
  %377 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %369) #3, !dbg !59
  %378 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %370) #3, !dbg !59
  %379 = zext nneg i32 %328 to i64, !dbg !60
  %380 = getelementptr float, ptr addrspace(1) %1, i64 %379, !dbg !60
  %381 = zext nneg i32 %329 to i64, !dbg !60
  %382 = getelementptr float, ptr addrspace(1) %1, i64 %381, !dbg !60
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %380, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338) #3, !dbg !61
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !61
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !61
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !61
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !61
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %382, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338) #3, !dbg !61
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !61
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !61
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !61
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !61
  %393 = getelementptr float, ptr addrspace(1) %2, i64 %343, !dbg !62
  %394 = getelementptr float, ptr addrspace(1) %2, i64 %345, !dbg !62
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %393, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338) #3, !dbg !63
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !63
  %397 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !63
  %398 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !63
  %399 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !63
  %400 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %394, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338, i32 0, i1 %338) #3, !dbg !63
  %401 = extractvalue { i32, i32, i32, i32 } %400, 0, !dbg !63
  %402 = extractvalue { i32, i32, i32, i32 } %400, 1, !dbg !63
  %403 = extractvalue { i32, i32, i32, i32 } %400, 2, !dbg !63
  %404 = extractvalue { i32, i32, i32, i32 } %400, 3, !dbg !63
  %405 = insertelement <8 x i32> poison, i32 %348, i64 0, !dbg !56
  %406 = insertelement <8 x i32> %405, i32 %349, i64 1, !dbg !56
  %407 = insertelement <8 x i32> %406, i32 %350, i64 2, !dbg !56
  %408 = insertelement <8 x i32> %407, i32 %351, i64 3, !dbg !56
  %409 = insertelement <8 x i32> %408, i32 %353, i64 4, !dbg !56
  %410 = insertelement <8 x i32> %409, i32 %354, i64 5, !dbg !56
  %411 = insertelement <8 x i32> %410, i32 %355, i64 6, !dbg !56
  %412 = insertelement <8 x i32> %411, i32 %356, i64 7, !dbg !56
  %413 = bitcast <8 x i32> %412 to <8 x float>, !dbg !56
  %414 = insertelement <8 x i32> poison, i32 %384, i64 0, !dbg !61
  %415 = insertelement <8 x i32> %414, i32 %385, i64 1, !dbg !61
  %416 = insertelement <8 x i32> %415, i32 %386, i64 2, !dbg !61
  %417 = insertelement <8 x i32> %416, i32 %387, i64 3, !dbg !61
  %418 = insertelement <8 x i32> %417, i32 %389, i64 4, !dbg !61
  %419 = insertelement <8 x i32> %418, i32 %390, i64 5, !dbg !61
  %420 = insertelement <8 x i32> %419, i32 %391, i64 6, !dbg !61
  %421 = insertelement <8 x i32> %420, i32 %392, i64 7, !dbg !61
  %422 = bitcast <8 x i32> %421 to <8 x float>, !dbg !61
  %423 = insertelement <8 x i32> poison, i32 %396, i64 0, !dbg !63
  %424 = insertelement <8 x i32> %423, i32 %397, i64 1, !dbg !63
  %425 = insertelement <8 x i32> %424, i32 %398, i64 2, !dbg !63
  %426 = insertelement <8 x i32> %425, i32 %399, i64 3, !dbg !63
  %427 = insertelement <8 x i32> %426, i32 %401, i64 4, !dbg !63
  %428 = insertelement <8 x i32> %427, i32 %402, i64 5, !dbg !63
  %429 = insertelement <8 x i32> %428, i32 %403, i64 6, !dbg !63
  %430 = insertelement <8 x i32> %429, i32 %404, i64 7, !dbg !63
  %431 = bitcast <8 x i32> %430 to <8 x float>, !dbg !63
  %432 = fadd <8 x float> %422, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !64
  %433 = insertelement <8 x float> poison, float %371, i64 0, !dbg !65
  %434 = insertelement <8 x float> %433, float %372, i64 1, !dbg !65
  %435 = insertelement <8 x float> %434, float %373, i64 2, !dbg !65
  %436 = insertelement <8 x float> %435, float %374, i64 3, !dbg !65
  %437 = insertelement <8 x float> %436, float %375, i64 4, !dbg !65
  %438 = insertelement <8 x float> %437, float %376, i64 5, !dbg !65
  %439 = insertelement <8 x float> %438, float %377, i64 6, !dbg !65
  %440 = insertelement <8 x float> %439, float %378, i64 7, !dbg !65
  %441 = fmul <8 x float> %440, %432, !dbg !65
  %442 = fmul <8 x float> %441, %324, !dbg !50
  %443 = fadd <8 x float> %442, %413, !dbg !66
  %444 = fmul <8 x float> %431, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !67
  %445 = fmul <8 x float> %322, %444, !dbg !49
  %446 = fadd <8 x float> %443, %445, !dbg !68
  %447 = fadd <8 x float> %445, %446, !dbg !69
  %448 = fmul <8 x float> %447, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !70
  %449 = select <8 x i1> %320, <8 x float> zeroinitializer, <8 x float> %448, !dbg !48
  %450 = zext nneg i32 %330 to i64, !dbg !71
  %451 = zext nneg i32 %331 to i64, !dbg !71
  %452 = zext nneg i32 %332 to i64, !dbg !71
  %453 = zext nneg i32 %333 to i64, !dbg !71
  %454 = zext nneg i32 %334 to i64, !dbg !71
  %455 = zext nneg i32 %335 to i64, !dbg !71
  %456 = zext nneg i32 %336 to i64, !dbg !71
  %457 = zext nneg i32 %337 to i64, !dbg !71
  %458 = getelementptr float, ptr addrspace(1) %312, i64 %450, !dbg !72
  %459 = getelementptr float, ptr addrspace(1) %312, i64 %451, !dbg !72
  %460 = getelementptr float, ptr addrspace(1) %312, i64 %452, !dbg !72
  %461 = getelementptr float, ptr addrspace(1) %312, i64 %453, !dbg !72
  %462 = getelementptr float, ptr addrspace(1) %312, i64 %454, !dbg !72
  %463 = getelementptr float, ptr addrspace(1) %312, i64 %455, !dbg !72
  %464 = getelementptr float, ptr addrspace(1) %312, i64 %456, !dbg !72
  %465 = getelementptr float, ptr addrspace(1) %312, i64 %457, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  store <8 x float> %449, ptr addrspace(3) %314, align 32, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %466 = load <4 x float>, ptr addrspace(3) %316, align 16, !dbg !73
  %467 = load <4 x float>, ptr addrspace(3) %318, align 16, !dbg !73
  %468 = shufflevector <4 x float> %466, <4 x float> undef, <1 x i32> zeroinitializer, !dbg !73
  %469 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %458, <1 x float> %468, i1 %339) #3, !dbg !73
  %470 = shufflevector <4 x float> %466, <4 x float> undef, <1 x i32> <i32 1>, !dbg !73
  %471 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %459, <1 x float> %470, i1 %339) #3, !dbg !73
  %472 = shufflevector <4 x float> %466, <4 x float> undef, <1 x i32> <i32 2>, !dbg !73
  %473 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %460, <1 x float> %472, i1 %339) #3, !dbg !73
  %474 = shufflevector <4 x float> %466, <4 x float> undef, <1 x i32> <i32 3>, !dbg !73
  %475 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %461, <1 x float> %474, i1 %339) #3, !dbg !73
  %476 = shufflevector <4 x float> %467, <4 x float> undef, <1 x i32> zeroinitializer, !dbg !73
  %477 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %462, <1 x float> %476, i1 %340) #3, !dbg !73
  %478 = shufflevector <4 x float> %467, <4 x float> undef, <1 x i32> <i32 1>, !dbg !73
  %479 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %463, <1 x float> %478, i1 %340) #3, !dbg !73
  %480 = shufflevector <4 x float> %467, <4 x float> undef, <1 x i32> <i32 2>, !dbg !73
  %481 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %464, <1 x float> %480, i1 %340) #3, !dbg !73
  %482 = shufflevector <4 x float> %467, <4 x float> undef, <1 x i32> <i32 3>, !dbg !73
  %483 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %465, <1 x float> %482, i1 %340) #3, !dbg !73
  br i1 %326, label %325, label %484, !dbg !51

484:                                              ; preds = %325
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cevut7m2zo64xlsrbe52xpr5l5n22n6kqn7cspmrwuztrtgwatnf.py", directory: "/tmp/torchinductor_zeus/ev")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7de8de", linkageName: "triton__0d1d2d3d4d5d6d7de8de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 31, column: 45, scope: !5)
!11 = !DILocation(line: 31, column: 40, scope: !5)
!12 = !DILocation(line: 31, column: 34, scope: !5)
!13 = !DILocation(line: 31, column: 51, scope: !5)
!14 = !DILocation(line: 31, column: 102, scope: !5)
!15 = !DILocation(line: 32, column: 34, scope: !5)
!16 = !DILocation(line: 32, column: 39, scope: !5)
!17 = !DILocation(line: 33, column: 34, scope: !5)
!18 = !DILocation(line: 33, column: 51, scope: !5)
!19 = !DILocation(line: 36, column: 22, scope: !5)
!20 = !DILocation(line: 37, column: 22, scope: !5)
!21 = !DILocation(line: 39, column: 22, scope: !5)
!22 = !DILocation(line: 40, column: 22, scope: !5)
!23 = !DILocation(line: 43, column: 40, scope: !5)
!24 = !DILocation(line: 28, column: 27, scope: !5)
!25 = !DILocation(line: 29, column: 25, scope: !5)
!26 = !DILocation(line: 233, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !5, file: !28, discriminator: 0)
!30 = !DILocation(line: 243, column: 36, scope: !27, inlinedAt: !31)
!31 = !DILocation(line: 44, column: 27, scope: !27)
!32 = !DILocation(line: 243, column: 36, scope: !29, inlinedAt: !33)
!33 = !DILocation(line: 44, column: 27, scope: !29)
!34 = !DILocation(line: 45, column: 31, scope: !5)
!35 = !DILocation(line: 45, column: 36, scope: !5)
!36 = !DILocation(line: 46, column: 31, scope: !5)
!37 = !DILocation(line: 46, column: 36, scope: !5)
!38 = !DILocation(line: 55, column: 24, scope: !5)
!39 = !DILocation(line: 56, column: 24, scope: !5)
!40 = !DILocation(line: 57, column: 39, scope: !5)
!41 = !DILocation(line: 59, column: 25, scope: !5)
!42 = !DILocation(line: 67, column: 24, scope: !5)
!43 = !DILocation(line: 68, column: 24, scope: !5)
!44 = !DILocation(line: 69, column: 24, scope: !5)
!45 = !DILocation(line: 70, column: 24, scope: !5)
!46 = !DILocation(line: 72, column: 24, scope: !5)
!47 = !DILocation(line: 81, column: 61, scope: !5)
!48 = !DILocation(line: 80, column: 39, scope: !5)
!49 = !DILocation(line: 75, column: 24, scope: !5)
!50 = !DILocation(line: 64, column: 24, scope: !5)
!51 = !DILocation(line: 47, column: 36, scope: !5)
!52 = !DILocation(line: 48, column: 27, scope: !5)
!53 = !DILocation(line: 49, column: 25, scope: !5)
!54 = !DILocation(line: 51, column: 41, scope: !5)
!55 = !DILocation(line: 51, column: 35, scope: !5)
!56 = !DILocation(line: 51, column: 52, scope: !5)
!57 = !DILocation(line: 52, column: 35, scope: !5)
!58 = !DILocation(line: 52, column: 52, scope: !5)
!59 = !DILocation(line: 52, column: 104, scope: !5)
!60 = !DILocation(line: 53, column: 35, scope: !5)
!61 = !DILocation(line: 53, column: 40, scope: !5)
!62 = !DILocation(line: 54, column: 35, scope: !5)
!63 = !DILocation(line: 54, column: 52, scope: !5)
!64 = !DILocation(line: 62, column: 24, scope: !5)
!65 = !DILocation(line: 63, column: 24, scope: !5)
!66 = !DILocation(line: 65, column: 24, scope: !5)
!67 = !DILocation(line: 74, column: 24, scope: !5)
!68 = !DILocation(line: 76, column: 24, scope: !5)
!69 = !DILocation(line: 77, column: 24, scope: !5)
!70 = !DILocation(line: 78, column: 24, scope: !5)
!71 = !DILocation(line: 81, column: 56, scope: !5)
!72 = !DILocation(line: 81, column: 34, scope: !5)
!73 = !DILocation(line: 81, column: 96, scope: !5)
!74 = !DILocation(line: 47, column: 4, scope: !5)
