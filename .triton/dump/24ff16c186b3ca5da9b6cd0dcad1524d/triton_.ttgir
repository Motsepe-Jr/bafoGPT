#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5d6d7de8de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x2048xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<1x2048xi32, #blocked1>
    %cst_1 = arith.constant dense<-1> : tensor<1x1xi64, #blocked>
    %cst_2 = arith.constant dense<2304> : tensor<1x1xi64, #blocked1>
    %cst_3 = arith.constant dense<0> : tensor<1x1xi64, #blocked1>
    %cst_4 = arith.constant dense<288256> : tensor<1x1xi64, #blocked1>
    %c0_i32 = arith.constant 0 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %cst_5 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_6 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32, #blocked>
    %cst_7 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32, #blocked>
    %cst_8 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %3 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x2048xi32, #blocked1>
    %5 = arith.muli %0, %c2304_i32 : i32
    %6 = tt.splat %5 : (i32) -> tensor<1x2048xi32, #blocked>
    %7 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>
    %8 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %9 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %10 = scf.for %arg9 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg10 = %cst_9) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %37 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked>
      %38 = arith.addi %37, %3 : tensor<1x2048xi32, #blocked>
      %39 = arith.cmpi slt, %38, %cst : tensor<1x2048xi32, #blocked>
      %40 = arith.addi %38, %6 : tensor<1x2048xi32, #blocked>
      %41 = tt.addptr %7, %40 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %42 = tt.load %41, %39, %cst_10 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %43 = arith.extf %42 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %44 = tt.addptr %8, %38 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %45 = tt.load %44, %39, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %46 = tt.addptr %9, %40 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %47 = tt.load %46, %39, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %48 = arith.addf %45, %cst_8 : tensor<1x2048xf32, #blocked>
      %49 = arith.mulf %43, %48 : tensor<1x2048xf32, #blocked>
      %50 = arith.mulf %47, %cst_7 : tensor<1x2048xf32, #blocked>
      %51 = arith.mulf %49, %50 : tensor<1x2048xf32, #blocked>
      %52 = arith.addf %arg10, %51 : tensor<1x2048xf32, #blocked>
      %53 = arith.select %39, %52, %arg10 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %53 : tensor<1x2048xf32, #blocked>
    }
    %11 = "tt.reduce"(%10) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32, %arg10: f32):
      %37 = arith.addf %arg9, %arg10 : f32
      tt.reduce.return %37 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %12 = tt.expand_dims %11 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %13 = tt.addptr %arg3, %0 : !tt.ptr<i64, 1>, i32
    %14 = tt.splat %13 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked>
    %15 = tt.splat %13 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked1>
    %16 = tt.load %14 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked>
    %17 = tt.load %15 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked1>
    %18 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %19 = tt.splat %18 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>, #blocked>
    %20 = tt.load %19 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32, #blocked>
    %21 = tt.splat %arg4 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %22 = arith.addi %17, %cst_4 : tensor<1x1xi64, #blocked1>
    %23 = arith.cmpi slt, %17, %cst_3 : tensor<1x1xi64, #blocked1>
    %24 = arith.select %23, %22, %17 : tensor<1x1xi1, #blocked1>, tensor<1x1xi64, #blocked1>
    %25 = arith.cmpi eq, %16, %cst_1 : tensor<1x1xi64, #blocked>
    %26 = tt.broadcast %20 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %27 = arith.mulf %12, %cst_6 : tensor<1x1xf32, #blocked>
    %28 = arith.mulf %20, %20 : tensor<1x1xf32, #blocked>
    %29 = arith.mulf %28, %20 : tensor<1x1xf32, #blocked>
    %30 = arith.mulf %27, %29 : tensor<1x1xf32, #blocked>
    %31 = arith.divf %30, %cst_5 : tensor<1x1xf32, #blocked>
    %32 = tt.broadcast %31 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
    %33 = tt.broadcast %25 : (tensor<1x1xi1, #blocked>) -> tensor<1x2048xi1, #blocked>
    %34 = arith.muli %24, %cst_2 : tensor<1x1xi64, #blocked1>
    %35 = tt.broadcast %34 : (tensor<1x1xi64, #blocked1>) -> tensor<1x2048xi64, #blocked1>
    %36 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>
    scf.for %arg9 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %37 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked>
      %38 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32, #blocked1>
      %39 = arith.addi %37, %3 : tensor<1x2048xi32, #blocked>
      %40 = arith.addi %38, %4 : tensor<1x2048xi32, #blocked1>
      %41 = arith.cmpi slt, %39, %cst : tensor<1x2048xi32, #blocked>
      %42 = arith.cmpi slt, %40, %cst_0 : tensor<1x2048xi32, #blocked1>
      %43 = arith.addi %39, %6 : tensor<1x2048xi32, #blocked>
      %44 = tt.addptr %21, %43 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %45 = tt.load %44, %41, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %46 = tt.addptr %7, %43 : tensor<1x2048x!tt.ptr<bf16, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %47 = tt.load %46, %41, %cst_10 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16, #blocked>
      %48 = arith.extf %47 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked>
      %49 = tt.addptr %8, %39 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %50 = tt.load %49, %41, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %51 = tt.addptr %9, %43 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %52 = tt.load %51, %41, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %53 = arith.addf %50, %cst_8 : tensor<1x2048xf32, #blocked>
      %54 = arith.mulf %48, %53 : tensor<1x2048xf32, #blocked>
      %55 = arith.mulf %54, %26 : tensor<1x2048xf32, #blocked>
      %56 = arith.addf %45, %55 : tensor<1x2048xf32, #blocked>
      %57 = arith.mulf %52, %cst_7 : tensor<1x2048xf32, #blocked>
      %58 = arith.mulf %32, %57 : tensor<1x2048xf32, #blocked>
      %59 = arith.addf %56, %58 : tensor<1x2048xf32, #blocked>
      %60 = arith.addf %59, %58 : tensor<1x2048xf32, #blocked>
      %61 = arith.mulf %60, %cst_7 : tensor<1x2048xf32, #blocked>
      %62 = arith.select %33, %cst_9, %61 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      %63 = arith.extsi %40 : tensor<1x2048xi32, #blocked1> to tensor<1x2048xi64, #blocked1>
      %64 = arith.addi %63, %35 : tensor<1x2048xi64, #blocked1>
      %65 = tt.addptr %36, %64 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xi64, #blocked1>
      %66 = triton_gpu.convert_layout %62 : (tensor<1x2048xf32, #blocked>) -> tensor<1x2048xf32, #blocked1>
      %67 = "tt.atomic_rmw"(%65, %66, %42) <{atomic_rmw_op = 5 : i32, scope = 1 : i32, sem = 4 : i32}> : (tensor<1x2048x!tt.ptr<f32, 1>, #blocked1>, tensor<1x2048xf32, #blocked1>, tensor<1x2048xi1, #blocked1>) -> tensor<1x2048xf32, #blocked1>
    }
    tt.return
  }
}
