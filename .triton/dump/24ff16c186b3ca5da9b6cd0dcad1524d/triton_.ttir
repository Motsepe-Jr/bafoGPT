module {
  tt.func public @triton__0d1d2d3d4d5d6d7de8de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %cst_0 = arith.constant dense<2304> : tensor<1x1xi64>
    %cst_1 = arith.constant dense<0> : tensor<1x1xi64>
    %cst_2 = arith.constant dense<288256> : tensor<1x1xi64>
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_3 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_4 = arith.constant dense<-5.000000e-01> : tensor<1x1xf32>
    %cst_5 = arith.constant dense<-1> : tensor<1x1xi64>
    %cst_6 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32>
    %cst_7 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_8 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %3 = arith.muli %0, %c2304_i32 : i32
    %4 = tt.splat %3 : (i32) -> tensor<1x2048xi32>
    %5 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %6 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %7 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %8 = scf.for %arg9 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg10 = %cst_9) -> (tensor<1x2048xf32>)  : i32 {
      %38 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32>
      %39 = arith.addi %38, %2 : tensor<1x2048xi32>
      %40 = arith.cmpi slt, %39, %cst_8 : tensor<1x2048xi32>
      %41 = arith.addi %39, %4 : tensor<1x2048xi32>
      %42 = tt.addptr %5, %41 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %43 = tt.load %42, %40, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %44 = arith.extf %43 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %45 = tt.addptr %6, %39 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %46 = tt.load %45, %40, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %47 = tt.addptr %7, %41 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %48 = tt.load %47, %40, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %49 = arith.addf %46, %cst_7 : tensor<1x2048xf32>
      %50 = arith.mulf %44, %49 : tensor<1x2048xf32>
      %51 = arith.mulf %48, %cst_6 : tensor<1x2048xf32>
      %52 = arith.mulf %50, %51 : tensor<1x2048xf32>
      %53 = arith.addf %arg10, %52 : tensor<1x2048xf32>
      %54 = arith.select %40, %53, %arg10 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %54 : tensor<1x2048xf32>
    }
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32, %arg10: f32):
      %38 = arith.addf %arg9, %arg10 : f32
      tt.reduce.return %38 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %10 = tt.expand_dims %9 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %11 = tt.addptr %arg3, %0 : !tt.ptr<i64, 1>, i32
    %12 = tt.splat %11 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>>
    %13 = tt.load %12 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64>
    %14 = tt.addptr %arg5, %0 : !tt.ptr<f32, 1>, i32
    %15 = tt.splat %14 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %16 = tt.load %15 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %17 = arith.muli %0, %c2304_i32 : i32
    %18 = tt.splat %17 : (i32) -> tensor<1x2048xi32>
    %19 = tt.splat %arg4 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %20 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %21 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %22 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %23 = arith.addi %13, %cst_2 : tensor<1x1xi64>
    %24 = arith.cmpi slt, %13, %cst_1 : tensor<1x1xi64>
    %25 = arith.select %24, %23, %13 : tensor<1x1xi1>, tensor<1x1xi64>
    %26 = arith.cmpi eq, %13, %cst_5 : tensor<1x1xi64>
    %27 = tt.broadcast %16 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %28 = arith.mulf %10, %cst_4 : tensor<1x1xf32>
    %29 = arith.mulf %16, %16 : tensor<1x1xf32>
    %30 = arith.mulf %29, %16 : tensor<1x1xf32>
    %31 = arith.mulf %28, %30 : tensor<1x1xf32>
    %32 = arith.divf %31, %cst_3 : tensor<1x1xf32>
    %33 = tt.broadcast %32 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %34 = tt.broadcast %26 : (tensor<1x1xi1>) -> tensor<1x2048xi1>
    %35 = arith.muli %25, %cst_0 : tensor<1x1xi64>
    %36 = tt.broadcast %35 : (tensor<1x1xi64>) -> tensor<1x2048xi64>
    %37 = tt.splat %arg6 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    scf.for %arg9 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %38 = tt.splat %arg9 : (i32) -> tensor<1x2048xi32>
      %39 = arith.addi %38, %2 : tensor<1x2048xi32>
      %40 = arith.cmpi slt, %39, %cst_8 : tensor<1x2048xi32>
      %41 = arith.addi %39, %18 : tensor<1x2048xi32>
      %42 = tt.addptr %19, %41 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %43 = tt.load %42, %40, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %44 = tt.addptr %20, %41 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %45 = tt.load %44, %40, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %46 = arith.extf %45 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %47 = tt.addptr %21, %39 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %48 = tt.load %47, %40, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %49 = tt.addptr %22, %41 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %50 = tt.load %49, %40, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %51 = arith.addf %48, %cst_7 : tensor<1x2048xf32>
      %52 = arith.mulf %46, %51 : tensor<1x2048xf32>
      %53 = arith.mulf %52, %27 : tensor<1x2048xf32>
      %54 = arith.addf %43, %53 : tensor<1x2048xf32>
      %55 = arith.mulf %50, %cst_6 : tensor<1x2048xf32>
      %56 = arith.mulf %33, %55 : tensor<1x2048xf32>
      %57 = arith.addf %54, %56 : tensor<1x2048xf32>
      %58 = arith.addf %57, %56 : tensor<1x2048xf32>
      %59 = arith.mulf %58, %cst_6 : tensor<1x2048xf32>
      %60 = arith.select %34, %cst_9, %59 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %61 = arith.extsi %39 : tensor<1x2048xi32> to tensor<1x2048xi64>
      %62 = arith.addi %61, %36 : tensor<1x2048xi64>
      %63 = tt.addptr %37, %62 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi64>
      %64 = "tt.atomic_rmw"(%63, %60, %40) <{atomic_rmw_op = 5 : i32, scope = 1 : i32, sem = 4 : i32}> : (tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xf32>, tensor<1x2048xi1>) -> tensor<1x2048xf32>
    }
    tt.return
  }
}
