; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9de10de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !5 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %13 = lshr i32 %12, 5, !dbg !8
  %urem = shl i32 %12, 2, !dbg !8
  %14 = and i32 %urem, 1020, !dbg !8
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %16 = mul i32 %15, 2304, !dbg !10
  %17 = add i32 %14, %16, !dbg !11
  %18 = sext i32 %17 to i64, !dbg !12
  %19 = getelementptr i16, ptr addrspace(1) %1, i64 %18, !dbg !12
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !13
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !13
  %23 = trunc i32 %21 to i16, !dbg !13
  %extelt.offset8 = lshr i32 %21, 16, !dbg !13
  %24 = trunc i32 %extelt.offset8 to i16, !dbg !13
  %25 = trunc i32 %22 to i16, !dbg !13
  %extelt.offset9 = lshr i32 %22, 16, !dbg !13
  %26 = trunc i32 %extelt.offset9 to i16, !dbg !13
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #3, !dbg !14
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #3, !dbg !14
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #3, !dbg !14
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #3, !dbg !14
  %31 = zext nneg i32 %14 to i64, !dbg !15
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !15
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !16
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !17
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !18
  %44 = or i32 %14, 1024, !dbg !19
  %45 = add i32 %44, %16, !dbg !11
  %46 = sext i32 %45 to i64, !dbg !12
  %47 = getelementptr i16, ptr addrspace(1) %1, i64 %46, !dbg !12
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !13
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !13
  %51 = trunc i32 %49 to i16, !dbg !13
  %extelt.offset8.1 = lshr i32 %49, 16, !dbg !13
  %52 = trunc i32 %extelt.offset8.1 to i16, !dbg !13
  %53 = trunc i32 %50 to i16, !dbg !13
  %extelt.offset9.1 = lshr i32 %50, 16, !dbg !13
  %54 = trunc i32 %extelt.offset9.1 to i16, !dbg !13
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !14
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #3, !dbg !14
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #3, !dbg !14
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #3, !dbg !14
  %59 = zext nneg i32 %44 to i64, !dbg !15
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !15
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !16
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !16
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !16
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !16
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !17
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !18
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !18
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !18
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !18
  %72 = or i32 %14, 2048, !dbg !19
  %73 = icmp ult i32 %72, 2304, !dbg !20
  %74 = add i32 %72, %16, !dbg !11
  %75 = sext i32 %74 to i64, !dbg !12
  %76 = getelementptr i16, ptr addrspace(1) %1, i64 %75, !dbg !12
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !13
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !13
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !13
  %80 = trunc i32 %78 to i16, !dbg !13
  %extelt.offset8.2 = lshr i32 %78, 16, !dbg !13
  %81 = trunc i32 %extelt.offset8.2 to i16, !dbg !13
  %82 = trunc i32 %79 to i16, !dbg !13
  %extelt.offset9.2 = lshr i32 %79, 16, !dbg !13
  %83 = trunc i32 %extelt.offset9.2 to i16, !dbg !13
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #3, !dbg !14
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #3, !dbg !14
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #3, !dbg !14
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #3, !dbg !14
  %88 = zext nneg i32 %72 to i64, !dbg !15
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !15
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !16
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !16
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !16
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !16
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !16
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !17
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !18
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !18
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !18
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !18
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !18
  %101 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !16
  %102 = insertelement <2 x i32> %101, i32 %35, i64 1, !dbg !16
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !16
  %104 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !18
  %105 = insertelement <2 x i32> %104, i32 %41, i64 1, !dbg !18
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !18
  %107 = fadd <2 x float> %103, <float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %108 = insertelement <2 x float> poison, float %27, i64 0, !dbg !22
  %109 = insertelement <2 x float> %108, float %28, i64 1, !dbg !22
  %110 = fmul <2 x float> %109, %107, !dbg !22
  %111 = fmul <2 x float> %110, %106, !dbg !23
  %112 = fadd <2 x float> %111, zeroinitializer, !dbg !24
  %113 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !16
  %114 = insertelement <2 x i32> %113, i32 %63, i64 1, !dbg !16
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !16
  %116 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !18
  %117 = insertelement <2 x i32> %116, i32 %69, i64 1, !dbg !18
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !18
  %119 = fadd <2 x float> %115, <float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %120 = insertelement <2 x float> poison, float %55, i64 0, !dbg !22
  %121 = insertelement <2 x float> %120, float %56, i64 1, !dbg !22
  %122 = fmul <2 x float> %121, %119, !dbg !22
  %123 = fmul <2 x float> %122, %118, !dbg !23
  %124 = fadd <2 x float> %112, %123, !dbg !24
  %125 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !16
  %126 = insertelement <2 x i32> %125, i32 %92, i64 1, !dbg !16
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !16
  %128 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !18
  %129 = insertelement <2 x i32> %128, i32 %98, i64 1, !dbg !18
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !18
  %131 = fadd <2 x float> %127, <float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %132 = insertelement <2 x float> poison, float %84, i64 0, !dbg !22
  %133 = insertelement <2 x float> %132, float %85, i64 1, !dbg !22
  %134 = fmul <2 x float> %133, %131, !dbg !22
  %135 = fmul <2 x float> %134, %130, !dbg !23
  %136 = insertelement <2 x i1> poison, i1 %73, i64 0, !dbg !24
  %137 = shufflevector <2 x i1> %136, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !24
  %138 = select <2 x i1> %137, <2 x float> %135, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !24
  %139 = fadd <2 x float> %124, %138, !dbg !24
  %140 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !16
  %141 = insertelement <2 x i32> %140, i32 %36, i64 1, !dbg !16
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !16
  %143 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !18
  %144 = insertelement <2 x i32> %143, i32 %42, i64 1, !dbg !18
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !18
  %146 = fadd <2 x float> %142, <float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %147 = insertelement <2 x float> poison, float %30, i64 0, !dbg !22
  %148 = insertelement <2 x float> %147, float %29, i64 1, !dbg !22
  %149 = fmul <2 x float> %148, %146, !dbg !22
  %150 = fmul <2 x float> %149, %145, !dbg !23
  %151 = fadd <2 x float> %150, zeroinitializer, !dbg !24
  %152 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !16
  %153 = insertelement <2 x i32> %152, i32 %64, i64 1, !dbg !16
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !16
  %155 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !18
  %156 = insertelement <2 x i32> %155, i32 %70, i64 1, !dbg !18
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !18
  %158 = fadd <2 x float> %154, <float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %159 = insertelement <2 x float> poison, float %58, i64 0, !dbg !22
  %160 = insertelement <2 x float> %159, float %57, i64 1, !dbg !22
  %161 = fmul <2 x float> %160, %158, !dbg !22
  %162 = fmul <2 x float> %161, %157, !dbg !23
  %163 = fadd <2 x float> %151, %162, !dbg !24
  %164 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !16
  %165 = insertelement <2 x i32> %164, i32 %93, i64 1, !dbg !16
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !16
  %167 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !18
  %168 = insertelement <2 x i32> %167, i32 %99, i64 1, !dbg !18
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !18
  %170 = fadd <2 x float> %166, <float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %171 = insertelement <2 x float> poison, float %87, i64 0, !dbg !22
  %172 = insertelement <2 x float> %171, float %86, i64 1, !dbg !22
  %173 = fmul <2 x float> %172, %170, !dbg !22
  %174 = fmul <2 x float> %173, %169, !dbg !23
  %175 = select <2 x i1> %137, <2 x float> %174, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !24
  %176 = fadd <2 x float> %163, %175, !dbg !24
  %177 = and i32 %12, 31, !dbg !8
  %178 = and i32 %13, 7, !dbg !8
  %shift = shufflevector <2 x float> %139, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %179 = fadd <2 x float> %139, %shift, !dbg !25
  %shift24 = shufflevector <2 x float> %176, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %180 = fadd <2 x float> %shift24, %179, !dbg !25
  %181 = fadd <2 x float> %176, %180, !dbg !25
  %182 = extractelement <2 x float> %181, i64 0, !dbg !25
  %183 = bitcast float %182 to i32, !dbg !31
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 16, i32 31), !dbg !31
  %185 = bitcast i32 %184 to float, !dbg !31
  %186 = fadd float %182, %185, !dbg !25
  %187 = bitcast float %186 to i32, !dbg !31
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 8, i32 31), !dbg !31
  %189 = bitcast i32 %188 to float, !dbg !31
  %190 = fadd float %186, %189, !dbg !25
  %191 = bitcast float %190 to i32, !dbg !31
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 4, i32 31), !dbg !31
  %193 = bitcast i32 %192 to float, !dbg !31
  %194 = fadd float %190, %193, !dbg !25
  %195 = bitcast float %194 to i32, !dbg !31
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 2, i32 31), !dbg !31
  %197 = bitcast i32 %196 to float, !dbg !31
  %198 = fadd float %194, %197, !dbg !25
  %199 = bitcast float %198 to i32, !dbg !31
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 1, i32 31), !dbg !31
  %201 = bitcast i32 %200 to float, !dbg !31
  %202 = fadd float %198, %201, !dbg !25
  %203 = icmp eq i32 %177, 0, !dbg !31
  %204 = zext nneg i32 %178 to i64, !dbg !31
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i64 %204, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, float %202, i1 %203) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %206 = icmp slt i32 %12, 8, !dbg !31
  %207 = sext i32 %12 to i64, !dbg !31
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i64 %207, !dbg !31
  %209 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %208, i1 %206) #3, !dbg !31
  %210 = bitcast float %209 to i32, !dbg !31
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 4, i32 31), !dbg !31
  %212 = bitcast i32 %211 to float, !dbg !31
  %213 = fadd float %209, %212, !dbg !25
  %214 = bitcast float %213 to i32, !dbg !31
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 2, i32 31), !dbg !31
  %216 = bitcast i32 %215 to float, !dbg !31
  %217 = fadd float %213, %216, !dbg !25
  %218 = bitcast float %217 to i32, !dbg !31
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 1, i32 31), !dbg !31
  %220 = bitcast i32 %219 to float, !dbg !31
  %221 = fadd float %217, %220, !dbg !25
  %222 = and i32 %12, 7, !dbg !31
  %223 = icmp eq i32 %222, 0, !dbg !31
  %224 = and i1 %206, %223, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, float %221, i1 %224) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %225 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !31
  %226 = sext i32 %15 to i64, !dbg !33
  %227 = getelementptr float, ptr addrspace(1) %4, i64 %226, !dbg !33
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #3, !dbg !34
  %229 = bitcast i32 %228 to float, !dbg !34
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #3, !dbg !34
  %231 = bitcast i32 %230 to float, !dbg !34
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #3, !dbg !34
  %233 = bitcast i32 %232 to float, !dbg !34
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #3, !dbg !34
  %235 = bitcast i32 %234 to float, !dbg !34
  %236 = fmul float %225, -5.000000e-01, !dbg !35
  %237 = fmul float %229, %229, !dbg !36
  %238 = fmul float %231, %231, !dbg !36
  %239 = fmul float %233, %233, !dbg !36
  %240 = fmul float %235, %235, !dbg !36
  %241 = fmul float %237, %229, !dbg !37
  %242 = fmul float %238, %231, !dbg !37
  %243 = fmul float %239, %233, !dbg !37
  %244 = fmul float %240, %235, !dbg !37
  %245 = fmul float %236, %241, !dbg !38
  %246 = fmul float %236, %242, !dbg !38
  %247 = fmul float %236, %243, !dbg !38
  %248 = fmul float %236, %244, !dbg !38
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float 2.304000e+03) #3, !dbg !39
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float 2.304000e+03) #3, !dbg !39
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float 2.304000e+03) #3, !dbg !39
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float 2.304000e+03) #3, !dbg !39
  %253 = insertelement <4 x float> poison, float %249, i64 0, !dbg !40
  %254 = shufflevector <4 x float> %253, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %255 = insertelement <4 x float> poison, float %229, i64 0, !dbg !41
  %256 = shufflevector <4 x float> %255, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !41
  br label %257, !dbg !42

257:                                              ; preds = %11, %257
  %258 = phi i32 [ 0, %11 ], [ %359, %257 ]
  %259 = phi <4 x float> [ zeroinitializer, %11 ], [ %354, %257 ]
  %260 = or i32 %258, %14, !dbg !43
  %261 = icmp ult i32 %260, 2304, !dbg !44
  %262 = add i32 %260, %16, !dbg !45
  %263 = sext i32 %262 to i64, !dbg !46
  %264 = getelementptr float, ptr addrspace(1) %0, i64 %263, !dbg !46
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %264, i1 %261, i32 0, i1 %261, i32 0, i1 %261, i32 0, i1 %261, i32 0, i1 %261) #3, !dbg !47
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !47
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !47
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !47
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !47
  %270 = getelementptr i16, ptr addrspace(1) %1, i64 %263, !dbg !48
  %271 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %270, i1 %261, i32 0, i1 %261, i32 0, i1 %261) #3, !dbg !49
  %272 = extractvalue { i32, i32 } %271, 0, !dbg !49
  %273 = extractvalue { i32, i32 } %271, 1, !dbg !49
  %274 = trunc i32 %272 to i16, !dbg !49
  %extelt.offset4 = lshr i32 %272, 16, !dbg !49
  %275 = trunc i32 %extelt.offset4 to i16, !dbg !49
  %276 = trunc i32 %273 to i16, !dbg !49
  %extelt.offset5 = lshr i32 %273, 16, !dbg !49
  %277 = trunc i32 %extelt.offset5 to i16, !dbg !49
  %278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %274) #3, !dbg !50
  %279 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %275) #3, !dbg !50
  %280 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %276) #3, !dbg !50
  %281 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %277) #3, !dbg !50
  %282 = zext nneg i32 %260 to i64, !dbg !51
  %283 = getelementptr float, ptr addrspace(1) %2, i64 %282, !dbg !51
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %283, i1 %261, i32 0, i1 %261, i32 0, i1 %261, i32 0, i1 %261, i32 0, i1 %261) #3, !dbg !52
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !52
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !52
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !52
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !52
  %289 = getelementptr float, ptr addrspace(1) %3, i64 %263, !dbg !53
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %289, i1 %261, i32 0, i1 %261, i32 0, i1 %261, i32 0, i1 %261, i32 0, i1 %261) #3, !dbg !54
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !54
  %292 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !54
  %293 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !54
  %294 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !54
  %295 = getelementptr float, ptr addrspace(1) %5, i64 %282, !dbg !55
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %295, i1 %261, i32 0, i1 %261, i32 0, i1 %261, i32 0, i1 %261, i32 0, i1 %261) #3, !dbg !56
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !56
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !56
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !56
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !56
  %301 = getelementptr i16, ptr addrspace(1) %6, i64 %263, !dbg !57
  %302 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %301, i1 %261, i32 0, i1 %261, i32 0, i1 %261) #3, !dbg !58
  %303 = extractvalue { i32, i32 } %302, 0, !dbg !58
  %304 = extractvalue { i32, i32 } %302, 1, !dbg !58
  %305 = trunc i32 %303 to i16, !dbg !58
  %extelt.offset6 = lshr i32 %303, 16, !dbg !58
  %306 = trunc i32 %extelt.offset6 to i16, !dbg !58
  %307 = trunc i32 %304 to i16, !dbg !58
  %extelt.offset7 = lshr i32 %304, 16, !dbg !58
  %308 = trunc i32 %extelt.offset7 to i16, !dbg !58
  %309 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %305) #3, !dbg !59
  %310 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %306) #3, !dbg !59
  %311 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %307) #3, !dbg !59
  %312 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %308) #3, !dbg !59
  %313 = insertelement <4 x i32> poison, i32 %266, i64 0, !dbg !47
  %314 = insertelement <4 x i32> %313, i32 %267, i64 1, !dbg !47
  %315 = insertelement <4 x i32> %314, i32 %268, i64 2, !dbg !47
  %316 = insertelement <4 x i32> %315, i32 %269, i64 3, !dbg !47
  %317 = bitcast <4 x i32> %316 to <4 x float>, !dbg !47
  %318 = insertelement <4 x i32> poison, i32 %285, i64 0, !dbg !52
  %319 = insertelement <4 x i32> %318, i32 %286, i64 1, !dbg !52
  %320 = insertelement <4 x i32> %319, i32 %287, i64 2, !dbg !52
  %321 = insertelement <4 x i32> %320, i32 %288, i64 3, !dbg !52
  %322 = bitcast <4 x i32> %321 to <4 x float>, !dbg !52
  %323 = insertelement <4 x i32> poison, i32 %291, i64 0, !dbg !54
  %324 = insertelement <4 x i32> %323, i32 %292, i64 1, !dbg !54
  %325 = insertelement <4 x i32> %324, i32 %293, i64 2, !dbg !54
  %326 = insertelement <4 x i32> %325, i32 %294, i64 3, !dbg !54
  %327 = bitcast <4 x i32> %326 to <4 x float>, !dbg !54
  %328 = insertelement <4 x i32> poison, i32 %297, i64 0, !dbg !56
  %329 = insertelement <4 x i32> %328, i32 %298, i64 1, !dbg !56
  %330 = insertelement <4 x i32> %329, i32 %299, i64 2, !dbg !56
  %331 = insertelement <4 x i32> %330, i32 %300, i64 3, !dbg !56
  %332 = bitcast <4 x i32> %331 to <4 x float>, !dbg !56
  %333 = fadd <4 x float> %322, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !60
  %334 = insertelement <4 x float> poison, float %278, i64 0, !dbg !61
  %335 = insertelement <4 x float> %334, float %279, i64 1, !dbg !61
  %336 = insertelement <4 x float> %335, float %280, i64 2, !dbg !61
  %337 = insertelement <4 x float> %336, float %281, i64 3, !dbg !61
  %338 = fmul <4 x float> %337, %333, !dbg !61
  %339 = fmul <4 x float> %338, %256, !dbg !41
  %340 = fadd <4 x float> %339, %317, !dbg !62
  %341 = fmul <4 x float> %254, %327, !dbg !40
  %342 = fadd <4 x float> %341, %340, !dbg !63
  %343 = fadd <4 x float> %341, %342, !dbg !64
  %344 = fadd <4 x float> %332, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !65
  %345 = fmul <4 x float> %344, %343, !dbg !66
  %346 = insertelement <4 x float> poison, float %309, i64 0, !dbg !67
  %347 = insertelement <4 x float> %346, float %310, i64 1, !dbg !67
  %348 = insertelement <4 x float> %347, float %311, i64 2, !dbg !67
  %349 = insertelement <4 x float> %348, float %312, i64 3, !dbg !67
  %350 = fmul <4 x float> %349, %345, !dbg !67
  %351 = insertelement <4 x i1> poison, i1 %261, i64 0, !dbg !68
  %352 = shufflevector <4 x i1> %351, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !68
  %353 = select <4 x i1> %352, <4 x float> %350, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !68
  %354 = fadd <4 x float> %259, %353, !dbg !68
  %bc = bitcast <4 x float> %343 to <4 x i32>, !dbg !69
  %355 = extractelement <4 x i32> %bc, i64 0, !dbg !69
  %bc28 = bitcast <4 x float> %343 to <4 x i32>, !dbg !69
  %356 = extractelement <4 x i32> %bc28, i64 1, !dbg !69
  %bc29 = bitcast <4 x float> %343 to <4 x i32>, !dbg !69
  %357 = extractelement <4 x i32> %bc29, i64 2, !dbg !69
  %bc30 = bitcast <4 x float> %343 to <4 x i32>, !dbg !69
  %358 = extractelement <4 x i32> %bc30, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %355, i32 %356, i32 %357, i32 %358, ptr addrspace(1) %264, i1 %261) #3, !dbg !69
  %359 = add nuw nsw i32 %258, 1024, !dbg !42
  %360 = icmp ult i32 %258, 1280, !dbg !42
  br i1 %360, label %257, label %361, !dbg !42

361:                                              ; preds = %257
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %shift25 = shufflevector <4 x float> %354, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !72
  %362 = fadd <4 x float> %354, %shift25, !dbg !72
  %shift26 = shufflevector <4 x float> %354, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !72
  %363 = fadd <4 x float> %shift26, %362, !dbg !72
  %shift27 = shufflevector <4 x float> %354, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !72
  %364 = fadd <4 x float> %shift27, %363, !dbg !72
  %365 = extractelement <4 x float> %364, i64 0, !dbg !72
  %366 = bitcast float %365 to i32, !dbg !70
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 16, i32 31), !dbg !70
  %368 = bitcast i32 %367 to float, !dbg !70
  %369 = fadd float %365, %368, !dbg !72
  %370 = bitcast float %369 to i32, !dbg !70
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 8, i32 31), !dbg !70
  %372 = bitcast i32 %371 to float, !dbg !70
  %373 = fadd float %369, %372, !dbg !72
  %374 = bitcast float %373 to i32, !dbg !70
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 4, i32 31), !dbg !70
  %376 = bitcast i32 %375 to float, !dbg !70
  %377 = fadd float %373, %376, !dbg !72
  %378 = bitcast float %377 to i32, !dbg !70
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 2, i32 31), !dbg !70
  %380 = bitcast i32 %379 to float, !dbg !70
  %381 = fadd float %377, %380, !dbg !72
  %382 = bitcast float %381 to i32, !dbg !70
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 1, i32 31), !dbg !70
  %384 = bitcast i32 %383 to float, !dbg !70
  %385 = fadd float %381, %384, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, float %385, i1 %203) #3, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %386 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %208, i1 %206) #3, !dbg !70
  %387 = bitcast float %386 to i32, !dbg !70
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 4, i32 31), !dbg !70
  %389 = bitcast i32 %388 to float, !dbg !70
  %390 = fadd float %386, %389, !dbg !72
  %391 = bitcast float %390 to i32, !dbg !70
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 2, i32 31), !dbg !70
  %393 = bitcast i32 %392 to float, !dbg !70
  %394 = fadd float %390, %393, !dbg !72
  %395 = bitcast float %394 to i32, !dbg !70
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 1, i32 31), !dbg !70
  %397 = bitcast i32 %396 to float, !dbg !70
  %398 = fadd float %394, %397, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, float %398, i1 %224) #3, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %399 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !70
  %400 = getelementptr float, ptr addrspace(1) %7, i64 %226, !dbg !75
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %400, i1 true) #3, !dbg !76
  %402 = bitcast i32 %401 to float, !dbg !76
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %400, i1 true) #3, !dbg !76
  %404 = bitcast i32 %403 to float, !dbg !76
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %400, i1 true) #3, !dbg !76
  %406 = bitcast i32 %405 to float, !dbg !76
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %400, i1 true) #3, !dbg !76
  %408 = bitcast i32 %407 to float, !dbg !76
  %409 = fmul float %399, -5.000000e-01, !dbg !77
  %410 = fmul float %402, %402, !dbg !78
  %411 = fmul float %404, %404, !dbg !78
  %412 = fmul float %406, %406, !dbg !78
  %413 = fmul float %408, %408, !dbg !78
  %414 = fmul float %410, %402, !dbg !79
  %415 = fmul float %411, %404, !dbg !79
  %416 = fmul float %412, %406, !dbg !79
  %417 = fmul float %413, %408, !dbg !79
  %418 = fmul float %409, %414, !dbg !80
  %419 = fmul float %409, %415, !dbg !80
  %420 = fmul float %409, %416, !dbg !80
  %421 = fmul float %409, %417, !dbg !80
  %422 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %418, float 2.304000e+03) #3, !dbg !81
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %419, float 2.304000e+03) #3, !dbg !81
  %424 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %420, float 2.304000e+03) #3, !dbg !81
  %425 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %421, float 2.304000e+03) #3, !dbg !81
  br label %426, !dbg !82

426:                                              ; preds = %361, %426
  %427 = phi i32 [ 0, %361 ], [ %500, %426 ]
  %428 = or i32 %427, %14, !dbg !83
  %429 = icmp ult i32 %428, 2304, !dbg !84
  %430 = add i32 %428, %16, !dbg !85
  %431 = sext i32 %430 to i64, !dbg !86
  %432 = getelementptr float, ptr addrspace(1) %0, i64 %431, !dbg !86
  %433 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %432, i1 %429, i32 0, i1 %429, i32 0, i1 %429, i32 0, i1 %429, i32 0, i1 %429) #3, !dbg !87
  %434 = extractvalue { i32, i32, i32, i32 } %433, 0, !dbg !87
  %435 = extractvalue { i32, i32, i32, i32 } %433, 1, !dbg !87
  %436 = extractvalue { i32, i32, i32, i32 } %433, 2, !dbg !87
  %437 = extractvalue { i32, i32, i32, i32 } %433, 3, !dbg !87
  %438 = bitcast i32 %434 to float, !dbg !87
  %439 = bitcast i32 %435 to float, !dbg !87
  %440 = bitcast i32 %436 to float, !dbg !87
  %441 = bitcast i32 %437 to float, !dbg !87
  %442 = zext nneg i32 %428 to i64, !dbg !88
  %443 = getelementptr float, ptr addrspace(1) %5, i64 %442, !dbg !88
  %444 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %443, i1 %429, i32 0, i1 %429, i32 0, i1 %429, i32 0, i1 %429, i32 0, i1 %429) #3, !dbg !89
  %445 = extractvalue { i32, i32, i32, i32 } %444, 0, !dbg !89
  %446 = extractvalue { i32, i32, i32, i32 } %444, 1, !dbg !89
  %447 = extractvalue { i32, i32, i32, i32 } %444, 2, !dbg !89
  %448 = extractvalue { i32, i32, i32, i32 } %444, 3, !dbg !89
  %449 = bitcast i32 %445 to float, !dbg !89
  %450 = bitcast i32 %446 to float, !dbg !89
  %451 = bitcast i32 %447 to float, !dbg !89
  %452 = bitcast i32 %448 to float, !dbg !89
  %453 = getelementptr i16, ptr addrspace(1) %6, i64 %431, !dbg !90
  %454 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %453, i1 %429, i32 0, i1 %429, i32 0, i1 %429) #3, !dbg !91
  %455 = extractvalue { i32, i32 } %454, 0, !dbg !91
  %456 = extractvalue { i32, i32 } %454, 1, !dbg !91
  %457 = trunc i32 %455 to i16, !dbg !91
  %extelt.offset = lshr i32 %455, 16, !dbg !91
  %458 = trunc i32 %extelt.offset to i16, !dbg !91
  %459 = trunc i32 %456 to i16, !dbg !91
  %extelt.offset3 = lshr i32 %456, 16, !dbg !91
  %460 = trunc i32 %extelt.offset3 to i16, !dbg !91
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %457) #3, !dbg !92
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #3, !dbg !92
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #3, !dbg !92
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #3, !dbg !92
  %465 = fadd float %449, 1.000000e+00, !dbg !93
  %466 = fadd float %450, 1.000000e+00, !dbg !93
  %467 = fadd float %451, 1.000000e+00, !dbg !93
  %468 = fadd float %452, 1.000000e+00, !dbg !93
  %469 = fmul float %465, %438, !dbg !94
  %470 = fmul float %466, %439, !dbg !94
  %471 = fmul float %467, %440, !dbg !94
  %472 = fmul float %468, %441, !dbg !94
  %473 = fmul float %469, %402, !dbg !95
  %474 = fmul float %470, %402, !dbg !95
  %475 = fmul float %471, %402, !dbg !95
  %476 = fmul float %472, %402, !dbg !95
  %477 = fmul float %422, %461, !dbg !96
  %478 = fmul float %422, %462, !dbg !96
  %479 = fmul float %422, %463, !dbg !96
  %480 = fmul float %422, %464, !dbg !96
  %481 = fadd float %477, %473, !dbg !97
  %482 = fadd float %478, %474, !dbg !97
  %483 = fadd float %475, %479, !dbg !97
  %484 = fadd float %476, %480, !dbg !97
  %485 = fadd float %477, %481, !dbg !98
  %486 = fadd float %478, %482, !dbg !98
  %487 = fadd float %479, %483, !dbg !98
  %488 = fadd float %480, %484, !dbg !98
  %489 = getelementptr i16, ptr addrspace(1) %8, i64 %431, !dbg !99
  %490 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %485) #3, !dbg !100
  %491 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %486) #3, !dbg !100
  %492 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %487) #3, !dbg !100
  %493 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %488) #3, !dbg !100
  %494 = insertelement <2 x i16> undef, i16 %490, i64 0, !dbg !100
  %495 = insertelement <2 x i16> %494, i16 %491, i64 1, !dbg !100
  %496 = bitcast <2 x i16> %495 to i32, !dbg !100
  %497 = insertelement <2 x i16> undef, i16 %492, i64 0, !dbg !100
  %498 = insertelement <2 x i16> %497, i16 %493, i64 1, !dbg !100
  %499 = bitcast <2 x i16> %498 to i32, !dbg !100
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %496, i32 %499, ptr addrspace(1) %489, i1 %429) #3, !dbg !100
  %500 = add nuw nsw i32 %427, 1024, !dbg !82
  %501 = icmp ult i32 %427, 1280, !dbg !82
  br i1 %501, label %426, label %502, !dbg !82

502:                                              ; preds = %426
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c4c7vevur5y3g5org5kuuvulisftjjitjxh56234z6qpy3c35heu.py", directory: "/tmp/torchinductor_zeus/4c")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9de10de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9de10de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9de10de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9de10de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 31, column: 45, scope: !5)
!11 = !DILocation(line: 31, column: 40, scope: !5)
!12 = !DILocation(line: 31, column: 34, scope: !5)
!13 = !DILocation(line: 31, column: 51, scope: !5)
!14 = !DILocation(line: 31, column: 102, scope: !5)
!15 = !DILocation(line: 32, column: 34, scope: !5)
!16 = !DILocation(line: 32, column: 39, scope: !5)
!17 = !DILocation(line: 33, column: 34, scope: !5)
!18 = !DILocation(line: 33, column: 51, scope: !5)
!19 = !DILocation(line: 28, column: 27, scope: !5)
!20 = !DILocation(line: 29, column: 25, scope: !5)
!21 = !DILocation(line: 36, column: 22, scope: !5)
!22 = !DILocation(line: 37, column: 22, scope: !5)
!23 = !DILocation(line: 38, column: 22, scope: !5)
!24 = !DILocation(line: 41, column: 39, scope: !5)
!25 = !DILocation(line: 233, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !5, file: !27, discriminator: 0)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 42, column: 25, scope: !26)
!31 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !32)
!32 = !DILocation(line: 42, column: 25, scope: !28)
!33 = !DILocation(line: 43, column: 31, scope: !5)
!34 = !DILocation(line: 43, column: 36, scope: !5)
!35 = !DILocation(line: 62, column: 23, scope: !5)
!36 = !DILocation(line: 63, column: 24, scope: !5)
!37 = !DILocation(line: 64, column: 24, scope: !5)
!38 = !DILocation(line: 65, column: 24, scope: !5)
!39 = !DILocation(line: 67, column: 24, scope: !5)
!40 = !DILocation(line: 68, column: 24, scope: !5)
!41 = !DILocation(line: 59, column: 24, scope: !5)
!42 = !DILocation(line: 45, column: 36, scope: !5)
!43 = !DILocation(line: 46, column: 27, scope: !5)
!44 = !DILocation(line: 47, column: 25, scope: !5)
!45 = !DILocation(line: 49, column: 45, scope: !5)
!46 = !DILocation(line: 49, column: 39, scope: !5)
!47 = !DILocation(line: 49, column: 56, scope: !5)
!48 = !DILocation(line: 50, column: 35, scope: !5)
!49 = !DILocation(line: 50, column: 52, scope: !5)
!50 = !DILocation(line: 50, column: 104, scope: !5)
!51 = !DILocation(line: 51, column: 35, scope: !5)
!52 = !DILocation(line: 51, column: 40, scope: !5)
!53 = !DILocation(line: 52, column: 35, scope: !5)
!54 = !DILocation(line: 52, column: 52, scope: !5)
!55 = !DILocation(line: 53, column: 35, scope: !5)
!56 = !DILocation(line: 53, column: 40, scope: !5)
!57 = !DILocation(line: 54, column: 35, scope: !5)
!58 = !DILocation(line: 54, column: 52, scope: !5)
!59 = !DILocation(line: 54, column: 103, scope: !5)
!60 = !DILocation(line: 57, column: 24, scope: !5)
!61 = !DILocation(line: 58, column: 24, scope: !5)
!62 = !DILocation(line: 60, column: 24, scope: !5)
!63 = !DILocation(line: 69, column: 24, scope: !5)
!64 = !DILocation(line: 70, column: 24, scope: !5)
!65 = !DILocation(line: 71, column: 24, scope: !5)
!66 = !DILocation(line: 72, column: 24, scope: !5)
!67 = !DILocation(line: 74, column: 24, scope: !5)
!68 = !DILocation(line: 77, column: 40, scope: !5)
!69 = !DILocation(line: 78, column: 56, scope: !5)
!70 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !71)
!71 = !DILocation(line: 79, column: 27, scope: !28)
!72 = !DILocation(line: 233, column: 15, scope: !26, inlinedAt: !73)
!73 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !74)
!74 = !DILocation(line: 79, column: 27, scope: !26)
!75 = !DILocation(line: 80, column: 31, scope: !5)
!76 = !DILocation(line: 80, column: 36, scope: !5)
!77 = !DILocation(line: 93, column: 24, scope: !5)
!78 = !DILocation(line: 94, column: 24, scope: !5)
!79 = !DILocation(line: 95, column: 24, scope: !5)
!80 = !DILocation(line: 96, column: 24, scope: !5)
!81 = !DILocation(line: 98, column: 24, scope: !5)
!82 = !DILocation(line: 81, column: 36, scope: !5)
!83 = !DILocation(line: 82, column: 27, scope: !5)
!84 = !DILocation(line: 83, column: 25, scope: !5)
!85 = !DILocation(line: 85, column: 45, scope: !5)
!86 = !DILocation(line: 85, column: 39, scope: !5)
!87 = !DILocation(line: 85, column: 56, scope: !5)
!88 = !DILocation(line: 86, column: 35, scope: !5)
!89 = !DILocation(line: 86, column: 40, scope: !5)
!90 = !DILocation(line: 87, column: 35, scope: !5)
!91 = !DILocation(line: 87, column: 52, scope: !5)
!92 = !DILocation(line: 87, column: 104, scope: !5)
!93 = !DILocation(line: 89, column: 24, scope: !5)
!94 = !DILocation(line: 90, column: 24, scope: !5)
!95 = !DILocation(line: 91, column: 24, scope: !5)
!96 = !DILocation(line: 100, column: 24, scope: !5)
!97 = !DILocation(line: 101, column: 24, scope: !5)
!98 = !DILocation(line: 102, column: 24, scope: !5)
!99 = !DILocation(line: 104, column: 29, scope: !5)
!100 = !DILocation(line: 104, column: 53, scope: !5)
!101 = !DILocation(line: 81, column: 4, scope: !5)
