; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3de4de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = lshr i32 %6, 5, !dbg !10
  %urem = shl i32 %6, 2, !dbg !10
  %8 = and i32 %urem, 1020, !dbg !10
  %9 = or i32 %8, 1024, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %11 = icmp slt i32 %10, 512, !dbg !12
  %12 = mul i32 %10, 2304, !dbg !13
  %13 = add i32 %8, %12, !dbg !14
  %14 = add i32 %9, %12, !dbg !14
  %15 = sext i32 %13 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = sext i32 %14 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #6, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #6, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %29 = bitcast i32 %25 to float, !dbg !16
  %30 = bitcast i32 %26 to float, !dbg !16
  %31 = bitcast i32 %27 to float, !dbg !16
  %32 = bitcast i32 %28 to float, !dbg !16
  %33 = fmul float %29, %29, !dbg !17
  %34 = fmul float %30, %30, !dbg !17
  %35 = fmul float %31, %31, !dbg !17
  %36 = fmul float %32, %32, !dbg !17
  %37 = select i1 %11, float %33, float 0.000000e+00, !dbg !18
  %38 = select i1 %11, float %34, float 0.000000e+00, !dbg !18
  %39 = select i1 %11, float %35, float 0.000000e+00, !dbg !18
  %40 = select i1 %11, float %36, float 0.000000e+00, !dbg !18
  %41 = or i32 %8, 2048, !dbg !19
  %42 = or i32 %8, 3072, !dbg !19
  %43 = icmp ult i32 %41, 2304, !dbg !20
  %44 = add i32 %41, %12, !dbg !14
  %45 = add i32 %42, %12, !dbg !14
  %46 = sext i32 %44 to i64, !dbg !15
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !15
  %48 = sext i32 %45 to i64, !dbg !15
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !15
  %50 = and i1 %11, %43, !dbg !21
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #6, !dbg !16
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !16
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !16
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !16
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !16
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !16
  %57 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !16
  %58 = insertelement <2 x i32> %57, i32 %21, i64 1, !dbg !16
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !16
  %60 = fmul <2 x float> %59, %59, !dbg !17
  %61 = insertelement <2 x i1> poison, i1 %11, i64 0, !dbg !18
  %62 = shufflevector <2 x i1> %61, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !18
  %63 = select <2 x i1> %62, <2 x float> %60, <2 x float> zeroinitializer, !dbg !18
  %64 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !16
  %65 = insertelement <2 x i32> %64, i32 %53, i64 1, !dbg !16
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !16
  %67 = fmul <2 x float> %66, %66, !dbg !17
  %68 = insertelement <2 x i1> poison, i1 %50, i64 0, !dbg !18
  %69 = shufflevector <2 x i1> %68, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !18
  %70 = select <2 x i1> %69, <2 x float> %67, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !18
  %71 = fadd <2 x float> %63, %70, !dbg !18
  %72 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !16
  %73 = insertelement <2 x i32> %72, i32 %22, i64 1, !dbg !16
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !16
  %75 = fmul <2 x float> %74, %74, !dbg !17
  %76 = select <2 x i1> %62, <2 x float> %75, <2 x float> zeroinitializer, !dbg !18
  %77 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !16
  %78 = insertelement <2 x i32> %77, i32 %54, i64 1, !dbg !16
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !16
  %80 = fmul <2 x float> %79, %79, !dbg !17
  %81 = select <2 x i1> %69, <2 x float> %80, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !18
  %82 = fadd <2 x float> %76, %81, !dbg !18
  %83 = and i32 %6, 31, !dbg !10
  %84 = and i32 %7, 7, !dbg !10
  %shift = shufflevector <2 x float> %71, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %85 = fadd <2 x float> %71, %shift, !dbg !22
  %shift18 = shufflevector <2 x float> %82, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %86 = fadd <2 x float> %shift18, %85, !dbg !22
  %87 = fadd <2 x float> %82, %86, !dbg !22
  %88 = extractelement <2 x float> %87, i64 0, !dbg !22
  %89 = fadd float %37, %88, !dbg !22
  %90 = fadd float %38, %89, !dbg !22
  %91 = fadd float %39, %90, !dbg !22
  %92 = fadd float %40, %91, !dbg !22
  %93 = bitcast float %92 to i32, !dbg !28
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 16, i32 31), !dbg !28
  %95 = bitcast i32 %94 to float, !dbg !28
  %96 = fadd float %92, %95, !dbg !22
  %97 = bitcast float %96 to i32, !dbg !28
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !28
  %99 = bitcast i32 %98 to float, !dbg !28
  %100 = fadd float %96, %99, !dbg !22
  %101 = bitcast float %100 to i32, !dbg !28
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !28
  %103 = bitcast i32 %102 to float, !dbg !28
  %104 = fadd float %100, %103, !dbg !22
  %105 = bitcast float %104 to i32, !dbg !28
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 2, i32 31), !dbg !28
  %107 = bitcast i32 %106 to float, !dbg !28
  %108 = fadd float %104, %107, !dbg !22
  %109 = bitcast float %108 to i32, !dbg !28
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !28
  %111 = bitcast i32 %110 to float, !dbg !28
  %112 = fadd float %108, %111, !dbg !22
  %113 = icmp eq i32 %83, 0, !dbg !28
  %114 = zext nneg i32 %84 to i64, !dbg !28
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i64 %114, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, float %112, i1 %113) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %116 = icmp slt i32 %6, 8, !dbg !28
  %117 = sext i32 %6 to i64, !dbg !28
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i64 %117, !dbg !28
  %119 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %118, i1 %116) #6, !dbg !28
  %120 = bitcast float %119 to i32, !dbg !28
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !28
  %122 = bitcast i32 %121 to float, !dbg !28
  %123 = fadd float %119, %122, !dbg !22
  %124 = bitcast float %123 to i32, !dbg !28
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !28
  %126 = bitcast i32 %125 to float, !dbg !28
  %127 = fadd float %123, %126, !dbg !22
  %128 = bitcast float %127 to i32, !dbg !28
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !28
  %130 = bitcast i32 %129 to float, !dbg !28
  %131 = fadd float %127, %130, !dbg !22
  %132 = and i32 %6, 7, !dbg !28
  %133 = icmp eq i32 %132, 0, !dbg !28
  %134 = and i1 %116, %133, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, float %131, i1 %134) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %135 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !28
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 2.304000e+03) #6, !dbg !30
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 2.304000e+03) #6, !dbg !30
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 2.304000e+03) #6, !dbg !30
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 2.304000e+03) #6, !dbg !30
  %140 = fadd float %136, 0x3EE4F8B580000000, !dbg !31
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #6, !dbg !32
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !32
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !32
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !32
  %146 = bitcast i32 %142 to float, !dbg !32
  %147 = bitcast i32 %143 to float, !dbg !32
  %148 = bitcast i32 %144 to float, !dbg !32
  %149 = bitcast i32 %145 to float, !dbg !32
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #6, !dbg !32
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !32
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !32
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !32
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !32
  %155 = bitcast i32 %151 to float, !dbg !32
  %156 = bitcast i32 %152 to float, !dbg !32
  %157 = bitcast i32 %153 to float, !dbg !32
  %158 = bitcast i32 %154 to float, !dbg !32
  %159 = zext nneg i32 %8 to i64, !dbg !33
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %159, !dbg !33
  %161 = zext nneg i32 %9 to i64, !dbg !33
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !33
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !34
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !34
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !34
  %168 = bitcast i32 %164 to float, !dbg !34
  %169 = bitcast i32 %165 to float, !dbg !34
  %170 = bitcast i32 %166 to float, !dbg !34
  %171 = bitcast i32 %167 to float, !dbg !34
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %162, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !34
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !34
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !34
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !34
  %177 = bitcast i32 %173 to float, !dbg !34
  %178 = bitcast i32 %174 to float, !dbg !34
  %179 = bitcast i32 %175 to float, !dbg !34
  %180 = bitcast i32 %176 to float, !dbg !34
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !35
  %.not.i = icmp eq i32 %181, 0, !dbg !35
  br i1 %.not.i, label %184, label %182, !dbg !35

182:                                              ; preds = %5
  %183 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %140), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

184:                                              ; preds = %5
  %185 = tail call float @llvm.nvvm.rsqrt.approx.f(float %140), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %182, %184
  %.0.i = phi float [ %183, %182 ], [ %185, %184 ], !dbg !35
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !35
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !35
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !35
  %189 = fmul float %.0.i, %146, !dbg !36
  %190 = fmul float %.0.i, %147, !dbg !36
  %191 = fmul float %.0.i, %148, !dbg !36
  %192 = fmul float %.0.i, %149, !dbg !36
  %193 = fmul float %.0.i, %155, !dbg !36
  %194 = fmul float %.0.i, %156, !dbg !36
  %195 = fmul float %.0.i, %157, !dbg !36
  %196 = fmul float %.0.i, %158, !dbg !36
  %197 = fadd float %168, 1.000000e+00, !dbg !37
  %198 = fadd float %169, 1.000000e+00, !dbg !37
  %199 = fadd float %170, 1.000000e+00, !dbg !37
  %200 = fadd float %171, 1.000000e+00, !dbg !37
  %201 = fadd float %177, 1.000000e+00, !dbg !37
  %202 = fadd float %178, 1.000000e+00, !dbg !37
  %203 = fadd float %179, 1.000000e+00, !dbg !37
  %204 = fadd float %180, 1.000000e+00, !dbg !37
  %205 = fmul float %197, %189, !dbg !38
  %206 = fmul float %198, %190, !dbg !38
  %207 = fmul float %199, %191, !dbg !38
  %208 = fmul float %200, %192, !dbg !38
  %209 = fmul float %201, %193, !dbg !38
  %210 = fmul float %202, %194, !dbg !38
  %211 = fmul float %203, %195, !dbg !38
  %212 = fmul float %204, %196, !dbg !38
  %213 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !39
  %214 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !39
  %215 = bitcast float %205 to i32, !dbg !40
  %216 = bitcast float %206 to i32, !dbg !40
  %217 = bitcast float %207 to i32, !dbg !40
  %218 = bitcast float %208 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %215, i32 %216, i32 %217, i32 %218, ptr addrspace(1) %213, i1 %11) #6, !dbg !40
  %219 = bitcast float %209 to i32, !dbg !40
  %220 = bitcast float %210 to i32, !dbg !40
  %221 = bitcast float %211 to i32, !dbg !40
  %222 = bitcast float %212 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %220, i32 %221, i32 %222, ptr addrspace(1) %214, i1 %11) #6, !dbg !40
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #6, !dbg !32
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !32
  %225 = zext nneg i32 %41 to i64, !dbg !33
  %226 = getelementptr float, ptr addrspace(1) %1, i64 %225, !dbg !33
  %227 = zext nneg i32 %42 to i64, !dbg !33
  %228 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !33
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %226, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #6, !dbg !34
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %228, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !34
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !35
  %.not.i.1 = icmp eq i32 %231, 0, !dbg !35
  br i1 %.not.i.1, label %234, label %232, !dbg !35

232:                                              ; preds = %__nv_rsqrtf.exit
  %233 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %140), !dbg !35
  br label %__nv_rsqrtf.exit.1, !dbg !35

234:                                              ; preds = %__nv_rsqrtf.exit
  %235 = tail call float @llvm.nvvm.rsqrt.approx.f(float %140), !dbg !35
  br label %__nv_rsqrtf.exit.1, !dbg !35

__nv_rsqrtf.exit.1:                               ; preds = %234, %232
  %.0.i.1 = phi float [ %233, %232 ], [ %235, %234 ], !dbg !35
  %236 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !34
  %237 = bitcast i32 %236 to float, !dbg !34
  %238 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !34
  %239 = bitcast i32 %238 to float, !dbg !34
  %240 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !34
  %241 = bitcast i32 %240 to float, !dbg !34
  %242 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !34
  %243 = bitcast i32 %242 to float, !dbg !34
  %244 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !34
  %245 = bitcast i32 %244 to float, !dbg !34
  %246 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !34
  %247 = bitcast i32 %246 to float, !dbg !34
  %248 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !34
  %249 = bitcast i32 %248 to float, !dbg !34
  %250 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !34
  %251 = bitcast i32 %250 to float, !dbg !34
  %252 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !32
  %253 = bitcast i32 %252 to float, !dbg !32
  %254 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !32
  %255 = bitcast i32 %254 to float, !dbg !32
  %256 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !32
  %257 = bitcast i32 %256 to float, !dbg !32
  %258 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !32
  %259 = bitcast i32 %258 to float, !dbg !32
  %260 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !32
  %261 = bitcast i32 %260 to float, !dbg !32
  %262 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !32
  %263 = bitcast i32 %262 to float, !dbg !32
  %264 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !32
  %265 = bitcast i32 %264 to float, !dbg !32
  %266 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !32
  %267 = bitcast i32 %266 to float, !dbg !32
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !35
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !35
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !35
  %271 = fmul float %.0.i.1, %267, !dbg !36
  %272 = fmul float %.0.i.1, %265, !dbg !36
  %273 = fmul float %.0.i.1, %263, !dbg !36
  %274 = fmul float %.0.i.1, %261, !dbg !36
  %275 = fmul float %.0.i.1, %259, !dbg !36
  %276 = fmul float %.0.i.1, %257, !dbg !36
  %277 = fmul float %.0.i.1, %255, !dbg !36
  %278 = fmul float %.0.i.1, %253, !dbg !36
  %279 = fadd float %251, 1.000000e+00, !dbg !37
  %280 = fadd float %249, 1.000000e+00, !dbg !37
  %281 = fadd float %247, 1.000000e+00, !dbg !37
  %282 = fadd float %245, 1.000000e+00, !dbg !37
  %283 = fadd float %243, 1.000000e+00, !dbg !37
  %284 = fadd float %241, 1.000000e+00, !dbg !37
  %285 = fadd float %239, 1.000000e+00, !dbg !37
  %286 = fadd float %237, 1.000000e+00, !dbg !37
  %287 = fmul float %279, %271, !dbg !38
  %288 = fmul float %280, %272, !dbg !38
  %289 = fmul float %281, %273, !dbg !38
  %290 = fmul float %282, %274, !dbg !38
  %291 = fmul float %283, %275, !dbg !38
  %292 = fmul float %284, %276, !dbg !38
  %293 = fmul float %285, %277, !dbg !38
  %294 = fmul float %286, %278, !dbg !38
  %295 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !39
  %296 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !39
  %297 = bitcast float %287 to i32, !dbg !40
  %298 = bitcast float %288 to i32, !dbg !40
  %299 = bitcast float %289 to i32, !dbg !40
  %300 = bitcast float %290 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %297, i32 %298, i32 %299, i32 %300, ptr addrspace(1) %295, i1 %50) #6, !dbg !40
  %301 = bitcast float %291 to i32, !dbg !40
  %302 = bitcast float %292 to i32, !dbg !40
  %303 = bitcast float %293 to i32, !dbg !40
  %304 = bitcast float %294 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %302, i32 %303, i32 %304, ptr addrspace(1) %296, i1 false) #6, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cexvdp7dnb3zwfgdu5zl64wm3ncw7lfkm2c6g32m4kqudzbdqt5u.py", directory: "/tmp/torchinductor_zeus/ex")
!4 = !{ptr @triton__0d1d2d3de4de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3de4de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3de4de", linkageName: "triton__0d1d2d3de4de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 32, column: 22, scope: !7)
!18 = !DILocation(line: 35, column: 46, scope: !7)
!19 = !DILocation(line: 28, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 25, scope: !7)
!21 = !DILocation(line: 31, column: 59, scope: !7)
!22 = !DILocation(line: 233, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 243, column: 36, scope: !23, inlinedAt: !27)
!27 = !DILocation(line: 36, column: 25, scope: !23)
!28 = !DILocation(line: 243, column: 36, scope: !25, inlinedAt: !29)
!29 = !DILocation(line: 36, column: 25, scope: !25)
!30 = !DILocation(line: 44, column: 22, scope: !7)
!31 = !DILocation(line: 46, column: 22, scope: !7)
!32 = !DILocation(line: 41, column: 51, scope: !7)
!33 = !DILocation(line: 42, column: 35, scope: !7)
!34 = !DILocation(line: 42, column: 40, scope: !7)
!35 = !DILocation(line: 47, column: 30, scope: !7)
!36 = !DILocation(line: 48, column: 23, scope: !7)
!37 = !DILocation(line: 50, column: 24, scope: !7)
!38 = !DILocation(line: 51, column: 24, scope: !7)
!39 = !DILocation(line: 52, column: 29, scope: !7)
!40 = !DILocation(line: 52, column: 53, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
