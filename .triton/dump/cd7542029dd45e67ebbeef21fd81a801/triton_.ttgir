#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3de4de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<2304> : tensor<1x2048xi32, #blocked>
    %c0_i32 = arith.constant 0 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c2304_i32 = arith.constant 2304 : i32
    %c512_i32 = arith.constant 512 : i32
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked>
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked>
    %cst_2 = arith.constant dense<2.304000e+03> : tensor<1x1xf32, #blocked>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c512_i32 : i32
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x2048xi32, #blocked>
    %4 = arith.muli %0, %c2304_i32 : i32
    %5 = tt.splat %4 : (i32) -> tensor<1x2048xi32, #blocked>
    %6 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %7 = tt.splat %1 : (i1) -> tensor<1x2048xi1, #blocked>
    %8 = scf.for %arg5 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg6 = %cst_3) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %15 = tt.splat %arg5 : (i32) -> tensor<1x2048xi32, #blocked>
      %16 = arith.addi %15, %3 : tensor<1x2048xi32, #blocked>
      %17 = arith.cmpi slt, %16, %cst : tensor<1x2048xi32, #blocked>
      %18 = arith.addi %16, %5 : tensor<1x2048xi32, #blocked>
      %19 = tt.addptr %6, %18 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %20 = arith.andi %17, %7 : tensor<1x2048xi1, #blocked>
      %21 = tt.load %19, %20, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %22 = arith.mulf %21, %21 : tensor<1x2048xf32, #blocked>
      %23 = arith.addf %arg6, %22 : tensor<1x2048xf32, #blocked>
      %24 = arith.select %20, %23, %arg6 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked>
      scf.yield %24 : tensor<1x2048xf32, #blocked>
    }
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32, %arg6: f32):
      %15 = arith.addf %arg5, %arg6 : f32
      tt.reduce.return %15 : f32
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %10 = tt.expand_dims %9 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %11 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    %12 = arith.divf %10, %cst_2 : tensor<1x1xf32, #blocked>
    %13 = arith.addf %12, %cst_1 : tensor<1x1xf32, #blocked>
    %14 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>, #blocked>
    scf.for %arg5 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %15 = tt.splat %arg5 : (i32) -> tensor<1x2048xi32, #blocked>
      %16 = arith.addi %15, %3 : tensor<1x2048xi32, #blocked>
      %17 = arith.cmpi slt, %16, %cst : tensor<1x2048xi32, #blocked>
      %18 = arith.addi %16, %5 : tensor<1x2048xi32, #blocked>
      %19 = tt.addptr %6, %18 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %20 = arith.andi %17, %7 : tensor<1x2048xi1, #blocked>
      %21 = tt.load %19, %20, %cst_3 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %22 = tt.addptr %11, %16 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      %23 = tt.load %22, %17, %cst_3 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32, #blocked>
      %24 = tt.extern_elementwise %13 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %25 = tt.broadcast %24 : (tensor<1x1xf32, #blocked>) -> tensor<1x2048xf32, #blocked>
      %26 = arith.mulf %21, %25 : tensor<1x2048xf32, #blocked>
      %27 = arith.addf %23, %cst_0 : tensor<1x2048xf32, #blocked>
      %28 = arith.mulf %26, %27 : tensor<1x2048xf32, #blocked>
      %29 = tt.addptr %14, %18 : tensor<1x2048x!tt.ptr<f32, 1>, #blocked>, tensor<1x2048xi32, #blocked>
      tt.store %29, %28, %20 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32, #blocked>
    }
    tt.return
  }
}
