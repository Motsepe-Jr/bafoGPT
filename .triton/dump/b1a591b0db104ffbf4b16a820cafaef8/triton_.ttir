module {
  tt.func public @triton__0d1d2de3de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c512_i32 = arith.constant 512 : i32
    %c-1_i32 = arith.constant -1 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<512xbf16>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<512xf32>
    %cst_2 = arith.constant dense<0xFF800000> : tensor<512xf32>
    %cst_3 = arith.constant dense<-3.38953139E+38> : tensor<512xf32>
    %cst_4 = arith.constant dense<1.000000e+00> : tensor<512xf32>
    %cst_5 = arith.constant dense<1> : tensor<512xi64>
    %cst_6 = arith.constant dense<5.000000e+01> : tensor<512xf32>
    %cst_7 = arith.constant dense<6.250000e-02> : tensor<512xf32>
    %cst_8 = arith.constant dense<512> : tensor<512xi32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32>
    %2 = arith.cmpi slt, %1, %cst_8 : tensor<512xi32>
    %3 = arith.remsi %0, %c512_i32 : i32
    %4 = arith.muli %0, %c512_i32 : i32
    %5 = tt.splat %4 : (i32) -> tensor<512xi32>
    %6 = arith.addi %1, %5 : tensor<512xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>>
    %8 = tt.addptr %7, %6 : tensor<512x!tt.ptr<bf16, 1>>, tensor<512xi32>
    %9 = tt.load %8, %2, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16>
    %10 = arith.extf %9 : tensor<512xbf16> to tensor<512xf32>
    %11 = arith.mulf %10, %cst_7 : tensor<512xf32>
    %12 = arith.divf %11, %cst_6 : tensor<512xf32>
    %13 = tt.extern_elementwise %12 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_tanhf"} : (tensor<512xf32>) -> tensor<512xf32>
    %14 = arith.mulf %13, %cst_6 : tensor<512xf32>
    %15 = arith.muli %3, %c-1_i32 : i32
    %16 = tt.splat %15 : (i32) -> tensor<512xi32>
    %17 = arith.addi %1, %16 : tensor<512xi32>
    %18 = arith.extsi %17 : tensor<512xi32> to tensor<512xi64>
    %19 = arith.cmpi sge, %18, %cst_5 : tensor<512xi64>
    %20 = arith.select %19, %cst_4, %cst_1 : tensor<512xi1>, tensor<512xf32>
    %21 = arith.cmpf une, %20, %cst_1 : tensor<512xf32>
    %22 = arith.select %21, %cst_3, %20 : tensor<512xi1>, tensor<512xf32>
    %23 = arith.addf %14, %22 : tensor<512xf32>
    %24 = arith.select %2, %23, %cst_2 : tensor<512xi1>, tensor<512xf32>
    %25 = "tt.reduce"(%24) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %38 = arith.cmpf ogt, %arg4, %arg5 : f32
      %39 = arith.cmpf une, %arg4, %arg4 : f32
      %40 = arith.ori %38, %39 : i1
      %41 = arith.select %40, %arg4, %arg5 : f32
      tt.reduce.return %41 : f32
    }) : (tensor<512xf32>) -> f32
    %26 = arith.addf %25, %cst_0 : f32
    %27 = tt.splat %26 : (f32) -> tensor<512xf32>
    %28 = arith.subf %23, %27 : tensor<512xf32>
    %29 = math.exp %28 : tensor<512xf32>
    %30 = arith.select %2, %29, %cst_1 : tensor<512xi1>, tensor<512xf32>
    %31 = "tt.reduce"(%30) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %38 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %38 : f32
    }) : (tensor<512xf32>) -> f32
    %32 = arith.addf %31, %cst_0 : f32
    %33 = tt.splat %32 : (f32) -> tensor<512xf32>
    %34 = arith.divf %29, %33 : tensor<512xf32>
    %35 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>>
    %36 = tt.addptr %35, %6 : tensor<512x!tt.ptr<bf16, 1>>, tensor<512xi32>
    %37 = arith.truncf %34 : tensor<512xf32> to tensor<512xbf16>
    tt.store %36, %37, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<512xbf16>
    tt.return
  }
}
