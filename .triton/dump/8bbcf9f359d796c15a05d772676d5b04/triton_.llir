; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7de8de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = lshr i32 %10, 5, !dbg !10
  %urem = and i32 %10, 255, !dbg !10
  %12 = shl nuw nsw i32 %urem, 3, !dbg !10
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %14 = icmp slt i32 %13, 1024, !dbg !12
  %15 = mul i32 %13, 2304, !dbg !13
  %16 = add i32 %12, %15, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr i16, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #6, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %24 = trunc i32 %20 to i16, !dbg !16
  %extelt.offset10 = lshr i32 %20, 16, !dbg !16
  %25 = trunc i32 %extelt.offset10 to i16, !dbg !16
  %26 = trunc i32 %21 to i16, !dbg !16
  %extelt.offset11 = lshr i32 %21, 16, !dbg !16
  %27 = trunc i32 %extelt.offset11 to i16, !dbg !16
  %28 = trunc i32 %22 to i16, !dbg !16
  %extelt.offset12 = lshr i32 %22, 16, !dbg !16
  %29 = trunc i32 %extelt.offset12 to i16, !dbg !16
  %30 = trunc i32 %23 to i16, !dbg !16
  %extelt.offset13 = lshr i32 %23, 16, !dbg !16
  %31 = trunc i32 %extelt.offset13 to i16, !dbg !16
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !17
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !17
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !17
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !17
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !17
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !17
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !17
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !17
  %40 = fmul float %32, %32, !dbg !18
  %41 = fmul float %33, %33, !dbg !18
  %42 = fmul float %34, %34, !dbg !18
  %43 = fmul float %35, %35, !dbg !18
  %44 = fmul float %36, %36, !dbg !18
  %45 = fmul float %37, %37, !dbg !18
  %46 = fmul float %38, %38, !dbg !18
  %47 = fmul float %39, %39, !dbg !18
  %48 = select i1 %14, float %40, float 0.000000e+00, !dbg !19
  %49 = select i1 %14, float %41, float 0.000000e+00, !dbg !19
  %50 = select i1 %14, float %42, float 0.000000e+00, !dbg !19
  %51 = select i1 %14, float %43, float 0.000000e+00, !dbg !19
  %52 = select i1 %14, float %44, float 0.000000e+00, !dbg !19
  %53 = select i1 %14, float %45, float 0.000000e+00, !dbg !19
  %54 = select i1 %14, float %46, float 0.000000e+00, !dbg !19
  %55 = select i1 %14, float %47, float 0.000000e+00, !dbg !19
  %56 = or i32 %12, 2048, !dbg !20
  %57 = icmp ult i32 %56, 2304, !dbg !21
  %58 = add i32 %56, %15, !dbg !14
  %59 = sext i32 %58 to i64, !dbg !15
  %60 = getelementptr i16, ptr addrspace(1) %0, i64 %59, !dbg !15
  %61 = and i1 %14, %57, !dbg !22
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #6, !dbg !16
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !16
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !16
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !16
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !16
  %67 = trunc i32 %63 to i16, !dbg !16
  %extelt.offset10.1 = lshr i32 %63, 16, !dbg !16
  %68 = trunc i32 %extelt.offset10.1 to i16, !dbg !16
  %69 = trunc i32 %64 to i16, !dbg !16
  %extelt.offset11.1 = lshr i32 %64, 16, !dbg !16
  %70 = trunc i32 %extelt.offset11.1 to i16, !dbg !16
  %71 = trunc i32 %65 to i16, !dbg !16
  %extelt.offset12.1 = lshr i32 %65, 16, !dbg !16
  %72 = trunc i32 %extelt.offset12.1 to i16, !dbg !16
  %73 = trunc i32 %66 to i16, !dbg !16
  %extelt.offset13.1 = lshr i32 %66, 16, !dbg !16
  %74 = trunc i32 %extelt.offset13.1 to i16, !dbg !16
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #6, !dbg !17
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #6, !dbg !17
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #6, !dbg !17
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #6, !dbg !17
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #6, !dbg !17
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #6, !dbg !17
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #6, !dbg !17
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #6, !dbg !17
  %83 = fmul float %75, %75, !dbg !18
  %84 = fmul float %76, %76, !dbg !18
  %85 = fmul float %77, %77, !dbg !18
  %86 = fmul float %78, %78, !dbg !18
  %87 = fmul float %79, %79, !dbg !18
  %88 = fmul float %80, %80, !dbg !18
  %89 = fmul float %81, %81, !dbg !18
  %90 = fmul float %82, %82, !dbg !18
  %91 = select i1 %61, float %83, float -0.000000e+00, !dbg !19
  %92 = fadd float %48, %91, !dbg !19
  %93 = select i1 %61, float %84, float -0.000000e+00, !dbg !19
  %94 = fadd float %49, %93, !dbg !19
  %95 = select i1 %61, float %85, float -0.000000e+00, !dbg !19
  %96 = fadd float %50, %95, !dbg !19
  %97 = select i1 %61, float %86, float -0.000000e+00, !dbg !19
  %98 = fadd float %51, %97, !dbg !19
  %99 = select i1 %61, float %87, float -0.000000e+00, !dbg !19
  %100 = fadd float %52, %99, !dbg !19
  %101 = select i1 %61, float %88, float -0.000000e+00, !dbg !19
  %102 = fadd float %53, %101, !dbg !19
  %103 = select i1 %61, float %89, float -0.000000e+00, !dbg !19
  %104 = fadd float %54, %103, !dbg !19
  %105 = select i1 %61, float %90, float -0.000000e+00, !dbg !19
  %106 = fadd float %55, %105, !dbg !19
  %107 = and i32 %10, 31, !dbg !10
  %108 = and i32 %11, 7, !dbg !10
  %109 = or i32 %12, 4, !dbg !10
  %110 = fadd float %92, %94, !dbg !23
  %111 = fadd float %96, %110, !dbg !23
  %112 = fadd float %98, %111, !dbg !23
  %113 = fadd float %100, %112, !dbg !23
  %114 = fadd float %102, %113, !dbg !23
  %115 = fadd float %104, %114, !dbg !23
  %116 = fadd float %106, %115, !dbg !23
  %117 = bitcast float %116 to i32, !dbg !29
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = fadd float %116, %119, !dbg !23
  %121 = bitcast float %120 to i32, !dbg !29
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !29
  %123 = bitcast i32 %122 to float, !dbg !29
  %124 = fadd float %120, %123, !dbg !23
  %125 = bitcast float %124 to i32, !dbg !29
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !29
  %127 = bitcast i32 %126 to float, !dbg !29
  %128 = fadd float %124, %127, !dbg !23
  %129 = bitcast float %128 to i32, !dbg !29
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !29
  %131 = bitcast i32 %130 to float, !dbg !29
  %132 = fadd float %128, %131, !dbg !23
  %133 = bitcast float %132 to i32, !dbg !29
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !29
  %135 = bitcast i32 %134 to float, !dbg !29
  %136 = fadd float %132, %135, !dbg !23
  %137 = icmp eq i32 %107, 0, !dbg !29
  %138 = zext nneg i32 %108 to i64, !dbg !29
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i64 %138, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, float %136, i1 %137) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %140 = icmp slt i32 %10, 8, !dbg !29
  %141 = sext i32 %10 to i64, !dbg !29
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i64 %141, !dbg !29
  %143 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %142, i1 %140) #6, !dbg !29
  %144 = bitcast float %143 to i32, !dbg !29
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !29
  %146 = bitcast i32 %145 to float, !dbg !29
  %147 = fadd float %143, %146, !dbg !23
  %148 = bitcast float %147 to i32, !dbg !29
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !29
  %150 = bitcast i32 %149 to float, !dbg !29
  %151 = fadd float %147, %150, !dbg !23
  %152 = bitcast float %151 to i32, !dbg !29
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !29
  %154 = bitcast i32 %153 to float, !dbg !29
  %155 = fadd float %151, %154, !dbg !23
  %156 = and i32 %10, 7, !dbg !29
  %157 = icmp eq i32 %156, 0, !dbg !29
  %158 = and i1 %140, %157, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, float %155, i1 %158) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %159 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %160 = insertelement <1 x float> undef, float %159, i64 0, !dbg !31
  store <1 x float> %160, ptr addrspace(3) @global_smem, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %161 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !31
  %162 = sext i32 %13 to i64, !dbg !32
  %163 = getelementptr float, ptr addrspace(1) %4, i64 %162, !dbg !32
  %164 = icmp eq i32 %urem, 0, !dbg !33
  %165 = and i1 %164, %14, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %163, i1 %165) #6, !dbg !33
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !34
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !34
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !34
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !34
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !34
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !34
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !34
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 2.304000e+03) #6, !dbg !34
  %174 = fadd float %166, 0x3EE4F8B580000000, !dbg !35
  br label %175, !dbg !36

175:                                              ; preds = %9, %__nv_rsqrtf.exit61
  %176 = phi i1 [ true, %9 ], [ false, %__nv_rsqrtf.exit61 ]
  %177 = phi i32 [ 0, %9 ], [ 2048, %__nv_rsqrtf.exit61 ]
  %178 = phi <8 x float> [ zeroinitializer, %9 ], [ %283, %__nv_rsqrtf.exit61 ]
  %179 = or i32 %177, %12, !dbg !37
  %180 = or i32 %177, %109, !dbg !37
  %181 = icmp ult i32 %179, 2304, !dbg !38
  %182 = add i32 %179, %15, !dbg !39
  %183 = add i32 %180, %15, !dbg !39
  %184 = sext i32 %182 to i64, !dbg !40
  %185 = getelementptr i16, ptr addrspace(1) %0, i64 %184, !dbg !40
  %186 = and i1 %14, %181, !dbg !41
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %185, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186) #6, !dbg !42
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !42
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !42
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !42
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !42
  %192 = trunc i32 %188 to i16, !dbg !42
  %extelt.offset6 = lshr i32 %188, 16, !dbg !42
  %193 = trunc i32 %extelt.offset6 to i16, !dbg !42
  %194 = trunc i32 %189 to i16, !dbg !42
  %extelt.offset7 = lshr i32 %189, 16, !dbg !42
  %195 = trunc i32 %extelt.offset7 to i16, !dbg !42
  %196 = trunc i32 %190 to i16, !dbg !42
  %extelt.offset8 = lshr i32 %190, 16, !dbg !42
  %197 = trunc i32 %extelt.offset8 to i16, !dbg !42
  %198 = trunc i32 %191 to i16, !dbg !42
  %extelt.offset9 = lshr i32 %191, 16, !dbg !42
  %199 = trunc i32 %extelt.offset9 to i16, !dbg !42
  %200 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %192) #6, !dbg !43
  %201 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %193) #6, !dbg !43
  %202 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %194) #6, !dbg !43
  %203 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %195) #6, !dbg !43
  %204 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %196) #6, !dbg !43
  %205 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %197) #6, !dbg !43
  %206 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %198) #6, !dbg !43
  %207 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %199) #6, !dbg !43
  %208 = zext nneg i32 %179 to i64, !dbg !44
  %209 = getelementptr float, ptr addrspace(1) %1, i64 %208, !dbg !44
  %210 = zext nneg i32 %180 to i64, !dbg !44
  %211 = getelementptr float, ptr addrspace(1) %1, i64 %210, !dbg !44
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %209, i1 %181, i32 0, i1 %181, i32 0, i1 %181, i32 0, i1 %181, i32 0, i1 %181) #6, !dbg !45
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !45
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !45
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !45
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !45
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %211, i1 %181, i32 0, i1 %181, i32 0, i1 %181, i32 0, i1 %181, i32 0, i1 %181) #6, !dbg !45
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !45
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !45
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !45
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !45
  %222 = insertelement <8 x i32> poison, i32 %213, i64 0, !dbg !45
  %223 = insertelement <8 x i32> %222, i32 %214, i64 1, !dbg !45
  %224 = insertelement <8 x i32> %223, i32 %215, i64 2, !dbg !45
  %225 = insertelement <8 x i32> %224, i32 %216, i64 3, !dbg !45
  %226 = insertelement <8 x i32> %225, i32 %218, i64 4, !dbg !45
  %227 = insertelement <8 x i32> %226, i32 %219, i64 5, !dbg !45
  %228 = insertelement <8 x i32> %227, i32 %220, i64 6, !dbg !45
  %229 = insertelement <8 x i32> %228, i32 %221, i64 7, !dbg !45
  %230 = bitcast <8 x i32> %229 to <8 x float>, !dbg !45
  %231 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !46
  %232 = sext i32 %183 to i64, !dbg !46
  %233 = getelementptr float, ptr addrspace(1) %2, i64 %232, !dbg !46
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %231, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186) #6, !dbg !47
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !47
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !47
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !47
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !47
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %233, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186) #6, !dbg !47
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !47
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !47
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !47
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !47
  %244 = insertelement <8 x i32> poison, i32 %235, i64 0, !dbg !47
  %245 = insertelement <8 x i32> %244, i32 %236, i64 1, !dbg !47
  %246 = insertelement <8 x i32> %245, i32 %237, i64 2, !dbg !47
  %247 = insertelement <8 x i32> %246, i32 %238, i64 3, !dbg !47
  %248 = insertelement <8 x i32> %247, i32 %240, i64 4, !dbg !47
  %249 = insertelement <8 x i32> %248, i32 %241, i64 5, !dbg !47
  %250 = insertelement <8 x i32> %249, i32 %242, i64 6, !dbg !47
  %251 = insertelement <8 x i32> %250, i32 %243, i64 7, !dbg !47
  %252 = bitcast <8 x i32> %251 to <8 x float>, !dbg !47
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %.not.i59 = icmp eq i32 %253, 0, !dbg !48
  br i1 %.not.i59, label %256, label %254, !dbg !48

254:                                              ; preds = %175
  %255 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %174), !dbg !48
  br label %__nv_rsqrtf.exit61, !dbg !48

256:                                              ; preds = %175
  %257 = tail call float @llvm.nvvm.rsqrt.approx.f(float %174), !dbg !48
  br label %__nv_rsqrtf.exit61, !dbg !48

__nv_rsqrtf.exit61:                               ; preds = %254, %256
  %.0.i60 = phi float [ %255, %254 ], [ %257, %256 ], !dbg !48
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !48
  %265 = insertelement <8 x float> poison, float %200, i64 0, !dbg !49
  %266 = insertelement <8 x float> %265, float %201, i64 1, !dbg !49
  %267 = insertelement <8 x float> %266, float %202, i64 2, !dbg !49
  %268 = insertelement <8 x float> %267, float %203, i64 3, !dbg !49
  %269 = insertelement <8 x float> %268, float %204, i64 4, !dbg !49
  %270 = insertelement <8 x float> %269, float %205, i64 5, !dbg !49
  %271 = insertelement <8 x float> %270, float %206, i64 6, !dbg !49
  %272 = insertelement <8 x float> %271, float %207, i64 7, !dbg !49
  %273 = insertelement <8 x float> poison, float %.0.i60, i64 0, !dbg !49
  %274 = shufflevector <8 x float> %273, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !49
  %275 = fmul <8 x float> %272, %274, !dbg !49
  %276 = fadd <8 x float> %230, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !50
  %277 = fmul <8 x float> %276, %275, !dbg !51
  %278 = fadd <8 x float> %277, %252, !dbg !52
  %279 = fmul <8 x float> %278, %278, !dbg !53
  %280 = insertelement <8 x i1> poison, i1 %186, i64 0, !dbg !54
  %281 = shufflevector <8 x i1> %280, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !54
  %282 = select <8 x i1> %281, <8 x float> %279, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !54
  %283 = fadd <8 x float> %178, %282, !dbg !54
  br i1 %176, label %175, label %284, !dbg !36

284:                                              ; preds = %__nv_rsqrtf.exit61
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %shift = shufflevector <8 x float> %283, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %285 = fadd <8 x float> %283, %shift, !dbg !57
  %shift113 = shufflevector <8 x float> %283, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %286 = fadd <8 x float> %shift113, %285, !dbg !57
  %shift114 = shufflevector <8 x float> %283, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %287 = fadd <8 x float> %shift114, %286, !dbg !57
  %shift115 = shufflevector <8 x float> %283, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %288 = fadd <8 x float> %shift115, %287, !dbg !57
  %shift116 = shufflevector <8 x float> %283, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %289 = fadd <8 x float> %shift116, %288, !dbg !57
  %shift117 = shufflevector <8 x float> %283, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %290 = fadd <8 x float> %shift117, %289, !dbg !57
  %shift118 = shufflevector <8 x float> %283, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %291 = fadd <8 x float> %shift118, %290, !dbg !57
  %292 = extractelement <8 x float> %291, i64 0, !dbg !57
  %293 = bitcast float %292 to i32, !dbg !55
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 16, i32 31), !dbg !55
  %295 = bitcast i32 %294 to float, !dbg !55
  %296 = fadd float %292, %295, !dbg !57
  %297 = bitcast float %296 to i32, !dbg !55
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 8, i32 31), !dbg !55
  %299 = bitcast i32 %298 to float, !dbg !55
  %300 = fadd float %296, %299, !dbg !57
  %301 = bitcast float %300 to i32, !dbg !55
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 4, i32 31), !dbg !55
  %303 = bitcast i32 %302 to float, !dbg !55
  %304 = fadd float %300, %303, !dbg !57
  %305 = bitcast float %304 to i32, !dbg !55
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 2, i32 31), !dbg !55
  %307 = bitcast i32 %306 to float, !dbg !55
  %308 = fadd float %304, %307, !dbg !57
  %309 = bitcast float %308 to i32, !dbg !55
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 1, i32 31), !dbg !55
  %311 = bitcast i32 %310 to float, !dbg !55
  %312 = fadd float %308, %311, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, float %312, i1 %137) #6, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %313 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %142, i1 %140) #6, !dbg !55
  %314 = bitcast float %313 to i32, !dbg !55
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 4, i32 31), !dbg !55
  %316 = bitcast i32 %315 to float, !dbg !55
  %317 = fadd float %313, %316, !dbg !57
  %318 = bitcast float %317 to i32, !dbg !55
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 2, i32 31), !dbg !55
  %320 = bitcast i32 %319 to float, !dbg !55
  %321 = fadd float %317, %320, !dbg !57
  %322 = bitcast float %321 to i32, !dbg !55
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !55
  %324 = bitcast i32 %323 to float, !dbg !55
  %325 = fadd float %321, %324, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, float %325, i1 %158) #6, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %326 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !55
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 2.304000e+03) #6, !dbg !60
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 2.304000e+03) #6, !dbg !60
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 2.304000e+03) #6, !dbg !60
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 2.304000e+03) #6, !dbg !60
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 2.304000e+03) #6, !dbg !60
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 2.304000e+03) #6, !dbg !60
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 2.304000e+03) #6, !dbg !60
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 2.304000e+03) #6, !dbg !60
  %335 = fadd float %327, 0x3EE4F8B580000000, !dbg !61
  br label %336, !dbg !62

336:                                              ; preds = %284, %__nv_rsqrtf.exit37
  %337 = phi i1 [ true, %284 ], [ false, %__nv_rsqrtf.exit37 ]
  %338 = phi i32 [ 0, %284 ], [ 2048, %__nv_rsqrtf.exit37 ]
  %339 = or i32 %338, %12, !dbg !63
  %340 = or i32 %338, %109, !dbg !63
  %341 = icmp ult i32 %339, 2304, !dbg !64
  %342 = add i32 %339, %15, !dbg !65
  %343 = add i32 %340, %15, !dbg !65
  %344 = sext i32 %342 to i64, !dbg !66
  %345 = getelementptr i16, ptr addrspace(1) %0, i64 %344, !dbg !66
  %346 = and i1 %14, %341, !dbg !67
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %345, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346) #6, !dbg !68
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !68
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !68
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !68
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !68
  %352 = trunc i32 %348 to i16, !dbg !68
  %extelt.offset = lshr i32 %348, 16, !dbg !68
  %353 = trunc i32 %extelt.offset to i16, !dbg !68
  %354 = trunc i32 %349 to i16, !dbg !68
  %extelt.offset3 = lshr i32 %349, 16, !dbg !68
  %355 = trunc i32 %extelt.offset3 to i16, !dbg !68
  %356 = trunc i32 %350 to i16, !dbg !68
  %extelt.offset4 = lshr i32 %350, 16, !dbg !68
  %357 = trunc i32 %extelt.offset4 to i16, !dbg !68
  %358 = trunc i32 %351 to i16, !dbg !68
  %extelt.offset5 = lshr i32 %351, 16, !dbg !68
  %359 = trunc i32 %extelt.offset5 to i16, !dbg !68
  %360 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %352) #6, !dbg !69
  %361 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %353) #6, !dbg !69
  %362 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %354) #6, !dbg !69
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #6, !dbg !69
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #6, !dbg !69
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #6, !dbg !69
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #6, !dbg !69
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #6, !dbg !69
  %368 = zext nneg i32 %339 to i64, !dbg !70
  %369 = getelementptr float, ptr addrspace(1) %1, i64 %368, !dbg !70
  %370 = zext nneg i32 %340 to i64, !dbg !70
  %371 = getelementptr float, ptr addrspace(1) %1, i64 %370, !dbg !70
  %372 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %369, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #6, !dbg !71
  %373 = extractvalue { i32, i32, i32, i32 } %372, 0, !dbg !71
  %374 = extractvalue { i32, i32, i32, i32 } %372, 1, !dbg !71
  %375 = extractvalue { i32, i32, i32, i32 } %372, 2, !dbg !71
  %376 = extractvalue { i32, i32, i32, i32 } %372, 3, !dbg !71
  %377 = bitcast i32 %373 to float, !dbg !71
  %378 = bitcast i32 %374 to float, !dbg !71
  %379 = bitcast i32 %375 to float, !dbg !71
  %380 = bitcast i32 %376 to float, !dbg !71
  %381 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %371, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #6, !dbg !71
  %382 = extractvalue { i32, i32, i32, i32 } %381, 0, !dbg !71
  %383 = extractvalue { i32, i32, i32, i32 } %381, 1, !dbg !71
  %384 = extractvalue { i32, i32, i32, i32 } %381, 2, !dbg !71
  %385 = extractvalue { i32, i32, i32, i32 } %381, 3, !dbg !71
  %386 = bitcast i32 %382 to float, !dbg !71
  %387 = bitcast i32 %383 to float, !dbg !71
  %388 = bitcast i32 %384 to float, !dbg !71
  %389 = bitcast i32 %385 to float, !dbg !71
  %390 = getelementptr float, ptr addrspace(1) %2, i64 %344, !dbg !72
  %391 = sext i32 %343 to i64, !dbg !72
  %392 = getelementptr float, ptr addrspace(1) %2, i64 %391, !dbg !72
  %393 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %390, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346) #6, !dbg !73
  %394 = extractvalue { i32, i32, i32, i32 } %393, 0, !dbg !73
  %395 = extractvalue { i32, i32, i32, i32 } %393, 1, !dbg !73
  %396 = extractvalue { i32, i32, i32, i32 } %393, 2, !dbg !73
  %397 = extractvalue { i32, i32, i32, i32 } %393, 3, !dbg !73
  %398 = bitcast i32 %394 to float, !dbg !73
  %399 = bitcast i32 %395 to float, !dbg !73
  %400 = bitcast i32 %396 to float, !dbg !73
  %401 = bitcast i32 %397 to float, !dbg !73
  %402 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %392, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346, i32 0, i1 %346) #6, !dbg !73
  %403 = extractvalue { i32, i32, i32, i32 } %402, 0, !dbg !73
  %404 = extractvalue { i32, i32, i32, i32 } %402, 1, !dbg !73
  %405 = extractvalue { i32, i32, i32, i32 } %402, 2, !dbg !73
  %406 = extractvalue { i32, i32, i32, i32 } %402, 3, !dbg !73
  %407 = bitcast i32 %403 to float, !dbg !73
  %408 = bitcast i32 %404 to float, !dbg !73
  %409 = bitcast i32 %405 to float, !dbg !73
  %410 = bitcast i32 %406 to float, !dbg !73
  %411 = getelementptr float, ptr addrspace(1) %3, i64 %368, !dbg !74
  %412 = getelementptr float, ptr addrspace(1) %3, i64 %370, !dbg !74
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %411, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #6, !dbg !75
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !75
  %415 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !75
  %416 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !75
  %417 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !75
  %418 = bitcast i32 %414 to float, !dbg !75
  %419 = bitcast i32 %415 to float, !dbg !75
  %420 = bitcast i32 %416 to float, !dbg !75
  %421 = bitcast i32 %417 to float, !dbg !75
  %422 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %412, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341, i32 0, i1 %341) #6, !dbg !75
  %423 = extractvalue { i32, i32, i32, i32 } %422, 0, !dbg !75
  %424 = extractvalue { i32, i32, i32, i32 } %422, 1, !dbg !75
  %425 = extractvalue { i32, i32, i32, i32 } %422, 2, !dbg !75
  %426 = extractvalue { i32, i32, i32, i32 } %422, 3, !dbg !75
  %427 = bitcast i32 %423 to float, !dbg !75
  %428 = bitcast i32 %424 to float, !dbg !75
  %429 = bitcast i32 %425 to float, !dbg !75
  %430 = bitcast i32 %426 to float, !dbg !75
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %.not.i = icmp eq i32 %431, 0, !dbg !76
  br i1 %.not.i, label %434, label %432, !dbg !76

432:                                              ; preds = %336
  %433 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %174), !dbg !76
  br label %__nv_rsqrtf.exit, !dbg !76

434:                                              ; preds = %336
  %435 = tail call float @llvm.nvvm.rsqrt.approx.f(float %174), !dbg !76
  br label %__nv_rsqrtf.exit, !dbg !76

__nv_rsqrtf.exit:                                 ; preds = %432, %434
  %.0.i = phi float [ %433, %432 ], [ %435, %434 ], !dbg !76
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !76
  %443 = fmul float %360, %.0.i, !dbg !77
  %444 = fmul float %361, %.0.i, !dbg !77
  %445 = fmul float %362, %.0.i, !dbg !77
  %446 = fmul float %363, %.0.i, !dbg !77
  %447 = fmul float %364, %.0.i, !dbg !77
  %448 = fmul float %365, %.0.i, !dbg !77
  %449 = fmul float %366, %.0.i, !dbg !77
  %450 = fmul float %367, %.0.i, !dbg !77
  %451 = fadd float %377, 1.000000e+00, !dbg !78
  %452 = fadd float %378, 1.000000e+00, !dbg !78
  %453 = fadd float %379, 1.000000e+00, !dbg !78
  %454 = fadd float %380, 1.000000e+00, !dbg !78
  %455 = fadd float %386, 1.000000e+00, !dbg !78
  %456 = fadd float %387, 1.000000e+00, !dbg !78
  %457 = fadd float %388, 1.000000e+00, !dbg !78
  %458 = fadd float %389, 1.000000e+00, !dbg !78
  %459 = fmul float %451, %443, !dbg !79
  %460 = fmul float %452, %444, !dbg !79
  %461 = fmul float %453, %445, !dbg !79
  %462 = fmul float %454, %446, !dbg !79
  %463 = fmul float %455, %447, !dbg !79
  %464 = fmul float %456, %448, !dbg !79
  %465 = fmul float %457, %449, !dbg !79
  %466 = fmul float %458, %450, !dbg !79
  %467 = fadd float %459, %398, !dbg !80
  %468 = fadd float %460, %399, !dbg !80
  %469 = fadd float %461, %400, !dbg !80
  %470 = fadd float %462, %401, !dbg !80
  %471 = fadd float %463, %407, !dbg !80
  %472 = fadd float %464, %408, !dbg !80
  %473 = fadd float %465, %409, !dbg !80
  %474 = fadd float %466, %410, !dbg !80
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %.not.i35 = icmp eq i32 %475, 0, !dbg !81
  br i1 %.not.i35, label %478, label %476, !dbg !81

476:                                              ; preds = %__nv_rsqrtf.exit
  %477 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %335), !dbg !81
  br label %__nv_rsqrtf.exit37, !dbg !81

478:                                              ; preds = %__nv_rsqrtf.exit
  %479 = tail call float @llvm.nvvm.rsqrt.approx.f(float %335), !dbg !81
  br label %__nv_rsqrtf.exit37, !dbg !81

__nv_rsqrtf.exit37:                               ; preds = %476, %478
  %.0.i36 = phi float [ %477, %476 ], [ %479, %478 ], !dbg !81
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %483 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %484 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %485 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %486 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !81
  %487 = fmul float %467, %.0.i36, !dbg !82
  %488 = fmul float %468, %.0.i36, !dbg !82
  %489 = fmul float %469, %.0.i36, !dbg !82
  %490 = fmul float %470, %.0.i36, !dbg !82
  %491 = fmul float %471, %.0.i36, !dbg !82
  %492 = fmul float %472, %.0.i36, !dbg !82
  %493 = fmul float %473, %.0.i36, !dbg !82
  %494 = fmul float %474, %.0.i36, !dbg !82
  %495 = fadd float %418, 1.000000e+00, !dbg !83
  %496 = fadd float %419, 1.000000e+00, !dbg !83
  %497 = fadd float %420, 1.000000e+00, !dbg !83
  %498 = fadd float %421, 1.000000e+00, !dbg !83
  %499 = fadd float %427, 1.000000e+00, !dbg !83
  %500 = fadd float %428, 1.000000e+00, !dbg !83
  %501 = fadd float %429, 1.000000e+00, !dbg !83
  %502 = fadd float %430, 1.000000e+00, !dbg !83
  %503 = fmul float %495, %487, !dbg !84
  %504 = fmul float %496, %488, !dbg !84
  %505 = fmul float %497, %489, !dbg !84
  %506 = fmul float %498, %490, !dbg !84
  %507 = fmul float %499, %491, !dbg !84
  %508 = fmul float %500, %492, !dbg !84
  %509 = fmul float %501, %493, !dbg !84
  %510 = fmul float %502, %494, !dbg !84
  %511 = getelementptr i16, ptr addrspace(1) %5, i64 %344, !dbg !85
  %512 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #6, !dbg !86
  %513 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %504) #6, !dbg !86
  %514 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #6, !dbg !86
  %515 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #6, !dbg !86
  %516 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %507) #6, !dbg !86
  %517 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %508) #6, !dbg !86
  %518 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %509) #6, !dbg !86
  %519 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %510) #6, !dbg !86
  %520 = insertelement <2 x i16> undef, i16 %512, i64 0, !dbg !86
  %521 = insertelement <2 x i16> %520, i16 %513, i64 1, !dbg !86
  %522 = bitcast <2 x i16> %521 to i32, !dbg !86
  %523 = insertelement <2 x i16> undef, i16 %514, i64 0, !dbg !86
  %524 = insertelement <2 x i16> %523, i16 %515, i64 1, !dbg !86
  %525 = bitcast <2 x i16> %524 to i32, !dbg !86
  %526 = insertelement <2 x i16> undef, i16 %516, i64 0, !dbg !86
  %527 = insertelement <2 x i16> %526, i16 %517, i64 1, !dbg !86
  %528 = bitcast <2 x i16> %527 to i32, !dbg !86
  %529 = insertelement <2 x i16> undef, i16 %518, i64 0, !dbg !86
  %530 = insertelement <2 x i16> %529, i16 %519, i64 1, !dbg !86
  %531 = bitcast <2 x i16> %530 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %522, i32 %525, i32 %528, i32 %531, ptr addrspace(1) %511, i1 %346) #6, !dbg !86
  %532 = getelementptr i16, ptr addrspace(1) %6, i64 %344, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %522, i32 %525, i32 %528, i32 %531, ptr addrspace(1) %532, i1 %346) #6, !dbg !88
  br i1 %337, label %336, label %533, !dbg !62

533:                                              ; preds = %__nv_rsqrtf.exit37
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cbcbul5vy5b3u2jh3kahmqgqzksjjzjfpfc5elnumgvusrwqfn27.py", directory: "/tmp/torchinductor_zeus/bc")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7de8de", linkageName: "triton__0d1d2d3d4d5d6d7de8de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 110, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 36, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 29, column: 25, scope: !7)
!22 = !DILocation(line: 31, column: 59, scope: !7)
!23 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 37, column: 25, scope: !26)
!31 = !DILocation(line: 37, column: 28, scope: !7)
!32 = !DILocation(line: 38, column: 25, scope: !7)
!33 = !DILocation(line: 38, column: 36, scope: !7)
!34 = !DILocation(line: 49, column: 22, scope: !7)
!35 = !DILocation(line: 51, column: 23, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 27, scope: !7)
!38 = !DILocation(line: 42, column: 25, scope: !7)
!39 = !DILocation(line: 44, column: 40, scope: !7)
!40 = !DILocation(line: 44, column: 34, scope: !7)
!41 = !DILocation(line: 44, column: 59, scope: !7)
!42 = !DILocation(line: 44, column: 51, scope: !7)
!43 = !DILocation(line: 44, column: 110, scope: !7)
!44 = !DILocation(line: 45, column: 35, scope: !7)
!45 = !DILocation(line: 45, column: 40, scope: !7)
!46 = !DILocation(line: 46, column: 35, scope: !7)
!47 = !DILocation(line: 46, column: 52, scope: !7)
!48 = !DILocation(line: 52, column: 30, scope: !7)
!49 = !DILocation(line: 53, column: 23, scope: !7)
!50 = !DILocation(line: 55, column: 24, scope: !7)
!51 = !DILocation(line: 56, column: 24, scope: !7)
!52 = !DILocation(line: 59, column: 24, scope: !7)
!53 = !DILocation(line: 60, column: 24, scope: !7)
!54 = !DILocation(line: 63, column: 48, scope: !7)
!55 = !DILocation(line: 243, column: 36, scope: !26, inlinedAt: !56)
!56 = !DILocation(line: 64, column: 27, scope: !26)
!57 = !DILocation(line: 233, column: 15, scope: !24, inlinedAt: !58)
!58 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !59)
!59 = !DILocation(line: 64, column: 27, scope: !24)
!60 = !DILocation(line: 86, column: 24, scope: !7)
!61 = !DILocation(line: 87, column: 24, scope: !7)
!62 = !DILocation(line: 65, column: 36, scope: !7)
!63 = !DILocation(line: 66, column: 27, scope: !7)
!64 = !DILocation(line: 67, column: 25, scope: !7)
!65 = !DILocation(line: 69, column: 41, scope: !7)
!66 = !DILocation(line: 69, column: 35, scope: !7)
!67 = !DILocation(line: 69, column: 60, scope: !7)
!68 = !DILocation(line: 69, column: 52, scope: !7)
!69 = !DILocation(line: 69, column: 112, scope: !7)
!70 = !DILocation(line: 70, column: 35, scope: !7)
!71 = !DILocation(line: 70, column: 40, scope: !7)
!72 = !DILocation(line: 71, column: 35, scope: !7)
!73 = !DILocation(line: 71, column: 52, scope: !7)
!74 = !DILocation(line: 72, column: 35, scope: !7)
!75 = !DILocation(line: 72, column: 40, scope: !7)
!76 = !DILocation(line: 78, column: 30, scope: !7)
!77 = !DILocation(line: 79, column: 24, scope: !7)
!78 = !DILocation(line: 81, column: 24, scope: !7)
!79 = !DILocation(line: 82, column: 24, scope: !7)
!80 = !DILocation(line: 85, column: 24, scope: !7)
!81 = !DILocation(line: 88, column: 30, scope: !7)
!82 = !DILocation(line: 89, column: 24, scope: !7)
!83 = !DILocation(line: 90, column: 24, scope: !7)
!84 = !DILocation(line: 91, column: 24, scope: !7)
!85 = !DILocation(line: 93, column: 29, scope: !7)
!86 = !DILocation(line: 93, column: 53, scope: !7)
!87 = !DILocation(line: 94, column: 29, scope: !7)
!88 = !DILocation(line: 94, column: 53, scope: !7)
!89 = !DILocation(line: 65, column: 4, scope: !7)
