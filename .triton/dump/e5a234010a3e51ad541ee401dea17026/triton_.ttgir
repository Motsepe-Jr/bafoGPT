#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<512> : tensor<512xi32, #blocked>
    %cst_0 = arith.constant dense<2304> : tensor<512xi32, #blocked>
    %cst_1 = arith.constant 0.000000e+00 : f32
    %c2304_i32 = arith.constant 2304 : i32
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<512xf32, #blocked>
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<512xbf16, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c2304_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1xi1, #blocked1>
    %3 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked>
    %4 = arith.cmpi slt, %3, %cst : tensor<512xi32, #blocked>
    %5 = arith.muli %3, %cst_0 : tensor<512xi32, #blocked>
    %6 = tt.splat %0 : (i32) -> tensor<512xi32, #blocked>
    %7 = arith.addi %6, %5 : tensor<512xi32, #blocked>
    %8 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %9 = tt.addptr %8, %7 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %10 = tt.splat %1 : (i1) -> tensor<512xi1, #blocked>
    %11 = arith.andi %4, %10 : tensor<512xi1, #blocked>
    %12 = tt.load %9, %11, %cst_3 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %13 = arith.extf %12 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %14 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %15 = tt.addptr %14, %7 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi32, #blocked>
    %16 = tt.load %15, %11, %cst_2 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %17 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %18 = tt.addptr %17, %3 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi32, #blocked>
    %19 = tt.load %18, %4, %cst_2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %20 = arith.mulf %16, %19 : tensor<512xf32, #blocked>
    %21 = arith.mulf %13, %20 : tensor<512xf32, #blocked>
    %22 = arith.select %11, %21, %cst_2 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %23 = "tt.reduce"(%22) <{axis = 0 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %28 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %28 : f32
    }) : (tensor<512xf32, #blocked>) -> f32
    %24 = arith.addf %23, %cst_1 : f32
    %25 = tt.splat %24 : (f32) -> tensor<1xf32, #blocked1>
    %26 = tt.addptr %arg3, %0 : !tt.ptr<f32, 1>, i32
    %27 = tt.splat %26 : (!tt.ptr<f32, 1>) -> tensor<1x!tt.ptr<f32, 1>, #blocked1>
    tt.store %27, %25, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1xf32, #blocked1>
    tt.return
  }
}
