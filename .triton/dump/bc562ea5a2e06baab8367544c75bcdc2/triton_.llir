; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d9de10de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %13 = lshr i32 %12, 5, !dbg !10
  %urem = shl i32 %12, 2, !dbg !10
  %14 = and i32 %urem, 1020, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %16 = mul i32 %15, 3584, !dbg !12
  %17 = add i32 %14, %16, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr i16, ptr addrspace(1) %1, i64 %18, !dbg !14
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !15
  %23 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset6 = lshr i32 %21, 16, !dbg !15
  %24 = trunc i32 %extelt.offset6 to i16, !dbg !15
  %25 = trunc i32 %22 to i16, !dbg !15
  %extelt.offset7 = lshr i32 %22, 16, !dbg !15
  %26 = trunc i32 %extelt.offset7 to i16, !dbg !15
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #6, !dbg !16
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !16
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %31 = or i32 %14, 1024, !dbg !17
  %32 = add i32 %31, %16, !dbg !13
  %33 = sext i32 %32 to i64, !dbg !14
  %34 = getelementptr i16, ptr addrspace(1) %1, i64 %33, !dbg !14
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !15
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !15
  %38 = trunc i32 %36 to i16, !dbg !15
  %extelt.offset6.1 = lshr i32 %36, 16, !dbg !15
  %39 = trunc i32 %extelt.offset6.1 to i16, !dbg !15
  %40 = trunc i32 %37 to i16, !dbg !15
  %extelt.offset7.1 = lshr i32 %37, 16, !dbg !15
  %41 = trunc i32 %extelt.offset7.1 to i16, !dbg !15
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #6, !dbg !16
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #6, !dbg !16
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #6, !dbg !16
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #6, !dbg !16
  %46 = or i32 %14, 2048, !dbg !17
  %47 = add i32 %46, %16, !dbg !13
  %48 = sext i32 %47 to i64, !dbg !14
  %49 = getelementptr i16, ptr addrspace(1) %1, i64 %48, !dbg !14
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !15
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !15
  %53 = trunc i32 %51 to i16, !dbg !15
  %extelt.offset6.2 = lshr i32 %51, 16, !dbg !15
  %54 = trunc i32 %extelt.offset6.2 to i16, !dbg !15
  %55 = trunc i32 %52 to i16, !dbg !15
  %extelt.offset7.2 = lshr i32 %52, 16, !dbg !15
  %56 = trunc i32 %extelt.offset7.2 to i16, !dbg !15
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #6, !dbg !16
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #6, !dbg !16
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #6, !dbg !16
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #6, !dbg !16
  %61 = or i32 %14, 3072, !dbg !17
  %62 = icmp ult i32 %61, 3584, !dbg !18
  %63 = add i32 %61, %16, !dbg !13
  %64 = sext i32 %63 to i64, !dbg !14
  %65 = getelementptr i16, ptr addrspace(1) %1, i64 %64, !dbg !14
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #6, !dbg !15
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !15
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !15
  %69 = trunc i32 %67 to i16, !dbg !15
  %extelt.offset6.3 = lshr i32 %67, 16, !dbg !15
  %70 = trunc i32 %extelt.offset6.3 to i16, !dbg !15
  %71 = trunc i32 %68 to i16, !dbg !15
  %extelt.offset7.3 = lshr i32 %68, 16, !dbg !15
  %72 = trunc i32 %extelt.offset7.3 to i16, !dbg !15
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #6, !dbg !16
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #6, !dbg !16
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #6, !dbg !16
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #6, !dbg !16
  %77 = insertelement <2 x float> poison, float %27, i64 0, !dbg !19
  %78 = insertelement <2 x float> %77, float %28, i64 1, !dbg !19
  %79 = fmul <2 x float> %78, %78, !dbg !19
  %80 = insertelement <2 x float> poison, float %42, i64 0, !dbg !19
  %81 = insertelement <2 x float> %80, float %43, i64 1, !dbg !19
  %82 = fmul <2 x float> %81, %81, !dbg !19
  %83 = fadd <2 x float> %79, %82, !dbg !20
  %84 = insertelement <2 x float> poison, float %57, i64 0, !dbg !19
  %85 = insertelement <2 x float> %84, float %58, i64 1, !dbg !19
  %86 = fmul <2 x float> %85, %85, !dbg !19
  %87 = fadd <2 x float> %83, %86, !dbg !20
  %88 = insertelement <2 x float> poison, float %73, i64 0, !dbg !19
  %89 = insertelement <2 x float> %88, float %74, i64 1, !dbg !19
  %90 = fmul <2 x float> %89, %89, !dbg !19
  %91 = insertelement <2 x i1> poison, i1 %62, i64 0, !dbg !20
  %92 = shufflevector <2 x i1> %91, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !20
  %93 = select <2 x i1> %92, <2 x float> %90, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !20
  %94 = fadd <2 x float> %87, %93, !dbg !20
  %95 = insertelement <2 x float> poison, float %30, i64 0, !dbg !19
  %96 = insertelement <2 x float> %95, float %29, i64 1, !dbg !19
  %97 = fmul <2 x float> %96, %96, !dbg !19
  %98 = insertelement <2 x float> poison, float %45, i64 0, !dbg !19
  %99 = insertelement <2 x float> %98, float %44, i64 1, !dbg !19
  %100 = fmul <2 x float> %99, %99, !dbg !19
  %101 = fadd <2 x float> %97, %100, !dbg !20
  %102 = insertelement <2 x float> poison, float %60, i64 0, !dbg !19
  %103 = insertelement <2 x float> %102, float %59, i64 1, !dbg !19
  %104 = fmul <2 x float> %103, %103, !dbg !19
  %105 = fadd <2 x float> %101, %104, !dbg !20
  %106 = insertelement <2 x float> poison, float %76, i64 0, !dbg !19
  %107 = insertelement <2 x float> %106, float %75, i64 1, !dbg !19
  %108 = fmul <2 x float> %107, %107, !dbg !19
  %109 = select <2 x i1> %92, <2 x float> %108, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !20
  %110 = fadd <2 x float> %105, %109, !dbg !20
  %111 = and i32 %12, 31, !dbg !10
  %112 = and i32 %13, 7, !dbg !10
  %shift = shufflevector <2 x float> %94, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %113 = fadd <2 x float> %94, %shift, !dbg !21
  %shift55 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %114 = fadd <2 x float> %shift55, %113, !dbg !21
  %115 = fadd <2 x float> %110, %114, !dbg !21
  %116 = extractelement <2 x float> %115, i64 0, !dbg !21
  %117 = bitcast float %116 to i32, !dbg !27
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = fadd float %116, %119, !dbg !21
  %121 = bitcast float %120 to i32, !dbg !27
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = fadd float %120, %123, !dbg !21
  %125 = bitcast float %124 to i32, !dbg !27
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = fadd float %124, %127, !dbg !21
  %129 = bitcast float %128 to i32, !dbg !27
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !27
  %131 = bitcast i32 %130 to float, !dbg !27
  %132 = fadd float %128, %131, !dbg !21
  %133 = bitcast float %132 to i32, !dbg !27
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !27
  %135 = bitcast i32 %134 to float, !dbg !27
  %136 = fadd float %132, %135, !dbg !21
  %137 = icmp eq i32 %111, 0, !dbg !27
  %138 = zext nneg i32 %112 to i64, !dbg !27
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i64 %138, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, float %136, i1 %137) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %140 = icmp slt i32 %12, 8, !dbg !27
  %141 = sext i32 %12 to i64, !dbg !27
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i64 %141, !dbg !27
  %143 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %142, i1 %140) #6, !dbg !27
  %144 = bitcast float %143 to i32, !dbg !27
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !27
  %146 = bitcast i32 %145 to float, !dbg !27
  %147 = fadd float %143, %146, !dbg !21
  %148 = bitcast float %147 to i32, !dbg !27
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !27
  %150 = bitcast i32 %149 to float, !dbg !27
  %151 = fadd float %147, %150, !dbg !21
  %152 = bitcast float %151 to i32, !dbg !27
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !27
  %154 = bitcast i32 %153 to float, !dbg !27
  %155 = fadd float %151, %154, !dbg !21
  %156 = and i32 %12, 7, !dbg !27
  %157 = icmp eq i32 %156, 0, !dbg !27
  %158 = and i1 %140, %157, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, float %155, i1 %158) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %159 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  %160 = sext i32 %15 to i64, !dbg !29
  %161 = getelementptr float, ptr addrspace(1) %4, i64 %160, !dbg !29
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #6, !dbg !30
  %163 = bitcast i32 %162 to float, !dbg !30
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #6, !dbg !30
  %165 = bitcast i32 %164 to float, !dbg !30
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #6, !dbg !30
  %167 = bitcast i32 %166 to float, !dbg !30
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #6, !dbg !30
  %169 = bitcast i32 %168 to float, !dbg !30
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 3.584000e+03) #6, !dbg !31
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 3.584000e+03) #6, !dbg !31
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 3.584000e+03) #6, !dbg !31
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 3.584000e+03) #6, !dbg !31
  %174 = fadd float %170, 0x3EE4F8B580000000, !dbg !32
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float 3.584000e+03) #6, !dbg !33
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 3.584000e+03) #6, !dbg !33
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float 3.584000e+03) #6, !dbg !33
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 3.584000e+03) #6, !dbg !33
  %179 = fadd float %175, 0x3EE4F8B580000000, !dbg !34
  br label %180, !dbg !35

180:                                              ; preds = %11, %__nv_rsqrtf.exit31
  %181 = phi i32 [ 0, %11 ], [ %290, %__nv_rsqrtf.exit31 ]
  %182 = phi <4 x float> [ zeroinitializer, %11 ], [ %285, %__nv_rsqrtf.exit31 ]
  %183 = or i32 %181, %14, !dbg !36
  %184 = icmp ult i32 %183, 3584, !dbg !37
  %185 = add i32 %183, %16, !dbg !38
  %186 = sext i32 %185 to i64, !dbg !39
  %187 = getelementptr i16, ptr addrspace(1) %1, i64 %186, !dbg !39
  %188 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %187, i1 %184, i32 0, i1 %184, i32 0, i1 %184) #6, !dbg !40
  %189 = extractvalue { i32, i32 } %188, 0, !dbg !40
  %190 = extractvalue { i32, i32 } %188, 1, !dbg !40
  %191 = trunc i32 %189 to i16, !dbg !40
  %extelt.offset = lshr i32 %189, 16, !dbg !40
  %192 = trunc i32 %extelt.offset to i16, !dbg !40
  %193 = trunc i32 %190 to i16, !dbg !40
  %extelt.offset3 = lshr i32 %190, 16, !dbg !40
  %194 = trunc i32 %extelt.offset3 to i16, !dbg !40
  %195 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %191) #6, !dbg !41
  %196 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %192) #6, !dbg !41
  %197 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %193) #6, !dbg !41
  %198 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %194) #6, !dbg !41
  %199 = zext nneg i32 %183 to i64, !dbg !42
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %199, !dbg !42
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184) #6, !dbg !43
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !43
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !43
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !43
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !43
  %206 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !43
  %207 = insertelement <4 x i32> %206, i32 %203, i64 1, !dbg !43
  %208 = insertelement <4 x i32> %207, i32 %204, i64 2, !dbg !43
  %209 = insertelement <4 x i32> %208, i32 %205, i64 3, !dbg !43
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !43
  %211 = getelementptr i16, ptr addrspace(1) %3, i64 %186, !dbg !44
  %212 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %211, i1 %184, i32 0, i1 %184, i32 0, i1 %184) #6, !dbg !45
  %213 = extractvalue { i32, i32 } %212, 0, !dbg !45
  %214 = extractvalue { i32, i32 } %212, 1, !dbg !45
  %215 = trunc i32 %213 to i16, !dbg !45
  %extelt.offset4 = lshr i32 %213, 16, !dbg !45
  %216 = trunc i32 %extelt.offset4 to i16, !dbg !45
  %217 = trunc i32 %214 to i16, !dbg !45
  %extelt.offset5 = lshr i32 %214, 16, !dbg !45
  %218 = trunc i32 %extelt.offset5 to i16, !dbg !45
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %215) #6, !dbg !46
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %216) #6, !dbg !46
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %217) #6, !dbg !46
  %222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %218) #6, !dbg !46
  %223 = getelementptr float, ptr addrspace(1) %5, i64 %199, !dbg !47
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %223, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184) #6, !dbg !48
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !48
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !48
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !48
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !48
  %229 = insertelement <4 x i32> poison, i32 %225, i64 0, !dbg !48
  %230 = insertelement <4 x i32> %229, i32 %226, i64 1, !dbg !48
  %231 = insertelement <4 x i32> %230, i32 %227, i64 2, !dbg !48
  %232 = insertelement <4 x i32> %231, i32 %228, i64 3, !dbg !48
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !48
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !49
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %234, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184) #6, !dbg !50
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !50
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !50
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !50
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !50
  %240 = insertelement <4 x i32> poison, i32 %236, i64 0, !dbg !50
  %241 = insertelement <4 x i32> %240, i32 %237, i64 1, !dbg !50
  %242 = insertelement <4 x i32> %241, i32 %238, i64 2, !dbg !50
  %243 = insertelement <4 x i32> %242, i32 %239, i64 3, !dbg !50
  %244 = bitcast <4 x i32> %243 to <4 x float>, !dbg !50
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i17 = icmp eq i32 %245, 0, !dbg !51
  br i1 %.not.i17, label %248, label %246, !dbg !51

246:                                              ; preds = %180
  %247 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %174), !dbg !51
  br label %__nv_rsqrtf.exit19, !dbg !51

248:                                              ; preds = %180
  %249 = tail call float @llvm.nvvm.rsqrt.approx.f(float %174), !dbg !51
  br label %__nv_rsqrtf.exit19, !dbg !51

__nv_rsqrtf.exit19:                               ; preds = %246, %248
  %.0.i18 = phi float [ %247, %246 ], [ %249, %248 ], !dbg !51
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %253 = insertelement <4 x float> poison, float %195, i64 0, !dbg !52
  %254 = insertelement <4 x float> %253, float %196, i64 1, !dbg !52
  %255 = insertelement <4 x float> %254, float %197, i64 2, !dbg !52
  %256 = insertelement <4 x float> %255, float %198, i64 3, !dbg !52
  %257 = insertelement <4 x float> poison, float %.0.i18, i64 0, !dbg !52
  %258 = shufflevector <4 x float> %257, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !52
  %259 = fmul <4 x float> %256, %258, !dbg !52
  %260 = fadd <4 x float> %210, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !53
  %261 = fmul <4 x float> %260, %259, !dbg !54
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i29 = icmp eq i32 %262, 0, !dbg !55
  br i1 %.not.i29, label %265, label %263, !dbg !55

263:                                              ; preds = %__nv_rsqrtf.exit19
  %264 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %179), !dbg !55
  br label %__nv_rsqrtf.exit31, !dbg !55

265:                                              ; preds = %__nv_rsqrtf.exit19
  %266 = tail call float @llvm.nvvm.rsqrt.approx.f(float %179), !dbg !55
  br label %__nv_rsqrtf.exit31, !dbg !55

__nv_rsqrtf.exit31:                               ; preds = %263, %265
  %.0.i30 = phi float [ %264, %263 ], [ %266, %265 ], !dbg !55
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %270 = insertelement <4 x float> poison, float %219, i64 0, !dbg !56
  %271 = insertelement <4 x float> %270, float %220, i64 1, !dbg !56
  %272 = insertelement <4 x float> %271, float %221, i64 2, !dbg !56
  %273 = insertelement <4 x float> %272, float %222, i64 3, !dbg !56
  %274 = insertelement <4 x float> poison, float %.0.i30, i64 0, !dbg !56
  %275 = shufflevector <4 x float> %274, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !56
  %276 = fmul <4 x float> %273, %275, !dbg !56
  %277 = fadd <4 x float> %233, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !57
  %278 = fmul <4 x float> %277, %276, !dbg !58
  %279 = fadd <4 x float> %278, %244, !dbg !59
  %280 = fadd <4 x float> %261, %279, !dbg !60
  %281 = fmul <4 x float> %280, %280, !dbg !61
  %282 = insertelement <4 x i1> poison, i1 %184, i64 0, !dbg !62
  %283 = shufflevector <4 x i1> %282, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !62
  %284 = select <4 x i1> %283, <4 x float> %281, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !62
  %285 = fadd <4 x float> %182, %284, !dbg !62
  %bc = bitcast <4 x float> %280 to <4 x i32>, !dbg !63
  %286 = extractelement <4 x i32> %bc, i64 0, !dbg !63
  %bc59 = bitcast <4 x float> %280 to <4 x i32>, !dbg !63
  %287 = extractelement <4 x i32> %bc59, i64 1, !dbg !63
  %bc60 = bitcast <4 x float> %280 to <4 x i32>, !dbg !63
  %288 = extractelement <4 x i32> %bc60, i64 2, !dbg !63
  %bc61 = bitcast <4 x float> %280 to <4 x i32>, !dbg !63
  %289 = extractelement <4 x i32> %bc61, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %234, i1 %184) #6, !dbg !63
  %290 = add nuw nsw i32 %181, 1024, !dbg !35
  %291 = icmp ult i32 %181, 2560, !dbg !35
  br i1 %291, label %180, label %292, !dbg !35

292:                                              ; preds = %__nv_rsqrtf.exit31
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %shift56 = shufflevector <4 x float> %285, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !66
  %293 = fadd <4 x float> %285, %shift56, !dbg !66
  %shift57 = shufflevector <4 x float> %285, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !66
  %294 = fadd <4 x float> %shift57, %293, !dbg !66
  %shift58 = shufflevector <4 x float> %285, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !66
  %295 = fadd <4 x float> %shift58, %294, !dbg !66
  %296 = extractelement <4 x float> %295, i64 0, !dbg !66
  %297 = bitcast float %296 to i32, !dbg !64
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 16, i32 31), !dbg !64
  %299 = bitcast i32 %298 to float, !dbg !64
  %300 = fadd float %296, %299, !dbg !66
  %301 = bitcast float %300 to i32, !dbg !64
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 8, i32 31), !dbg !64
  %303 = bitcast i32 %302 to float, !dbg !64
  %304 = fadd float %300, %303, !dbg !66
  %305 = bitcast float %304 to i32, !dbg !64
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 4, i32 31), !dbg !64
  %307 = bitcast i32 %306 to float, !dbg !64
  %308 = fadd float %304, %307, !dbg !66
  %309 = bitcast float %308 to i32, !dbg !64
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 2, i32 31), !dbg !64
  %311 = bitcast i32 %310 to float, !dbg !64
  %312 = fadd float %308, %311, !dbg !66
  %313 = bitcast float %312 to i32, !dbg !64
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 1, i32 31), !dbg !64
  %315 = bitcast i32 %314 to float, !dbg !64
  %316 = fadd float %312, %315, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, float %316, i1 %137) #6, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %317 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %142, i1 %140) #6, !dbg !64
  %318 = bitcast float %317 to i32, !dbg !64
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 4, i32 31), !dbg !64
  %320 = bitcast i32 %319 to float, !dbg !64
  %321 = fadd float %317, %320, !dbg !66
  %322 = bitcast float %321 to i32, !dbg !64
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 2, i32 31), !dbg !64
  %324 = bitcast i32 %323 to float, !dbg !64
  %325 = fadd float %321, %324, !dbg !66
  %326 = bitcast float %325 to i32, !dbg !64
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 1, i32 31), !dbg !64
  %328 = bitcast i32 %327 to float, !dbg !64
  %329 = fadd float %325, %328, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, float %329, i1 %158) #6, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %330 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !64
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float 3.584000e+03) #6, !dbg !69
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float 3.584000e+03) #6, !dbg !69
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float 3.584000e+03) #6, !dbg !69
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float 3.584000e+03) #6, !dbg !69
  %335 = fadd float %331, 0x3EE4F8B580000000, !dbg !70
  br label %336, !dbg !71

336:                                              ; preds = %292, %__nv_rsqrtf.exit
  %337 = phi i32 [ 0, %292 ], [ %395, %__nv_rsqrtf.exit ]
  %338 = or i32 %337, %14, !dbg !72
  %339 = icmp ult i32 %338, 3584, !dbg !73
  %340 = add i32 %338, %16, !dbg !74
  %341 = sext i32 %340 to i64, !dbg !75
  %342 = getelementptr float, ptr addrspace(1) %0, i64 %341, !dbg !75
  %343 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %342, i1 %339, i32 0, i1 %339, i32 0, i1 %339, i32 0, i1 %339, i32 0, i1 %339) #6, !dbg !76
  %344 = extractvalue { i32, i32, i32, i32 } %343, 0, !dbg !76
  %345 = extractvalue { i32, i32, i32, i32 } %343, 1, !dbg !76
  %346 = extractvalue { i32, i32, i32, i32 } %343, 2, !dbg !76
  %347 = extractvalue { i32, i32, i32, i32 } %343, 3, !dbg !76
  %348 = bitcast i32 %344 to float, !dbg !76
  %349 = bitcast i32 %345 to float, !dbg !76
  %350 = bitcast i32 %346 to float, !dbg !76
  %351 = bitcast i32 %347 to float, !dbg !76
  %352 = zext nneg i32 %338 to i64, !dbg !77
  %353 = getelementptr float, ptr addrspace(1) %6, i64 %352, !dbg !77
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %353, i1 %339, i32 0, i1 %339, i32 0, i1 %339, i32 0, i1 %339, i32 0, i1 %339) #6, !dbg !78
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !78
  %356 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !78
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !78
  %358 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !78
  %359 = bitcast i32 %355 to float, !dbg !78
  %360 = bitcast i32 %356 to float, !dbg !78
  %361 = bitcast i32 %357 to float, !dbg !78
  %362 = bitcast i32 %358 to float, !dbg !78
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %.not.i = icmp eq i32 %363, 0, !dbg !79
  br i1 %.not.i, label %366, label %364, !dbg !79

364:                                              ; preds = %336
  %365 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %335), !dbg !79
  br label %__nv_rsqrtf.exit, !dbg !79

366:                                              ; preds = %336
  %367 = tail call float @llvm.nvvm.rsqrt.approx.f(float %335), !dbg !79
  br label %__nv_rsqrtf.exit, !dbg !79

__nv_rsqrtf.exit:                                 ; preds = %364, %366
  %.0.i = phi float [ %365, %364 ], [ %367, %366 ], !dbg !79
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !79
  %371 = fmul float %.0.i, %348, !dbg !80
  %372 = fmul float %.0.i, %349, !dbg !80
  %373 = fmul float %.0.i, %350, !dbg !80
  %374 = fmul float %.0.i, %351, !dbg !80
  %375 = fadd float %359, 1.000000e+00, !dbg !81
  %376 = fadd float %360, 1.000000e+00, !dbg !81
  %377 = fadd float %361, 1.000000e+00, !dbg !81
  %378 = fadd float %362, 1.000000e+00, !dbg !81
  %379 = fmul float %375, %371, !dbg !82
  %380 = fmul float %376, %372, !dbg !82
  %381 = fmul float %377, %373, !dbg !82
  %382 = fmul float %378, %374, !dbg !82
  %383 = getelementptr i16, ptr addrspace(1) %7, i64 %341, !dbg !83
  %384 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %379) #6, !dbg !84
  %385 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %380) #6, !dbg !84
  %386 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %381) #6, !dbg !84
  %387 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %382) #6, !dbg !84
  %388 = insertelement <2 x i16> undef, i16 %384, i64 0, !dbg !84
  %389 = insertelement <2 x i16> %388, i16 %385, i64 1, !dbg !84
  %390 = bitcast <2 x i16> %389 to i32, !dbg !84
  %391 = insertelement <2 x i16> undef, i16 %386, i64 0, !dbg !84
  %392 = insertelement <2 x i16> %391, i16 %387, i64 1, !dbg !84
  %393 = bitcast <2 x i16> %392 to i32, !dbg !84
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %390, i32 %393, ptr addrspace(1) %383, i1 %339) #6, !dbg !84
  %394 = getelementptr i16, ptr addrspace(1) %8, i64 %341, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %390, i32 %393, ptr addrspace(1) %394, i1 %339) #6, !dbg !86
  %395 = add nuw nsw i32 %337, 1024, !dbg !71
  %396 = icmp ult i32 %337, 2560, !dbg !71
  br i1 %396, label %336, label %397, !dbg !71

397:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cmkagkww745dq5f4yrcwtgf47a3vmrhz7rfr2dsgpgjkebhrbha6.py", directory: "/tmp/torchinductor_zeus/mk")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9de10de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9de10de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9de10de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9de10de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 28, column: 27, scope: !7)
!18 = !DILocation(line: 29, column: 25, scope: !7)
!19 = !DILocation(line: 33, column: 22, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 36, scope: !7)
!31 = !DILocation(line: 51, column: 22, scope: !7)
!32 = !DILocation(line: 53, column: 23, scope: !7)
!33 = !DILocation(line: 62, column: 24, scope: !7)
!34 = !DILocation(line: 63, column: 24, scope: !7)
!35 = !DILocation(line: 40, column: 36, scope: !7)
!36 = !DILocation(line: 41, column: 27, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 44, column: 40, scope: !7)
!39 = !DILocation(line: 44, column: 34, scope: !7)
!40 = !DILocation(line: 44, column: 51, scope: !7)
!41 = !DILocation(line: 44, column: 103, scope: !7)
!42 = !DILocation(line: 45, column: 35, scope: !7)
!43 = !DILocation(line: 45, column: 40, scope: !7)
!44 = !DILocation(line: 46, column: 35, scope: !7)
!45 = !DILocation(line: 46, column: 52, scope: !7)
!46 = !DILocation(line: 46, column: 104, scope: !7)
!47 = !DILocation(line: 47, column: 35, scope: !7)
!48 = !DILocation(line: 47, column: 40, scope: !7)
!49 = !DILocation(line: 48, column: 39, scope: !7)
!50 = !DILocation(line: 48, column: 56, scope: !7)
!51 = !DILocation(line: 54, column: 30, scope: !7)
!52 = !DILocation(line: 55, column: 23, scope: !7)
!53 = !DILocation(line: 57, column: 24, scope: !7)
!54 = !DILocation(line: 58, column: 24, scope: !7)
!55 = !DILocation(line: 64, column: 30, scope: !7)
!56 = !DILocation(line: 65, column: 24, scope: !7)
!57 = !DILocation(line: 66, column: 24, scope: !7)
!58 = !DILocation(line: 67, column: 24, scope: !7)
!59 = !DILocation(line: 70, column: 24, scope: !7)
!60 = !DILocation(line: 71, column: 24, scope: !7)
!61 = !DILocation(line: 72, column: 24, scope: !7)
!62 = !DILocation(line: 75, column: 40, scope: !7)
!63 = !DILocation(line: 76, column: 56, scope: !7)
!64 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !65)
!65 = !DILocation(line: 77, column: 27, scope: !24)
!66 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !67)
!67 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !68)
!68 = !DILocation(line: 77, column: 27, scope: !22)
!69 = !DILocation(line: 85, column: 24, scope: !7)
!70 = !DILocation(line: 87, column: 24, scope: !7)
!71 = !DILocation(line: 78, column: 36, scope: !7)
!72 = !DILocation(line: 79, column: 27, scope: !7)
!73 = !DILocation(line: 80, column: 25, scope: !7)
!74 = !DILocation(line: 82, column: 45, scope: !7)
!75 = !DILocation(line: 82, column: 39, scope: !7)
!76 = !DILocation(line: 82, column: 56, scope: !7)
!77 = !DILocation(line: 83, column: 35, scope: !7)
!78 = !DILocation(line: 83, column: 40, scope: !7)
!79 = !DILocation(line: 88, column: 30, scope: !7)
!80 = !DILocation(line: 89, column: 24, scope: !7)
!81 = !DILocation(line: 91, column: 24, scope: !7)
!82 = !DILocation(line: 92, column: 24, scope: !7)
!83 = !DILocation(line: 94, column: 29, scope: !7)
!84 = !DILocation(line: 94, column: 53, scope: !7)
!85 = !DILocation(line: 95, column: 29, scope: !7)
!86 = !DILocation(line: 95, column: 53, scope: !7)
!87 = !DILocation(line: 78, column: 4, scope: !7)
