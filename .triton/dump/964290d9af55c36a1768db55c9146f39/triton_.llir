; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !5 {
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %17 = and i32 %16, 31, !dbg !8
  %18 = lshr i32 %16, 5, !dbg !8
  %19 = and i32 %18, 7, !dbg !8
  %urem = and i32 %16, 255, !dbg !8
  %20 = or i32 %urem, 256, !dbg !8
  %21 = or i32 %urem, 512, !dbg !8
  %22 = or i32 %urem, 768, !dbg !8
  %23 = shl nuw nsw i32 %urem, 2, !dbg !8
  %24 = or i32 %23, 1024, !dbg !8
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %26 = icmp slt i32 %25, 2304, !dbg !10
  %27 = sext i32 %25 to i64, !dbg !11
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !11
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %26) #3, !dbg !12
  %30 = bitcast i32 %29 to float, !dbg !12
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %26) #3, !dbg !12
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %26) #3, !dbg !12
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %26) #3, !dbg !12
  %34 = mul nuw nsw i32 %urem, 2304, !dbg !13
  %35 = mul nuw nsw i32 %20, 2304, !dbg !13
  %36 = mul nuw nsw i32 %21, 2304, !dbg !13
  %37 = mul nuw nsw i32 %22, 2304, !dbg !13
  %38 = add i32 %25, %34, !dbg !14
  %39 = add i32 %25, %35, !dbg !14
  %40 = add i32 %25, %36, !dbg !14
  %41 = add i32 %25, %37, !dbg !14
  %42 = add i32 %38, 2359296, !dbg !14
  %43 = add i32 %38, 2949120, !dbg !14
  %44 = add i32 %38, 3538944, !dbg !14
  %45 = add i32 %38, 4128768, !dbg !14
  %46 = sext i32 %38 to i64, !dbg !15
  %47 = getelementptr i16, ptr addrspace(1) %0, i64 %46, !dbg !15
  %48 = sext i32 %39 to i64, !dbg !15
  %49 = getelementptr i16, ptr addrspace(1) %0, i64 %48, !dbg !15
  %50 = sext i32 %40 to i64, !dbg !15
  %51 = getelementptr i16, ptr addrspace(1) %0, i64 %50, !dbg !15
  %52 = sext i32 %41 to i64, !dbg !15
  %53 = getelementptr i16, ptr addrspace(1) %0, i64 %52, !dbg !15
  %54 = sext i32 %42 to i64, !dbg !15
  %55 = getelementptr i16, ptr addrspace(1) %0, i64 %54, !dbg !15
  %56 = sext i32 %43 to i64, !dbg !15
  %57 = getelementptr i16, ptr addrspace(1) %0, i64 %56, !dbg !15
  %58 = sext i32 %44 to i64, !dbg !15
  %59 = getelementptr i16, ptr addrspace(1) %0, i64 %58, !dbg !15
  %60 = sext i32 %45 to i64, !dbg !15
  %61 = getelementptr i16, ptr addrspace(1) %0, i64 %60, !dbg !15
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %47, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %49, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %51, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %53, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %55, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %57, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %59, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %61, i1 %26, i16 0, i1 %26) #3, !dbg !16
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #3, !dbg !17
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #3, !dbg !17
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #3, !dbg !17
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #3, !dbg !17
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #3, !dbg !17
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #3, !dbg !17
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #3, !dbg !17
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #3, !dbg !17
  %78 = getelementptr i16, ptr addrspace(1) %1, i64 %46, !dbg !18
  %79 = getelementptr i16, ptr addrspace(1) %1, i64 %48, !dbg !18
  %80 = getelementptr i16, ptr addrspace(1) %1, i64 %50, !dbg !18
  %81 = getelementptr i16, ptr addrspace(1) %1, i64 %52, !dbg !18
  %82 = getelementptr i16, ptr addrspace(1) %1, i64 %54, !dbg !18
  %83 = getelementptr i16, ptr addrspace(1) %1, i64 %56, !dbg !18
  %84 = getelementptr i16, ptr addrspace(1) %1, i64 %58, !dbg !18
  %85 = getelementptr i16, ptr addrspace(1) %1, i64 %60, !dbg !18
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %78, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %79, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %80, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %81, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %82, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %83, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %84, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %85, i1 %26, i16 0, i1 %26) #3, !dbg !19
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #3, !dbg !20
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #3, !dbg !20
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #3, !dbg !20
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #3, !dbg !20
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #3, !dbg !20
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #3, !dbg !20
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #3, !dbg !20
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #3, !dbg !20
  %102 = getelementptr i16, ptr addrspace(1) %2, i64 %46, !dbg !21
  %103 = getelementptr i16, ptr addrspace(1) %2, i64 %48, !dbg !21
  %104 = getelementptr i16, ptr addrspace(1) %2, i64 %50, !dbg !21
  %105 = getelementptr i16, ptr addrspace(1) %2, i64 %52, !dbg !21
  %106 = getelementptr i16, ptr addrspace(1) %2, i64 %54, !dbg !21
  %107 = getelementptr i16, ptr addrspace(1) %2, i64 %56, !dbg !21
  %108 = getelementptr i16, ptr addrspace(1) %2, i64 %58, !dbg !21
  %109 = getelementptr i16, ptr addrspace(1) %2, i64 %60, !dbg !21
  %110 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %102, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %111 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %103, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %112 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %104, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %113 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %105, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %114 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %106, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %115 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %107, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %116 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %108, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %117 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %109, i1 %26, i16 0, i1 %26) #3, !dbg !22
  %118 = zext nneg i32 %urem to i64, !dbg !23
  %119 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %118, !dbg !23
  %120 = insertelement <1 x i16> undef, i16 %110, i64 0, !dbg !23
  store <1 x i16> %120, ptr addrspace(3) %119, align 2, !dbg !23
  %121 = zext nneg i32 %20 to i64, !dbg !23
  %122 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %121, !dbg !23
  %123 = insertelement <1 x i16> undef, i16 %111, i64 0, !dbg !23
  store <1 x i16> %123, ptr addrspace(3) %122, align 2, !dbg !23
  %124 = zext nneg i32 %21 to i64, !dbg !23
  %125 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %124, !dbg !23
  %126 = insertelement <1 x i16> undef, i16 %112, i64 0, !dbg !23
  store <1 x i16> %126, ptr addrspace(3) %125, align 2, !dbg !23
  %127 = zext nneg i32 %22 to i64, !dbg !23
  %128 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %127, !dbg !23
  %129 = insertelement <1 x i16> undef, i16 %113, i64 0, !dbg !23
  store <1 x i16> %129, ptr addrspace(3) %128, align 2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %130 = zext nneg i32 %23 to i64, !dbg !23
  %131 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %130, !dbg !23
  %132 = load i16, ptr addrspace(3) %131, align 8, !dbg !23
  %133 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %131, i64 0, i64 1, !dbg !23
  %134 = load i16, ptr addrspace(3) %133, align 2, !dbg !23
  %135 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %131, i64 0, i64 2, !dbg !23
  %136 = load i16, ptr addrspace(3) %135, align 4, !dbg !23
  %137 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %131, i64 0, i64 3, !dbg !23
  %138 = load i16, ptr addrspace(3) %137, align 2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %139 = insertelement <1 x i16> undef, i16 %114, i64 0, !dbg !23
  store <1 x i16> %139, ptr addrspace(3) %119, align 2, !dbg !23
  %140 = insertelement <1 x i16> undef, i16 %115, i64 0, !dbg !23
  store <1 x i16> %140, ptr addrspace(3) %122, align 2, !dbg !23
  %141 = insertelement <1 x i16> undef, i16 %116, i64 0, !dbg !23
  store <1 x i16> %141, ptr addrspace(3) %125, align 2, !dbg !23
  %142 = insertelement <1 x i16> undef, i16 %117, i64 0, !dbg !23
  store <1 x i16> %142, ptr addrspace(3) %128, align 2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %143 = load i16, ptr addrspace(3) %131, align 8, !dbg !23
  %144 = load i16, ptr addrspace(3) %133, align 2, !dbg !23
  %145 = load i16, ptr addrspace(3) %135, align 4, !dbg !23
  %146 = load i16, ptr addrspace(3) %137, align 2, !dbg !23
  %147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %132) #3, !dbg !23
  %148 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %134) #3, !dbg !23
  %149 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %136) #3, !dbg !23
  %150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #3, !dbg !23
  %151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %143) #3, !dbg !23
  %152 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #3, !dbg !23
  %153 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #3, !dbg !23
  %154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #3, !dbg !23
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %130, !dbg !24
  %156 = zext nneg i32 %24 to i64, !dbg !24
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %156, !dbg !24
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %155, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !25
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !25
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !25
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !25
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !25
  %163 = bitcast i32 %159 to float, !dbg !25
  %164 = bitcast i32 %160 to float, !dbg !25
  %165 = bitcast i32 %161 to float, !dbg !25
  %166 = bitcast i32 %162 to float, !dbg !25
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %157, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !25
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !25
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !25
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !25
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !25
  %172 = bitcast i32 %168 to float, !dbg !25
  %173 = bitcast i32 %169 to float, !dbg !25
  %174 = bitcast i32 %170 to float, !dbg !25
  %175 = bitcast i32 %171 to float, !dbg !25
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !26
  %177 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !26
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !26
  %179 = getelementptr float, ptr addrspace(1) %5, i64 %52, !dbg !26
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !26
  %181 = getelementptr float, ptr addrspace(1) %5, i64 %56, !dbg !26
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %58, !dbg !26
  %183 = getelementptr float, ptr addrspace(1) %5, i64 %60, !dbg !26
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %185 = bitcast i32 %184 to float, !dbg !27
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %187 = bitcast i32 %186 to float, !dbg !27
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %189 = bitcast i32 %188 to float, !dbg !27
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %191 = bitcast i32 %190 to float, !dbg !27
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %193 = bitcast i32 %192 to float, !dbg !27
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %195 = bitcast i32 %194 to float, !dbg !27
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %197 = bitcast i32 %196 to float, !dbg !27
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %26, i32 0, i1 %26) #3, !dbg !27
  %199 = bitcast i32 %198 to float, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i64 %118, !dbg !27
  %201 = insertelement <1 x float> undef, float %185, i64 0, !dbg !27
  store <1 x float> %201, ptr addrspace(3) %200, align 4, !dbg !27
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i64 %121, !dbg !27
  %203 = insertelement <1 x float> undef, float %187, i64 0, !dbg !27
  store <1 x float> %203, ptr addrspace(3) %202, align 4, !dbg !27
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i64 %124, !dbg !27
  %205 = insertelement <1 x float> undef, float %189, i64 0, !dbg !27
  store <1 x float> %205, ptr addrspace(3) %204, align 4, !dbg !27
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i64 %127, !dbg !27
  %207 = insertelement <1 x float> undef, float %191, i64 0, !dbg !27
  store <1 x float> %207, ptr addrspace(3) %206, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i64 %130, !dbg !27
  %209 = load float, ptr addrspace(3) %208, align 16, !dbg !27
  %210 = getelementptr inbounds <4 x float>, ptr addrspace(3) %208, i64 0, i64 1, !dbg !27
  %211 = load float, ptr addrspace(3) %210, align 4, !dbg !27
  %212 = getelementptr inbounds <4 x float>, ptr addrspace(3) %208, i64 0, i64 2, !dbg !27
  %213 = insertelement <1 x float> undef, float %193, i64 0, !dbg !27
  %214 = insertelement <1 x float> undef, float %195, i64 0, !dbg !27
  %215 = insertelement <1 x float> undef, float %197, i64 0, !dbg !27
  %216 = insertelement <1 x float> undef, float %199, i64 0, !dbg !27
  %217 = getelementptr float, ptr addrspace(1) %6, i64 %130, !dbg !28
  %218 = getelementptr float, ptr addrspace(1) %6, i64 %156, !dbg !28
  %219 = getelementptr i16, ptr addrspace(1) %7, i64 %46, !dbg !29
  %220 = getelementptr i16, ptr addrspace(1) %7, i64 %48, !dbg !29
  %221 = getelementptr i16, ptr addrspace(1) %7, i64 %50, !dbg !29
  %222 = getelementptr i16, ptr addrspace(1) %7, i64 %52, !dbg !29
  %223 = getelementptr i16, ptr addrspace(1) %7, i64 %54, !dbg !29
  %224 = getelementptr i16, ptr addrspace(1) %7, i64 %56, !dbg !29
  %225 = getelementptr i16, ptr addrspace(1) %7, i64 %58, !dbg !29
  %226 = getelementptr i16, ptr addrspace(1) %7, i64 %60, !dbg !29
  %227 = getelementptr float, ptr addrspace(1) %8, i64 %130, !dbg !30
  %228 = getelementptr float, ptr addrspace(1) %8, i64 %156, !dbg !30
  %229 = getelementptr float, ptr addrspace(1) %9, i64 %46, !dbg !31
  %230 = getelementptr float, ptr addrspace(1) %9, i64 %48, !dbg !31
  %231 = getelementptr float, ptr addrspace(1) %9, i64 %50, !dbg !31
  %232 = getelementptr float, ptr addrspace(1) %9, i64 %52, !dbg !31
  %233 = getelementptr float, ptr addrspace(1) %9, i64 %54, !dbg !31
  %234 = getelementptr float, ptr addrspace(1) %9, i64 %56, !dbg !31
  %235 = getelementptr float, ptr addrspace(1) %9, i64 %58, !dbg !31
  %236 = getelementptr float, ptr addrspace(1) %9, i64 %60, !dbg !31
  %237 = fadd float %70, %94, !dbg !32
  %238 = fadd float %71, %95, !dbg !32
  %239 = fadd float %72, %96, !dbg !32
  %240 = fadd float %73, %97, !dbg !32
  %241 = fadd float %74, %98, !dbg !32
  %242 = fadd float %75, %99, !dbg !32
  %243 = fadd float %76, %100, !dbg !32
  %244 = fadd float %77, %101, !dbg !32
  %245 = insertelement <1 x float> undef, float %237, i64 0, !dbg !32
  %246 = insertelement <1 x float> undef, float %238, i64 0, !dbg !32
  %247 = insertelement <1 x float> undef, float %239, i64 0, !dbg !32
  %248 = insertelement <1 x float> undef, float %240, i64 0, !dbg !32
  %249 = insertelement <1 x float> undef, float %241, i64 0, !dbg !32
  %250 = insertelement <1 x float> undef, float %242, i64 0, !dbg !32
  %251 = insertelement <1 x float> undef, float %243, i64 0, !dbg !32
  %252 = insertelement <1 x float> undef, float %244, i64 0, !dbg !32
  %253 = fmul float %147, %163, !dbg !33
  %254 = fmul float %148, %164, !dbg !33
  %255 = fmul float %149, %165, !dbg !33
  %256 = fmul float %150, %166, !dbg !33
  %257 = fmul float %151, %172, !dbg !33
  %258 = fmul float %152, %173, !dbg !33
  %259 = fmul float %153, %174, !dbg !33
  %260 = fmul float %154, %175, !dbg !33
  %261 = shl nuw nsw i32 %urem, 3, !dbg !33
  %262 = zext nneg i32 %261 to i64, !dbg !33
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i64 %262, !dbg !33
  %264 = insertelement <1 x float> undef, float %253, i64 0, !dbg !33
  %265 = or i32 %261, 2, !dbg !33
  %266 = zext nneg i32 %265 to i64, !dbg !33
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i64 %266, !dbg !33
  %268 = insertelement <1 x float> undef, float %254, i64 0, !dbg !33
  %269 = or i32 %261, 4, !dbg !33
  %270 = zext nneg i32 %269 to i64, !dbg !33
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i64 %270, !dbg !33
  %272 = insertelement <1 x float> undef, float %255, i64 0, !dbg !33
  %273 = or i32 %261, 6, !dbg !33
  %274 = zext nneg i32 %273 to i64, !dbg !33
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i64 %274, !dbg !33
  %276 = insertelement <1 x float> undef, float %256, i64 0, !dbg !33
  %277 = shl nuw nsw i32 %urem, 1, !dbg !33
  %278 = zext nneg i32 %277 to i64, !dbg !33
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i64 %278, !dbg !33
  %280 = shl nuw nsw i32 %20, 1, !dbg !33
  %281 = zext nneg i32 %280 to i64, !dbg !33
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i64 %281, !dbg !33
  %283 = shl nuw nsw i32 %21, 1, !dbg !33
  %284 = zext nneg i32 %283 to i64, !dbg !33
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i64 %284, !dbg !33
  %286 = shl nuw nsw i32 %22, 1, !dbg !33
  %287 = zext nneg i32 %286 to i64, !dbg !33
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i64 %287, !dbg !33
  %289 = insertelement <1 x float> undef, float %257, i64 0, !dbg !33
  %290 = insertelement <1 x float> undef, float %258, i64 0, !dbg !33
  %291 = insertelement <1 x float> undef, float %259, i64 0, !dbg !33
  %292 = insertelement <1 x float> undef, float %260, i64 0, !dbg !33
  %293 = fadd float %30, 1.000000e+00, !dbg !34
  %294 = fmul float %293, %253, !dbg !35
  %295 = fmul float %293, %254, !dbg !35
  %296 = fmul float %293, %255, !dbg !35
  %297 = fmul float %293, %256, !dbg !35
  %298 = fmul float %293, %257, !dbg !35
  %299 = fmul float %293, %258, !dbg !35
  %300 = fmul float %293, %259, !dbg !35
  %301 = fmul float %293, %260, !dbg !35
  %302 = insertelement <1 x float> undef, float %294, i64 0, !dbg !35
  %303 = insertelement <1 x float> undef, float %295, i64 0, !dbg !35
  %304 = insertelement <1 x float> undef, float %296, i64 0, !dbg !35
  %305 = insertelement <1 x float> undef, float %297, i64 0, !dbg !35
  %306 = insertelement <1 x float> undef, float %298, i64 0, !dbg !35
  %307 = insertelement <1 x float> undef, float %299, i64 0, !dbg !35
  %308 = insertelement <1 x float> undef, float %300, i64 0, !dbg !35
  %309 = insertelement <1 x float> undef, float %301, i64 0, !dbg !35
  %310 = load <2 x float>, ptr addrspace(3) %212, align 8, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  store <1 x float> %213, ptr addrspace(3) %200, align 4, !dbg !27
  store <1 x float> %214, ptr addrspace(3) %202, align 4, !dbg !27
  store <1 x float> %215, ptr addrspace(3) %204, align 4, !dbg !27
  store <1 x float> %216, ptr addrspace(3) %206, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %311 = load <2 x float>, ptr addrspace(3) %212, align 8, !dbg !27
  %312 = load <2 x float>, ptr addrspace(3) %208, align 16, !dbg !27
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %217, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !36
  %314 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !36
  %315 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !36
  %316 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !36
  %317 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !36
  %318 = bitcast i32 %314 to float, !dbg !36
  %319 = bitcast i32 %315 to float, !dbg !36
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %218, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !36
  %321 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !36
  %322 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !36
  %323 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !36
  %324 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !36
  %325 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %219, i1 %26, i16 0, i1 %26) #3, !dbg !37
  %326 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %220, i1 %26, i16 0, i1 %26) #3, !dbg !37
  %327 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %221, i1 %26, i16 0, i1 %26) #3, !dbg !37
  %328 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %222, i1 %26, i16 0, i1 %26) #3, !dbg !37
  %329 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %223, i1 %26, i16 0, i1 %26) #3, !dbg !37
  %330 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %224, i1 %26, i16 0, i1 %26) #3, !dbg !37
  %331 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %225, i1 %26, i16 0, i1 %26) #3, !dbg !37
  %332 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %226, i1 %26, i16 0, i1 %26) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %333 = insertelement <1 x i16> undef, i16 %325, i64 0, !dbg !38
  store <1 x i16> %333, ptr addrspace(3) %119, align 2, !dbg !38
  %334 = insertelement <1 x i16> undef, i16 %326, i64 0, !dbg !38
  store <1 x i16> %334, ptr addrspace(3) %122, align 2, !dbg !38
  %335 = insertelement <1 x i16> undef, i16 %327, i64 0, !dbg !38
  store <1 x i16> %335, ptr addrspace(3) %125, align 2, !dbg !38
  %336 = insertelement <1 x i16> undef, i16 %328, i64 0, !dbg !38
  store <1 x i16> %336, ptr addrspace(3) %128, align 2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %337 = load i16, ptr addrspace(3) %131, align 8, !dbg !38
  %338 = load i16, ptr addrspace(3) %133, align 2, !dbg !38
  %339 = load i16, ptr addrspace(3) %135, align 4, !dbg !38
  %340 = load i16, ptr addrspace(3) %137, align 2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %341 = insertelement <1 x i16> undef, i16 %329, i64 0, !dbg !38
  store <1 x i16> %341, ptr addrspace(3) %119, align 2, !dbg !38
  %342 = insertelement <1 x i16> undef, i16 %330, i64 0, !dbg !38
  store <1 x i16> %342, ptr addrspace(3) %122, align 2, !dbg !38
  %343 = insertelement <1 x i16> undef, i16 %331, i64 0, !dbg !38
  store <1 x i16> %343, ptr addrspace(3) %125, align 2, !dbg !38
  %344 = insertelement <1 x i16> undef, i16 %332, i64 0, !dbg !38
  store <1 x i16> %344, ptr addrspace(3) %128, align 2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %345 = load i16, ptr addrspace(3) %131, align 8, !dbg !38
  %346 = load i16, ptr addrspace(3) %133, align 2, !dbg !38
  %347 = load i16, ptr addrspace(3) %135, align 4, !dbg !38
  %348 = load i16, ptr addrspace(3) %137, align 2, !dbg !38
  %349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #3, !dbg !38
  %350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #3, !dbg !38
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #3, !dbg !38
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %340) #3, !dbg !38
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #3, !dbg !38
  %354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #3, !dbg !38
  %355 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %347) #3, !dbg !38
  %356 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %348) #3, !dbg !38
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %227, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !39
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !39
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !39
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !39
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !39
  %362 = bitcast i32 %358 to float, !dbg !39
  %363 = bitcast i32 %359 to float, !dbg !39
  %364 = insertelement <2 x i32> poison, i32 %360, i64 0, !dbg !39
  %365 = insertelement <2 x i32> %364, i32 %361, i64 1, !dbg !39
  %366 = bitcast <2 x i32> %365 to <2 x float>, !dbg !39
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %228, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !39
  %368 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !39
  %369 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !39
  %370 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !39
  %371 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !39
  %372 = insertelement <2 x i32> poison, i32 %368, i64 0, !dbg !39
  %373 = insertelement <2 x i32> %372, i32 %369, i64 1, !dbg !39
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !39
  %375 = insertelement <2 x i32> poison, i32 %370, i64 0, !dbg !39
  %376 = insertelement <2 x i32> %375, i32 %371, i64 1, !dbg !39
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !39
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %26, i32 0, i1 %26) #3, !dbg !40
  %379 = bitcast i32 %378 to float, !dbg !40
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %26, i32 0, i1 %26) #3, !dbg !40
  %381 = bitcast i32 %380 to float, !dbg !40
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %26, i32 0, i1 %26) #3, !dbg !40
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %26, i32 0, i1 %26) #3, !dbg !40
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %26, i32 0, i1 %26) #3, !dbg !40
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %26, i32 0, i1 %26) #3, !dbg !40
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %26, i32 0, i1 %26) #3, !dbg !40
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %26, i32 0, i1 %26) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  store <1 x float> %245, ptr addrspace(3) %200, align 4, !dbg !32
  store <1 x float> %246, ptr addrspace(3) %202, align 4, !dbg !32
  store <1 x float> %247, ptr addrspace(3) %204, align 4, !dbg !32
  store <1 x float> %248, ptr addrspace(3) %206, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %388 = load float, ptr addrspace(3) %208, align 16, !dbg !32
  %389 = load float, ptr addrspace(3) %210, align 4, !dbg !32
  %390 = insertelement <2 x i32> poison, i32 %323, i64 0, !dbg !36
  %391 = insertelement <2 x i32> %390, i32 %324, i64 1, !dbg !36
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !36
  %393 = insertelement <2 x i32> poison, i32 %321, i64 0, !dbg !36
  %394 = insertelement <2 x i32> %393, i32 %322, i64 1, !dbg !36
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !36
  %396 = insertelement <2 x i32> poison, i32 %316, i64 0, !dbg !36
  %397 = insertelement <2 x i32> %396, i32 %317, i64 1, !dbg !36
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !36
  %399 = load <2 x float>, ptr addrspace(3) %212, align 8, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  store <1 x float> %249, ptr addrspace(3) %200, align 4, !dbg !32
  store <1 x float> %250, ptr addrspace(3) %202, align 4, !dbg !32
  store <1 x float> %251, ptr addrspace(3) %204, align 4, !dbg !32
  store <1 x float> %252, ptr addrspace(3) %206, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %400 = load <2 x float>, ptr addrspace(3) %212, align 8, !dbg !32
  %401 = load <2 x float>, ptr addrspace(3) %208, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  store <1 x float> %264, ptr addrspace(3) %263, align 4, !dbg !33
  store <1 x float> %268, ptr addrspace(3) %267, align 4, !dbg !33
  store <1 x float> %272, ptr addrspace(3) %271, align 4, !dbg !33
  store <1 x float> %276, ptr addrspace(3) %275, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %402 = load float, ptr addrspace(3) %279, align 4, !dbg !33
  %403 = load float, ptr addrspace(3) %282, align 4, !dbg !33
  %404 = load float, ptr addrspace(3) %285, align 4, !dbg !33
  %405 = load float, ptr addrspace(3) %288, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  store <1 x float> %289, ptr addrspace(3) %263, align 4, !dbg !33
  store <1 x float> %290, ptr addrspace(3) %267, align 4, !dbg !33
  store <1 x float> %291, ptr addrspace(3) %271, align 4, !dbg !33
  store <1 x float> %292, ptr addrspace(3) %275, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %406 = load float, ptr addrspace(3) %279, align 4, !dbg !33
  %407 = load float, ptr addrspace(3) %282, align 4, !dbg !33
  %408 = load float, ptr addrspace(3) %285, align 4, !dbg !33
  %409 = load float, ptr addrspace(3) %288, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  store <1 x float> %302, ptr addrspace(3) %263, align 4, !dbg !35
  store <1 x float> %303, ptr addrspace(3) %267, align 4, !dbg !35
  store <1 x float> %304, ptr addrspace(3) %271, align 4, !dbg !35
  store <1 x float> %305, ptr addrspace(3) %275, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %410 = load float, ptr addrspace(3) %279, align 4, !dbg !35
  %411 = load float, ptr addrspace(3) %282, align 4, !dbg !35
  %412 = load float, ptr addrspace(3) %285, align 4, !dbg !35
  %413 = load float, ptr addrspace(3) %288, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  store <1 x float> %306, ptr addrspace(3) %263, align 4, !dbg !35
  store <1 x float> %307, ptr addrspace(3) %267, align 4, !dbg !35
  store <1 x float> %308, ptr addrspace(3) %271, align 4, !dbg !35
  store <1 x float> %309, ptr addrspace(3) %275, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %414 = load float, ptr addrspace(3) %279, align 4, !dbg !35
  %415 = load float, ptr addrspace(3) %282, align 4, !dbg !35
  %416 = load float, ptr addrspace(3) %285, align 4, !dbg !35
  %417 = load float, ptr addrspace(3) %288, align 4, !dbg !35
  %418 = fadd float %410, %185, !dbg !41
  %419 = fadd float %411, %187, !dbg !41
  %420 = fadd float %412, %189, !dbg !41
  %421 = fadd float %413, %191, !dbg !41
  %422 = fadd float %414, %193, !dbg !41
  %423 = fadd float %415, %195, !dbg !41
  %424 = fadd float %416, %197, !dbg !41
  %425 = fadd float %417, %199, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %426 = insertelement <1 x float> undef, float %418, i64 0, !dbg !41
  store <1 x float> %426, ptr addrspace(3) %200, align 4, !dbg !41
  %427 = insertelement <1 x float> undef, float %419, i64 0, !dbg !41
  store <1 x float> %427, ptr addrspace(3) %202, align 4, !dbg !41
  %428 = insertelement <1 x float> undef, float %420, i64 0, !dbg !41
  store <1 x float> %428, ptr addrspace(3) %204, align 4, !dbg !41
  %429 = insertelement <1 x float> undef, float %421, i64 0, !dbg !41
  store <1 x float> %429, ptr addrspace(3) %206, align 4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %430 = load float, ptr addrspace(3) %208, align 16, !dbg !41
  %431 = load float, ptr addrspace(3) %210, align 4, !dbg !41
  %432 = load <2 x float>, ptr addrspace(3) %212, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %433 = insertelement <1 x float> undef, float %422, i64 0, !dbg !41
  store <1 x float> %433, ptr addrspace(3) %200, align 4, !dbg !41
  %434 = insertelement <1 x float> undef, float %423, i64 0, !dbg !41
  store <1 x float> %434, ptr addrspace(3) %202, align 4, !dbg !41
  %435 = insertelement <1 x float> undef, float %424, i64 0, !dbg !41
  store <1 x float> %435, ptr addrspace(3) %204, align 4, !dbg !41
  %436 = insertelement <1 x float> undef, float %425, i64 0, !dbg !41
  store <1 x float> %436, ptr addrspace(3) %206, align 4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %437 = load <2 x float>, ptr addrspace(3) %208, align 16, !dbg !41
  %438 = load <2 x float>, ptr addrspace(3) %212, align 8, !dbg !41
  %439 = fmul float %430, %318, !dbg !42
  %440 = fmul float %431, %319, !dbg !42
  %441 = fmul <2 x float> %432, %398, !dbg !42
  %442 = fmul <2 x float> %437, %395, !dbg !42
  %443 = fmul <2 x float> %438, %392, !dbg !42
  %444 = fmul float %388, %439, !dbg !43
  %445 = fmul float %389, %440, !dbg !43
  %446 = fmul <2 x float> %399, %441, !dbg !43
  %447 = fmul <2 x float> %401, %442, !dbg !43
  %448 = fmul <2 x float> %400, %443, !dbg !43
  %449 = fadd float %444, 0.000000e+00, !dbg !44
  %450 = fadd float %445, 0.000000e+00, !dbg !44
  %451 = fadd <2 x float> %446, zeroinitializer, !dbg !44
  %452 = fadd <2 x float> %447, zeroinitializer, !dbg !44
  %453 = fadd <2 x float> %448, zeroinitializer, !dbg !44
  %454 = fmul float %209, %362, !dbg !45
  %455 = fmul float %211, %363, !dbg !45
  %456 = fmul <2 x float> %310, %366, !dbg !45
  %457 = fmul <2 x float> %312, %374, !dbg !45
  %458 = fmul <2 x float> %311, %377, !dbg !45
  %459 = fmul float %349, %454, !dbg !46
  %460 = fmul float %350, %455, !dbg !46
  %461 = insertelement <2 x float> poison, float %351, i64 0, !dbg !46
  %462 = insertelement <2 x float> %461, float %352, i64 1, !dbg !46
  %463 = fmul <2 x float> %462, %456, !dbg !46
  %464 = insertelement <2 x float> poison, float %353, i64 0, !dbg !46
  %465 = insertelement <2 x float> %464, float %354, i64 1, !dbg !46
  %466 = fmul <2 x float> %465, %457, !dbg !46
  %467 = insertelement <2 x float> poison, float %355, i64 0, !dbg !46
  %468 = insertelement <2 x float> %467, float %356, i64 1, !dbg !46
  %469 = fmul <2 x float> %468, %458, !dbg !46
  %470 = fadd float %459, 0.000000e+00, !dbg !47
  %471 = fadd float %460, 0.000000e+00, !dbg !47
  %472 = fadd <2 x float> %463, zeroinitializer, !dbg !47
  %473 = fadd <2 x float> %466, zeroinitializer, !dbg !47
  %474 = fadd <2 x float> %469, zeroinitializer, !dbg !47
  %475 = fmul float %402, %379, !dbg !48
  %476 = fmul float %403, %381, !dbg !48
  %477 = fadd float %475, 0.000000e+00, !dbg !49
  %478 = fadd float %476, 0.000000e+00, !dbg !49
  %479 = insertelement <2 x i32> poison, i32 %382, i64 0, !dbg !40
  %480 = insertelement <2 x i32> %479, i32 %383, i64 1, !dbg !40
  %481 = bitcast <2 x i32> %480 to <2 x float>, !dbg !40
  %482 = insertelement <2 x float> poison, float %404, i64 0, !dbg !48
  %483 = insertelement <2 x float> %482, float %405, i64 1, !dbg !48
  %484 = fmul <2 x float> %483, %481, !dbg !48
  %485 = fadd <2 x float> %484, zeroinitializer, !dbg !49
  %486 = insertelement <2 x i32> poison, i32 %384, i64 0, !dbg !40
  %487 = insertelement <2 x i32> %486, i32 %385, i64 1, !dbg !40
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !40
  %489 = insertelement <2 x float> poison, float %406, i64 0, !dbg !48
  %490 = insertelement <2 x float> %489, float %407, i64 1, !dbg !48
  %491 = fmul <2 x float> %490, %488, !dbg !48
  %492 = fadd <2 x float> %491, zeroinitializer, !dbg !49
  %493 = insertelement <2 x i32> poison, i32 %386, i64 0, !dbg !40
  %494 = insertelement <2 x i32> %493, i32 %387, i64 1, !dbg !40
  %495 = bitcast <2 x i32> %494 to <2 x float>, !dbg !40
  %496 = insertelement <2 x float> poison, float %408, i64 0, !dbg !48
  %497 = insertelement <2 x float> %496, float %409, i64 1, !dbg !48
  %498 = fmul <2 x float> %497, %495, !dbg !48
  %499 = fadd <2 x float> %498, zeroinitializer, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %500 = fadd float %449, %450, !dbg !54
  %501 = extractelement <2 x float> %451, i64 0, !dbg !54
  %502 = fadd float %501, %500, !dbg !54
  %503 = extractelement <2 x float> %451, i64 1, !dbg !54
  %504 = fadd float %503, %502, !dbg !54
  %505 = extractelement <2 x float> %452, i64 0, !dbg !54
  %506 = fadd float %504, %505, !dbg !54
  %507 = extractelement <2 x float> %452, i64 1, !dbg !54
  %508 = fadd float %507, %506, !dbg !54
  %509 = extractelement <2 x float> %453, i64 0, !dbg !54
  %510 = fadd float %509, %508, !dbg !54
  %511 = extractelement <2 x float> %453, i64 1, !dbg !54
  %512 = fadd float %511, %510, !dbg !54
  %513 = select i1 %26, float %512, float 0.000000e+00, !dbg !54
  %514 = bitcast float %513 to i32, !dbg !50
  %515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %514, i32 16, i32 31), !dbg !50
  %516 = bitcast i32 %515 to float, !dbg !50
  %517 = fadd float %513, %516, !dbg !54
  %518 = bitcast float %517 to i32, !dbg !50
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 8, i32 31), !dbg !50
  %520 = bitcast i32 %519 to float, !dbg !50
  %521 = fadd float %517, %520, !dbg !54
  %522 = bitcast float %521 to i32, !dbg !50
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 4, i32 31), !dbg !50
  %524 = bitcast i32 %523 to float, !dbg !50
  %525 = fadd float %521, %524, !dbg !54
  %526 = bitcast float %525 to i32, !dbg !50
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 2, i32 31), !dbg !50
  %528 = bitcast i32 %527 to float, !dbg !50
  %529 = fadd float %525, %528, !dbg !54
  %530 = bitcast float %529 to i32, !dbg !50
  %531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %530, i32 1, i32 31), !dbg !50
  %532 = bitcast i32 %531 to float, !dbg !50
  %533 = fadd float %529, %532, !dbg !54
  %534 = icmp eq i32 %17, 0, !dbg !50
  %535 = zext nneg i32 %19 to i64, !dbg !50
  %536 = getelementptr float, ptr addrspace(3) @global_smem, i64 %535, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %536, float %533, i1 %534) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %537 = icmp slt i32 %16, 8, !dbg !50
  %538 = sext i32 %16 to i64, !dbg !50
  %539 = getelementptr float, ptr addrspace(3) @global_smem, i64 %538, !dbg !50
  %540 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %539, i1 %537) #3, !dbg !50
  %541 = bitcast float %540 to i32, !dbg !50
  %542 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %541, i32 4, i32 31), !dbg !50
  %543 = bitcast i32 %542 to float, !dbg !50
  %544 = fadd float %540, %543, !dbg !54
  %545 = bitcast float %544 to i32, !dbg !50
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 2, i32 31), !dbg !50
  %547 = bitcast i32 %546 to float, !dbg !50
  %548 = fadd float %544, %547, !dbg !54
  %549 = bitcast float %548 to i32, !dbg !50
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 1, i32 31), !dbg !50
  %551 = bitcast i32 %550 to float, !dbg !50
  %552 = fadd float %548, %551, !dbg !54
  %553 = and i32 %16, 7, !dbg !50
  %554 = icmp eq i32 %553, 0, !dbg !50
  %555 = and i1 %537, %554, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, float %552, i1 %555) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %556 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %557 = insertelement <1 x float> undef, float %556, i64 0, !dbg !58
  store <1 x float> %557, ptr addrspace(3) @global_smem, align 4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %558 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !58
  %559 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !59
  %560 = icmp eq i32 %urem, 0, !dbg !60
  %561 = and i1 %560, %26, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %558, ptr addrspace(1) %559, i1 %561) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %562 = fadd float %470, %471, !dbg !63
  %563 = extractelement <2 x float> %472, i64 0, !dbg !63
  %564 = fadd float %563, %562, !dbg !63
  %565 = extractelement <2 x float> %472, i64 1, !dbg !63
  %566 = fadd float %565, %564, !dbg !63
  %567 = extractelement <2 x float> %473, i64 0, !dbg !63
  %568 = fadd float %567, %566, !dbg !63
  %569 = extractelement <2 x float> %473, i64 1, !dbg !63
  %570 = fadd float %569, %568, !dbg !63
  %571 = extractelement <2 x float> %474, i64 0, !dbg !63
  %572 = fadd float %571, %570, !dbg !63
  %573 = extractelement <2 x float> %474, i64 1, !dbg !63
  %574 = fadd float %573, %572, !dbg !63
  %575 = select i1 %26, float %574, float 0.000000e+00, !dbg !63
  %576 = bitcast float %575 to i32, !dbg !61
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 16, i32 31), !dbg !61
  %578 = bitcast i32 %577 to float, !dbg !61
  %579 = fadd float %575, %578, !dbg !63
  %580 = bitcast float %579 to i32, !dbg !61
  %581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %580, i32 8, i32 31), !dbg !61
  %582 = bitcast i32 %581 to float, !dbg !61
  %583 = fadd float %579, %582, !dbg !63
  %584 = bitcast float %583 to i32, !dbg !61
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 4, i32 31), !dbg !61
  %586 = bitcast i32 %585 to float, !dbg !61
  %587 = fadd float %583, %586, !dbg !63
  %588 = bitcast float %587 to i32, !dbg !61
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 2, i32 31), !dbg !61
  %590 = bitcast i32 %589 to float, !dbg !61
  %591 = fadd float %587, %590, !dbg !63
  %592 = bitcast float %591 to i32, !dbg !61
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 1, i32 31), !dbg !61
  %594 = bitcast i32 %593 to float, !dbg !61
  %595 = fadd float %591, %594, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %536, float %595, i1 %534) #3, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %596 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %539, i1 %537) #3, !dbg !61
  %597 = bitcast float %596 to i32, !dbg !61
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 4, i32 31), !dbg !61
  %599 = bitcast i32 %598 to float, !dbg !61
  %600 = fadd float %596, %599, !dbg !63
  %601 = bitcast float %600 to i32, !dbg !61
  %602 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %601, i32 2, i32 31), !dbg !61
  %603 = bitcast i32 %602 to float, !dbg !61
  %604 = fadd float %600, %603, !dbg !63
  %605 = bitcast float %604 to i32, !dbg !61
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %605, i32 1, i32 31), !dbg !61
  %607 = bitcast i32 %606 to float, !dbg !61
  %608 = fadd float %604, %607, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, float %608, i1 %555) #3, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %609 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %610 = insertelement <1 x float> undef, float %609, i64 0, !dbg !66
  store <1 x float> %610, ptr addrspace(3) @global_smem, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %611 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !66
  %612 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %611, ptr addrspace(1) %612, i1 %561) #3, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %613 = fadd float %477, %478, !dbg !71
  %614 = extractelement <2 x float> %485, i64 0, !dbg !71
  %615 = fadd float %613, %614, !dbg !71
  %616 = extractelement <2 x float> %485, i64 1, !dbg !71
  %617 = fadd float %615, %616, !dbg !71
  %618 = extractelement <2 x float> %492, i64 0, !dbg !71
  %619 = fadd float %617, %618, !dbg !71
  %620 = extractelement <2 x float> %492, i64 1, !dbg !71
  %621 = fadd float %619, %620, !dbg !71
  %622 = extractelement <2 x float> %499, i64 0, !dbg !71
  %623 = fadd float %621, %622, !dbg !71
  %624 = extractelement <2 x float> %499, i64 1, !dbg !71
  %625 = fadd float %623, %624, !dbg !71
  %626 = select i1 %26, float %625, float 0.000000e+00, !dbg !71
  %627 = bitcast float %626 to i32, !dbg !69
  %628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %627, i32 16, i32 31), !dbg !69
  %629 = bitcast i32 %628 to float, !dbg !69
  %630 = fadd float %626, %629, !dbg !71
  %631 = bitcast float %630 to i32, !dbg !69
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 8, i32 31), !dbg !69
  %633 = bitcast i32 %632 to float, !dbg !69
  %634 = fadd float %630, %633, !dbg !71
  %635 = bitcast float %634 to i32, !dbg !69
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 4, i32 31), !dbg !69
  %637 = bitcast i32 %636 to float, !dbg !69
  %638 = fadd float %634, %637, !dbg !71
  %639 = bitcast float %638 to i32, !dbg !69
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 2, i32 31), !dbg !69
  %641 = bitcast i32 %640 to float, !dbg !69
  %642 = fadd float %638, %641, !dbg !71
  %643 = bitcast float %642 to i32, !dbg !69
  %644 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %643, i32 1, i32 31), !dbg !69
  %645 = bitcast i32 %644 to float, !dbg !69
  %646 = fadd float %642, %645, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %536, float %646, i1 %534) #3, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %647 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %539, i1 %537) #3, !dbg !69
  %648 = bitcast float %647 to i32, !dbg !69
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %648, i32 4, i32 31), !dbg !69
  %650 = bitcast i32 %649 to float, !dbg !69
  %651 = fadd float %647, %650, !dbg !71
  %652 = bitcast float %651 to i32, !dbg !69
  %653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 2, i32 31), !dbg !69
  %654 = bitcast i32 %653 to float, !dbg !69
  %655 = fadd float %651, %654, !dbg !71
  %656 = bitcast float %655 to i32, !dbg !69
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 1, i32 31), !dbg !69
  %658 = bitcast i32 %657 to float, !dbg !69
  %659 = fadd float %655, %658, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, float %659, i1 %555) #3, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %660 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !69
  %661 = getelementptr float, ptr addrspace(1) %12, i64 %27, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %660, ptr addrspace(1) %661, i1 %561) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cvvzq4ujm2jska5zzcbwn7dt5zyqheaskuqysxwcfrbkfntklusj.py", directory: "/tmp/torchinductor_zeus/vv")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de14de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 26, column: 30, scope: !5)
!12 = !DILocation(line: 26, column: 35, scope: !5)
!13 = !DILocation(line: 34, column: 45, scope: !5)
!14 = !DILocation(line: 34, column: 40, scope: !5)
!15 = !DILocation(line: 34, column: 34, scope: !5)
!16 = !DILocation(line: 34, column: 51, scope: !5)
!17 = !DILocation(line: 34, column: 111, scope: !5)
!18 = !DILocation(line: 35, column: 34, scope: !5)
!19 = !DILocation(line: 35, column: 51, scope: !5)
!20 = !DILocation(line: 35, column: 111, scope: !5)
!21 = !DILocation(line: 36, column: 34, scope: !5)
!22 = !DILocation(line: 36, column: 51, scope: !5)
!23 = !DILocation(line: 36, column: 111, scope: !5)
!24 = !DILocation(line: 37, column: 34, scope: !5)
!25 = !DILocation(line: 37, column: 39, scope: !5)
!26 = !DILocation(line: 38, column: 35, scope: !5)
!27 = !DILocation(line: 38, column: 52, scope: !5)
!28 = !DILocation(line: 39, column: 35, scope: !5)
!29 = !DILocation(line: 40, column: 35, scope: !5)
!30 = !DILocation(line: 41, column: 35, scope: !5)
!31 = !DILocation(line: 42, column: 35, scope: !5)
!32 = !DILocation(line: 45, column: 22, scope: !5)
!33 = !DILocation(line: 47, column: 22, scope: !5)
!34 = !DILocation(line: 49, column: 23, scope: !5)
!35 = !DILocation(line: 50, column: 23, scope: !5)
!36 = !DILocation(line: 39, column: 40, scope: !5)
!37 = !DILocation(line: 40, column: 52, scope: !5)
!38 = !DILocation(line: 40, column: 112, scope: !5)
!39 = !DILocation(line: 41, column: 40, scope: !5)
!40 = !DILocation(line: 42, column: 52, scope: !5)
!41 = !DILocation(line: 53, column: 24, scope: !5)
!42 = !DILocation(line: 54, column: 24, scope: !5)
!43 = !DILocation(line: 55, column: 23, scope: !5)
!44 = !DILocation(line: 57, column: 25, scope: !5)
!45 = !DILocation(line: 60, column: 24, scope: !5)
!46 = !DILocation(line: 61, column: 24, scope: !5)
!47 = !DILocation(line: 63, column: 25, scope: !5)
!48 = !DILocation(line: 65, column: 24, scope: !5)
!49 = !DILocation(line: 67, column: 25, scope: !5)
!50 = !DILocation(line: 243, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !5, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!53 = !DILocation(line: 69, column: 27, scope: !51)
!54 = !DILocation(line: 233, column: 15, scope: !55, inlinedAt: !56)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 243, column: 36, scope: !55, inlinedAt: !57)
!57 = !DILocation(line: 69, column: 27, scope: !55)
!58 = !DILocation(line: 69, column: 30, scope: !5)
!59 = !DILocation(line: 70, column: 25, scope: !5)
!60 = !DILocation(line: 70, column: 37, scope: !5)
!61 = !DILocation(line: 243, column: 36, scope: !51, inlinedAt: !62)
!62 = !DILocation(line: 71, column: 27, scope: !51)
!63 = !DILocation(line: 233, column: 15, scope: !55, inlinedAt: !64)
!64 = !DILocation(line: 243, column: 36, scope: !55, inlinedAt: !65)
!65 = !DILocation(line: 71, column: 27, scope: !55)
!66 = !DILocation(line: 71, column: 30, scope: !5)
!67 = !DILocation(line: 72, column: 25, scope: !5)
!68 = !DILocation(line: 72, column: 37, scope: !5)
!69 = !DILocation(line: 243, column: 36, scope: !51, inlinedAt: !70)
!70 = !DILocation(line: 73, column: 27, scope: !51)
!71 = !DILocation(line: 233, column: 15, scope: !55, inlinedAt: !72)
!72 = !DILocation(line: 243, column: 36, scope: !55, inlinedAt: !73)
!73 = !DILocation(line: 73, column: 27, scope: !55)
!74 = !DILocation(line: 74, column: 25, scope: !5)
!75 = !DILocation(line: 74, column: 37, scope: !5)
!76 = !DILocation(line: 74, column: 4, scope: !5)
