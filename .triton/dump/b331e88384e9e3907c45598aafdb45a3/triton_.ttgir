#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [8], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<256> : tensor<512xi32, #blocked>
    %cst_0 = arith.constant dense<8192> : tensor<512xi32, #blocked>
    %cst_1 = arith.constant dense<2097152> : tensor<512xi32, #blocked>
    %cst_2 = arith.constant dense<16> : tensor<512xi32, #blocked>
    %cst_3 = arith.constant dense<33554432> : tensor<512xi32, #blocked>
    %cst_4 = arith.constant dense<256> : tensor<512xi64, #blocked>
    %cst_5 = arith.constant dense<2> : tensor<512xi32, #blocked>
    %cst_6 = arith.constant dense<1024> : tensor<512xi32, #blocked>
    %cst_7 = arith.constant dense<67108864> : tensor<512xi32, #blocked>
    %cst_8 = arith.constant dense<384> : tensor<512xi32, #blocked>
    %cst_9 = arith.constant dense<640> : tensor<512xi32, #blocked>
    %cst_10 = arith.constant dense<512> : tensor<512xi32, #blocked>
    %cst_11 = arith.constant dense<-128> : tensor<512xi32, #blocked>
    %cst_12 = arith.constant dense<128> : tensor<512xi32, #blocked>
    %cst_13 = arith.constant dense<128> : tensor<512xi64, #blocked>
    %cst_14 = arith.constant dense<0.000000e+00> : tensor<512xf32, #blocked>
    %cst_15 = arith.constant dense<0.000000e+00> : tensor<512xbf16, #blocked>
    %c512_i32 = arith.constant 512 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c512_i32 : i32
    %2 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<512xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<512xi32, #blocked>
    %5 = arith.remsi %4, %cst : tensor<512xi32, #blocked>
    %6 = arith.divsi %4, %cst : tensor<512xi32, #blocked>
    %7 = arith.remsi %6, %cst_0 : tensor<512xi32, #blocked>
    %8 = arith.divsi %4, %cst_1 : tensor<512xi32, #blocked>
    %9 = arith.remsi %8, %cst_2 : tensor<512xi32, #blocked>
    %10 = arith.divsi %4, %cst_3 : tensor<512xi32, #blocked>
    %11 = arith.remsi %4, %cst_1 : tensor<512xi32, #blocked>
    %12 = arith.extsi %5 : tensor<512xi32, #blocked> to tensor<512xi64, #blocked>
    %13 = arith.cmpi slt, %12, %cst_4 : tensor<512xi64, #blocked>
    %14 = arith.remsi %9, %cst_5 : tensor<512xi32, #blocked>
    %15 = arith.muli %14, %cst : tensor<512xi32, #blocked>
    %16 = arith.addi %5, %15 : tensor<512xi32, #blocked>
    %17 = arith.divsi %9, %cst_5 : tensor<512xi32, #blocked>
    %18 = arith.muli %17, %cst_6 : tensor<512xi32, #blocked>
    %19 = arith.addi %16, %18 : tensor<512xi32, #blocked>
    %20 = arith.muli %7, %cst_0 : tensor<512xi32, #blocked>
    %21 = arith.addi %19, %20 : tensor<512xi32, #blocked>
    %22 = arith.muli %10, %cst_7 : tensor<512xi32, #blocked>
    %23 = arith.addi %21, %22 : tensor<512xi32, #blocked>
    %24 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %25 = tt.addptr %24, %23 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %26 = tt.load %25, %13, %cst_15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %27 = arith.extf %26 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %28 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %29 = tt.addptr %28, %11 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi32, #blocked>
    %30 = tt.load %29, %13, %cst_14 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %31 = arith.mulf %27, %30 : tensor<512xf32, #blocked>
    %32 = arith.cmpi slt, %12, %cst_13 : tensor<512xi64, #blocked>
    %33 = arith.andi %32, %13 : tensor<512xi1, #blocked>
    %34 = arith.addi %5, %cst_12 : tensor<512xi32, #blocked>
    %35 = arith.addi %34, %15 : tensor<512xi32, #blocked>
    %36 = arith.addi %35, %18 : tensor<512xi32, #blocked>
    %37 = arith.addi %36, %20 : tensor<512xi32, #blocked>
    %38 = arith.addi %37, %22 : tensor<512xi32, #blocked>
    %39 = tt.addptr %24, %38 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %40 = tt.load %39, %33, %cst_15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %41 = arith.extf %40 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %42 = arith.subf %cst_14, %41 : tensor<512xf32, #blocked>
    %43 = arith.select %33, %42, %cst_14 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %44 = arith.cmpi sge, %12, %cst_13 : tensor<512xi64, #blocked>
    %45 = arith.andi %44, %13 : tensor<512xi1, #blocked>
    %46 = arith.addi %5, %cst_11 : tensor<512xi32, #blocked>
    %47 = arith.addi %46, %15 : tensor<512xi32, #blocked>
    %48 = arith.addi %47, %18 : tensor<512xi32, #blocked>
    %49 = arith.addi %48, %20 : tensor<512xi32, #blocked>
    %50 = arith.addi %49, %22 : tensor<512xi32, #blocked>
    %51 = tt.addptr %24, %50 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %52 = tt.load %51, %45, %cst_15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %53 = arith.extf %52 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %54 = arith.select %45, %53, %cst_14 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %55 = arith.select %32, %43, %54 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %56 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<512x!tt.ptr<f32, 1>, #blocked>
    %57 = tt.addptr %56, %11 : tensor<512x!tt.ptr<f32, 1>, #blocked>, tensor<512xi32, #blocked>
    %58 = tt.load %57, %13, %cst_14 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<512xf32, #blocked>
    %59 = arith.mulf %55, %58 : tensor<512xf32, #blocked>
    %60 = arith.addf %31, %59 : tensor<512xf32, #blocked>
    %61 = arith.cmpi sge, %12, %cst_4 : tensor<512xi64, #blocked>
    %62 = tt.load %25, %61, %cst_15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %63 = arith.extf %62 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %64 = arith.select %61, %63, %cst_14 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %65 = arith.select %13, %60, %64 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %66 = arith.addi %5, %cst_10 : tensor<512xi32, #blocked>
    %67 = arith.addi %66, %18 : tensor<512xi32, #blocked>
    %68 = arith.addi %67, %20 : tensor<512xi32, #blocked>
    %69 = arith.addi %68, %22 : tensor<512xi32, #blocked>
    %70 = tt.addptr %24, %69 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %71 = tt.load %70, %13, %cst_15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %72 = arith.extf %71 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %73 = arith.mulf %72, %30 : tensor<512xf32, #blocked>
    %74 = arith.addi %5, %cst_9 : tensor<512xi32, #blocked>
    %75 = arith.addi %74, %18 : tensor<512xi32, #blocked>
    %76 = arith.addi %75, %20 : tensor<512xi32, #blocked>
    %77 = arith.addi %76, %22 : tensor<512xi32, #blocked>
    %78 = tt.addptr %24, %77 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %79 = tt.load %78, %33, %cst_15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %80 = arith.extf %79 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %81 = arith.subf %cst_14, %80 : tensor<512xf32, #blocked>
    %82 = arith.select %33, %81, %cst_14 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %83 = arith.addi %5, %cst_8 : tensor<512xi32, #blocked>
    %84 = arith.addi %83, %18 : tensor<512xi32, #blocked>
    %85 = arith.addi %84, %20 : tensor<512xi32, #blocked>
    %86 = arith.addi %85, %22 : tensor<512xi32, #blocked>
    %87 = tt.addptr %24, %86 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %88 = tt.load %87, %45, %cst_15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %89 = arith.extf %88 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %90 = arith.select %45, %89, %cst_14 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %91 = arith.select %32, %82, %90 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %92 = arith.mulf %91, %58 : tensor<512xf32, #blocked>
    %93 = arith.addf %73, %92 : tensor<512xf32, #blocked>
    %94 = tt.load %70, %61, %cst_15 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %95 = arith.extf %94 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %96 = arith.select %61, %95, %cst_14 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %97 = arith.select %13, %93, %96 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %98 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %99 = tt.addptr %98, %4 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %100 = arith.truncf %65 : tensor<512xf32, #blocked> to tensor<512xbf16, #blocked>
    tt.store %99, %100 {cache = 1 : i32, evict = 1 : i32} : tensor<512xbf16, #blocked>
    %101 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %102 = tt.addptr %101, %4 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %103 = arith.truncf %97 : tensor<512xf32, #blocked> to tensor<512xbf16, #blocked>
    tt.store %102, %103 {cache = 1 : i32, evict = 1 : i32} : tensor<512xbf16, #blocked>
    tt.return
  }
}
