; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_1 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_1 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_1 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp13 < 288256"
@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d45de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = lshr i32 %7, 5, !dbg !10
  %9 = and i32 %8, 3, !dbg !10
  %10 = and i32 %7, 3, !dbg !10
  %11 = shl i32 %7, 2, !dbg !11
  %12 = and i32 %11, 124, !dbg !11
  %urem = and i32 %7, 127, !dbg !11
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !12
  %.fr17 = freeze i32 %13, !dbg !13
  %14 = shl i32 %.fr17, 2, !dbg !13
  %15 = or i32 %14, %9, !dbg !14
  %16 = or i32 %14, %10, !dbg !14
  %17 = icmp slt i32 %15, 4, !dbg !15
  %18 = icmp slt i32 %16, 4, !dbg !15
  %19 = sext i32 %15 to i64, !dbg !16
  %20 = getelementptr i64, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = sext i32 %16 to i64, !dbg !16
  %22 = getelementptr i64, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %17) #6, !dbg !17
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %17) #6, !dbg !17
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %17) #6, !dbg !17
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %17) #6, !dbg !17
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %18) #6, !dbg !17
  %28 = add i64 %23, 288256, !dbg !18
  %29 = add i64 %27, 288256, !dbg !18
  %30 = icmp slt i64 %23, 0, !dbg !19
  %31 = icmp slt i64 %27, 0, !dbg !19
  %32 = select i1 %30, i64 %28, i64 %23, !dbg !20
  %33 = select i1 %31, i64 %29, i64 %27, !dbg !20
  %34 = icmp ugt i64 %33, 288255, !dbg !21
  %.not2 = and i1 %18, %34, !dbg !22
  %35 = mul i64 %32, 2304, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35
  br i1 %.not2, label %.split.us.preheader, label %.split, !dbg !23

.split.us.preheader:                              ; preds = %6
  %37 = insertelement <4 x i1> poison, i1 %17, i64 0
  %38 = shufflevector <4 x i1> %37, <4 x i1> poison, <4 x i32> zeroinitializer
  br label %.split.us, !dbg !24

.split.us:                                        ; preds = %.split.us.preheader, %.split.us
  %39 = phi i32 [ %58, %.split.us ], [ 0, %.split.us.preheader ]
  %40 = phi <4 x float> [ %57, %.split.us ], [ zeroinitializer, %.split.us.preheader ]
  %41 = or i32 %39, %12, !dbg !25
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  %42 = zext nneg i32 %41 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %36, i64 %42, !dbg !27
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #6, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !28
  %49 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !28
  %50 = insertelement <4 x i32> %49, i32 %46, i64 1, !dbg !28
  %51 = insertelement <4 x i32> %50, i32 %47, i64 2, !dbg !28
  %52 = insertelement <4 x i32> %51, i32 %48, i64 3, !dbg !28
  %53 = bitcast <4 x i32> %52 to <4 x float>, !dbg !28
  %54 = fmul <4 x float> %53, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !29
  %55 = fmul <4 x float> %54, %54, !dbg !30
  %56 = select <4 x i1> %38, <4 x float> %55, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !31
  %57 = fadd <4 x float> %40, %56, !dbg !31
  %58 = add nuw nsw i32 %39, 128, !dbg !24
  %59 = icmp ult i32 %39, 2176, !dbg !24
  br i1 %59, label %.split.us, label %.split13.us, !dbg !24

.split:                                           ; preds = %6
  br i1 %17, label %.split.split, label %.split.split.us

.split.split.us:                                  ; preds = %.split
  %60 = zext nneg i32 %12 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %36, i64 %60, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %63 = or i32 %12, 128, !dbg !25
  %64 = zext nneg i32 %63 to i64, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %36, i64 %64, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %67 = or i32 %12, 256, !dbg !25
  %68 = zext nneg i32 %67 to i64, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %36, i64 %68, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %71 = or i32 %12, 384, !dbg !25
  %72 = zext nneg i32 %71 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %36, i64 %72, !dbg !27
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %75 = or i32 %12, 512, !dbg !25
  %76 = zext nneg i32 %75 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %36, i64 %76, !dbg !27
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %77, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %79 = or i32 %12, 640, !dbg !25
  %80 = zext nneg i32 %79 to i64, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %36, i64 %80, !dbg !27
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %83 = or i32 %12, 768, !dbg !25
  %84 = zext nneg i32 %83 to i64, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %36, i64 %84, !dbg !27
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %87 = or i32 %12, 896, !dbg !25
  %88 = zext nneg i32 %87 to i64, !dbg !26
  %89 = getelementptr float, ptr addrspace(1) %36, i64 %88, !dbg !27
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %91 = or i32 %12, 1024, !dbg !25
  %92 = zext nneg i32 %91 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %36, i64 %92, !dbg !27
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %95 = or i32 %12, 1152, !dbg !25
  %96 = zext nneg i32 %95 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %36, i64 %96, !dbg !27
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %99 = or i32 %12, 1280, !dbg !25
  %100 = zext nneg i32 %99 to i64, !dbg !26
  %101 = getelementptr float, ptr addrspace(1) %36, i64 %100, !dbg !27
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %103 = or i32 %12, 1408, !dbg !25
  %104 = zext nneg i32 %103 to i64, !dbg !26
  %105 = getelementptr float, ptr addrspace(1) %36, i64 %104, !dbg !27
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %107 = or i32 %12, 1536, !dbg !25
  %108 = zext nneg i32 %107 to i64, !dbg !26
  %109 = getelementptr float, ptr addrspace(1) %36, i64 %108, !dbg !27
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %111 = or i32 %12, 1664, !dbg !25
  %112 = zext nneg i32 %111 to i64, !dbg !26
  %113 = getelementptr float, ptr addrspace(1) %36, i64 %112, !dbg !27
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %115 = or i32 %12, 1792, !dbg !25
  %116 = zext nneg i32 %115 to i64, !dbg !26
  %117 = getelementptr float, ptr addrspace(1) %36, i64 %116, !dbg !27
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %119 = or i32 %12, 1920, !dbg !25
  %120 = zext nneg i32 %119 to i64, !dbg !26
  %121 = getelementptr float, ptr addrspace(1) %36, i64 %120, !dbg !27
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %123 = or i32 %12, 2048, !dbg !25
  %124 = zext nneg i32 %123 to i64, !dbg !26
  %125 = getelementptr float, ptr addrspace(1) %36, i64 %124, !dbg !27
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  %127 = or i32 %12, 2176, !dbg !25
  %128 = zext nneg i32 %127 to i64, !dbg !26
  %129 = getelementptr float, ptr addrspace(1) %36, i64 %128, !dbg !27
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !28
  br label %.split13.us, !dbg !32

.split.split:                                     ; preds = %.split, %.split.split
  %131 = phi i32 [ %149, %.split.split ], [ 0, %.split ]
  %132 = phi <4 x float> [ %148, %.split.split ], [ zeroinitializer, %.split ]
  %133 = or i32 %131, %12, !dbg !25
  %134 = zext nneg i32 %133 to i64, !dbg !26
  %135 = getelementptr float, ptr addrspace(1) %36, i64 %134, !dbg !27
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !28
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !28
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !28
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !28
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !28
  %141 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !28
  %142 = insertelement <4 x i32> %141, i32 %138, i64 1, !dbg !28
  %143 = insertelement <4 x i32> %142, i32 %139, i64 2, !dbg !28
  %144 = insertelement <4 x i32> %143, i32 %140, i64 3, !dbg !28
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !28
  %146 = fmul <4 x float> %145, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !29
  %147 = fmul <4 x float> %146, %146, !dbg !30
  %148 = fadd <4 x float> %132, %147, !dbg !31
  %149 = add nuw nsw i32 %131, 128, !dbg !24
  %150 = icmp ult i32 %131, 2176, !dbg !24
  br i1 %150, label %.split.split, label %.split13.us, !dbg !24

.split13.us:                                      ; preds = %.split.split, %.split.us, %.split.split.us
  %151 = phi <4 x float> [ zeroinitializer, %.split.split.us ], [ %57, %.split.us ], [ %148, %.split.split ]
  %shift = shufflevector <4 x float> %151, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !32
  %152 = fadd <4 x float> %151, %shift, !dbg !32
  %shift35 = shufflevector <4 x float> %151, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !32
  %153 = fadd <4 x float> %shift35, %152, !dbg !32
  %shift36 = shufflevector <4 x float> %151, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !32
  %154 = fadd <4 x float> %shift36, %153, !dbg !32
  %155 = extractelement <4 x float> %154, i64 0, !dbg !32
  %156 = bitcast float %155 to i32, !dbg !38
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 16, i32 31), !dbg !38
  %158 = bitcast i32 %157 to float, !dbg !38
  %159 = fadd float %155, %158, !dbg !32
  %160 = bitcast float %159 to i32, !dbg !38
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 8, i32 31), !dbg !38
  %162 = bitcast i32 %161 to float, !dbg !38
  %163 = fadd float %159, %162, !dbg !32
  %164 = bitcast float %163 to i32, !dbg !38
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 4, i32 31), !dbg !38
  %166 = bitcast i32 %165 to float, !dbg !38
  %167 = fadd float %163, %166, !dbg !32
  %168 = bitcast float %167 to i32, !dbg !38
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !38
  %170 = bitcast i32 %169 to float, !dbg !38
  %171 = fadd float %167, %170, !dbg !32
  %172 = bitcast float %171 to i32, !dbg !38
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 1, i32 31), !dbg !38
  %174 = bitcast i32 %173 to float, !dbg !38
  %175 = fadd float %171, %174, !dbg !32
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 2.304000e+03) #6, !dbg !40
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 2.304000e+03) #6, !dbg !40
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 2.304000e+03) #6, !dbg !40
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 2.304000e+03) #6, !dbg !40
  %180 = fadd float %176, 0x3EE4F8B580000000, !dbg !41
  %181 = mul i32 %15, 2304, !dbg !42
  %182 = zext nneg i32 %urem to i64
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i64 %182
  %184 = zext nneg i32 %12 to i64
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i64 %184
  %186 = getelementptr inbounds <4 x float>, ptr addrspace(3) %185, i64 0, i64 1
  %187 = getelementptr inbounds <4 x float>, ptr addrspace(3) %185, i64 0, i64 2
  %188 = getelementptr inbounds <4 x float>, ptr addrspace(3) %185, i64 0, i64 3
  br label %189, !dbg !43

189:                                              ; preds = %.split13.us, %__nv_rsqrtf.exit
  %190 = phi i32 [ 0, %.split13.us ], [ %249, %__nv_rsqrtf.exit ]
  %191 = or i32 %190, %12, !dbg !44
  %192 = or i32 %190, %urem, !dbg !44
  %193 = zext nneg i32 %192 to i64, !dbg !45
  %194 = getelementptr float, ptr addrspace(1) %2, i64 %193, !dbg !45
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 true, i32 0, i1 true) #6, !dbg !46
  %196 = bitcast i32 %195 to float, !dbg !46
  br i1 %.not2, label %197, label %198, !dbg !47

197:                                              ; preds = %189
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 883, ptr nonnull @assertFunc_1, i64 1), !dbg !47
  br label %198, !dbg !47

198:                                              ; preds = %197, %189
  %199 = zext nneg i32 %191 to i64, !dbg !48
  %200 = getelementptr float, ptr addrspace(1) %36, i64 %199, !dbg !49
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #6, !dbg !50
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !50
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !50
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !50
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !50
  %206 = bitcast i32 %202 to float, !dbg !50
  %207 = bitcast i32 %203 to float, !dbg !50
  %208 = bitcast i32 %204 to float, !dbg !50
  %209 = bitcast i32 %205 to float, !dbg !50
  %210 = fmul float %206, 4.800000e+01, !dbg !51
  %211 = fmul float %207, 4.800000e+01, !dbg !51
  %212 = fmul float %208, 4.800000e+01, !dbg !51
  %213 = fmul float %209, 4.800000e+01, !dbg !51
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !52
  %.not.i = icmp eq i32 %214, 0, !dbg !52
  br i1 %.not.i, label %217, label %215, !dbg !52

215:                                              ; preds = %198
  %216 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %180), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

217:                                              ; preds = %198
  %218 = tail call float @llvm.nvvm.rsqrt.approx.f(float %180), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

__nv_rsqrtf.exit:                                 ; preds = %215, %217
  %.0.i = phi float [ %216, %215 ], [ %218, %217 ], !dbg !52
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !52
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !52
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !52
  %222 = fmul float %210, %.0.i, !dbg !53
  %223 = fmul float %211, %.0.i, !dbg !53
  %224 = fmul float %212, %.0.i, !dbg !53
  %225 = fmul float %213, %.0.i, !dbg !53
  %226 = fadd float %196, 1.000000e+00, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %227 = insertelement <1 x float> undef, float %226, i64 0, !dbg !55
  store <1 x float> %227, ptr addrspace(3) %183, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %228 = load float, ptr addrspace(3) %185, align 16, !dbg !55
  %229 = load float, ptr addrspace(3) %186, align 4, !dbg !55
  %230 = load float, ptr addrspace(3) %187, align 8, !dbg !55
  %231 = load float, ptr addrspace(3) %188, align 4, !dbg !55
  %232 = fmul float %222, %228, !dbg !55
  %233 = fmul float %223, %229, !dbg !55
  %234 = fmul float %224, %230, !dbg !55
  %235 = fmul float %225, %231, !dbg !55
  %236 = add i32 %191, %181, !dbg !56
  %237 = sext i32 %236 to i64, !dbg !57
  %238 = getelementptr i16, ptr addrspace(1) %3, i64 %237, !dbg !57
  %239 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %232) #6, !dbg !58
  %240 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %233) #6, !dbg !58
  %241 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %234) #6, !dbg !58
  %242 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %235) #6, !dbg !58
  %243 = insertelement <2 x i16> undef, i16 %239, i64 0, !dbg !58
  %244 = insertelement <2 x i16> %243, i16 %240, i64 1, !dbg !58
  %245 = bitcast <2 x i16> %244 to i32, !dbg !58
  %246 = insertelement <2 x i16> undef, i16 %241, i64 0, !dbg !58
  %247 = insertelement <2 x i16> %246, i16 %242, i64 1, !dbg !58
  %248 = bitcast <2 x i16> %247 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %245, i32 %248, ptr addrspace(1) %238, i1 %17) #6, !dbg !58
  %249 = add nuw nsw i32 %190, 128, !dbg !43
  %250 = icmp ult i32 %190, 2176, !dbg !43
  br i1 %250, label %189, label %251, !dbg !43

251:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cbc6pweon6mczytveh5urbq7gpgbvt5eq2vg2chiiag42zvj7t77.py", directory: "/tmp/torchinductor_zeus/bc")
!4 = !{ptr @triton__0d1d2d3d45de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d45de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d45de", linkageName: "triton__0d1d2d3d45de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 44, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 28, scope: !7)
!13 = !DILocation(line: 21, column: 33, scope: !7)
!14 = !DILocation(line: 22, column: 23, scope: !7)
!15 = !DILocation(line: 23, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 22, scope: !7)
!19 = !DILocation(line: 33, column: 22, scope: !7)
!20 = !DILocation(line: 34, column: 36, scope: !7)
!21 = !DILocation(line: 35, column: 41, scope: !7)
!22 = !DILocation(line: 36, column: 45, scope: !7)
!23 = !DILocation(line: 35, column: 67, scope: !7)
!24 = !DILocation(line: 28, column: 36, scope: !7)
!25 = !DILocation(line: 29, column: 27, scope: !7)
!26 = !DILocation(line: 36, column: 40, scope: !7)
!27 = !DILocation(line: 36, column: 34, scope: !7)
!28 = !DILocation(line: 36, column: 53, scope: !7)
!29 = !DILocation(line: 38, column: 22, scope: !7)
!30 = !DILocation(line: 39, column: 22, scope: !7)
!31 = !DILocation(line: 42, column: 47, scope: !7)
!32 = !DILocation(line: 233, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 243, column: 36, scope: !33, inlinedAt: !37)
!37 = !DILocation(line: 43, column: 25, scope: !33)
!38 = !DILocation(line: 243, column: 36, scope: !35, inlinedAt: !39)
!39 = !DILocation(line: 43, column: 25, scope: !35)
!40 = !DILocation(line: 57, column: 23, scope: !7)
!41 = !DILocation(line: 59, column: 24, scope: !7)
!42 = !DILocation(line: 66, column: 40, scope: !7)
!43 = !DILocation(line: 44, column: 36, scope: !7)
!44 = !DILocation(line: 45, column: 27, scope: !7)
!45 = !DILocation(line: 48, column: 35, scope: !7)
!46 = !DILocation(line: 48, column: 40, scope: !7)
!47 = !DILocation(line: 52, column: 69, scope: !7)
!48 = !DILocation(line: 53, column: 41, scope: !7)
!49 = !DILocation(line: 53, column: 35, scope: !7)
!50 = !DILocation(line: 53, column: 55, scope: !7)
!51 = !DILocation(line: 55, column: 24, scope: !7)
!52 = !DILocation(line: 60, column: 30, scope: !7)
!53 = !DILocation(line: 61, column: 24, scope: !7)
!54 = !DILocation(line: 63, column: 24, scope: !7)
!55 = !DILocation(line: 64, column: 24, scope: !7)
!56 = !DILocation(line: 66, column: 35, scope: !7)
!57 = !DILocation(line: 66, column: 29, scope: !7)
!58 = !DILocation(line: 66, column: 53, scope: !7)
!59 = !DILocation(line: 44, column: 4, scope: !7)
