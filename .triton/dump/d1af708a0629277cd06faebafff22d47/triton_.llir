; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5de6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %urem = and i32 %8, 255, !dbg !10
  %9 = shl nuw nsw i32 %urem, 2, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %11 = mul i32 %10, 2304, !dbg !12
  %12 = lshr i32 %8, 5, !dbg !10
  %13 = add i32 %9, %11, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr i16, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !15
  %19 = trunc i32 %17 to i16, !dbg !15
  %extelt.offset3 = lshr i32 %17, 16, !dbg !15
  %20 = trunc i32 %extelt.offset3 to i16, !dbg !15
  %21 = trunc i32 %18 to i16, !dbg !15
  %extelt.offset4 = lshr i32 %18, 16, !dbg !15
  %22 = trunc i32 %extelt.offset4 to i16, !dbg !15
  %23 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #6, !dbg !16
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #6, !dbg !16
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #6, !dbg !16
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #6, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %33 = zext nneg i32 %9 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %40 = insertelement <4 x i32> poison, i32 %29, i64 0, !dbg !18
  %41 = insertelement <4 x i32> %40, i32 %30, i64 1, !dbg !18
  %42 = insertelement <4 x i32> %41, i32 %31, i64 2, !dbg !18
  %43 = insertelement <4 x i32> %42, i32 %32, i64 3, !dbg !18
  %44 = bitcast <4 x i32> %43 to <4 x float>, !dbg !18
  %45 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !20
  %46 = insertelement <4 x i32> %45, i32 %37, i64 1, !dbg !20
  %47 = insertelement <4 x i32> %46, i32 %38, i64 2, !dbg !20
  %48 = insertelement <4 x i32> %47, i32 %39, i64 3, !dbg !20
  %49 = bitcast <4 x i32> %48 to <4 x float>, !dbg !20
  %50 = fadd <4 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %51 = fmul <4 x float> %50, %44, !dbg !22
  %52 = insertelement <8 x float> poison, float %23, i64 0, !dbg !23
  %53 = insertelement <8 x float> %52, float %24, i64 1, !dbg !23
  %54 = insertelement <8 x float> %53, float %25, i64 2, !dbg !23
  %55 = insertelement <8 x float> %54, float %26, i64 3, !dbg !23
  %56 = shufflevector <8 x float> %55, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !23
  %57 = shufflevector <4 x float> %51, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %58 = shufflevector <8 x float> %57, <8 x float> %56, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !23
  %59 = fmul <8 x float> %56, %58, !dbg !23
  %60 = fadd <8 x float> %59, zeroinitializer, !dbg !24
  %61 = or i32 %9, 1024, !dbg !25
  %62 = add i32 %61, %11, !dbg !13
  %63 = sext i32 %62 to i64, !dbg !14
  %64 = getelementptr i16, ptr addrspace(1) %0, i64 %63, !dbg !14
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !15
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !15
  %68 = trunc i32 %66 to i16, !dbg !15
  %extelt.offset3.1 = lshr i32 %66, 16, !dbg !15
  %69 = trunc i32 %extelt.offset3.1 to i16, !dbg !15
  %70 = trunc i32 %67 to i16, !dbg !15
  %extelt.offset4.1 = lshr i32 %67, 16, !dbg !15
  %71 = trunc i32 %extelt.offset4.1 to i16, !dbg !15
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #6, !dbg !16
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #6, !dbg !16
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #6, !dbg !16
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #6, !dbg !16
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !17
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !18
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !18
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !18
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !18
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !18
  %82 = zext nneg i32 %61 to i64, !dbg !19
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !19
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !20
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !20
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !20
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !20
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !20
  %89 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !18
  %90 = insertelement <4 x i32> %89, i32 %79, i64 1, !dbg !18
  %91 = insertelement <4 x i32> %90, i32 %80, i64 2, !dbg !18
  %92 = insertelement <4 x i32> %91, i32 %81, i64 3, !dbg !18
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !18
  %94 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !20
  %95 = insertelement <4 x i32> %94, i32 %86, i64 1, !dbg !20
  %96 = insertelement <4 x i32> %95, i32 %87, i64 2, !dbg !20
  %97 = insertelement <4 x i32> %96, i32 %88, i64 3, !dbg !20
  %98 = bitcast <4 x i32> %97 to <4 x float>, !dbg !20
  %99 = fadd <4 x float> %98, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %100 = fmul <4 x float> %99, %93, !dbg !22
  %101 = insertelement <8 x float> poison, float %72, i64 0, !dbg !23
  %102 = insertelement <8 x float> %101, float %73, i64 1, !dbg !23
  %103 = insertelement <8 x float> %102, float %74, i64 2, !dbg !23
  %104 = insertelement <8 x float> %103, float %75, i64 3, !dbg !23
  %105 = shufflevector <8 x float> %104, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !23
  %106 = shufflevector <4 x float> %100, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %107 = shufflevector <8 x float> %106, <8 x float> %105, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !23
  %108 = fmul <8 x float> %105, %107, !dbg !23
  %109 = fadd <8 x float> %60, %108, !dbg !24
  %110 = or i32 %9, 2048, !dbg !25
  %111 = icmp ult i32 %110, 2304, !dbg !26
  %112 = add i32 %110, %11, !dbg !13
  %113 = sext i32 %112 to i64, !dbg !14
  %114 = getelementptr i16, ptr addrspace(1) %0, i64 %113, !dbg !14
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %114, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #6, !dbg !15
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !15
  %117 = extractvalue { i32, i32 } %115, 1, !dbg !15
  %118 = trunc i32 %116 to i16, !dbg !15
  %extelt.offset3.2 = lshr i32 %116, 16, !dbg !15
  %119 = trunc i32 %extelt.offset3.2 to i16, !dbg !15
  %120 = trunc i32 %117 to i16, !dbg !15
  %extelt.offset4.2 = lshr i32 %117, 16, !dbg !15
  %121 = trunc i32 %extelt.offset4.2 to i16, !dbg !15
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #6, !dbg !16
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #6, !dbg !16
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #6, !dbg !16
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #6, !dbg !16
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !17
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #6, !dbg !18
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !18
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !18
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !18
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !18
  %132 = zext nneg i32 %110 to i64, !dbg !19
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !19
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %133, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #6, !dbg !20
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !20
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !20
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !20
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !20
  %139 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !18
  %140 = insertelement <4 x i32> %139, i32 %129, i64 1, !dbg !18
  %141 = insertelement <4 x i32> %140, i32 %130, i64 2, !dbg !18
  %142 = insertelement <4 x i32> %141, i32 %131, i64 3, !dbg !18
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !18
  %144 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !20
  %145 = insertelement <4 x i32> %144, i32 %136, i64 1, !dbg !20
  %146 = insertelement <4 x i32> %145, i32 %137, i64 2, !dbg !20
  %147 = insertelement <4 x i32> %146, i32 %138, i64 3, !dbg !20
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !20
  %149 = fadd <4 x float> %148, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !21
  %150 = fmul <4 x float> %149, %143, !dbg !22
  %151 = insertelement <8 x float> poison, float %122, i64 0, !dbg !23
  %152 = insertelement <8 x float> %151, float %123, i64 1, !dbg !23
  %153 = insertelement <8 x float> %152, float %124, i64 2, !dbg !23
  %154 = insertelement <8 x float> %153, float %125, i64 3, !dbg !23
  %155 = shufflevector <8 x float> %154, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !23
  %156 = shufflevector <4 x float> %150, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %157 = shufflevector <8 x float> %156, <8 x float> %155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !23
  %158 = fmul <8 x float> %155, %157, !dbg !23
  %159 = insertelement <8 x i1> poison, i1 %111, i64 0, !dbg !24
  %160 = shufflevector <8 x i1> %159, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !24
  %161 = select <8 x i1> %160, <8 x float> %158, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !24
  %162 = fadd <8 x float> %109, %161, !dbg !24
  %163 = and i32 %8, 31, !dbg !10
  %164 = and i32 %12, 7, !dbg !10
  %shift = shufflevector <8 x float> %162, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !27
  %165 = fadd <8 x float> %162, %shift, !dbg !27
  %shift36 = shufflevector <8 x float> %162, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison>, !dbg !27
  %166 = fadd <8 x float> %shift36, %165, !dbg !27
  %shift37 = shufflevector <8 x float> %162, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison>, !dbg !27
  %167 = fadd <8 x float> %shift37, %166, !dbg !27
  %168 = extractelement <8 x float> %167, i64 4, !dbg !27
  %169 = bitcast float %168 to i32, !dbg !33
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 16, i32 31), !dbg !33
  %171 = bitcast i32 %170 to float, !dbg !33
  %172 = fadd float %168, %171, !dbg !27
  %173 = bitcast float %172 to i32, !dbg !33
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !33
  %175 = bitcast i32 %174 to float, !dbg !33
  %176 = fadd float %172, %175, !dbg !27
  %177 = bitcast float %176 to i32, !dbg !33
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 4, i32 31), !dbg !33
  %179 = bitcast i32 %178 to float, !dbg !33
  %180 = fadd float %176, %179, !dbg !27
  %181 = bitcast float %180 to i32, !dbg !33
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !33
  %183 = bitcast i32 %182 to float, !dbg !33
  %184 = fadd float %180, %183, !dbg !27
  %185 = bitcast float %184 to i32, !dbg !33
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 1, i32 31), !dbg !33
  %187 = bitcast i32 %186 to float, !dbg !33
  %188 = fadd float %184, %187, !dbg !27
  %189 = icmp eq i32 %163, 0, !dbg !33
  %190 = zext nneg i32 %164 to i64, !dbg !33
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i64 %190, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, float %188, i1 %189) #6, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %192 = icmp slt i32 %8, 8, !dbg !33
  %193 = sext i32 %8 to i64, !dbg !33
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i64 %193, !dbg !33
  %195 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %194, i1 %192) #6, !dbg !33
  %196 = bitcast float %195 to i32, !dbg !33
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 4, i32 31), !dbg !33
  %198 = bitcast i32 %197 to float, !dbg !33
  %199 = fadd float %195, %198, !dbg !27
  %200 = bitcast float %199 to i32, !dbg !33
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 2, i32 31), !dbg !33
  %202 = bitcast i32 %201 to float, !dbg !33
  %203 = fadd float %199, %202, !dbg !27
  %204 = bitcast float %203 to i32, !dbg !33
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !33
  %206 = bitcast i32 %205 to float, !dbg !33
  %207 = fadd float %203, %206, !dbg !27
  %208 = and i32 %8, 7, !dbg !33
  %209 = icmp eq i32 %208, 0, !dbg !33
  %210 = and i1 %192, %209, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, float %207, i1 %210) #6, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %211 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %212 = insertelement <1 x float> undef, float %211, i64 0, !dbg !35
  store <1 x float> %212, ptr addrspace(3) @global_smem, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %213 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !35
  %214 = sext i32 %10 to i64, !dbg !36
  %215 = getelementptr float, ptr addrspace(1) %3, i64 %214, !dbg !36
  %216 = icmp eq i32 %urem, 0, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %213, ptr addrspace(1) %215, i1 %216) #6, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %shift38 = shufflevector <8 x float> %162, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %217 = fadd <8 x float> %162, %shift38, !dbg !40
  %shift39 = shufflevector <8 x float> %162, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %218 = fadd <8 x float> %shift39, %217, !dbg !40
  %shift40 = shufflevector <8 x float> %162, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %219 = fadd <8 x float> %shift40, %218, !dbg !40
  %220 = extractelement <8 x float> %219, i64 0, !dbg !40
  %221 = bitcast float %220 to i32, !dbg !38
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 16, i32 31), !dbg !38
  %223 = bitcast i32 %222 to float, !dbg !38
  %224 = fadd float %220, %223, !dbg !40
  %225 = bitcast float %224 to i32, !dbg !38
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 8, i32 31), !dbg !38
  %227 = bitcast i32 %226 to float, !dbg !38
  %228 = fadd float %224, %227, !dbg !40
  %229 = bitcast float %228 to i32, !dbg !38
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 4, i32 31), !dbg !38
  %231 = bitcast i32 %230 to float, !dbg !38
  %232 = fadd float %228, %231, !dbg !40
  %233 = bitcast float %232 to i32, !dbg !38
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 2, i32 31), !dbg !38
  %235 = bitcast i32 %234 to float, !dbg !38
  %236 = fadd float %232, %235, !dbg !40
  %237 = bitcast float %236 to i32, !dbg !38
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 1, i32 31), !dbg !38
  %239 = bitcast i32 %238 to float, !dbg !38
  %240 = fadd float %236, %239, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, float %240, i1 %189) #6, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %241 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %194, i1 %192) #6, !dbg !38
  %242 = bitcast float %241 to i32, !dbg !38
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 4, i32 31), !dbg !38
  %244 = bitcast i32 %243 to float, !dbg !38
  %245 = fadd float %241, %244, !dbg !40
  %246 = bitcast float %245 to i32, !dbg !38
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 2, i32 31), !dbg !38
  %248 = bitcast i32 %247 to float, !dbg !38
  %249 = fadd float %245, %248, !dbg !40
  %250 = bitcast float %249 to i32, !dbg !38
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 1, i32 31), !dbg !38
  %252 = bitcast i32 %251 to float, !dbg !38
  %253 = fadd float %249, %252, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, float %253, i1 %210) #6, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %254 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !38
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float 2.304000e+03) #6, !dbg !43
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float 2.304000e+03) #6, !dbg !43
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float 2.304000e+03) #6, !dbg !43
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float 2.304000e+03) #6, !dbg !43
  %259 = fadd float %255, 0x3EE4F8B580000000, !dbg !44
  %260 = fadd float %256, 0x3EE4F8B580000000, !dbg !44
  %261 = fadd float %257, 0x3EE4F8B580000000, !dbg !44
  %262 = fadd float %258, 0x3EE4F8B580000000, !dbg !44
  %263 = fmul float %254, -5.000000e-01, !dbg !45
  br label %264, !dbg !46

264:                                              ; preds = %7, %__nv_rsqrtf.exit13
  %265 = phi i32 [ 0, %7 ], [ %374, %__nv_rsqrtf.exit13 ]
  %266 = or i32 %265, %9, !dbg !47
  %267 = icmp ult i32 %266, 2304, !dbg !48
  %268 = add i32 %266, %11, !dbg !49
  %269 = sext i32 %268 to i64, !dbg !50
  %270 = getelementptr float, ptr addrspace(1) %1, i64 %269, !dbg !50
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %270, i1 %267, i32 0, i1 %267, i32 0, i1 %267, i32 0, i1 %267, i32 0, i1 %267) #6, !dbg !51
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !51
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !51
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !51
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !51
  %276 = bitcast i32 %272 to float, !dbg !51
  %277 = bitcast i32 %273 to float, !dbg !51
  %278 = bitcast i32 %274 to float, !dbg !51
  %279 = bitcast i32 %275 to float, !dbg !51
  %280 = zext nneg i32 %266 to i64, !dbg !52
  %281 = getelementptr float, ptr addrspace(1) %2, i64 %280, !dbg !52
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %281, i1 %267, i32 0, i1 %267, i32 0, i1 %267, i32 0, i1 %267, i32 0, i1 %267) #6, !dbg !53
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !53
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !53
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !53
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !53
  %287 = bitcast i32 %283 to float, !dbg !53
  %288 = bitcast i32 %284 to float, !dbg !53
  %289 = bitcast i32 %285 to float, !dbg !53
  %290 = bitcast i32 %286 to float, !dbg !53
  %291 = getelementptr i16, ptr addrspace(1) %0, i64 %269, !dbg !54
  %292 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %291, i1 %267, i32 0, i1 %267, i32 0, i1 %267) #6, !dbg !55
  %293 = extractvalue { i32, i32 } %292, 0, !dbg !55
  %294 = extractvalue { i32, i32 } %292, 1, !dbg !55
  %295 = trunc i32 %293 to i16, !dbg !55
  %extelt.offset = lshr i32 %293, 16, !dbg !55
  %296 = trunc i32 %extelt.offset to i16, !dbg !55
  %297 = trunc i32 %294 to i16, !dbg !55
  %extelt.offset2 = lshr i32 %294, 16, !dbg !55
  %298 = trunc i32 %extelt.offset2 to i16, !dbg !55
  %299 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %295) #6, !dbg !56
  %300 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %296) #6, !dbg !56
  %301 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %297) #6, !dbg !56
  %302 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %298) #6, !dbg !56
  %303 = fadd float %287, 1.000000e+00, !dbg !57
  %304 = fadd float %288, 1.000000e+00, !dbg !57
  %305 = fadd float %289, 1.000000e+00, !dbg !57
  %306 = fadd float %290, 1.000000e+00, !dbg !57
  %307 = fmul float %303, %276, !dbg !58
  %308 = fmul float %304, %277, !dbg !58
  %309 = fmul float %305, %278, !dbg !58
  %310 = fmul float %306, %279, !dbg !58
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !59
  %.not.i = icmp eq i32 %311, 0, !dbg !59
  br i1 %.not.i, label %314, label %312, !dbg !59

312:                                              ; preds = %264
  %313 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %259), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

314:                                              ; preds = %264
  %315 = tail call float @llvm.nvvm.rsqrt.approx.f(float %259), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

__nv_rsqrtf.exit:                                 ; preds = %312, %314
  %.0.i = phi float [ %313, %312 ], [ %315, %314 ], !dbg !59
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !59
  %.not.i5 = icmp eq i32 %316, 0, !dbg !59
  br i1 %.not.i5, label %319, label %317, !dbg !59

317:                                              ; preds = %__nv_rsqrtf.exit
  %318 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %260), !dbg !59
  br label %__nv_rsqrtf.exit7, !dbg !59

319:                                              ; preds = %__nv_rsqrtf.exit
  %320 = tail call float @llvm.nvvm.rsqrt.approx.f(float %260), !dbg !59
  br label %__nv_rsqrtf.exit7, !dbg !59

__nv_rsqrtf.exit7:                                ; preds = %317, %319
  %.0.i6 = phi float [ %318, %317 ], [ %320, %319 ], !dbg !59
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !59
  %.not.i8 = icmp eq i32 %321, 0, !dbg !59
  br i1 %.not.i8, label %324, label %322, !dbg !59

322:                                              ; preds = %__nv_rsqrtf.exit7
  %323 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %261), !dbg !59
  br label %__nv_rsqrtf.exit10, !dbg !59

324:                                              ; preds = %__nv_rsqrtf.exit7
  %325 = tail call float @llvm.nvvm.rsqrt.approx.f(float %261), !dbg !59
  br label %__nv_rsqrtf.exit10, !dbg !59

__nv_rsqrtf.exit10:                               ; preds = %322, %324
  %.0.i9 = phi float [ %323, %322 ], [ %325, %324 ], !dbg !59
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !59
  %.not.i11 = icmp eq i32 %326, 0, !dbg !59
  br i1 %.not.i11, label %329, label %327, !dbg !59

327:                                              ; preds = %__nv_rsqrtf.exit10
  %328 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %262), !dbg !59
  br label %__nv_rsqrtf.exit13, !dbg !59

329:                                              ; preds = %__nv_rsqrtf.exit10
  %330 = tail call float @llvm.nvvm.rsqrt.approx.f(float %262), !dbg !59
  br label %__nv_rsqrtf.exit13, !dbg !59

__nv_rsqrtf.exit13:                               ; preds = %327, %329
  %.0.i12 = phi float [ %328, %327 ], [ %330, %329 ], !dbg !59
  %331 = fmul float %307, %.0.i, !dbg !60
  %332 = fmul float %308, %.0.i, !dbg !60
  %333 = fmul float %309, %.0.i, !dbg !60
  %334 = fmul float %310, %.0.i, !dbg !60
  %335 = fmul float %.0.i, %.0.i, !dbg !61
  %336 = fmul float %.0.i6, %.0.i6, !dbg !61
  %337 = fmul float %.0.i9, %.0.i9, !dbg !61
  %338 = fmul float %.0.i12, %.0.i12, !dbg !61
  %339 = fmul float %.0.i, %335, !dbg !62
  %340 = fmul float %.0.i6, %336, !dbg !62
  %341 = fmul float %.0.i9, %337, !dbg !62
  %342 = fmul float %.0.i12, %338, !dbg !62
  %343 = fmul float %263, %339, !dbg !63
  %344 = fmul float %263, %340, !dbg !63
  %345 = fmul float %263, %341, !dbg !63
  %346 = fmul float %263, %342, !dbg !63
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %343, float 2.304000e+03) #6, !dbg !64
  %348 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %344, float 2.304000e+03) #6, !dbg !64
  %349 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %345, float 2.304000e+03) #6, !dbg !64
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %346, float 2.304000e+03) #6, !dbg !64
  %351 = fmul float %299, %347, !dbg !65
  %352 = fmul float %300, %347, !dbg !65
  %353 = fmul float %301, %347, !dbg !65
  %354 = fmul float %302, %347, !dbg !65
  %355 = fadd float %331, %351, !dbg !66
  %356 = fadd float %332, %352, !dbg !66
  %357 = fadd float %333, %353, !dbg !66
  %358 = fadd float %334, %354, !dbg !66
  %359 = fadd float %351, %355, !dbg !67
  %360 = fadd float %352, %356, !dbg !67
  %361 = fadd float %353, %357, !dbg !67
  %362 = fadd float %354, %358, !dbg !67
  %363 = getelementptr i16, ptr addrspace(1) %4, i64 %269, !dbg !68
  %364 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %359) #6, !dbg !69
  %365 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %360) #6, !dbg !69
  %366 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %361) #6, !dbg !69
  %367 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %362) #6, !dbg !69
  %368 = insertelement <2 x i16> undef, i16 %364, i64 0, !dbg !69
  %369 = insertelement <2 x i16> %368, i16 %365, i64 1, !dbg !69
  %370 = bitcast <2 x i16> %369 to i32, !dbg !69
  %371 = insertelement <2 x i16> undef, i16 %366, i64 0, !dbg !69
  %372 = insertelement <2 x i16> %371, i16 %367, i64 1, !dbg !69
  %373 = bitcast <2 x i16> %372 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %370, i32 %373, ptr addrspace(1) %363, i1 %267) #6, !dbg !69
  %374 = add nuw nsw i32 %265, 1024, !dbg !46
  %375 = icmp ult i32 %265, 1280, !dbg !46
  br i1 %375, label %264, label %376, !dbg !46

376:                                              ; preds = %__nv_rsqrtf.exit13
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c2hu7eny6bp2ub6nzsgrg5eo5vhert3b2qdi2xe2ltmifldt5bzs.py", directory: "/tmp/torchinductor_zeus/2h")
!4 = !{ptr @triton__0d1d2d3d4d5de6de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5de6de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6de", linkageName: "triton__0d1d2d3d4d5de6de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 32, column: 45, scope: !7)
!13 = !DILocation(line: 32, column: 40, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 51, scope: !7)
!16 = !DILocation(line: 32, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 51, scope: !7)
!19 = !DILocation(line: 34, column: 34, scope: !7)
!20 = !DILocation(line: 34, column: 39, scope: !7)
!21 = !DILocation(line: 41, column: 22, scope: !7)
!22 = !DILocation(line: 42, column: 23, scope: !7)
!23 = !DILocation(line: 43, column: 24, scope: !7)
!24 = !DILocation(line: 46, column: 40, scope: !7)
!25 = !DILocation(line: 29, column: 27, scope: !7)
!26 = !DILocation(line: 30, column: 25, scope: !7)
!27 = !DILocation(line: 233, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !32)
!32 = !DILocation(line: 47, column: 25, scope: !28)
!33 = !DILocation(line: 243, column: 36, scope: !30, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 25, scope: !30)
!35 = !DILocation(line: 47, column: 28, scope: !7)
!36 = !DILocation(line: 48, column: 25, scope: !7)
!37 = !DILocation(line: 48, column: 36, scope: !7)
!38 = !DILocation(line: 243, column: 36, scope: !30, inlinedAt: !39)
!39 = !DILocation(line: 49, column: 27, scope: !30)
!40 = !DILocation(line: 233, column: 15, scope: !28, inlinedAt: !41)
!41 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !42)
!42 = !DILocation(line: 49, column: 27, scope: !28)
!43 = !DILocation(line: 61, column: 23, scope: !7)
!44 = !DILocation(line: 63, column: 24, scope: !7)
!45 = !DILocation(line: 67, column: 24, scope: !7)
!46 = !DILocation(line: 50, column: 36, scope: !7)
!47 = !DILocation(line: 51, column: 27, scope: !7)
!48 = !DILocation(line: 52, column: 25, scope: !7)
!49 = !DILocation(line: 54, column: 41, scope: !7)
!50 = !DILocation(line: 54, column: 35, scope: !7)
!51 = !DILocation(line: 54, column: 52, scope: !7)
!52 = !DILocation(line: 55, column: 35, scope: !7)
!53 = !DILocation(line: 55, column: 40, scope: !7)
!54 = !DILocation(line: 56, column: 35, scope: !7)
!55 = !DILocation(line: 56, column: 52, scope: !7)
!56 = !DILocation(line: 56, column: 104, scope: !7)
!57 = !DILocation(line: 58, column: 24, scope: !7)
!58 = !DILocation(line: 59, column: 24, scope: !7)
!59 = !DILocation(line: 64, column: 30, scope: !7)
!60 = !DILocation(line: 65, column: 24, scope: !7)
!61 = !DILocation(line: 68, column: 24, scope: !7)
!62 = !DILocation(line: 69, column: 24, scope: !7)
!63 = !DILocation(line: 70, column: 24, scope: !7)
!64 = !DILocation(line: 71, column: 24, scope: !7)
!65 = !DILocation(line: 73, column: 24, scope: !7)
!66 = !DILocation(line: 74, column: 24, scope: !7)
!67 = !DILocation(line: 75, column: 24, scope: !7)
!68 = !DILocation(line: 77, column: 29, scope: !7)
!69 = !DILocation(line: 77, column: 53, scope: !7)
!70 = !DILocation(line: 50, column: 4, scope: !7)
