module {
  tt.func public @triton__0d1d2d3d4d5d6d7d89de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg8: i32, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c4_i32 = arith.constant 4 : i32
    %true = arith.constant true
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<2304> : tensor<1x1xi64>
    %cst_1 = arith.constant dense<0> : tensor<1x1xi64>
    %cst_2 = arith.constant dense<288256> : tensor<1x1xi64>
    %cst_3 = arith.constant dense<4.800000e+01> : tensor<1x2048xf32>
    %cst_4 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_6 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_7 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c4_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %5 = arith.muli %0, %c2304_i32 : i32
    %6 = tt.splat %5 : (i32) -> tensor<1x2048xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %8 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %9 = scf.for %arg10 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg11 = %cst_8) -> (tensor<1x2048xf32>)  : i32 {
      %47 = tt.splat %arg10 : (i32) -> tensor<1x2048xi32>
      %48 = arith.addi %47, %4 : tensor<1x2048xi32>
      %49 = arith.cmpi slt, %48, %cst_7 : tensor<1x2048xi32>
      %50 = arith.addi %48, %6 : tensor<1x2048xi32>
      %51 = tt.addptr %7, %50 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %52 = arith.andi %49, %8 : tensor<1x2048xi1>
      %53 = tt.load %51, %52, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %54 = arith.extf %53 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %55 = arith.mulf %54, %54 : tensor<1x2048xf32>
      %56 = arith.addf %arg11, %55 : tensor<1x2048xf32>
      %57 = arith.select %52, %56, %arg11 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %57 : tensor<1x2048xf32>
    }
    %10 = "tt.reduce"(%9) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32, %arg11: f32):
      %47 = arith.addf %arg10, %arg11 : f32
      tt.reduce.return %47 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %11 = tt.expand_dims %10 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %12 = tt.addptr %arg2, %0 : !tt.ptr<i64, 1>, i32
    %13 = tt.splat %12 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>>
    %14 = tt.load %13, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64>
    %15 = arith.muli %0, %c2304_i32 : i32
    %16 = tt.splat %15 : (i32) -> tensor<1x2048xi32>
    %17 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %18 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %19 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %20 = arith.divf %11, %cst_6 : tensor<1x1xf32>
    %21 = arith.addf %20, %cst_5 : tensor<1x1xf32>
    %22 = arith.addi %14, %cst_2 : tensor<1x1xi64>
    %23 = arith.cmpi slt, %14, %cst_1 : tensor<1x1xi64>
    %24 = arith.select %23, %22, %14 : tensor<1x1xi1>, tensor<1x1xi64>
    %25 = arith.cmpi sge, %24, %cst_1 : tensor<1x1xi64>
    %26 = arith.cmpi slt, %24, %cst_2 : tensor<1x1xi64>
    %27 = arith.andi %25, %26 : tensor<1x1xi1>
    %28 = arith.xori %1, %true : i1
    %29 = tt.splat %28 : (i1) -> tensor<1x1xi1>
    %30 = arith.ori %27, %29 : tensor<1x1xi1>
    %31 = arith.muli %24, %cst_0 : tensor<1x1xi64>
    %32 = tt.broadcast %31 : (tensor<1x1xi64>) -> tensor<1x2048xi64>
    %33 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %34 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %35 = scf.for %arg10 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg11 = %cst_8) -> (tensor<1x2048xf32>)  : i32 {
      %47 = tt.splat %arg10 : (i32) -> tensor<1x2048xi32>
      %48 = arith.addi %47, %4 : tensor<1x2048xi32>
      %49 = arith.cmpi slt, %48, %cst_7 : tensor<1x2048xi32>
      %50 = arith.addi %48, %16 : tensor<1x2048xi32>
      %51 = tt.addptr %17, %50 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %52 = arith.andi %49, %18 : tensor<1x2048xi1>
      %53 = tt.load %51, %52, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %54 = arith.extf %53 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %55 = tt.addptr %19, %48 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %56 = tt.load %55, %49, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %57 = tt.extern_elementwise %21 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %58 = tt.broadcast %57 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %59 = arith.mulf %54, %58 : tensor<1x2048xf32>
      %60 = arith.addf %56, %cst_4 : tensor<1x2048xf32>
      %61 = arith.mulf %59, %60 : tensor<1x2048xf32>
      tt.assert %30, "index out of bounds: 0 <= tmp23 < 288256", "<frozen importlib._bootstrap_external>", "_call_with_frames_removed", 883 : tensor<1x1xi1>
      %62 = arith.extsi %48 : tensor<1x2048xi32> to tensor<1x2048xi64>
      %63 = arith.addi %62, %32 : tensor<1x2048xi64>
      %64 = tt.addptr %33, %63 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi64>
      %65 = tt.load %64, %52, %cst_8 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %66 = arith.mulf %65, %cst_3 : tensor<1x2048xf32>
      %67 = arith.addf %61, %66 : tensor<1x2048xf32>
      %68 = arith.mulf %67, %67 : tensor<1x2048xf32>
      %69 = arith.addf %arg11, %68 : tensor<1x2048xf32>
      %70 = arith.select %52, %69, %arg11 : tensor<1x2048xi1>, tensor<1x2048xf32>
      %71 = tt.addptr %34, %50 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      tt.store %71, %67, %52 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32>
      scf.yield %70 : tensor<1x2048xf32>
    }
    %36 = "tt.reduce"(%35) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32, %arg11: f32):
      %47 = arith.addf %arg10, %arg11 : f32
      tt.reduce.return %47 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %37 = tt.expand_dims %36 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %38 = arith.muli %0, %c2304_i32 : i32
    %39 = tt.splat %38 : (i32) -> tensor<1x2048xi32>
    %40 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %41 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %42 = tt.splat %arg4 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %43 = arith.divf %37, %cst_6 : tensor<1x1xf32>
    %44 = arith.addf %43, %cst_5 : tensor<1x1xf32>
    %45 = tt.splat %arg6 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %46 = tt.splat %arg7 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg10 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %47 = tt.splat %arg10 : (i32) -> tensor<1x2048xi32>
      %48 = arith.addi %47, %4 : tensor<1x2048xi32>
      %49 = arith.cmpi slt, %48, %cst_7 : tensor<1x2048xi32>
      %50 = arith.addi %48, %39 : tensor<1x2048xi32>
      %51 = tt.addptr %40, %50 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %52 = arith.andi %49, %41 : tensor<1x2048xi1>
      %53 = tt.load %51, %52, %cst_8 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %54 = tt.addptr %42, %48 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %55 = tt.load %54, %49, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %56 = tt.extern_elementwise %44 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %57 = tt.broadcast %56 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %58 = arith.mulf %53, %57 : tensor<1x2048xf32>
      %59 = arith.addf %55, %cst_4 : tensor<1x2048xf32>
      %60 = arith.mulf %58, %59 : tensor<1x2048xf32>
      %61 = tt.addptr %45, %50 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %62 = arith.truncf %60 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %61, %62, %52 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
      %63 = tt.addptr %46, %50 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      tt.store %63, %62, %52 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
