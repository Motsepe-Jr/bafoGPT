module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10de11de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_3 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %3 = arith.muli %0, %c2304_i32 : i32
    %4 = tt.splat %3 : (i32) -> tensor<1x2048xi32>
    %5 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %6 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg13 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %40 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32>
      %41 = arith.addi %40, %2 : tensor<1x2048xi32>
      %42 = arith.cmpi slt, %41, %cst_3 : tensor<1x2048xi32>
      %43 = arith.addi %41, %4 : tensor<1x2048xi32>
      %44 = tt.addptr %5, %43 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %45 = tt.load %44, %42, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %46 = arith.extf %45 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %47 = arith.mulf %46, %46 : tensor<1x2048xf32>
      %48 = arith.addf %arg13, %47 : tensor<1x2048xf32>
      %49 = arith.select %42, %48, %arg13 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %49 : tensor<1x2048xf32>
    }
    %7 = "tt.reduce"(%6) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %40 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %40 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %8 = tt.expand_dims %7 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %9 = arith.divf %8, %cst_2 : tensor<1x1xf32>
    %10 = arith.addf %9, %cst_1 : tensor<1x1xf32>
    %11 = tt.extern_elementwise %10 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
    gpu.barrier
    %12 = tt.addptr %arg0, %0 : !tt.ptr<f32, 1>, i32
    %13 = tt.splat %12 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %13, %11 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %14 = tt.addptr %arg6, %0 : !tt.ptr<f32, 1>, i32
    %15 = tt.splat %14 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %16 = tt.load %15 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %17 = arith.muli %0, %c2304_i32 : i32
    %18 = tt.splat %17 : (i32) -> tensor<1x2048xi32>
    %19 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %20 = tt.splat %arg4 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %21 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %22 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %23 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %24 = tt.broadcast %11 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %25 = tt.broadcast %16 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %26 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32 iter_args(%arg13 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %40 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32>
      %41 = arith.addi %40, %2 : tensor<1x2048xi32>
      %42 = arith.cmpi slt, %41, %cst_3 : tensor<1x2048xi32>
      %43 = arith.addi %41, %18 : tensor<1x2048xi32>
      %44 = tt.addptr %19, %43 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %45 = tt.load %44, %42, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %46 = arith.extf %45 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %47 = tt.addptr %20, %41 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %48 = tt.load %47, %42, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %49 = tt.addptr %21, %43 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %50 = tt.load %49, %42, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %51 = arith.extf %50 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %52 = tt.addptr %22, %41 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %53 = tt.load %52, %42, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %54 = tt.addptr %23, %43 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %55 = tt.load %54, %42, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %56 = arith.mulf %46, %24 : tensor<1x2048xf32>
      %57 = arith.addf %48, %cst_0 : tensor<1x2048xf32>
      %58 = arith.mulf %56, %57 : tensor<1x2048xf32>
      %59 = arith.mulf %51, %25 : tensor<1x2048xf32>
      %60 = arith.addf %53, %cst_0 : tensor<1x2048xf32>
      %61 = arith.mulf %59, %60 : tensor<1x2048xf32>
      %62 = arith.addf %61, %55 : tensor<1x2048xf32>
      %63 = arith.addf %58, %62 : tensor<1x2048xf32>
      %64 = arith.mulf %63, %63 : tensor<1x2048xf32>
      %65 = arith.addf %arg13, %64 : tensor<1x2048xf32>
      %66 = arith.select %42, %65, %arg13 : tensor<1x2048xi1>, tensor<1x2048xf32>
      tt.store %54, %63, %42 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xf32>
      scf.yield %66 : tensor<1x2048xf32>
    }
    %27 = "tt.reduce"(%26) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %40 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %40 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %28 = tt.expand_dims %27 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %29 = arith.divf %28, %cst_2 : tensor<1x1xf32>
    %30 = arith.addf %29, %cst_1 : tensor<1x1xf32>
    %31 = tt.extern_elementwise %30 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
    gpu.barrier
    %32 = tt.addptr %arg2, %0 : !tt.ptr<f32, 1>, i32
    %33 = tt.splat %32 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %33, %31 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %34 = arith.muli %0, %c2304_i32 : i32
    %35 = tt.splat %34 : (i32) -> tensor<1x2048xi32>
    %36 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %37 = tt.splat %arg8 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %38 = tt.broadcast %31 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
    %39 = tt.splat %arg9 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg12 = %c0_i32 to %c2304_i32 step %c2048_i32  : i32 {
      %40 = tt.splat %arg12 : (i32) -> tensor<1x2048xi32>
      %41 = arith.addi %40, %2 : tensor<1x2048xi32>
      %42 = arith.cmpi slt, %41, %cst_3 : tensor<1x2048xi32>
      %43 = arith.addi %41, %35 : tensor<1x2048xi32>
      %44 = tt.addptr %36, %43 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %45 = tt.load %44, %42, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %46 = tt.addptr %37, %41 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %47 = tt.load %46, %42, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %48 = arith.mulf %45, %38 : tensor<1x2048xf32>
      %49 = arith.addf %47, %cst_0 : tensor<1x2048xf32>
      %50 = arith.mulf %48, %49 : tensor<1x2048xf32>
      %51 = tt.addptr %39, %43 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %52 = arith.truncf %50 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %51, %52, %42 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
