; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7de8de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = lshr i32 %10, 5, !dbg !10
  %urem = and i32 %10, 255, !dbg !10
  %12 = shl nuw nsw i32 %urem, 3, !dbg !10
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %14 = mul i32 %13, 2304, !dbg !12
  %15 = add i32 %12, %14, !dbg !13
  %16 = sext i32 %15 to i64, !dbg !14
  %17 = getelementptr i16, ptr addrspace(1) %2, i64 %16, !dbg !14
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !15
  %23 = trunc i32 %19 to i16, !dbg !15
  %extelt.offset10 = lshr i32 %19, 16, !dbg !15
  %24 = trunc i32 %extelt.offset10 to i16, !dbg !15
  %25 = trunc i32 %20 to i16, !dbg !15
  %extelt.offset11 = lshr i32 %20, 16, !dbg !15
  %26 = trunc i32 %extelt.offset11 to i16, !dbg !15
  %27 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset12 = lshr i32 %21, 16, !dbg !15
  %28 = trunc i32 %extelt.offset12 to i16, !dbg !15
  %29 = trunc i32 %22 to i16, !dbg !15
  %extelt.offset13 = lshr i32 %22, 16, !dbg !15
  %30 = trunc i32 %extelt.offset13 to i16, !dbg !15
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #6, !dbg !16
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !16
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !16
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !16
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !16
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !16
  %39 = fmul float %31, %31, !dbg !17
  %40 = fmul float %32, %32, !dbg !17
  %41 = fmul float %33, %33, !dbg !17
  %42 = fmul float %34, %34, !dbg !17
  %43 = fmul float %35, %35, !dbg !17
  %44 = fmul float %36, %36, !dbg !17
  %45 = fmul float %37, %37, !dbg !17
  %46 = fmul float %38, %38, !dbg !17
  %47 = or i32 %12, 2048, !dbg !18
  %48 = icmp ult i32 %47, 2304, !dbg !19
  %49 = add i32 %47, %14, !dbg !13
  %50 = sext i32 %49 to i64, !dbg !14
  %51 = getelementptr i16, ptr addrspace(1) %2, i64 %50, !dbg !14
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #6, !dbg !15
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !15
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !15
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !15
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !15
  %57 = trunc i32 %53 to i16, !dbg !15
  %extelt.offset10.1 = lshr i32 %53, 16, !dbg !15
  %58 = trunc i32 %extelt.offset10.1 to i16, !dbg !15
  %59 = trunc i32 %54 to i16, !dbg !15
  %extelt.offset11.1 = lshr i32 %54, 16, !dbg !15
  %60 = trunc i32 %extelt.offset11.1 to i16, !dbg !15
  %61 = trunc i32 %55 to i16, !dbg !15
  %extelt.offset12.1 = lshr i32 %55, 16, !dbg !15
  %62 = trunc i32 %extelt.offset12.1 to i16, !dbg !15
  %63 = trunc i32 %56 to i16, !dbg !15
  %extelt.offset13.1 = lshr i32 %56, 16, !dbg !15
  %64 = trunc i32 %extelt.offset13.1 to i16, !dbg !15
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #6, !dbg !16
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #6, !dbg !16
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #6, !dbg !16
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #6, !dbg !16
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #6, !dbg !16
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #6, !dbg !16
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #6, !dbg !16
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #6, !dbg !16
  %73 = fmul float %65, %65, !dbg !17
  %74 = fmul float %66, %66, !dbg !17
  %75 = fmul float %67, %67, !dbg !17
  %76 = fmul float %68, %68, !dbg !17
  %77 = fmul float %69, %69, !dbg !17
  %78 = fmul float %70, %70, !dbg !17
  %79 = fmul float %71, %71, !dbg !17
  %80 = fmul float %72, %72, !dbg !17
  %81 = select i1 %48, float %73, float -0.000000e+00, !dbg !20
  %82 = fadd float %39, %81, !dbg !20
  %83 = select i1 %48, float %74, float -0.000000e+00, !dbg !20
  %84 = fadd float %40, %83, !dbg !20
  %85 = select i1 %48, float %75, float -0.000000e+00, !dbg !20
  %86 = fadd float %41, %85, !dbg !20
  %87 = select i1 %48, float %76, float -0.000000e+00, !dbg !20
  %88 = fadd float %42, %87, !dbg !20
  %89 = select i1 %48, float %77, float -0.000000e+00, !dbg !20
  %90 = fadd float %43, %89, !dbg !20
  %91 = select i1 %48, float %78, float -0.000000e+00, !dbg !20
  %92 = fadd float %44, %91, !dbg !20
  %93 = select i1 %48, float %79, float -0.000000e+00, !dbg !20
  %94 = fadd float %45, %93, !dbg !20
  %95 = select i1 %48, float %80, float -0.000000e+00, !dbg !20
  %96 = fadd float %46, %95, !dbg !20
  %97 = and i32 %10, 31, !dbg !10
  %98 = and i32 %11, 7, !dbg !10
  %99 = or i32 %12, 4, !dbg !10
  %100 = fadd float %82, %84, !dbg !21
  %101 = fadd float %86, %100, !dbg !21
  %102 = fadd float %88, %101, !dbg !21
  %103 = fadd float %90, %102, !dbg !21
  %104 = fadd float %92, %103, !dbg !21
  %105 = fadd float %94, %104, !dbg !21
  %106 = fadd float %96, %105, !dbg !21
  %107 = bitcast float %106 to i32, !dbg !27
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !27
  %109 = bitcast i32 %108 to float, !dbg !27
  %110 = fadd float %106, %109, !dbg !21
  %111 = bitcast float %110 to i32, !dbg !27
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !27
  %113 = bitcast i32 %112 to float, !dbg !27
  %114 = fadd float %110, %113, !dbg !21
  %115 = bitcast float %114 to i32, !dbg !27
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !27
  %117 = bitcast i32 %116 to float, !dbg !27
  %118 = fadd float %114, %117, !dbg !21
  %119 = bitcast float %118 to i32, !dbg !27
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !27
  %121 = bitcast i32 %120 to float, !dbg !27
  %122 = fadd float %118, %121, !dbg !21
  %123 = bitcast float %122 to i32, !dbg !27
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !27
  %125 = bitcast i32 %124 to float, !dbg !27
  %126 = fadd float %122, %125, !dbg !21
  %127 = icmp eq i32 %97, 0, !dbg !27
  %128 = zext nneg i32 %98 to i64, !dbg !27
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i64 %128, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, float %126, i1 %127) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %130 = icmp slt i32 %10, 8, !dbg !27
  %131 = sext i32 %10 to i64, !dbg !27
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %131, !dbg !27
  %133 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %132, i1 %130) #6, !dbg !27
  %134 = bitcast float %133 to i32, !dbg !27
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !27
  %136 = bitcast i32 %135 to float, !dbg !27
  %137 = fadd float %133, %136, !dbg !21
  %138 = bitcast float %137 to i32, !dbg !27
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !27
  %140 = bitcast i32 %139 to float, !dbg !27
  %141 = fadd float %137, %140, !dbg !21
  %142 = bitcast float %141 to i32, !dbg !27
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !27
  %144 = bitcast i32 %143 to float, !dbg !27
  %145 = fadd float %141, %144, !dbg !21
  %146 = and i32 %10, 7, !dbg !27
  %147 = icmp eq i32 %146, 0, !dbg !27
  %148 = and i1 %130, %147, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, float %145, i1 %148) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %149 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %150 = insertelement <1 x float> undef, float %149, i64 0, !dbg !29
  store <1 x float> %150, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %151 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 2.304000e+03) #6, !dbg !30
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !30
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !30
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !30
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !30
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !30
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !30
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !30
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 2.304000e+03) #6, !dbg !30
  %161 = fadd float %152, 0x3EE4F8B580000000, !dbg !31
  %162 = fadd float %153, 0x3EE4F8B580000000, !dbg !31
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %.not.i = icmp eq i32 %163, 0, !dbg !29
  br i1 %.not.i, label %166, label %164, !dbg !29

164:                                              ; preds = %9
  %165 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %161), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

166:                                              ; preds = %9
  %167 = tail call float @llvm.nvvm.rsqrt.approx.f(float %161), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %164, %166
  %.0.i = phi float [ %165, %164 ], [ %167, %166 ], !dbg !29
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %.not.i14 = icmp eq i32 %168, 0, !dbg !29
  br i1 %.not.i14, label %171, label %169, !dbg !29

169:                                              ; preds = %__nv_rsqrtf.exit
  %170 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %162), !dbg !29
  br label %__nv_rsqrtf.exit16, !dbg !29

171:                                              ; preds = %__nv_rsqrtf.exit
  %172 = tail call float @llvm.nvvm.rsqrt.approx.f(float %162), !dbg !29
  br label %__nv_rsqrtf.exit16, !dbg !29

__nv_rsqrtf.exit16:                               ; preds = %169, %171
  %.0.i15 = phi float [ %170, %169 ], [ %172, %171 ], !dbg !29
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %180 = sext i32 %13 to i64, !dbg !33
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !33
  %182 = icmp eq i32 %urem, 0, !dbg !34
  %183 = bitcast float %.0.i to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %181, i1 %182) #6, !dbg !34
  %184 = insertelement <8 x float> poison, float %.0.i15, i64 0, !dbg !35
  %185 = shufflevector <8 x float> %184, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !35
  %186 = add i32 %12, %14, !dbg !36
  %187 = add i32 %99, %14, !dbg !36
  %188 = sext i32 %186 to i64, !dbg !37
  %189 = getelementptr i16, ptr addrspace(1) %2, i64 %188, !dbg !37
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %189, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !38
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !38
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !38
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !38
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !38
  %195 = trunc i32 %191 to i16, !dbg !38
  %extelt.offset6 = lshr i32 %191, 16, !dbg !38
  %196 = trunc i32 %extelt.offset6 to i16, !dbg !38
  %197 = trunc i32 %192 to i16, !dbg !38
  %extelt.offset7 = lshr i32 %192, 16, !dbg !38
  %198 = trunc i32 %extelt.offset7 to i16, !dbg !38
  %199 = trunc i32 %193 to i16, !dbg !38
  %extelt.offset8 = lshr i32 %193, 16, !dbg !38
  %200 = trunc i32 %extelt.offset8 to i16, !dbg !38
  %201 = trunc i32 %194 to i16, !dbg !38
  %extelt.offset9 = lshr i32 %194, 16, !dbg !38
  %202 = trunc i32 %extelt.offset9 to i16, !dbg !38
  %203 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %195) #6, !dbg !39
  %204 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %196) #6, !dbg !39
  %205 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %197) #6, !dbg !39
  %206 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %198) #6, !dbg !39
  %207 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %199) #6, !dbg !39
  %208 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %200) #6, !dbg !39
  %209 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %201) #6, !dbg !39
  %210 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %202) #6, !dbg !39
  %211 = zext nneg i32 %12 to i64, !dbg !40
  %212 = getelementptr float, ptr addrspace(1) %3, i64 %211, !dbg !40
  %213 = zext nneg i32 %99 to i64, !dbg !40
  %214 = getelementptr float, ptr addrspace(1) %3, i64 %213, !dbg !40
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %212, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !41
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !41
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !41
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !41
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !41
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %214, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !41
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !41
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !41
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !41
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !41
  %225 = getelementptr float, ptr addrspace(1) %4, i64 %188, !dbg !42
  %226 = sext i32 %187 to i64, !dbg !42
  %227 = getelementptr float, ptr addrspace(1) %4, i64 %226, !dbg !42
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %225, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !43
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !43
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !43
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !43
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !43
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %227, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !43
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !43
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !43
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !43
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !43
  %238 = insertelement <8 x i32> poison, i32 %216, i64 0, !dbg !41
  %239 = insertelement <8 x i32> %238, i32 %217, i64 1, !dbg !41
  %240 = insertelement <8 x i32> %239, i32 %218, i64 2, !dbg !41
  %241 = insertelement <8 x i32> %240, i32 %219, i64 3, !dbg !41
  %242 = insertelement <8 x i32> %241, i32 %221, i64 4, !dbg !41
  %243 = insertelement <8 x i32> %242, i32 %222, i64 5, !dbg !41
  %244 = insertelement <8 x i32> %243, i32 %223, i64 6, !dbg !41
  %245 = insertelement <8 x i32> %244, i32 %224, i64 7, !dbg !41
  %246 = bitcast <8 x i32> %245 to <8 x float>, !dbg !41
  %247 = insertelement <8 x i32> poison, i32 %229, i64 0, !dbg !43
  %248 = insertelement <8 x i32> %247, i32 %230, i64 1, !dbg !43
  %249 = insertelement <8 x i32> %248, i32 %231, i64 2, !dbg !43
  %250 = insertelement <8 x i32> %249, i32 %232, i64 3, !dbg !43
  %251 = insertelement <8 x i32> %250, i32 %234, i64 4, !dbg !43
  %252 = insertelement <8 x i32> %251, i32 %235, i64 5, !dbg !43
  %253 = insertelement <8 x i32> %252, i32 %236, i64 6, !dbg !43
  %254 = insertelement <8 x i32> %253, i32 %237, i64 7, !dbg !43
  %255 = bitcast <8 x i32> %254 to <8 x float>, !dbg !43
  %256 = insertelement <8 x float> poison, float %203, i64 0, !dbg !35
  %257 = insertelement <8 x float> %256, float %204, i64 1, !dbg !35
  %258 = insertelement <8 x float> %257, float %205, i64 2, !dbg !35
  %259 = insertelement <8 x float> %258, float %206, i64 3, !dbg !35
  %260 = insertelement <8 x float> %259, float %207, i64 4, !dbg !35
  %261 = insertelement <8 x float> %260, float %208, i64 5, !dbg !35
  %262 = insertelement <8 x float> %261, float %209, i64 6, !dbg !35
  %263 = insertelement <8 x float> %262, float %210, i64 7, !dbg !35
  %264 = fmul <8 x float> %185, %263, !dbg !35
  %265 = fadd <8 x float> %246, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !44
  %266 = fmul <8 x float> %264, %265, !dbg !45
  %267 = fadd <8 x float> %266, %255, !dbg !46
  %268 = fmul <8 x float> %267, %267, !dbg !47
  %269 = or i32 %12, 2048, !dbg !48
  %270 = or i32 %12, 2052, !dbg !48
  %271 = icmp ult i32 %269, 2304, !dbg !49
  %272 = add i32 %269, %14, !dbg !36
  %273 = add i32 %270, %14, !dbg !36
  %274 = sext i32 %272 to i64, !dbg !37
  %275 = getelementptr i16, ptr addrspace(1) %2, i64 %274, !dbg !37
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %275, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271) #6, !dbg !38
  %277 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !38
  %278 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !38
  %279 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !38
  %280 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !38
  %281 = trunc i32 %277 to i16, !dbg !38
  %extelt.offset6.1 = lshr i32 %277, 16, !dbg !38
  %282 = trunc i32 %extelt.offset6.1 to i16, !dbg !38
  %283 = trunc i32 %278 to i16, !dbg !38
  %extelt.offset7.1 = lshr i32 %278, 16, !dbg !38
  %284 = trunc i32 %extelt.offset7.1 to i16, !dbg !38
  %285 = trunc i32 %279 to i16, !dbg !38
  %extelt.offset8.1 = lshr i32 %279, 16, !dbg !38
  %286 = trunc i32 %extelt.offset8.1 to i16, !dbg !38
  %287 = trunc i32 %280 to i16, !dbg !38
  %extelt.offset9.1 = lshr i32 %280, 16, !dbg !38
  %288 = trunc i32 %extelt.offset9.1 to i16, !dbg !38
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %281) #6, !dbg !39
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %282) #6, !dbg !39
  %291 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %283) #6, !dbg !39
  %292 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %284) #6, !dbg !39
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #6, !dbg !39
  %294 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #6, !dbg !39
  %295 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %287) #6, !dbg !39
  %296 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %288) #6, !dbg !39
  %297 = zext nneg i32 %269 to i64, !dbg !40
  %298 = getelementptr float, ptr addrspace(1) %3, i64 %297, !dbg !40
  %299 = zext nneg i32 %270 to i64, !dbg !40
  %300 = getelementptr float, ptr addrspace(1) %3, i64 %299, !dbg !40
  %301 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %298, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271) #6, !dbg !41
  %302 = extractvalue { i32, i32, i32, i32 } %301, 0, !dbg !41
  %303 = extractvalue { i32, i32, i32, i32 } %301, 1, !dbg !41
  %304 = extractvalue { i32, i32, i32, i32 } %301, 2, !dbg !41
  %305 = extractvalue { i32, i32, i32, i32 } %301, 3, !dbg !41
  %306 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %300, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271) #6, !dbg !41
  %307 = extractvalue { i32, i32, i32, i32 } %306, 0, !dbg !41
  %308 = extractvalue { i32, i32, i32, i32 } %306, 1, !dbg !41
  %309 = extractvalue { i32, i32, i32, i32 } %306, 2, !dbg !41
  %310 = extractvalue { i32, i32, i32, i32 } %306, 3, !dbg !41
  %311 = getelementptr float, ptr addrspace(1) %4, i64 %274, !dbg !42
  %312 = sext i32 %273 to i64, !dbg !42
  %313 = getelementptr float, ptr addrspace(1) %4, i64 %312, !dbg !42
  %314 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %311, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271) #6, !dbg !43
  %315 = extractvalue { i32, i32, i32, i32 } %314, 0, !dbg !43
  %316 = extractvalue { i32, i32, i32, i32 } %314, 1, !dbg !43
  %317 = extractvalue { i32, i32, i32, i32 } %314, 2, !dbg !43
  %318 = extractvalue { i32, i32, i32, i32 } %314, 3, !dbg !43
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %313, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271) #6, !dbg !43
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !43
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !43
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !43
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !43
  %324 = insertelement <8 x i32> poison, i32 %302, i64 0, !dbg !41
  %325 = insertelement <8 x i32> %324, i32 %303, i64 1, !dbg !41
  %326 = insertelement <8 x i32> %325, i32 %304, i64 2, !dbg !41
  %327 = insertelement <8 x i32> %326, i32 %305, i64 3, !dbg !41
  %328 = insertelement <8 x i32> %327, i32 %307, i64 4, !dbg !41
  %329 = insertelement <8 x i32> %328, i32 %308, i64 5, !dbg !41
  %330 = insertelement <8 x i32> %329, i32 %309, i64 6, !dbg !41
  %331 = insertelement <8 x i32> %330, i32 %310, i64 7, !dbg !41
  %332 = bitcast <8 x i32> %331 to <8 x float>, !dbg !41
  %333 = insertelement <8 x i32> poison, i32 %315, i64 0, !dbg !43
  %334 = insertelement <8 x i32> %333, i32 %316, i64 1, !dbg !43
  %335 = insertelement <8 x i32> %334, i32 %317, i64 2, !dbg !43
  %336 = insertelement <8 x i32> %335, i32 %318, i64 3, !dbg !43
  %337 = insertelement <8 x i32> %336, i32 %320, i64 4, !dbg !43
  %338 = insertelement <8 x i32> %337, i32 %321, i64 5, !dbg !43
  %339 = insertelement <8 x i32> %338, i32 %322, i64 6, !dbg !43
  %340 = insertelement <8 x i32> %339, i32 %323, i64 7, !dbg !43
  %341 = bitcast <8 x i32> %340 to <8 x float>, !dbg !43
  %342 = insertelement <8 x float> poison, float %289, i64 0, !dbg !35
  %343 = insertelement <8 x float> %342, float %290, i64 1, !dbg !35
  %344 = insertelement <8 x float> %343, float %291, i64 2, !dbg !35
  %345 = insertelement <8 x float> %344, float %292, i64 3, !dbg !35
  %346 = insertelement <8 x float> %345, float %293, i64 4, !dbg !35
  %347 = insertelement <8 x float> %346, float %294, i64 5, !dbg !35
  %348 = insertelement <8 x float> %347, float %295, i64 6, !dbg !35
  %349 = insertelement <8 x float> %348, float %296, i64 7, !dbg !35
  %350 = fmul <8 x float> %185, %349, !dbg !35
  %351 = fadd <8 x float> %332, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !44
  %352 = fmul <8 x float> %350, %351, !dbg !45
  %353 = fadd <8 x float> %352, %341, !dbg !46
  %354 = fmul <8 x float> %353, %353, !dbg !47
  %355 = insertelement <8 x i1> poison, i1 %271, i64 0, !dbg !50
  %356 = shufflevector <8 x i1> %355, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !50
  %357 = select <8 x i1> %356, <8 x float> %354, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !50
  %358 = fadd <8 x float> %268, %357, !dbg !50
  %shift = shufflevector <8 x float> %358, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %359 = fadd <8 x float> %358, %shift, !dbg !51
  %shift95 = shufflevector <8 x float> %358, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %360 = fadd <8 x float> %shift95, %359, !dbg !51
  %shift96 = shufflevector <8 x float> %358, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %361 = fadd <8 x float> %shift96, %360, !dbg !51
  %shift97 = shufflevector <8 x float> %358, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %362 = fadd <8 x float> %shift97, %361, !dbg !51
  %shift98 = shufflevector <8 x float> %358, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %363 = fadd <8 x float> %shift98, %362, !dbg !51
  %shift99 = shufflevector <8 x float> %358, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %364 = fadd <8 x float> %shift99, %363, !dbg !51
  %shift100 = shufflevector <8 x float> %358, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %365 = fadd <8 x float> %shift100, %364, !dbg !51
  %366 = extractelement <8 x float> %365, i64 0, !dbg !51
  %367 = bitcast float %366 to i32, !dbg !54
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 16, i32 31), !dbg !54
  %369 = bitcast i32 %368 to float, !dbg !54
  %370 = fadd float %366, %369, !dbg !51
  %371 = bitcast float %370 to i32, !dbg !54
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 8, i32 31), !dbg !54
  %373 = bitcast i32 %372 to float, !dbg !54
  %374 = fadd float %370, %373, !dbg !51
  %375 = bitcast float %374 to i32, !dbg !54
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 4, i32 31), !dbg !54
  %377 = bitcast i32 %376 to float, !dbg !54
  %378 = fadd float %374, %377, !dbg !51
  %379 = bitcast float %378 to i32, !dbg !54
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 2, i32 31), !dbg !54
  %381 = bitcast i32 %380 to float, !dbg !54
  %382 = fadd float %378, %381, !dbg !51
  %383 = bitcast float %382 to i32, !dbg !54
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 1, i32 31), !dbg !54
  %385 = bitcast i32 %384 to float, !dbg !54
  %386 = fadd float %382, %385, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, float %386, i1 %127) #6, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %387 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %132, i1 %130) #6, !dbg !54
  %388 = bitcast float %387 to i32, !dbg !54
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 4, i32 31), !dbg !54
  %390 = bitcast i32 %389 to float, !dbg !54
  %391 = fadd float %387, %390, !dbg !51
  %392 = bitcast float %391 to i32, !dbg !54
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 2, i32 31), !dbg !54
  %394 = bitcast i32 %393 to float, !dbg !54
  %395 = fadd float %391, %394, !dbg !51
  %396 = bitcast float %395 to i32, !dbg !54
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 1, i32 31), !dbg !54
  %398 = bitcast i32 %397 to float, !dbg !54
  %399 = fadd float %395, %398, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, float %399, i1 %148) #6, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %400 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %401 = insertelement <1 x float> undef, float %400, i64 0, !dbg !56
  store <1 x float> %401, ptr addrspace(3) @global_smem, align 4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %402 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !56
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %402, float 2.304000e+03) #6, !dbg !57
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float 2.304000e+03) #6, !dbg !57
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float 2.304000e+03) #6, !dbg !57
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float 2.304000e+03) #6, !dbg !57
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float 2.304000e+03) #6, !dbg !57
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float 2.304000e+03) #6, !dbg !57
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float 2.304000e+03) #6, !dbg !57
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float 2.304000e+03) #6, !dbg !57
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float 2.304000e+03) #6, !dbg !57
  %412 = fadd float %403, 0x3EE4F8B580000000, !dbg !58
  %413 = fadd float %404, 0x3EE4F8B580000000, !dbg !58
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %.not.i38 = icmp eq i32 %414, 0, !dbg !56
  br i1 %.not.i38, label %417, label %415, !dbg !56

415:                                              ; preds = %__nv_rsqrtf.exit16
  %416 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %412), !dbg !56
  br label %__nv_rsqrtf.exit40, !dbg !56

417:                                              ; preds = %__nv_rsqrtf.exit16
  %418 = tail call float @llvm.nvvm.rsqrt.approx.f(float %412), !dbg !56
  br label %__nv_rsqrtf.exit40, !dbg !56

__nv_rsqrtf.exit40:                               ; preds = %415, %417
  %.0.i39 = phi float [ %416, %415 ], [ %418, %417 ], !dbg !56
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %.not.i41 = icmp eq i32 %419, 0, !dbg !56
  br i1 %.not.i41, label %422, label %420, !dbg !56

420:                                              ; preds = %__nv_rsqrtf.exit40
  %421 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %413), !dbg !56
  br label %__nv_rsqrtf.exit43, !dbg !56

422:                                              ; preds = %__nv_rsqrtf.exit40
  %423 = tail call float @llvm.nvvm.rsqrt.approx.f(float %413), !dbg !56
  br label %__nv_rsqrtf.exit43, !dbg !56

__nv_rsqrtf.exit43:                               ; preds = %420, %422
  %.0.i42 = phi float [ %421, %420 ], [ %423, %422 ], !dbg !56
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %431 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !60
  %432 = bitcast float %.0.i39 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %432, ptr addrspace(1) %431, i1 %182) #6, !dbg !61
  br label %433, !dbg !62

433:                                              ; preds = %__nv_rsqrtf.exit43, %433
  %434 = phi i1 [ true, %__nv_rsqrtf.exit43 ], [ false, %433 ]
  %435 = phi i32 [ 0, %__nv_rsqrtf.exit43 ], [ 2048, %433 ]
  %436 = or i32 %435, %12, !dbg !63
  %437 = or i32 %435, %99, !dbg !63
  %438 = icmp ult i32 %436, 2304, !dbg !64
  %439 = add i32 %436, %14, !dbg !65
  %440 = add i32 %437, %14, !dbg !65
  %441 = sext i32 %439 to i64, !dbg !66
  %442 = getelementptr i16, ptr addrspace(1) %2, i64 %441, !dbg !66
  %443 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %442, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438) #6, !dbg !67
  %444 = extractvalue { i32, i32, i32, i32 } %443, 0, !dbg !67
  %445 = extractvalue { i32, i32, i32, i32 } %443, 1, !dbg !67
  %446 = extractvalue { i32, i32, i32, i32 } %443, 2, !dbg !67
  %447 = extractvalue { i32, i32, i32, i32 } %443, 3, !dbg !67
  %448 = trunc i32 %444 to i16, !dbg !67
  %extelt.offset = lshr i32 %444, 16, !dbg !67
  %449 = trunc i32 %extelt.offset to i16, !dbg !67
  %450 = trunc i32 %445 to i16, !dbg !67
  %extelt.offset3 = lshr i32 %445, 16, !dbg !67
  %451 = trunc i32 %extelt.offset3 to i16, !dbg !67
  %452 = trunc i32 %446 to i16, !dbg !67
  %extelt.offset4 = lshr i32 %446, 16, !dbg !67
  %453 = trunc i32 %extelt.offset4 to i16, !dbg !67
  %454 = trunc i32 %447 to i16, !dbg !67
  %extelt.offset5 = lshr i32 %447, 16, !dbg !67
  %455 = trunc i32 %extelt.offset5 to i16, !dbg !67
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #6, !dbg !68
  %457 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #6, !dbg !68
  %458 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #6, !dbg !68
  %459 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #6, !dbg !68
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #6, !dbg !68
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #6, !dbg !68
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %454) #6, !dbg !68
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %455) #6, !dbg !68
  %464 = zext nneg i32 %436 to i64, !dbg !69
  %465 = getelementptr float, ptr addrspace(1) %3, i64 %464, !dbg !69
  %466 = zext nneg i32 %437 to i64, !dbg !69
  %467 = getelementptr float, ptr addrspace(1) %3, i64 %466, !dbg !69
  %468 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %465, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438) #6, !dbg !70
  %469 = extractvalue { i32, i32, i32, i32 } %468, 0, !dbg !70
  %470 = extractvalue { i32, i32, i32, i32 } %468, 1, !dbg !70
  %471 = extractvalue { i32, i32, i32, i32 } %468, 2, !dbg !70
  %472 = extractvalue { i32, i32, i32, i32 } %468, 3, !dbg !70
  %473 = bitcast i32 %469 to float, !dbg !70
  %474 = bitcast i32 %470 to float, !dbg !70
  %475 = bitcast i32 %471 to float, !dbg !70
  %476 = bitcast i32 %472 to float, !dbg !70
  %477 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %467, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438) #6, !dbg !70
  %478 = extractvalue { i32, i32, i32, i32 } %477, 0, !dbg !70
  %479 = extractvalue { i32, i32, i32, i32 } %477, 1, !dbg !70
  %480 = extractvalue { i32, i32, i32, i32 } %477, 2, !dbg !70
  %481 = extractvalue { i32, i32, i32, i32 } %477, 3, !dbg !70
  %482 = bitcast i32 %478 to float, !dbg !70
  %483 = bitcast i32 %479 to float, !dbg !70
  %484 = bitcast i32 %480 to float, !dbg !70
  %485 = bitcast i32 %481 to float, !dbg !70
  %486 = getelementptr float, ptr addrspace(1) %4, i64 %441, !dbg !71
  %487 = sext i32 %440 to i64, !dbg !71
  %488 = getelementptr float, ptr addrspace(1) %4, i64 %487, !dbg !71
  %489 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %486, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438) #6, !dbg !72
  %490 = extractvalue { i32, i32, i32, i32 } %489, 0, !dbg !72
  %491 = extractvalue { i32, i32, i32, i32 } %489, 1, !dbg !72
  %492 = extractvalue { i32, i32, i32, i32 } %489, 2, !dbg !72
  %493 = extractvalue { i32, i32, i32, i32 } %489, 3, !dbg !72
  %494 = bitcast i32 %490 to float, !dbg !72
  %495 = bitcast i32 %491 to float, !dbg !72
  %496 = bitcast i32 %492 to float, !dbg !72
  %497 = bitcast i32 %493 to float, !dbg !72
  %498 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %488, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438) #6, !dbg !72
  %499 = extractvalue { i32, i32, i32, i32 } %498, 0, !dbg !72
  %500 = extractvalue { i32, i32, i32, i32 } %498, 1, !dbg !72
  %501 = extractvalue { i32, i32, i32, i32 } %498, 2, !dbg !72
  %502 = extractvalue { i32, i32, i32, i32 } %498, 3, !dbg !72
  %503 = bitcast i32 %499 to float, !dbg !72
  %504 = bitcast i32 %500 to float, !dbg !72
  %505 = bitcast i32 %501 to float, !dbg !72
  %506 = bitcast i32 %502 to float, !dbg !72
  %507 = getelementptr float, ptr addrspace(1) %5, i64 %464, !dbg !73
  %508 = getelementptr float, ptr addrspace(1) %5, i64 %466, !dbg !73
  %509 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %507, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438) #6, !dbg !74
  %510 = extractvalue { i32, i32, i32, i32 } %509, 0, !dbg !74
  %511 = extractvalue { i32, i32, i32, i32 } %509, 1, !dbg !74
  %512 = extractvalue { i32, i32, i32, i32 } %509, 2, !dbg !74
  %513 = extractvalue { i32, i32, i32, i32 } %509, 3, !dbg !74
  %514 = bitcast i32 %510 to float, !dbg !74
  %515 = bitcast i32 %511 to float, !dbg !74
  %516 = bitcast i32 %512 to float, !dbg !74
  %517 = bitcast i32 %513 to float, !dbg !74
  %518 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %508, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438, i32 0, i1 %438) #6, !dbg !74
  %519 = extractvalue { i32, i32, i32, i32 } %518, 0, !dbg !74
  %520 = extractvalue { i32, i32, i32, i32 } %518, 1, !dbg !74
  %521 = extractvalue { i32, i32, i32, i32 } %518, 2, !dbg !74
  %522 = extractvalue { i32, i32, i32, i32 } %518, 3, !dbg !74
  %523 = bitcast i32 %519 to float, !dbg !74
  %524 = bitcast i32 %520 to float, !dbg !74
  %525 = bitcast i32 %521 to float, !dbg !74
  %526 = bitcast i32 %522 to float, !dbg !74
  %527 = fmul float %.0.i15, %456, !dbg !75
  %528 = fmul float %.0.i15, %457, !dbg !75
  %529 = fmul float %.0.i15, %458, !dbg !75
  %530 = fmul float %.0.i15, %459, !dbg !75
  %531 = fmul float %.0.i15, %460, !dbg !75
  %532 = fmul float %.0.i15, %461, !dbg !75
  %533 = fmul float %.0.i15, %462, !dbg !75
  %534 = fmul float %.0.i15, %463, !dbg !75
  %535 = fadd float %473, 1.000000e+00, !dbg !76
  %536 = fadd float %474, 1.000000e+00, !dbg !76
  %537 = fadd float %475, 1.000000e+00, !dbg !76
  %538 = fadd float %476, 1.000000e+00, !dbg !76
  %539 = fadd float %482, 1.000000e+00, !dbg !76
  %540 = fadd float %483, 1.000000e+00, !dbg !76
  %541 = fadd float %484, 1.000000e+00, !dbg !76
  %542 = fadd float %485, 1.000000e+00, !dbg !76
  %543 = fmul float %527, %535, !dbg !77
  %544 = fmul float %528, %536, !dbg !77
  %545 = fmul float %529, %537, !dbg !77
  %546 = fmul float %530, %538, !dbg !77
  %547 = fmul float %531, %539, !dbg !77
  %548 = fmul float %532, %540, !dbg !77
  %549 = fmul float %533, %541, !dbg !77
  %550 = fmul float %534, %542, !dbg !77
  %551 = fadd float %543, %494, !dbg !78
  %552 = fadd float %544, %495, !dbg !78
  %553 = fadd float %545, %496, !dbg !78
  %554 = fadd float %546, %497, !dbg !78
  %555 = fadd float %547, %503, !dbg !78
  %556 = fadd float %548, %504, !dbg !78
  %557 = fadd float %549, %505, !dbg !78
  %558 = fadd float %550, %506, !dbg !78
  %559 = fmul float %.0.i42, %551, !dbg !79
  %560 = fmul float %.0.i42, %552, !dbg !79
  %561 = fmul float %.0.i42, %553, !dbg !79
  %562 = fmul float %.0.i42, %554, !dbg !79
  %563 = fmul float %.0.i42, %555, !dbg !79
  %564 = fmul float %.0.i42, %556, !dbg !79
  %565 = fmul float %.0.i42, %557, !dbg !79
  %566 = fmul float %.0.i42, %558, !dbg !79
  %567 = fadd float %514, 1.000000e+00, !dbg !80
  %568 = fadd float %515, 1.000000e+00, !dbg !80
  %569 = fadd float %516, 1.000000e+00, !dbg !80
  %570 = fadd float %517, 1.000000e+00, !dbg !80
  %571 = fadd float %523, 1.000000e+00, !dbg !80
  %572 = fadd float %524, 1.000000e+00, !dbg !80
  %573 = fadd float %525, 1.000000e+00, !dbg !80
  %574 = fadd float %526, 1.000000e+00, !dbg !80
  %575 = fmul float %559, %567, !dbg !81
  %576 = fmul float %560, %568, !dbg !81
  %577 = fmul float %561, %569, !dbg !81
  %578 = fmul float %562, %570, !dbg !81
  %579 = fmul float %563, %571, !dbg !81
  %580 = fmul float %564, %572, !dbg !81
  %581 = fmul float %565, %573, !dbg !81
  %582 = fmul float %566, %574, !dbg !81
  %583 = getelementptr i16, ptr addrspace(1) %6, i64 %441, !dbg !82
  %584 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #6, !dbg !83
  %585 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #6, !dbg !83
  %586 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #6, !dbg !83
  %587 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #6, !dbg !83
  %588 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #6, !dbg !83
  %589 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #6, !dbg !83
  %590 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #6, !dbg !83
  %591 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #6, !dbg !83
  %592 = insertelement <2 x i16> undef, i16 %584, i64 0, !dbg !83
  %593 = insertelement <2 x i16> %592, i16 %585, i64 1, !dbg !83
  %594 = bitcast <2 x i16> %593 to i32, !dbg !83
  %595 = insertelement <2 x i16> undef, i16 %586, i64 0, !dbg !83
  %596 = insertelement <2 x i16> %595, i16 %587, i64 1, !dbg !83
  %597 = bitcast <2 x i16> %596 to i32, !dbg !83
  %598 = insertelement <2 x i16> undef, i16 %588, i64 0, !dbg !83
  %599 = insertelement <2 x i16> %598, i16 %589, i64 1, !dbg !83
  %600 = bitcast <2 x i16> %599 to i32, !dbg !83
  %601 = insertelement <2 x i16> undef, i16 %590, i64 0, !dbg !83
  %602 = insertelement <2 x i16> %601, i16 %591, i64 1, !dbg !83
  %603 = bitcast <2 x i16> %602 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %594, i32 %597, i32 %600, i32 %603, ptr addrspace(1) %583, i1 %438) #6, !dbg !83
  br i1 %434, label %433, label %604, !dbg !62

604:                                              ; preds = %433
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cd36cjgvkrr6ow6ixnw6cnw5zcsnatu7glicpbvquvs2rnnxl55p.py", directory: "/tmp/torchinductor_zeus/d3")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7de8de", linkageName: "triton__0d1d2d3d4d5d6d7de8de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 42, column: 26, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 43, column: 4, scope: !7)
!33 = !DILocation(line: 44, column: 28, scope: !7)
!34 = !DILocation(line: 44, column: 40, scope: !7)
!35 = !DILocation(line: 54, column: 24, scope: !7)
!36 = !DILocation(line: 50, column: 41, scope: !7)
!37 = !DILocation(line: 50, column: 35, scope: !7)
!38 = !DILocation(line: 50, column: 52, scope: !7)
!39 = !DILocation(line: 50, column: 103, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 51, column: 40, scope: !7)
!42 = !DILocation(line: 52, column: 35, scope: !7)
!43 = !DILocation(line: 52, column: 52, scope: !7)
!44 = !DILocation(line: 56, column: 24, scope: !7)
!45 = !DILocation(line: 57, column: 24, scope: !7)
!46 = !DILocation(line: 60, column: 24, scope: !7)
!47 = !DILocation(line: 61, column: 24, scope: !7)
!48 = !DILocation(line: 47, column: 27, scope: !7)
!49 = !DILocation(line: 48, column: 25, scope: !7)
!50 = !DILocation(line: 64, column: 40, scope: !7)
!51 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !52)
!52 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !53)
!53 = !DILocation(line: 65, column: 27, scope: !22)
!54 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !55)
!55 = !DILocation(line: 65, column: 27, scope: !24)
!56 = !DILocation(line: 70, column: 26, scope: !7)
!57 = !DILocation(line: 67, column: 20, scope: !7)
!58 = !DILocation(line: 69, column: 20, scope: !7)
!59 = !DILocation(line: 71, column: 4, scope: !7)
!60 = !DILocation(line: 72, column: 28, scope: !7)
!61 = !DILocation(line: 72, column: 40, scope: !7)
!62 = !DILocation(line: 73, column: 36, scope: !7)
!63 = !DILocation(line: 74, column: 27, scope: !7)
!64 = !DILocation(line: 75, column: 25, scope: !7)
!65 = !DILocation(line: 77, column: 41, scope: !7)
!66 = !DILocation(line: 77, column: 35, scope: !7)
!67 = !DILocation(line: 77, column: 52, scope: !7)
!68 = !DILocation(line: 77, column: 104, scope: !7)
!69 = !DILocation(line: 78, column: 35, scope: !7)
!70 = !DILocation(line: 78, column: 40, scope: !7)
!71 = !DILocation(line: 79, column: 35, scope: !7)
!72 = !DILocation(line: 79, column: 52, scope: !7)
!73 = !DILocation(line: 80, column: 35, scope: !7)
!74 = !DILocation(line: 80, column: 40, scope: !7)
!75 = !DILocation(line: 82, column: 24, scope: !7)
!76 = !DILocation(line: 84, column: 24, scope: !7)
!77 = !DILocation(line: 85, column: 24, scope: !7)
!78 = !DILocation(line: 88, column: 24, scope: !7)
!79 = !DILocation(line: 89, column: 24, scope: !7)
!80 = !DILocation(line: 90, column: 24, scope: !7)
!81 = !DILocation(line: 91, column: 24, scope: !7)
!82 = !DILocation(line: 93, column: 29, scope: !7)
!83 = !DILocation(line: 93, column: 53, scope: !7)
!84 = !DILocation(line: 73, column: 4, scope: !7)
