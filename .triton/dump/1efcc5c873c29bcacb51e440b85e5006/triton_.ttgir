#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [8, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<3584> : tensor<1x1024xi32, #blocked>
    %cst_0 = arith.constant dense<3584> : tensor<1x1xi64, #blocked>
    %cst_1 = arith.constant dense<0> : tensor<1x1xi64, #blocked>
    %cst_2 = arith.constant dense<288256> : tensor<1x1xi64, #blocked>
    %cst_3 = arith.constant dense<288256> : tensor<1x1xi64, #blocked1>
    %cst_4 = arith.constant dense<0> : tensor<1x1xi64, #blocked1>
    %c0_i32 = arith.constant 0 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c3584_i32 = arith.constant 3584 : i32
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<1x1024xf32, #blocked>
    %cst_6 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked>
    %cst_7 = arith.constant dense<3.584000e+03> : tensor<1x1xf32, #blocked>
    %cst_8 = arith.constant dense<59.8665199> : tensor<1x1024xf32, #blocked>
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x1024xi32, #blocked>
    %3 = tt.addptr %arg0, %0 : !tt.ptr<i64, 1>, i32
    %4 = tt.splat %3 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked>
    %5 = tt.splat %3 : (!tt.ptr<i64, 1>) -> tensor<1x1x!tt.ptr<i64, 1>, #blocked1>
    %6 = tt.load %4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked>
    %7 = tt.load %5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xi64, #blocked1>
    %8 = arith.addi %6, %cst_2 : tensor<1x1xi64, #blocked>
    %9 = arith.addi %7, %cst_3 : tensor<1x1xi64, #blocked1>
    %10 = arith.cmpi slt, %6, %cst_1 : tensor<1x1xi64, #blocked>
    %11 = arith.cmpi slt, %7, %cst_4 : tensor<1x1xi64, #blocked1>
    %12 = arith.select %10, %8, %6 : tensor<1x1xi1, #blocked>, tensor<1x1xi64, #blocked>
    %13 = arith.select %11, %9, %7 : tensor<1x1xi1, #blocked1>, tensor<1x1xi64, #blocked1>
    %14 = arith.cmpi sge, %13, %cst_4 : tensor<1x1xi64, #blocked1>
    %15 = arith.cmpi slt, %13, %cst_3 : tensor<1x1xi64, #blocked1>
    %16 = arith.andi %14, %15 : tensor<1x1xi1, #blocked1>
    %17 = arith.muli %12, %cst_0 : tensor<1x1xi64, #blocked>
    %18 = tt.broadcast %17 : (tensor<1x1xi64, #blocked>) -> tensor<1x1024xi64, #blocked>
    %19 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %20 = scf.for %arg6 = %c0_i32 to %c3584_i32 step %c1024_i32 iter_args(%arg7 = %cst_9) -> (tensor<1x1024xf32, #blocked>)  : i32 {
      %29 = tt.splat %arg6 : (i32) -> tensor<1x1024xi32, #blocked>
      %30 = arith.addi %29, %2 : tensor<1x1024xi32, #blocked>
      %31 = arith.cmpi slt, %30, %cst : tensor<1x1024xi32, #blocked>
      tt.assert %16, "index out of bounds: 0 <= tmp3 < 288256", "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor/codecache.py", "<module>", 1892 : tensor<1x1xi1, #blocked1>
      %32 = arith.extsi %30 : tensor<1x1024xi32, #blocked> to tensor<1x1024xi64, #blocked>
      %33 = arith.addi %32, %18 : tensor<1x1024xi64, #blocked>
      %34 = tt.addptr %19, %33 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi64, #blocked>
      %35 = tt.load %34, %31, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %36 = arith.mulf %35, %cst_8 : tensor<1x1024xf32, #blocked>
      %37 = arith.mulf %36, %36 : tensor<1x1024xf32, #blocked>
      %38 = arith.addf %arg7, %37 : tensor<1x1024xf32, #blocked>
      %39 = arith.select %31, %38, %arg7 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked>
      scf.yield %39 : tensor<1x1024xf32, #blocked>
    }
    %21 = "tt.reduce"(%20) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %29 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %29 : f32
    }) : (tensor<1x1024xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %22 = tt.expand_dims %21 {axis = 1 : i32} : (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<1x1xf32, #blocked>
    %23 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>, #blocked>
    %24 = arith.divf %22, %cst_7 : tensor<1x1xf32, #blocked>
    %25 = arith.addf %24, %cst_6 : tensor<1x1xf32, #blocked>
    %26 = arith.muli %0, %c3584_i32 : i32
    %27 = tt.splat %26 : (i32) -> tensor<1x1024xi32, #blocked>
    %28 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>
    scf.for %arg6 = %c0_i32 to %c3584_i32 step %c1024_i32  : i32 {
      %29 = tt.splat %arg6 : (i32) -> tensor<1x1024xi32, #blocked>
      %30 = arith.addi %29, %2 : tensor<1x1024xi32, #blocked>
      %31 = arith.cmpi slt, %30, %cst : tensor<1x1024xi32, #blocked>
      %32 = tt.addptr %23, %30 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %33 = tt.load %32, %31, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      tt.assert %16, "index out of bounds: 0 <= tmp13 < 288256", "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor/codecache.py", "<module>", 1892 : tensor<1x1xi1, #blocked1>
      %34 = arith.extsi %30 : tensor<1x1024xi32, #blocked> to tensor<1x1024xi64, #blocked>
      %35 = arith.addi %34, %18 : tensor<1x1024xi64, #blocked>
      %36 = tt.addptr %19, %35 : tensor<1x1024x!tt.ptr<f32, 1>, #blocked>, tensor<1x1024xi64, #blocked>
      %37 = tt.load %36, %31, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32, #blocked>
      %38 = arith.mulf %37, %cst_8 : tensor<1x1024xf32, #blocked>
      %39 = tt.extern_elementwise %25 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked>
      %40 = tt.broadcast %39 : (tensor<1x1xf32, #blocked>) -> tensor<1x1024xf32, #blocked>
      %41 = arith.mulf %38, %40 : tensor<1x1024xf32, #blocked>
      %42 = arith.addf %33, %cst_5 : tensor<1x1024xf32, #blocked>
      %43 = arith.mulf %41, %42 : tensor<1x1024xf32, #blocked>
      %44 = arith.addi %30, %27 : tensor<1x1024xi32, #blocked>
      %45 = tt.addptr %28, %44 : tensor<1x1024x!tt.ptr<bf16, 1>, #blocked>, tensor<1x1024xi32, #blocked>
      %46 = arith.truncf %43 : tensor<1x1024xf32, #blocked> to tensor<1x1024xbf16, #blocked>
      tt.store %45, %46, %31 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xbf16, #blocked>
    }
    tt.return
  }
}
