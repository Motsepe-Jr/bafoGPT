; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_1 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_1 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_1 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp13 < 288256"
@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp3 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 6, !dbg !10
  %10 = and i32 %9, 3, !dbg !10
  %11 = or i32 %10, 4, !dbg !10
  %12 = and i32 %7, 7, !dbg !10
  %urem = shl i32 %7, 3, !dbg !11
  %13 = and i32 %urem, 504, !dbg !11
  %14 = or i32 %13, 4, !dbg !11
  %15 = shl i32 %7, 1, !dbg !11
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !12
  %17 = shl i32 %16, 3, !dbg !13
  %18 = or i32 %17, %10, !dbg !14
  %19 = or i32 %17, %11, !dbg !14
  %20 = or i32 %17, %12, !dbg !14
  %21 = sext i32 %18 to i64, !dbg !15
  %22 = getelementptr i64, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = sext i32 %19 to i64, !dbg !15
  %24 = getelementptr i64, ptr addrspace(1) %0, i64 %23, !dbg !15
  %25 = sext i32 %20 to i64, !dbg !15
  %26 = getelementptr i64, ptr addrspace(1) %0, i64 %25, !dbg !15
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #6, !dbg !16
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #6, !dbg !16
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #6, !dbg !16
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #6, !dbg !16
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #6, !dbg !16
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #6, !dbg !16
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #6, !dbg !16
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #6, !dbg !16
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #6, !dbg !16
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #6, !dbg !16
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #6, !dbg !16
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #6, !dbg !16
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #6, !dbg !16
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #6, !dbg !16
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #6, !dbg !16
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #6, !dbg !16
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #6, !dbg !16
  %44 = add i64 %27, 288256, !dbg !17
  %45 = add i64 %35, 288256, !dbg !17
  %46 = add i64 %43, 288256, !dbg !17
  %47 = icmp slt i64 %27, 0, !dbg !18
  %48 = icmp slt i64 %35, 0, !dbg !18
  %49 = icmp slt i64 %43, 0, !dbg !18
  %50 = select i1 %47, i64 %44, i64 %27, !dbg !19
  %51 = select i1 %48, i64 %45, i64 %35, !dbg !19
  %52 = select i1 %49, i64 %46, i64 %43, !dbg !19
  %53 = icmp ugt i64 %52, 288255, !dbg !20
  %54 = mul i64 %50, 3584, !dbg !21
  %55 = mul i64 %51, 3584, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %54
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %55
  br label %58, !dbg !22

58:                                               ; preds = %6, %64
  %59 = phi i32 [ 0, %6 ], [ %111, %64 ]
  %60 = phi <16 x float> [ zeroinitializer, %6 ], [ %110, %64 ]
  %61 = or i32 %59, %13, !dbg !23
  %62 = or i32 %59, %14, !dbg !23
  br i1 %53, label %63, label %64, !dbg !24

63:                                               ; preds = %58
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 883, ptr nonnull @assertFunc_0, i64 1), !dbg !24
  br label %64, !dbg !24

64:                                               ; preds = %63, %58
  %65 = zext nneg i32 %61 to i64, !dbg !25
  %66 = zext nneg i32 %62 to i64, !dbg !25
  %67 = getelementptr float, ptr addrspace(1) %56, i64 %65, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %56, i64 %66, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %57, i64 %65, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %57, i64 %66, !dbg !26
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !27
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !27
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !27
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !27
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !27
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !27
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !27
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !27
  %91 = insertelement <16 x i32> poison, i32 %72, i64 0, !dbg !27
  %92 = insertelement <16 x i32> %91, i32 %73, i64 1, !dbg !27
  %93 = insertelement <16 x i32> %92, i32 %74, i64 2, !dbg !27
  %94 = insertelement <16 x i32> %93, i32 %75, i64 3, !dbg !27
  %95 = insertelement <16 x i32> %94, i32 %77, i64 4, !dbg !27
  %96 = insertelement <16 x i32> %95, i32 %78, i64 5, !dbg !27
  %97 = insertelement <16 x i32> %96, i32 %79, i64 6, !dbg !27
  %98 = insertelement <16 x i32> %97, i32 %80, i64 7, !dbg !27
  %99 = insertelement <16 x i32> %98, i32 %82, i64 8, !dbg !27
  %100 = insertelement <16 x i32> %99, i32 %83, i64 9, !dbg !27
  %101 = insertelement <16 x i32> %100, i32 %84, i64 10, !dbg !27
  %102 = insertelement <16 x i32> %101, i32 %85, i64 11, !dbg !27
  %103 = insertelement <16 x i32> %102, i32 %87, i64 12, !dbg !27
  %104 = insertelement <16 x i32> %103, i32 %88, i64 13, !dbg !27
  %105 = insertelement <16 x i32> %104, i32 %89, i64 14, !dbg !27
  %106 = insertelement <16 x i32> %105, i32 %90, i64 15, !dbg !27
  %107 = bitcast <16 x i32> %106 to <16 x float>, !dbg !27
  %108 = fmul <16 x float> %107, <float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000, float 0x404DEEEA20000000>, !dbg !28
  %109 = fmul <16 x float> %108, %108, !dbg !29
  %110 = fadd <16 x float> %60, %109, !dbg !30
  %111 = add nuw nsw i32 %59, 512, !dbg !22
  %112 = icmp ult i32 %59, 3072, !dbg !22
  br i1 %112, label %58, label %113, !dbg !22

113:                                              ; preds = %64
  %114 = lshr i32 %7, 5, !dbg !10
  %115 = and i32 %114, 1, !dbg !11
  %116 = and i32 %15, 510, !dbg !11
  %shift = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %117 = fadd <16 x float> %110, %shift, !dbg !31
  %shift92 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %118 = fadd <16 x float> %shift92, %117, !dbg !31
  %shift93 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %119 = fadd <16 x float> %shift93, %118, !dbg !31
  %shift94 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %120 = fadd <16 x float> %shift94, %119, !dbg !31
  %shift95 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %121 = fadd <16 x float> %shift95, %120, !dbg !31
  %shift96 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %122 = fadd <16 x float> %shift96, %121, !dbg !31
  %shift97 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %123 = fadd <16 x float> %shift97, %122, !dbg !31
  %124 = extractelement <16 x float> %123, i64 0, !dbg !31
  %shift98 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %125 = fadd <16 x float> %110, %shift98, !dbg !31
  %shift99 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 10, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %126 = fadd <16 x float> %shift99, %125, !dbg !31
  %shift100 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 11, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %127 = fadd <16 x float> %shift100, %126, !dbg !31
  %shift101 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 12, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %128 = fadd <16 x float> %shift101, %127, !dbg !31
  %shift102 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 13, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %129 = fadd <16 x float> %shift102, %128, !dbg !31
  %shift103 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 14, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %130 = fadd <16 x float> %shift103, %129, !dbg !31
  %shift104 = shufflevector <16 x float> %110, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %131 = fadd <16 x float> %shift104, %130, !dbg !31
  %132 = extractelement <16 x float> %131, i64 8, !dbg !31
  %133 = bitcast float %124 to i32, !dbg !37
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 16, i32 31), !dbg !37
  %135 = bitcast i32 %134 to float, !dbg !37
  %136 = fadd float %124, %135, !dbg !31
  %137 = bitcast float %136 to i32, !dbg !37
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !37
  %139 = bitcast i32 %138 to float, !dbg !37
  %140 = fadd float %136, %139, !dbg !31
  %141 = bitcast float %140 to i32, !dbg !37
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !37
  %143 = bitcast i32 %142 to float, !dbg !37
  %144 = fadd float %140, %143, !dbg !31
  %145 = bitcast float %144 to i32, !dbg !37
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !37
  %147 = bitcast i32 %146 to float, !dbg !37
  %148 = fadd float %144, %147, !dbg !31
  %149 = bitcast float %148 to i32, !dbg !37
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !37
  %151 = bitcast i32 %150 to float, !dbg !37
  %152 = fadd float %148, %151, !dbg !31
  %153 = bitcast float %132 to i32, !dbg !37
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 16, i32 31), !dbg !37
  %155 = bitcast i32 %154 to float, !dbg !37
  %156 = fadd float %132, %155, !dbg !31
  %157 = bitcast float %156 to i32, !dbg !37
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 8, i32 31), !dbg !37
  %159 = bitcast i32 %158 to float, !dbg !37
  %160 = fadd float %156, %159, !dbg !31
  %161 = bitcast float %160 to i32, !dbg !37
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !37
  %163 = bitcast i32 %162 to float, !dbg !37
  %164 = fadd float %160, %163, !dbg !31
  %165 = bitcast float %164 to i32, !dbg !37
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !37
  %167 = bitcast i32 %166 to float, !dbg !37
  %168 = fadd float %164, %167, !dbg !31
  %169 = bitcast float %168 to i32, !dbg !37
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !37
  %171 = bitcast i32 %170 to float, !dbg !37
  %172 = fadd float %168, %171, !dbg !31
  %173 = icmp eq i32 %8, 0, !dbg !37
  %174 = shl nuw nsw i32 %10, 1, !dbg !37
  %175 = or i32 %174, %115, !dbg !37
  %176 = zext nneg i32 %175 to i64, !dbg !37
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i64 %176, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, float %152, i1 %173) #6, !dbg !37
  %178 = shl nuw nsw i32 %11, 1, !dbg !37
  %179 = or i32 %178, %115, !dbg !37
  %180 = zext nneg i32 %179 to i64, !dbg !37
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i64 %180, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, float %172, i1 %173) #6, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %182 = icmp slt i32 %7, 16, !dbg !37
  %183 = sext i32 %7 to i64, !dbg !37
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i64 %183, !dbg !37
  %185 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %184, i1 %182) #6, !dbg !37
  %186 = bitcast float %185 to i32, !dbg !37
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !37
  %188 = bitcast i32 %187 to float, !dbg !37
  %189 = fadd float %185, %188, !dbg !31
  %190 = and i32 %7, 1, !dbg !37
  %191 = icmp eq i32 %190, 0, !dbg !37
  %192 = and i1 %182, %191, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, float %189, i1 %192) #6, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %193 = zext nneg i32 %174 to i64, !dbg !37
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i64 %193, !dbg !37
  %195 = load float, ptr addrspace(3) %194, align 4, !dbg !37
  %196 = zext nneg i32 %178 to i64, !dbg !37
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i64 %196, !dbg !37
  %198 = load float, ptr addrspace(3) %197, align 4, !dbg !37
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float 3.584000e+03) #6, !dbg !39
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float 3.584000e+03) #6, !dbg !39
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float 3.584000e+03) #6, !dbg !39
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float 3.584000e+03) #6, !dbg !39
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float 3.584000e+03) #6, !dbg !39
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float 3.584000e+03) #6, !dbg !39
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float 3.584000e+03) #6, !dbg !39
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float 3.584000e+03) #6, !dbg !39
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float 3.584000e+03) #6, !dbg !39
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float 3.584000e+03) #6, !dbg !39
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float 3.584000e+03) #6, !dbg !39
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float 3.584000e+03) #6, !dbg !39
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float 3.584000e+03) #6, !dbg !39
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float 3.584000e+03) #6, !dbg !39
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float 3.584000e+03) #6, !dbg !39
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float 3.584000e+03) #6, !dbg !39
  %215 = fadd float %199, 0x3EE4F8B580000000, !dbg !40
  %216 = fadd float %207, 0x3EE4F8B580000000, !dbg !40
  %217 = mul i32 %18, 3584, !dbg !41
  %218 = mul i32 %19, 3584, !dbg !41
  %219 = zext nneg i32 %116 to i64
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i64 %219
  %221 = zext nneg i32 %13 to i64
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i64 %221
  %223 = getelementptr inbounds <8 x float>, ptr addrspace(3) %222, i64 0, i64 1
  %224 = getelementptr inbounds <8 x float>, ptr addrspace(3) %222, i64 0, i64 2
  %225 = getelementptr inbounds <8 x float>, ptr addrspace(3) %222, i64 0, i64 3
  %226 = getelementptr inbounds <8 x float>, ptr addrspace(3) %222, i64 0, i64 4
  %227 = getelementptr inbounds <8 x float>, ptr addrspace(3) %222, i64 0, i64 5
  %228 = getelementptr inbounds <8 x float>, ptr addrspace(3) %222, i64 0, i64 6
  %229 = getelementptr inbounds <8 x float>, ptr addrspace(3) %222, i64 0, i64 7
  br label %230, !dbg !42

230:                                              ; preds = %113, %__nv_rsqrtf.exit25
  %231 = phi i32 [ 0, %113 ], [ %414, %__nv_rsqrtf.exit25 ]
  %232 = or i32 %231, %116, !dbg !43
  %233 = or i32 %231, %13, !dbg !43
  %234 = or i32 %231, %14, !dbg !43
  %235 = zext nneg i32 %232 to i64, !dbg !44
  %236 = getelementptr float, ptr addrspace(1) %2, i64 %235, !dbg !44
  %237 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %236, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !45
  %238 = extractvalue { i32, i32 } %237, 0, !dbg !45
  %239 = extractvalue { i32, i32 } %237, 1, !dbg !45
  %240 = insertelement <2 x i32> poison, i32 %238, i64 0, !dbg !45
  %241 = insertelement <2 x i32> %240, i32 %239, i64 1, !dbg !45
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !45
  br i1 %53, label %243, label %244, !dbg !46

243:                                              ; preds = %230
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 883, ptr nonnull @assertFunc_1, i64 1), !dbg !46
  br label %244, !dbg !46

244:                                              ; preds = %243, %230
  %245 = zext nneg i32 %233 to i64, !dbg !47
  %246 = zext nneg i32 %234 to i64, !dbg !47
  %247 = getelementptr float, ptr addrspace(1) %56, i64 %245, !dbg !48
  %248 = getelementptr float, ptr addrspace(1) %56, i64 %246, !dbg !48
  %249 = getelementptr float, ptr addrspace(1) %57, i64 %245, !dbg !48
  %250 = getelementptr float, ptr addrspace(1) %57, i64 %246, !dbg !48
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %247, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !49
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !49
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !49
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !49
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !49
  %256 = bitcast i32 %252 to float, !dbg !49
  %257 = bitcast i32 %253 to float, !dbg !49
  %258 = bitcast i32 %254 to float, !dbg !49
  %259 = bitcast i32 %255 to float, !dbg !49
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %248, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !49
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !49
  %262 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !49
  %263 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !49
  %264 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !49
  %265 = bitcast i32 %261 to float, !dbg !49
  %266 = bitcast i32 %262 to float, !dbg !49
  %267 = bitcast i32 %263 to float, !dbg !49
  %268 = bitcast i32 %264 to float, !dbg !49
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %249, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !49
  %270 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !49
  %271 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !49
  %272 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !49
  %273 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !49
  %274 = bitcast i32 %270 to float, !dbg !49
  %275 = bitcast i32 %271 to float, !dbg !49
  %276 = bitcast i32 %272 to float, !dbg !49
  %277 = bitcast i32 %273 to float, !dbg !49
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %250, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !49
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !49
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !49
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !49
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !49
  %283 = bitcast i32 %279 to float, !dbg !49
  %284 = bitcast i32 %280 to float, !dbg !49
  %285 = bitcast i32 %281 to float, !dbg !49
  %286 = bitcast i32 %282 to float, !dbg !49
  %287 = fmul float %256, 0x404DEEEA20000000, !dbg !50
  %288 = fmul float %257, 0x404DEEEA20000000, !dbg !50
  %289 = fmul float %258, 0x404DEEEA20000000, !dbg !50
  %290 = fmul float %259, 0x404DEEEA20000000, !dbg !50
  %291 = fmul float %265, 0x404DEEEA20000000, !dbg !50
  %292 = fmul float %266, 0x404DEEEA20000000, !dbg !50
  %293 = fmul float %267, 0x404DEEEA20000000, !dbg !50
  %294 = fmul float %268, 0x404DEEEA20000000, !dbg !50
  %295 = fmul float %274, 0x404DEEEA20000000, !dbg !50
  %296 = fmul float %275, 0x404DEEEA20000000, !dbg !50
  %297 = fmul float %276, 0x404DEEEA20000000, !dbg !50
  %298 = fmul float %277, 0x404DEEEA20000000, !dbg !50
  %299 = fmul float %283, 0x404DEEEA20000000, !dbg !50
  %300 = fmul float %284, 0x404DEEEA20000000, !dbg !50
  %301 = fmul float %285, 0x404DEEEA20000000, !dbg !50
  %302 = fmul float %286, 0x404DEEEA20000000, !dbg !50
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i = icmp eq i32 %303, 0, !dbg !51
  br i1 %.not.i, label %306, label %304, !dbg !51

304:                                              ; preds = %244
  %305 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %215), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

306:                                              ; preds = %244
  %307 = tail call float @llvm.nvvm.rsqrt.approx.f(float %215), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %304, %306
  %.0.i = phi float [ %305, %304 ], [ %307, %306 ], !dbg !51
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i23 = icmp eq i32 %315, 0, !dbg !51
  br i1 %.not.i23, label %318, label %316, !dbg !51

316:                                              ; preds = %__nv_rsqrtf.exit
  %317 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %216), !dbg !51
  br label %__nv_rsqrtf.exit25, !dbg !51

318:                                              ; preds = %__nv_rsqrtf.exit
  %319 = tail call float @llvm.nvvm.rsqrt.approx.f(float %216), !dbg !51
  br label %__nv_rsqrtf.exit25, !dbg !51

__nv_rsqrtf.exit25:                               ; preds = %316, %318
  %.0.i24 = phi float [ %317, %316 ], [ %319, %318 ], !dbg !51
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %327 = fmul float %287, %.0.i, !dbg !52
  %328 = fmul float %288, %.0.i, !dbg !52
  %329 = fmul float %289, %.0.i, !dbg !52
  %330 = fmul float %290, %.0.i, !dbg !52
  %331 = fmul float %291, %.0.i, !dbg !52
  %332 = fmul float %292, %.0.i, !dbg !52
  %333 = fmul float %293, %.0.i, !dbg !52
  %334 = fmul float %294, %.0.i, !dbg !52
  %335 = fmul float %295, %.0.i24, !dbg !52
  %336 = fmul float %296, %.0.i24, !dbg !52
  %337 = fmul float %297, %.0.i24, !dbg !52
  %338 = fmul float %298, %.0.i24, !dbg !52
  %339 = fmul float %299, %.0.i24, !dbg !52
  %340 = fmul float %300, %.0.i24, !dbg !52
  %341 = fmul float %301, %.0.i24, !dbg !52
  %342 = fmul float %302, %.0.i24, !dbg !52
  %343 = fadd <2 x float> %242, <float 1.000000e+00, float 1.000000e+00>, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  store <2 x float> %343, ptr addrspace(3) %220, align 8, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %344 = load float, ptr addrspace(3) %222, align 32, !dbg !54
  %345 = load float, ptr addrspace(3) %223, align 4, !dbg !54
  %346 = load float, ptr addrspace(3) %224, align 8, !dbg !54
  %347 = load float, ptr addrspace(3) %225, align 4, !dbg !54
  %348 = load float, ptr addrspace(3) %226, align 16, !dbg !54
  %349 = load float, ptr addrspace(3) %227, align 4, !dbg !54
  %350 = load float, ptr addrspace(3) %228, align 8, !dbg !54
  %351 = load float, ptr addrspace(3) %229, align 4, !dbg !54
  %352 = fmul float %327, %344, !dbg !54
  %353 = fmul float %328, %345, !dbg !54
  %354 = fmul float %329, %346, !dbg !54
  %355 = fmul float %330, %347, !dbg !54
  %356 = fmul float %331, %348, !dbg !54
  %357 = fmul float %332, %349, !dbg !54
  %358 = fmul float %333, %350, !dbg !54
  %359 = fmul float %334, %351, !dbg !54
  %360 = fmul float %335, %344, !dbg !54
  %361 = fmul float %336, %345, !dbg !54
  %362 = fmul float %337, %346, !dbg !54
  %363 = fmul float %338, %347, !dbg !54
  %364 = fmul float %339, %348, !dbg !54
  %365 = fmul float %340, %349, !dbg !54
  %366 = fmul float %341, %350, !dbg !54
  %367 = fmul float %342, %351, !dbg !54
  %368 = add i32 %233, %217, !dbg !55
  %369 = add i32 %233, %218, !dbg !55
  %370 = sext i32 %368 to i64, !dbg !56
  %371 = getelementptr i16, ptr addrspace(1) %3, i64 %370, !dbg !56
  %372 = sext i32 %369 to i64, !dbg !56
  %373 = getelementptr i16, ptr addrspace(1) %3, i64 %372, !dbg !56
  %374 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %352) #6, !dbg !57
  %375 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %353) #6, !dbg !57
  %376 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %354) #6, !dbg !57
  %377 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %355) #6, !dbg !57
  %378 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %356) #6, !dbg !57
  %379 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %357) #6, !dbg !57
  %380 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %358) #6, !dbg !57
  %381 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %359) #6, !dbg !57
  %382 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %360) #6, !dbg !57
  %383 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %361) #6, !dbg !57
  %384 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %362) #6, !dbg !57
  %385 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %363) #6, !dbg !57
  %386 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %364) #6, !dbg !57
  %387 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %365) #6, !dbg !57
  %388 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %366) #6, !dbg !57
  %389 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %367) #6, !dbg !57
  %390 = insertelement <2 x i16> undef, i16 %374, i64 0, !dbg !57
  %391 = insertelement <2 x i16> %390, i16 %375, i64 1, !dbg !57
  %392 = bitcast <2 x i16> %391 to i32, !dbg !57
  %393 = insertelement <2 x i16> undef, i16 %376, i64 0, !dbg !57
  %394 = insertelement <2 x i16> %393, i16 %377, i64 1, !dbg !57
  %395 = bitcast <2 x i16> %394 to i32, !dbg !57
  %396 = insertelement <2 x i16> undef, i16 %378, i64 0, !dbg !57
  %397 = insertelement <2 x i16> %396, i16 %379, i64 1, !dbg !57
  %398 = bitcast <2 x i16> %397 to i32, !dbg !57
  %399 = insertelement <2 x i16> undef, i16 %380, i64 0, !dbg !57
  %400 = insertelement <2 x i16> %399, i16 %381, i64 1, !dbg !57
  %401 = bitcast <2 x i16> %400 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %392, i32 %395, i32 %398, i32 %401, ptr addrspace(1) %371, i1 true) #6, !dbg !57
  %402 = insertelement <2 x i16> undef, i16 %382, i64 0, !dbg !57
  %403 = insertelement <2 x i16> %402, i16 %383, i64 1, !dbg !57
  %404 = bitcast <2 x i16> %403 to i32, !dbg !57
  %405 = insertelement <2 x i16> undef, i16 %384, i64 0, !dbg !57
  %406 = insertelement <2 x i16> %405, i16 %385, i64 1, !dbg !57
  %407 = bitcast <2 x i16> %406 to i32, !dbg !57
  %408 = insertelement <2 x i16> undef, i16 %386, i64 0, !dbg !57
  %409 = insertelement <2 x i16> %408, i16 %387, i64 1, !dbg !57
  %410 = bitcast <2 x i16> %409 to i32, !dbg !57
  %411 = insertelement <2 x i16> undef, i16 %388, i64 0, !dbg !57
  %412 = insertelement <2 x i16> %411, i16 %389, i64 1, !dbg !57
  %413 = bitcast <2 x i16> %412 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %404, i32 %407, i32 %410, i32 %413, ptr addrspace(1) %373, i1 true) #6, !dbg !57
  %414 = add nuw nsw i32 %231, 512, !dbg !42
  %415 = icmp ult i32 %231, 3072, !dbg !42
  br i1 %415, label %230, label %416, !dbg !42

416:                                              ; preds = %__nv_rsqrtf.exit25
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cdsnvvi5dejthdgnbnva7xbn653jzpevgdurkwhkdf5kctlq2exo.py", directory: "/tmp/torchinductor_zeus/ds")
!4 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 44, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 28, scope: !7)
!13 = !DILocation(line: 21, column: 33, scope: !7)
!14 = !DILocation(line: 22, column: 23, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 32, column: 22, scope: !7)
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 34, column: 36, scope: !7)
!20 = !DILocation(line: 35, column: 40, scope: !7)
!21 = !DILocation(line: 36, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 36, scope: !7)
!23 = !DILocation(line: 29, column: 27, scope: !7)
!24 = !DILocation(line: 35, column: 56, scope: !7)
!25 = !DILocation(line: 36, column: 40, scope: !7)
!26 = !DILocation(line: 36, column: 34, scope: !7)
!27 = !DILocation(line: 36, column: 53, scope: !7)
!28 = !DILocation(line: 38, column: 22, scope: !7)
!29 = !DILocation(line: 39, column: 22, scope: !7)
!30 = !DILocation(line: 42, column: 39, scope: !7)
!31 = !DILocation(line: 233, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 243, column: 36, scope: !32, inlinedAt: !36)
!36 = !DILocation(line: 43, column: 25, scope: !32)
!37 = !DILocation(line: 243, column: 36, scope: !34, inlinedAt: !38)
!38 = !DILocation(line: 43, column: 25, scope: !34)
!39 = !DILocation(line: 57, column: 23, scope: !7)
!40 = !DILocation(line: 59, column: 24, scope: !7)
!41 = !DILocation(line: 66, column: 40, scope: !7)
!42 = !DILocation(line: 44, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 27, scope: !7)
!44 = !DILocation(line: 48, column: 35, scope: !7)
!45 = !DILocation(line: 48, column: 40, scope: !7)
!46 = !DILocation(line: 52, column: 58, scope: !7)
!47 = !DILocation(line: 53, column: 41, scope: !7)
!48 = !DILocation(line: 53, column: 35, scope: !7)
!49 = !DILocation(line: 53, column: 55, scope: !7)
!50 = !DILocation(line: 55, column: 24, scope: !7)
!51 = !DILocation(line: 60, column: 30, scope: !7)
!52 = !DILocation(line: 61, column: 24, scope: !7)
!53 = !DILocation(line: 63, column: 24, scope: !7)
!54 = !DILocation(line: 64, column: 24, scope: !7)
!55 = !DILocation(line: 66, column: 35, scope: !7)
!56 = !DILocation(line: 66, column: 29, scope: !7)
!57 = !DILocation(line: 66, column: 53, scope: !7)
!58 = !DILocation(line: 44, column: 4, scope: !7)
