; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d9d10de11de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %14 = lshr i32 %13, 5, !dbg !10
  %urem = and i32 %13, 255, !dbg !10
  %15 = shl nuw nsw i32 %urem, 3, !dbg !10
  %16 = shl nuw nsw i32 %urem, 2, !dbg !10
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %18 = mul i32 %17, 2304, !dbg !12
  %19 = add i32 %15, %18, !dbg !13
  %20 = sext i32 %19 to i64, !dbg !14
  %21 = getelementptr i16, ptr addrspace(1) %3, i64 %20, !dbg !14
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !15
  %27 = trunc i32 %23 to i16, !dbg !15
  %extelt.offset24 = lshr i32 %23, 16, !dbg !15
  %28 = trunc i32 %extelt.offset24 to i16, !dbg !15
  %29 = trunc i32 %24 to i16, !dbg !15
  %extelt.offset25 = lshr i32 %24, 16, !dbg !15
  %30 = trunc i32 %extelt.offset25 to i16, !dbg !15
  %31 = trunc i32 %25 to i16, !dbg !15
  %extelt.offset26 = lshr i32 %25, 16, !dbg !15
  %32 = trunc i32 %extelt.offset26 to i16, !dbg !15
  %33 = trunc i32 %26 to i16, !dbg !15
  %extelt.offset27 = lshr i32 %26, 16, !dbg !15
  %34 = trunc i32 %extelt.offset27 to i16, !dbg !15
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !16
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !16
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !16
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !16
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !16
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #6, !dbg !16
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #6, !dbg !16
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #6, !dbg !16
  %43 = fmul float %35, %35, !dbg !17
  %44 = fmul float %36, %36, !dbg !17
  %45 = fmul float %37, %37, !dbg !17
  %46 = fmul float %38, %38, !dbg !17
  %47 = fmul float %39, %39, !dbg !17
  %48 = fmul float %40, %40, !dbg !17
  %49 = fmul float %41, %41, !dbg !17
  %50 = fmul float %42, %42, !dbg !17
  %51 = or i32 %15, 2048, !dbg !18
  %52 = icmp ult i32 %51, 2304, !dbg !19
  %53 = add i32 %51, %18, !dbg !13
  %54 = sext i32 %53 to i64, !dbg !14
  %55 = getelementptr i16, ptr addrspace(1) %3, i64 %54, !dbg !14
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #6, !dbg !15
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !15
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !15
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !15
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !15
  %61 = trunc i32 %57 to i16, !dbg !15
  %extelt.offset24.1 = lshr i32 %57, 16, !dbg !15
  %62 = trunc i32 %extelt.offset24.1 to i16, !dbg !15
  %63 = trunc i32 %58 to i16, !dbg !15
  %extelt.offset25.1 = lshr i32 %58, 16, !dbg !15
  %64 = trunc i32 %extelt.offset25.1 to i16, !dbg !15
  %65 = trunc i32 %59 to i16, !dbg !15
  %extelt.offset26.1 = lshr i32 %59, 16, !dbg !15
  %66 = trunc i32 %extelt.offset26.1 to i16, !dbg !15
  %67 = trunc i32 %60 to i16, !dbg !15
  %extelt.offset27.1 = lshr i32 %60, 16, !dbg !15
  %68 = trunc i32 %extelt.offset27.1 to i16, !dbg !15
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #6, !dbg !16
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #6, !dbg !16
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #6, !dbg !16
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #6, !dbg !16
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #6, !dbg !16
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #6, !dbg !16
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #6, !dbg !16
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #6, !dbg !16
  %77 = fmul float %69, %69, !dbg !17
  %78 = fmul float %70, %70, !dbg !17
  %79 = fmul float %71, %71, !dbg !17
  %80 = fmul float %72, %72, !dbg !17
  %81 = fmul float %73, %73, !dbg !17
  %82 = fmul float %74, %74, !dbg !17
  %83 = fmul float %75, %75, !dbg !17
  %84 = fmul float %76, %76, !dbg !17
  %85 = select i1 %52, float %77, float -0.000000e+00, !dbg !20
  %86 = fadd float %43, %85, !dbg !20
  %87 = select i1 %52, float %78, float -0.000000e+00, !dbg !20
  %88 = fadd float %44, %87, !dbg !20
  %89 = select i1 %52, float %79, float -0.000000e+00, !dbg !20
  %90 = fadd float %45, %89, !dbg !20
  %91 = select i1 %52, float %80, float -0.000000e+00, !dbg !20
  %92 = fadd float %46, %91, !dbg !20
  %93 = select i1 %52, float %81, float -0.000000e+00, !dbg !20
  %94 = fadd float %47, %93, !dbg !20
  %95 = select i1 %52, float %82, float -0.000000e+00, !dbg !20
  %96 = fadd float %48, %95, !dbg !20
  %97 = select i1 %52, float %83, float -0.000000e+00, !dbg !20
  %98 = fadd float %49, %97, !dbg !20
  %99 = select i1 %52, float %84, float -0.000000e+00, !dbg !20
  %100 = fadd float %50, %99, !dbg !20
  %101 = and i32 %13, 31, !dbg !10
  %102 = and i32 %14, 7, !dbg !10
  %103 = or i32 %15, 4, !dbg !10
  %104 = or i32 %16, 1024, !dbg !10
  %105 = fadd float %86, %88, !dbg !21
  %106 = fadd float %90, %105, !dbg !21
  %107 = fadd float %92, %106, !dbg !21
  %108 = fadd float %94, %107, !dbg !21
  %109 = fadd float %96, %108, !dbg !21
  %110 = fadd float %98, %109, !dbg !21
  %111 = fadd float %100, %110, !dbg !21
  %112 = bitcast float %111 to i32, !dbg !27
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 16, i32 31), !dbg !27
  %114 = bitcast i32 %113 to float, !dbg !27
  %115 = fadd float %111, %114, !dbg !21
  %116 = bitcast float %115 to i32, !dbg !27
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 8, i32 31), !dbg !27
  %118 = bitcast i32 %117 to float, !dbg !27
  %119 = fadd float %115, %118, !dbg !21
  %120 = bitcast float %119 to i32, !dbg !27
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !27
  %122 = bitcast i32 %121 to float, !dbg !27
  %123 = fadd float %119, %122, !dbg !21
  %124 = bitcast float %123 to i32, !dbg !27
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !27
  %126 = bitcast i32 %125 to float, !dbg !27
  %127 = fadd float %123, %126, !dbg !21
  %128 = bitcast float %127 to i32, !dbg !27
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !27
  %130 = bitcast i32 %129 to float, !dbg !27
  %131 = fadd float %127, %130, !dbg !21
  %132 = icmp eq i32 %101, 0, !dbg !27
  %133 = zext nneg i32 %102 to i64, !dbg !27
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, float %131, i1 %132) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %135 = icmp slt i32 %13, 8, !dbg !27
  %136 = sext i32 %13 to i64, !dbg !27
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i64 %136, !dbg !27
  %138 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %137, i1 %135) #6, !dbg !27
  %139 = bitcast float %138 to i32, !dbg !27
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !27
  %141 = bitcast i32 %140 to float, !dbg !27
  %142 = fadd float %138, %141, !dbg !21
  %143 = bitcast float %142 to i32, !dbg !27
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !27
  %145 = bitcast i32 %144 to float, !dbg !27
  %146 = fadd float %142, %145, !dbg !21
  %147 = bitcast float %146 to i32, !dbg !27
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !27
  %149 = bitcast i32 %148 to float, !dbg !27
  %150 = fadd float %146, %149, !dbg !21
  %151 = and i32 %13, 7, !dbg !27
  %152 = icmp eq i32 %151, 0, !dbg !27
  %153 = and i1 %135, %152, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, float %150, i1 %153) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %154 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %155 = insertelement <1 x float> undef, float %154, i64 0, !dbg !29
  store <1 x float> %155, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %156 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float 2.304000e+03) #6, !dbg !30
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 2.304000e+03) #6, !dbg !30
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 2.304000e+03) #6, !dbg !30
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 2.304000e+03) #6, !dbg !30
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 2.304000e+03) #6, !dbg !30
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 2.304000e+03) #6, !dbg !30
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 2.304000e+03) #6, !dbg !30
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 2.304000e+03) #6, !dbg !30
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 2.304000e+03) #6, !dbg !30
  %166 = fadd float %157, 0x3EE4F8B580000000, !dbg !31
  %167 = fadd float %158, 0x3EE4F8B580000000, !dbg !31
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %.not.i = icmp eq i32 %168, 0, !dbg !29
  br i1 %.not.i, label %171, label %169, !dbg !29

169:                                              ; preds = %12
  %170 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %166), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

171:                                              ; preds = %12
  %172 = tail call float @llvm.nvvm.rsqrt.approx.f(float %166), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %169, %171
  %.0.i = phi float [ %170, %169 ], [ %172, %171 ], !dbg !29
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %.not.i28 = icmp eq i32 %173, 0, !dbg !29
  br i1 %.not.i28, label %176, label %174, !dbg !29

174:                                              ; preds = %__nv_rsqrtf.exit
  %175 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %167), !dbg !29
  br label %__nv_rsqrtf.exit30, !dbg !29

176:                                              ; preds = %__nv_rsqrtf.exit
  %177 = tail call float @llvm.nvvm.rsqrt.approx.f(float %167), !dbg !29
  br label %__nv_rsqrtf.exit30, !dbg !29

__nv_rsqrtf.exit30:                               ; preds = %174, %176
  %.0.i29 = phi float [ %175, %174 ], [ %177, %176 ], !dbg !29
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %185 = sext i32 %17 to i64, !dbg !33
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !33
  %187 = icmp eq i32 %urem, 0, !dbg !34
  %188 = bitcast float %.0.i to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %186, i1 %187) #6, !dbg !34
  %189 = getelementptr float, ptr addrspace(1) %6, i64 %185, !dbg !35
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #6, !dbg !36
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #6, !dbg !36
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #6, !dbg !36
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #6, !dbg !36
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #6, !dbg !36
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #6, !dbg !36
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #6, !dbg !36
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #6, !dbg !36
  %198 = zext nneg i32 %15 to i64
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i64 %198
  %200 = zext nneg i32 %16 to i64
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i64 %200
  %202 = zext nneg i32 %104 to i64
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %202
  %204 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %201, i64 0, i64 1
  %205 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %201, i64 0, i64 2
  %206 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %201, i64 0, i64 3
  %207 = insertelement <8 x float> poison, float %.0.i29, i64 0, !dbg !37
  %208 = shufflevector <8 x float> %207, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %209 = insertelement <8 x i32> undef, i32 %190, i64 0, !dbg !38
  %210 = bitcast <8 x i32> %209 to <8 x float>, !dbg !38
  %211 = shufflevector <8 x float> %210, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !38
  br label %212, !dbg !39

212:                                              ; preds = %__nv_rsqrtf.exit30, %212
  %213 = phi i1 [ true, %__nv_rsqrtf.exit30 ], [ false, %212 ]
  %214 = phi i32 [ 0, %__nv_rsqrtf.exit30 ], [ 2048, %212 ]
  %215 = phi <8 x float> [ zeroinitializer, %__nv_rsqrtf.exit30 ], [ %370, %212 ]
  %216 = or i32 %214, %15, !dbg !40
  %217 = or i32 %214, %103, !dbg !40
  %218 = or i32 %214, %16, !dbg !40
  %219 = or i32 %214, %104, !dbg !40
  %220 = icmp ult i32 %216, 2304, !dbg !41
  %221 = icmp ult i32 %218, 2304, !dbg !41
  %222 = icmp ult i32 %219, 2304, !dbg !41
  %223 = add i32 %216, %18, !dbg !42
  %224 = add i32 %217, %18, !dbg !42
  %225 = add i32 %218, %18, !dbg !42
  %226 = add i32 %219, %18, !dbg !42
  %227 = sext i32 %223 to i64, !dbg !43
  %228 = getelementptr i16, ptr addrspace(1) %3, i64 %227, !dbg !43
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %228, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220) #6, !dbg !44
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !44
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !44
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !44
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !44
  %234 = trunc i32 %230 to i16, !dbg !44
  %extelt.offset = lshr i32 %230, 16, !dbg !44
  %235 = trunc i32 %extelt.offset to i16, !dbg !44
  %236 = trunc i32 %231 to i16, !dbg !44
  %extelt.offset3 = lshr i32 %231, 16, !dbg !44
  %237 = trunc i32 %extelt.offset3 to i16, !dbg !44
  %238 = trunc i32 %232 to i16, !dbg !44
  %extelt.offset4 = lshr i32 %232, 16, !dbg !44
  %239 = trunc i32 %extelt.offset4 to i16, !dbg !44
  %240 = trunc i32 %233 to i16, !dbg !44
  %extelt.offset5 = lshr i32 %233, 16, !dbg !44
  %241 = trunc i32 %extelt.offset5 to i16, !dbg !44
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #6, !dbg !45
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #6, !dbg !45
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #6, !dbg !45
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %237) #6, !dbg !45
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %238) #6, !dbg !45
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %239) #6, !dbg !45
  %248 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %240) #6, !dbg !45
  %249 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %241) #6, !dbg !45
  %250 = zext nneg i32 %216 to i64, !dbg !46
  %251 = getelementptr float, ptr addrspace(1) %4, i64 %250, !dbg !46
  %252 = zext nneg i32 %217 to i64, !dbg !46
  %253 = getelementptr float, ptr addrspace(1) %4, i64 %252, !dbg !46
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %251, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220) #6, !dbg !47
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !47
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !47
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !47
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !47
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %253, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220) #6, !dbg !47
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !47
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !47
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !47
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !47
  %264 = getelementptr i16, ptr addrspace(1) %5, i64 %227, !dbg !48
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %264, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220) #6, !dbg !49
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !49
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !49
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !49
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !49
  %270 = trunc i32 %266 to i16, !dbg !49
  %extelt.offset6 = lshr i32 %266, 16, !dbg !49
  %271 = trunc i32 %extelt.offset6 to i16, !dbg !49
  %272 = trunc i32 %267 to i16, !dbg !49
  %extelt.offset7 = lshr i32 %267, 16, !dbg !49
  %273 = trunc i32 %extelt.offset7 to i16, !dbg !49
  %274 = trunc i32 %268 to i16, !dbg !49
  %extelt.offset8 = lshr i32 %268, 16, !dbg !49
  %275 = trunc i32 %extelt.offset8 to i16, !dbg !49
  %276 = trunc i32 %269 to i16, !dbg !49
  %extelt.offset9 = lshr i32 %269, 16, !dbg !49
  %277 = trunc i32 %extelt.offset9 to i16, !dbg !49
  %278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %270) #6, !dbg !50
  %279 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %271) #6, !dbg !50
  %280 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %272) #6, !dbg !50
  %281 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %273) #6, !dbg !50
  %282 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %274) #6, !dbg !50
  %283 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %275) #6, !dbg !50
  %284 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %276) #6, !dbg !50
  %285 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %277) #6, !dbg !50
  %286 = getelementptr float, ptr addrspace(1) %7, i64 %250, !dbg !51
  %287 = getelementptr float, ptr addrspace(1) %7, i64 %252, !dbg !51
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %286, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220) #6, !dbg !52
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !52
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !52
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !52
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !52
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %287, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220) #6, !dbg !52
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !52
  %295 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !52
  %296 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !52
  %297 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !52
  %298 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !53
  %299 = sext i32 %224 to i64, !dbg !53
  %300 = getelementptr float, ptr addrspace(1) %1, i64 %299, !dbg !53
  %301 = sext i32 %225 to i64, !dbg !53
  %302 = getelementptr float, ptr addrspace(1) %1, i64 %301, !dbg !53
  %303 = sext i32 %226 to i64, !dbg !53
  %304 = getelementptr float, ptr addrspace(1) %1, i64 %303, !dbg !53
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %298, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220) #6, !dbg !54
  %306 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !54
  %307 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !54
  %308 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !54
  %309 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !54
  %310 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %300, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220, i32 0, i1 %220) #6, !dbg !54
  %311 = extractvalue { i32, i32, i32, i32 } %310, 0, !dbg !54
  %312 = extractvalue { i32, i32, i32, i32 } %310, 1, !dbg !54
  %313 = extractvalue { i32, i32, i32, i32 } %310, 2, !dbg !54
  %314 = extractvalue { i32, i32, i32, i32 } %310, 3, !dbg !54
  %315 = insertelement <8 x i32> poison, i32 %255, i64 0, !dbg !47
  %316 = insertelement <8 x i32> %315, i32 %256, i64 1, !dbg !47
  %317 = insertelement <8 x i32> %316, i32 %257, i64 2, !dbg !47
  %318 = insertelement <8 x i32> %317, i32 %258, i64 3, !dbg !47
  %319 = insertelement <8 x i32> %318, i32 %260, i64 4, !dbg !47
  %320 = insertelement <8 x i32> %319, i32 %261, i64 5, !dbg !47
  %321 = insertelement <8 x i32> %320, i32 %262, i64 6, !dbg !47
  %322 = insertelement <8 x i32> %321, i32 %263, i64 7, !dbg !47
  %323 = bitcast <8 x i32> %322 to <8 x float>, !dbg !47
  %324 = insertelement <8 x i32> poison, i32 %289, i64 0, !dbg !52
  %325 = insertelement <8 x i32> %324, i32 %290, i64 1, !dbg !52
  %326 = insertelement <8 x i32> %325, i32 %291, i64 2, !dbg !52
  %327 = insertelement <8 x i32> %326, i32 %292, i64 3, !dbg !52
  %328 = insertelement <8 x i32> %327, i32 %294, i64 4, !dbg !52
  %329 = insertelement <8 x i32> %328, i32 %295, i64 5, !dbg !52
  %330 = insertelement <8 x i32> %329, i32 %296, i64 6, !dbg !52
  %331 = insertelement <8 x i32> %330, i32 %297, i64 7, !dbg !52
  %332 = bitcast <8 x i32> %331 to <8 x float>, !dbg !52
  %333 = insertelement <8 x i32> poison, i32 %306, i64 0, !dbg !54
  %334 = insertelement <8 x i32> %333, i32 %307, i64 1, !dbg !54
  %335 = insertelement <8 x i32> %334, i32 %308, i64 2, !dbg !54
  %336 = insertelement <8 x i32> %335, i32 %309, i64 3, !dbg !54
  %337 = insertelement <8 x i32> %336, i32 %311, i64 4, !dbg !54
  %338 = insertelement <8 x i32> %337, i32 %312, i64 5, !dbg !54
  %339 = insertelement <8 x i32> %338, i32 %313, i64 6, !dbg !54
  %340 = insertelement <8 x i32> %339, i32 %314, i64 7, !dbg !54
  %341 = bitcast <8 x i32> %340 to <8 x float>, !dbg !54
  %342 = insertelement <8 x float> poison, float %242, i64 0, !dbg !37
  %343 = insertelement <8 x float> %342, float %243, i64 1, !dbg !37
  %344 = insertelement <8 x float> %343, float %244, i64 2, !dbg !37
  %345 = insertelement <8 x float> %344, float %245, i64 3, !dbg !37
  %346 = insertelement <8 x float> %345, float %246, i64 4, !dbg !37
  %347 = insertelement <8 x float> %346, float %247, i64 5, !dbg !37
  %348 = insertelement <8 x float> %347, float %248, i64 6, !dbg !37
  %349 = insertelement <8 x float> %348, float %249, i64 7, !dbg !37
  %350 = fmul <8 x float> %208, %349, !dbg !37
  %351 = fadd <8 x float> %323, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !55
  %352 = fmul <8 x float> %350, %351, !dbg !56
  %353 = insertelement <8 x float> poison, float %278, i64 0, !dbg !38
  %354 = insertelement <8 x float> %353, float %279, i64 1, !dbg !38
  %355 = insertelement <8 x float> %354, float %280, i64 2, !dbg !38
  %356 = insertelement <8 x float> %355, float %281, i64 3, !dbg !38
  %357 = insertelement <8 x float> %356, float %282, i64 4, !dbg !38
  %358 = insertelement <8 x float> %357, float %283, i64 5, !dbg !38
  %359 = insertelement <8 x float> %358, float %284, i64 6, !dbg !38
  %360 = insertelement <8 x float> %359, float %285, i64 7, !dbg !38
  %361 = fmul <8 x float> %360, %211, !dbg !38
  %362 = fadd <8 x float> %332, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !57
  %363 = fmul <8 x float> %361, %362, !dbg !58
  %364 = fadd <8 x float> %363, %341, !dbg !59
  %365 = fadd <8 x float> %352, %364, !dbg !60
  %366 = fmul <8 x float> %365, %365, !dbg !61
  %367 = insertelement <8 x i1> poison, i1 %220, i64 0, !dbg !62
  %368 = shufflevector <8 x i1> %367, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !62
  %369 = select <8 x i1> %368, <8 x float> %366, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !62
  %370 = fadd <8 x float> %215, %369, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  store <8 x float> %365, ptr addrspace(3) %199, align 32, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %371 = load <4 x i32>, ptr addrspace(3) %203, align 16, !dbg !63
  %.extract = load i32, ptr addrspace(3) %201, align 16, !dbg !63
  %.extract11 = load i32, ptr addrspace(3) %204, align 4, !dbg !63
  %.extract13 = load i32, ptr addrspace(3) %205, align 8, !dbg !63
  %.extract15 = load i32, ptr addrspace(3) %206, align 4, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract13, i32 %.extract15, ptr addrspace(1) %302, i1 %221) #6, !dbg !63
  %.extract17 = extractelement <4 x i32> %371, i64 0, !dbg !63
  %.extract19 = extractelement <4 x i32> %371, i64 1, !dbg !63
  %.extract21 = extractelement <4 x i32> %371, i64 2, !dbg !63
  %.extract23 = extractelement <4 x i32> %371, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract17, i32 %.extract19, i32 %.extract21, i32 %.extract23, ptr addrspace(1) %304, i1 %222) #6, !dbg !63
  br i1 %213, label %212, label %372, !dbg !39

372:                                              ; preds = %212
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %shift = shufflevector <8 x float> %370, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !66
  %373 = fadd <8 x float> %370, %shift, !dbg !66
  %shift109 = shufflevector <8 x float> %370, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !66
  %374 = fadd <8 x float> %shift109, %373, !dbg !66
  %shift110 = shufflevector <8 x float> %370, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !66
  %375 = fadd <8 x float> %shift110, %374, !dbg !66
  %shift111 = shufflevector <8 x float> %370, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !66
  %376 = fadd <8 x float> %shift111, %375, !dbg !66
  %shift112 = shufflevector <8 x float> %370, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !66
  %377 = fadd <8 x float> %shift112, %376, !dbg !66
  %shift113 = shufflevector <8 x float> %370, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !66
  %378 = fadd <8 x float> %shift113, %377, !dbg !66
  %shift114 = shufflevector <8 x float> %370, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !66
  %379 = fadd <8 x float> %shift114, %378, !dbg !66
  %380 = extractelement <8 x float> %379, i64 0, !dbg !66
  %381 = bitcast float %380 to i32, !dbg !64
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 16, i32 31), !dbg !64
  %383 = bitcast i32 %382 to float, !dbg !64
  %384 = fadd float %380, %383, !dbg !66
  %385 = bitcast float %384 to i32, !dbg !64
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 8, i32 31), !dbg !64
  %387 = bitcast i32 %386 to float, !dbg !64
  %388 = fadd float %384, %387, !dbg !66
  %389 = bitcast float %388 to i32, !dbg !64
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 4, i32 31), !dbg !64
  %391 = bitcast i32 %390 to float, !dbg !64
  %392 = fadd float %388, %391, !dbg !66
  %393 = bitcast float %392 to i32, !dbg !64
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 2, i32 31), !dbg !64
  %395 = bitcast i32 %394 to float, !dbg !64
  %396 = fadd float %392, %395, !dbg !66
  %397 = bitcast float %396 to i32, !dbg !64
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 1, i32 31), !dbg !64
  %399 = bitcast i32 %398 to float, !dbg !64
  %400 = fadd float %396, %399, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, float %400, i1 %132) #6, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %401 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %137, i1 %135) #6, !dbg !64
  %402 = bitcast float %401 to i32, !dbg !64
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 4, i32 31), !dbg !64
  %404 = bitcast i32 %403 to float, !dbg !64
  %405 = fadd float %401, %404, !dbg !66
  %406 = bitcast float %405 to i32, !dbg !64
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 2, i32 31), !dbg !64
  %408 = bitcast i32 %407 to float, !dbg !64
  %409 = fadd float %405, %408, !dbg !66
  %410 = bitcast float %409 to i32, !dbg !64
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 1, i32 31), !dbg !64
  %412 = bitcast i32 %411 to float, !dbg !64
  %413 = fadd float %409, %412, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, float %413, i1 %153) #6, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %414 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %415 = insertelement <1 x float> undef, float %414, i64 0, !dbg !69
  store <1 x float> %415, ptr addrspace(3) @global_smem, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %416 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !69
  %417 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %416, float 2.304000e+03) #6, !dbg !70
  %418 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %414, float 2.304000e+03) #6, !dbg !70
  %419 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %414, float 2.304000e+03) #6, !dbg !70
  %420 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %414, float 2.304000e+03) #6, !dbg !70
  %421 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %414, float 2.304000e+03) #6, !dbg !70
  %422 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %414, float 2.304000e+03) #6, !dbg !70
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %414, float 2.304000e+03) #6, !dbg !70
  %424 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %414, float 2.304000e+03) #6, !dbg !70
  %425 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %414, float 2.304000e+03) #6, !dbg !70
  %426 = fadd float %417, 0x3EE4F8B580000000, !dbg !71
  %427 = fadd float %418, 0x3EE4F8B580000000, !dbg !71
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %.not.i52 = icmp eq i32 %428, 0, !dbg !69
  br i1 %.not.i52, label %431, label %429, !dbg !69

429:                                              ; preds = %372
  %430 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %426), !dbg !69
  br label %__nv_rsqrtf.exit54, !dbg !69

431:                                              ; preds = %372
  %432 = tail call float @llvm.nvvm.rsqrt.approx.f(float %426), !dbg !69
  br label %__nv_rsqrtf.exit54, !dbg !69

__nv_rsqrtf.exit54:                               ; preds = %429, %431
  %.0.i53 = phi float [ %430, %429 ], [ %432, %431 ], !dbg !69
  %433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %.not.i55 = icmp eq i32 %433, 0, !dbg !69
  br i1 %.not.i55, label %436, label %434, !dbg !69

434:                                              ; preds = %__nv_rsqrtf.exit54
  %435 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %427), !dbg !69
  br label %__nv_rsqrtf.exit57, !dbg !69

436:                                              ; preds = %__nv_rsqrtf.exit54
  %437 = tail call float @llvm.nvvm.rsqrt.approx.f(float %427), !dbg !69
  br label %__nv_rsqrtf.exit57, !dbg !69

__nv_rsqrtf.exit57:                               ; preds = %434, %436
  %.0.i56 = phi float [ %435, %434 ], [ %437, %436 ], !dbg !69
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %445 = getelementptr float, ptr addrspace(1) %2, i64 %185, !dbg !73
  %446 = bitcast float %.0.i53 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %446, ptr addrspace(1) %445, i1 %187) #6, !dbg !74
  %447 = add i32 %103, %18, !dbg !75
  %448 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !76
  %449 = sext i32 %447 to i64, !dbg !76
  %450 = getelementptr float, ptr addrspace(1) %1, i64 %449, !dbg !76
  %451 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %448, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !77
  %452 = extractvalue { i32, i32, i32, i32 } %451, 0, !dbg !77
  %453 = extractvalue { i32, i32, i32, i32 } %451, 1, !dbg !77
  %454 = extractvalue { i32, i32, i32, i32 } %451, 2, !dbg !77
  %455 = extractvalue { i32, i32, i32, i32 } %451, 3, !dbg !77
  %456 = bitcast i32 %452 to float, !dbg !77
  %457 = bitcast i32 %453 to float, !dbg !77
  %458 = bitcast i32 %454 to float, !dbg !77
  %459 = bitcast i32 %455 to float, !dbg !77
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %450, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !77
  %461 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !77
  %462 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !77
  %463 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !77
  %464 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !77
  %465 = bitcast i32 %461 to float, !dbg !77
  %466 = bitcast i32 %462 to float, !dbg !77
  %467 = bitcast i32 %463 to float, !dbg !77
  %468 = bitcast i32 %464 to float, !dbg !77
  %469 = getelementptr float, ptr addrspace(1) %8, i64 %198, !dbg !78
  %470 = zext nneg i32 %103 to i64, !dbg !78
  %471 = getelementptr float, ptr addrspace(1) %8, i64 %470, !dbg !78
  %472 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %469, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !79
  %473 = extractvalue { i32, i32, i32, i32 } %472, 0, !dbg !79
  %474 = extractvalue { i32, i32, i32, i32 } %472, 1, !dbg !79
  %475 = extractvalue { i32, i32, i32, i32 } %472, 2, !dbg !79
  %476 = extractvalue { i32, i32, i32, i32 } %472, 3, !dbg !79
  %477 = bitcast i32 %473 to float, !dbg !79
  %478 = bitcast i32 %474 to float, !dbg !79
  %479 = bitcast i32 %475 to float, !dbg !79
  %480 = bitcast i32 %476 to float, !dbg !79
  %481 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %471, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !79
  %482 = extractvalue { i32, i32, i32, i32 } %481, 0, !dbg !79
  %483 = extractvalue { i32, i32, i32, i32 } %481, 1, !dbg !79
  %484 = extractvalue { i32, i32, i32, i32 } %481, 2, !dbg !79
  %485 = extractvalue { i32, i32, i32, i32 } %481, 3, !dbg !79
  %486 = bitcast i32 %482 to float, !dbg !79
  %487 = bitcast i32 %483 to float, !dbg !79
  %488 = bitcast i32 %484 to float, !dbg !79
  %489 = bitcast i32 %485 to float, !dbg !79
  %490 = fmul float %.0.i56, %456, !dbg !80
  %491 = fmul float %.0.i56, %457, !dbg !80
  %492 = fmul float %.0.i56, %458, !dbg !80
  %493 = fmul float %.0.i56, %459, !dbg !80
  %494 = fmul float %.0.i56, %465, !dbg !80
  %495 = fmul float %.0.i56, %466, !dbg !80
  %496 = fmul float %.0.i56, %467, !dbg !80
  %497 = fmul float %.0.i56, %468, !dbg !80
  %498 = fadd float %477, 1.000000e+00, !dbg !81
  %499 = fadd float %478, 1.000000e+00, !dbg !81
  %500 = fadd float %479, 1.000000e+00, !dbg !81
  %501 = fadd float %480, 1.000000e+00, !dbg !81
  %502 = fadd float %486, 1.000000e+00, !dbg !81
  %503 = fadd float %487, 1.000000e+00, !dbg !81
  %504 = fadd float %488, 1.000000e+00, !dbg !81
  %505 = fadd float %489, 1.000000e+00, !dbg !81
  %506 = fmul float %490, %498, !dbg !82
  %507 = fmul float %491, %499, !dbg !82
  %508 = fmul float %492, %500, !dbg !82
  %509 = fmul float %493, %501, !dbg !82
  %510 = fmul float %494, %502, !dbg !82
  %511 = fmul float %495, %503, !dbg !82
  %512 = fmul float %496, %504, !dbg !82
  %513 = fmul float %497, %505, !dbg !82
  %514 = getelementptr i16, ptr addrspace(1) %9, i64 %20, !dbg !83
  %515 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #6, !dbg !84
  %516 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %507) #6, !dbg !84
  %517 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %508) #6, !dbg !84
  %518 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %509) #6, !dbg !84
  %519 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %510) #6, !dbg !84
  %520 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %511) #6, !dbg !84
  %521 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %512) #6, !dbg !84
  %522 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %513) #6, !dbg !84
  %523 = insertelement <2 x i16> undef, i16 %515, i64 0, !dbg !84
  %524 = insertelement <2 x i16> %523, i16 %516, i64 1, !dbg !84
  %525 = bitcast <2 x i16> %524 to i32, !dbg !84
  %526 = insertelement <2 x i16> undef, i16 %517, i64 0, !dbg !84
  %527 = insertelement <2 x i16> %526, i16 %518, i64 1, !dbg !84
  %528 = bitcast <2 x i16> %527 to i32, !dbg !84
  %529 = insertelement <2 x i16> undef, i16 %519, i64 0, !dbg !84
  %530 = insertelement <2 x i16> %529, i16 %520, i64 1, !dbg !84
  %531 = bitcast <2 x i16> %530 to i32, !dbg !84
  %532 = insertelement <2 x i16> undef, i16 %521, i64 0, !dbg !84
  %533 = insertelement <2 x i16> %532, i16 %522, i64 1, !dbg !84
  %534 = bitcast <2 x i16> %533 to i32, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %525, i32 %528, i32 %531, i32 %534, ptr addrspace(1) %514, i1 true) #6, !dbg !84
  %535 = or i32 %15, 2052, !dbg !85
  %536 = add i32 %535, %18, !dbg !75
  %537 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !76
  %538 = sext i32 %536 to i64, !dbg !76
  %539 = getelementptr float, ptr addrspace(1) %1, i64 %538, !dbg !76
  %540 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %537, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #6, !dbg !77
  %541 = extractvalue { i32, i32, i32, i32 } %540, 0, !dbg !77
  %542 = extractvalue { i32, i32, i32, i32 } %540, 1, !dbg !77
  %543 = extractvalue { i32, i32, i32, i32 } %540, 2, !dbg !77
  %544 = extractvalue { i32, i32, i32, i32 } %540, 3, !dbg !77
  %545 = bitcast i32 %541 to float, !dbg !77
  %546 = bitcast i32 %542 to float, !dbg !77
  %547 = bitcast i32 %543 to float, !dbg !77
  %548 = bitcast i32 %544 to float, !dbg !77
  %549 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %539, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #6, !dbg !77
  %550 = extractvalue { i32, i32, i32, i32 } %549, 0, !dbg !77
  %551 = extractvalue { i32, i32, i32, i32 } %549, 1, !dbg !77
  %552 = extractvalue { i32, i32, i32, i32 } %549, 2, !dbg !77
  %553 = extractvalue { i32, i32, i32, i32 } %549, 3, !dbg !77
  %554 = bitcast i32 %550 to float, !dbg !77
  %555 = bitcast i32 %551 to float, !dbg !77
  %556 = bitcast i32 %552 to float, !dbg !77
  %557 = bitcast i32 %553 to float, !dbg !77
  %558 = zext nneg i32 %51 to i64, !dbg !78
  %559 = getelementptr float, ptr addrspace(1) %8, i64 %558, !dbg !78
  %560 = zext nneg i32 %535 to i64, !dbg !78
  %561 = getelementptr float, ptr addrspace(1) %8, i64 %560, !dbg !78
  %562 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %559, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #6, !dbg !79
  %563 = extractvalue { i32, i32, i32, i32 } %562, 0, !dbg !79
  %564 = extractvalue { i32, i32, i32, i32 } %562, 1, !dbg !79
  %565 = extractvalue { i32, i32, i32, i32 } %562, 2, !dbg !79
  %566 = extractvalue { i32, i32, i32, i32 } %562, 3, !dbg !79
  %567 = bitcast i32 %563 to float, !dbg !79
  %568 = bitcast i32 %564 to float, !dbg !79
  %569 = bitcast i32 %565 to float, !dbg !79
  %570 = bitcast i32 %566 to float, !dbg !79
  %571 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %561, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #6, !dbg !79
  %572 = extractvalue { i32, i32, i32, i32 } %571, 0, !dbg !79
  %573 = extractvalue { i32, i32, i32, i32 } %571, 1, !dbg !79
  %574 = extractvalue { i32, i32, i32, i32 } %571, 2, !dbg !79
  %575 = extractvalue { i32, i32, i32, i32 } %571, 3, !dbg !79
  %576 = bitcast i32 %572 to float, !dbg !79
  %577 = bitcast i32 %573 to float, !dbg !79
  %578 = bitcast i32 %574 to float, !dbg !79
  %579 = bitcast i32 %575 to float, !dbg !79
  %580 = fmul float %.0.i56, %545, !dbg !80
  %581 = fmul float %.0.i56, %546, !dbg !80
  %582 = fmul float %.0.i56, %547, !dbg !80
  %583 = fmul float %.0.i56, %548, !dbg !80
  %584 = fmul float %.0.i56, %554, !dbg !80
  %585 = fmul float %.0.i56, %555, !dbg !80
  %586 = fmul float %.0.i56, %556, !dbg !80
  %587 = fmul float %.0.i56, %557, !dbg !80
  %588 = fadd float %567, 1.000000e+00, !dbg !81
  %589 = fadd float %568, 1.000000e+00, !dbg !81
  %590 = fadd float %569, 1.000000e+00, !dbg !81
  %591 = fadd float %570, 1.000000e+00, !dbg !81
  %592 = fadd float %576, 1.000000e+00, !dbg !81
  %593 = fadd float %577, 1.000000e+00, !dbg !81
  %594 = fadd float %578, 1.000000e+00, !dbg !81
  %595 = fadd float %579, 1.000000e+00, !dbg !81
  %596 = fmul float %580, %588, !dbg !82
  %597 = fmul float %581, %589, !dbg !82
  %598 = fmul float %582, %590, !dbg !82
  %599 = fmul float %583, %591, !dbg !82
  %600 = fmul float %584, %592, !dbg !82
  %601 = fmul float %585, %593, !dbg !82
  %602 = fmul float %586, %594, !dbg !82
  %603 = fmul float %587, %595, !dbg !82
  %604 = getelementptr i16, ptr addrspace(1) %9, i64 %54, !dbg !83
  %605 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %596) #6, !dbg !84
  %606 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %597) #6, !dbg !84
  %607 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %598) #6, !dbg !84
  %608 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %599) #6, !dbg !84
  %609 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %600) #6, !dbg !84
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %601) #6, !dbg !84
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %602) #6, !dbg !84
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %603) #6, !dbg !84
  %613 = insertelement <2 x i16> undef, i16 %605, i64 0, !dbg !84
  %614 = insertelement <2 x i16> %613, i16 %606, i64 1, !dbg !84
  %615 = bitcast <2 x i16> %614 to i32, !dbg !84
  %616 = insertelement <2 x i16> undef, i16 %607, i64 0, !dbg !84
  %617 = insertelement <2 x i16> %616, i16 %608, i64 1, !dbg !84
  %618 = bitcast <2 x i16> %617 to i32, !dbg !84
  %619 = insertelement <2 x i16> undef, i16 %609, i64 0, !dbg !84
  %620 = insertelement <2 x i16> %619, i16 %610, i64 1, !dbg !84
  %621 = bitcast <2 x i16> %620 to i32, !dbg !84
  %622 = insertelement <2 x i16> undef, i16 %611, i64 0, !dbg !84
  %623 = insertelement <2 x i16> %622, i16 %612, i64 1, !dbg !84
  %624 = bitcast <2 x i16> %623 to i32, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %615, i32 %618, i32 %621, i32 %624, ptr addrspace(1) %604, i1 %52) #6, !dbg !84
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cvv3mxhsuz7zfw77smnzdm2zwx6ppj36kvuyp3sqmzfkcpbqgdn5.py", directory: "/tmp/torchinductor_zeus/vv")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 42, column: 26, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 43, column: 4, scope: !7)
!33 = !DILocation(line: 44, column: 28, scope: !7)
!34 = !DILocation(line: 44, column: 40, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 36, scope: !7)
!37 = !DILocation(line: 57, column: 24, scope: !7)
!38 = !DILocation(line: 64, column: 24, scope: !7)
!39 = !DILocation(line: 47, column: 36, scope: !7)
!40 = !DILocation(line: 48, column: 27, scope: !7)
!41 = !DILocation(line: 49, column: 25, scope: !7)
!42 = !DILocation(line: 51, column: 41, scope: !7)
!43 = !DILocation(line: 51, column: 35, scope: !7)
!44 = !DILocation(line: 51, column: 52, scope: !7)
!45 = !DILocation(line: 51, column: 104, scope: !7)
!46 = !DILocation(line: 52, column: 35, scope: !7)
!47 = !DILocation(line: 52, column: 40, scope: !7)
!48 = !DILocation(line: 53, column: 35, scope: !7)
!49 = !DILocation(line: 53, column: 52, scope: !7)
!50 = !DILocation(line: 53, column: 104, scope: !7)
!51 = !DILocation(line: 54, column: 35, scope: !7)
!52 = !DILocation(line: 54, column: 40, scope: !7)
!53 = !DILocation(line: 55, column: 39, scope: !7)
!54 = !DILocation(line: 55, column: 56, scope: !7)
!55 = !DILocation(line: 59, column: 24, scope: !7)
!56 = !DILocation(line: 60, column: 24, scope: !7)
!57 = !DILocation(line: 65, column: 24, scope: !7)
!58 = !DILocation(line: 66, column: 24, scope: !7)
!59 = !DILocation(line: 69, column: 24, scope: !7)
!60 = !DILocation(line: 70, column: 24, scope: !7)
!61 = !DILocation(line: 71, column: 24, scope: !7)
!62 = !DILocation(line: 74, column: 40, scope: !7)
!63 = !DILocation(line: 75, column: 56, scope: !7)
!64 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !65)
!65 = !DILocation(line: 76, column: 27, scope: !24)
!66 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !67)
!67 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !68)
!68 = !DILocation(line: 76, column: 27, scope: !22)
!69 = !DILocation(line: 81, column: 26, scope: !7)
!70 = !DILocation(line: 78, column: 20, scope: !7)
!71 = !DILocation(line: 80, column: 20, scope: !7)
!72 = !DILocation(line: 82, column: 4, scope: !7)
!73 = !DILocation(line: 83, column: 28, scope: !7)
!74 = !DILocation(line: 83, column: 40, scope: !7)
!75 = !DILocation(line: 88, column: 45, scope: !7)
!76 = !DILocation(line: 88, column: 39, scope: !7)
!77 = !DILocation(line: 88, column: 56, scope: !7)
!78 = !DILocation(line: 89, column: 35, scope: !7)
!79 = !DILocation(line: 89, column: 40, scope: !7)
!80 = !DILocation(line: 90, column: 24, scope: !7)
!81 = !DILocation(line: 92, column: 24, scope: !7)
!82 = !DILocation(line: 93, column: 24, scope: !7)
!83 = !DILocation(line: 95, column: 29, scope: !7)
!84 = !DILocation(line: 95, column: 53, scope: !7)
!85 = !DILocation(line: 85, column: 27, scope: !7)
!86 = !DILocation(line: 84, column: 4, scope: !7)
