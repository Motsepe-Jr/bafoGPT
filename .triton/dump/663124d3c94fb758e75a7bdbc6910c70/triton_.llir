; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7de8de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = lshr i32 %10, 5, !dbg !10
  %urem = and i32 %10, 255, !dbg !10
  %12 = shl nuw nsw i32 %urem, 3, !dbg !10
  %13 = shl nuw nsw i32 %urem, 2, !dbg !10
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %15 = mul i32 %14, 2304, !dbg !12
  %16 = add i32 %12, %15, !dbg !13
  %17 = sext i32 %16 to i64, !dbg !14
  %18 = getelementptr i16, ptr addrspace(1) %0, i64 %17, !dbg !14
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !15
  %24 = trunc i32 %20 to i16, !dbg !15
  %extelt.offset23 = lshr i32 %20, 16, !dbg !15
  %25 = trunc i32 %extelt.offset23 to i16, !dbg !15
  %26 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset24 = lshr i32 %21, 16, !dbg !15
  %27 = trunc i32 %extelt.offset24 to i16, !dbg !15
  %28 = trunc i32 %22 to i16, !dbg !15
  %extelt.offset25 = lshr i32 %22, 16, !dbg !15
  %29 = trunc i32 %extelt.offset25 to i16, !dbg !15
  %30 = trunc i32 %23 to i16, !dbg !15
  %extelt.offset26 = lshr i32 %23, 16, !dbg !15
  %31 = trunc i32 %extelt.offset26 to i16, !dbg !15
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !16
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !16
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !16
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !16
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !16
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #6, !dbg !16
  %40 = fmul float %32, %32, !dbg !17
  %41 = fmul float %33, %33, !dbg !17
  %42 = fmul float %34, %34, !dbg !17
  %43 = fmul float %35, %35, !dbg !17
  %44 = fmul float %36, %36, !dbg !17
  %45 = fmul float %37, %37, !dbg !17
  %46 = fmul float %38, %38, !dbg !17
  %47 = fmul float %39, %39, !dbg !17
  %48 = or i32 %12, 2048, !dbg !18
  %49 = icmp ult i32 %48, 2304, !dbg !19
  %50 = add i32 %48, %15, !dbg !13
  %51 = sext i32 %50 to i64, !dbg !14
  %52 = getelementptr i16, ptr addrspace(1) %0, i64 %51, !dbg !14
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #6, !dbg !15
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !15
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !15
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !15
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !15
  %58 = trunc i32 %54 to i16, !dbg !15
  %extelt.offset23.1 = lshr i32 %54, 16, !dbg !15
  %59 = trunc i32 %extelt.offset23.1 to i16, !dbg !15
  %60 = trunc i32 %55 to i16, !dbg !15
  %extelt.offset24.1 = lshr i32 %55, 16, !dbg !15
  %61 = trunc i32 %extelt.offset24.1 to i16, !dbg !15
  %62 = trunc i32 %56 to i16, !dbg !15
  %extelt.offset25.1 = lshr i32 %56, 16, !dbg !15
  %63 = trunc i32 %extelt.offset25.1 to i16, !dbg !15
  %64 = trunc i32 %57 to i16, !dbg !15
  %extelt.offset26.1 = lshr i32 %57, 16, !dbg !15
  %65 = trunc i32 %extelt.offset26.1 to i16, !dbg !15
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #6, !dbg !16
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #6, !dbg !16
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #6, !dbg !16
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #6, !dbg !16
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #6, !dbg !16
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #6, !dbg !16
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #6, !dbg !16
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #6, !dbg !16
  %74 = fmul float %66, %66, !dbg !17
  %75 = fmul float %67, %67, !dbg !17
  %76 = fmul float %68, %68, !dbg !17
  %77 = fmul float %69, %69, !dbg !17
  %78 = fmul float %70, %70, !dbg !17
  %79 = fmul float %71, %71, !dbg !17
  %80 = fmul float %72, %72, !dbg !17
  %81 = fmul float %73, %73, !dbg !17
  %82 = select i1 %49, float %74, float -0.000000e+00, !dbg !20
  %83 = fadd float %40, %82, !dbg !20
  %84 = select i1 %49, float %75, float -0.000000e+00, !dbg !20
  %85 = fadd float %41, %84, !dbg !20
  %86 = select i1 %49, float %76, float -0.000000e+00, !dbg !20
  %87 = fadd float %42, %86, !dbg !20
  %88 = select i1 %49, float %77, float -0.000000e+00, !dbg !20
  %89 = fadd float %43, %88, !dbg !20
  %90 = select i1 %49, float %78, float -0.000000e+00, !dbg !20
  %91 = fadd float %44, %90, !dbg !20
  %92 = select i1 %49, float %79, float -0.000000e+00, !dbg !20
  %93 = fadd float %45, %92, !dbg !20
  %94 = select i1 %49, float %80, float -0.000000e+00, !dbg !20
  %95 = fadd float %46, %94, !dbg !20
  %96 = select i1 %49, float %81, float -0.000000e+00, !dbg !20
  %97 = fadd float %47, %96, !dbg !20
  %98 = and i32 %10, 31, !dbg !10
  %99 = and i32 %11, 7, !dbg !10
  %100 = or i32 %13, 1024, !dbg !10
  %101 = fadd float %83, %85, !dbg !21
  %102 = fadd float %87, %101, !dbg !21
  %103 = fadd float %89, %102, !dbg !21
  %104 = fadd float %91, %103, !dbg !21
  %105 = fadd float %93, %104, !dbg !21
  %106 = fadd float %95, %105, !dbg !21
  %107 = fadd float %97, %106, !dbg !21
  %108 = bitcast float %107 to i32, !dbg !27
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 16, i32 31), !dbg !27
  %110 = bitcast i32 %109 to float, !dbg !27
  %111 = fadd float %107, %110, !dbg !21
  %112 = bitcast float %111 to i32, !dbg !27
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !27
  %114 = bitcast i32 %113 to float, !dbg !27
  %115 = fadd float %111, %114, !dbg !21
  %116 = bitcast float %115 to i32, !dbg !27
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !27
  %118 = bitcast i32 %117 to float, !dbg !27
  %119 = fadd float %115, %118, !dbg !21
  %120 = bitcast float %119 to i32, !dbg !27
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !27
  %122 = bitcast i32 %121 to float, !dbg !27
  %123 = fadd float %119, %122, !dbg !21
  %124 = bitcast float %123 to i32, !dbg !27
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !27
  %126 = bitcast i32 %125 to float, !dbg !27
  %127 = fadd float %123, %126, !dbg !21
  %128 = icmp eq i32 %98, 0, !dbg !27
  %129 = zext nneg i32 %99 to i64, !dbg !27
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %129, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, float %127, i1 %128) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %131 = icmp slt i32 %10, 8, !dbg !27
  %132 = sext i32 %10 to i64, !dbg !27
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i64 %132, !dbg !27
  %134 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %133, i1 %131) #6, !dbg !27
  %135 = bitcast float %134 to i32, !dbg !27
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !27
  %137 = bitcast i32 %136 to float, !dbg !27
  %138 = fadd float %134, %137, !dbg !21
  %139 = bitcast float %138 to i32, !dbg !27
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !27
  %141 = bitcast i32 %140 to float, !dbg !27
  %142 = fadd float %138, %141, !dbg !21
  %143 = bitcast float %142 to i32, !dbg !27
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !27
  %145 = bitcast i32 %144 to float, !dbg !27
  %146 = fadd float %142, %145, !dbg !21
  %147 = and i32 %10, 7, !dbg !27
  %148 = icmp eq i32 %147, 0, !dbg !27
  %149 = and i1 %131, %148, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, float %146, i1 %149) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %150 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  %151 = sext i32 %14 to i64, !dbg !29
  %152 = getelementptr float, ptr addrspace(1) %3, i64 %151, !dbg !29
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #6, !dbg !30
  %154 = bitcast i32 %153 to float, !dbg !30
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #6, !dbg !30
  %156 = bitcast i32 %155 to float, !dbg !30
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #6, !dbg !30
  %158 = bitcast i32 %157 to float, !dbg !30
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #6, !dbg !30
  %160 = bitcast i32 %159 to float, !dbg !30
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #6, !dbg !30
  %162 = bitcast i32 %161 to float, !dbg !30
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #6, !dbg !30
  %164 = bitcast i32 %163 to float, !dbg !30
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #6, !dbg !30
  %166 = bitcast i32 %165 to float, !dbg !30
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #6, !dbg !30
  %168 = bitcast i32 %167 to float, !dbg !30
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 2.304000e+03) #6, !dbg !31
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 2.304000e+03) #6, !dbg !31
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 2.304000e+03) #6, !dbg !31
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 2.304000e+03) #6, !dbg !31
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 2.304000e+03) #6, !dbg !31
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 2.304000e+03) #6, !dbg !31
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 2.304000e+03) #6, !dbg !31
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 2.304000e+03) #6, !dbg !31
  %177 = fadd float %169, 0x3EE4F8B580000000, !dbg !32
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 2.304000e+03) #6, !dbg !33
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float 2.304000e+03) #6, !dbg !33
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 2.304000e+03) #6, !dbg !33
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 2.304000e+03) #6, !dbg !33
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 2.304000e+03) #6, !dbg !33
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.304000e+03) #6, !dbg !33
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float 2.304000e+03) #6, !dbg !33
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float 2.304000e+03) #6, !dbg !33
  %186 = fadd float %178, 0x3EE4F8B580000000, !dbg !34
  %187 = zext nneg i32 %12 to i64
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i64 %187
  %189 = zext nneg i32 %13 to i64
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i64 %189
  %191 = zext nneg i32 %100 to i64
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i64 %191
  %193 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %190, i64 0, i64 1
  %194 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %190, i64 0, i64 2
  %195 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %190, i64 0, i64 3
  br label %196, !dbg !35

196:                                              ; preds = %9, %__nv_rsqrtf.exit50
  %197 = phi i1 [ true, %9 ], [ false, %__nv_rsqrtf.exit50 ]
  %198 = phi i32 [ 0, %9 ], [ 2048, %__nv_rsqrtf.exit50 ]
  %199 = or i32 %198, %12, !dbg !36
  %200 = or i32 %199, 4, !dbg !36
  %201 = or i32 %198, %13, !dbg !36
  %202 = or i32 %198, %100, !dbg !36
  %203 = icmp ult i32 %199, 2304, !dbg !37
  %204 = icmp ult i32 %201, 2304, !dbg !37
  %205 = icmp ult i32 %202, 2304, !dbg !37
  %206 = add i32 %199, %15, !dbg !38
  %207 = add i32 %200, %15, !dbg !38
  %208 = add i32 %201, %15, !dbg !38
  %209 = add i32 %202, %15, !dbg !38
  %210 = sext i32 %206 to i64, !dbg !39
  %211 = getelementptr i16, ptr addrspace(1) %0, i64 %210, !dbg !39
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %211, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203) #6, !dbg !40
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !40
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !40
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !40
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !40
  %217 = trunc i32 %213 to i16, !dbg !40
  %extelt.offset = lshr i32 %213, 16, !dbg !40
  %218 = trunc i32 %extelt.offset to i16, !dbg !40
  %219 = trunc i32 %214 to i16, !dbg !40
  %extelt.offset2 = lshr i32 %214, 16, !dbg !40
  %220 = trunc i32 %extelt.offset2 to i16, !dbg !40
  %221 = trunc i32 %215 to i16, !dbg !40
  %extelt.offset3 = lshr i32 %215, 16, !dbg !40
  %222 = trunc i32 %extelt.offset3 to i16, !dbg !40
  %223 = trunc i32 %216 to i16, !dbg !40
  %extelt.offset4 = lshr i32 %216, 16, !dbg !40
  %224 = trunc i32 %extelt.offset4 to i16, !dbg !40
  %225 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %217) #6, !dbg !41
  %226 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %218) #6, !dbg !41
  %227 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %219) #6, !dbg !41
  %228 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %220) #6, !dbg !41
  %229 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %221) #6, !dbg !41
  %230 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %222) #6, !dbg !41
  %231 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %223) #6, !dbg !41
  %232 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %224) #6, !dbg !41
  %233 = zext nneg i32 %199 to i64, !dbg !42
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %233, !dbg !42
  %235 = zext nneg i32 %200 to i64, !dbg !42
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !42
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %234, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203) #6, !dbg !43
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !43
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !43
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !43
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !43
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %236, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203) #6, !dbg !43
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !43
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !43
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !43
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !43
  %247 = insertelement <8 x i32> poison, i32 %238, i64 0, !dbg !43
  %248 = insertelement <8 x i32> %247, i32 %239, i64 1, !dbg !43
  %249 = insertelement <8 x i32> %248, i32 %240, i64 2, !dbg !43
  %250 = insertelement <8 x i32> %249, i32 %241, i64 3, !dbg !43
  %251 = insertelement <8 x i32> %250, i32 %243, i64 4, !dbg !43
  %252 = insertelement <8 x i32> %251, i32 %244, i64 5, !dbg !43
  %253 = insertelement <8 x i32> %252, i32 %245, i64 6, !dbg !43
  %254 = insertelement <8 x i32> %253, i32 %246, i64 7, !dbg !43
  %255 = bitcast <8 x i32> %254 to <8 x float>, !dbg !43
  %256 = getelementptr i16, ptr addrspace(1) %2, i64 %210, !dbg !44
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %256, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203) #6, !dbg !45
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !45
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !45
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !45
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !45
  %262 = trunc i32 %258 to i16, !dbg !45
  %extelt.offset5 = lshr i32 %258, 16, !dbg !45
  %263 = trunc i32 %extelt.offset5 to i16, !dbg !45
  %264 = trunc i32 %259 to i16, !dbg !45
  %extelt.offset6 = lshr i32 %259, 16, !dbg !45
  %265 = trunc i32 %extelt.offset6 to i16, !dbg !45
  %266 = trunc i32 %260 to i16, !dbg !45
  %extelt.offset7 = lshr i32 %260, 16, !dbg !45
  %267 = trunc i32 %extelt.offset7 to i16, !dbg !45
  %268 = trunc i32 %261 to i16, !dbg !45
  %extelt.offset8 = lshr i32 %261, 16, !dbg !45
  %269 = trunc i32 %extelt.offset8 to i16, !dbg !45
  %270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %262) #6, !dbg !46
  %271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %263) #6, !dbg !46
  %272 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %264) #6, !dbg !46
  %273 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #6, !dbg !46
  %274 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #6, !dbg !46
  %275 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #6, !dbg !46
  %276 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #6, !dbg !46
  %277 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %269) #6, !dbg !46
  %278 = getelementptr float, ptr addrspace(1) %4, i64 %233, !dbg !47
  %279 = getelementptr float, ptr addrspace(1) %4, i64 %235, !dbg !47
  %280 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %278, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203) #6, !dbg !48
  %281 = extractvalue { i32, i32, i32, i32 } %280, 0, !dbg !48
  %282 = extractvalue { i32, i32, i32, i32 } %280, 1, !dbg !48
  %283 = extractvalue { i32, i32, i32, i32 } %280, 2, !dbg !48
  %284 = extractvalue { i32, i32, i32, i32 } %280, 3, !dbg !48
  %285 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %279, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203) #6, !dbg !48
  %286 = extractvalue { i32, i32, i32, i32 } %285, 0, !dbg !48
  %287 = extractvalue { i32, i32, i32, i32 } %285, 1, !dbg !48
  %288 = extractvalue { i32, i32, i32, i32 } %285, 2, !dbg !48
  %289 = extractvalue { i32, i32, i32, i32 } %285, 3, !dbg !48
  %290 = insertelement <8 x i32> poison, i32 %281, i64 0, !dbg !48
  %291 = insertelement <8 x i32> %290, i32 %282, i64 1, !dbg !48
  %292 = insertelement <8 x i32> %291, i32 %283, i64 2, !dbg !48
  %293 = insertelement <8 x i32> %292, i32 %284, i64 3, !dbg !48
  %294 = insertelement <8 x i32> %293, i32 %286, i64 4, !dbg !48
  %295 = insertelement <8 x i32> %294, i32 %287, i64 5, !dbg !48
  %296 = insertelement <8 x i32> %295, i32 %288, i64 6, !dbg !48
  %297 = insertelement <8 x i32> %296, i32 %289, i64 7, !dbg !48
  %298 = bitcast <8 x i32> %297 to <8 x float>, !dbg !48
  %299 = getelementptr float, ptr addrspace(1) %5, i64 %210, !dbg !49
  %300 = sext i32 %207 to i64, !dbg !49
  %301 = getelementptr float, ptr addrspace(1) %5, i64 %300, !dbg !49
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %299, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203) #6, !dbg !50
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !50
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !50
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !50
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !50
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %301, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203) #6, !dbg !50
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !50
  %309 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !50
  %310 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !50
  %311 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !50
  %312 = insertelement <8 x i32> poison, i32 %303, i64 0, !dbg !50
  %313 = insertelement <8 x i32> %312, i32 %304, i64 1, !dbg !50
  %314 = insertelement <8 x i32> %313, i32 %305, i64 2, !dbg !50
  %315 = insertelement <8 x i32> %314, i32 %306, i64 3, !dbg !50
  %316 = insertelement <8 x i32> %315, i32 %308, i64 4, !dbg !50
  %317 = insertelement <8 x i32> %316, i32 %309, i64 5, !dbg !50
  %318 = insertelement <8 x i32> %317, i32 %310, i64 6, !dbg !50
  %319 = insertelement <8 x i32> %318, i32 %311, i64 7, !dbg !50
  %320 = bitcast <8 x i32> %319 to <8 x float>, !dbg !50
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i = icmp eq i32 %321, 0, !dbg !51
  br i1 %.not.i, label %324, label %322, !dbg !51

322:                                              ; preds = %196
  %323 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %177), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

324:                                              ; preds = %196
  %325 = tail call float @llvm.nvvm.rsqrt.approx.f(float %177), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %322, %324
  %.0.i = phi float [ %323, %322 ], [ %325, %324 ], !dbg !51
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %333 = insertelement <8 x float> poison, float %225, i64 0, !dbg !52
  %334 = insertelement <8 x float> %333, float %226, i64 1, !dbg !52
  %335 = insertelement <8 x float> %334, float %227, i64 2, !dbg !52
  %336 = insertelement <8 x float> %335, float %228, i64 3, !dbg !52
  %337 = insertelement <8 x float> %336, float %229, i64 4, !dbg !52
  %338 = insertelement <8 x float> %337, float %230, i64 5, !dbg !52
  %339 = insertelement <8 x float> %338, float %231, i64 6, !dbg !52
  %340 = insertelement <8 x float> %339, float %232, i64 7, !dbg !52
  %341 = insertelement <8 x float> poison, float %.0.i, i64 0, !dbg !52
  %342 = shufflevector <8 x float> %341, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !52
  %343 = fmul <8 x float> %340, %342, !dbg !52
  %344 = fadd <8 x float> %255, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !53
  %345 = fmul <8 x float> %344, %343, !dbg !54
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i48 = icmp eq i32 %346, 0, !dbg !55
  br i1 %.not.i48, label %349, label %347, !dbg !55

347:                                              ; preds = %__nv_rsqrtf.exit
  %348 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %186), !dbg !55
  br label %__nv_rsqrtf.exit50, !dbg !55

349:                                              ; preds = %__nv_rsqrtf.exit
  %350 = tail call float @llvm.nvvm.rsqrt.approx.f(float %186), !dbg !55
  br label %__nv_rsqrtf.exit50, !dbg !55

__nv_rsqrtf.exit50:                               ; preds = %347, %349
  %.0.i49 = phi float [ %348, %347 ], [ %350, %349 ], !dbg !55
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %358 = insertelement <8 x float> poison, float %270, i64 0, !dbg !56
  %359 = insertelement <8 x float> %358, float %271, i64 1, !dbg !56
  %360 = insertelement <8 x float> %359, float %272, i64 2, !dbg !56
  %361 = insertelement <8 x float> %360, float %273, i64 3, !dbg !56
  %362 = insertelement <8 x float> %361, float %274, i64 4, !dbg !56
  %363 = insertelement <8 x float> %362, float %275, i64 5, !dbg !56
  %364 = insertelement <8 x float> %363, float %276, i64 6, !dbg !56
  %365 = insertelement <8 x float> %364, float %277, i64 7, !dbg !56
  %366 = insertelement <8 x float> poison, float %.0.i49, i64 0, !dbg !56
  %367 = shufflevector <8 x float> %366, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !56
  %368 = fmul <8 x float> %365, %367, !dbg !56
  %369 = fadd <8 x float> %298, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !57
  %370 = fmul <8 x float> %369, %368, !dbg !58
  %371 = fadd <8 x float> %370, %320, !dbg !59
  %372 = fadd <8 x float> %345, %371, !dbg !60
  %373 = sext i32 %208 to i64, !dbg !61
  %374 = getelementptr float, ptr addrspace(1) %6, i64 %373, !dbg !61
  %375 = sext i32 %209 to i64, !dbg !61
  %376 = getelementptr float, ptr addrspace(1) %6, i64 %375, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  store <8 x float> %372, ptr addrspace(3) %188, align 32, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %377 = load <4 x i32>, ptr addrspace(3) %192, align 16, !dbg !62
  %.extract = load i32, ptr addrspace(3) %190, align 16, !dbg !62
  %.extract10 = load i32, ptr addrspace(3) %193, align 4, !dbg !62
  %.extract12 = load i32, ptr addrspace(3) %194, align 8, !dbg !62
  %.extract14 = load i32, ptr addrspace(3) %195, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract12, i32 %.extract14, ptr addrspace(1) %374, i1 %204) #6, !dbg !62
  %.extract16 = extractelement <4 x i32> %377, i64 0, !dbg !62
  %.extract18 = extractelement <4 x i32> %377, i64 1, !dbg !62
  %.extract20 = extractelement <4 x i32> %377, i64 2, !dbg !62
  %.extract22 = extractelement <4 x i32> %377, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract16, i32 %.extract18, i32 %.extract20, i32 %.extract22, ptr addrspace(1) %376, i1 %205) #6, !dbg !62
  br i1 %197, label %196, label %378, !dbg !35

378:                                              ; preds = %__nv_rsqrtf.exit50
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cwcurfniupfcn3nofnbetctuf2umlj2qwj5ktxehenyhg6fxsyu7.py", directory: "/tmp/torchinductor_zeus/wc")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7de8de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7de8de", linkageName: "triton__0d1d2d3d4d5d6d7de8de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 36, scope: !7)
!31 = !DILocation(line: 50, column: 22, scope: !7)
!32 = !DILocation(line: 52, column: 23, scope: !7)
!33 = !DILocation(line: 61, column: 24, scope: !7)
!34 = !DILocation(line: 62, column: 24, scope: !7)
!35 = !DILocation(line: 39, column: 36, scope: !7)
!36 = !DILocation(line: 40, column: 27, scope: !7)
!37 = !DILocation(line: 41, column: 25, scope: !7)
!38 = !DILocation(line: 43, column: 40, scope: !7)
!39 = !DILocation(line: 43, column: 34, scope: !7)
!40 = !DILocation(line: 43, column: 51, scope: !7)
!41 = !DILocation(line: 43, column: 103, scope: !7)
!42 = !DILocation(line: 44, column: 35, scope: !7)
!43 = !DILocation(line: 44, column: 40, scope: !7)
!44 = !DILocation(line: 45, column: 35, scope: !7)
!45 = !DILocation(line: 45, column: 52, scope: !7)
!46 = !DILocation(line: 45, column: 104, scope: !7)
!47 = !DILocation(line: 46, column: 35, scope: !7)
!48 = !DILocation(line: 46, column: 40, scope: !7)
!49 = !DILocation(line: 47, column: 35, scope: !7)
!50 = !DILocation(line: 47, column: 52, scope: !7)
!51 = !DILocation(line: 53, column: 30, scope: !7)
!52 = !DILocation(line: 54, column: 23, scope: !7)
!53 = !DILocation(line: 56, column: 24, scope: !7)
!54 = !DILocation(line: 57, column: 24, scope: !7)
!55 = !DILocation(line: 63, column: 30, scope: !7)
!56 = !DILocation(line: 64, column: 24, scope: !7)
!57 = !DILocation(line: 65, column: 24, scope: !7)
!58 = !DILocation(line: 66, column: 24, scope: !7)
!59 = !DILocation(line: 69, column: 24, scope: !7)
!60 = !DILocation(line: 70, column: 24, scope: !7)
!61 = !DILocation(line: 71, column: 29, scope: !7)
!62 = !DILocation(line: 71, column: 53, scope: !7)
!63 = !DILocation(line: 39, column: 4, scope: !7)
