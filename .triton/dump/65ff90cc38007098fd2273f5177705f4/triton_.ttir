module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10de11de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c512_i32 = arith.constant 512 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x1024xbf16>
    %c2304_i32 = arith.constant 2304 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x1024xf32>
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<2.304000e+03> : tensor<1x1xf32>
    %cst_3 = arith.constant dense<2304> : tensor<1x1024xi32>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c512_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<1024xi32>) -> tensor<1x1024xi32>
    %5 = arith.muli %0, %c2304_i32 : i32
    %6 = tt.splat %5 : (i32) -> tensor<1x1024xi32>
    %7 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %8 = tt.splat %1 : (i1) -> tensor<1x1024xi1>
    %9 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg13 = %cst_4) -> (tensor<1x1024xf32>)  : i32 {
      %45 = tt.splat %arg12 : (i32) -> tensor<1x1024xi32>
      %46 = arith.addi %45, %4 : tensor<1x1024xi32>
      %47 = arith.cmpi slt, %46, %cst_3 : tensor<1x1024xi32>
      %48 = arith.addi %46, %6 : tensor<1x1024xi32>
      %49 = tt.addptr %7, %48 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %50 = arith.andi %47, %8 : tensor<1x1024xi1>
      %51 = tt.load %49, %50, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %52 = arith.extf %51 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %53 = arith.mulf %52, %52 : tensor<1x1024xf32>
      %54 = arith.addf %arg13, %53 : tensor<1x1024xf32>
      %55 = arith.select %50, %54, %arg13 : tensor<1x1024xi1>, tensor<1x1024xf32>
      scf.yield %55 : tensor<1x1024xf32>
    }
    %10 = "tt.reduce"(%9) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %45 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %45 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %11 = tt.expand_dims %10 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %12 = arith.divf %11, %cst_2 : tensor<1x1xf32>
    %13 = arith.addf %12, %cst_1 : tensor<1x1xf32>
    %14 = tt.extern_elementwise %13 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
    gpu.barrier
    %15 = tt.addptr %arg0, %0 : !tt.ptr<f32, 1>, i32
    %16 = tt.splat %15 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %16, %14, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %17 = tt.addptr %arg6, %0 : !tt.ptr<f32, 1>, i32
    %18 = tt.splat %17 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    %19 = tt.load %18, %2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1xf32>
    %20 = arith.muli %0, %c2304_i32 : i32
    %21 = tt.splat %20 : (i32) -> tensor<1x1024xi32>
    %22 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %23 = tt.splat %1 : (i1) -> tensor<1x1024xi1>
    %24 = tt.splat %arg4 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %25 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    %26 = tt.splat %arg7 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %27 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %28 = tt.broadcast %14 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
    %29 = tt.broadcast %19 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
    %30 = scf.for %arg12 = %c0_i32 to %c2304_i32 step %c1024_i32 iter_args(%arg13 = %cst_4) -> (tensor<1x1024xf32>)  : i32 {
      %45 = tt.splat %arg12 : (i32) -> tensor<1x1024xi32>
      %46 = arith.addi %45, %4 : tensor<1x1024xi32>
      %47 = arith.cmpi slt, %46, %cst_3 : tensor<1x1024xi32>
      %48 = arith.addi %46, %21 : tensor<1x1024xi32>
      %49 = tt.addptr %22, %48 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %50 = arith.andi %47, %23 : tensor<1x1024xi1>
      %51 = tt.load %49, %50, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %52 = arith.extf %51 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %53 = tt.addptr %24, %46 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %54 = tt.load %53, %47, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %55 = tt.addptr %25, %48 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %56 = tt.load %55, %50, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xbf16>
      %57 = arith.extf %56 : tensor<1x1024xbf16> to tensor<1x1024xf32>
      %58 = tt.addptr %26, %46 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %59 = tt.load %58, %47, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %60 = tt.addptr %27, %48 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %61 = tt.load %60, %50, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %62 = arith.mulf %52, %28 : tensor<1x1024xf32>
      %63 = arith.addf %54, %cst_0 : tensor<1x1024xf32>
      %64 = arith.mulf %62, %63 : tensor<1x1024xf32>
      %65 = arith.mulf %57, %29 : tensor<1x1024xf32>
      %66 = arith.addf %59, %cst_0 : tensor<1x1024xf32>
      %67 = arith.mulf %65, %66 : tensor<1x1024xf32>
      %68 = arith.addf %67, %61 : tensor<1x1024xf32>
      %69 = arith.addf %64, %68 : tensor<1x1024xf32>
      %70 = arith.mulf %69, %69 : tensor<1x1024xf32>
      %71 = arith.addf %arg13, %70 : tensor<1x1024xf32>
      %72 = arith.select %50, %71, %arg13 : tensor<1x1024xi1>, tensor<1x1024xf32>
      tt.store %60, %69, %50 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xf32>
      scf.yield %72 : tensor<1x1024xf32>
    }
    %31 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32, %arg13: f32):
      %45 = arith.addf %arg12, %arg13 : f32
      tt.reduce.return %45 : f32
    }) : (tensor<1x1024xf32>) -> tensor<1xf32>
    %32 = tt.expand_dims %31 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %33 = arith.divf %32, %cst_2 : tensor<1x1xf32>
    %34 = arith.addf %33, %cst_1 : tensor<1x1xf32>
    %35 = tt.extern_elementwise %34 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
    gpu.barrier
    %36 = tt.addptr %arg2, %0 : !tt.ptr<f32, 1>, i32
    %37 = tt.splat %36 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %37, %35, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    %38 = arith.muli %0, %c2304_i32 : i32
    %39 = tt.splat %38 : (i32) -> tensor<1x1024xi32>
    %40 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %41 = tt.splat %1 : (i1) -> tensor<1x1024xi1>
    %42 = tt.splat %arg8 : (!tt.ptr<f32, 1>) -> tensor<1x1024x!tt.ptr<f32, 1>>
    %43 = tt.broadcast %35 : (tensor<1x1xf32>) -> tensor<1x1024xf32>
    %44 = tt.splat %arg9 : (!tt.ptr<bf16, 1>) -> tensor<1x1024x!tt.ptr<bf16, 1>>
    scf.for %arg12 = %c0_i32 to %c2304_i32 step %c1024_i32  : i32 {
      %45 = tt.splat %arg12 : (i32) -> tensor<1x1024xi32>
      %46 = arith.addi %45, %4 : tensor<1x1024xi32>
      %47 = arith.cmpi slt, %46, %cst_3 : tensor<1x1024xi32>
      %48 = arith.addi %46, %39 : tensor<1x1024xi32>
      %49 = tt.addptr %40, %48 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %50 = arith.andi %47, %41 : tensor<1x1024xi1>
      %51 = tt.load %49, %50, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x1024xf32>
      %52 = tt.addptr %42, %46 : tensor<1x1024x!tt.ptr<f32, 1>>, tensor<1x1024xi32>
      %53 = tt.load %52, %47, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x1024xf32>
      %54 = arith.mulf %51, %43 : tensor<1x1024xf32>
      %55 = arith.addf %53, %cst_0 : tensor<1x1024xf32>
      %56 = arith.mulf %54, %55 : tensor<1x1024xf32>
      %57 = tt.addptr %44, %48 : tensor<1x1024x!tt.ptr<bf16, 1>>, tensor<1x1024xi32>
      %58 = arith.truncf %56 : tensor<1x1024xf32> to tensor<1x1024xbf16>
      tt.store %57, %58, %50 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1024xbf16>
    }
    tt.return
  }
}
