; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d9d10de11de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %14 = and i32 %13, 31, !dbg !10
  %15 = lshr i32 %13, 5, !dbg !10
  %16 = and i32 %15, 7, !dbg !10
  %urem = and i32 %13, 255, !dbg !10
  %17 = shl nuw nsw i32 %urem, 2, !dbg !10
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %.fr38 = freeze i32 %18, !dbg !12
  %19 = icmp slt i32 %.fr38, 512, !dbg !12
  %20 = mul i32 %.fr38, 2304, !dbg !13
  %21 = add i32 %17, %20, !dbg !14
  %22 = sext i32 %21 to i64, !dbg !15
  %23 = getelementptr i16, ptr addrspace(1) %3, i64 %22, !dbg !15
  br i1 %19, label %.split.preheader, label %.split.us.preheader

.split.us.preheader:                              ; preds = %12
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !16
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !16
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !16
  %27 = trunc i32 %25 to i16, !dbg !16
  %extelt.offset6.us = lshr i32 %25, 16, !dbg !16
  %28 = trunc i32 %extelt.offset6.us to i16, !dbg !16
  %29 = trunc i32 %26 to i16, !dbg !16
  %extelt.offset7.us = lshr i32 %26, 16, !dbg !16
  %30 = trunc i32 %extelt.offset7.us to i16, !dbg !16
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !17
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !17
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !17
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #6, !dbg !17
  %35 = or i32 %17, 1024, !dbg !18
  %36 = add i32 %35, %20, !dbg !14
  %37 = sext i32 %36 to i64, !dbg !15
  %38 = getelementptr i16, ptr addrspace(1) %3, i64 %37, !dbg !15
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !16
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !16
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !16
  %42 = trunc i32 %40 to i16, !dbg !16
  %extelt.offset6.us.1 = lshr i32 %40, 16, !dbg !16
  %43 = trunc i32 %extelt.offset6.us.1 to i16, !dbg !16
  %44 = trunc i32 %41 to i16, !dbg !16
  %extelt.offset7.us.1 = lshr i32 %41, 16, !dbg !16
  %45 = trunc i32 %extelt.offset7.us.1 to i16, !dbg !16
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #6, !dbg !17
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #6, !dbg !17
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #6, !dbg !17
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #6, !dbg !17
  %50 = or i32 %17, 2048, !dbg !18
  %51 = add i32 %50, %20, !dbg !14
  %52 = sext i32 %51 to i64, !dbg !15
  %53 = getelementptr i16, ptr addrspace(1) %3, i64 %52, !dbg !15
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 false, i32 0, i1 false, i32 0, i1 false) #6, !dbg !16
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !16
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !16
  %57 = trunc i32 %55 to i16, !dbg !16
  %extelt.offset6.us.2 = lshr i32 %55, 16, !dbg !16
  %58 = trunc i32 %extelt.offset6.us.2 to i16, !dbg !16
  %59 = trunc i32 %56 to i16, !dbg !16
  %extelt.offset7.us.2 = lshr i32 %56, 16, !dbg !16
  %60 = trunc i32 %extelt.offset7.us.2 to i16, !dbg !16
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #6, !dbg !17
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #6, !dbg !17
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #6, !dbg !17
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #6, !dbg !17
  br label %.split37.us, !dbg !19

.split.preheader:                                 ; preds = %12
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !16
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !16
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !16
  %68 = trunc i32 %66 to i16, !dbg !16
  %extelt.offset6 = lshr i32 %66, 16, !dbg !16
  %69 = trunc i32 %extelt.offset6 to i16, !dbg !16
  %70 = trunc i32 %67 to i16, !dbg !16
  %extelt.offset7 = lshr i32 %67, 16, !dbg !16
  %71 = trunc i32 %extelt.offset7 to i16, !dbg !16
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #6, !dbg !17
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #6, !dbg !17
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #6, !dbg !17
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #6, !dbg !17
  %76 = or i32 %17, 1024, !dbg !18
  %77 = add i32 %76, %20, !dbg !14
  %78 = sext i32 %77 to i64, !dbg !15
  %79 = getelementptr i16, ptr addrspace(1) %3, i64 %78, !dbg !15
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !16
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !16
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !16
  %83 = trunc i32 %81 to i16, !dbg !16
  %extelt.offset6.1 = lshr i32 %81, 16, !dbg !16
  %84 = trunc i32 %extelt.offset6.1 to i16, !dbg !16
  %85 = trunc i32 %82 to i16, !dbg !16
  %extelt.offset7.1 = lshr i32 %82, 16, !dbg !16
  %86 = trunc i32 %extelt.offset7.1 to i16, !dbg !16
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #6, !dbg !17
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #6, !dbg !17
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #6, !dbg !17
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #6, !dbg !17
  %91 = or i32 %17, 2048, !dbg !18
  %92 = icmp ult i32 %91, 2304, !dbg !23
  %93 = add i32 %91, %20, !dbg !14
  %94 = sext i32 %93 to i64, !dbg !15
  %95 = getelementptr i16, ptr addrspace(1) %3, i64 %94, !dbg !15
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %95, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #6, !dbg !16
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !16
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !16
  %99 = trunc i32 %97 to i16, !dbg !16
  %extelt.offset6.2 = lshr i32 %97, 16, !dbg !16
  %100 = trunc i32 %extelt.offset6.2 to i16, !dbg !16
  %101 = trunc i32 %98 to i16, !dbg !16
  %extelt.offset7.2 = lshr i32 %98, 16, !dbg !16
  %102 = trunc i32 %extelt.offset7.2 to i16, !dbg !16
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #6, !dbg !17
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #6, !dbg !17
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #6, !dbg !17
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #6, !dbg !17
  %107 = insertelement <2 x float> poison, float %72, i64 0, !dbg !24
  %108 = insertelement <2 x float> %107, float %73, i64 1, !dbg !24
  %109 = fmul <2 x float> %108, %108, !dbg !24
  %110 = insertelement <2 x float> poison, float %87, i64 0, !dbg !24
  %111 = insertelement <2 x float> %110, float %88, i64 1, !dbg !24
  %112 = fmul <2 x float> %111, %111, !dbg !24
  %113 = fadd <2 x float> %109, %112, !dbg !25
  %114 = insertelement <2 x float> poison, float %103, i64 0, !dbg !24
  %115 = insertelement <2 x float> %114, float %104, i64 1, !dbg !24
  %116 = fmul <2 x float> %115, %115, !dbg !24
  %117 = insertelement <2 x i1> poison, i1 %92, i64 0, !dbg !25
  %118 = shufflevector <2 x i1> %117, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !25
  %119 = select <2 x i1> %118, <2 x float> %116, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !25
  %120 = fadd <2 x float> %113, %119, !dbg !25
  %121 = insertelement <2 x float> poison, float %75, i64 0, !dbg !24
  %122 = insertelement <2 x float> %121, float %74, i64 1, !dbg !24
  %123 = fmul <2 x float> %122, %122, !dbg !24
  %124 = insertelement <2 x float> poison, float %90, i64 0, !dbg !24
  %125 = insertelement <2 x float> %124, float %89, i64 1, !dbg !24
  %126 = fmul <2 x float> %125, %125, !dbg !24
  %127 = fadd <2 x float> %123, %126, !dbg !25
  %128 = insertelement <2 x float> poison, float %106, i64 0, !dbg !24
  %129 = insertelement <2 x float> %128, float %105, i64 1, !dbg !24
  %130 = fmul <2 x float> %129, %129, !dbg !24
  %131 = select <2 x i1> %118, <2 x float> %130, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !25
  %132 = fadd <2 x float> %127, %131, !dbg !25
  %shift = shufflevector <2 x float> %120, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %133 = fadd <2 x float> %120, %shift, !dbg !19
  %shift51 = shufflevector <2 x float> %132, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %134 = fadd <2 x float> %shift51, %133, !dbg !19
  %135 = fadd <2 x float> %132, %134, !dbg !19
  %136 = extractelement <2 x float> %135, i64 0, !dbg !19
  br label %.split37.us, !dbg !19

.split37.us:                                      ; preds = %.split.us.preheader, %.split.preheader
  %137 = phi float [ %136, %.split.preheader ], [ 0.000000e+00, %.split.us.preheader ], !dbg !26
  %138 = bitcast float %137 to i32, !dbg !19
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 16, i32 31), !dbg !19
  %140 = bitcast i32 %139 to float, !dbg !19
  %141 = fadd float %137, %140, !dbg !26
  %142 = bitcast float %141 to i32, !dbg !19
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 8, i32 31), !dbg !19
  %144 = bitcast i32 %143 to float, !dbg !19
  %145 = fadd float %141, %144, !dbg !26
  %146 = bitcast float %145 to i32, !dbg !19
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 4, i32 31), !dbg !19
  %148 = bitcast i32 %147 to float, !dbg !19
  %149 = fadd float %145, %148, !dbg !26
  %150 = bitcast float %149 to i32, !dbg !19
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 2, i32 31), !dbg !19
  %152 = bitcast i32 %151 to float, !dbg !19
  %153 = fadd float %149, %152, !dbg !26
  %154 = bitcast float %153 to i32, !dbg !19
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 1, i32 31), !dbg !19
  %156 = bitcast i32 %155 to float, !dbg !19
  %157 = fadd float %153, %156, !dbg !26
  %158 = icmp eq i32 %14, 0, !dbg !19
  %159 = zext nneg i32 %16 to i64, !dbg !19
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i64 %159, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, float %157, i1 %158) #6, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %161 = icmp slt i32 %13, 8, !dbg !19
  %162 = sext i32 %13 to i64, !dbg !19
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i64 %162, !dbg !19
  %164 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %163, i1 %161) #6, !dbg !19
  %165 = bitcast float %164 to i32, !dbg !19
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 4, i32 31), !dbg !19
  %167 = bitcast i32 %166 to float, !dbg !19
  %168 = fadd float %164, %167, !dbg !26
  %169 = bitcast float %168 to i32, !dbg !19
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !19
  %171 = bitcast i32 %170 to float, !dbg !19
  %172 = fadd float %168, %171, !dbg !26
  %173 = bitcast float %172 to i32, !dbg !19
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !19
  %175 = bitcast i32 %174 to float, !dbg !19
  %176 = fadd float %172, %175, !dbg !26
  %177 = and i32 %13, 7, !dbg !19
  %178 = icmp eq i32 %177, 0, !dbg !19
  %179 = and i1 %161, %178, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, float %176, i1 %179) #6, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %180 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %181 = insertelement <1 x float> undef, float %180, i64 0, !dbg !30
  store <1 x float> %181, ptr addrspace(3) @global_smem, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %182 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !30
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float 2.304000e+03) #6, !dbg !31
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float 2.304000e+03) #6, !dbg !31
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float 2.304000e+03) #6, !dbg !31
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float 2.304000e+03) #6, !dbg !31
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float 2.304000e+03) #6, !dbg !31
  %188 = fadd float %183, 0x3EE4F8B580000000, !dbg !32
  %189 = fadd float %184, 0x3EE4F8B580000000, !dbg !32
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %.not.i = icmp eq i32 %190, 0, !dbg !30
  br i1 %.not.i, label %193, label %191, !dbg !30

191:                                              ; preds = %.split37.us
  %192 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %188), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

193:                                              ; preds = %.split37.us
  %194 = tail call float @llvm.nvvm.rsqrt.approx.f(float %188), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

__nv_rsqrtf.exit:                                 ; preds = %191, %193
  %.0.i = phi float [ %192, %191 ], [ %194, %193 ], !dbg !30
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %.not.i8 = icmp eq i32 %195, 0, !dbg !30
  br i1 %.not.i8, label %198, label %196, !dbg !30

196:                                              ; preds = %__nv_rsqrtf.exit
  %197 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %189), !dbg !30
  br label %__nv_rsqrtf.exit10, !dbg !30

198:                                              ; preds = %__nv_rsqrtf.exit
  %199 = tail call float @llvm.nvvm.rsqrt.approx.f(float %189), !dbg !30
  br label %__nv_rsqrtf.exit10, !dbg !30

__nv_rsqrtf.exit10:                               ; preds = %196, %198
  %.0.i9 = phi float [ %197, %196 ], [ %199, %198 ], !dbg !30
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %203 = sext i32 %.fr38 to i64, !dbg !34
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !34
  %205 = icmp eq i32 %urem, 0, !dbg !35
  %206 = bitcast float %.0.i to i32, !dbg !35
  %207 = and i1 %205, %19, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %206, ptr addrspace(1) %204, i1 %207) #6, !dbg !35
  %208 = getelementptr float, ptr addrspace(1) %6, i64 %203, !dbg !36
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %19) #6, !dbg !37
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %19) #6, !dbg !37
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %19) #6, !dbg !37
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %19) #6, !dbg !37
  %213 = insertelement <4 x float> poison, float %.0.i9, i64 0, !dbg !38
  %214 = shufflevector <4 x float> %213, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %215 = insertelement <4 x i32> undef, i32 %209, i64 0, !dbg !39
  %216 = bitcast <4 x i32> %215 to <4 x float>, !dbg !39
  %217 = shufflevector <4 x float> %216, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !39
  br label %218, !dbg !40

218:                                              ; preds = %__nv_rsqrtf.exit10, %218
  %219 = phi i32 [ 0, %__nv_rsqrtf.exit10 ], [ %309, %218 ]
  %220 = phi <4 x float> [ zeroinitializer, %__nv_rsqrtf.exit10 ], [ %304, %218 ]
  %221 = or i32 %219, %17, !dbg !41
  %222 = icmp ult i32 %221, 2304, !dbg !42
  %223 = add i32 %221, %20, !dbg !43
  %224 = sext i32 %223 to i64, !dbg !44
  %225 = getelementptr i16, ptr addrspace(1) %3, i64 %224, !dbg !44
  %226 = and i1 %19, %222, !dbg !45
  %227 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %225, i1 %226, i32 0, i1 %226, i32 0, i1 %226) #6, !dbg !46
  %228 = extractvalue { i32, i32 } %227, 0, !dbg !46
  %229 = extractvalue { i32, i32 } %227, 1, !dbg !46
  %230 = trunc i32 %228 to i16, !dbg !46
  %extelt.offset = lshr i32 %228, 16, !dbg !46
  %231 = trunc i32 %extelt.offset to i16, !dbg !46
  %232 = trunc i32 %229 to i16, !dbg !46
  %extelt.offset3 = lshr i32 %229, 16, !dbg !46
  %233 = trunc i32 %extelt.offset3 to i16, !dbg !46
  %234 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %230) #6, !dbg !47
  %235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #6, !dbg !47
  %236 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #6, !dbg !47
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #6, !dbg !47
  %238 = zext nneg i32 %221 to i64, !dbg !48
  %239 = getelementptr float, ptr addrspace(1) %4, i64 %238, !dbg !48
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %239, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #6, !dbg !49
  %241 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !49
  %242 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !49
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !49
  %244 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !49
  %245 = getelementptr i16, ptr addrspace(1) %5, i64 %224, !dbg !50
  %246 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %245, i1 %226, i32 0, i1 %226, i32 0, i1 %226) #6, !dbg !51
  %247 = extractvalue { i32, i32 } %246, 0, !dbg !51
  %248 = extractvalue { i32, i32 } %246, 1, !dbg !51
  %249 = trunc i32 %247 to i16, !dbg !51
  %extelt.offset4 = lshr i32 %247, 16, !dbg !51
  %250 = trunc i32 %extelt.offset4 to i16, !dbg !51
  %251 = trunc i32 %248 to i16, !dbg !51
  %extelt.offset5 = lshr i32 %248, 16, !dbg !51
  %252 = trunc i32 %extelt.offset5 to i16, !dbg !51
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %249) #6, !dbg !52
  %254 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %250) #6, !dbg !52
  %255 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %251) #6, !dbg !52
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %252) #6, !dbg !52
  %257 = getelementptr float, ptr addrspace(1) %7, i64 %238, !dbg !53
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %257, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #6, !dbg !54
  %259 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !54
  %260 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !54
  %261 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !54
  %262 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !54
  %263 = getelementptr float, ptr addrspace(1) %1, i64 %224, !dbg !55
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %263, i1 %226, i32 0, i1 %226, i32 0, i1 %226, i32 0, i1 %226, i32 0, i1 %226) #6, !dbg !56
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !56
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !56
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !56
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !56
  %269 = insertelement <4 x i32> poison, i32 %241, i64 0, !dbg !49
  %270 = insertelement <4 x i32> %269, i32 %242, i64 1, !dbg !49
  %271 = insertelement <4 x i32> %270, i32 %243, i64 2, !dbg !49
  %272 = insertelement <4 x i32> %271, i32 %244, i64 3, !dbg !49
  %273 = bitcast <4 x i32> %272 to <4 x float>, !dbg !49
  %274 = insertelement <4 x i32> poison, i32 %259, i64 0, !dbg !54
  %275 = insertelement <4 x i32> %274, i32 %260, i64 1, !dbg !54
  %276 = insertelement <4 x i32> %275, i32 %261, i64 2, !dbg !54
  %277 = insertelement <4 x i32> %276, i32 %262, i64 3, !dbg !54
  %278 = bitcast <4 x i32> %277 to <4 x float>, !dbg !54
  %279 = insertelement <4 x i32> poison, i32 %265, i64 0, !dbg !56
  %280 = insertelement <4 x i32> %279, i32 %266, i64 1, !dbg !56
  %281 = insertelement <4 x i32> %280, i32 %267, i64 2, !dbg !56
  %282 = insertelement <4 x i32> %281, i32 %268, i64 3, !dbg !56
  %283 = bitcast <4 x i32> %282 to <4 x float>, !dbg !56
  %284 = insertelement <4 x float> poison, float %234, i64 0, !dbg !38
  %285 = insertelement <4 x float> %284, float %235, i64 1, !dbg !38
  %286 = insertelement <4 x float> %285, float %236, i64 2, !dbg !38
  %287 = insertelement <4 x float> %286, float %237, i64 3, !dbg !38
  %288 = fmul <4 x float> %214, %287, !dbg !38
  %289 = fadd <4 x float> %273, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !57
  %290 = fmul <4 x float> %288, %289, !dbg !58
  %291 = insertelement <4 x float> poison, float %253, i64 0, !dbg !39
  %292 = insertelement <4 x float> %291, float %254, i64 1, !dbg !39
  %293 = insertelement <4 x float> %292, float %255, i64 2, !dbg !39
  %294 = insertelement <4 x float> %293, float %256, i64 3, !dbg !39
  %295 = fmul <4 x float> %294, %217, !dbg !39
  %296 = fadd <4 x float> %278, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !59
  %297 = fmul <4 x float> %295, %296, !dbg !60
  %298 = fadd <4 x float> %297, %283, !dbg !61
  %299 = fadd <4 x float> %290, %298, !dbg !62
  %300 = fmul <4 x float> %299, %299, !dbg !63
  %301 = insertelement <4 x i1> poison, i1 %226, i64 0, !dbg !64
  %302 = shufflevector <4 x i1> %301, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !64
  %303 = select <4 x i1> %302, <4 x float> %300, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !64
  %304 = fadd <4 x float> %220, %303, !dbg !64
  %bc = bitcast <4 x float> %299 to <4 x i32>, !dbg !65
  %305 = extractelement <4 x i32> %bc, i64 0, !dbg !65
  %bc55 = bitcast <4 x float> %299 to <4 x i32>, !dbg !65
  %306 = extractelement <4 x i32> %bc55, i64 1, !dbg !65
  %bc56 = bitcast <4 x float> %299 to <4 x i32>, !dbg !65
  %307 = extractelement <4 x i32> %bc56, i64 2, !dbg !65
  %bc57 = bitcast <4 x float> %299 to <4 x i32>, !dbg !65
  %308 = extractelement <4 x i32> %bc57, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %305, i32 %306, i32 %307, i32 %308, ptr addrspace(1) %263, i1 %226) #6, !dbg !65
  %309 = add nuw nsw i32 %219, 1024, !dbg !40
  %310 = icmp ult i32 %219, 1280, !dbg !40
  br i1 %310, label %218, label %311, !dbg !40

311:                                              ; preds = %218
  %shift52 = shufflevector <4 x float> %304, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !66
  %312 = fadd <4 x float> %304, %shift52, !dbg !66
  %shift53 = shufflevector <4 x float> %304, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !66
  %313 = fadd <4 x float> %shift53, %312, !dbg !66
  %shift54 = shufflevector <4 x float> %304, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !66
  %314 = fadd <4 x float> %shift54, %313, !dbg !66
  %315 = extractelement <4 x float> %314, i64 0, !dbg !66
  %316 = bitcast float %315 to i32, !dbg !69
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 16, i32 31), !dbg !69
  %318 = bitcast i32 %317 to float, !dbg !69
  %319 = fadd float %315, %318, !dbg !66
  %320 = bitcast float %319 to i32, !dbg !69
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 8, i32 31), !dbg !69
  %322 = bitcast i32 %321 to float, !dbg !69
  %323 = fadd float %319, %322, !dbg !66
  %324 = bitcast float %323 to i32, !dbg !69
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !69
  %326 = bitcast i32 %325 to float, !dbg !69
  %327 = fadd float %323, %326, !dbg !66
  %328 = bitcast float %327 to i32, !dbg !69
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 2, i32 31), !dbg !69
  %330 = bitcast i32 %329 to float, !dbg !69
  %331 = fadd float %327, %330, !dbg !66
  %332 = bitcast float %331 to i32, !dbg !69
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !69
  %334 = bitcast i32 %333 to float, !dbg !69
  %335 = fadd float %331, %334, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, float %335, i1 %158) #6, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %336 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %163, i1 %161) #6, !dbg !69
  %337 = bitcast float %336 to i32, !dbg !69
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 4, i32 31), !dbg !69
  %339 = bitcast i32 %338 to float, !dbg !69
  %340 = fadd float %336, %339, !dbg !66
  %341 = bitcast float %340 to i32, !dbg !69
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 2, i32 31), !dbg !69
  %343 = bitcast i32 %342 to float, !dbg !69
  %344 = fadd float %340, %343, !dbg !66
  %345 = bitcast float %344 to i32, !dbg !69
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 1, i32 31), !dbg !69
  %347 = bitcast i32 %346 to float, !dbg !69
  %348 = fadd float %344, %347, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, float %348, i1 %179) #6, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %349 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %350 = insertelement <1 x float> undef, float %349, i64 0, !dbg !71
  store <1 x float> %350, ptr addrspace(3) @global_smem, align 4, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %351 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !71
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %351, float 2.304000e+03) #6, !dbg !72
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float 2.304000e+03) #6, !dbg !72
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float 2.304000e+03) #6, !dbg !72
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float 2.304000e+03) #6, !dbg !72
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float 2.304000e+03) #6, !dbg !72
  %357 = fadd float %352, 0x3EE4F8B580000000, !dbg !73
  %358 = fadd float %353, 0x3EE4F8B580000000, !dbg !73
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %.not.i20 = icmp eq i32 %359, 0, !dbg !71
  br i1 %.not.i20, label %362, label %360, !dbg !71

360:                                              ; preds = %311
  %361 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %357), !dbg !71
  br label %__nv_rsqrtf.exit22, !dbg !71

362:                                              ; preds = %311
  %363 = tail call float @llvm.nvvm.rsqrt.approx.f(float %357), !dbg !71
  br label %__nv_rsqrtf.exit22, !dbg !71

__nv_rsqrtf.exit22:                               ; preds = %360, %362
  %.0.i21 = phi float [ %361, %360 ], [ %363, %362 ], !dbg !71
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %.not.i23 = icmp eq i32 %364, 0, !dbg !71
  br i1 %.not.i23, label %367, label %365, !dbg !71

365:                                              ; preds = %__nv_rsqrtf.exit22
  %366 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %358), !dbg !71
  br label %__nv_rsqrtf.exit25, !dbg !71

367:                                              ; preds = %__nv_rsqrtf.exit22
  %368 = tail call float @llvm.nvvm.rsqrt.approx.f(float %358), !dbg !71
  br label %__nv_rsqrtf.exit25, !dbg !71

__nv_rsqrtf.exit25:                               ; preds = %365, %367
  %.0.i24 = phi float [ %366, %365 ], [ %368, %367 ], !dbg !71
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %372 = getelementptr float, ptr addrspace(1) %2, i64 %203, !dbg !75
  %373 = bitcast float %.0.i21 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %373, ptr addrspace(1) %372, i1 %207) #6, !dbg !76
  %374 = add i32 %17, %20, !dbg !77
  %375 = sext i32 %374 to i64, !dbg !78
  %376 = getelementptr float, ptr addrspace(1) %1, i64 %375, !dbg !78
  %377 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %376, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !79
  %378 = extractvalue { i32, i32, i32, i32 } %377, 0, !dbg !79
  %379 = extractvalue { i32, i32, i32, i32 } %377, 1, !dbg !79
  %380 = extractvalue { i32, i32, i32, i32 } %377, 2, !dbg !79
  %381 = extractvalue { i32, i32, i32, i32 } %377, 3, !dbg !79
  %382 = bitcast i32 %378 to float, !dbg !79
  %383 = bitcast i32 %379 to float, !dbg !79
  %384 = bitcast i32 %380 to float, !dbg !79
  %385 = bitcast i32 %381 to float, !dbg !79
  %386 = zext nneg i32 %17 to i64, !dbg !80
  %387 = getelementptr float, ptr addrspace(1) %8, i64 %386, !dbg !80
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %387, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !81
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !81
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !81
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !81
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !81
  %393 = bitcast i32 %389 to float, !dbg !81
  %394 = bitcast i32 %390 to float, !dbg !81
  %395 = bitcast i32 %391 to float, !dbg !81
  %396 = bitcast i32 %392 to float, !dbg !81
  %397 = fmul float %.0.i24, %382, !dbg !82
  %398 = fmul float %.0.i24, %383, !dbg !82
  %399 = fmul float %.0.i24, %384, !dbg !82
  %400 = fmul float %.0.i24, %385, !dbg !82
  %401 = fadd float %393, 1.000000e+00, !dbg !83
  %402 = fadd float %394, 1.000000e+00, !dbg !83
  %403 = fadd float %395, 1.000000e+00, !dbg !83
  %404 = fadd float %396, 1.000000e+00, !dbg !83
  %405 = fmul float %397, %401, !dbg !84
  %406 = fmul float %398, %402, !dbg !84
  %407 = fmul float %399, %403, !dbg !84
  %408 = fmul float %400, %404, !dbg !84
  %409 = getelementptr i16, ptr addrspace(1) %9, i64 %375, !dbg !85
  %410 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %405) #6, !dbg !86
  %411 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %406) #6, !dbg !86
  %412 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %407) #6, !dbg !86
  %413 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %408) #6, !dbg !86
  %414 = insertelement <2 x i16> undef, i16 %410, i64 0, !dbg !86
  %415 = insertelement <2 x i16> %414, i16 %411, i64 1, !dbg !86
  %416 = bitcast <2 x i16> %415 to i32, !dbg !86
  %417 = insertelement <2 x i16> undef, i16 %412, i64 0, !dbg !86
  %418 = insertelement <2 x i16> %417, i16 %413, i64 1, !dbg !86
  %419 = bitcast <2 x i16> %418 to i32, !dbg !86
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %416, i32 %419, ptr addrspace(1) %409, i1 %19) #6, !dbg !86
  %420 = or i32 %17, 1024, !dbg !87
  %421 = add i32 %420, %20, !dbg !77
  %422 = sext i32 %421 to i64, !dbg !78
  %423 = getelementptr float, ptr addrspace(1) %1, i64 %422, !dbg !78
  %424 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %423, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !79
  %425 = extractvalue { i32, i32, i32, i32 } %424, 0, !dbg !79
  %426 = extractvalue { i32, i32, i32, i32 } %424, 1, !dbg !79
  %427 = extractvalue { i32, i32, i32, i32 } %424, 2, !dbg !79
  %428 = extractvalue { i32, i32, i32, i32 } %424, 3, !dbg !79
  %429 = bitcast i32 %425 to float, !dbg !79
  %430 = bitcast i32 %426 to float, !dbg !79
  %431 = bitcast i32 %427 to float, !dbg !79
  %432 = bitcast i32 %428 to float, !dbg !79
  %433 = zext nneg i32 %420 to i64, !dbg !80
  %434 = getelementptr float, ptr addrspace(1) %8, i64 %433, !dbg !80
  %435 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %434, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !81
  %436 = extractvalue { i32, i32, i32, i32 } %435, 0, !dbg !81
  %437 = extractvalue { i32, i32, i32, i32 } %435, 1, !dbg !81
  %438 = extractvalue { i32, i32, i32, i32 } %435, 2, !dbg !81
  %439 = extractvalue { i32, i32, i32, i32 } %435, 3, !dbg !81
  %440 = bitcast i32 %436 to float, !dbg !81
  %441 = bitcast i32 %437 to float, !dbg !81
  %442 = bitcast i32 %438 to float, !dbg !81
  %443 = bitcast i32 %439 to float, !dbg !81
  %444 = fmul float %.0.i24, %429, !dbg !82
  %445 = fmul float %.0.i24, %430, !dbg !82
  %446 = fmul float %.0.i24, %431, !dbg !82
  %447 = fmul float %.0.i24, %432, !dbg !82
  %448 = fadd float %440, 1.000000e+00, !dbg !83
  %449 = fadd float %441, 1.000000e+00, !dbg !83
  %450 = fadd float %442, 1.000000e+00, !dbg !83
  %451 = fadd float %443, 1.000000e+00, !dbg !83
  %452 = fmul float %444, %448, !dbg !84
  %453 = fmul float %445, %449, !dbg !84
  %454 = fmul float %446, %450, !dbg !84
  %455 = fmul float %447, %451, !dbg !84
  %456 = getelementptr i16, ptr addrspace(1) %9, i64 %422, !dbg !85
  %457 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %452) #6, !dbg !86
  %458 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %453) #6, !dbg !86
  %459 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %454) #6, !dbg !86
  %460 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %455) #6, !dbg !86
  %461 = insertelement <2 x i16> undef, i16 %457, i64 0, !dbg !86
  %462 = insertelement <2 x i16> %461, i16 %458, i64 1, !dbg !86
  %463 = bitcast <2 x i16> %462 to i32, !dbg !86
  %464 = insertelement <2 x i16> undef, i16 %459, i64 0, !dbg !86
  %465 = insertelement <2 x i16> %464, i16 %460, i64 1, !dbg !86
  %466 = bitcast <2 x i16> %465 to i32, !dbg !86
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %463, i32 %466, ptr addrspace(1) %456, i1 %19) #6, !dbg !86
  %467 = or i32 %17, 2048, !dbg !87
  %468 = icmp ult i32 %467, 2304, !dbg !88
  %469 = add i32 %467, %20, !dbg !77
  %470 = sext i32 %469 to i64, !dbg !78
  %471 = getelementptr float, ptr addrspace(1) %1, i64 %470, !dbg !78
  %472 = and i1 %19, %468, !dbg !89
  %473 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %471, i1 %472, i32 0, i1 %472, i32 0, i1 %472, i32 0, i1 %472, i32 0, i1 %472) #6, !dbg !79
  %474 = extractvalue { i32, i32, i32, i32 } %473, 0, !dbg !79
  %475 = extractvalue { i32, i32, i32, i32 } %473, 1, !dbg !79
  %476 = extractvalue { i32, i32, i32, i32 } %473, 2, !dbg !79
  %477 = extractvalue { i32, i32, i32, i32 } %473, 3, !dbg !79
  %478 = bitcast i32 %474 to float, !dbg !79
  %479 = bitcast i32 %475 to float, !dbg !79
  %480 = bitcast i32 %476 to float, !dbg !79
  %481 = bitcast i32 %477 to float, !dbg !79
  %482 = zext nneg i32 %467 to i64, !dbg !80
  %483 = getelementptr float, ptr addrspace(1) %8, i64 %482, !dbg !80
  %484 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %483, i1 %468, i32 0, i1 %468, i32 0, i1 %468, i32 0, i1 %468, i32 0, i1 %468) #6, !dbg !81
  %485 = extractvalue { i32, i32, i32, i32 } %484, 0, !dbg !81
  %486 = extractvalue { i32, i32, i32, i32 } %484, 1, !dbg !81
  %487 = extractvalue { i32, i32, i32, i32 } %484, 2, !dbg !81
  %488 = extractvalue { i32, i32, i32, i32 } %484, 3, !dbg !81
  %489 = bitcast i32 %485 to float, !dbg !81
  %490 = bitcast i32 %486 to float, !dbg !81
  %491 = bitcast i32 %487 to float, !dbg !81
  %492 = bitcast i32 %488 to float, !dbg !81
  %493 = fmul float %.0.i24, %478, !dbg !82
  %494 = fmul float %.0.i24, %479, !dbg !82
  %495 = fmul float %.0.i24, %480, !dbg !82
  %496 = fmul float %.0.i24, %481, !dbg !82
  %497 = fadd float %489, 1.000000e+00, !dbg !83
  %498 = fadd float %490, 1.000000e+00, !dbg !83
  %499 = fadd float %491, 1.000000e+00, !dbg !83
  %500 = fadd float %492, 1.000000e+00, !dbg !83
  %501 = fmul float %493, %497, !dbg !84
  %502 = fmul float %494, %498, !dbg !84
  %503 = fmul float %495, %499, !dbg !84
  %504 = fmul float %496, %500, !dbg !84
  %505 = getelementptr i16, ptr addrspace(1) %9, i64 %470, !dbg !85
  %506 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %501) #6, !dbg !86
  %507 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %502) #6, !dbg !86
  %508 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #6, !dbg !86
  %509 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %504) #6, !dbg !86
  %510 = insertelement <2 x i16> undef, i16 %506, i64 0, !dbg !86
  %511 = insertelement <2 x i16> %510, i16 %507, i64 1, !dbg !86
  %512 = bitcast <2 x i16> %511 to i32, !dbg !86
  %513 = insertelement <2 x i16> undef, i16 %508, i64 0, !dbg !86
  %514 = insertelement <2 x i16> %513, i16 %509, i64 1, !dbg !86
  %515 = bitcast <2 x i16> %514 to i32, !dbg !86
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %512, i32 %515, ptr addrspace(1) %505, i1 %472) #6, !dbg !86
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ce77udf7t2ghisxoab5foxpcsnu7y3jlr6wbsni5ioatk6bdvu5t.py", directory: "/tmp/torchinductor_zeus/e7")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10de11de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10de11de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 45, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 110, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 243, column: 36, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!22 = !DILocation(line: 37, column: 25, scope: !20)
!23 = !DILocation(line: 29, column: 25, scope: !7)
!24 = !DILocation(line: 33, column: 22, scope: !7)
!25 = !DILocation(line: 36, column: 46, scope: !7)
!26 = !DILocation(line: 233, column: 15, scope: !27, inlinedAt: !28)
!27 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!28 = !DILocation(line: 243, column: 36, scope: !27, inlinedAt: !29)
!29 = !DILocation(line: 37, column: 25, scope: !27)
!30 = !DILocation(line: 42, column: 26, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 4, scope: !7)
!34 = !DILocation(line: 44, column: 28, scope: !7)
!35 = !DILocation(line: 44, column: 40, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 36, scope: !7)
!38 = !DILocation(line: 57, column: 24, scope: !7)
!39 = !DILocation(line: 64, column: 24, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 48, column: 27, scope: !7)
!42 = !DILocation(line: 49, column: 25, scope: !7)
!43 = !DILocation(line: 51, column: 41, scope: !7)
!44 = !DILocation(line: 51, column: 35, scope: !7)
!45 = !DILocation(line: 51, column: 60, scope: !7)
!46 = !DILocation(line: 51, column: 52, scope: !7)
!47 = !DILocation(line: 51, column: 112, scope: !7)
!48 = !DILocation(line: 52, column: 35, scope: !7)
!49 = !DILocation(line: 52, column: 40, scope: !7)
!50 = !DILocation(line: 53, column: 35, scope: !7)
!51 = !DILocation(line: 53, column: 52, scope: !7)
!52 = !DILocation(line: 53, column: 112, scope: !7)
!53 = !DILocation(line: 54, column: 35, scope: !7)
!54 = !DILocation(line: 54, column: 40, scope: !7)
!55 = !DILocation(line: 55, column: 39, scope: !7)
!56 = !DILocation(line: 55, column: 56, scope: !7)
!57 = !DILocation(line: 59, column: 24, scope: !7)
!58 = !DILocation(line: 60, column: 24, scope: !7)
!59 = !DILocation(line: 65, column: 24, scope: !7)
!60 = !DILocation(line: 66, column: 24, scope: !7)
!61 = !DILocation(line: 69, column: 24, scope: !7)
!62 = !DILocation(line: 70, column: 24, scope: !7)
!63 = !DILocation(line: 71, column: 24, scope: !7)
!64 = !DILocation(line: 74, column: 48, scope: !7)
!65 = !DILocation(line: 75, column: 56, scope: !7)
!66 = !DILocation(line: 233, column: 15, scope: !27, inlinedAt: !67)
!67 = !DILocation(line: 243, column: 36, scope: !27, inlinedAt: !68)
!68 = !DILocation(line: 76, column: 27, scope: !27)
!69 = !DILocation(line: 243, column: 36, scope: !20, inlinedAt: !70)
!70 = !DILocation(line: 76, column: 27, scope: !20)
!71 = !DILocation(line: 81, column: 26, scope: !7)
!72 = !DILocation(line: 78, column: 20, scope: !7)
!73 = !DILocation(line: 80, column: 20, scope: !7)
!74 = !DILocation(line: 82, column: 4, scope: !7)
!75 = !DILocation(line: 83, column: 28, scope: !7)
!76 = !DILocation(line: 83, column: 40, scope: !7)
!77 = !DILocation(line: 88, column: 45, scope: !7)
!78 = !DILocation(line: 88, column: 39, scope: !7)
!79 = !DILocation(line: 88, column: 56, scope: !7)
!80 = !DILocation(line: 89, column: 35, scope: !7)
!81 = !DILocation(line: 89, column: 40, scope: !7)
!82 = !DILocation(line: 90, column: 24, scope: !7)
!83 = !DILocation(line: 92, column: 24, scope: !7)
!84 = !DILocation(line: 93, column: 24, scope: !7)
!85 = !DILocation(line: 95, column: 29, scope: !7)
!86 = !DILocation(line: 95, column: 53, scope: !7)
!87 = !DILocation(line: 85, column: 27, scope: !7)
!88 = !DILocation(line: 86, column: 25, scope: !7)
!89 = !DILocation(line: 88, column: 64, scope: !7)
!90 = !DILocation(line: 84, column: 4, scope: !7)
