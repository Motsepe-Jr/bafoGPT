module {
  tt.func public @triton__0d1d2d3d4d5de6de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %c3584_i32 = arith.constant 3584 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32>
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32>
    %cst_2 = arith.constant dense<3.584000e+03> : tensor<1x1xf32>
    %cst_3 = arith.constant dense<3584> : tensor<1x2048xi32>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %2 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %3 = arith.muli %0, %c3584_i32 : i32
    %4 = tt.splat %3 : (i32) -> tensor<1x2048xi32>
    %5 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %6 = scf.for %arg7 = %c0_i32 to %c3584_i32 step %c2048_i32 iter_args(%arg8 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %30 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32>
      %31 = arith.addi %30, %2 : tensor<1x2048xi32>
      %32 = arith.cmpi slt, %31, %cst_3 : tensor<1x2048xi32>
      %33 = arith.addi %31, %4 : tensor<1x2048xi32>
      %34 = tt.addptr %5, %33 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %35 = tt.load %34, %32, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %36 = arith.extf %35 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %37 = arith.mulf %36, %36 : tensor<1x2048xf32>
      %38 = arith.addf %arg8, %37 : tensor<1x2048xf32>
      %39 = arith.select %32, %38, %arg8 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %39 : tensor<1x2048xf32>
    }
    %7 = "tt.reduce"(%6) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %30 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %30 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %8 = tt.expand_dims %7 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %9 = arith.muli %0, %c3584_i32 : i32
    %10 = tt.splat %9 : (i32) -> tensor<1x2048xi32>
    %11 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %12 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %13 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %14 = arith.divf %8, %cst_2 : tensor<1x1xf32>
    %15 = arith.addf %14, %cst_1 : tensor<1x1xf32>
    %16 = scf.for %arg7 = %c0_i32 to %c3584_i32 step %c2048_i32 iter_args(%arg8 = %cst_4) -> (tensor<1x2048xf32>)  : i32 {
      %30 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32>
      %31 = arith.addi %30, %2 : tensor<1x2048xi32>
      %32 = arith.cmpi slt, %31, %cst_3 : tensor<1x2048xi32>
      %33 = arith.addi %31, %10 : tensor<1x2048xi32>
      %34 = tt.addptr %11, %33 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %35 = tt.load %34, %32, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %36 = arith.extf %35 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %37 = tt.addptr %12, %31 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %38 = tt.load %37, %32, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %39 = tt.addptr %13, %33 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %40 = tt.load %39, %32, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %41 = tt.extern_elementwise %15 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %42 = tt.broadcast %41 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %43 = arith.mulf %36, %42 : tensor<1x2048xf32>
      %44 = arith.addf %38, %cst_0 : tensor<1x2048xf32>
      %45 = arith.mulf %43, %44 : tensor<1x2048xf32>
      %46 = arith.addf %45, %40 : tensor<1x2048xf32>
      %47 = arith.mulf %46, %46 : tensor<1x2048xf32>
      %48 = arith.addf %arg8, %47 : tensor<1x2048xf32>
      %49 = arith.select %32, %48, %arg8 : tensor<1x2048xi1>, tensor<1x2048xf32>
      scf.yield %49 : tensor<1x2048xf32>
    }
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32, %arg8: f32):
      %30 = arith.addf %arg7, %arg8 : f32
      tt.reduce.return %30 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %18 = tt.expand_dims %17 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %19 = arith.muli %0, %c3584_i32 : i32
    %20 = tt.splat %19 : (i32) -> tensor<1x2048xi32>
    %21 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %22 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %23 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %24 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %25 = arith.divf %8, %cst_2 : tensor<1x1xf32>
    %26 = arith.addf %25, %cst_1 : tensor<1x1xf32>
    %27 = arith.divf %18, %cst_2 : tensor<1x1xf32>
    %28 = arith.addf %27, %cst_1 : tensor<1x1xf32>
    %29 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    scf.for %arg7 = %c0_i32 to %c3584_i32 step %c2048_i32  : i32 {
      %30 = tt.splat %arg7 : (i32) -> tensor<1x2048xi32>
      %31 = arith.addi %30, %2 : tensor<1x2048xi32>
      %32 = arith.cmpi slt, %31, %cst_3 : tensor<1x2048xi32>
      %33 = arith.addi %31, %20 : tensor<1x2048xi32>
      %34 = tt.addptr %21, %33 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %35 = tt.load %34, %32, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
      %36 = arith.extf %35 : tensor<1x2048xbf16> to tensor<1x2048xf32>
      %37 = tt.addptr %22, %31 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %38 = tt.load %37, %32, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %39 = tt.addptr %23, %33 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %40 = tt.load %39, %32, %cst_4 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xf32>
      %41 = tt.addptr %24, %31 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
      %42 = tt.load %41, %32, %cst_4 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
      %43 = tt.extern_elementwise %26 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %44 = tt.broadcast %43 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %45 = arith.mulf %36, %44 : tensor<1x2048xf32>
      %46 = arith.addf %38, %cst_0 : tensor<1x2048xf32>
      %47 = arith.mulf %45, %46 : tensor<1x2048xf32>
      %48 = arith.addf %47, %40 : tensor<1x2048xf32>
      %49 = tt.extern_elementwise %28 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32>
      %50 = tt.broadcast %49 : (tensor<1x1xf32>) -> tensor<1x2048xf32>
      %51 = arith.mulf %48, %50 : tensor<1x2048xf32>
      %52 = arith.addf %42, %cst_0 : tensor<1x2048xf32>
      %53 = arith.mulf %51, %52 : tensor<1x2048xf32>
      %54 = tt.addptr %29, %33 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
      %55 = arith.truncf %53 : tensor<1x2048xf32> to tensor<1x2048xbf16>
      tt.store %54, %55, %32 {cache = 1 : i32, evict = 1 : i32} : tensor<1x2048xbf16>
    }
    tt.return
  }
}
