; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 127, !dbg !8
  %9 = shl nuw nsw i32 %8, 3, !dbg !8
  %10 = or i32 %8, 128, !dbg !8
  %11 = or i32 %8, 256, !dbg !8
  %12 = or i32 %8, 384, !dbg !8
  %13 = or i32 %8, 512, !dbg !8
  %14 = or i32 %8, 640, !dbg !8
  %15 = or i32 %8, 768, !dbg !8
  %16 = or i32 %8, 896, !dbg !8
  %17 = shl nuw nsw i32 %8, 2, !dbg !8
  %18 = or i32 %17, 512, !dbg !8
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %20 = shl i32 %19, 10, !dbg !10
  %21 = or i32 %20, %9, !dbg !11
  %22 = or i32 %20, %8, !dbg !11
  %23 = or i32 %20, %10, !dbg !11
  %24 = or i32 %20, %11, !dbg !11
  %25 = or i32 %20, %12, !dbg !11
  %26 = or i32 %20, %13, !dbg !11
  %27 = or i32 %20, %14, !dbg !11
  %28 = or i32 %20, %15, !dbg !11
  %29 = or i32 %20, %16, !dbg !11
  %30 = or i32 %20, %17, !dbg !11
  %31 = or i32 %20, %18, !dbg !11
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %33 = icmp slt i32 %32, 256, !dbg !13
  %.frozen = freeze i32 %21
  %34 = sdiv i32 %.frozen, 2048, !dbg !14
  %35 = mul i32 %34, 2048
  %.decomposed = sub i32 %.frozen, %35
  %36 = srem i32 %22, 2048, !dbg !15
  %37 = srem i32 %23, 2048, !dbg !15
  %38 = srem i32 %24, 2048, !dbg !15
  %39 = srem i32 %25, 2048, !dbg !15
  %40 = srem i32 %26, 2048, !dbg !15
  %41 = srem i32 %27, 2048, !dbg !15
  %42 = srem i32 %28, 2048, !dbg !15
  %43 = srem i32 %29, 2048, !dbg !15
  %.frozen46 = freeze i32 %30
  %44 = sdiv i32 %.frozen46, 2048, !dbg !14
  %45 = mul i32 %44, 2048
  %.decomposed47 = sub i32 %.frozen46, %45
  %.frozen48 = freeze i32 %31
  %46 = sdiv i32 %.frozen48, 2048, !dbg !14
  %47 = mul i32 %46, 2048
  %.decomposed49 = sub i32 %.frozen48, %47
  %48 = shl i32 %32, 11, !dbg !16
  %49 = add i32 %.decomposed, %48, !dbg !17
  %50 = add i32 %.decomposed47, %48, !dbg !17
  %51 = add i32 %.decomposed49, %48, !dbg !17
  %52 = shl i32 %34, 20, !dbg !18
  %53 = add i32 %49, %52, !dbg !19
  %54 = sext i32 %53 to i64, !dbg !20
  %55 = getelementptr i16, ptr addrspace(1) %0, i64 %54, !dbg !20
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %33) #2, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !21
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !21
  %61 = trunc i32 %57 to i16, !dbg !21
  %extelt.offset = lshr i32 %57, 16, !dbg !21
  %62 = trunc i32 %extelt.offset to i16, !dbg !21
  %63 = trunc i32 %58 to i16, !dbg !21
  %extelt.offset1 = lshr i32 %58, 16, !dbg !21
  %64 = trunc i32 %extelt.offset1 to i16, !dbg !21
  %65 = trunc i32 %59 to i16, !dbg !21
  %extelt.offset2 = lshr i32 %59, 16, !dbg !21
  %66 = trunc i32 %extelt.offset2 to i16, !dbg !21
  %67 = trunc i32 %60 to i16, !dbg !21
  %extelt.offset3 = lshr i32 %60, 16, !dbg !21
  %68 = trunc i32 %extelt.offset3 to i16, !dbg !21
  %69 = shl nuw nsw i32 %8, 4, !dbg !22
  %70 = zext nneg i32 %69 to i64, !dbg !22
  %71 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %70, !dbg !22
  %72 = insertelement <1 x i16> undef, i16 %61, i64 0, !dbg !22
  store <1 x i16> %72, ptr addrspace(3) %71, align 2, !dbg !22
  %73 = or i32 %69, 2, !dbg !22
  %74 = zext nneg i32 %73 to i64, !dbg !22
  %75 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %74, !dbg !22
  %76 = insertelement <1 x i16> undef, i16 %62, i64 0, !dbg !22
  store <1 x i16> %76, ptr addrspace(3) %75, align 2, !dbg !22
  %77 = or i32 %69, 4, !dbg !22
  %78 = zext nneg i32 %77 to i64, !dbg !22
  %79 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %78, !dbg !22
  %80 = insertelement <1 x i16> undef, i16 %63, i64 0, !dbg !22
  store <1 x i16> %80, ptr addrspace(3) %79, align 2, !dbg !22
  %81 = or i32 %69, 6, !dbg !22
  %82 = zext nneg i32 %81 to i64, !dbg !22
  %83 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %82, !dbg !22
  %84 = insertelement <1 x i16> undef, i16 %64, i64 0, !dbg !22
  store <1 x i16> %84, ptr addrspace(3) %83, align 2, !dbg !22
  %85 = or i32 %69, 8, !dbg !22
  %86 = zext nneg i32 %85 to i64, !dbg !22
  %87 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %86, !dbg !22
  %88 = insertelement <1 x i16> undef, i16 %65, i64 0, !dbg !22
  store <1 x i16> %88, ptr addrspace(3) %87, align 2, !dbg !22
  %89 = or i32 %69, 10, !dbg !22
  %90 = zext nneg i32 %89 to i64, !dbg !22
  %91 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %90, !dbg !22
  %92 = insertelement <1 x i16> undef, i16 %66, i64 0, !dbg !22
  store <1 x i16> %92, ptr addrspace(3) %91, align 2, !dbg !22
  %93 = or i32 %69, 12, !dbg !22
  %94 = zext nneg i32 %93 to i64, !dbg !22
  %95 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %94, !dbg !22
  %96 = insertelement <1 x i16> undef, i16 %67, i64 0, !dbg !22
  store <1 x i16> %96, ptr addrspace(3) %95, align 2, !dbg !22
  %97 = or i32 %69, 14, !dbg !22
  %98 = zext nneg i32 %97 to i64, !dbg !22
  %99 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %98, !dbg !22
  %100 = insertelement <1 x i16> undef, i16 %68, i64 0, !dbg !22
  store <1 x i16> %100, ptr addrspace(3) %99, align 2, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %101 = shl nuw nsw i32 %8, 1, !dbg !22
  %102 = zext nneg i32 %101 to i64, !dbg !22
  %103 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %102, !dbg !22
  %104 = load i16, ptr addrspace(3) %103, align 2, !dbg !22
  %105 = shl nuw nsw i32 %10, 1, !dbg !22
  %106 = zext nneg i32 %105 to i64, !dbg !22
  %107 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %106, !dbg !22
  %108 = load i16, ptr addrspace(3) %107, align 2, !dbg !22
  %109 = shl nuw nsw i32 %11, 1, !dbg !22
  %110 = zext nneg i32 %109 to i64, !dbg !22
  %111 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %110, !dbg !22
  %112 = load i16, ptr addrspace(3) %111, align 2, !dbg !22
  %113 = shl nuw nsw i32 %12, 1, !dbg !22
  %114 = zext nneg i32 %113 to i64, !dbg !22
  %115 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %114, !dbg !22
  %116 = load i16, ptr addrspace(3) %115, align 2, !dbg !22
  %117 = shl nuw nsw i32 %13, 1, !dbg !22
  %118 = zext nneg i32 %117 to i64, !dbg !22
  %119 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %118, !dbg !22
  %120 = load i16, ptr addrspace(3) %119, align 2, !dbg !22
  %121 = shl nuw nsw i32 %14, 1, !dbg !22
  %122 = zext nneg i32 %121 to i64, !dbg !22
  %123 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %122, !dbg !22
  %124 = load i16, ptr addrspace(3) %123, align 2, !dbg !22
  %125 = shl nuw nsw i32 %15, 1, !dbg !22
  %126 = zext nneg i32 %125 to i64, !dbg !22
  %127 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %126, !dbg !22
  %128 = load i16, ptr addrspace(3) %127, align 2, !dbg !22
  %129 = shl nuw nsw i32 %16, 1, !dbg !22
  %130 = zext nneg i32 %129 to i64, !dbg !22
  %131 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %130, !dbg !22
  %132 = load i16, ptr addrspace(3) %131, align 2, !dbg !22
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #2, !dbg !22
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #2, !dbg !22
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #2, !dbg !22
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #2, !dbg !22
  %137 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #2, !dbg !22
  %138 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #2, !dbg !22
  %139 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %128) #2, !dbg !22
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %132) #2, !dbg !22
  %141 = shl nsw i32 %36, 8, !dbg !23
  %142 = shl nsw i32 %37, 8, !dbg !23
  %143 = shl nsw i32 %38, 8, !dbg !23
  %144 = shl nsw i32 %39, 8, !dbg !23
  %145 = shl nsw i32 %40, 8, !dbg !23
  %146 = shl nsw i32 %41, 8, !dbg !23
  %147 = shl nsw i32 %42, 8, !dbg !23
  %148 = shl nsw i32 %43, 8, !dbg !23
  %149 = add i32 %141, %32, !dbg !24
  %150 = add i32 %142, %32, !dbg !24
  %151 = add i32 %143, %32, !dbg !24
  %152 = add i32 %144, %32, !dbg !24
  %153 = add i32 %145, %32, !dbg !24
  %154 = add i32 %146, %32, !dbg !24
  %155 = add i32 %147, %32, !dbg !24
  %156 = add i32 %148, %32, !dbg !24
  %157 = sext i32 %149 to i64, !dbg !25
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %157, !dbg !25
  %159 = sext i32 %150 to i64, !dbg !25
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %159, !dbg !25
  %161 = sext i32 %151 to i64, !dbg !25
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !25
  %163 = sext i32 %152 to i64, !dbg !25
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !25
  %165 = sext i32 %153 to i64, !dbg !25
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !25
  %167 = sext i32 %154 to i64, !dbg !25
  %168 = getelementptr float, ptr addrspace(1) %1, i64 %167, !dbg !25
  %169 = sext i32 %155 to i64, !dbg !25
  %170 = getelementptr float, ptr addrspace(1) %1, i64 %169, !dbg !25
  %171 = sext i32 %156 to i64, !dbg !25
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %171, !dbg !25
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %33) #2, !dbg !26
  %174 = bitcast i32 %173 to float, !dbg !26
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %33) #2, !dbg !26
  %176 = bitcast i32 %175 to float, !dbg !26
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %33) #2, !dbg !26
  %178 = bitcast i32 %177 to float, !dbg !26
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %33) #2, !dbg !26
  %180 = bitcast i32 %179 to float, !dbg !26
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %33) #2, !dbg !26
  %182 = bitcast i32 %181 to float, !dbg !26
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %33) #2, !dbg !26
  %184 = bitcast i32 %183 to float, !dbg !26
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %33) #2, !dbg !26
  %186 = bitcast i32 %185 to float, !dbg !26
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %33) #2, !dbg !26
  %188 = bitcast i32 %187 to float, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %189 = zext nneg i32 %8 to i64, !dbg !26
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i64 %189, !dbg !26
  %191 = insertelement <1 x float> undef, float %174, i64 0, !dbg !26
  store <1 x float> %191, ptr addrspace(3) %190, align 4, !dbg !26
  %192 = zext nneg i32 %10 to i64, !dbg !26
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i64 %192, !dbg !26
  %194 = insertelement <1 x float> undef, float %176, i64 0, !dbg !26
  store <1 x float> %194, ptr addrspace(3) %193, align 4, !dbg !26
  %195 = zext nneg i32 %11 to i64, !dbg !26
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i64 %195, !dbg !26
  %197 = insertelement <1 x float> undef, float %178, i64 0, !dbg !26
  store <1 x float> %197, ptr addrspace(3) %196, align 4, !dbg !26
  %198 = zext nneg i32 %12 to i64, !dbg !26
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i64 %198, !dbg !26
  %200 = insertelement <1 x float> undef, float %180, i64 0, !dbg !26
  store <1 x float> %200, ptr addrspace(3) %199, align 4, !dbg !26
  %201 = zext nneg i32 %13 to i64, !dbg !26
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i64 %201, !dbg !26
  %203 = insertelement <1 x float> undef, float %182, i64 0, !dbg !26
  store <1 x float> %203, ptr addrspace(3) %202, align 4, !dbg !26
  %204 = zext nneg i32 %14 to i64, !dbg !26
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i64 %204, !dbg !26
  %206 = insertelement <1 x float> undef, float %184, i64 0, !dbg !26
  store <1 x float> %206, ptr addrspace(3) %205, align 4, !dbg !26
  %207 = zext nneg i32 %15 to i64, !dbg !26
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i64 %207, !dbg !26
  %209 = insertelement <1 x float> undef, float %186, i64 0, !dbg !26
  store <1 x float> %209, ptr addrspace(3) %208, align 4, !dbg !26
  %210 = zext nneg i32 %16 to i64, !dbg !26
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i64 %210, !dbg !26
  %212 = insertelement <1 x float> undef, float %188, i64 0, !dbg !26
  store <1 x float> %212, ptr addrspace(3) %211, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %213 = zext nneg i32 %9 to i64, !dbg !26
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i64 %213, !dbg !26
  %215 = add i32 %49, 524288, !dbg !27
  %216 = add i32 %215, %52, !dbg !28
  %217 = sext i32 %216 to i64, !dbg !29
  %218 = getelementptr i16, ptr addrspace(1) %0, i64 %217, !dbg !29
  %219 = icmp sgt i32 %32, 255, !dbg !30
  %220 = fmul float %133, %174, !dbg !31
  %221 = fmul float %134, %176, !dbg !31
  %222 = fmul float %135, %178, !dbg !31
  %223 = fmul float %136, %180, !dbg !31
  %224 = fmul float %137, %182, !dbg !31
  %225 = fmul float %138, %184, !dbg !31
  %226 = fmul float %139, %186, !dbg !31
  %227 = fmul float %140, %188, !dbg !31
  %228 = icmp sgt i32 %32, 127, !dbg !32
  %229 = add i32 %49, -262144, !dbg !33
  %230 = add i32 %229, %52, !dbg !34
  %231 = sext i32 %230 to i64, !dbg !35
  %232 = getelementptr i16, ptr addrspace(1) %0, i64 %231, !dbg !35
  %233 = and i32 %32, -128, !dbg !36
  %234 = icmp eq i32 %233, 128, !dbg !36
  %235 = add i32 %32, -128, !dbg !37
  %236 = add i32 %141, %235, !dbg !38
  %237 = add i32 %142, %235, !dbg !38
  %238 = add i32 %143, %235, !dbg !38
  %239 = add i32 %144, %235, !dbg !38
  %240 = add i32 %145, %235, !dbg !38
  %241 = add i32 %146, %235, !dbg !38
  %242 = add i32 %147, %235, !dbg !38
  %243 = add i32 %148, %235, !dbg !38
  %244 = sext i32 %236 to i64, !dbg !39
  %245 = getelementptr float, ptr addrspace(1) %2, i64 %244, !dbg !39
  %246 = sext i32 %237 to i64, !dbg !39
  %247 = getelementptr float, ptr addrspace(1) %2, i64 %246, !dbg !39
  %248 = sext i32 %238 to i64, !dbg !39
  %249 = getelementptr float, ptr addrspace(1) %2, i64 %248, !dbg !39
  %250 = sext i32 %239 to i64, !dbg !39
  %251 = getelementptr float, ptr addrspace(1) %2, i64 %250, !dbg !39
  %252 = sext i32 %240 to i64, !dbg !39
  %253 = getelementptr float, ptr addrspace(1) %2, i64 %252, !dbg !39
  %254 = sext i32 %241 to i64, !dbg !39
  %255 = getelementptr float, ptr addrspace(1) %2, i64 %254, !dbg !39
  %256 = sext i32 %242 to i64, !dbg !39
  %257 = getelementptr float, ptr addrspace(1) %2, i64 %256, !dbg !39
  %258 = sext i32 %243 to i64, !dbg !39
  %259 = getelementptr float, ptr addrspace(1) %2, i64 %258, !dbg !39
  %260 = icmp slt i32 %32, 128, !dbg !40
  %261 = add i32 %49, 262144, !dbg !41
  %262 = add i32 %261, %52, !dbg !42
  %263 = sext i32 %262 to i64, !dbg !43
  %264 = getelementptr i16, ptr addrspace(1) %0, i64 %263, !dbg !43
  %265 = add i32 %32, 128, !dbg !44
  %266 = add i32 %141, %265, !dbg !45
  %267 = add i32 %142, %265, !dbg !45
  %268 = add i32 %143, %265, !dbg !45
  %269 = add i32 %144, %265, !dbg !45
  %270 = add i32 %145, %265, !dbg !45
  %271 = add i32 %146, %265, !dbg !45
  %272 = add i32 %147, %265, !dbg !45
  %273 = add i32 %148, %265, !dbg !45
  %274 = sext i32 %266 to i64, !dbg !46
  %275 = getelementptr float, ptr addrspace(1) %2, i64 %274, !dbg !46
  %276 = sext i32 %267 to i64, !dbg !46
  %277 = getelementptr float, ptr addrspace(1) %2, i64 %276, !dbg !46
  %278 = sext i32 %268 to i64, !dbg !46
  %279 = getelementptr float, ptr addrspace(1) %2, i64 %278, !dbg !46
  %280 = sext i32 %269 to i64, !dbg !46
  %281 = getelementptr float, ptr addrspace(1) %2, i64 %280, !dbg !46
  %282 = sext i32 %270 to i64, !dbg !46
  %283 = getelementptr float, ptr addrspace(1) %2, i64 %282, !dbg !46
  %284 = sext i32 %271 to i64, !dbg !46
  %285 = getelementptr float, ptr addrspace(1) %2, i64 %284, !dbg !46
  %286 = sext i32 %272 to i64, !dbg !46
  %287 = getelementptr float, ptr addrspace(1) %2, i64 %286, !dbg !46
  %288 = sext i32 %273 to i64, !dbg !46
  %289 = getelementptr float, ptr addrspace(1) %2, i64 %288, !dbg !46
  %290 = add i32 %49, 786432, !dbg !47
  %291 = add i32 %290, %52, !dbg !48
  %292 = sext i32 %291 to i64, !dbg !49
  %293 = getelementptr i16, ptr addrspace(1) %0, i64 %292, !dbg !49
  %294 = load <8 x float>, ptr addrspace(3) %214, align 32, !dbg !26
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %33) #2, !dbg !50
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !50
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !50
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !50
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !50
  %300 = trunc i32 %296 to i16, !dbg !50
  %extelt.offset4 = lshr i32 %296, 16, !dbg !50
  %301 = trunc i32 %extelt.offset4 to i16, !dbg !50
  %302 = trunc i32 %297 to i16, !dbg !50
  %extelt.offset5 = lshr i32 %297, 16, !dbg !50
  %303 = trunc i32 %extelt.offset5 to i16, !dbg !50
  %304 = trunc i32 %298 to i16, !dbg !50
  %extelt.offset6 = lshr i32 %298, 16, !dbg !50
  %305 = trunc i32 %extelt.offset6 to i16, !dbg !50
  %306 = trunc i32 %299 to i16, !dbg !50
  %extelt.offset7 = lshr i32 %299, 16, !dbg !50
  %307 = trunc i32 %extelt.offset7 to i16, !dbg !50
  %308 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %300) #2, !dbg !51
  %309 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %301) #2, !dbg !51
  %310 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %302) #2, !dbg !51
  %311 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %303) #2, !dbg !51
  %312 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %304) #2, !dbg !51
  %313 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %305) #2, !dbg !51
  %314 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %306) #2, !dbg !51
  %315 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %307) #2, !dbg !51
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !52
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !52
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !52
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !52
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !52
  %321 = trunc i32 %317 to i16, !dbg !52
  %extelt.offset8 = lshr i32 %317, 16, !dbg !52
  %322 = trunc i32 %extelt.offset8 to i16, !dbg !52
  %323 = trunc i32 %318 to i16, !dbg !52
  %extelt.offset9 = lshr i32 %318, 16, !dbg !52
  %324 = trunc i32 %extelt.offset9 to i16, !dbg !52
  %325 = trunc i32 %319 to i16, !dbg !52
  %extelt.offset10 = lshr i32 %319, 16, !dbg !52
  %326 = trunc i32 %extelt.offset10 to i16, !dbg !52
  %327 = trunc i32 %320 to i16, !dbg !52
  %extelt.offset11 = lshr i32 %320, 16, !dbg !52
  %328 = trunc i32 %extelt.offset11 to i16, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %329 = insertelement <1 x i16> undef, i16 %321, i64 0, !dbg !53
  store <1 x i16> %329, ptr addrspace(3) %71, align 2, !dbg !53
  %330 = insertelement <1 x i16> undef, i16 %322, i64 0, !dbg !53
  store <1 x i16> %330, ptr addrspace(3) %75, align 2, !dbg !53
  %331 = insertelement <1 x i16> undef, i16 %323, i64 0, !dbg !53
  store <1 x i16> %331, ptr addrspace(3) %79, align 2, !dbg !53
  %332 = insertelement <1 x i16> undef, i16 %324, i64 0, !dbg !53
  store <1 x i16> %332, ptr addrspace(3) %83, align 2, !dbg !53
  %333 = insertelement <1 x i16> undef, i16 %325, i64 0, !dbg !53
  store <1 x i16> %333, ptr addrspace(3) %87, align 2, !dbg !53
  %334 = insertelement <1 x i16> undef, i16 %326, i64 0, !dbg !53
  store <1 x i16> %334, ptr addrspace(3) %91, align 2, !dbg !53
  %335 = insertelement <1 x i16> undef, i16 %327, i64 0, !dbg !53
  store <1 x i16> %335, ptr addrspace(3) %95, align 2, !dbg !53
  %336 = insertelement <1 x i16> undef, i16 %328, i64 0, !dbg !53
  store <1 x i16> %336, ptr addrspace(3) %99, align 2, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %337 = load i16, ptr addrspace(3) %103, align 2, !dbg !53
  %338 = load i16, ptr addrspace(3) %107, align 2, !dbg !53
  %339 = load i16, ptr addrspace(3) %111, align 2, !dbg !53
  %340 = load i16, ptr addrspace(3) %115, align 2, !dbg !53
  %341 = load i16, ptr addrspace(3) %119, align 2, !dbg !53
  %342 = load i16, ptr addrspace(3) %123, align 2, !dbg !53
  %343 = load i16, ptr addrspace(3) %127, align 2, !dbg !53
  %344 = load i16, ptr addrspace(3) %131, align 2, !dbg !53
  %345 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #2, !dbg !54
  %346 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #2, !dbg !54
  %347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #2, !dbg !54
  %348 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %340) #2, !dbg !54
  %349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %341) #2, !dbg !54
  %350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %342) #2, !dbg !54
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %343) #2, !dbg !54
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %344) #2, !dbg !54
  %353 = select i1 %219, float %345, float 0.000000e+00, !dbg !53
  %354 = select i1 %219, float %346, float 0.000000e+00, !dbg !53
  %355 = select i1 %219, float %347, float 0.000000e+00, !dbg !53
  %356 = select i1 %219, float %348, float 0.000000e+00, !dbg !53
  %357 = select i1 %219, float %349, float 0.000000e+00, !dbg !53
  %358 = select i1 %219, float %350, float 0.000000e+00, !dbg !53
  %359 = select i1 %219, float %351, float 0.000000e+00, !dbg !53
  %360 = select i1 %219, float %352, float 0.000000e+00, !dbg !53
  %361 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %232, i1 %234, i32 0, i1 %234, i32 0, i1 %234, i32 0, i1 %234, i32 0, i1 %234) #2, !dbg !55
  %362 = extractvalue { i32, i32, i32, i32 } %361, 0, !dbg !55
  %363 = extractvalue { i32, i32, i32, i32 } %361, 1, !dbg !55
  %364 = extractvalue { i32, i32, i32, i32 } %361, 2, !dbg !55
  %365 = extractvalue { i32, i32, i32, i32 } %361, 3, !dbg !55
  %366 = trunc i32 %362 to i16, !dbg !55
  %extelt.offset12 = lshr i32 %362, 16, !dbg !55
  %367 = trunc i32 %extelt.offset12 to i16, !dbg !55
  %368 = trunc i32 %363 to i16, !dbg !55
  %extelt.offset13 = lshr i32 %363, 16, !dbg !55
  %369 = trunc i32 %extelt.offset13 to i16, !dbg !55
  %370 = trunc i32 %364 to i16, !dbg !55
  %extelt.offset14 = lshr i32 %364, 16, !dbg !55
  %371 = trunc i32 %extelt.offset14 to i16, !dbg !55
  %372 = trunc i32 %365 to i16, !dbg !55
  %extelt.offset15 = lshr i32 %365, 16, !dbg !55
  %373 = trunc i32 %extelt.offset15 to i16, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %374 = insertelement <1 x i16> undef, i16 %366, i64 0, !dbg !56
  store <1 x i16> %374, ptr addrspace(3) %71, align 2, !dbg !56
  %375 = insertelement <1 x i16> undef, i16 %367, i64 0, !dbg !56
  store <1 x i16> %375, ptr addrspace(3) %75, align 2, !dbg !56
  %376 = insertelement <1 x i16> undef, i16 %368, i64 0, !dbg !56
  store <1 x i16> %376, ptr addrspace(3) %79, align 2, !dbg !56
  %377 = insertelement <1 x i16> undef, i16 %369, i64 0, !dbg !56
  store <1 x i16> %377, ptr addrspace(3) %83, align 2, !dbg !56
  %378 = insertelement <1 x i16> undef, i16 %370, i64 0, !dbg !56
  store <1 x i16> %378, ptr addrspace(3) %87, align 2, !dbg !56
  %379 = insertelement <1 x i16> undef, i16 %371, i64 0, !dbg !56
  store <1 x i16> %379, ptr addrspace(3) %91, align 2, !dbg !56
  %380 = insertelement <1 x i16> undef, i16 %372, i64 0, !dbg !56
  store <1 x i16> %380, ptr addrspace(3) %95, align 2, !dbg !56
  %381 = insertelement <1 x i16> undef, i16 %373, i64 0, !dbg !56
  store <1 x i16> %381, ptr addrspace(3) %99, align 2, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %382 = load i16, ptr addrspace(3) %103, align 2, !dbg !56
  %383 = load i16, ptr addrspace(3) %107, align 2, !dbg !56
  %384 = load i16, ptr addrspace(3) %111, align 2, !dbg !56
  %385 = load i16, ptr addrspace(3) %115, align 2, !dbg !56
  %386 = load i16, ptr addrspace(3) %119, align 2, !dbg !56
  %387 = load i16, ptr addrspace(3) %123, align 2, !dbg !56
  %388 = load i16, ptr addrspace(3) %127, align 2, !dbg !56
  %389 = load i16, ptr addrspace(3) %131, align 2, !dbg !56
  %390 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #2, !dbg !56
  %391 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %383) #2, !dbg !56
  %392 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %384) #2, !dbg !56
  %393 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %385) #2, !dbg !56
  %394 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %386) #2, !dbg !56
  %395 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %387) #2, !dbg !56
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %388) #2, !dbg !56
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %389) #2, !dbg !56
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %234, i32 0, i1 %234) #2, !dbg !57
  %399 = bitcast i32 %398 to float, !dbg !57
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %247, i1 %234, i32 0, i1 %234) #2, !dbg !57
  %401 = bitcast i32 %400 to float, !dbg !57
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %234, i32 0, i1 %234) #2, !dbg !57
  %403 = bitcast i32 %402 to float, !dbg !57
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %234, i32 0, i1 %234) #2, !dbg !57
  %405 = bitcast i32 %404 to float, !dbg !57
  %406 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %253, i1 %234, i32 0, i1 %234) #2, !dbg !57
  %407 = bitcast i32 %406 to float, !dbg !57
  %408 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %255, i1 %234, i32 0, i1 %234) #2, !dbg !57
  %409 = bitcast i32 %408 to float, !dbg !57
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %257, i1 %234, i32 0, i1 %234) #2, !dbg !57
  %411 = bitcast i32 %410 to float, !dbg !57
  %412 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %259, i1 %234, i32 0, i1 %234) #2, !dbg !57
  %413 = bitcast i32 %412 to float, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %414 = insertelement <1 x float> undef, float %399, i64 0, !dbg !57
  store <1 x float> %414, ptr addrspace(3) %190, align 4, !dbg !57
  %415 = insertelement <1 x float> undef, float %401, i64 0, !dbg !57
  store <1 x float> %415, ptr addrspace(3) %193, align 4, !dbg !57
  %416 = insertelement <1 x float> undef, float %403, i64 0, !dbg !57
  store <1 x float> %416, ptr addrspace(3) %196, align 4, !dbg !57
  %417 = insertelement <1 x float> undef, float %405, i64 0, !dbg !57
  store <1 x float> %417, ptr addrspace(3) %199, align 4, !dbg !57
  %418 = insertelement <1 x float> undef, float %407, i64 0, !dbg !57
  store <1 x float> %418, ptr addrspace(3) %202, align 4, !dbg !57
  %419 = insertelement <1 x float> undef, float %409, i64 0, !dbg !57
  store <1 x float> %419, ptr addrspace(3) %205, align 4, !dbg !57
  %420 = insertelement <1 x float> undef, float %411, i64 0, !dbg !57
  store <1 x float> %420, ptr addrspace(3) %208, align 4, !dbg !57
  %421 = insertelement <1 x float> undef, float %413, i64 0, !dbg !57
  store <1 x float> %421, ptr addrspace(3) %211, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %422 = load <8 x float>, ptr addrspace(3) %214, align 32, !dbg !57
  %423 = fmul float %390, %399, !dbg !58
  %424 = fmul float %391, %401, !dbg !58
  %425 = fmul float %392, %403, !dbg !58
  %426 = fmul float %393, %405, !dbg !58
  %427 = fmul float %394, %407, !dbg !58
  %428 = fmul float %395, %409, !dbg !58
  %429 = fmul float %396, %411, !dbg !58
  %430 = fmul float %397, %413, !dbg !58
  %431 = fsub float 0.000000e+00, %423, !dbg !59
  %432 = fsub float 0.000000e+00, %424, !dbg !59
  %433 = fsub float 0.000000e+00, %425, !dbg !59
  %434 = fsub float 0.000000e+00, %426, !dbg !59
  %435 = fsub float 0.000000e+00, %427, !dbg !59
  %436 = fsub float 0.000000e+00, %428, !dbg !59
  %437 = fsub float 0.000000e+00, %429, !dbg !59
  %438 = fsub float 0.000000e+00, %430, !dbg !59
  %439 = select i1 %228, float %431, float 0.000000e+00, !dbg !53
  %440 = select i1 %228, float %432, float 0.000000e+00, !dbg !53
  %441 = select i1 %228, float %433, float 0.000000e+00, !dbg !53
  %442 = select i1 %228, float %434, float 0.000000e+00, !dbg !53
  %443 = select i1 %228, float %435, float 0.000000e+00, !dbg !53
  %444 = select i1 %228, float %436, float 0.000000e+00, !dbg !53
  %445 = select i1 %228, float %437, float 0.000000e+00, !dbg !53
  %446 = select i1 %228, float %438, float 0.000000e+00, !dbg !53
  %447 = fadd float %220, %439, !dbg !60
  %448 = fadd float %221, %440, !dbg !60
  %449 = fadd float %222, %441, !dbg !60
  %450 = fadd float %223, %442, !dbg !60
  %451 = fadd float %224, %443, !dbg !60
  %452 = fadd float %225, %444, !dbg !60
  %453 = fadd float %226, %445, !dbg !60
  %454 = fadd float %227, %446, !dbg !60
  %455 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %264, i1 %260, i32 0, i1 %260, i32 0, i1 %260, i32 0, i1 %260, i32 0, i1 %260) #2, !dbg !61
  %456 = extractvalue { i32, i32, i32, i32 } %455, 0, !dbg !61
  %457 = extractvalue { i32, i32, i32, i32 } %455, 1, !dbg !61
  %458 = extractvalue { i32, i32, i32, i32 } %455, 2, !dbg !61
  %459 = extractvalue { i32, i32, i32, i32 } %455, 3, !dbg !61
  %460 = trunc i32 %456 to i16, !dbg !61
  %extelt.offset16 = lshr i32 %456, 16, !dbg !61
  %461 = trunc i32 %extelt.offset16 to i16, !dbg !61
  %462 = trunc i32 %457 to i16, !dbg !61
  %extelt.offset17 = lshr i32 %457, 16, !dbg !61
  %463 = trunc i32 %extelt.offset17 to i16, !dbg !61
  %464 = trunc i32 %458 to i16, !dbg !61
  %extelt.offset18 = lshr i32 %458, 16, !dbg !61
  %465 = trunc i32 %extelt.offset18 to i16, !dbg !61
  %466 = trunc i32 %459 to i16, !dbg !61
  %extelt.offset19 = lshr i32 %459, 16, !dbg !61
  %467 = trunc i32 %extelt.offset19 to i16, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %468 = insertelement <1 x i16> undef, i16 %460, i64 0, !dbg !62
  store <1 x i16> %468, ptr addrspace(3) %71, align 2, !dbg !62
  %469 = insertelement <1 x i16> undef, i16 %461, i64 0, !dbg !62
  store <1 x i16> %469, ptr addrspace(3) %75, align 2, !dbg !62
  %470 = insertelement <1 x i16> undef, i16 %462, i64 0, !dbg !62
  store <1 x i16> %470, ptr addrspace(3) %79, align 2, !dbg !62
  %471 = insertelement <1 x i16> undef, i16 %463, i64 0, !dbg !62
  store <1 x i16> %471, ptr addrspace(3) %83, align 2, !dbg !62
  %472 = insertelement <1 x i16> undef, i16 %464, i64 0, !dbg !62
  store <1 x i16> %472, ptr addrspace(3) %87, align 2, !dbg !62
  %473 = insertelement <1 x i16> undef, i16 %465, i64 0, !dbg !62
  store <1 x i16> %473, ptr addrspace(3) %91, align 2, !dbg !62
  %474 = insertelement <1 x i16> undef, i16 %466, i64 0, !dbg !62
  store <1 x i16> %474, ptr addrspace(3) %95, align 2, !dbg !62
  %475 = insertelement <1 x i16> undef, i16 %467, i64 0, !dbg !62
  store <1 x i16> %475, ptr addrspace(3) %99, align 2, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %476 = load i16, ptr addrspace(3) %103, align 2, !dbg !62
  %477 = load i16, ptr addrspace(3) %107, align 2, !dbg !62
  %478 = load i16, ptr addrspace(3) %111, align 2, !dbg !62
  %479 = load i16, ptr addrspace(3) %115, align 2, !dbg !62
  %480 = load i16, ptr addrspace(3) %119, align 2, !dbg !62
  %481 = load i16, ptr addrspace(3) %123, align 2, !dbg !62
  %482 = load i16, ptr addrspace(3) %127, align 2, !dbg !62
  %483 = load i16, ptr addrspace(3) %131, align 2, !dbg !62
  %484 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %476) #2, !dbg !62
  %485 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %477) #2, !dbg !62
  %486 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %478) #2, !dbg !62
  %487 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %479) #2, !dbg !62
  %488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #2, !dbg !62
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #2, !dbg !62
  %490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #2, !dbg !62
  %491 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #2, !dbg !62
  %492 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %275, i1 %260, i32 0, i1 %260) #2, !dbg !63
  %493 = bitcast i32 %492 to float, !dbg !63
  %494 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %260, i32 0, i1 %260) #2, !dbg !63
  %495 = bitcast i32 %494 to float, !dbg !63
  %496 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %260, i32 0, i1 %260) #2, !dbg !63
  %497 = bitcast i32 %496 to float, !dbg !63
  %498 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %281, i1 %260, i32 0, i1 %260) #2, !dbg !63
  %499 = bitcast i32 %498 to float, !dbg !63
  %500 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %260, i32 0, i1 %260) #2, !dbg !63
  %501 = bitcast i32 %500 to float, !dbg !63
  %502 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %285, i1 %260, i32 0, i1 %260) #2, !dbg !63
  %503 = bitcast i32 %502 to float, !dbg !63
  %504 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %287, i1 %260, i32 0, i1 %260) #2, !dbg !63
  %505 = bitcast i32 %504 to float, !dbg !63
  %506 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %289, i1 %260, i32 0, i1 %260) #2, !dbg !63
  %507 = bitcast i32 %506 to float, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %508 = insertelement <1 x float> undef, float %493, i64 0, !dbg !63
  store <1 x float> %508, ptr addrspace(3) %190, align 4, !dbg !63
  %509 = insertelement <1 x float> undef, float %495, i64 0, !dbg !63
  store <1 x float> %509, ptr addrspace(3) %193, align 4, !dbg !63
  %510 = insertelement <1 x float> undef, float %497, i64 0, !dbg !63
  store <1 x float> %510, ptr addrspace(3) %196, align 4, !dbg !63
  %511 = insertelement <1 x float> undef, float %499, i64 0, !dbg !63
  store <1 x float> %511, ptr addrspace(3) %199, align 4, !dbg !63
  %512 = insertelement <1 x float> undef, float %501, i64 0, !dbg !63
  store <1 x float> %512, ptr addrspace(3) %202, align 4, !dbg !63
  %513 = insertelement <1 x float> undef, float %503, i64 0, !dbg !63
  store <1 x float> %513, ptr addrspace(3) %205, align 4, !dbg !63
  %514 = insertelement <1 x float> undef, float %505, i64 0, !dbg !63
  store <1 x float> %514, ptr addrspace(3) %208, align 4, !dbg !63
  %515 = insertelement <1 x float> undef, float %507, i64 0, !dbg !63
  store <1 x float> %515, ptr addrspace(3) %211, align 4, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %516 = load <8 x float>, ptr addrspace(3) %214, align 32, !dbg !63
  %517 = fmul float %484, %493, !dbg !64
  %518 = fmul float %485, %495, !dbg !64
  %519 = fmul float %486, %497, !dbg !64
  %520 = fmul float %487, %499, !dbg !64
  %521 = fmul float %488, %501, !dbg !64
  %522 = fmul float %489, %503, !dbg !64
  %523 = fmul float %490, %505, !dbg !64
  %524 = fmul float %491, %507, !dbg !64
  %525 = select i1 %260, float %517, float 0.000000e+00, !dbg !53
  %526 = select i1 %260, float %518, float 0.000000e+00, !dbg !53
  %527 = select i1 %260, float %519, float 0.000000e+00, !dbg !53
  %528 = select i1 %260, float %520, float 0.000000e+00, !dbg !53
  %529 = select i1 %260, float %521, float 0.000000e+00, !dbg !53
  %530 = select i1 %260, float %522, float 0.000000e+00, !dbg !53
  %531 = select i1 %260, float %523, float 0.000000e+00, !dbg !53
  %532 = select i1 %260, float %524, float 0.000000e+00, !dbg !53
  %533 = fadd float %447, %525, !dbg !65
  %534 = fadd float %448, %526, !dbg !65
  %535 = fadd float %449, %527, !dbg !65
  %536 = fadd float %450, %528, !dbg !65
  %537 = fadd float %451, %529, !dbg !65
  %538 = fadd float %452, %530, !dbg !65
  %539 = fadd float %453, %531, !dbg !65
  %540 = fadd float %454, %532, !dbg !65
  %541 = fadd float %353, %533, !dbg !66
  %542 = fadd float %354, %534, !dbg !66
  %543 = fadd float %355, %535, !dbg !66
  %544 = fadd float %356, %536, !dbg !66
  %545 = fadd float %357, %537, !dbg !66
  %546 = fadd float %358, %538, !dbg !66
  %547 = fadd float %359, %539, !dbg !66
  %548 = fadd float %360, %540, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %549 = insertelement <1 x float> undef, float %541, i64 0, !dbg !66
  store <1 x float> %549, ptr addrspace(3) %190, align 4, !dbg !66
  %550 = insertelement <1 x float> undef, float %542, i64 0, !dbg !66
  store <1 x float> %550, ptr addrspace(3) %193, align 4, !dbg !66
  %551 = insertelement <1 x float> undef, float %543, i64 0, !dbg !66
  store <1 x float> %551, ptr addrspace(3) %196, align 4, !dbg !66
  %552 = insertelement <1 x float> undef, float %544, i64 0, !dbg !66
  store <1 x float> %552, ptr addrspace(3) %199, align 4, !dbg !66
  %553 = insertelement <1 x float> undef, float %545, i64 0, !dbg !66
  store <1 x float> %553, ptr addrspace(3) %202, align 4, !dbg !66
  %554 = insertelement <1 x float> undef, float %546, i64 0, !dbg !66
  store <1 x float> %554, ptr addrspace(3) %205, align 4, !dbg !66
  %555 = insertelement <1 x float> undef, float %547, i64 0, !dbg !66
  store <1 x float> %555, ptr addrspace(3) %208, align 4, !dbg !66
  %556 = insertelement <1 x float> undef, float %548, i64 0, !dbg !66
  store <1 x float> %556, ptr addrspace(3) %211, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %557 = load <8 x float>, ptr addrspace(3) %214, align 32, !dbg !66
  %558 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %218, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !67
  %559 = extractvalue { i32, i32, i32, i32 } %558, 0, !dbg !67
  %560 = extractvalue { i32, i32, i32, i32 } %558, 1, !dbg !67
  %561 = extractvalue { i32, i32, i32, i32 } %558, 2, !dbg !67
  %562 = extractvalue { i32, i32, i32, i32 } %558, 3, !dbg !67
  %563 = trunc i32 %559 to i16, !dbg !67
  %extelt.offset20 = lshr i32 %559, 16, !dbg !67
  %564 = trunc i32 %extelt.offset20 to i16, !dbg !67
  %565 = trunc i32 %560 to i16, !dbg !67
  %extelt.offset21 = lshr i32 %560, 16, !dbg !67
  %566 = trunc i32 %extelt.offset21 to i16, !dbg !67
  %567 = trunc i32 %561 to i16, !dbg !67
  %extelt.offset22 = lshr i32 %561, 16, !dbg !67
  %568 = trunc i32 %extelt.offset22 to i16, !dbg !67
  %569 = trunc i32 %562 to i16, !dbg !67
  %extelt.offset23 = lshr i32 %562, 16, !dbg !67
  %570 = trunc i32 %extelt.offset23 to i16, !dbg !67
  %571 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %563) #2, !dbg !68
  %572 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %564) #2, !dbg !68
  %573 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %565) #2, !dbg !68
  %574 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %566) #2, !dbg !68
  %575 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %567) #2, !dbg !68
  %576 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %568) #2, !dbg !68
  %577 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %569) #2, !dbg !68
  %578 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %570) #2, !dbg !68
  %579 = insertelement <8 x i1> poison, i1 %219, i64 0, !dbg !53
  %580 = shufflevector <8 x i1> %579, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %581 = insertelement <8 x float> poison, float %571, i64 0, !dbg !53
  %582 = insertelement <8 x float> %581, float %572, i64 1, !dbg !53
  %583 = insertelement <8 x float> %582, float %573, i64 2, !dbg !53
  %584 = insertelement <8 x float> %583, float %574, i64 3, !dbg !53
  %585 = insertelement <8 x float> %584, float %575, i64 4, !dbg !53
  %586 = insertelement <8 x float> %585, float %576, i64 5, !dbg !53
  %587 = insertelement <8 x float> %586, float %577, i64 6, !dbg !53
  %588 = insertelement <8 x float> %587, float %578, i64 7, !dbg !53
  %589 = select <8 x i1> %580, <8 x float> %588, <8 x float> zeroinitializer, !dbg !53
  %590 = insertelement <8 x float> poison, float %308, i64 0, !dbg !69
  %591 = insertelement <8 x float> %590, float %309, i64 1, !dbg !69
  %592 = insertelement <8 x float> %591, float %310, i64 2, !dbg !69
  %593 = insertelement <8 x float> %592, float %311, i64 3, !dbg !69
  %594 = insertelement <8 x float> %593, float %312, i64 4, !dbg !69
  %595 = insertelement <8 x float> %594, float %313, i64 5, !dbg !69
  %596 = insertelement <8 x float> %595, float %314, i64 6, !dbg !69
  %597 = insertelement <8 x float> %596, float %315, i64 7, !dbg !69
  %598 = fmul <8 x float> %294, %597, !dbg !69
  %599 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %264, i1 %234, i32 0, i1 %234, i32 0, i1 %234, i32 0, i1 %234, i32 0, i1 %234) #2, !dbg !70
  %600 = extractvalue { i32, i32, i32, i32 } %599, 0, !dbg !70
  %601 = extractvalue { i32, i32, i32, i32 } %599, 1, !dbg !70
  %602 = extractvalue { i32, i32, i32, i32 } %599, 2, !dbg !70
  %603 = extractvalue { i32, i32, i32, i32 } %599, 3, !dbg !70
  %604 = trunc i32 %600 to i16, !dbg !70
  %extelt.offset24 = lshr i32 %600, 16, !dbg !70
  %605 = trunc i32 %extelt.offset24 to i16, !dbg !70
  %606 = trunc i32 %601 to i16, !dbg !70
  %extelt.offset25 = lshr i32 %601, 16, !dbg !70
  %607 = trunc i32 %extelt.offset25 to i16, !dbg !70
  %608 = trunc i32 %602 to i16, !dbg !70
  %extelt.offset26 = lshr i32 %602, 16, !dbg !70
  %609 = trunc i32 %extelt.offset26 to i16, !dbg !70
  %610 = trunc i32 %603 to i16, !dbg !70
  %extelt.offset27 = lshr i32 %603, 16, !dbg !70
  %611 = trunc i32 %extelt.offset27 to i16, !dbg !70
  %612 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %604) #2, !dbg !71
  %613 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %605) #2, !dbg !71
  %614 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %606) #2, !dbg !71
  %615 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %607) #2, !dbg !71
  %616 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %608) #2, !dbg !71
  %617 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %609) #2, !dbg !71
  %618 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %610) #2, !dbg !71
  %619 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %611) #2, !dbg !71
  %620 = insertelement <8 x float> poison, float %612, i64 0, !dbg !72
  %621 = insertelement <8 x float> %620, float %613, i64 1, !dbg !72
  %622 = insertelement <8 x float> %621, float %614, i64 2, !dbg !72
  %623 = insertelement <8 x float> %622, float %615, i64 3, !dbg !72
  %624 = insertelement <8 x float> %623, float %616, i64 4, !dbg !72
  %625 = insertelement <8 x float> %624, float %617, i64 5, !dbg !72
  %626 = insertelement <8 x float> %625, float %618, i64 6, !dbg !72
  %627 = insertelement <8 x float> %626, float %619, i64 7, !dbg !72
  %628 = fmul <8 x float> %422, %627, !dbg !72
  %629 = fsub <8 x float> zeroinitializer, %628, !dbg !73
  %630 = insertelement <8 x i1> poison, i1 %228, i64 0, !dbg !53
  %631 = shufflevector <8 x i1> %630, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %632 = select <8 x i1> %631, <8 x float> %629, <8 x float> zeroinitializer, !dbg !53
  %633 = fadd <8 x float> %598, %632, !dbg !74
  %634 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %293, i1 %260, i32 0, i1 %260, i32 0, i1 %260, i32 0, i1 %260, i32 0, i1 %260) #2, !dbg !75
  %635 = extractvalue { i32, i32, i32, i32 } %634, 0, !dbg !75
  %636 = extractvalue { i32, i32, i32, i32 } %634, 1, !dbg !75
  %637 = extractvalue { i32, i32, i32, i32 } %634, 2, !dbg !75
  %638 = extractvalue { i32, i32, i32, i32 } %634, 3, !dbg !75
  %639 = trunc i32 %635 to i16, !dbg !75
  %extelt.offset28 = lshr i32 %635, 16, !dbg !75
  %640 = trunc i32 %extelt.offset28 to i16, !dbg !75
  %641 = trunc i32 %636 to i16, !dbg !75
  %extelt.offset29 = lshr i32 %636, 16, !dbg !75
  %642 = trunc i32 %extelt.offset29 to i16, !dbg !75
  %643 = trunc i32 %637 to i16, !dbg !75
  %extelt.offset30 = lshr i32 %637, 16, !dbg !75
  %644 = trunc i32 %extelt.offset30 to i16, !dbg !75
  %645 = trunc i32 %638 to i16, !dbg !75
  %extelt.offset31 = lshr i32 %638, 16, !dbg !75
  %646 = trunc i32 %extelt.offset31 to i16, !dbg !75
  %647 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %639) #2, !dbg !76
  %648 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %640) #2, !dbg !76
  %649 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %641) #2, !dbg !76
  %650 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %642) #2, !dbg !76
  %651 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %643) #2, !dbg !76
  %652 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %644) #2, !dbg !76
  %653 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %645) #2, !dbg !76
  %654 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %646) #2, !dbg !76
  %655 = insertelement <8 x float> poison, float %647, i64 0, !dbg !77
  %656 = insertelement <8 x float> %655, float %648, i64 1, !dbg !77
  %657 = insertelement <8 x float> %656, float %649, i64 2, !dbg !77
  %658 = insertelement <8 x float> %657, float %650, i64 3, !dbg !77
  %659 = insertelement <8 x float> %658, float %651, i64 4, !dbg !77
  %660 = insertelement <8 x float> %659, float %652, i64 5, !dbg !77
  %661 = insertelement <8 x float> %660, float %653, i64 6, !dbg !77
  %662 = insertelement <8 x float> %661, float %654, i64 7, !dbg !77
  %663 = fmul <8 x float> %516, %662, !dbg !77
  %664 = insertelement <8 x i1> poison, i1 %260, i64 0, !dbg !53
  %665 = shufflevector <8 x i1> %664, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !53
  %666 = select <8 x i1> %665, <8 x float> %663, <8 x float> zeroinitializer, !dbg !53
  %667 = fadd <8 x float> %633, %666, !dbg !78
  %668 = fadd <8 x float> %589, %667, !dbg !79
  %669 = fadd <8 x float> %557, %668, !dbg !80
  %670 = shl i32 %44, 19, !dbg !81
  %671 = shl i32 %46, 19, !dbg !81
  %672 = add i32 %50, %670, !dbg !82
  %673 = add i32 %51, %671, !dbg !82
  %674 = sext i32 %672 to i64, !dbg !83
  %675 = getelementptr float, ptr addrspace(1) %3, i64 %674, !dbg !83
  %676 = sext i32 %673 to i64, !dbg !83
  %677 = getelementptr float, ptr addrspace(1) %3, i64 %676, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  store <8 x float> %669, ptr addrspace(3) %214, align 32, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %678 = zext nneg i32 %17 to i64, !dbg !84
  %679 = getelementptr float, ptr addrspace(3) @global_smem, i64 %678, !dbg !84
  %680 = zext nneg i32 %18 to i64, !dbg !84
  %681 = getelementptr float, ptr addrspace(3) @global_smem, i64 %680, !dbg !84
  %682 = load <4 x i32>, ptr addrspace(3) %681, align 16, !dbg !84
  %.extract = load i32, ptr addrspace(3) %679, align 16, !dbg !84
  %683 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %679, i64 0, i64 1, !dbg !84
  %.extract33 = load i32, ptr addrspace(3) %683, align 4, !dbg !84
  %684 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %679, i64 0, i64 2, !dbg !84
  %.extract35 = load i32, ptr addrspace(3) %684, align 8, !dbg !84
  %685 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %679, i64 0, i64 3, !dbg !84
  %.extract37 = load i32, ptr addrspace(3) %685, align 4, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract33, i32 %.extract35, i32 %.extract37, ptr addrspace(1) %675, i1 %33) #2, !dbg !84
  %.extract39 = extractelement <4 x i32> %682, i64 0, !dbg !84
  %.extract41 = extractelement <4 x i32> %682, i64 1, !dbg !84
  %.extract43 = extractelement <4 x i32> %682, i64 2, !dbg !84
  %.extract45 = extractelement <4 x i32> %682, i64 3, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract41, i32 %.extract43, i32 %.extract45, ptr addrspace(1) %677, i1 %33) #2, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cw5okskly7y7544dtvl5mnkbe65q3srjsy7v3mfjiu6mv2r55d7v.py", directory: "/tmp/torchinductor_zeus/w5")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 28, scope: !5)
!13 = !DILocation(line: 26, column: 21, scope: !5)
!14 = !DILocation(line: 29, column: 20, scope: !5)
!15 = !DILocation(line: 28, column: 18, scope: !5)
!16 = !DILocation(line: 30, column: 41, scope: !5)
!17 = !DILocation(line: 30, column: 36, scope: !5)
!18 = !DILocation(line: 30, column: 56, scope: !5)
!19 = !DILocation(line: 30, column: 48, scope: !5)
!20 = !DILocation(line: 30, column: 30, scope: !5)
!21 = !DILocation(line: 30, column: 62, scope: !5)
!22 = !DILocation(line: 30, column: 102, scope: !5)
!23 = !DILocation(line: 31, column: 41, scope: !5)
!24 = !DILocation(line: 31, column: 37, scope: !5)
!25 = !DILocation(line: 31, column: 31, scope: !5)
!26 = !DILocation(line: 31, column: 47, scope: !5)
!27 = !DILocation(line: 32, column: 46, scope: !5)
!28 = !DILocation(line: 32, column: 58, scope: !5)
!29 = !DILocation(line: 32, column: 31, scope: !5)
!30 = !DILocation(line: 35, column: 19, scope: !5)
!31 = !DILocation(line: 42, column: 19, scope: !5)
!32 = !DILocation(line: 45, column: 20, scope: !5)
!33 = !DILocation(line: 46, column: 49, scope: !5)
!34 = !DILocation(line: 46, column: 61, scope: !5)
!35 = !DILocation(line: 46, column: 31, scope: !5)
!36 = !DILocation(line: 46, column: 83, scope: !5)
!37 = !DILocation(line: 48, column: 40, scope: !5)
!38 = !DILocation(line: 48, column: 46, scope: !5)
!39 = !DILocation(line: 48, column: 31, scope: !5)
!40 = !DILocation(line: 56, column: 19, scope: !5)
!41 = !DILocation(line: 57, column: 46, scope: !5)
!42 = !DILocation(line: 57, column: 58, scope: !5)
!43 = !DILocation(line: 57, column: 31, scope: !5)
!44 = !DILocation(line: 59, column: 37, scope: !5)
!45 = !DILocation(line: 59, column: 43, scope: !5)
!46 = !DILocation(line: 59, column: 31, scope: !5)
!47 = !DILocation(line: 84, column: 46, scope: !5)
!48 = !DILocation(line: 84, column: 58, scope: !5)
!49 = !DILocation(line: 84, column: 31, scope: !5)
!50 = !DILocation(line: 32, column: 72, scope: !5)
!51 = !DILocation(line: 32, column: 112, scope: !5)
!52 = !DILocation(line: 36, column: 62, scope: !5)
!53 = !DILocation(line: 0, scope: !5)
!54 = !DILocation(line: 36, column: 120, scope: !5)
!55 = !DILocation(line: 46, column: 75, scope: !5)
!56 = !DILocation(line: 46, column: 134, scope: !5)
!57 = !DILocation(line: 48, column: 56, scope: !5)
!58 = !DILocation(line: 49, column: 20, scope: !5)
!59 = !DILocation(line: 51, column: 13, scope: !5)
!60 = !DILocation(line: 55, column: 20, scope: !5)
!61 = !DILocation(line: 57, column: 72, scope: !5)
!62 = !DILocation(line: 57, column: 131, scope: !5)
!63 = !DILocation(line: 59, column: 53, scope: !5)
!64 = !DILocation(line: 60, column: 20, scope: !5)
!65 = !DILocation(line: 65, column: 20, scope: !5)
!66 = !DILocation(line: 66, column: 19, scope: !5)
!67 = !DILocation(line: 68, column: 72, scope: !5)
!68 = !DILocation(line: 68, column: 130, scope: !5)
!69 = !DILocation(line: 73, column: 20, scope: !5)
!70 = !DILocation(line: 75, column: 72, scope: !5)
!71 = !DILocation(line: 75, column: 131, scope: !5)
!72 = !DILocation(line: 77, column: 20, scope: !5)
!73 = !DILocation(line: 79, column: 13, scope: !5)
!74 = !DILocation(line: 83, column: 20, scope: !5)
!75 = !DILocation(line: 84, column: 72, scope: !5)
!76 = !DILocation(line: 84, column: 131, scope: !5)
!77 = !DILocation(line: 86, column: 20, scope: !5)
!78 = !DILocation(line: 91, column: 20, scope: !5)
!79 = !DILocation(line: 92, column: 20, scope: !5)
!80 = !DILocation(line: 94, column: 20, scope: !5)
!81 = !DILocation(line: 95, column: 50, scope: !5)
!82 = !DILocation(line: 95, column: 43, scope: !5)
!83 = !DILocation(line: 95, column: 25, scope: !5)
!84 = !DILocation(line: 95, column: 63, scope: !5)
!85 = !DILocation(line: 95, column: 4, scope: !5)
