; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !5 {
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %16 = and i32 %15, 127, !dbg !8
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %18 = shl i32 %17, 7, !dbg !10
  %19 = or i32 %18, %16, !dbg !11
  %20 = icmp slt i32 %19, 2304, !dbg !12
  %21 = sext i32 %19 to i64, !dbg !13
  %22 = getelementptr i16, ptr addrspace(1) %0, i64 %21, !dbg !13
  %23 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %22, i1 %20) #1, !dbg !14
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #1, !dbg !15
  %25 = getelementptr i16, ptr addrspace(1) %1, i64 %21, !dbg !16
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %20) #1, !dbg !17
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #1, !dbg !18
  %28 = getelementptr i16, ptr addrspace(1) %2, i64 %21, !dbg !19
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %20) #1, !dbg !20
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #1, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %20) #1, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #1, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #1, !dbg !27
  %38 = add i32 %19, 2304, !dbg !28
  %39 = sext i32 %38 to i64, !dbg !29
  %40 = getelementptr i16, ptr addrspace(1) %0, i64 %39, !dbg !29
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %20) #1, !dbg !30
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #1, !dbg !31
  %43 = getelementptr i16, ptr addrspace(1) %1, i64 %39, !dbg !32
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %20) #1, !dbg !33
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #1, !dbg !34
  %46 = getelementptr i16, ptr addrspace(1) %2, i64 %39, !dbg !35
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %20) #1, !dbg !36
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #1, !dbg !37
  %49 = getelementptr float, ptr addrspace(1) %3, i64 1, !dbg !38
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !39
  %51 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !40
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #1, !dbg !41
  %53 = getelementptr float, ptr addrspace(1) %6, i64 1, !dbg !42
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !43
  %55 = add i32 %19, 4608, !dbg !44
  %56 = sext i32 %55 to i64, !dbg !45
  %57 = getelementptr i16, ptr addrspace(1) %0, i64 %56, !dbg !45
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %57, i1 %20) #1, !dbg !46
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #1, !dbg !47
  %60 = getelementptr i16, ptr addrspace(1) %1, i64 %56, !dbg !48
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %60, i1 %20) #1, !dbg !49
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #1, !dbg !50
  %63 = getelementptr i16, ptr addrspace(1) %2, i64 %56, !dbg !51
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %63, i1 %20) #1, !dbg !52
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #1, !dbg !53
  %66 = getelementptr float, ptr addrspace(1) %3, i64 2, !dbg !54
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !55
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %56, !dbg !56
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %20) #1, !dbg !57
  %70 = getelementptr float, ptr addrspace(1) %6, i64 2, !dbg !58
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !59
  %72 = add i32 %19, 6912, !dbg !60
  %73 = sext i32 %72 to i64, !dbg !61
  %74 = getelementptr i16, ptr addrspace(1) %0, i64 %73, !dbg !61
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %20) #1, !dbg !62
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #1, !dbg !63
  %77 = getelementptr i16, ptr addrspace(1) %1, i64 %73, !dbg !64
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %77, i1 %20) #1, !dbg !65
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #1, !dbg !66
  %80 = getelementptr i16, ptr addrspace(1) %2, i64 %73, !dbg !67
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %80, i1 %20) #1, !dbg !68
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #1, !dbg !69
  %83 = getelementptr float, ptr addrspace(1) %3, i64 3, !dbg !70
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !71
  %85 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !72
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %20) #1, !dbg !73
  %87 = getelementptr float, ptr addrspace(1) %6, i64 3, !dbg !74
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !75
  %89 = getelementptr i16, ptr addrspace(1) %7, i64 %21, !dbg !76
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %89, i1 %20) #1, !dbg !77
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #1, !dbg !78
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #1, !dbg !79
  %93 = getelementptr i16, ptr addrspace(1) %7, i64 %39, !dbg !80
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %93, i1 %20) #1, !dbg !81
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #1, !dbg !82
  %96 = getelementptr float, ptr addrspace(1) %8, i64 1, !dbg !83
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !84
  %98 = getelementptr i16, ptr addrspace(1) %7, i64 %56, !dbg !85
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %98, i1 %20) #1, !dbg !86
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #1, !dbg !87
  %101 = getelementptr float, ptr addrspace(1) %8, i64 2, !dbg !88
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !89
  %103 = getelementptr i16, ptr addrspace(1) %7, i64 %73, !dbg !90
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %103, i1 %20) #1, !dbg !91
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #1, !dbg !92
  %106 = getelementptr float, ptr addrspace(1) %8, i64 3, !dbg !93
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !94
  %108 = getelementptr float, ptr addrspace(1) %9, i64 %21, !dbg !95
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %20) #1, !dbg !96
  %110 = getelementptr float, ptr addrspace(1) %9, i64 %39, !dbg !97
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %20) #1, !dbg !98
  %112 = getelementptr float, ptr addrspace(1) %9, i64 %56, !dbg !99
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %20) #1, !dbg !100
  %114 = getelementptr float, ptr addrspace(1) %9, i64 %73, !dbg !101
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %20) #1, !dbg !102
  %116 = fadd float %34, 1.000000e+00, !dbg !103
  %117 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !22
  %118 = insertelement <2 x i32> %117, i32 %50, i64 1, !dbg !22
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !22
  %120 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !26
  %121 = insertelement <2 x i32> %120, i32 %52, i64 1, !dbg !26
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !26
  %123 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !27
  %124 = insertelement <2 x i32> %123, i32 %54, i64 1, !dbg !27
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !27
  %126 = insertelement <2 x float> poison, float %24, i64 0, !dbg !104
  %127 = insertelement <2 x float> %126, float %42, i64 1, !dbg !104
  %128 = insertelement <2 x float> poison, float %27, i64 0, !dbg !104
  %129 = insertelement <2 x float> %128, float %45, i64 1, !dbg !104
  %130 = fadd <2 x float> %127, %129, !dbg !104
  %131 = insertelement <2 x float> poison, float %30, i64 0, !dbg !105
  %132 = insertelement <2 x float> %131, float %48, i64 1, !dbg !105
  %133 = fmul <2 x float> %132, %119, !dbg !105
  %134 = insertelement <2 x float> poison, float %116, i64 0, !dbg !106
  %135 = shufflevector <2 x float> %134, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !106
  %136 = fmul <2 x float> %133, %135, !dbg !106
  %137 = fmul <2 x float> %122, <float 4.800000e+01, float 4.800000e+01>, !dbg !107
  %138 = fadd <2 x float> %136, %137, !dbg !108
  %139 = fmul <2 x float> %138, %125, !dbg !109
  %140 = fmul <2 x float> %130, %139, !dbg !110
  %shift = shufflevector <2 x float> %140, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !111
  %141 = fadd <2 x float> %140, %shift, !dbg !111
  %142 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !55
  %143 = insertelement <2 x i32> %142, i32 %84, i64 1, !dbg !55
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !55
  %145 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !57
  %146 = insertelement <2 x i32> %145, i32 %86, i64 1, !dbg !57
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !57
  %148 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !59
  %149 = insertelement <2 x i32> %148, i32 %88, i64 1, !dbg !59
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !59
  %151 = insertelement <2 x float> poison, float %59, i64 0, !dbg !112
  %152 = insertelement <2 x float> %151, float %76, i64 1, !dbg !112
  %153 = insertelement <2 x float> poison, float %62, i64 0, !dbg !112
  %154 = insertelement <2 x float> %153, float %79, i64 1, !dbg !112
  %155 = fadd <2 x float> %152, %154, !dbg !112
  %156 = insertelement <2 x float> poison, float %65, i64 0, !dbg !113
  %157 = insertelement <2 x float> %156, float %82, i64 1, !dbg !113
  %158 = fmul <2 x float> %157, %144, !dbg !113
  %159 = fmul <2 x float> %135, %158, !dbg !114
  %160 = fmul <2 x float> %147, <float 4.800000e+01, float 4.800000e+01>, !dbg !115
  %161 = fadd <2 x float> %159, %160, !dbg !116
  %162 = fmul <2 x float> %161, %150, !dbg !117
  %163 = fmul <2 x float> %155, %162, !dbg !118
  %164 = fadd <2 x float> %141, %163, !dbg !119
  %shift1 = shufflevector <2 x float> %163, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !120
  %165 = fadd <2 x float> %164, %shift1, !dbg !120
  %166 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !79
  %167 = insertelement <2 x i32> %166, i32 %97, i64 1, !dbg !79
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !79
  %169 = fmul <2 x float> %137, %168, !dbg !121
  %170 = insertelement <2 x float> poison, float %91, i64 0, !dbg !122
  %171 = insertelement <2 x float> %170, float %95, i64 1, !dbg !122
  %172 = fmul <2 x float> %171, %169, !dbg !122
  %shift2 = shufflevector <2 x float> %172, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !123
  %173 = fadd <2 x float> %172, %shift2, !dbg !123
  %174 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !89
  %175 = insertelement <2 x i32> %174, i32 %107, i64 1, !dbg !89
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !89
  %177 = fmul <2 x float> %160, %176, !dbg !124
  %178 = insertelement <2 x float> poison, float %100, i64 0, !dbg !125
  %179 = insertelement <2 x float> %178, float %105, i64 1, !dbg !125
  %180 = fmul <2 x float> %179, %177, !dbg !125
  %181 = fadd <2 x float> %173, %180, !dbg !126
  %shift3 = shufflevector <2 x float> %180, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !127
  %182 = fadd <2 x float> %181, %shift3, !dbg !127
  %183 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !96
  %184 = insertelement <2 x i32> %183, i32 %111, i64 1, !dbg !96
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !96
  %186 = fmul <2 x float> %133, %185, !dbg !128
  %shift4 = shufflevector <2 x float> %186, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !129
  %187 = fadd <2 x float> %186, %shift4, !dbg !129
  %188 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !100
  %189 = insertelement <2 x i32> %188, i32 %115, i64 1, !dbg !100
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !100
  %191 = fmul <2 x float> %158, %190, !dbg !130
  %192 = fadd <2 x float> %187, %191, !dbg !131
  %shift5 = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !132
  %193 = fadd <2 x float> %192, %shift5, !dbg !132
  %194 = getelementptr float, ptr addrspace(1) %10, i64 %21, !dbg !133
  %bc = bitcast <2 x float> %165 to <2 x i32>, !dbg !134
  %195 = extractelement <2 x i32> %bc, i64 0, !dbg !134
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %194, i1 %20) #1, !dbg !134
  %196 = getelementptr float, ptr addrspace(1) %11, i64 %21, !dbg !135
  %bc6 = bitcast <2 x float> %182 to <2 x i32>, !dbg !136
  %197 = extractelement <2 x i32> %bc6, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %196, i1 %20) #1, !dbg !136
  %198 = getelementptr float, ptr addrspace(1) %12, i64 %21, !dbg !137
  %bc7 = bitcast <2 x float> %193 to <2 x i32>, !dbg !138
  %199 = extractelement <2 x i32> %bc7, i64 0, !dbg !138
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %198, i1 %20) #1, !dbg !138
  ret void, !dbg !139
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cwhzgtt7fb3tra35knxind7p4ho3wxbuzpt3qpdmro5fieca2uqf.py", directory: "/tmp/torchinductor_zeus/wh")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 36, scope: !5)
!9 = !DILocation(line: 20, column: 28, scope: !5)
!10 = !DILocation(line: 20, column: 33, scope: !5)
!11 = !DILocation(line: 21, column: 23, scope: !5)
!12 = !DILocation(line: 22, column: 21, scope: !5)
!13 = !DILocation(line: 24, column: 30, scope: !5)
!14 = !DILocation(line: 24, column: 35, scope: !5)
!15 = !DILocation(line: 24, column: 45, scope: !5)
!16 = !DILocation(line: 25, column: 30, scope: !5)
!17 = !DILocation(line: 25, column: 35, scope: !5)
!18 = !DILocation(line: 25, column: 45, scope: !5)
!19 = !DILocation(line: 26, column: 30, scope: !5)
!20 = !DILocation(line: 26, column: 35, scope: !5)
!21 = !DILocation(line: 26, column: 45, scope: !5)
!22 = !DILocation(line: 27, column: 19, scope: !5)
!23 = !DILocation(line: 29, column: 31, scope: !5)
!24 = !DILocation(line: 29, column: 36, scope: !5)
!25 = !DILocation(line: 30, column: 31, scope: !5)
!26 = !DILocation(line: 30, column: 36, scope: !5)
!27 = !DILocation(line: 31, column: 20, scope: !5)
!28 = !DILocation(line: 33, column: 38, scope: !5)
!29 = !DILocation(line: 33, column: 31, scope: !5)
!30 = !DILocation(line: 33, column: 43, scope: !5)
!31 = !DILocation(line: 33, column: 53, scope: !5)
!32 = !DILocation(line: 34, column: 31, scope: !5)
!33 = !DILocation(line: 34, column: 43, scope: !5)
!34 = !DILocation(line: 34, column: 53, scope: !5)
!35 = !DILocation(line: 35, column: 31, scope: !5)
!36 = !DILocation(line: 35, column: 43, scope: !5)
!37 = !DILocation(line: 35, column: 53, scope: !5)
!38 = !DILocation(line: 36, column: 31, scope: !5)
!39 = !DILocation(line: 36, column: 20, scope: !5)
!40 = !DILocation(line: 38, column: 31, scope: !5)
!41 = !DILocation(line: 38, column: 43, scope: !5)
!42 = !DILocation(line: 39, column: 31, scope: !5)
!43 = !DILocation(line: 39, column: 20, scope: !5)
!44 = !DILocation(line: 41, column: 38, scope: !5)
!45 = !DILocation(line: 41, column: 31, scope: !5)
!46 = !DILocation(line: 41, column: 43, scope: !5)
!47 = !DILocation(line: 41, column: 53, scope: !5)
!48 = !DILocation(line: 42, column: 31, scope: !5)
!49 = !DILocation(line: 42, column: 43, scope: !5)
!50 = !DILocation(line: 42, column: 53, scope: !5)
!51 = !DILocation(line: 43, column: 31, scope: !5)
!52 = !DILocation(line: 43, column: 43, scope: !5)
!53 = !DILocation(line: 43, column: 53, scope: !5)
!54 = !DILocation(line: 44, column: 31, scope: !5)
!55 = !DILocation(line: 44, column: 20, scope: !5)
!56 = !DILocation(line: 46, column: 31, scope: !5)
!57 = !DILocation(line: 46, column: 43, scope: !5)
!58 = !DILocation(line: 47, column: 31, scope: !5)
!59 = !DILocation(line: 47, column: 20, scope: !5)
!60 = !DILocation(line: 49, column: 38, scope: !5)
!61 = !DILocation(line: 49, column: 31, scope: !5)
!62 = !DILocation(line: 49, column: 43, scope: !5)
!63 = !DILocation(line: 49, column: 53, scope: !5)
!64 = !DILocation(line: 50, column: 31, scope: !5)
!65 = !DILocation(line: 50, column: 43, scope: !5)
!66 = !DILocation(line: 50, column: 53, scope: !5)
!67 = !DILocation(line: 51, column: 31, scope: !5)
!68 = !DILocation(line: 51, column: 43, scope: !5)
!69 = !DILocation(line: 51, column: 53, scope: !5)
!70 = !DILocation(line: 52, column: 31, scope: !5)
!71 = !DILocation(line: 52, column: 20, scope: !5)
!72 = !DILocation(line: 54, column: 31, scope: !5)
!73 = !DILocation(line: 54, column: 43, scope: !5)
!74 = !DILocation(line: 55, column: 31, scope: !5)
!75 = !DILocation(line: 55, column: 20, scope: !5)
!76 = !DILocation(line: 57, column: 31, scope: !5)
!77 = !DILocation(line: 57, column: 36, scope: !5)
!78 = !DILocation(line: 57, column: 46, scope: !5)
!79 = !DILocation(line: 58, column: 20, scope: !5)
!80 = !DILocation(line: 60, column: 31, scope: !5)
!81 = !DILocation(line: 60, column: 43, scope: !5)
!82 = !DILocation(line: 60, column: 53, scope: !5)
!83 = !DILocation(line: 61, column: 31, scope: !5)
!84 = !DILocation(line: 61, column: 20, scope: !5)
!85 = !DILocation(line: 63, column: 32, scope: !5)
!86 = !DILocation(line: 63, column: 44, scope: !5)
!87 = !DILocation(line: 63, column: 54, scope: !5)
!88 = !DILocation(line: 64, column: 32, scope: !5)
!89 = !DILocation(line: 64, column: 21, scope: !5)
!90 = !DILocation(line: 66, column: 32, scope: !5)
!91 = !DILocation(line: 66, column: 44, scope: !5)
!92 = !DILocation(line: 66, column: 54, scope: !5)
!93 = !DILocation(line: 67, column: 32, scope: !5)
!94 = !DILocation(line: 67, column: 21, scope: !5)
!95 = !DILocation(line: 69, column: 32, scope: !5)
!96 = !DILocation(line: 69, column: 37, scope: !5)
!97 = !DILocation(line: 70, column: 32, scope: !5)
!98 = !DILocation(line: 70, column: 44, scope: !5)
!99 = !DILocation(line: 71, column: 32, scope: !5)
!100 = !DILocation(line: 71, column: 44, scope: !5)
!101 = !DILocation(line: 72, column: 32, scope: !5)
!102 = !DILocation(line: 72, column: 44, scope: !5)
!103 = !DILocation(line: 79, column: 20, scope: !5)
!104 = !DILocation(line: 75, column: 18, scope: !5)
!105 = !DILocation(line: 77, column: 18, scope: !5)
!106 = !DILocation(line: 80, column: 19, scope: !5)
!107 = !DILocation(line: 84, column: 20, scope: !5)
!108 = !DILocation(line: 85, column: 20, scope: !5)
!109 = !DILocation(line: 86, column: 20, scope: !5)
!110 = !DILocation(line: 87, column: 19, scope: !5)
!111 = !DILocation(line: 100, column: 20, scope: !5)
!112 = !DILocation(line: 103, column: 20, scope: !5)
!113 = !DILocation(line: 105, column: 20, scope: !5)
!114 = !DILocation(line: 106, column: 20, scope: !5)
!115 = !DILocation(line: 109, column: 20, scope: !5)
!116 = !DILocation(line: 110, column: 20, scope: !5)
!117 = !DILocation(line: 111, column: 20, scope: !5)
!118 = !DILocation(line: 112, column: 20, scope: !5)
!119 = !DILocation(line: 113, column: 20, scope: !5)
!120 = !DILocation(line: 126, column: 20, scope: !5)
!121 = !DILocation(line: 128, column: 20, scope: !5)
!122 = !DILocation(line: 129, column: 20, scope: !5)
!123 = !DILocation(line: 133, column: 20, scope: !5)
!124 = !DILocation(line: 135, column: 21, scope: !5)
!125 = !DILocation(line: 136, column: 22, scope: !5)
!126 = !DILocation(line: 137, column: 21, scope: !5)
!127 = !DILocation(line: 141, column: 22, scope: !5)
!128 = !DILocation(line: 142, column: 22, scope: !5)
!129 = !DILocation(line: 144, column: 22, scope: !5)
!130 = !DILocation(line: 145, column: 22, scope: !5)
!131 = !DILocation(line: 146, column: 22, scope: !5)
!132 = !DILocation(line: 148, column: 22, scope: !5)
!133 = !DILocation(line: 149, column: 25, scope: !5)
!134 = !DILocation(line: 149, column: 37, scope: !5)
!135 = !DILocation(line: 150, column: 25, scope: !5)
!136 = !DILocation(line: 150, column: 38, scope: !5)
!137 = !DILocation(line: 151, column: 25, scope: !5)
!138 = !DILocation(line: 151, column: 38, scope: !5)
!139 = !DILocation(line: 151, column: 4, scope: !5)
