module {
  tt.func public @triton__0d1d2d3d4d5d6d7d8d9d10d11d12d13de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg10: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg11: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg12: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<4.800000e+01> : tensor<128xf32>
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<128xf32>
    %c3_i32 = arith.constant 3 : i32
    %cst_1 = arith.constant dense<6912> : tensor<128xi32>
    %c2_i32 = arith.constant 2 : i32
    %cst_2 = arith.constant dense<4608> : tensor<128xi32>
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_3 = arith.constant dense<2304> : tensor<128xi32>
    %c128_i32 = arith.constant 128 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c128_i32 : i32
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>
    %3 = tt.splat %1 : (i32) -> tensor<128xi32>
    %4 = arith.addi %3, %2 : tensor<128xi32>
    %5 = arith.cmpi slt, %4, %cst_3 : tensor<128xi32>
    %6 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<128x!tt.ptr<bf16, 1>>
    %7 = tt.addptr %6, %4 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %8 = tt.load %7, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %9 = arith.extf %8 : tensor<128xbf16> to tensor<128xf32>
    %10 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<128x!tt.ptr<bf16, 1>>
    %11 = tt.addptr %10, %4 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %12 = tt.load %11, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %13 = arith.extf %12 : tensor<128xbf16> to tensor<128xf32>
    %14 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<128x!tt.ptr<bf16, 1>>
    %15 = tt.addptr %14, %4 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %16 = tt.load %15, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %17 = arith.extf %16 : tensor<128xbf16> to tensor<128xf32>
    %18 = tt.addptr %arg3, %c0_i32 : !tt.ptr<f32, 1>, i32
    %19 = tt.load %18 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %20 = tt.splat %19 : (f32) -> tensor<128xf32>
    %21 = tt.splat %arg4 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>>
    %22 = tt.addptr %21, %4 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %23 = tt.load %22, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %24 = tt.splat %arg5 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>>
    %25 = tt.addptr %24, %4 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %26 = tt.load %25, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %27 = tt.addptr %arg6, %c0_i32 : !tt.ptr<f32, 1>, i32
    %28 = tt.load %27 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %29 = tt.splat %28 : (f32) -> tensor<128xf32>
    %30 = arith.addi %4, %cst_3 : tensor<128xi32>
    %31 = tt.addptr %6, %30 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %32 = tt.load %31, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %33 = arith.extf %32 : tensor<128xbf16> to tensor<128xf32>
    %34 = tt.addptr %10, %30 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %35 = tt.load %34, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %36 = arith.extf %35 : tensor<128xbf16> to tensor<128xf32>
    %37 = tt.addptr %14, %30 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %38 = tt.load %37, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %39 = arith.extf %38 : tensor<128xbf16> to tensor<128xf32>
    %40 = tt.addptr %arg3, %c1_i32 : !tt.ptr<f32, 1>, i32
    %41 = tt.load %40 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %42 = tt.splat %41 : (f32) -> tensor<128xf32>
    %43 = tt.addptr %24, %30 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %44 = tt.load %43, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %45 = tt.addptr %arg6, %c1_i32 : !tt.ptr<f32, 1>, i32
    %46 = tt.load %45 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %47 = tt.splat %46 : (f32) -> tensor<128xf32>
    %48 = arith.addi %4, %cst_2 : tensor<128xi32>
    %49 = tt.addptr %6, %48 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %50 = tt.load %49, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %51 = arith.extf %50 : tensor<128xbf16> to tensor<128xf32>
    %52 = tt.addptr %10, %48 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %53 = tt.load %52, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %54 = arith.extf %53 : tensor<128xbf16> to tensor<128xf32>
    %55 = tt.addptr %14, %48 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %56 = tt.load %55, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %57 = arith.extf %56 : tensor<128xbf16> to tensor<128xf32>
    %58 = tt.addptr %arg3, %c2_i32 : !tt.ptr<f32, 1>, i32
    %59 = tt.load %58 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %60 = tt.splat %59 : (f32) -> tensor<128xf32>
    %61 = tt.addptr %24, %48 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %62 = tt.load %61, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %63 = tt.addptr %arg6, %c2_i32 : !tt.ptr<f32, 1>, i32
    %64 = tt.load %63 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %65 = tt.splat %64 : (f32) -> tensor<128xf32>
    %66 = arith.addi %4, %cst_1 : tensor<128xi32>
    %67 = tt.addptr %6, %66 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %68 = tt.load %67, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %69 = arith.extf %68 : tensor<128xbf16> to tensor<128xf32>
    %70 = tt.addptr %10, %66 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %71 = tt.load %70, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %72 = arith.extf %71 : tensor<128xbf16> to tensor<128xf32>
    %73 = tt.addptr %14, %66 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %74 = tt.load %73, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %75 = arith.extf %74 : tensor<128xbf16> to tensor<128xf32>
    %76 = tt.addptr %arg3, %c3_i32 : !tt.ptr<f32, 1>, i32
    %77 = tt.load %76 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %78 = tt.splat %77 : (f32) -> tensor<128xf32>
    %79 = tt.addptr %24, %66 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %80 = tt.load %79, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %81 = tt.addptr %arg6, %c3_i32 : !tt.ptr<f32, 1>, i32
    %82 = tt.load %81 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %83 = tt.splat %82 : (f32) -> tensor<128xf32>
    %84 = tt.splat %arg7 : (!tt.ptr<bf16, 1>) -> tensor<128x!tt.ptr<bf16, 1>>
    %85 = tt.addptr %84, %4 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %86 = tt.load %85, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %87 = arith.extf %86 : tensor<128xbf16> to tensor<128xf32>
    %88 = tt.addptr %arg8, %c0_i32 : !tt.ptr<f32, 1>, i32
    %89 = tt.load %88 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %90 = tt.splat %89 : (f32) -> tensor<128xf32>
    %91 = tt.addptr %84, %30 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %92 = tt.load %91, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %93 = arith.extf %92 : tensor<128xbf16> to tensor<128xf32>
    %94 = tt.addptr %arg8, %c1_i32 : !tt.ptr<f32, 1>, i32
    %95 = tt.load %94 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %96 = tt.splat %95 : (f32) -> tensor<128xf32>
    %97 = tt.addptr %84, %48 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %98 = tt.load %97, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %99 = arith.extf %98 : tensor<128xbf16> to tensor<128xf32>
    %100 = tt.addptr %arg8, %c2_i32 : !tt.ptr<f32, 1>, i32
    %101 = tt.load %100 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %102 = tt.splat %101 : (f32) -> tensor<128xf32>
    %103 = tt.addptr %84, %66 : tensor<128x!tt.ptr<bf16, 1>>, tensor<128xi32>
    %104 = tt.load %103, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xbf16>
    %105 = arith.extf %104 : tensor<128xbf16> to tensor<128xf32>
    %106 = tt.addptr %arg8, %c3_i32 : !tt.ptr<f32, 1>, i32
    %107 = tt.load %106 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %108 = tt.splat %107 : (f32) -> tensor<128xf32>
    %109 = tt.splat %arg9 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>>
    %110 = tt.addptr %109, %4 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %111 = tt.load %110, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %112 = tt.addptr %109, %30 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %113 = tt.load %112, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %114 = tt.addptr %109, %48 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %115 = tt.load %114, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %116 = tt.addptr %109, %66 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %117 = tt.load %116, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %118 = arith.addf %9, %13 : tensor<128xf32>
    %119 = arith.mulf %17, %20 : tensor<128xf32>
    %120 = arith.addf %23, %cst_0 : tensor<128xf32>
    %121 = arith.mulf %119, %120 : tensor<128xf32>
    %122 = arith.mulf %26, %cst : tensor<128xf32>
    %123 = arith.addf %121, %122 : tensor<128xf32>
    %124 = arith.mulf %123, %29 : tensor<128xf32>
    %125 = arith.mulf %118, %124 : tensor<128xf32>
    %126 = arith.addf %33, %36 : tensor<128xf32>
    %127 = arith.mulf %39, %42 : tensor<128xf32>
    %128 = arith.mulf %127, %120 : tensor<128xf32>
    %129 = arith.mulf %44, %cst : tensor<128xf32>
    %130 = arith.addf %128, %129 : tensor<128xf32>
    %131 = arith.mulf %130, %47 : tensor<128xf32>
    %132 = arith.mulf %126, %131 : tensor<128xf32>
    %133 = arith.addf %125, %132 : tensor<128xf32>
    %134 = arith.addf %51, %54 : tensor<128xf32>
    %135 = arith.mulf %57, %60 : tensor<128xf32>
    %136 = arith.mulf %135, %120 : tensor<128xf32>
    %137 = arith.mulf %62, %cst : tensor<128xf32>
    %138 = arith.addf %136, %137 : tensor<128xf32>
    %139 = arith.mulf %138, %65 : tensor<128xf32>
    %140 = arith.mulf %134, %139 : tensor<128xf32>
    %141 = arith.addf %133, %140 : tensor<128xf32>
    %142 = arith.addf %69, %72 : tensor<128xf32>
    %143 = arith.mulf %75, %78 : tensor<128xf32>
    %144 = arith.mulf %143, %120 : tensor<128xf32>
    %145 = arith.mulf %80, %cst : tensor<128xf32>
    %146 = arith.addf %144, %145 : tensor<128xf32>
    %147 = arith.mulf %146, %83 : tensor<128xf32>
    %148 = arith.mulf %142, %147 : tensor<128xf32>
    %149 = arith.addf %141, %148 : tensor<128xf32>
    %150 = arith.mulf %122, %90 : tensor<128xf32>
    %151 = arith.mulf %87, %150 : tensor<128xf32>
    %152 = arith.mulf %129, %96 : tensor<128xf32>
    %153 = arith.mulf %93, %152 : tensor<128xf32>
    %154 = arith.addf %151, %153 : tensor<128xf32>
    %155 = arith.mulf %137, %102 : tensor<128xf32>
    %156 = arith.mulf %99, %155 : tensor<128xf32>
    %157 = arith.addf %154, %156 : tensor<128xf32>
    %158 = arith.mulf %145, %108 : tensor<128xf32>
    %159 = arith.mulf %105, %158 : tensor<128xf32>
    %160 = arith.addf %157, %159 : tensor<128xf32>
    %161 = arith.mulf %111, %119 : tensor<128xf32>
    %162 = arith.mulf %113, %127 : tensor<128xf32>
    %163 = arith.addf %161, %162 : tensor<128xf32>
    %164 = arith.mulf %115, %135 : tensor<128xf32>
    %165 = arith.addf %163, %164 : tensor<128xf32>
    %166 = arith.mulf %117, %143 : tensor<128xf32>
    %167 = arith.addf %165, %166 : tensor<128xf32>
    %168 = tt.splat %arg10 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>>
    %169 = tt.addptr %168, %4 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    tt.store %169, %149, %5 {cache = 1 : i32, evict = 1 : i32} : tensor<128xf32>
    %170 = tt.splat %arg11 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>>
    %171 = tt.addptr %170, %4 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    tt.store %171, %160, %5 {cache = 1 : i32, evict = 1 : i32} : tensor<128xf32>
    %172 = tt.splat %arg12 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>>
    %173 = tt.addptr %172, %4 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    tt.store %173, %167, %5 {cache = 1 : i32, evict = 1 : i32} : tensor<128xf32>
    tt.return
  }
}
