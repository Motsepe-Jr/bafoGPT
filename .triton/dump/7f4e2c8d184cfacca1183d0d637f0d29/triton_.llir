; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = and i32 %9, 7, !dbg !8
  %urem = and i32 %7, 255, !dbg !8
  %11 = shl nuw nsw i32 %urem, 2, !dbg !8
  %12 = or i32 %11, 1024, !dbg !8
  %13 = or i32 %urem, 256, !dbg !8
  %14 = or i32 %urem, 512, !dbg !8
  %15 = or i32 %urem, 768, !dbg !8
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %17 = icmp slt i32 %16, 2304, !dbg !10
  %18 = mul nuw nsw i32 %urem, 2304, !dbg !11
  %19 = mul nuw nsw i32 %13, 2304, !dbg !11
  %20 = mul nuw nsw i32 %14, 2304, !dbg !11
  %21 = mul nuw nsw i32 %15, 2304, !dbg !11
  %22 = add i32 %16, %18, !dbg !12
  %23 = add i32 %16, %19, !dbg !12
  %24 = add i32 %16, %20, !dbg !12
  %25 = add i32 %16, %21, !dbg !12
  %26 = add i32 %22, 2359296, !dbg !12
  %27 = add i32 %22, 2949120, !dbg !12
  %28 = add i32 %22, 3538944, !dbg !12
  %29 = add i32 %22, 4128768, !dbg !12
  %30 = sext i32 %22 to i64, !dbg !13
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !13
  %32 = sext i32 %23 to i64, !dbg !13
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !13
  %34 = sext i32 %24 to i64, !dbg !13
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !13
  %36 = sext i32 %25 to i64, !dbg !13
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !13
  %38 = sext i32 %26 to i64, !dbg !13
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !13
  %40 = sext i32 %27 to i64, !dbg !13
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !13
  %42 = sext i32 %28 to i64, !dbg !13
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !13
  %44 = sext i32 %29 to i64, !dbg !13
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !13
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %17, i32 0, i1 %17) #3, !dbg !14
  %54 = zext nneg i32 %urem to i64, !dbg !14
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i64 %54, !dbg !14
  store i32 %46, ptr addrspace(3) %55, align 4, !dbg !14
  %56 = zext nneg i32 %13 to i64, !dbg !14
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56, !dbg !14
  store i32 %47, ptr addrspace(3) %57, align 4, !dbg !14
  %58 = zext nneg i32 %14 to i64, !dbg !14
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i64 %58, !dbg !14
  store i32 %48, ptr addrspace(3) %59, align 4, !dbg !14
  %60 = zext nneg i32 %15 to i64, !dbg !14
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !14
  store i32 %49, ptr addrspace(3) %61, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %62 = zext nneg i32 %11 to i64, !dbg !14
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i64 %62, !dbg !14
  %64 = load float, ptr addrspace(3) %63, align 16, !dbg !14
  %65 = getelementptr inbounds <4 x float>, ptr addrspace(3) %63, i64 0, i64 1, !dbg !14
  %66 = load float, ptr addrspace(3) %65, align 4, !dbg !14
  %67 = getelementptr inbounds <4 x float>, ptr addrspace(3) %63, i64 0, i64 2, !dbg !14
  %68 = getelementptr i16, ptr addrspace(1) %1, i64 %30, !dbg !15
  %69 = getelementptr i16, ptr addrspace(1) %1, i64 %32, !dbg !15
  %70 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !15
  %71 = getelementptr i16, ptr addrspace(1) %1, i64 %36, !dbg !15
  %72 = getelementptr i16, ptr addrspace(1) %1, i64 %38, !dbg !15
  %73 = getelementptr i16, ptr addrspace(1) %1, i64 %40, !dbg !15
  %74 = getelementptr i16, ptr addrspace(1) %1, i64 %42, !dbg !15
  %75 = getelementptr i16, ptr addrspace(1) %1, i64 %44, !dbg !15
  %76 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %54, !dbg !16
  %77 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %56, !dbg !16
  %78 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %58, !dbg !16
  %79 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %60, !dbg !16
  %80 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %62, !dbg !16
  %81 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %80, i64 0, i64 1, !dbg !16
  %82 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %80, i64 0, i64 2, !dbg !16
  %83 = getelementptr inbounds <4 x i16>, ptr addrspace(3) %80, i64 0, i64 3, !dbg !16
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !17
  %85 = zext nneg i32 %12 to i64, !dbg !17
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !17
  %87 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  store i32 %50, ptr addrspace(3) %55, align 4, !dbg !14
  store i32 %51, ptr addrspace(3) %57, align 4, !dbg !14
  store i32 %52, ptr addrspace(3) %59, align 4, !dbg !14
  store i32 %53, ptr addrspace(3) %61, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %88 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !14
  %89 = load <2 x float>, ptr addrspace(3) %63, align 16, !dbg !14
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %68, i1 %17, i16 0, i1 %17) #3, !dbg !18
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %69, i1 %17, i16 0, i1 %17) #3, !dbg !18
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %70, i1 %17, i16 0, i1 %17) #3, !dbg !18
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %71, i1 %17, i16 0, i1 %17) #3, !dbg !18
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %72, i1 %17, i16 0, i1 %17) #3, !dbg !18
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %73, i1 %17, i16 0, i1 %17) #3, !dbg !18
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %74, i1 %17, i16 0, i1 %17) #3, !dbg !18
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %75, i1 %17, i16 0, i1 %17) #3, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %98 = insertelement <1 x i16> undef, i16 %90, i64 0, !dbg !16
  store <1 x i16> %98, ptr addrspace(3) %76, align 2, !dbg !16
  %99 = insertelement <1 x i16> undef, i16 %91, i64 0, !dbg !16
  store <1 x i16> %99, ptr addrspace(3) %77, align 2, !dbg !16
  %100 = insertelement <1 x i16> undef, i16 %92, i64 0, !dbg !16
  store <1 x i16> %100, ptr addrspace(3) %78, align 2, !dbg !16
  %101 = insertelement <1 x i16> undef, i16 %93, i64 0, !dbg !16
  store <1 x i16> %101, ptr addrspace(3) %79, align 2, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %102 = load i16, ptr addrspace(3) %80, align 8, !dbg !16
  %103 = load i16, ptr addrspace(3) %81, align 2, !dbg !16
  %104 = load i16, ptr addrspace(3) %82, align 4, !dbg !16
  %105 = load i16, ptr addrspace(3) %83, align 2, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %106 = insertelement <1 x i16> undef, i16 %94, i64 0, !dbg !16
  store <1 x i16> %106, ptr addrspace(3) %76, align 2, !dbg !16
  %107 = insertelement <1 x i16> undef, i16 %95, i64 0, !dbg !16
  store <1 x i16> %107, ptr addrspace(3) %77, align 2, !dbg !16
  %108 = insertelement <1 x i16> undef, i16 %96, i64 0, !dbg !16
  store <1 x i16> %108, ptr addrspace(3) %78, align 2, !dbg !16
  %109 = insertelement <1 x i16> undef, i16 %97, i64 0, !dbg !16
  store <1 x i16> %109, ptr addrspace(3) %79, align 2, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %110 = load i16, ptr addrspace(3) %80, align 8, !dbg !16
  %111 = load i16, ptr addrspace(3) %81, align 2, !dbg !16
  %112 = load i16, ptr addrspace(3) %82, align 4, !dbg !16
  %113 = load i16, ptr addrspace(3) %83, align 2, !dbg !16
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #3, !dbg !16
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #3, !dbg !16
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #3, !dbg !16
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #3, !dbg !16
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #3, !dbg !16
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %111) #3, !dbg !16
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #3, !dbg !16
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #3, !dbg !16
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !19
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !19
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !19
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !19
  %127 = bitcast i32 %123 to float, !dbg !19
  %128 = bitcast i32 %124 to float, !dbg !19
  %129 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !19
  %130 = insertelement <2 x i32> %129, i32 %126, i64 1, !dbg !19
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !19
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !19
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !19
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !19
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !19
  %137 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !19
  %138 = insertelement <2 x i32> %137, i32 %134, i64 1, !dbg !19
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !19
  %140 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !19
  %141 = insertelement <2 x i32> %140, i32 %136, i64 1, !dbg !19
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !19
  %143 = fmul float %114, %127, !dbg !20
  %144 = fmul float %115, %128, !dbg !20
  %145 = insertelement <2 x float> poison, float %116, i64 0, !dbg !20
  %146 = insertelement <2 x float> %145, float %117, i64 1, !dbg !20
  %147 = fmul <2 x float> %146, %131, !dbg !20
  %148 = insertelement <2 x float> poison, float %118, i64 0, !dbg !20
  %149 = insertelement <2 x float> %148, float %119, i64 1, !dbg !20
  %150 = fmul <2 x float> %149, %139, !dbg !20
  %151 = insertelement <2 x float> poison, float %120, i64 0, !dbg !20
  %152 = insertelement <2 x float> %151, float %121, i64 1, !dbg !20
  %153 = fmul <2 x float> %152, %142, !dbg !20
  %154 = fmul float %64, %143, !dbg !21
  %155 = fmul float %66, %144, !dbg !21
  %156 = fmul <2 x float> %87, %147, !dbg !21
  %157 = fmul <2 x float> %89, %150, !dbg !21
  %158 = fmul <2 x float> %88, %153, !dbg !21
  %159 = fadd float %154, 0.000000e+00, !dbg !22
  %160 = fadd float %155, 0.000000e+00, !dbg !22
  %161 = fadd <2 x float> %156, zeroinitializer, !dbg !22
  %162 = fadd <2 x float> %157, zeroinitializer, !dbg !22
  %163 = fadd <2 x float> %158, zeroinitializer, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %164 = fadd float %159, %160, !dbg !27
  %165 = extractelement <2 x float> %161, i64 0, !dbg !27
  %166 = fadd float %165, %164, !dbg !27
  %167 = extractelement <2 x float> %161, i64 1, !dbg !27
  %168 = fadd float %167, %166, !dbg !27
  %169 = extractelement <2 x float> %162, i64 0, !dbg !27
  %170 = fadd float %169, %168, !dbg !27
  %171 = extractelement <2 x float> %162, i64 1, !dbg !27
  %172 = fadd float %171, %170, !dbg !27
  %173 = extractelement <2 x float> %163, i64 0, !dbg !27
  %174 = fadd float %173, %172, !dbg !27
  %175 = extractelement <2 x float> %163, i64 1, !dbg !27
  %176 = fadd float %175, %174, !dbg !27
  %177 = select i1 %17, float %176, float 0.000000e+00, !dbg !27
  %178 = bitcast float %177 to i32, !dbg !23
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 16, i32 31), !dbg !23
  %180 = bitcast i32 %179 to float, !dbg !23
  %181 = fadd float %177, %180, !dbg !27
  %182 = bitcast float %181 to i32, !dbg !23
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 8, i32 31), !dbg !23
  %184 = bitcast i32 %183 to float, !dbg !23
  %185 = fadd float %181, %184, !dbg !27
  %186 = bitcast float %185 to i32, !dbg !23
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !23
  %188 = bitcast i32 %187 to float, !dbg !23
  %189 = fadd float %185, %188, !dbg !27
  %190 = bitcast float %189 to i32, !dbg !23
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 2, i32 31), !dbg !23
  %192 = bitcast i32 %191 to float, !dbg !23
  %193 = fadd float %189, %192, !dbg !27
  %194 = bitcast float %193 to i32, !dbg !23
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 1, i32 31), !dbg !23
  %196 = bitcast i32 %195 to float, !dbg !23
  %197 = fadd float %193, %196, !dbg !27
  %198 = icmp eq i32 %8, 0, !dbg !23
  %199 = zext nneg i32 %10 to i64, !dbg !23
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i64 %199, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, float %197, i1 %198) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %201 = icmp slt i32 %7, 8, !dbg !23
  %202 = sext i32 %7 to i64, !dbg !23
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %202, !dbg !23
  %204 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %203, i1 %201) #3, !dbg !23
  %205 = bitcast float %204 to i32, !dbg !23
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 4, i32 31), !dbg !23
  %207 = bitcast i32 %206 to float, !dbg !23
  %208 = fadd float %204, %207, !dbg !27
  %209 = bitcast float %208 to i32, !dbg !23
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !23
  %211 = bitcast i32 %210 to float, !dbg !23
  %212 = fadd float %208, %211, !dbg !27
  %213 = bitcast float %212 to i32, !dbg !23
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 1, i32 31), !dbg !23
  %215 = bitcast i32 %214 to float, !dbg !23
  %216 = fadd float %212, %215, !dbg !27
  %217 = and i32 %7, 7, !dbg !23
  %218 = icmp eq i32 %217, 0, !dbg !23
  %219 = and i1 %201, %218, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, float %216, i1 %219) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %220 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %221 = insertelement <1 x float> undef, float %220, i64 0, !dbg !31
  store <1 x float> %221, ptr addrspace(3) @global_smem, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %222 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !31
  %223 = sext i32 %16 to i64, !dbg !32
  %224 = getelementptr float, ptr addrspace(1) %3, i64 %223, !dbg !32
  %225 = icmp eq i32 %urem, 0, !dbg !33
  %226 = and i1 %225, %17, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %222, ptr addrspace(1) %224, i1 %226) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cli562wlbrn6lsjj2ouxsybclw34ftoin7zrtx3xvhncwqnjr244.py", directory: "/tmp/torchinductor_zeus/li")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 33, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 21, scope: !5)
!11 = !DILocation(line: 31, column: 45, scope: !5)
!12 = !DILocation(line: 31, column: 40, scope: !5)
!13 = !DILocation(line: 31, column: 34, scope: !5)
!14 = !DILocation(line: 31, column: 51, scope: !5)
!15 = !DILocation(line: 32, column: 34, scope: !5)
!16 = !DILocation(line: 32, column: 111, scope: !5)
!17 = !DILocation(line: 33, column: 34, scope: !5)
!18 = !DILocation(line: 32, column: 51, scope: !5)
!19 = !DILocation(line: 33, column: 39, scope: !5)
!20 = !DILocation(line: 35, column: 22, scope: !5)
!21 = !DILocation(line: 36, column: 22, scope: !5)
!22 = !DILocation(line: 38, column: 23, scope: !5)
!23 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !5, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!26 = !DILocation(line: 40, column: 25, scope: !24)
!27 = !DILocation(line: 233, column: 15, scope: !28, inlinedAt: !29)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !30)
!30 = !DILocation(line: 40, column: 25, scope: !28)
!31 = !DILocation(line: 40, column: 28, scope: !5)
!32 = !DILocation(line: 41, column: 25, scope: !5)
!33 = !DILocation(line: 41, column: 36, scope: !5)
!34 = !DILocation(line: 41, column: 4, scope: !5)
