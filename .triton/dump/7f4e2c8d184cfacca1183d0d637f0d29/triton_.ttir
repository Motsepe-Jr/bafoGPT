module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c2304_i32 = arith.constant 2304 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16>
    %cst_0 = arith.constant dense<2304> : tensor<1x2048xi32>
    %cst_1 = arith.constant dense<2048> : tensor<1x2048xi32>
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c2304_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1x1xi1>
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32>
    %4 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %5 = arith.cmpi slt, %4, %cst_1 : tensor<1x2048xi32>
    %6 = arith.muli %4, %cst_0 : tensor<1x2048xi32>
    %7 = tt.splat %0 : (i32) -> tensor<1x2048xi32>
    %8 = arith.addi %7, %6 : tensor<1x2048xi32>
    %9 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %10 = tt.addptr %9, %8 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
    %11 = tt.splat %1 : (i1) -> tensor<1x2048xi1>
    %12 = arith.andi %5, %11 : tensor<1x2048xi1>
    %13 = tt.load %10, %12, %cst_2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
    %14 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1x2048x!tt.ptr<bf16, 1>>
    %15 = tt.addptr %14, %8 : tensor<1x2048x!tt.ptr<bf16, 1>>, tensor<1x2048xi32>
    %16 = tt.load %15, %12, %cst {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<1x2048xbf16>
    %17 = arith.extf %16 : tensor<1x2048xbf16> to tensor<1x2048xf32>
    %18 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x2048x!tt.ptr<f32, 1>>
    %19 = tt.addptr %18, %4 : tensor<1x2048x!tt.ptr<f32, 1>>, tensor<1x2048xi32>
    %20 = tt.load %19, %5, %cst_2 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x2048xf32>
    %21 = arith.mulf %17, %20 : tensor<1x2048xf32>
    %22 = arith.mulf %13, %21 : tensor<1x2048xf32>
    %23 = arith.addf %22, %cst_2 : tensor<1x2048xf32>
    %24 = arith.select %12, %23, %cst_2 : tensor<1x2048xi1>, tensor<1x2048xf32>
    %25 = "tt.reduce"(%24) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %29 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %29 : f32
    }) : (tensor<1x2048xf32>) -> tensor<1xf32>
    %26 = tt.expand_dims %25 {axis = 1 : i32} : (tensor<1xf32>) -> tensor<1x1xf32>
    %27 = tt.addptr %arg3, %0 : !tt.ptr<f32, 1>, i32
    %28 = tt.splat %27 : (!tt.ptr<f32, 1>) -> tensor<1x1x!tt.ptr<f32, 1>>
    tt.store %28, %26, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1x1xf32>
    tt.return
  }
}
