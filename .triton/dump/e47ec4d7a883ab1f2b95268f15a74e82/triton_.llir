; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5de6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 5, !dbg !10
  %urem = and i32 %8, 255, !dbg !10
  %10 = shl nuw nsw i32 %urem, 3, !dbg !10
  %11 = shl nuw nsw i32 %urem, 2, !dbg !10
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %13 = srem i32 %12, 8192, !dbg !12
  %14 = shl i32 %12, 13, !dbg !13
  %15 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !14
  %16 = shufflevector <2 x i32> %15, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !14
  %17 = insertelement <4 x i32> poison, i32 %13, i64 0, !dbg !14
  %18 = shufflevector <4 x i32> %17, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !14
  br label %19, !dbg !15

19:                                               ; preds = %7, %__nv_tanhf.exit176
  %20 = phi float [ 0xFFF0000000000000, %7 ], [ %387, %__nv_tanhf.exit176 ]
  %21 = phi float [ 0xFFF0000000000000, %7 ], [ %388, %__nv_tanhf.exit176 ]
  %22 = phi i32 [ 0, %7 ], [ %438, %__nv_tanhf.exit176 ]
  %23 = phi <2 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000>, %7 ], [ %386, %__nv_tanhf.exit176 ]
  %24 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, %7 ], [ %389, %__nv_tanhf.exit176 ]
  %25 = or i32 %22, %10, !dbg !16
  %26 = or i32 %25, 1, !dbg !16
  %27 = or i32 %25, 2, !dbg !16
  %28 = or i32 %25, 3, !dbg !16
  %29 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !16
  %30 = shufflevector <4 x i32> %29, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !16
  %31 = or <4 x i32> %30, <i32 7, i32 6, i32 5, i32 4>, !dbg !16
  %32 = add i32 %25, %14, !dbg !17
  %33 = sext i32 %32 to i64, !dbg !18
  %34 = getelementptr i16, ptr addrspace(1) %0, i64 %33, !dbg !18
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !19
  %40 = trunc i32 %36 to i16, !dbg !19
  %extelt.offset24 = lshr i32 %36, 16, !dbg !19
  %41 = trunc i32 %extelt.offset24 to i16, !dbg !19
  %42 = trunc i32 %37 to i16, !dbg !19
  %extelt.offset25 = lshr i32 %37, 16, !dbg !19
  %43 = trunc i32 %extelt.offset25 to i16, !dbg !19
  %44 = trunc i32 %38 to i16, !dbg !19
  %extelt.offset26 = lshr i32 %38, 16, !dbg !19
  %45 = trunc i32 %extelt.offset26 to i16, !dbg !19
  %46 = trunc i32 %39 to i16, !dbg !19
  %extelt.offset27 = lshr i32 %39, 16, !dbg !19
  %47 = trunc i32 %extelt.offset27 to i16, !dbg !19
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #6, !dbg !20
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #6, !dbg !20
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #6, !dbg !20
  %51 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #6, !dbg !20
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #6, !dbg !20
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #6, !dbg !20
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #6, !dbg !20
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #6, !dbg !20
  %56 = fmul float %48, 6.250000e-02, !dbg !21
  %57 = fmul float %49, 6.250000e-02, !dbg !21
  %58 = fmul float %50, 6.250000e-02, !dbg !21
  %59 = fmul float %51, 6.250000e-02, !dbg !21
  %60 = fmul float %52, 6.250000e-02, !dbg !21
  %61 = fmul float %53, 6.250000e-02, !dbg !21
  %62 = fmul float %54, 6.250000e-02, !dbg !21
  %63 = fmul float %55, 6.250000e-02, !dbg !21
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 5.000000e+01) #6, !dbg !22
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 5.000000e+01) #6, !dbg !22
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 5.000000e+01) #6, !dbg !22
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 5.000000e+01) #6, !dbg !22
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 5.000000e+01) #6, !dbg !22
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 5.000000e+01) #6, !dbg !22
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 5.000000e+01) #6, !dbg !22
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 5.000000e+01) #6, !dbg !22
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i = icmp eq i32 %72, 0, !dbg !23
  %73 = tail call float @llvm.nvvm.fabs.ftz.f(float %64) #6, !dbg !23
  %74 = tail call float @llvm.nvvm.fabs.f(float %64) #6, !dbg !23
  %.01.i = select i1 %.not.i, float %74, float %73, !dbg !23
  %75 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !23
  br i1 %75, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !23

__internal_fmad.exit1.i:                          ; preds = %19
  %76 = fmul float %.01.i, 0x4007154760000000, !dbg !23
  %77 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %76) #6, !dbg !23
  %78 = fadd float %77, 1.000000e+00, !dbg !23
  %79 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %78) #7, !dbg !23, !srcloc !24
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i = icmp eq i32 %80, 0, !dbg !23
  %81 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %79, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %82 = tail call float @llvm.nvvm.fma.rn.f(float %79, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i = select i1 %.not6.i, float %82, float %81, !dbg !23
  %83 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !23
  %s.0.i = select i1 %83, float 1.000000e+00, float %.03.i, !dbg !23
  %84 = bitcast float %s.0.i to i32, !dbg !23
  %85 = bitcast float %64 to i32, !dbg !23
  %86 = and i32 %85, -2147483648, !dbg !23
  %87 = or i32 %86, %84, !dbg !23
  %88 = bitcast i32 %87 to float, !dbg !23
  br label %__nv_tanhf.exit, !dbg !23

__internal_fmad.exit3.i:                          ; preds = %19
  %89 = fmul float %64, %64, !dbg !23
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i = icmp eq i32 %90, 0, !dbg !23
  %91 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %89, float 0xBFAAC795C0000000) #6, !dbg !23
  %92 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %89, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i = select i1 %.not1.i, float %92, float %91, !dbg !23
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i = icmp eq i32 %93, 0, !dbg !23
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %89, float 0x3FC10B2820000000) #6, !dbg !23
  %95 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %89, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i = select i1 %.not2.i, float %95, float %94, !dbg !23
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i = icmp eq i32 %96, 0, !dbg !23
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %89, float 0xBFD5553DA0000000) #6, !dbg !23
  %98 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %89, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i = select i1 %.not3.i, float %98, float %97, !dbg !23
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i = icmp eq i32 %99, 0, !dbg !23
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %89, float 0.000000e+00) #6, !dbg !23
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %89, float 0.000000e+00) #6, !dbg !23
  %.04.i = select i1 %.not4.i, float %101, float %100, !dbg !23
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i = icmp eq i32 %102, 0, !dbg !23
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %64, float %64) #6, !dbg !23
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %64, float %64) #6, !dbg !23
  %.02.i = select i1 %.not5.i, float %104, float %103, !dbg !23
  br label %__nv_tanhf.exit, !dbg !23

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %88, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !23
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i44 = icmp eq i32 %105, 0, !dbg !23
  %106 = tail call float @llvm.nvvm.fabs.ftz.f(float %65) #6, !dbg !23
  %107 = tail call float @llvm.nvvm.fabs.f(float %65) #6, !dbg !23
  %.01.i45 = select i1 %.not.i44, float %107, float %106, !dbg !23
  %108 = fcmp ult float %.01.i45, 0x3FE3333340000000, !dbg !23
  br i1 %108, label %__internal_fmad.exit3.i51, label %__internal_fmad.exit1.i46, !dbg !23

__internal_fmad.exit1.i46:                        ; preds = %__nv_tanhf.exit
  %109 = fmul float %.01.i45, 0x4007154760000000, !dbg !23
  %110 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %109) #6, !dbg !23
  %111 = fadd float %110, 1.000000e+00, !dbg !23
  %112 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %111) #7, !dbg !23, !srcloc !24
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i47 = icmp eq i32 %113, 0, !dbg !23
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %112, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %112, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i48 = select i1 %.not6.i47, float %115, float %114, !dbg !23
  %116 = fcmp oge float %.01.i45, 0x4022059680000000, !dbg !23
  %s.0.i49 = select i1 %116, float 1.000000e+00, float %.03.i48, !dbg !23
  %117 = bitcast float %s.0.i49 to i32, !dbg !23
  %118 = bitcast float %65 to i32, !dbg !23
  %119 = and i32 %118, -2147483648, !dbg !23
  %120 = or i32 %119, %117, !dbg !23
  %121 = bitcast i32 %120 to float, !dbg !23
  br label %__nv_tanhf.exit62, !dbg !23

__internal_fmad.exit3.i51:                        ; preds = %__nv_tanhf.exit
  %122 = fmul float %65, %65, !dbg !23
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i52 = icmp eq i32 %123, 0, !dbg !23
  %124 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %122, float 0xBFAAC795C0000000) #6, !dbg !23
  %125 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %122, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i53 = select i1 %.not1.i52, float %125, float %124, !dbg !23
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i54 = icmp eq i32 %126, 0, !dbg !23
  %127 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i53, float %122, float 0x3FC10B2820000000) #6, !dbg !23
  %128 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i53, float %122, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i55 = select i1 %.not2.i54, float %128, float %127, !dbg !23
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i56 = icmp eq i32 %129, 0, !dbg !23
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i55, float %122, float 0xBFD5553DA0000000) #6, !dbg !23
  %131 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i55, float %122, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i57 = select i1 %.not3.i56, float %131, float %130, !dbg !23
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i58 = icmp eq i32 %132, 0, !dbg !23
  %133 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i57, float %122, float 0.000000e+00) #6, !dbg !23
  %134 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i57, float %122, float 0.000000e+00) #6, !dbg !23
  %.04.i59 = select i1 %.not4.i58, float %134, float %133, !dbg !23
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i60 = icmp eq i32 %135, 0, !dbg !23
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i59, float %65, float %65) #6, !dbg !23
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i59, float %65, float %65) #6, !dbg !23
  %.02.i61 = select i1 %.not5.i60, float %137, float %136, !dbg !23
  br label %__nv_tanhf.exit62, !dbg !23

__nv_tanhf.exit62:                                ; preds = %__internal_fmad.exit1.i46, %__internal_fmad.exit3.i51
  %s.1.i50 = phi float [ %121, %__internal_fmad.exit1.i46 ], [ %.02.i61, %__internal_fmad.exit3.i51 ], !dbg !23
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i63 = icmp eq i32 %138, 0, !dbg !23
  %139 = tail call float @llvm.nvvm.fabs.ftz.f(float %66) #6, !dbg !23
  %140 = tail call float @llvm.nvvm.fabs.f(float %66) #6, !dbg !23
  %.01.i64 = select i1 %.not.i63, float %140, float %139, !dbg !23
  %141 = fcmp ult float %.01.i64, 0x3FE3333340000000, !dbg !23
  br i1 %141, label %__internal_fmad.exit3.i70, label %__internal_fmad.exit1.i65, !dbg !23

__internal_fmad.exit1.i65:                        ; preds = %__nv_tanhf.exit62
  %142 = fmul float %.01.i64, 0x4007154760000000, !dbg !23
  %143 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %142) #6, !dbg !23
  %144 = fadd float %143, 1.000000e+00, !dbg !23
  %145 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %144) #7, !dbg !23, !srcloc !24
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i66 = icmp eq i32 %146, 0, !dbg !23
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %145, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %148 = tail call float @llvm.nvvm.fma.rn.f(float %145, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i67 = select i1 %.not6.i66, float %148, float %147, !dbg !23
  %149 = fcmp oge float %.01.i64, 0x4022059680000000, !dbg !23
  %s.0.i68 = select i1 %149, float 1.000000e+00, float %.03.i67, !dbg !23
  %150 = bitcast float %s.0.i68 to i32, !dbg !23
  %151 = bitcast float %66 to i32, !dbg !23
  %152 = and i32 %151, -2147483648, !dbg !23
  %153 = or i32 %152, %150, !dbg !23
  %154 = bitcast i32 %153 to float, !dbg !23
  br label %__nv_tanhf.exit81, !dbg !23

__internal_fmad.exit3.i70:                        ; preds = %__nv_tanhf.exit62
  %155 = fmul float %66, %66, !dbg !23
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i71 = icmp eq i32 %156, 0, !dbg !23
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %155, float 0xBFAAC795C0000000) #6, !dbg !23
  %158 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %155, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i72 = select i1 %.not1.i71, float %158, float %157, !dbg !23
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i73 = icmp eq i32 %159, 0, !dbg !23
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i72, float %155, float 0x3FC10B2820000000) #6, !dbg !23
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i72, float %155, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i74 = select i1 %.not2.i73, float %161, float %160, !dbg !23
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i75 = icmp eq i32 %162, 0, !dbg !23
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i74, float %155, float 0xBFD5553DA0000000) #6, !dbg !23
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i74, float %155, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i76 = select i1 %.not3.i75, float %164, float %163, !dbg !23
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i77 = icmp eq i32 %165, 0, !dbg !23
  %166 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i76, float %155, float 0.000000e+00) #6, !dbg !23
  %167 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i76, float %155, float 0.000000e+00) #6, !dbg !23
  %.04.i78 = select i1 %.not4.i77, float %167, float %166, !dbg !23
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i79 = icmp eq i32 %168, 0, !dbg !23
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i78, float %66, float %66) #6, !dbg !23
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i78, float %66, float %66) #6, !dbg !23
  %.02.i80 = select i1 %.not5.i79, float %170, float %169, !dbg !23
  br label %__nv_tanhf.exit81, !dbg !23

__nv_tanhf.exit81:                                ; preds = %__internal_fmad.exit1.i65, %__internal_fmad.exit3.i70
  %s.1.i69 = phi float [ %154, %__internal_fmad.exit1.i65 ], [ %.02.i80, %__internal_fmad.exit3.i70 ], !dbg !23
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i82 = icmp eq i32 %171, 0, !dbg !23
  %172 = tail call float @llvm.nvvm.fabs.ftz.f(float %67) #6, !dbg !23
  %173 = tail call float @llvm.nvvm.fabs.f(float %67) #6, !dbg !23
  %.01.i83 = select i1 %.not.i82, float %173, float %172, !dbg !23
  %174 = fcmp ult float %.01.i83, 0x3FE3333340000000, !dbg !23
  br i1 %174, label %__internal_fmad.exit3.i89, label %__internal_fmad.exit1.i84, !dbg !23

__internal_fmad.exit1.i84:                        ; preds = %__nv_tanhf.exit81
  %175 = fmul float %.01.i83, 0x4007154760000000, !dbg !23
  %176 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %175) #6, !dbg !23
  %177 = fadd float %176, 1.000000e+00, !dbg !23
  %178 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %177) #7, !dbg !23, !srcloc !24
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i85 = icmp eq i32 %179, 0, !dbg !23
  %180 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %178, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %181 = tail call float @llvm.nvvm.fma.rn.f(float %178, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i86 = select i1 %.not6.i85, float %181, float %180, !dbg !23
  %182 = fcmp oge float %.01.i83, 0x4022059680000000, !dbg !23
  %s.0.i87 = select i1 %182, float 1.000000e+00, float %.03.i86, !dbg !23
  %183 = bitcast float %s.0.i87 to i32, !dbg !23
  %184 = bitcast float %67 to i32, !dbg !23
  %185 = and i32 %184, -2147483648, !dbg !23
  %186 = or i32 %185, %183, !dbg !23
  %187 = bitcast i32 %186 to float, !dbg !23
  br label %__nv_tanhf.exit100, !dbg !23

__internal_fmad.exit3.i89:                        ; preds = %__nv_tanhf.exit81
  %188 = fmul float %67, %67, !dbg !23
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i90 = icmp eq i32 %189, 0, !dbg !23
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %188, float 0xBFAAC795C0000000) #6, !dbg !23
  %191 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %188, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i91 = select i1 %.not1.i90, float %191, float %190, !dbg !23
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i92 = icmp eq i32 %192, 0, !dbg !23
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i91, float %188, float 0x3FC10B2820000000) #6, !dbg !23
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i91, float %188, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i93 = select i1 %.not2.i92, float %194, float %193, !dbg !23
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i94 = icmp eq i32 %195, 0, !dbg !23
  %196 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i93, float %188, float 0xBFD5553DA0000000) #6, !dbg !23
  %197 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i93, float %188, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i95 = select i1 %.not3.i94, float %197, float %196, !dbg !23
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i96 = icmp eq i32 %198, 0, !dbg !23
  %199 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i95, float %188, float 0.000000e+00) #6, !dbg !23
  %200 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i95, float %188, float 0.000000e+00) #6, !dbg !23
  %.04.i97 = select i1 %.not4.i96, float %200, float %199, !dbg !23
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i98 = icmp eq i32 %201, 0, !dbg !23
  %202 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i97, float %67, float %67) #6, !dbg !23
  %203 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i97, float %67, float %67) #6, !dbg !23
  %.02.i99 = select i1 %.not5.i98, float %203, float %202, !dbg !23
  br label %__nv_tanhf.exit100, !dbg !23

__nv_tanhf.exit100:                               ; preds = %__internal_fmad.exit1.i84, %__internal_fmad.exit3.i89
  %s.1.i88 = phi float [ %187, %__internal_fmad.exit1.i84 ], [ %.02.i99, %__internal_fmad.exit3.i89 ], !dbg !23
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i101 = icmp eq i32 %204, 0, !dbg !23
  %205 = tail call float @llvm.nvvm.fabs.ftz.f(float %68) #6, !dbg !23
  %206 = tail call float @llvm.nvvm.fabs.f(float %68) #6, !dbg !23
  %.01.i102 = select i1 %.not.i101, float %206, float %205, !dbg !23
  %207 = fcmp ult float %.01.i102, 0x3FE3333340000000, !dbg !23
  br i1 %207, label %__internal_fmad.exit3.i108, label %__internal_fmad.exit1.i103, !dbg !23

__internal_fmad.exit1.i103:                       ; preds = %__nv_tanhf.exit100
  %208 = fmul float %.01.i102, 0x4007154760000000, !dbg !23
  %209 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %208) #6, !dbg !23
  %210 = fadd float %209, 1.000000e+00, !dbg !23
  %211 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %210) #7, !dbg !23, !srcloc !24
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i104 = icmp eq i32 %212, 0, !dbg !23
  %213 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %211, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %214 = tail call float @llvm.nvvm.fma.rn.f(float %211, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i105 = select i1 %.not6.i104, float %214, float %213, !dbg !23
  %215 = fcmp oge float %.01.i102, 0x4022059680000000, !dbg !23
  %s.0.i106 = select i1 %215, float 1.000000e+00, float %.03.i105, !dbg !23
  %216 = bitcast float %s.0.i106 to i32, !dbg !23
  %217 = bitcast float %68 to i32, !dbg !23
  %218 = and i32 %217, -2147483648, !dbg !23
  %219 = or i32 %218, %216, !dbg !23
  %220 = bitcast i32 %219 to float, !dbg !23
  br label %__nv_tanhf.exit119, !dbg !23

__internal_fmad.exit3.i108:                       ; preds = %__nv_tanhf.exit100
  %221 = fmul float %68, %68, !dbg !23
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i109 = icmp eq i32 %222, 0, !dbg !23
  %223 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %221, float 0xBFAAC795C0000000) #6, !dbg !23
  %224 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %221, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i110 = select i1 %.not1.i109, float %224, float %223, !dbg !23
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i111 = icmp eq i32 %225, 0, !dbg !23
  %226 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i110, float %221, float 0x3FC10B2820000000) #6, !dbg !23
  %227 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i110, float %221, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i112 = select i1 %.not2.i111, float %227, float %226, !dbg !23
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i113 = icmp eq i32 %228, 0, !dbg !23
  %229 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i112, float %221, float 0xBFD5553DA0000000) #6, !dbg !23
  %230 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i112, float %221, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i114 = select i1 %.not3.i113, float %230, float %229, !dbg !23
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i115 = icmp eq i32 %231, 0, !dbg !23
  %232 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i114, float %221, float 0.000000e+00) #6, !dbg !23
  %233 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i114, float %221, float 0.000000e+00) #6, !dbg !23
  %.04.i116 = select i1 %.not4.i115, float %233, float %232, !dbg !23
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i117 = icmp eq i32 %234, 0, !dbg !23
  %235 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i116, float %68, float %68) #6, !dbg !23
  %236 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i116, float %68, float %68) #6, !dbg !23
  %.02.i118 = select i1 %.not5.i117, float %236, float %235, !dbg !23
  br label %__nv_tanhf.exit119, !dbg !23

__nv_tanhf.exit119:                               ; preds = %__internal_fmad.exit1.i103, %__internal_fmad.exit3.i108
  %s.1.i107 = phi float [ %220, %__internal_fmad.exit1.i103 ], [ %.02.i118, %__internal_fmad.exit3.i108 ], !dbg !23
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i120 = icmp eq i32 %237, 0, !dbg !23
  %238 = tail call float @llvm.nvvm.fabs.ftz.f(float %69) #6, !dbg !23
  %239 = tail call float @llvm.nvvm.fabs.f(float %69) #6, !dbg !23
  %.01.i121 = select i1 %.not.i120, float %239, float %238, !dbg !23
  %240 = fcmp ult float %.01.i121, 0x3FE3333340000000, !dbg !23
  br i1 %240, label %__internal_fmad.exit3.i127, label %__internal_fmad.exit1.i122, !dbg !23

__internal_fmad.exit1.i122:                       ; preds = %__nv_tanhf.exit119
  %241 = fmul float %.01.i121, 0x4007154760000000, !dbg !23
  %242 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %241) #6, !dbg !23
  %243 = fadd float %242, 1.000000e+00, !dbg !23
  %244 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %243) #7, !dbg !23, !srcloc !24
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i123 = icmp eq i32 %245, 0, !dbg !23
  %246 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %244, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %247 = tail call float @llvm.nvvm.fma.rn.f(float %244, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i124 = select i1 %.not6.i123, float %247, float %246, !dbg !23
  %248 = fcmp oge float %.01.i121, 0x4022059680000000, !dbg !23
  %s.0.i125 = select i1 %248, float 1.000000e+00, float %.03.i124, !dbg !23
  %249 = bitcast float %s.0.i125 to i32, !dbg !23
  %250 = bitcast float %69 to i32, !dbg !23
  %251 = and i32 %250, -2147483648, !dbg !23
  %252 = or i32 %251, %249, !dbg !23
  %253 = bitcast i32 %252 to float, !dbg !23
  br label %__nv_tanhf.exit138, !dbg !23

__internal_fmad.exit3.i127:                       ; preds = %__nv_tanhf.exit119
  %254 = fmul float %69, %69, !dbg !23
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i128 = icmp eq i32 %255, 0, !dbg !23
  %256 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %254, float 0xBFAAC795C0000000) #6, !dbg !23
  %257 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %254, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i129 = select i1 %.not1.i128, float %257, float %256, !dbg !23
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i130 = icmp eq i32 %258, 0, !dbg !23
  %259 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i129, float %254, float 0x3FC10B2820000000) #6, !dbg !23
  %260 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i129, float %254, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i131 = select i1 %.not2.i130, float %260, float %259, !dbg !23
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i132 = icmp eq i32 %261, 0, !dbg !23
  %262 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i131, float %254, float 0xBFD5553DA0000000) #6, !dbg !23
  %263 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i131, float %254, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i133 = select i1 %.not3.i132, float %263, float %262, !dbg !23
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i134 = icmp eq i32 %264, 0, !dbg !23
  %265 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i133, float %254, float 0.000000e+00) #6, !dbg !23
  %266 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i133, float %254, float 0.000000e+00) #6, !dbg !23
  %.04.i135 = select i1 %.not4.i134, float %266, float %265, !dbg !23
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i136 = icmp eq i32 %267, 0, !dbg !23
  %268 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i135, float %69, float %69) #6, !dbg !23
  %269 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i135, float %69, float %69) #6, !dbg !23
  %.02.i137 = select i1 %.not5.i136, float %269, float %268, !dbg !23
  br label %__nv_tanhf.exit138, !dbg !23

__nv_tanhf.exit138:                               ; preds = %__internal_fmad.exit1.i122, %__internal_fmad.exit3.i127
  %s.1.i126 = phi float [ %253, %__internal_fmad.exit1.i122 ], [ %.02.i137, %__internal_fmad.exit3.i127 ], !dbg !23
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i139 = icmp eq i32 %270, 0, !dbg !23
  %271 = tail call float @llvm.nvvm.fabs.ftz.f(float %70) #6, !dbg !23
  %272 = tail call float @llvm.nvvm.fabs.f(float %70) #6, !dbg !23
  %.01.i140 = select i1 %.not.i139, float %272, float %271, !dbg !23
  %273 = fcmp ult float %.01.i140, 0x3FE3333340000000, !dbg !23
  br i1 %273, label %__internal_fmad.exit3.i146, label %__internal_fmad.exit1.i141, !dbg !23

__internal_fmad.exit1.i141:                       ; preds = %__nv_tanhf.exit138
  %274 = fmul float %.01.i140, 0x4007154760000000, !dbg !23
  %275 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %274) #6, !dbg !23
  %276 = fadd float %275, 1.000000e+00, !dbg !23
  %277 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %276) #7, !dbg !23, !srcloc !24
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i142 = icmp eq i32 %278, 0, !dbg !23
  %279 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %277, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %280 = tail call float @llvm.nvvm.fma.rn.f(float %277, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i143 = select i1 %.not6.i142, float %280, float %279, !dbg !23
  %281 = fcmp oge float %.01.i140, 0x4022059680000000, !dbg !23
  %s.0.i144 = select i1 %281, float 1.000000e+00, float %.03.i143, !dbg !23
  %282 = bitcast float %s.0.i144 to i32, !dbg !23
  %283 = bitcast float %70 to i32, !dbg !23
  %284 = and i32 %283, -2147483648, !dbg !23
  %285 = or i32 %284, %282, !dbg !23
  %286 = bitcast i32 %285 to float, !dbg !23
  br label %__nv_tanhf.exit157, !dbg !23

__internal_fmad.exit3.i146:                       ; preds = %__nv_tanhf.exit138
  %287 = fmul float %70, %70, !dbg !23
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i147 = icmp eq i32 %288, 0, !dbg !23
  %289 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %287, float 0xBFAAC795C0000000) #6, !dbg !23
  %290 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %287, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i148 = select i1 %.not1.i147, float %290, float %289, !dbg !23
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i149 = icmp eq i32 %291, 0, !dbg !23
  %292 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i148, float %287, float 0x3FC10B2820000000) #6, !dbg !23
  %293 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i148, float %287, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i150 = select i1 %.not2.i149, float %293, float %292, !dbg !23
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i151 = icmp eq i32 %294, 0, !dbg !23
  %295 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i150, float %287, float 0xBFD5553DA0000000) #6, !dbg !23
  %296 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i150, float %287, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i152 = select i1 %.not3.i151, float %296, float %295, !dbg !23
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i153 = icmp eq i32 %297, 0, !dbg !23
  %298 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i152, float %287, float 0.000000e+00) #6, !dbg !23
  %299 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i152, float %287, float 0.000000e+00) #6, !dbg !23
  %.04.i154 = select i1 %.not4.i153, float %299, float %298, !dbg !23
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i155 = icmp eq i32 %300, 0, !dbg !23
  %301 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i154, float %70, float %70) #6, !dbg !23
  %302 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i154, float %70, float %70) #6, !dbg !23
  %.02.i156 = select i1 %.not5.i155, float %302, float %301, !dbg !23
  br label %__nv_tanhf.exit157, !dbg !23

__nv_tanhf.exit157:                               ; preds = %__internal_fmad.exit1.i141, %__internal_fmad.exit3.i146
  %s.1.i145 = phi float [ %286, %__internal_fmad.exit1.i141 ], [ %.02.i156, %__internal_fmad.exit3.i146 ], !dbg !23
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not.i158 = icmp eq i32 %303, 0, !dbg !23
  %304 = tail call float @llvm.nvvm.fabs.ftz.f(float %71) #6, !dbg !23
  %305 = tail call float @llvm.nvvm.fabs.f(float %71) #6, !dbg !23
  %.01.i159 = select i1 %.not.i158, float %305, float %304, !dbg !23
  %306 = fcmp ult float %.01.i159, 0x3FE3333340000000, !dbg !23
  br i1 %306, label %__internal_fmad.exit3.i165, label %__internal_fmad.exit1.i160, !dbg !23

__internal_fmad.exit1.i160:                       ; preds = %__nv_tanhf.exit157
  %307 = fmul float %.01.i159, 0x4007154760000000, !dbg !23
  %308 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %307) #6, !dbg !23
  %309 = fadd float %308, 1.000000e+00, !dbg !23
  %310 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %309) #7, !dbg !23, !srcloc !24
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not6.i161 = icmp eq i32 %311, 0, !dbg !23
  %312 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %310, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %313 = tail call float @llvm.nvvm.fma.rn.f(float %310, float -2.000000e+00, float 1.000000e+00) #6, !dbg !23
  %.03.i162 = select i1 %.not6.i161, float %313, float %312, !dbg !23
  %314 = fcmp oge float %.01.i159, 0x4022059680000000, !dbg !23
  %s.0.i163 = select i1 %314, float 1.000000e+00, float %.03.i162, !dbg !23
  %315 = bitcast float %s.0.i163 to i32, !dbg !23
  %316 = bitcast float %71 to i32, !dbg !23
  %317 = and i32 %316, -2147483648, !dbg !23
  %318 = or i32 %317, %315, !dbg !23
  %319 = bitcast i32 %318 to float, !dbg !23
  br label %__nv_tanhf.exit176, !dbg !23

__internal_fmad.exit3.i165:                       ; preds = %__nv_tanhf.exit157
  %320 = fmul float %71, %71, !dbg !23
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not1.i166 = icmp eq i32 %321, 0, !dbg !23
  %322 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %320, float 0xBFAAC795C0000000) #6, !dbg !23
  %323 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %320, float 0xBFAAC795C0000000) #6, !dbg !23
  %.06.i167 = select i1 %.not1.i166, float %323, float %322, !dbg !23
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not2.i168 = icmp eq i32 %324, 0, !dbg !23
  %325 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i167, float %320, float 0x3FC10B2820000000) #6, !dbg !23
  %326 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i167, float %320, float 0x3FC10B2820000000) #6, !dbg !23
  %.05.i169 = select i1 %.not2.i168, float %326, float %325, !dbg !23
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not3.i170 = icmp eq i32 %327, 0, !dbg !23
  %328 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i169, float %320, float 0xBFD5553DA0000000) #6, !dbg !23
  %329 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i169, float %320, float 0xBFD5553DA0000000) #6, !dbg !23
  %.0.i171 = select i1 %.not3.i170, float %329, float %328, !dbg !23
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not4.i172 = icmp eq i32 %330, 0, !dbg !23
  %331 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i171, float %320, float 0.000000e+00) #6, !dbg !23
  %332 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i171, float %320, float 0.000000e+00) #6, !dbg !23
  %.04.i173 = select i1 %.not4.i172, float %332, float %331, !dbg !23
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !23
  %.not5.i174 = icmp eq i32 %333, 0, !dbg !23
  %334 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i173, float %71, float %71) #6, !dbg !23
  %335 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i173, float %71, float %71) #6, !dbg !23
  %.02.i175 = select i1 %.not5.i174, float %335, float %334, !dbg !23
  br label %__nv_tanhf.exit176, !dbg !23

__nv_tanhf.exit176:                               ; preds = %__internal_fmad.exit1.i160, %__internal_fmad.exit3.i165
  %s.1.i164 = phi float [ %319, %__internal_fmad.exit1.i160 ], [ %.02.i175, %__internal_fmad.exit3.i165 ], !dbg !23
  %336 = insertelement <2 x float> poison, float %s.1.i50, i64 0, !dbg !25
  %337 = insertelement <2 x float> %336, float %s.1.i, i64 1, !dbg !25
  %338 = fmul <2 x float> %337, <float 5.000000e+01, float 5.000000e+01>, !dbg !25
  %339 = fmul float %s.1.i69, 5.000000e+01, !dbg !25
  %340 = fmul float %s.1.i88, 5.000000e+01, !dbg !25
  %341 = insertelement <4 x float> poison, float %s.1.i164, i64 0, !dbg !25
  %342 = insertelement <4 x float> %341, float %s.1.i145, i64 1, !dbg !25
  %343 = insertelement <4 x float> %342, float %s.1.i126, i64 2, !dbg !25
  %344 = insertelement <4 x float> %343, float %s.1.i107, i64 3, !dbg !25
  %345 = fmul <4 x float> %344, <float 5.000000e+01, float 5.000000e+01, float 5.000000e+01, float 5.000000e+01>, !dbg !25
  %346 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !14
  %347 = insertelement <2 x i32> %346, i32 %25, i64 1, !dbg !14
  %348 = sub <2 x i32> %347, %16, !dbg !14
  %349 = sub i32 %27, %13, !dbg !14
  %350 = sub i32 %28, %13, !dbg !14
  %351 = sub <4 x i32> %31, %18, !dbg !14
  %352 = icmp sgt i32 %349, 0, !dbg !26
  %353 = icmp sgt i32 %350, 0, !dbg !26
  %354 = select i1 %352, float 0xFFF0000000000000, float 0.000000e+00, !dbg !27
  %355 = select i1 %353, float 0xFFF0000000000000, float 0.000000e+00, !dbg !27
  %356 = icmp slt i32 %349, -4095, !dbg !28
  %357 = icmp slt i32 %350, -4095, !dbg !28
  %358 = select i1 %356, float 0xFFF0000000000000, float 0.000000e+00, !dbg !29
  %359 = select i1 %357, float 0xFFF0000000000000, float 0.000000e+00, !dbg !29
  %360 = fadd float %354, %358, !dbg !30
  %361 = fadd float %355, %359, !dbg !30
  %362 = fadd float %360, %339, !dbg !31
  %363 = fadd float %361, %340, !dbg !31
  %364 = fcmp ule float %20, %362, !dbg !32
  %365 = fcmp ule float %21, %363, !dbg !32
  %366 = fcmp ord <2 x float> %23, zeroinitializer, !dbg !36
  %367 = fcmp ord float %20, 0.000000e+00, !dbg !36
  %368 = fcmp ord float %21, 0.000000e+00, !dbg !36
  %369 = fcmp ord <4 x float> %24, zeroinitializer, !dbg !36
  %370 = icmp sgt <2 x i32> %348, zeroinitializer, !dbg !26
  %371 = select <2 x i1> %370, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, <2 x float> zeroinitializer, !dbg !27
  %372 = icmp slt <2 x i32> %348, <i32 -4095, i32 -4095>, !dbg !28
  %373 = select <2 x i1> %372, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, <2 x float> zeroinitializer, !dbg !29
  %374 = fadd <2 x float> %371, %373, !dbg !30
  %375 = fadd <2 x float> %374, %338, !dbg !31
  %376 = fcmp ule <2 x float> %23, %375, !dbg !32
  %377 = and <2 x i1> %366, %376, !dbg !37
  %.not33 = and i1 %367, %364, !dbg !37
  %.not35 = and i1 %368, %365, !dbg !37
  %378 = icmp sgt <4 x i32> %351, zeroinitializer, !dbg !26
  %379 = select <4 x i1> %378, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> zeroinitializer, !dbg !27
  %380 = icmp slt <4 x i32> %351, <i32 -4095, i32 -4095, i32 -4095, i32 -4095>, !dbg !28
  %381 = select <4 x i1> %380, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> zeroinitializer, !dbg !29
  %382 = fadd <4 x float> %379, %381, !dbg !30
  %383 = fadd <4 x float> %382, %345, !dbg !31
  %384 = fcmp ule <4 x float> %24, %383, !dbg !32
  %385 = and <4 x i1> %369, %384, !dbg !38
  %386 = select <2 x i1> %377, <2 x float> %375, <2 x float> %23, !dbg !38
  %387 = select i1 %.not33, float %362, float %20, !dbg !38
  %388 = select i1 %.not35, float %363, float %21, !dbg !38
  %389 = select <4 x i1> %385, <4 x float> %383, <4 x float> %24, !dbg !38
  %390 = getelementptr i16, ptr addrspace(1) %1, i64 %33, !dbg !39
  %391 = extractelement <2 x float> %375, i64 1, !dbg !40
  %392 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %391) #6, !dbg !40
  %393 = extractelement <2 x float> %375, i64 0, !dbg !40
  %394 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %393) #6, !dbg !40
  %395 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %362) #6, !dbg !40
  %396 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %363) #6, !dbg !40
  %397 = extractelement <4 x float> %383, i64 3, !dbg !40
  %398 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %397) #6, !dbg !40
  %399 = extractelement <4 x float> %383, i64 2, !dbg !40
  %400 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %399) #6, !dbg !40
  %401 = extractelement <4 x float> %383, i64 1, !dbg !40
  %402 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %401) #6, !dbg !40
  %403 = extractelement <4 x float> %383, i64 0, !dbg !40
  %404 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %403) #6, !dbg !40
  %405 = insertelement <2 x i16> undef, i16 %392, i64 0, !dbg !40
  %406 = insertelement <2 x i16> %405, i16 %394, i64 1, !dbg !40
  %407 = bitcast <2 x i16> %406 to i32, !dbg !40
  %408 = insertelement <2 x i16> undef, i16 %395, i64 0, !dbg !40
  %409 = insertelement <2 x i16> %408, i16 %396, i64 1, !dbg !40
  %410 = bitcast <2 x i16> %409 to i32, !dbg !40
  %411 = insertelement <2 x i16> undef, i16 %398, i64 0, !dbg !40
  %412 = insertelement <2 x i16> %411, i16 %400, i64 1, !dbg !40
  %413 = bitcast <2 x i16> %412 to i32, !dbg !40
  %414 = insertelement <2 x i16> undef, i16 %402, i64 0, !dbg !40
  %415 = insertelement <2 x i16> %414, i16 %404, i64 1, !dbg !40
  %416 = bitcast <2 x i16> %415 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %407, i32 %410, i32 %413, i32 %416, ptr addrspace(1) %390, i1 true) #6, !dbg !40
  %417 = getelementptr i16, ptr addrspace(1) %2, i64 %33, !dbg !41
  %418 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %s.1.i) #6, !dbg !42
  %419 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %s.1.i50) #6, !dbg !42
  %420 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %s.1.i69) #6, !dbg !42
  %421 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %s.1.i88) #6, !dbg !42
  %422 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %s.1.i107) #6, !dbg !42
  %423 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %s.1.i126) #6, !dbg !42
  %424 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %s.1.i145) #6, !dbg !42
  %425 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %s.1.i164) #6, !dbg !42
  %426 = insertelement <2 x i16> undef, i16 %418, i64 0, !dbg !42
  %427 = insertelement <2 x i16> %426, i16 %419, i64 1, !dbg !42
  %428 = bitcast <2 x i16> %427 to i32, !dbg !42
  %429 = insertelement <2 x i16> undef, i16 %420, i64 0, !dbg !42
  %430 = insertelement <2 x i16> %429, i16 %421, i64 1, !dbg !42
  %431 = bitcast <2 x i16> %430 to i32, !dbg !42
  %432 = insertelement <2 x i16> undef, i16 %422, i64 0, !dbg !42
  %433 = insertelement <2 x i16> %432, i16 %423, i64 1, !dbg !42
  %434 = bitcast <2 x i16> %433 to i32, !dbg !42
  %435 = insertelement <2 x i16> undef, i16 %424, i64 0, !dbg !42
  %436 = insertelement <2 x i16> %435, i16 %425, i64 1, !dbg !42
  %437 = bitcast <2 x i16> %436 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %428, i32 %431, i32 %434, i32 %437, ptr addrspace(1) %417, i1 true) #6, !dbg !42
  %438 = add nuw nsw i32 %22, 2048, !dbg !15
  %439 = icmp ult i32 %22, 6144, !dbg !15
  br i1 %439, label %19, label %440, !dbg !15

440:                                              ; preds = %__nv_tanhf.exit176
  %441 = and i32 %8, 31, !dbg !10
  %442 = and i32 %9, 7, !dbg !10
  %443 = shufflevector <2 x float> %386, <2 x float> <float poison, float 0.000000e+00>, <2 x i32> <i32 1, i32 3>, !dbg !43
  %444 = fcmp ogt <2 x float> %443, %386, !dbg !43
  %445 = fcmp uno <2 x float> %443, %386, !dbg !43
  %shift = shufflevector <2 x i1> %445, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !47
  %446 = or <2 x i1> %444, %shift, !dbg !47
  %447 = extractelement <2 x i1> %446, i64 0, !dbg !47
  %448 = extractelement <2 x float> %386, i64 0, !dbg !48
  %449 = extractelement <2 x float> %386, i64 1, !dbg !48
  %450 = select i1 %447, float %449, float %448, !dbg !48
  %451 = fcmp ogt float %450, %387, !dbg !43
  %452 = fcmp uno float %450, 0.000000e+00, !dbg !49
  %453 = or i1 %451, %452, !dbg !47
  %454 = select i1 %453, float %450, float %387, !dbg !48
  %455 = fcmp ogt float %454, %388, !dbg !43
  %456 = fcmp uno float %454, 0.000000e+00, !dbg !49
  %457 = or i1 %455, %456, !dbg !47
  %458 = select i1 %457, float %454, float %388, !dbg !48
  %459 = extractelement <4 x float> %389, i64 3, !dbg !43
  %460 = fcmp ogt float %458, %459, !dbg !43
  %461 = fcmp uno float %458, 0.000000e+00, !dbg !49
  %462 = or i1 %460, %461, !dbg !47
  %463 = select i1 %462, float %458, float %459, !dbg !48
  %464 = extractelement <4 x float> %389, i64 2, !dbg !43
  %465 = fcmp ogt float %463, %464, !dbg !43
  %466 = fcmp uno float %463, 0.000000e+00, !dbg !49
  %467 = or i1 %465, %466, !dbg !47
  %468 = select i1 %467, float %463, float %464, !dbg !48
  %469 = extractelement <4 x float> %389, i64 1, !dbg !43
  %470 = fcmp ogt float %468, %469, !dbg !43
  %471 = fcmp uno float %468, 0.000000e+00, !dbg !49
  %472 = or i1 %470, %471, !dbg !47
  %473 = select i1 %472, float %468, float %469, !dbg !48
  %474 = extractelement <4 x float> %389, i64 0, !dbg !43
  %475 = fcmp ogt float %473, %474, !dbg !43
  %476 = fcmp uno float %473, 0.000000e+00, !dbg !49
  %477 = or i1 %475, %476, !dbg !47
  %478 = select i1 %477, float %473, float %474, !dbg !48
  %479 = bitcast float %478 to i32, !dbg !50
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 16, i32 31), !dbg !50
  %481 = bitcast i32 %480 to float, !dbg !50
  %482 = fcmp ogt float %478, %481, !dbg !43
  %483 = fcmp uno float %478, 0.000000e+00, !dbg !49
  %484 = or i1 %483, %482, !dbg !47
  %485 = select i1 %484, float %478, float %481, !dbg !48
  %486 = bitcast float %485 to i32, !dbg !50
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %486, i32 8, i32 31), !dbg !50
  %488 = bitcast i32 %487 to float, !dbg !50
  %489 = fcmp ogt float %485, %488, !dbg !43
  %490 = fcmp uno float %485, 0.000000e+00, !dbg !49
  %491 = or i1 %489, %490, !dbg !47
  %492 = select i1 %491, float %485, float %488, !dbg !48
  %493 = bitcast float %492 to i32, !dbg !50
  %494 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %493, i32 4, i32 31), !dbg !50
  %495 = bitcast i32 %494 to float, !dbg !50
  %496 = fcmp ogt float %492, %495, !dbg !43
  %497 = fcmp uno float %492, 0.000000e+00, !dbg !49
  %498 = or i1 %496, %497, !dbg !47
  %499 = select i1 %498, float %492, float %495, !dbg !48
  %500 = bitcast float %499 to i32, !dbg !50
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 2, i32 31), !dbg !50
  %502 = bitcast i32 %501 to float, !dbg !50
  %503 = fcmp ogt float %499, %502, !dbg !43
  %504 = fcmp uno float %499, 0.000000e+00, !dbg !49
  %505 = or i1 %503, %504, !dbg !47
  %506 = select i1 %505, float %499, float %502, !dbg !48
  %507 = bitcast float %506 to i32, !dbg !50
  %508 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %507, i32 1, i32 31), !dbg !50
  %509 = bitcast i32 %508 to float, !dbg !50
  %510 = fcmp ogt float %506, %509, !dbg !43
  %511 = fcmp uno float %506, 0.000000e+00, !dbg !49
  %512 = or i1 %510, %511, !dbg !47
  %513 = select i1 %512, float %506, float %509, !dbg !48
  %514 = icmp eq i32 %441, 0, !dbg !50
  %515 = zext nneg i32 %442 to i64, !dbg !50
  %516 = getelementptr float, ptr addrspace(3) @global_smem, i64 %515, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, float %513, i1 %514) #6, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %517 = icmp slt i32 %8, 8, !dbg !50
  %518 = sext i32 %8 to i64, !dbg !50
  %519 = getelementptr float, ptr addrspace(3) @global_smem, i64 %518, !dbg !50
  %520 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %519, i1 %517) #6, !dbg !50
  %521 = bitcast float %520 to i32, !dbg !50
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 4, i32 31), !dbg !50
  %523 = bitcast i32 %522 to float, !dbg !50
  %524 = fcmp ogt float %520, %523, !dbg !43
  %525 = fcmp uno float %520, 0.000000e+00, !dbg !49
  %526 = or i1 %525, %524, !dbg !47
  %527 = select i1 %526, float %520, float %523, !dbg !48
  %528 = bitcast float %527 to i32, !dbg !50
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 2, i32 31), !dbg !50
  %530 = bitcast i32 %529 to float, !dbg !50
  %531 = fcmp ogt float %527, %530, !dbg !43
  %532 = fcmp uno float %527, 0.000000e+00, !dbg !49
  %533 = or i1 %531, %532, !dbg !47
  %534 = select i1 %533, float %527, float %530, !dbg !48
  %535 = bitcast float %534 to i32, !dbg !50
  %536 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %535, i32 1, i32 31), !dbg !50
  %537 = bitcast i32 %536 to float, !dbg !50
  %538 = fcmp ogt float %534, %537, !dbg !43
  %539 = fcmp uno float %534, 0.000000e+00, !dbg !49
  %540 = or i1 %538, %539, !dbg !47
  %541 = select i1 %540, float %534, float %537, !dbg !48
  %542 = and i32 %8, 7, !dbg !50
  %543 = icmp eq i32 %542, 0, !dbg !50
  %544 = and i1 %517, %543, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, float %541, i1 %544) #6, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %545 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !50
  br label %546, !dbg !52

546:                                              ; preds = %440, %546
  %547 = phi float [ 0.000000e+00, %440 ], [ %605, %546 ]
  %548 = phi float [ 0.000000e+00, %440 ], [ %606, %546 ]
  %549 = phi float [ 0.000000e+00, %440 ], [ %607, %546 ]
  %550 = phi float [ 0.000000e+00, %440 ], [ %608, %546 ]
  %551 = phi float [ 0.000000e+00, %440 ], [ %609, %546 ]
  %552 = phi float [ 0.000000e+00, %440 ], [ %610, %546 ]
  %553 = phi float [ 0.000000e+00, %440 ], [ %611, %546 ]
  %554 = phi float [ 0.000000e+00, %440 ], [ %612, %546 ]
  %555 = phi i32 [ 0, %440 ], [ %613, %546 ]
  %556 = or i32 %555, %10, !dbg !53
  %557 = add i32 %556, %14, !dbg !54
  %558 = sext i32 %557 to i64, !dbg !55
  %559 = getelementptr i16, ptr addrspace(1) %1, i64 %558, !dbg !55
  %560 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %559, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !56
  %561 = extractvalue { i32, i32, i32, i32 } %560, 0, !dbg !56
  %562 = extractvalue { i32, i32, i32, i32 } %560, 1, !dbg !56
  %563 = extractvalue { i32, i32, i32, i32 } %560, 2, !dbg !56
  %564 = extractvalue { i32, i32, i32, i32 } %560, 3, !dbg !56
  %565 = trunc i32 %561 to i16, !dbg !56
  %extelt.offset20 = lshr i32 %561, 16, !dbg !56
  %566 = trunc i32 %extelt.offset20 to i16, !dbg !56
  %567 = trunc i32 %562 to i16, !dbg !56
  %extelt.offset21 = lshr i32 %562, 16, !dbg !56
  %568 = trunc i32 %extelt.offset21 to i16, !dbg !56
  %569 = trunc i32 %563 to i16, !dbg !56
  %extelt.offset22 = lshr i32 %563, 16, !dbg !56
  %570 = trunc i32 %extelt.offset22 to i16, !dbg !56
  %571 = trunc i32 %564 to i16, !dbg !56
  %extelt.offset23 = lshr i32 %564, 16, !dbg !56
  %572 = trunc i32 %extelt.offset23 to i16, !dbg !56
  %573 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %565) #6, !dbg !57
  %574 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %566) #6, !dbg !57
  %575 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %567) #6, !dbg !57
  %576 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %568) #6, !dbg !57
  %577 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %569) #6, !dbg !57
  %578 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %570) #6, !dbg !57
  %579 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %571) #6, !dbg !57
  %580 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %572) #6, !dbg !57
  %581 = fsub float %573, %545, !dbg !58
  %582 = fsub float %574, %545, !dbg !58
  %583 = fsub float %575, %545, !dbg !58
  %584 = fsub float %576, %545, !dbg !58
  %585 = fsub float %577, %545, !dbg !58
  %586 = fsub float %578, %545, !dbg !58
  %587 = fsub float %579, %545, !dbg !58
  %588 = fsub float %580, %545, !dbg !58
  %589 = fmul float %581, 0x3FF7154760000000, !dbg !59
  %590 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %589) #6, !dbg !59
  %591 = fmul float %582, 0x3FF7154760000000, !dbg !59
  %592 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %591) #6, !dbg !59
  %593 = fmul float %583, 0x3FF7154760000000, !dbg !59
  %594 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %593) #6, !dbg !59
  %595 = fmul float %584, 0x3FF7154760000000, !dbg !59
  %596 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %595) #6, !dbg !59
  %597 = fmul float %585, 0x3FF7154760000000, !dbg !59
  %598 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %597) #6, !dbg !59
  %599 = fmul float %586, 0x3FF7154760000000, !dbg !59
  %600 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %599) #6, !dbg !59
  %601 = fmul float %587, 0x3FF7154760000000, !dbg !59
  %602 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %601) #6, !dbg !59
  %603 = fmul float %588, 0x3FF7154760000000, !dbg !59
  %604 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %603) #6, !dbg !59
  %605 = fadd float %547, %590, !dbg !60
  %606 = fadd float %548, %592, !dbg !60
  %607 = fadd float %549, %594, !dbg !60
  %608 = fadd float %550, %596, !dbg !60
  %609 = fadd float %551, %598, !dbg !60
  %610 = fadd float %552, %600, !dbg !60
  %611 = fadd float %553, %602, !dbg !60
  %612 = fadd float %554, %604, !dbg !60
  %613 = add nuw nsw i32 %555, 2048, !dbg !52
  %614 = icmp ult i32 %555, 6144, !dbg !52
  br i1 %614, label %546, label %615, !dbg !52

615:                                              ; preds = %546
  %616 = or i32 %11, 1024, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %617 = fadd float %605, %606, !dbg !65
  %618 = fadd float %607, %617, !dbg !65
  %619 = fadd float %608, %618, !dbg !65
  %620 = fadd float %609, %619, !dbg !65
  %621 = fadd float %610, %620, !dbg !65
  %622 = fadd float %611, %621, !dbg !65
  %623 = fadd float %612, %622, !dbg !65
  %624 = bitcast float %623 to i32, !dbg !61
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %624, i32 16, i32 31), !dbg !61
  %626 = bitcast i32 %625 to float, !dbg !61
  %627 = fadd float %623, %626, !dbg !65
  %628 = bitcast float %627 to i32, !dbg !61
  %629 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %628, i32 8, i32 31), !dbg !61
  %630 = bitcast i32 %629 to float, !dbg !61
  %631 = fadd float %627, %630, !dbg !65
  %632 = bitcast float %631 to i32, !dbg !61
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 4, i32 31), !dbg !61
  %634 = bitcast i32 %633 to float, !dbg !61
  %635 = fadd float %631, %634, !dbg !65
  %636 = bitcast float %635 to i32, !dbg !61
  %637 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %636, i32 2, i32 31), !dbg !61
  %638 = bitcast i32 %637 to float, !dbg !61
  %639 = fadd float %635, %638, !dbg !65
  %640 = bitcast float %639 to i32, !dbg !61
  %641 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %640, i32 1, i32 31), !dbg !61
  %642 = bitcast i32 %641 to float, !dbg !61
  %643 = fadd float %639, %642, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, float %643, i1 %514) #6, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %644 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %519, i1 %517) #6, !dbg !61
  %645 = bitcast float %644 to i32, !dbg !61
  %646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 4, i32 31), !dbg !61
  %647 = bitcast i32 %646 to float, !dbg !61
  %648 = fadd float %644, %647, !dbg !65
  %649 = bitcast float %648 to i32, !dbg !61
  %650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %649, i32 2, i32 31), !dbg !61
  %651 = bitcast i32 %650 to float, !dbg !61
  %652 = fadd float %648, %651, !dbg !65
  %653 = bitcast float %652 to i32, !dbg !61
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 1, i32 31), !dbg !61
  %655 = bitcast i32 %654 to float, !dbg !61
  %656 = fadd float %652, %655, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, float %656, i1 %544) #6, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %657 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !61
  %658 = zext nneg i32 %10 to i64
  %659 = getelementptr float, ptr addrspace(3) @global_smem, i64 %658
  %660 = zext nneg i32 %11 to i64
  %661 = getelementptr float, ptr addrspace(3) @global_smem, i64 %660
  %662 = zext nneg i32 %616 to i64
  %663 = getelementptr float, ptr addrspace(3) @global_smem, i64 %662
  %664 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %661, i64 0, i64 1
  %665 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %661, i64 0, i64 2
  %666 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %661, i64 0, i64 3
  br label %667, !dbg !69

667:                                              ; preds = %615, %667
  %668 = phi i32 [ 0, %615 ], [ %764, %667 ]
  %669 = or i32 %668, %10, !dbg !70
  %670 = or i32 %668, %11, !dbg !70
  %671 = or i32 %668, %616, !dbg !70
  %672 = add i32 %669, %14, !dbg !71
  %673 = add i32 %670, %14, !dbg !71
  %674 = add i32 %671, %14, !dbg !71
  %675 = sext i32 %672 to i64, !dbg !72
  %676 = getelementptr i16, ptr addrspace(1) %1, i64 %675, !dbg !72
  %677 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %676, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !73
  %678 = extractvalue { i32, i32, i32, i32 } %677, 0, !dbg !73
  %679 = extractvalue { i32, i32, i32, i32 } %677, 1, !dbg !73
  %680 = extractvalue { i32, i32, i32, i32 } %677, 2, !dbg !73
  %681 = extractvalue { i32, i32, i32, i32 } %677, 3, !dbg !73
  %682 = trunc i32 %678 to i16, !dbg !73
  %extelt.offset = lshr i32 %678, 16, !dbg !73
  %683 = trunc i32 %extelt.offset to i16, !dbg !73
  %684 = trunc i32 %679 to i16, !dbg !73
  %extelt.offset3 = lshr i32 %679, 16, !dbg !73
  %685 = trunc i32 %extelt.offset3 to i16, !dbg !73
  %686 = trunc i32 %680 to i16, !dbg !73
  %extelt.offset4 = lshr i32 %680, 16, !dbg !73
  %687 = trunc i32 %extelt.offset4 to i16, !dbg !73
  %688 = trunc i32 %681 to i16, !dbg !73
  %extelt.offset5 = lshr i32 %681, 16, !dbg !73
  %689 = trunc i32 %extelt.offset5 to i16, !dbg !73
  %690 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %682) #6, !dbg !74
  %691 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %683) #6, !dbg !74
  %692 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %684) #6, !dbg !74
  %693 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %685) #6, !dbg !74
  %694 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %686) #6, !dbg !74
  %695 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %687) #6, !dbg !74
  %696 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %688) #6, !dbg !74
  %697 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %689) #6, !dbg !74
  %698 = fsub float %690, %545, !dbg !75
  %699 = fsub float %691, %545, !dbg !75
  %700 = fsub float %692, %545, !dbg !75
  %701 = fsub float %693, %545, !dbg !75
  %702 = fsub float %694, %545, !dbg !75
  %703 = fsub float %695, %545, !dbg !75
  %704 = fsub float %696, %545, !dbg !75
  %705 = fsub float %697, %545, !dbg !75
  %706 = fmul float %698, 0x3FF7154760000000, !dbg !76
  %707 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %706) #6, !dbg !76
  %708 = fmul float %699, 0x3FF7154760000000, !dbg !76
  %709 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %708) #6, !dbg !76
  %710 = fmul float %700, 0x3FF7154760000000, !dbg !76
  %711 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %710) #6, !dbg !76
  %712 = fmul float %701, 0x3FF7154760000000, !dbg !76
  %713 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %712) #6, !dbg !76
  %714 = fmul float %702, 0x3FF7154760000000, !dbg !76
  %715 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %714) #6, !dbg !76
  %716 = fmul float %703, 0x3FF7154760000000, !dbg !76
  %717 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %716) #6, !dbg !76
  %718 = fmul float %704, 0x3FF7154760000000, !dbg !76
  %719 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %718) #6, !dbg !76
  %720 = fmul float %705, 0x3FF7154760000000, !dbg !76
  %721 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %720) #6, !dbg !76
  %722 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %707, float %657) #6, !dbg !77
  %723 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %709, float %657) #6, !dbg !77
  %724 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %711, float %657) #6, !dbg !77
  %725 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %713, float %657) #6, !dbg !77
  %726 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %715, float %657) #6, !dbg !77
  %727 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %717, float %657) #6, !dbg !77
  %728 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %719, float %657) #6, !dbg !77
  %729 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %721, float %657) #6, !dbg !77
  %730 = getelementptr i16, ptr addrspace(1) %3, i64 %675, !dbg !78
  %731 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %722) #6, !dbg !79
  %732 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %723) #6, !dbg !79
  %733 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %724) #6, !dbg !79
  %734 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %725) #6, !dbg !79
  %735 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %726) #6, !dbg !79
  %736 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %727) #6, !dbg !79
  %737 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %728) #6, !dbg !79
  %738 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %729) #6, !dbg !79
  %739 = insertelement <2 x i16> undef, i16 %731, i64 0, !dbg !79
  %740 = insertelement <2 x i16> %739, i16 %732, i64 1, !dbg !79
  %741 = bitcast <2 x i16> %740 to i32, !dbg !79
  %742 = insertelement <2 x i16> undef, i16 %733, i64 0, !dbg !79
  %743 = insertelement <2 x i16> %742, i16 %734, i64 1, !dbg !79
  %744 = bitcast <2 x i16> %743 to i32, !dbg !79
  %745 = insertelement <2 x i16> undef, i16 %735, i64 0, !dbg !79
  %746 = insertelement <2 x i16> %745, i16 %736, i64 1, !dbg !79
  %747 = bitcast <2 x i16> %746 to i32, !dbg !79
  %748 = insertelement <2 x i16> undef, i16 %737, i64 0, !dbg !79
  %749 = insertelement <2 x i16> %748, i16 %738, i64 1, !dbg !79
  %750 = bitcast <2 x i16> %749 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %741, i32 %744, i32 %747, i32 %750, ptr addrspace(1) %730, i1 true) #6, !dbg !79
  %751 = sext i32 %673 to i64, !dbg !80
  %752 = getelementptr float, ptr addrspace(1) %4, i64 %751, !dbg !80
  %753 = sext i32 %674 to i64, !dbg !80
  %754 = getelementptr float, ptr addrspace(1) %4, i64 %753, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %755 = insertelement <8 x float> undef, float %722, i64 0, !dbg !81
  %756 = insertelement <8 x float> %755, float %723, i64 1, !dbg !81
  %757 = insertelement <8 x float> %756, float %724, i64 2, !dbg !81
  %758 = insertelement <8 x float> %757, float %725, i64 3, !dbg !81
  %759 = insertelement <8 x float> %758, float %726, i64 4, !dbg !81
  %760 = insertelement <8 x float> %759, float %727, i64 5, !dbg !81
  %761 = insertelement <8 x float> %760, float %728, i64 6, !dbg !81
  %762 = insertelement <8 x float> %761, float %729, i64 7, !dbg !81
  store <8 x float> %762, ptr addrspace(3) %659, align 32, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %763 = load <4 x i32>, ptr addrspace(3) %663, align 16, !dbg !81
  %.extract = load i32, ptr addrspace(3) %661, align 16, !dbg !81
  %.extract7 = load i32, ptr addrspace(3) %664, align 4, !dbg !81
  %.extract9 = load i32, ptr addrspace(3) %665, align 8, !dbg !81
  %.extract11 = load i32, ptr addrspace(3) %666, align 4, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract9, i32 %.extract11, ptr addrspace(1) %752, i1 true) #6, !dbg !81
  %.extract13 = extractelement <4 x i32> %763, i64 0, !dbg !81
  %.extract15 = extractelement <4 x i32> %763, i64 1, !dbg !81
  %.extract17 = extractelement <4 x i32> %763, i64 2, !dbg !81
  %.extract19 = extractelement <4 x i32> %763, i64 3, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract15, i32 %.extract17, i32 %.extract19, ptr addrspace(1) %754, i1 true) #6, !dbg !81
  %764 = add nuw nsw i32 %668, 2048, !dbg !69
  %765 = icmp ult i32 %668, 6144, !dbg !69
  br i1 %765, label %667, label %766, !dbg !69

766:                                              ; preds = %667
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_tanhf(float %a) local_unnamed_addr #3 {
__nv_fabsf.exit:
  %0 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %0, 0
  %1 = tail call float @llvm.nvvm.fabs.ftz.f(float %a) #6
  %2 = tail call float @llvm.nvvm.fabs.f(float %a) #6
  %.01 = select i1 %.not, float %2, float %1
  %3 = fcmp ult float %.01, 0x3FE3333340000000
  br i1 %3, label %__internal_fmad.exit3, label %__internal_fmad.exit1

__internal_fmad.exit1:                            ; preds = %__nv_fabsf.exit
  %4 = fmul float %.01, 0x4007154760000000
  %5 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %4) #6
  %6 = fadd float %5, 1.000000e+00
  %7 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %6) #7, !srcloc !24
  %8 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not6 = icmp eq i32 %8, 0
  %9 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %7, float -2.000000e+00, float 1.000000e+00) #6
  %10 = tail call float @llvm.nvvm.fma.rn.f(float %7, float -2.000000e+00, float 1.000000e+00) #6
  %.03 = select i1 %.not6, float %10, float %9
  %11 = fcmp oge float %.01, 0x4022059680000000
  %s.0 = select i1 %11, float 1.000000e+00, float %.03
  %12 = bitcast float %s.0 to i32
  %13 = bitcast float %a to i32
  %14 = and i32 %13, -2147483648
  %15 = or i32 %14, %12
  %16 = bitcast i32 %15 to float
  br label %33

__internal_fmad.exit3:                            ; preds = %__nv_fabsf.exit
  %17 = fmul float %a, %a
  %18 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not1 = icmp eq i32 %18, 0
  %19 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #6
  %20 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %17, float 0xBFAAC795C0000000) #6
  %.06 = select i1 %.not1, float %20, float %19
  %21 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not2 = icmp eq i32 %21, 0
  %22 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06, float %17, float 0x3FC10B2820000000) #6
  %23 = tail call float @llvm.nvvm.fma.rn.f(float %.06, float %17, float 0x3FC10B2820000000) #6
  %.05 = select i1 %.not2, float %23, float %22
  %24 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not3 = icmp eq i32 %24, 0
  %25 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05, float %17, float 0xBFD5553DA0000000) #6
  %26 = tail call float @llvm.nvvm.fma.rn.f(float %.05, float %17, float 0xBFD5553DA0000000) #6
  %.0 = select i1 %.not3, float %26, float %25
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not4 = icmp eq i32 %27, 0
  %28 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0, float %17, float 0.000000e+00) #6
  %29 = tail call float @llvm.nvvm.fma.rn.f(float %.0, float %17, float 0.000000e+00) #6
  %.04 = select i1 %.not4, float %29, float %28
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not5 = icmp eq i32 %30, 0
  %31 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04, float %a, float %a) #6
  %32 = tail call float @llvm.nvvm.fma.rn.f(float %.04, float %a, float %a) #6
  %.02 = select i1 %.not5, float %32, float %31
  br label %33

33:                                               ; preds = %__internal_fmad.exit3, %__internal_fmad.exit1
  %s.1 = phi float [ %16, %__internal_fmad.exit1 ], [ %.02, %__internal_fmad.exit3 ]
  ret float %s.1
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }
attributes #7 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c2bhnxvmeoego67jb5gp4t3j6afkcttm7vkpdmv5ciqh3tlhy4j3.py", directory: "/tmp/torchinductor_zeus/2b")
!4 = !{ptr @triton__0d1d2d3d4d5de6de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5de6de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6de", linkageName: "triton__0d1d2d3d4d5de6de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 26, column: 18, scope: !7)
!13 = !DILocation(line: 32, column: 45, scope: !7)
!14 = !DILocation(line: 39, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 36, scope: !7)
!16 = !DILocation(line: 29, column: 27, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 32, column: 103, scope: !7)
!21 = !DILocation(line: 34, column: 22, scope: !7)
!22 = !DILocation(line: 36, column: 22, scope: !7)
!23 = !DILocation(line: 37, column: 28, scope: !7)
!24 = !{i32 21046}
!25 = !DILocation(line: 38, column: 22, scope: !7)
!26 = !DILocation(line: 41, column: 23, scope: !7)
!27 = !DILocation(line: 47, column: 39, scope: !7)
!28 = !DILocation(line: 49, column: 24, scope: !7)
!29 = !DILocation(line: 52, column: 39, scope: !7)
!30 = !DILocation(line: 53, column: 24, scope: !7)
!31 = !DILocation(line: 54, column: 23, scope: !7)
!32 = !DILocation(line: 36, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor")
!35 = !DILocation(line: 57, column: 47, scope: !33)
!36 = !DILocation(line: 38, column: 21, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 38, column: 16, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 0, scope: !7)
!39 = !DILocation(line: 59, column: 29, scope: !7)
!40 = !DILocation(line: 59, column: 53, scope: !7)
!41 = !DILocation(line: 60, column: 29, scope: !7)
!42 = !DILocation(line: 60, column: 52, scope: !7)
!43 = !DILocation(line: 36, column: 15, scope: !44, inlinedAt: !45)
!44 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!45 = !DILocation(line: 49, column: 29, scope: !44, inlinedAt: !46)
!46 = !DILocation(line: 61, column: 40, scope: !44)
!47 = !DILocation(line: 38, column: 16, scope: !44, inlinedAt: !45)
!48 = !DILocation(line: 39, column: 29, scope: !44, inlinedAt: !45)
!49 = !DILocation(line: 38, column: 21, scope: !44, inlinedAt: !45)
!50 = !DILocation(line: 49, column: 29, scope: !33, inlinedAt: !51)
!51 = !DILocation(line: 61, column: 40, scope: !33)
!52 = !DILocation(line: 63, column: 36, scope: !7)
!53 = !DILocation(line: 64, column: 27, scope: !7)
!54 = !DILocation(line: 67, column: 42, scope: !7)
!55 = !DILocation(line: 67, column: 36, scope: !7)
!56 = !DILocation(line: 67, column: 53, scope: !7)
!57 = !DILocation(line: 67, column: 104, scope: !7)
!58 = !DILocation(line: 69, column: 24, scope: !7)
!59 = !DILocation(line: 70, column: 23, scope: !7)
!60 = !DILocation(line: 73, column: 40, scope: !7)
!61 = !DILocation(line: 243, column: 36, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!64 = !DILocation(line: 74, column: 27, scope: !62)
!65 = !DILocation(line: 233, column: 15, scope: !66, inlinedAt: !67)
!66 = distinct !DILexicalBlockFile(scope: !62, file: !63, discriminator: 0)
!67 = !DILocation(line: 243, column: 36, scope: !66, inlinedAt: !68)
!68 = !DILocation(line: 74, column: 27, scope: !66)
!69 = !DILocation(line: 75, column: 36, scope: !7)
!70 = !DILocation(line: 76, column: 27, scope: !7)
!71 = !DILocation(line: 79, column: 42, scope: !7)
!72 = !DILocation(line: 79, column: 36, scope: !7)
!73 = !DILocation(line: 79, column: 53, scope: !7)
!74 = !DILocation(line: 79, column: 105, scope: !7)
!75 = !DILocation(line: 81, column: 24, scope: !7)
!76 = !DILocation(line: 82, column: 23, scope: !7)
!77 = !DILocation(line: 83, column: 24, scope: !7)
!78 = !DILocation(line: 85, column: 29, scope: !7)
!79 = !DILocation(line: 85, column: 53, scope: !7)
!80 = !DILocation(line: 86, column: 29, scope: !7)
!81 = !DILocation(line: 86, column: 53, scope: !7)
!82 = !DILocation(line: 75, column: 4, scope: !7)
