module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c2304_i32 = arith.constant 2304 : i32
    %c256_i32 = arith.constant 256 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<2304> : tensor<8x1xi64>
    %cst_0 = arith.constant dense<0> : tensor<8x1xi64>
    %cst_1 = arith.constant dense<288256> : tensor<8x1xi64>
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x256xf32>
    %cst_3 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32>
    %cst_4 = arith.constant dense<2.304000e+03> : tensor<8x1xf32>
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x256xf32>
    %cst_6 = arith.constant dense<4.800000e+01> : tensor<8x256xf32>
    %cst_7 = arith.constant dense<2304> : tensor<8x1xi32>
    %cst_8 = arith.constant dense<2304> : tensor<1x256xi32>
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<8x256xf32>
    %c8_i32 = arith.constant 8 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c8_i32 : i32
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32>
    %3 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<8xi32>) -> tensor<8x1xi32>
    %4 = tt.splat %1 : (i32) -> tensor<8x1xi32>
    %5 = arith.addi %4, %3 : tensor<8x1xi32>
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32>
    %7 = tt.expand_dims %6 {axis = 0 : i32} : (tensor<256xi32>) -> tensor<1x256xi32>
    %8 = tt.splat %arg0 : (!tt.ptr<i64, 1>) -> tensor<8x1x!tt.ptr<i64, 1>>
    %9 = tt.addptr %8, %5 : tensor<8x1x!tt.ptr<i64, 1>>, tensor<8x1xi32>
    %10 = tt.load %9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<8x1xi64>
    %11 = arith.addi %10, %cst_1 : tensor<8x1xi64>
    %12 = arith.cmpi slt, %10, %cst_0 : tensor<8x1xi64>
    %13 = arith.select %12, %11, %10 : tensor<8x1xi1>, tensor<8x1xi64>
    %14 = arith.cmpi sge, %13, %cst_0 : tensor<8x1xi64>
    %15 = arith.cmpi slt, %13, %cst_1 : tensor<8x1xi64>
    %16 = arith.andi %14, %15 : tensor<8x1xi1>
    %17 = arith.muli %13, %cst : tensor<8x1xi64>
    %18 = tt.broadcast %17 : (tensor<8x1xi64>) -> tensor<8x256xi64>
    %19 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<8x256x!tt.ptr<f32, 1>>
    %20 = scf.for %arg6 = %c0_i32 to %c2304_i32 step %c256_i32 iter_args(%arg7 = %cst_9) -> (tensor<8x256xf32>)  : i32 {
      %38 = tt.splat %arg6 : (i32) -> tensor<1x256xi32>
      %39 = arith.addi %38, %7 : tensor<1x256xi32>
      %40 = arith.cmpi slt, %39, %cst_8 : tensor<1x256xi32>
      tt.assert %16, "index out of bounds: 0 <= tmp3 < 288256", "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor/codecache.py", "<module>", 1892 : tensor<8x1xi1>
      %41 = arith.extsi %39 : tensor<1x256xi32> to tensor<1x256xi64>
      %42 = tt.broadcast %41 : (tensor<1x256xi64>) -> tensor<8x256xi64>
      %43 = arith.addi %42, %18 : tensor<8x256xi64>
      %44 = tt.addptr %19, %43 : tensor<8x256x!tt.ptr<f32, 1>>, tensor<8x256xi64>
      %45 = tt.broadcast %40 : (tensor<1x256xi1>) -> tensor<8x256xi1>
      %46 = tt.load %44, %45, %cst_9 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<8x256xf32>
      %47 = arith.mulf %46, %cst_6 : tensor<8x256xf32>
      %48 = arith.mulf %47, %47 : tensor<8x256xf32>
      %49 = arith.addf %arg7, %48 : tensor<8x256xf32>
      %50 = arith.select %45, %49, %arg7 : tensor<8x256xi1>, tensor<8x256xf32>
      scf.yield %50 : tensor<8x256xf32>
    }
    %21 = "tt.reduce"(%20) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %38 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %38 : f32
    }) : (tensor<8x256xf32>) -> tensor<8xf32>
    %22 = tt.expand_dims %21 {axis = 1 : i32} : (tensor<8xf32>) -> tensor<8x1xf32>
    %23 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1x256x!tt.ptr<f32, 1>>
    %24 = arith.addi %10, %cst_1 : tensor<8x1xi64>
    %25 = arith.cmpi slt, %10, %cst_0 : tensor<8x1xi64>
    %26 = arith.select %25, %24, %10 : tensor<8x1xi1>, tensor<8x1xi64>
    %27 = arith.cmpi sge, %26, %cst_0 : tensor<8x1xi64>
    %28 = arith.cmpi slt, %26, %cst_1 : tensor<8x1xi64>
    %29 = arith.andi %27, %28 : tensor<8x1xi1>
    %30 = arith.muli %26, %cst : tensor<8x1xi64>
    %31 = tt.broadcast %30 : (tensor<8x1xi64>) -> tensor<8x256xi64>
    %32 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<8x256x!tt.ptr<f32, 1>>
    %33 = arith.divf %22, %cst_4 : tensor<8x1xf32>
    %34 = arith.addf %33, %cst_3 : tensor<8x1xf32>
    %35 = arith.muli %5, %cst_7 : tensor<8x1xi32>
    %36 = tt.broadcast %35 : (tensor<8x1xi32>) -> tensor<8x256xi32>
    %37 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<8x256x!tt.ptr<bf16, 1>>
    scf.for %arg6 = %c0_i32 to %c2304_i32 step %c256_i32  : i32 {
      %38 = tt.splat %arg6 : (i32) -> tensor<1x256xi32>
      %39 = arith.addi %38, %7 : tensor<1x256xi32>
      %40 = arith.cmpi slt, %39, %cst_8 : tensor<1x256xi32>
      %41 = tt.addptr %23, %39 : tensor<1x256x!tt.ptr<f32, 1>>, tensor<1x256xi32>
      %42 = tt.load %41, %40, %cst_5 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1x256xf32>
      tt.assert %29, "index out of bounds: 0 <= tmp13 < 288256", "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor/codecache.py", "<module>", 1892 : tensor<8x1xi1>
      %43 = arith.extsi %39 : tensor<1x256xi32> to tensor<1x256xi64>
      %44 = tt.broadcast %43 : (tensor<1x256xi64>) -> tensor<8x256xi64>
      %45 = arith.addi %44, %31 : tensor<8x256xi64>
      %46 = tt.addptr %32, %45 : tensor<8x256x!tt.ptr<f32, 1>>, tensor<8x256xi64>
      %47 = tt.broadcast %40 : (tensor<1x256xi1>) -> tensor<8x256xi1>
      %48 = tt.load %46, %47, %cst_9 {cache = 1 : i32, evict = 2 : i32, isVolatile = false} : tensor<8x256xf32>
      %49 = arith.mulf %48, %cst_6 : tensor<8x256xf32>
      %50 = tt.extern_elementwise %34 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32>) -> tensor<8x1xf32>
      %51 = tt.broadcast %50 : (tensor<8x1xf32>) -> tensor<8x256xf32>
      %52 = arith.mulf %49, %51 : tensor<8x256xf32>
      %53 = arith.addf %42, %cst_2 : tensor<1x256xf32>
      %54 = tt.broadcast %53 : (tensor<1x256xf32>) -> tensor<8x256xf32>
      %55 = arith.mulf %52, %54 : tensor<8x256xf32>
      %56 = tt.broadcast %39 : (tensor<1x256xi32>) -> tensor<8x256xi32>
      %57 = arith.addi %56, %36 : tensor<8x256xi32>
      %58 = tt.addptr %37, %57 : tensor<8x256x!tt.ptr<bf16, 1>>, tensor<8x256xi32>
      %59 = arith.truncf %55 : tensor<8x256xf32> to tensor<8x256xbf16>
      tt.store %58, %59, %47 {cache = 1 : i32, evict = 1 : i32} : tensor<8x256xbf16>
    }
    tt.return
  }
}
