#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<1024> : tensor<256xi32, #blocked>
    %cst_0 = arith.constant dense<2048> : tensor<256xi32, #blocked>
    %cst_1 = arith.constant dense<8> : tensor<256xi32, #blocked>
    %cst_2 = arith.constant dense<256> : tensor<256xi32, #blocked>
    %c256_i32 = arith.constant 256 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c256_i32 : i32
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<256xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked>
    %5 = arith.remsi %4, %cst_2 : tensor<256xi32, #blocked>
    %6 = arith.divsi %4, %cst_2 : tensor<256xi32, #blocked>
    %7 = arith.remsi %6, %cst_1 : tensor<256xi32, #blocked>
    %8 = arith.divsi %4, %cst_0 : tensor<256xi32, #blocked>
    %9 = arith.muli %8, %cst_2 : tensor<256xi32, #blocked>
    %10 = arith.addi %5, %9 : tensor<256xi32, #blocked>
    %11 = arith.muli %7, %cst : tensor<256xi32, #blocked>
    %12 = arith.addi %10, %11 : tensor<256xi32, #blocked>
    %13 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<256x!tt.ptr<bf16, 1>, #blocked>
    %14 = tt.addptr %13, %12 : tensor<256x!tt.ptr<bf16, 1>, #blocked>, tensor<256xi32, #blocked>
    %15 = tt.load %14 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xbf16, #blocked>
    %16 = arith.extf %15 : tensor<256xbf16, #blocked> to tensor<256xf32, #blocked>
    %17 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<256x!tt.ptr<bf16, 1>, #blocked>
    %18 = tt.addptr %17, %4 : tensor<256x!tt.ptr<bf16, 1>, #blocked>, tensor<256xi32, #blocked>
    %19 = arith.truncf %16 : tensor<256xf32, #blocked> to tensor<256xbf16, #blocked>
    tt.store %18, %19 {cache = 1 : i32, evict = 1 : i32} : tensor<256xbf16, #blocked>
    tt.return
  }
}
