module {
  tt.func public @triton__0d1d2d3d4d5d6de7de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<256> : tensor<64x1xi64>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xbf16>
    %cst_1 = arith.constant dense<128> : tensor<64x1xi64>
    %cst_2 = arith.constant dense<524288> : tensor<64x1xi32>
    %cst_3 = arith.constant dense<524288> : tensor<1x64xi32>
    %cst_4 = arith.constant dense<2048> : tensor<64x1xi32>
    %cst_5 = arith.constant dense<3> : tensor<1x64xi64>
    %cst_6 = arith.constant dense<128> : tensor<64x1xi32>
    %cst_7 = arith.constant dense<-128> : tensor<64x1xi32>
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<64x64xf32>
    %cst_9 = arith.constant dense<1048576> : tensor<1x64xi32>
    %cst_10 = arith.constant dense<256> : tensor<1x64xi32>
    %cst_11 = arith.constant dense<2> : tensor<1x64xi64>
    %cst_12 = arith.constant dense<8192> : tensor<1x64xi32>
    %cst_13 = arith.constant dense<4> : tensor<1x64xi32>
    %cst_14 = arith.constant dense<2048> : tensor<1x64xi32>
    %cst_15 = arith.constant dense<256> : tensor<64x1xi32>
    %c64_i32 = arith.constant 64 : i32
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c64_i32 : i32
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32>
    %4 = tt.splat %1 : (i32) -> tensor<1x64xi32>
    %5 = arith.addi %4, %3 : tensor<1x64xi32>
    %6 = tt.get_program_id x : i32
    %7 = arith.muli %6, %c64_i32 : i32
    %8 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32>
    %9 = tt.splat %7 : (i32) -> tensor<64x1xi32>
    %10 = arith.addi %9, %8 : tensor<64x1xi32>
    %11 = arith.cmpi slt, %10, %cst_15 : tensor<64x1xi32>
    %12 = arith.divsi %5, %cst_14 : tensor<1x64xi32>
    %13 = arith.remsi %12, %cst_13 : tensor<1x64xi32>
    %14 = arith.divsi %5, %cst_12 : tensor<1x64xi32>
    %15 = arith.remsi %5, %cst_12 : tensor<1x64xi32>
    %16 = arith.remsi %5, %cst_14 : tensor<1x64xi32>
    %17 = arith.extsi %13 : tensor<1x64xi32> to tensor<1x64xi64>
    %18 = arith.cmpi slt, %17, %cst_11 : tensor<1x64xi64>
    %19 = arith.extsi %10 : tensor<64x1xi32> to tensor<64x1xi64>
    %20 = arith.cmpi sge, %19, %cst : tensor<64x1xi64>
    %21 = tt.broadcast %20 : (tensor<64x1xi1>) -> tensor<64x64xi1>
    %22 = tt.broadcast %18 : (tensor<1x64xi1>) -> tensor<64x64xi1>
    %23 = arith.andi %21, %22 : tensor<64x64xi1>
    %24 = arith.muli %15, %cst_10 : tensor<1x64xi32>
    %25 = tt.broadcast %10 : (tensor<64x1xi32>) -> tensor<64x64xi32>
    %26 = tt.broadcast %24 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %27 = arith.addi %25, %26 : tensor<64x64xi32>
    %28 = arith.muli %14, %cst_9 : tensor<1x64xi32>
    %29 = tt.broadcast %28 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %30 = arith.addi %27, %29 : tensor<64x64xi32>
    %31 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<64x64x!tt.ptr<bf16, 1>>
    %32 = tt.addptr %31, %30 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %33 = tt.broadcast %11 : (tensor<64x1xi1>) -> tensor<64x64xi1>
    %34 = arith.andi %23, %33 : tensor<64x64xi1>
    %35 = tt.load %32, %34, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %36 = arith.extf %35 : tensor<64x64xbf16> to tensor<64x64xf32>
    %37 = arith.select %23, %36, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %38 = arith.andi %22, %33 : tensor<64x64xi1>
    %39 = tt.load %32, %38, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %40 = arith.extf %39 : tensor<64x64xbf16> to tensor<64x64xf32>
    %41 = arith.muli %16, %cst_10 : tensor<1x64xi32>
    %42 = tt.broadcast %41 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %43 = arith.addi %25, %42 : tensor<64x64xi32>
    %44 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<64x64x!tt.ptr<bf16, 1>>
    %45 = tt.addptr %44, %43 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %46 = tt.load %45, %38, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %47 = arith.extf %46 : tensor<64x64xbf16> to tensor<64x64xf32>
    %48 = arith.mulf %40, %47 : tensor<64x64xf32>
    %49 = arith.cmpi sge, %19, %cst_1 : tensor<64x1xi64>
    %50 = tt.broadcast %49 : (tensor<64x1xi1>) -> tensor<64x64xi1>
    %51 = arith.andi %50, %22 : tensor<64x64xi1>
    %52 = arith.addi %10, %cst_7 : tensor<64x1xi32>
    %53 = tt.broadcast %52 : (tensor<64x1xi32>) -> tensor<64x64xi32>
    %54 = arith.addi %53, %26 : tensor<64x64xi32>
    %55 = arith.addi %54, %29 : tensor<64x64xi32>
    %56 = tt.addptr %31, %55 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %57 = arith.andi %51, %33 : tensor<64x64xi1>
    %58 = tt.load %56, %57, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %59 = arith.extf %58 : tensor<64x64xbf16> to tensor<64x64xf32>
    %60 = arith.addi %53, %42 : tensor<64x64xi32>
    %61 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<64x64x!tt.ptr<bf16, 1>>
    %62 = tt.addptr %61, %60 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %63 = tt.load %62, %57, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %64 = arith.extf %63 : tensor<64x64xbf16> to tensor<64x64xf32>
    %65 = arith.mulf %59, %64 : tensor<64x64xf32>
    %66 = arith.subf %cst_8, %65 : tensor<64x64xf32>
    %67 = arith.select %51, %66, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %68 = arith.addf %48, %67 : tensor<64x64xf32>
    %69 = arith.cmpi slt, %19, %cst_1 : tensor<64x1xi64>
    %70 = tt.broadcast %69 : (tensor<64x1xi1>) -> tensor<64x64xi1>
    %71 = arith.andi %70, %22 : tensor<64x64xi1>
    %72 = arith.addi %10, %cst_6 : tensor<64x1xi32>
    %73 = tt.broadcast %72 : (tensor<64x1xi32>) -> tensor<64x64xi32>
    %74 = arith.addi %73, %26 : tensor<64x64xi32>
    %75 = arith.addi %74, %29 : tensor<64x64xi32>
    %76 = tt.addptr %31, %75 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %77 = arith.andi %71, %33 : tensor<64x64xi1>
    %78 = tt.load %76, %77, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %79 = arith.extf %78 : tensor<64x64xbf16> to tensor<64x64xf32>
    %80 = arith.addi %73, %42 : tensor<64x64xi32>
    %81 = tt.addptr %61, %80 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %82 = tt.load %81, %77, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %83 = arith.extf %82 : tensor<64x64xbf16> to tensor<64x64xf32>
    %84 = arith.mulf %79, %83 : tensor<64x64xf32>
    %85 = arith.select %71, %84, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %86 = arith.addf %68, %85 : tensor<64x64xf32>
    %87 = arith.addf %37, %86 : tensor<64x64xf32>
    %88 = arith.select %22, %87, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %89 = arith.cmpi sge, %17, %cst_11 : tensor<1x64xi64>
    %90 = arith.cmpi slt, %17, %cst_5 : tensor<1x64xi64>
    %91 = arith.andi %89, %90 : tensor<1x64xi1>
    %92 = arith.muli %10, %cst_4 : tensor<64x1xi32>
    %93 = tt.broadcast %16 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %94 = tt.broadcast %92 : (tensor<64x1xi32>) -> tensor<64x64xi32>
    %95 = arith.addi %93, %94 : tensor<64x64xi32>
    %96 = arith.muli %14, %cst_3 : tensor<1x64xi32>
    %97 = tt.broadcast %96 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %98 = arith.addi %95, %97 : tensor<64x64xi32>
    %99 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<64x64x!tt.ptr<f32, 1>>
    %100 = tt.addptr %99, %98 : tensor<64x64x!tt.ptr<f32, 1>>, tensor<64x64xi32>
    %101 = tt.broadcast %91 : (tensor<1x64xi1>) -> tensor<64x64xi1>
    %102 = arith.andi %101, %33 : tensor<64x64xi1>
    %103 = tt.load %100, %102, %cst_8 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xf32>
    %104 = arith.select %101, %103, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %105 = arith.cmpi sge, %17, %cst_5 : tensor<1x64xi64>
    %106 = arith.addi %43, %29 : tensor<64x64xi32>
    %107 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<64x64x!tt.ptr<bf16, 1>>
    %108 = tt.addptr %107, %106 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %109 = tt.broadcast %105 : (tensor<1x64xi1>) -> tensor<64x64xi1>
    %110 = arith.andi %109, %33 : tensor<64x64xi1>
    %111 = tt.load %108, %110, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %112 = arith.extf %111 : tensor<64x64xbf16> to tensor<64x64xf32>
    %113 = arith.addi %10, %cst_2 : tensor<64x1xi32>
    %114 = tt.broadcast %113 : (tensor<64x1xi32>) -> tensor<64x64xi32>
    %115 = arith.addi %114, %42 : tensor<64x64xi32>
    %116 = arith.addi %115, %29 : tensor<64x64xi32>
    %117 = tt.addptr %107, %116 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %118 = tt.load %117, %110, %cst_0 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x64xbf16>
    %119 = arith.extf %118 : tensor<64x64xbf16> to tensor<64x64xf32>
    %120 = arith.addf %112, %119 : tensor<64x64xf32>
    %121 = arith.select %109, %120, %cst_8 : tensor<64x64xi1>, tensor<64x64xf32>
    %122 = arith.select %101, %104, %121 : tensor<64x64xi1>, tensor<64x64xf32>
    %123 = arith.select %22, %88, %122 : tensor<64x64xi1>, tensor<64x64xf32>
    %124 = arith.muli %5, %cst_10 : tensor<1x64xi32>
    %125 = tt.broadcast %124 : (tensor<1x64xi32>) -> tensor<64x64xi32>
    %126 = arith.addi %25, %125 : tensor<64x64xi32>
    %127 = tt.splat %arg5 : (!tt.ptr<bf16, 1>) -> tensor<64x64x!tt.ptr<bf16, 1>>
    %128 = tt.addptr %127, %126 : tensor<64x64x!tt.ptr<bf16, 1>>, tensor<64x64xi32>
    %129 = arith.truncf %123 : tensor<64x64xf32> to tensor<64x64xbf16>
    tt.store %128, %129, %33 {cache = 1 : i32, evict = 1 : i32} : tensor<64x64xbf16>
    tt.return
  }
}
