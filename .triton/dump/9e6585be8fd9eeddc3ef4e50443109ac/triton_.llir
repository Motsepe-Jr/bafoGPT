; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = shl i32 %7, 2, !dbg !8
  %11 = and i32 %10, 12, !dbg !8
  %12 = and i32 %9, 3, !dbg !8
  %13 = lshr i32 %8, 4, !dbg !8
  %14 = shl nuw nsw i32 %12, 1, !dbg !8
  %15 = or i32 %14, %13, !dbg !8
  %16 = or i32 %15, 8, !dbg !8
  %17 = lshr i32 %8, 2, !dbg !9
  %18 = shl nuw nsw i32 %12, 3, !dbg !9
  %19 = or i32 %18, %17, !dbg !9
  %20 = or i32 %19, 32, !dbg !9
  %21 = and i32 %10, 60, !dbg !9
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %23 = shl i32 %22, 4, !dbg !11
  %24 = or i32 %23, %11, !dbg !12
  %25 = or i32 %23, %15, !dbg !12
  %26 = or i32 %23, %16, !dbg !12
  %27 = icmp slt i32 %24, 16, !dbg !13
  %28 = icmp slt i32 %25, 16, !dbg !13
  %29 = icmp slt i32 %26, 16, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %31 = shl i32 %30, 6, !dbg !15
  %32 = or i32 %31, %19, !dbg !16
  %33 = or i32 %31, %20, !dbg !16
  %34 = or i32 %31, %21, !dbg !16
  %35 = icmp slt i32 %32, 256, !dbg !17
  %36 = icmp slt i32 %33, 256, !dbg !17
  %37 = icmp slt i32 %34, 256, !dbg !17
  %38 = srem i32 %25, 4, !dbg !18
  %39 = srem i32 %26, 4, !dbg !18
  %40 = shl i32 %32, 2, !dbg !19
  %41 = shl i32 %33, 2, !dbg !19
  %42 = shl i32 %24, 9, !dbg !20
  %43 = add i32 %40, %42, !dbg !21
  %44 = add i32 %41, %42, !dbg !21
  %45 = sext i32 %43 to i64, !dbg !22
  %46 = getelementptr i16, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = sext i32 %44 to i64, !dbg !22
  %48 = getelementptr i16, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = and i1 %27, %35, !dbg !23
  %50 = and i1 %27, %36, !dbg !23
  %51 = and i1 %28, %37, !dbg !23
  %52 = and i1 %29, %37, !dbg !23
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %49) #2, !dbg !24
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !24
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !24
  %56 = trunc i32 %54 to i16, !dbg !24
  %extelt.offset = lshr i32 %54, 16, !dbg !24
  %57 = trunc i32 %extelt.offset to i16, !dbg !24
  %58 = trunc i32 %55 to i16, !dbg !24
  %extelt.offset1 = lshr i32 %55, 16, !dbg !24
  %59 = trunc i32 %extelt.offset1 to i16, !dbg !24
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %50) #2, !dbg !24
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !24
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !24
  %63 = trunc i32 %61 to i16, !dbg !24
  %extelt.offset2 = lshr i32 %61, 16, !dbg !24
  %64 = trunc i32 %extelt.offset2 to i16, !dbg !24
  %65 = trunc i32 %62 to i16, !dbg !24
  %extelt.offset3 = lshr i32 %62, 16, !dbg !24
  %66 = trunc i32 %extelt.offset3 to i16, !dbg !24
  %67 = mul nuw nsw i32 %11, 65, !dbg !25
  %68 = add nuw nsw i32 %19, %67, !dbg !25
  %69 = zext nneg i32 %68 to i64, !dbg !25
  %70 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %69, !dbg !25
  %71 = insertelement <1 x i16> undef, i16 %56, i64 0, !dbg !25
  store <1 x i16> %71, ptr addrspace(3) %70, align 2, !dbg !25
  %72 = add nuw nsw i32 %67, 65, !dbg !25
  %73 = add nuw nsw i32 %72, %19, !dbg !25
  %74 = zext nneg i32 %73 to i64, !dbg !25
  %75 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %74, !dbg !25
  %76 = insertelement <1 x i16> undef, i16 %57, i64 0, !dbg !25
  store <1 x i16> %76, ptr addrspace(3) %75, align 2, !dbg !25
  %77 = add nuw nsw i32 %67, 130, !dbg !25
  %78 = add nuw nsw i32 %77, %19, !dbg !25
  %79 = zext nneg i32 %78 to i64, !dbg !25
  %80 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %79, !dbg !25
  %81 = insertelement <1 x i16> undef, i16 %58, i64 0, !dbg !25
  store <1 x i16> %81, ptr addrspace(3) %80, align 2, !dbg !25
  %82 = add nuw nsw i32 %67, 195, !dbg !25
  %83 = add nuw nsw i32 %82, %19, !dbg !25
  %84 = zext nneg i32 %83 to i64, !dbg !25
  %85 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %84, !dbg !25
  %86 = insertelement <1 x i16> undef, i16 %59, i64 0, !dbg !25
  store <1 x i16> %86, ptr addrspace(3) %85, align 2, !dbg !25
  %87 = add nuw nsw i32 %20, %67, !dbg !25
  %88 = zext nneg i32 %87 to i64, !dbg !25
  %89 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %88, !dbg !25
  %90 = insertelement <1 x i16> undef, i16 %63, i64 0, !dbg !25
  store <1 x i16> %90, ptr addrspace(3) %89, align 2, !dbg !25
  %91 = add nuw nsw i32 %20, %72, !dbg !25
  %92 = zext nneg i32 %91 to i64, !dbg !25
  %93 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %92, !dbg !25
  %94 = insertelement <1 x i16> undef, i16 %64, i64 0, !dbg !25
  store <1 x i16> %94, ptr addrspace(3) %93, align 2, !dbg !25
  %95 = add nuw nsw i32 %20, %77, !dbg !25
  %96 = zext nneg i32 %95 to i64, !dbg !25
  %97 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %96, !dbg !25
  %98 = insertelement <1 x i16> undef, i16 %65, i64 0, !dbg !25
  store <1 x i16> %98, ptr addrspace(3) %97, align 2, !dbg !25
  %99 = add nuw nsw i32 %20, %82, !dbg !25
  %100 = zext nneg i32 %99 to i64, !dbg !25
  %101 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %100, !dbg !25
  %102 = insertelement <1 x i16> undef, i16 %66, i64 0, !dbg !25
  store <1 x i16> %102, ptr addrspace(3) %101, align 2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %103 = mul nuw nsw i32 %15, 65, !dbg !25
  %104 = add nuw nsw i32 %103, %21, !dbg !25
  %105 = zext nneg i32 %104 to i64, !dbg !25
  %106 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %105, !dbg !25
  %107 = load i16, ptr addrspace(3) %106, align 2, !dbg !25
  %108 = or i32 %21, 1, !dbg !25
  %109 = add nuw nsw i32 %103, %108, !dbg !25
  %110 = zext nneg i32 %109 to i64, !dbg !25
  %111 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %110, !dbg !25
  %112 = load i16, ptr addrspace(3) %111, align 2, !dbg !25
  %113 = or i32 %21, 2, !dbg !25
  %114 = add nuw nsw i32 %103, %113, !dbg !25
  %115 = zext nneg i32 %114 to i64, !dbg !25
  %116 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %115, !dbg !25
  %117 = load i16, ptr addrspace(3) %116, align 2, !dbg !25
  %118 = or i32 %21, 3, !dbg !25
  %119 = add nuw nsw i32 %103, %118, !dbg !25
  %120 = zext nneg i32 %119 to i64, !dbg !25
  %121 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %120, !dbg !25
  %122 = load i16, ptr addrspace(3) %121, align 2, !dbg !25
  %123 = mul nuw nsw i32 %16, 65, !dbg !25
  %124 = add nuw nsw i32 %123, %21, !dbg !25
  %125 = zext nneg i32 %124 to i64, !dbg !25
  %126 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %125, !dbg !25
  %127 = load i16, ptr addrspace(3) %126, align 2, !dbg !25
  %128 = add nuw nsw i32 %123, %108, !dbg !25
  %129 = zext nneg i32 %128 to i64, !dbg !25
  %130 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %129, !dbg !25
  %131 = load i16, ptr addrspace(3) %130, align 2, !dbg !25
  %132 = add nuw nsw i32 %123, %113, !dbg !25
  %133 = zext nneg i32 %132 to i64, !dbg !25
  %134 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %133, !dbg !25
  %135 = load i16, ptr addrspace(3) %134, align 2, !dbg !25
  %136 = add nuw nsw i32 %123, %118, !dbg !25
  %137 = zext nneg i32 %136 to i64, !dbg !25
  %138 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %137, !dbg !25
  %139 = load i16, ptr addrspace(3) %138, align 2, !dbg !25
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #2, !dbg !25
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #2, !dbg !25
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %117) #2, !dbg !25
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #2, !dbg !25
  %144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %127) #2, !dbg !25
  %145 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %131) #2, !dbg !25
  %146 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %135) #2, !dbg !25
  %147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #2, !dbg !25
  %148 = shl nsw i32 %38, 8, !dbg !26
  %149 = shl nsw i32 %39, 8, !dbg !26
  %150 = add i32 %148, %34, !dbg !27
  %151 = add i32 %149, %34, !dbg !27
  %152 = sext i32 %150 to i64, !dbg !28
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !28
  %154 = sext i32 %151 to i64, !dbg !28
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !28
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %153, i1 %51) #2, !dbg !29
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !29
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !29
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !29
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !29
  %161 = bitcast i32 %157 to float, !dbg !29
  %162 = bitcast i32 %158 to float, !dbg !29
  %163 = bitcast i32 %159 to float, !dbg !29
  %164 = bitcast i32 %160 to float, !dbg !29
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %52) #2, !dbg !29
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !29
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !29
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !29
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !29
  %170 = bitcast i32 %166 to float, !dbg !29
  %171 = bitcast i32 %167 to float, !dbg !29
  %172 = bitcast i32 %168 to float, !dbg !29
  %173 = bitcast i32 %169 to float, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %174 = mul nuw nsw i32 %21, 20, !dbg !29
  %175 = or i32 %15, %174, !dbg !29
  %176 = zext nneg i32 %175 to i64, !dbg !29
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i64 %176, !dbg !29
  %178 = insertelement <1 x float> undef, float %161, i64 0, !dbg !29
  store <1 x float> %178, ptr addrspace(3) %177, align 4, !dbg !29
  %179 = mul nuw nsw i32 %108, 20, !dbg !29
  %180 = add nuw nsw i32 %179, %15, !dbg !29
  %181 = zext nneg i32 %180 to i64, !dbg !29
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i64 %181, !dbg !29
  %183 = insertelement <1 x float> undef, float %162, i64 0, !dbg !29
  store <1 x float> %183, ptr addrspace(3) %182, align 4, !dbg !29
  %184 = mul nuw nsw i32 %113, 20, !dbg !29
  %185 = or i32 %184, %15, !dbg !29
  %186 = zext nneg i32 %185 to i64, !dbg !29
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !29
  %188 = insertelement <1 x float> undef, float %163, i64 0, !dbg !29
  store <1 x float> %188, ptr addrspace(3) %187, align 4, !dbg !29
  %189 = mul nuw nsw i32 %118, 20, !dbg !29
  %190 = add nuw nsw i32 %189, %15, !dbg !29
  %191 = zext nneg i32 %190 to i64, !dbg !29
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i64 %191, !dbg !29
  %193 = insertelement <1 x float> undef, float %164, i64 0, !dbg !29
  store <1 x float> %193, ptr addrspace(3) %192, align 4, !dbg !29
  %194 = or i32 %16, %174, !dbg !29
  %195 = zext nneg i32 %194 to i64, !dbg !29
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i64 %195, !dbg !29
  %197 = insertelement <1 x float> undef, float %170, i64 0, !dbg !29
  store <1 x float> %197, ptr addrspace(3) %196, align 4, !dbg !29
  %198 = add nuw nsw i32 %16, %179, !dbg !29
  %199 = zext nneg i32 %198 to i64, !dbg !29
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i64 %199, !dbg !29
  %201 = insertelement <1 x float> undef, float %171, i64 0, !dbg !29
  store <1 x float> %201, ptr addrspace(3) %200, align 4, !dbg !29
  %202 = add nuw nsw i32 %16, %184, !dbg !29
  %203 = zext nneg i32 %202 to i64, !dbg !29
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i64 %203, !dbg !29
  %205 = insertelement <1 x float> undef, float %172, i64 0, !dbg !29
  store <1 x float> %205, ptr addrspace(3) %204, align 4, !dbg !29
  %206 = add nuw nsw i32 %16, %189, !dbg !29
  %207 = zext nneg i32 %206 to i64, !dbg !29
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i64 %207, !dbg !29
  %209 = insertelement <1 x float> undef, float %173, i64 0, !dbg !29
  store <1 x float> %209, ptr addrspace(3) %208, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %210 = mul nuw nsw i32 %19, 20, !dbg !29
  %211 = add nuw nsw i32 %210, %11, !dbg !29
  %212 = zext nneg i32 %211 to i64, !dbg !29
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i64 %212, !dbg !29
  %214 = load float, ptr addrspace(3) %213, align 16, !dbg !29
  %215 = getelementptr inbounds <4 x float>, ptr addrspace(3) %213, i64 0, i64 1, !dbg !29
  %216 = load float, ptr addrspace(3) %215, align 4, !dbg !29
  %217 = getelementptr inbounds <4 x float>, ptr addrspace(3) %213, i64 0, i64 2, !dbg !29
  %218 = load float, ptr addrspace(3) %217, align 8, !dbg !29
  %219 = getelementptr inbounds <4 x float>, ptr addrspace(3) %213, i64 0, i64 3, !dbg !29
  %220 = load float, ptr addrspace(3) %219, align 4, !dbg !29
  %221 = mul nuw nsw i32 %20, 20, !dbg !29
  %222 = add nuw nsw i32 %221, %11, !dbg !29
  %223 = zext nneg i32 %222 to i64, !dbg !29
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i64 %223, !dbg !29
  %225 = load float, ptr addrspace(3) %224, align 16, !dbg !29
  %226 = getelementptr inbounds <4 x float>, ptr addrspace(3) %224, i64 0, i64 1, !dbg !29
  %227 = load float, ptr addrspace(3) %226, align 4, !dbg !29
  %228 = getelementptr inbounds <4 x float>, ptr addrspace(3) %224, i64 0, i64 2, !dbg !29
  %229 = load float, ptr addrspace(3) %228, align 8, !dbg !29
  %230 = getelementptr inbounds <4 x float>, ptr addrspace(3) %224, i64 0, i64 3, !dbg !29
  %231 = load float, ptr addrspace(3) %230, align 4, !dbg !29
  %232 = add i32 %43, 1024, !dbg !30
  %233 = add i32 %44, 1024, !dbg !30
  %234 = sext i32 %232 to i64, !dbg !31
  %235 = getelementptr i16, ptr addrspace(1) %0, i64 %234, !dbg !31
  %236 = sext i32 %233 to i64, !dbg !31
  %237 = getelementptr i16, ptr addrspace(1) %0, i64 %236, !dbg !31
  %238 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %235, i1 %49) #2, !dbg !32
  %239 = extractvalue { i32, i32 } %238, 0, !dbg !32
  %240 = extractvalue { i32, i32 } %238, 1, !dbg !32
  %241 = trunc i32 %239 to i16, !dbg !32
  %extelt.offset4 = lshr i32 %239, 16, !dbg !32
  %242 = trunc i32 %extelt.offset4 to i16, !dbg !32
  %243 = trunc i32 %240 to i16, !dbg !32
  %extelt.offset5 = lshr i32 %240, 16, !dbg !32
  %244 = trunc i32 %extelt.offset5 to i16, !dbg !32
  %245 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %237, i1 %50) #2, !dbg !32
  %246 = extractvalue { i32, i32 } %245, 0, !dbg !32
  %247 = extractvalue { i32, i32 } %245, 1, !dbg !32
  %248 = trunc i32 %246 to i16, !dbg !32
  %extelt.offset6 = lshr i32 %246, 16, !dbg !32
  %249 = trunc i32 %extelt.offset6 to i16, !dbg !32
  %250 = trunc i32 %247 to i16, !dbg !32
  %extelt.offset7 = lshr i32 %247, 16, !dbg !32
  %251 = trunc i32 %extelt.offset7 to i16, !dbg !32
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %241) #2, !dbg !33
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %242) #2, !dbg !33
  %254 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %243) #2, !dbg !33
  %255 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %244) #2, !dbg !33
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %248) #2, !dbg !33
  %257 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %249) #2, !dbg !33
  %258 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %250) #2, !dbg !33
  %259 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %251) #2, !dbg !33
  %260 = icmp sgt i32 %32, 255, !dbg !34
  %261 = icmp sgt i32 %33, 255, !dbg !34
  %262 = icmp sgt i32 %34, 255, !dbg !34
  %263 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !35
  %264 = extractvalue { i32, i32 } %263, 0, !dbg !35
  %265 = extractvalue { i32, i32 } %263, 1, !dbg !35
  %266 = trunc i32 %264 to i16, !dbg !35
  %extelt.offset8 = lshr i32 %264, 16, !dbg !35
  %267 = trunc i32 %extelt.offset8 to i16, !dbg !35
  %268 = trunc i32 %265 to i16, !dbg !35
  %extelt.offset9 = lshr i32 %265, 16, !dbg !35
  %269 = trunc i32 %extelt.offset9 to i16, !dbg !35
  %270 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !35
  %271 = extractvalue { i32, i32 } %270, 0, !dbg !35
  %272 = extractvalue { i32, i32 } %270, 1, !dbg !35
  %273 = trunc i32 %271 to i16, !dbg !35
  %extelt.offset10 = lshr i32 %271, 16, !dbg !35
  %274 = trunc i32 %extelt.offset10 to i16, !dbg !35
  %275 = trunc i32 %272 to i16, !dbg !35
  %extelt.offset11 = lshr i32 %272, 16, !dbg !35
  %276 = trunc i32 %extelt.offset11 to i16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %277 = insertelement <1 x i16> undef, i16 %266, i64 0, !dbg !36
  store <1 x i16> %277, ptr addrspace(3) %70, align 2, !dbg !36
  %278 = insertelement <1 x i16> undef, i16 %267, i64 0, !dbg !36
  store <1 x i16> %278, ptr addrspace(3) %75, align 2, !dbg !36
  %279 = insertelement <1 x i16> undef, i16 %268, i64 0, !dbg !36
  store <1 x i16> %279, ptr addrspace(3) %80, align 2, !dbg !36
  %280 = insertelement <1 x i16> undef, i16 %269, i64 0, !dbg !36
  store <1 x i16> %280, ptr addrspace(3) %85, align 2, !dbg !36
  %281 = insertelement <1 x i16> undef, i16 %273, i64 0, !dbg !36
  store <1 x i16> %281, ptr addrspace(3) %89, align 2, !dbg !36
  %282 = insertelement <1 x i16> undef, i16 %274, i64 0, !dbg !36
  store <1 x i16> %282, ptr addrspace(3) %93, align 2, !dbg !36
  %283 = insertelement <1 x i16> undef, i16 %275, i64 0, !dbg !36
  store <1 x i16> %283, ptr addrspace(3) %97, align 2, !dbg !36
  %284 = insertelement <1 x i16> undef, i16 %276, i64 0, !dbg !36
  store <1 x i16> %284, ptr addrspace(3) %101, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %285 = load i16, ptr addrspace(3) %106, align 2, !dbg !36
  %286 = load i16, ptr addrspace(3) %111, align 2, !dbg !36
  %287 = load i16, ptr addrspace(3) %116, align 2, !dbg !36
  %288 = load i16, ptr addrspace(3) %121, align 2, !dbg !36
  %289 = load i16, ptr addrspace(3) %126, align 2, !dbg !36
  %290 = load i16, ptr addrspace(3) %130, align 2, !dbg !36
  %291 = load i16, ptr addrspace(3) %134, align 2, !dbg !36
  %292 = load i16, ptr addrspace(3) %138, align 2, !dbg !36
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #2, !dbg !37
  %294 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #2, !dbg !37
  %295 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %287) #2, !dbg !37
  %296 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %288) #2, !dbg !37
  %297 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %289) #2, !dbg !37
  %298 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %290) #2, !dbg !37
  %299 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %291) #2, !dbg !37
  %300 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %292) #2, !dbg !37
  %301 = select i1 %262, float %293, float 0.000000e+00, !dbg !36
  %302 = select i1 %262, float %294, float 0.000000e+00, !dbg !36
  %303 = select i1 %262, float %295, float 0.000000e+00, !dbg !36
  %304 = select i1 %262, float %296, float 0.000000e+00, !dbg !36
  %305 = select i1 %262, float %297, float 0.000000e+00, !dbg !36
  %306 = select i1 %262, float %298, float 0.000000e+00, !dbg !36
  %307 = select i1 %262, float %299, float 0.000000e+00, !dbg !36
  %308 = select i1 %262, float %300, float 0.000000e+00, !dbg !36
  %309 = fmul float %140, %161, !dbg !38
  %310 = fmul float %141, %162, !dbg !38
  %311 = fmul float %142, %163, !dbg !38
  %312 = fmul float %143, %164, !dbg !38
  %313 = fmul float %144, %170, !dbg !38
  %314 = fmul float %145, %171, !dbg !38
  %315 = fmul float %146, %172, !dbg !38
  %316 = fmul float %147, %173, !dbg !38
  %317 = icmp sgt i32 %32, 127, !dbg !39
  %318 = icmp sgt i32 %33, 127, !dbg !39
  %319 = icmp sgt i32 %34, 127, !dbg !39
  %320 = add i32 %43, -512, !dbg !40
  %321 = add i32 %44, -512, !dbg !40
  %322 = sext i32 %320 to i64, !dbg !41
  %323 = getelementptr i16, ptr addrspace(1) %0, i64 %322, !dbg !41
  %324 = sext i32 %321 to i64, !dbg !41
  %325 = getelementptr i16, ptr addrspace(1) %0, i64 %324, !dbg !41
  %326 = and i32 %30, 67108862, !dbg !42
  %327 = icmp eq i32 %326, 2, !dbg !42
  %328 = and i1 %327, %27, !dbg !43
  %329 = and i1 %327, %28, !dbg !43
  %330 = and i1 %327, %29, !dbg !43
  %331 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %323, i1 %328, i32 0, i1 %328, i32 0, i1 %328) #2, !dbg !44
  %332 = extractvalue { i32, i32 } %331, 0, !dbg !44
  %333 = extractvalue { i32, i32 } %331, 1, !dbg !44
  %334 = trunc i32 %332 to i16, !dbg !44
  %extelt.offset12 = lshr i32 %332, 16, !dbg !44
  %335 = trunc i32 %extelt.offset12 to i16, !dbg !44
  %336 = trunc i32 %333 to i16, !dbg !44
  %extelt.offset13 = lshr i32 %333, 16, !dbg !44
  %337 = trunc i32 %extelt.offset13 to i16, !dbg !44
  %338 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %325, i1 %328, i32 0, i1 %328, i32 0, i1 %328) #2, !dbg !44
  %339 = extractvalue { i32, i32 } %338, 0, !dbg !44
  %340 = extractvalue { i32, i32 } %338, 1, !dbg !44
  %341 = trunc i32 %339 to i16, !dbg !44
  %extelt.offset14 = lshr i32 %339, 16, !dbg !44
  %342 = trunc i32 %extelt.offset14 to i16, !dbg !44
  %343 = trunc i32 %340 to i16, !dbg !44
  %extelt.offset15 = lshr i32 %340, 16, !dbg !44
  %344 = trunc i32 %extelt.offset15 to i16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %345 = insertelement <1 x i16> undef, i16 %334, i64 0, !dbg !45
  store <1 x i16> %345, ptr addrspace(3) %70, align 2, !dbg !45
  %346 = insertelement <1 x i16> undef, i16 %335, i64 0, !dbg !45
  store <1 x i16> %346, ptr addrspace(3) %75, align 2, !dbg !45
  %347 = insertelement <1 x i16> undef, i16 %336, i64 0, !dbg !45
  store <1 x i16> %347, ptr addrspace(3) %80, align 2, !dbg !45
  %348 = insertelement <1 x i16> undef, i16 %337, i64 0, !dbg !45
  store <1 x i16> %348, ptr addrspace(3) %85, align 2, !dbg !45
  %349 = insertelement <1 x i16> undef, i16 %341, i64 0, !dbg !45
  store <1 x i16> %349, ptr addrspace(3) %89, align 2, !dbg !45
  %350 = insertelement <1 x i16> undef, i16 %342, i64 0, !dbg !45
  store <1 x i16> %350, ptr addrspace(3) %93, align 2, !dbg !45
  %351 = insertelement <1 x i16> undef, i16 %343, i64 0, !dbg !45
  store <1 x i16> %351, ptr addrspace(3) %97, align 2, !dbg !45
  %352 = insertelement <1 x i16> undef, i16 %344, i64 0, !dbg !45
  store <1 x i16> %352, ptr addrspace(3) %101, align 2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %353 = load i16, ptr addrspace(3) %106, align 2, !dbg !45
  %354 = load i16, ptr addrspace(3) %111, align 2, !dbg !45
  %355 = load i16, ptr addrspace(3) %116, align 2, !dbg !45
  %356 = load i16, ptr addrspace(3) %121, align 2, !dbg !45
  %357 = load i16, ptr addrspace(3) %126, align 2, !dbg !45
  %358 = load i16, ptr addrspace(3) %130, align 2, !dbg !45
  %359 = load i16, ptr addrspace(3) %134, align 2, !dbg !45
  %360 = load i16, ptr addrspace(3) %138, align 2, !dbg !45
  %361 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %353) #2, !dbg !45
  %362 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %354) #2, !dbg !45
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #2, !dbg !45
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #2, !dbg !45
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #2, !dbg !45
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #2, !dbg !45
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #2, !dbg !45
  %368 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #2, !dbg !45
  %369 = add i32 %34, -128, !dbg !46
  %370 = add i32 %369, %148, !dbg !47
  %371 = add i32 %369, %149, !dbg !47
  %372 = sext i32 %370 to i64, !dbg !48
  %373 = getelementptr float, ptr addrspace(1) %2, i64 %372, !dbg !48
  %374 = sext i32 %371 to i64, !dbg !48
  %375 = getelementptr float, ptr addrspace(1) %2, i64 %374, !dbg !48
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %373, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329, i32 0, i1 %329) #2, !dbg !49
  %377 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !49
  %378 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !49
  %379 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !49
  %380 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !49
  %381 = bitcast i32 %377 to float, !dbg !49
  %382 = bitcast i32 %378 to float, !dbg !49
  %383 = bitcast i32 %379 to float, !dbg !49
  %384 = bitcast i32 %380 to float, !dbg !49
  %385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %375, i1 %330, i32 0, i1 %330, i32 0, i1 %330, i32 0, i1 %330, i32 0, i1 %330) #2, !dbg !49
  %386 = extractvalue { i32, i32, i32, i32 } %385, 0, !dbg !49
  %387 = extractvalue { i32, i32, i32, i32 } %385, 1, !dbg !49
  %388 = extractvalue { i32, i32, i32, i32 } %385, 2, !dbg !49
  %389 = extractvalue { i32, i32, i32, i32 } %385, 3, !dbg !49
  %390 = bitcast i32 %386 to float, !dbg !49
  %391 = bitcast i32 %387 to float, !dbg !49
  %392 = bitcast i32 %388 to float, !dbg !49
  %393 = bitcast i32 %389 to float, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %394 = insertelement <1 x float> undef, float %381, i64 0, !dbg !49
  store <1 x float> %394, ptr addrspace(3) %177, align 4, !dbg !49
  %395 = insertelement <1 x float> undef, float %382, i64 0, !dbg !49
  store <1 x float> %395, ptr addrspace(3) %182, align 4, !dbg !49
  %396 = insertelement <1 x float> undef, float %383, i64 0, !dbg !49
  store <1 x float> %396, ptr addrspace(3) %187, align 4, !dbg !49
  %397 = insertelement <1 x float> undef, float %384, i64 0, !dbg !49
  store <1 x float> %397, ptr addrspace(3) %192, align 4, !dbg !49
  %398 = insertelement <1 x float> undef, float %390, i64 0, !dbg !49
  store <1 x float> %398, ptr addrspace(3) %196, align 4, !dbg !49
  %399 = insertelement <1 x float> undef, float %391, i64 0, !dbg !49
  store <1 x float> %399, ptr addrspace(3) %200, align 4, !dbg !49
  %400 = insertelement <1 x float> undef, float %392, i64 0, !dbg !49
  store <1 x float> %400, ptr addrspace(3) %204, align 4, !dbg !49
  %401 = insertelement <1 x float> undef, float %393, i64 0, !dbg !49
  store <1 x float> %401, ptr addrspace(3) %208, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %402 = load float, ptr addrspace(3) %213, align 16, !dbg !49
  %403 = load float, ptr addrspace(3) %215, align 4, !dbg !49
  %404 = load float, ptr addrspace(3) %217, align 8, !dbg !49
  %405 = load float, ptr addrspace(3) %219, align 4, !dbg !49
  %406 = load float, ptr addrspace(3) %224, align 16, !dbg !49
  %407 = load float, ptr addrspace(3) %226, align 4, !dbg !49
  %408 = load float, ptr addrspace(3) %228, align 8, !dbg !49
  %409 = load float, ptr addrspace(3) %230, align 4, !dbg !49
  %410 = fmul float %361, %381, !dbg !50
  %411 = fmul float %362, %382, !dbg !50
  %412 = fmul float %363, %383, !dbg !50
  %413 = fmul float %364, %384, !dbg !50
  %414 = fmul float %365, %390, !dbg !50
  %415 = fmul float %366, %391, !dbg !50
  %416 = fmul float %367, %392, !dbg !50
  %417 = fmul float %368, %393, !dbg !50
  %418 = fsub float 0.000000e+00, %410, !dbg !51
  %419 = fsub float 0.000000e+00, %411, !dbg !51
  %420 = fsub float 0.000000e+00, %412, !dbg !51
  %421 = fsub float 0.000000e+00, %413, !dbg !51
  %422 = fsub float 0.000000e+00, %414, !dbg !51
  %423 = fsub float 0.000000e+00, %415, !dbg !51
  %424 = fsub float 0.000000e+00, %416, !dbg !51
  %425 = fsub float 0.000000e+00, %417, !dbg !51
  %426 = select i1 %319, float %418, float 0.000000e+00, !dbg !36
  %427 = select i1 %319, float %419, float 0.000000e+00, !dbg !36
  %428 = select i1 %319, float %420, float 0.000000e+00, !dbg !36
  %429 = select i1 %319, float %421, float 0.000000e+00, !dbg !36
  %430 = select i1 %319, float %422, float 0.000000e+00, !dbg !36
  %431 = select i1 %319, float %423, float 0.000000e+00, !dbg !36
  %432 = select i1 %319, float %424, float 0.000000e+00, !dbg !36
  %433 = select i1 %319, float %425, float 0.000000e+00, !dbg !36
  %434 = fadd float %309, %426, !dbg !52
  %435 = fadd float %310, %427, !dbg !52
  %436 = fadd float %311, %428, !dbg !52
  %437 = fadd float %312, %429, !dbg !52
  %438 = fadd float %313, %430, !dbg !52
  %439 = fadd float %314, %431, !dbg !52
  %440 = fadd float %315, %432, !dbg !52
  %441 = fadd float %316, %433, !dbg !52
  %442 = icmp slt i32 %32, 128, !dbg !53
  %443 = icmp slt i32 %33, 128, !dbg !53
  %444 = icmp slt i32 %34, 128, !dbg !53
  %445 = add i32 %43, 512, !dbg !54
  %446 = add i32 %44, 512, !dbg !54
  %447 = sext i32 %445 to i64, !dbg !55
  %448 = getelementptr i16, ptr addrspace(1) %0, i64 %447, !dbg !55
  %449 = sext i32 %446 to i64, !dbg !55
  %450 = getelementptr i16, ptr addrspace(1) %0, i64 %449, !dbg !55
  %451 = and i1 %27, %442, !dbg !56
  %452 = and i1 %27, %443, !dbg !56
  %453 = and i1 %28, %444, !dbg !56
  %454 = and i1 %29, %444, !dbg !56
  %455 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %448, i1 %451, i32 0, i1 %451, i32 0, i1 %451) #2, !dbg !57
  %456 = extractvalue { i32, i32 } %455, 0, !dbg !57
  %457 = extractvalue { i32, i32 } %455, 1, !dbg !57
  %458 = trunc i32 %456 to i16, !dbg !57
  %extelt.offset16 = lshr i32 %456, 16, !dbg !57
  %459 = trunc i32 %extelt.offset16 to i16, !dbg !57
  %460 = trunc i32 %457 to i16, !dbg !57
  %extelt.offset17 = lshr i32 %457, 16, !dbg !57
  %461 = trunc i32 %extelt.offset17 to i16, !dbg !57
  %462 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %450, i1 %452, i32 0, i1 %452, i32 0, i1 %452) #2, !dbg !57
  %463 = extractvalue { i32, i32 } %462, 0, !dbg !57
  %464 = extractvalue { i32, i32 } %462, 1, !dbg !57
  %465 = trunc i32 %463 to i16, !dbg !57
  %extelt.offset18 = lshr i32 %463, 16, !dbg !57
  %466 = trunc i32 %extelt.offset18 to i16, !dbg !57
  %467 = trunc i32 %464 to i16, !dbg !57
  %extelt.offset19 = lshr i32 %464, 16, !dbg !57
  %468 = trunc i32 %extelt.offset19 to i16, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %469 = insertelement <1 x i16> undef, i16 %458, i64 0, !dbg !58
  store <1 x i16> %469, ptr addrspace(3) %70, align 2, !dbg !58
  %470 = insertelement <1 x i16> undef, i16 %459, i64 0, !dbg !58
  store <1 x i16> %470, ptr addrspace(3) %75, align 2, !dbg !58
  %471 = insertelement <1 x i16> undef, i16 %460, i64 0, !dbg !58
  store <1 x i16> %471, ptr addrspace(3) %80, align 2, !dbg !58
  %472 = insertelement <1 x i16> undef, i16 %461, i64 0, !dbg !58
  store <1 x i16> %472, ptr addrspace(3) %85, align 2, !dbg !58
  %473 = insertelement <1 x i16> undef, i16 %465, i64 0, !dbg !58
  store <1 x i16> %473, ptr addrspace(3) %89, align 2, !dbg !58
  %474 = insertelement <1 x i16> undef, i16 %466, i64 0, !dbg !58
  store <1 x i16> %474, ptr addrspace(3) %93, align 2, !dbg !58
  %475 = insertelement <1 x i16> undef, i16 %467, i64 0, !dbg !58
  store <1 x i16> %475, ptr addrspace(3) %97, align 2, !dbg !58
  %476 = insertelement <1 x i16> undef, i16 %468, i64 0, !dbg !58
  store <1 x i16> %476, ptr addrspace(3) %101, align 2, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %477 = load i16, ptr addrspace(3) %106, align 2, !dbg !58
  %478 = load i16, ptr addrspace(3) %111, align 2, !dbg !58
  %479 = load i16, ptr addrspace(3) %116, align 2, !dbg !58
  %480 = load i16, ptr addrspace(3) %121, align 2, !dbg !58
  %481 = load i16, ptr addrspace(3) %126, align 2, !dbg !58
  %482 = load i16, ptr addrspace(3) %130, align 2, !dbg !58
  %483 = load i16, ptr addrspace(3) %134, align 2, !dbg !58
  %484 = load i16, ptr addrspace(3) %138, align 2, !dbg !58
  %485 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %477) #2, !dbg !58
  %486 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %478) #2, !dbg !58
  %487 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %479) #2, !dbg !58
  %488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #2, !dbg !58
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #2, !dbg !58
  %490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #2, !dbg !58
  %491 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #2, !dbg !58
  %492 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #2, !dbg !58
  %493 = add i32 %34, 128, !dbg !59
  %494 = add i32 %493, %148, !dbg !60
  %495 = add i32 %493, %149, !dbg !60
  %496 = sext i32 %494 to i64, !dbg !61
  %497 = getelementptr float, ptr addrspace(1) %2, i64 %496, !dbg !61
  %498 = sext i32 %495 to i64, !dbg !61
  %499 = getelementptr float, ptr addrspace(1) %2, i64 %498, !dbg !61
  %500 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %497, i1 %453, i32 0, i1 %453, i32 0, i1 %453, i32 0, i1 %453, i32 0, i1 %453) #2, !dbg !62
  %501 = extractvalue { i32, i32, i32, i32 } %500, 0, !dbg !62
  %502 = extractvalue { i32, i32, i32, i32 } %500, 1, !dbg !62
  %503 = extractvalue { i32, i32, i32, i32 } %500, 2, !dbg !62
  %504 = extractvalue { i32, i32, i32, i32 } %500, 3, !dbg !62
  %505 = bitcast i32 %501 to float, !dbg !62
  %506 = bitcast i32 %502 to float, !dbg !62
  %507 = bitcast i32 %503 to float, !dbg !62
  %508 = bitcast i32 %504 to float, !dbg !62
  %509 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %499, i1 %454, i32 0, i1 %454, i32 0, i1 %454, i32 0, i1 %454, i32 0, i1 %454) #2, !dbg !62
  %510 = extractvalue { i32, i32, i32, i32 } %509, 0, !dbg !62
  %511 = extractvalue { i32, i32, i32, i32 } %509, 1, !dbg !62
  %512 = extractvalue { i32, i32, i32, i32 } %509, 2, !dbg !62
  %513 = extractvalue { i32, i32, i32, i32 } %509, 3, !dbg !62
  %514 = bitcast i32 %510 to float, !dbg !62
  %515 = bitcast i32 %511 to float, !dbg !62
  %516 = bitcast i32 %512 to float, !dbg !62
  %517 = bitcast i32 %513 to float, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %518 = insertelement <1 x float> undef, float %505, i64 0, !dbg !62
  store <1 x float> %518, ptr addrspace(3) %177, align 4, !dbg !62
  %519 = insertelement <1 x float> undef, float %506, i64 0, !dbg !62
  store <1 x float> %519, ptr addrspace(3) %182, align 4, !dbg !62
  %520 = insertelement <1 x float> undef, float %507, i64 0, !dbg !62
  store <1 x float> %520, ptr addrspace(3) %187, align 4, !dbg !62
  %521 = insertelement <1 x float> undef, float %508, i64 0, !dbg !62
  store <1 x float> %521, ptr addrspace(3) %192, align 4, !dbg !62
  %522 = insertelement <1 x float> undef, float %514, i64 0, !dbg !62
  store <1 x float> %522, ptr addrspace(3) %196, align 4, !dbg !62
  %523 = insertelement <1 x float> undef, float %515, i64 0, !dbg !62
  store <1 x float> %523, ptr addrspace(3) %200, align 4, !dbg !62
  %524 = insertelement <1 x float> undef, float %516, i64 0, !dbg !62
  store <1 x float> %524, ptr addrspace(3) %204, align 4, !dbg !62
  %525 = insertelement <1 x float> undef, float %517, i64 0, !dbg !62
  store <1 x float> %525, ptr addrspace(3) %208, align 4, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %526 = load float, ptr addrspace(3) %213, align 16, !dbg !62
  %527 = load float, ptr addrspace(3) %215, align 4, !dbg !62
  %528 = load float, ptr addrspace(3) %217, align 8, !dbg !62
  %529 = load float, ptr addrspace(3) %219, align 4, !dbg !62
  %530 = load float, ptr addrspace(3) %224, align 16, !dbg !62
  %531 = load float, ptr addrspace(3) %226, align 4, !dbg !62
  %532 = load float, ptr addrspace(3) %228, align 8, !dbg !62
  %533 = load float, ptr addrspace(3) %230, align 4, !dbg !62
  %534 = fmul float %485, %505, !dbg !63
  %535 = fmul float %486, %506, !dbg !63
  %536 = fmul float %487, %507, !dbg !63
  %537 = fmul float %488, %508, !dbg !63
  %538 = fmul float %489, %514, !dbg !63
  %539 = fmul float %490, %515, !dbg !63
  %540 = fmul float %491, %516, !dbg !63
  %541 = fmul float %492, %517, !dbg !63
  %542 = select i1 %444, float %534, float 0.000000e+00, !dbg !36
  %543 = select i1 %444, float %535, float 0.000000e+00, !dbg !36
  %544 = select i1 %444, float %536, float 0.000000e+00, !dbg !36
  %545 = select i1 %444, float %537, float 0.000000e+00, !dbg !36
  %546 = select i1 %444, float %538, float 0.000000e+00, !dbg !36
  %547 = select i1 %444, float %539, float 0.000000e+00, !dbg !36
  %548 = select i1 %444, float %540, float 0.000000e+00, !dbg !36
  %549 = select i1 %444, float %541, float 0.000000e+00, !dbg !36
  %550 = fadd float %434, %542, !dbg !64
  %551 = fadd float %435, %543, !dbg !64
  %552 = fadd float %436, %544, !dbg !64
  %553 = fadd float %437, %545, !dbg !64
  %554 = fadd float %438, %546, !dbg !64
  %555 = fadd float %439, %547, !dbg !64
  %556 = fadd float %440, %548, !dbg !64
  %557 = fadd float %441, %549, !dbg !64
  %558 = fadd float %301, %550, !dbg !65
  %559 = fadd float %302, %551, !dbg !65
  %560 = fadd float %303, %552, !dbg !65
  %561 = fadd float %304, %553, !dbg !65
  %562 = fadd float %305, %554, !dbg !65
  %563 = fadd float %306, %555, !dbg !65
  %564 = fadd float %307, %556, !dbg !65
  %565 = fadd float %308, %557, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %566 = insertelement <1 x float> undef, float %558, i64 0, !dbg !65
  store <1 x float> %566, ptr addrspace(3) %177, align 4, !dbg !65
  %567 = insertelement <1 x float> undef, float %559, i64 0, !dbg !65
  store <1 x float> %567, ptr addrspace(3) %182, align 4, !dbg !65
  %568 = insertelement <1 x float> undef, float %560, i64 0, !dbg !65
  store <1 x float> %568, ptr addrspace(3) %187, align 4, !dbg !65
  %569 = insertelement <1 x float> undef, float %561, i64 0, !dbg !65
  store <1 x float> %569, ptr addrspace(3) %192, align 4, !dbg !65
  %570 = insertelement <1 x float> undef, float %562, i64 0, !dbg !65
  store <1 x float> %570, ptr addrspace(3) %196, align 4, !dbg !65
  %571 = insertelement <1 x float> undef, float %563, i64 0, !dbg !65
  store <1 x float> %571, ptr addrspace(3) %200, align 4, !dbg !65
  %572 = insertelement <1 x float> undef, float %564, i64 0, !dbg !65
  store <1 x float> %572, ptr addrspace(3) %204, align 4, !dbg !65
  %573 = insertelement <1 x float> undef, float %565, i64 0, !dbg !65
  store <1 x float> %573, ptr addrspace(3) %208, align 4, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %574 = load float, ptr addrspace(3) %213, align 16, !dbg !65
  %575 = load float, ptr addrspace(3) %215, align 4, !dbg !65
  %576 = load float, ptr addrspace(3) %217, align 8, !dbg !65
  %577 = load float, ptr addrspace(3) %219, align 4, !dbg !65
  %578 = load float, ptr addrspace(3) %224, align 16, !dbg !65
  %579 = load float, ptr addrspace(3) %226, align 4, !dbg !65
  %580 = load float, ptr addrspace(3) %228, align 8, !dbg !65
  %581 = load float, ptr addrspace(3) %230, align 4, !dbg !65
  %582 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %235, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !66
  %583 = extractvalue { i32, i32 } %582, 0, !dbg !66
  %584 = extractvalue { i32, i32 } %582, 1, !dbg !66
  %585 = trunc i32 %583 to i16, !dbg !66
  %extelt.offset20 = lshr i32 %583, 16, !dbg !66
  %586 = trunc i32 %extelt.offset20 to i16, !dbg !66
  %587 = trunc i32 %584 to i16, !dbg !66
  %extelt.offset21 = lshr i32 %584, 16, !dbg !66
  %588 = trunc i32 %extelt.offset21 to i16, !dbg !66
  %589 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %237, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !66
  %590 = extractvalue { i32, i32 } %589, 0, !dbg !66
  %591 = extractvalue { i32, i32 } %589, 1, !dbg !66
  %592 = trunc i32 %590 to i16, !dbg !66
  %extelt.offset22 = lshr i32 %590, 16, !dbg !66
  %593 = trunc i32 %extelt.offset22 to i16, !dbg !66
  %594 = trunc i32 %591 to i16, !dbg !66
  %extelt.offset23 = lshr i32 %591, 16, !dbg !66
  %595 = trunc i32 %extelt.offset23 to i16, !dbg !66
  %596 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %585) #2, !dbg !67
  %597 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %586) #2, !dbg !67
  %598 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %587) #2, !dbg !67
  %599 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %588) #2, !dbg !67
  %600 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %592) #2, !dbg !67
  %601 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %593) #2, !dbg !67
  %602 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %594) #2, !dbg !67
  %603 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %595) #2, !dbg !67
  %604 = select i1 %260, float %596, float 0.000000e+00, !dbg !36
  %605 = select i1 %260, float %597, float 0.000000e+00, !dbg !36
  %606 = select i1 %260, float %598, float 0.000000e+00, !dbg !36
  %607 = select i1 %260, float %599, float 0.000000e+00, !dbg !36
  %608 = select i1 %261, float %600, float 0.000000e+00, !dbg !36
  %609 = select i1 %261, float %601, float 0.000000e+00, !dbg !36
  %610 = select i1 %261, float %602, float 0.000000e+00, !dbg !36
  %611 = select i1 %261, float %603, float 0.000000e+00, !dbg !36
  %612 = fmul float %214, %252, !dbg !68
  %613 = fmul float %216, %253, !dbg !68
  %614 = fmul float %218, %254, !dbg !68
  %615 = fmul float %220, %255, !dbg !68
  %616 = fmul float %225, %256, !dbg !68
  %617 = fmul float %227, %257, !dbg !68
  %618 = fmul float %229, %258, !dbg !68
  %619 = fmul float %231, %259, !dbg !68
  %620 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %448, i1 %328, i32 0, i1 %328, i32 0, i1 %328) #2, !dbg !69
  %621 = extractvalue { i32, i32 } %620, 0, !dbg !69
  %622 = extractvalue { i32, i32 } %620, 1, !dbg !69
  %623 = trunc i32 %621 to i16, !dbg !69
  %extelt.offset24 = lshr i32 %621, 16, !dbg !69
  %624 = trunc i32 %extelt.offset24 to i16, !dbg !69
  %625 = trunc i32 %622 to i16, !dbg !69
  %extelt.offset25 = lshr i32 %622, 16, !dbg !69
  %626 = trunc i32 %extelt.offset25 to i16, !dbg !69
  %627 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %450, i1 %328, i32 0, i1 %328, i32 0, i1 %328) #2, !dbg !69
  %628 = extractvalue { i32, i32 } %627, 0, !dbg !69
  %629 = extractvalue { i32, i32 } %627, 1, !dbg !69
  %630 = trunc i32 %628 to i16, !dbg !69
  %extelt.offset26 = lshr i32 %628, 16, !dbg !69
  %631 = trunc i32 %extelt.offset26 to i16, !dbg !69
  %632 = trunc i32 %629 to i16, !dbg !69
  %extelt.offset27 = lshr i32 %629, 16, !dbg !69
  %633 = trunc i32 %extelt.offset27 to i16, !dbg !69
  %634 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %623) #2, !dbg !70
  %635 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %624) #2, !dbg !70
  %636 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %625) #2, !dbg !70
  %637 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %626) #2, !dbg !70
  %638 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %630) #2, !dbg !70
  %639 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %631) #2, !dbg !70
  %640 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %632) #2, !dbg !70
  %641 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %633) #2, !dbg !70
  %642 = fmul float %402, %634, !dbg !71
  %643 = fmul float %403, %635, !dbg !71
  %644 = fmul float %404, %636, !dbg !71
  %645 = fmul float %405, %637, !dbg !71
  %646 = fmul float %406, %638, !dbg !71
  %647 = fmul float %407, %639, !dbg !71
  %648 = fmul float %408, %640, !dbg !71
  %649 = fmul float %409, %641, !dbg !71
  %650 = fsub float 0.000000e+00, %642, !dbg !72
  %651 = fsub float 0.000000e+00, %643, !dbg !72
  %652 = fsub float 0.000000e+00, %644, !dbg !72
  %653 = fsub float 0.000000e+00, %645, !dbg !72
  %654 = fsub float 0.000000e+00, %646, !dbg !72
  %655 = fsub float 0.000000e+00, %647, !dbg !72
  %656 = fsub float 0.000000e+00, %648, !dbg !72
  %657 = fsub float 0.000000e+00, %649, !dbg !72
  %658 = select i1 %317, float %650, float 0.000000e+00, !dbg !36
  %659 = select i1 %317, float %651, float 0.000000e+00, !dbg !36
  %660 = select i1 %317, float %652, float 0.000000e+00, !dbg !36
  %661 = select i1 %317, float %653, float 0.000000e+00, !dbg !36
  %662 = select i1 %318, float %654, float 0.000000e+00, !dbg !36
  %663 = select i1 %318, float %655, float 0.000000e+00, !dbg !36
  %664 = select i1 %318, float %656, float 0.000000e+00, !dbg !36
  %665 = select i1 %318, float %657, float 0.000000e+00, !dbg !36
  %666 = fadd float %612, %658, !dbg !73
  %667 = fadd float %613, %659, !dbg !73
  %668 = fadd float %614, %660, !dbg !73
  %669 = fadd float %615, %661, !dbg !73
  %670 = fadd float %616, %662, !dbg !73
  %671 = fadd float %617, %663, !dbg !73
  %672 = fadd float %618, %664, !dbg !73
  %673 = fadd float %619, %665, !dbg !73
  %674 = add i32 %43, 1536, !dbg !74
  %675 = add i32 %44, 1536, !dbg !74
  %676 = sext i32 %674 to i64, !dbg !75
  %677 = getelementptr i16, ptr addrspace(1) %0, i64 %676, !dbg !75
  %678 = sext i32 %675 to i64, !dbg !75
  %679 = getelementptr i16, ptr addrspace(1) %0, i64 %678, !dbg !75
  %680 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %677, i1 %451, i32 0, i1 %451, i32 0, i1 %451) #2, !dbg !76
  %681 = extractvalue { i32, i32 } %680, 0, !dbg !76
  %682 = extractvalue { i32, i32 } %680, 1, !dbg !76
  %683 = trunc i32 %681 to i16, !dbg !76
  %extelt.offset28 = lshr i32 %681, 16, !dbg !76
  %684 = trunc i32 %extelt.offset28 to i16, !dbg !76
  %685 = trunc i32 %682 to i16, !dbg !76
  %extelt.offset29 = lshr i32 %682, 16, !dbg !76
  %686 = trunc i32 %extelt.offset29 to i16, !dbg !76
  %687 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %679, i1 %452, i32 0, i1 %452, i32 0, i1 %452) #2, !dbg !76
  %688 = extractvalue { i32, i32 } %687, 0, !dbg !76
  %689 = extractvalue { i32, i32 } %687, 1, !dbg !76
  %690 = trunc i32 %688 to i16, !dbg !76
  %extelt.offset30 = lshr i32 %688, 16, !dbg !76
  %691 = trunc i32 %extelt.offset30 to i16, !dbg !76
  %692 = trunc i32 %689 to i16, !dbg !76
  %extelt.offset31 = lshr i32 %689, 16, !dbg !76
  %693 = trunc i32 %extelt.offset31 to i16, !dbg !76
  %694 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %683) #2, !dbg !77
  %695 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %684) #2, !dbg !77
  %696 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %685) #2, !dbg !77
  %697 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %686) #2, !dbg !77
  %698 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %690) #2, !dbg !77
  %699 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %691) #2, !dbg !77
  %700 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %692) #2, !dbg !77
  %701 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %693) #2, !dbg !77
  %702 = fmul float %526, %694, !dbg !78
  %703 = fmul float %527, %695, !dbg !78
  %704 = fmul float %528, %696, !dbg !78
  %705 = fmul float %529, %697, !dbg !78
  %706 = fmul float %530, %698, !dbg !78
  %707 = fmul float %531, %699, !dbg !78
  %708 = fmul float %532, %700, !dbg !78
  %709 = fmul float %533, %701, !dbg !78
  %710 = select i1 %442, float %702, float 0.000000e+00, !dbg !36
  %711 = select i1 %442, float %703, float 0.000000e+00, !dbg !36
  %712 = select i1 %442, float %704, float 0.000000e+00, !dbg !36
  %713 = select i1 %442, float %705, float 0.000000e+00, !dbg !36
  %714 = select i1 %443, float %706, float 0.000000e+00, !dbg !36
  %715 = select i1 %443, float %707, float 0.000000e+00, !dbg !36
  %716 = select i1 %443, float %708, float 0.000000e+00, !dbg !36
  %717 = select i1 %443, float %709, float 0.000000e+00, !dbg !36
  %718 = fadd float %666, %710, !dbg !79
  %719 = fadd float %667, %711, !dbg !79
  %720 = fadd float %668, %712, !dbg !79
  %721 = fadd float %669, %713, !dbg !79
  %722 = fadd float %670, %714, !dbg !79
  %723 = fadd float %671, %715, !dbg !79
  %724 = fadd float %672, %716, !dbg !79
  %725 = fadd float %673, %717, !dbg !79
  %726 = fadd float %604, %718, !dbg !80
  %727 = fadd float %605, %719, !dbg !80
  %728 = fadd float %606, %720, !dbg !80
  %729 = fadd float %607, %721, !dbg !80
  %730 = fadd float %608, %722, !dbg !80
  %731 = fadd float %609, %723, !dbg !80
  %732 = fadd float %610, %724, !dbg !80
  %733 = fadd float %611, %725, !dbg !80
  %734 = fadd float %574, %726, !dbg !81
  %735 = fadd float %575, %727, !dbg !81
  %736 = fadd float %576, %728, !dbg !81
  %737 = fadd float %577, %729, !dbg !81
  %738 = fadd float %578, %730, !dbg !81
  %739 = fadd float %579, %731, !dbg !81
  %740 = fadd float %580, %732, !dbg !81
  %741 = fadd float %581, %733, !dbg !81
  %742 = shl i32 %24, 8, !dbg !82
  %743 = add i32 %40, %742, !dbg !83
  %744 = add i32 %41, %742, !dbg !83
  %745 = sext i32 %743 to i64, !dbg !84
  %746 = getelementptr float, ptr addrspace(1) %3, i64 %745, !dbg !84
  %747 = sext i32 %744 to i64, !dbg !84
  %748 = getelementptr float, ptr addrspace(1) %3, i64 %747, !dbg !84
  %749 = bitcast float %734 to i32, !dbg !85
  %750 = bitcast float %735 to i32, !dbg !85
  %751 = bitcast float %736 to i32, !dbg !85
  %752 = bitcast float %737 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %749, i32 %750, i32 %751, i32 %752, ptr addrspace(1) %746, i1 %49) #2, !dbg !85
  %753 = bitcast float %738 to i32, !dbg !85
  %754 = bitcast float %739 to i32, !dbg !85
  %755 = bitcast float %740 to i32, !dbg !85
  %756 = bitcast float %741 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %753, i32 %754, i32 %755, i32 %756, ptr addrspace(1) %748, i1 %50) #2, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cweommahz3d6dh25umjoe2a2air6wu6fu4adabr3tywgaxk6jehq.py", directory: "/tmp/torchinductor_zeus/we")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 23, column: 21, scope: !5)
!14 = !DILocation(line: 24, column: 28, scope: !5)
!15 = !DILocation(line: 24, column: 33, scope: !5)
!16 = !DILocation(line: 25, column: 23, scope: !5)
!17 = !DILocation(line: 26, column: 21, scope: !5)
!18 = !DILocation(line: 28, column: 18, scope: !5)
!19 = !DILocation(line: 30, column: 38, scope: !5)
!20 = !DILocation(line: 30, column: 50, scope: !5)
!21 = !DILocation(line: 30, column: 45, scope: !5)
!22 = !DILocation(line: 30, column: 30, scope: !5)
!23 = !DILocation(line: 30, column: 64, scope: !5)
!24 = !DILocation(line: 30, column: 56, scope: !5)
!25 = !DILocation(line: 30, column: 104, scope: !5)
!26 = !DILocation(line: 31, column: 41, scope: !5)
!27 = !DILocation(line: 31, column: 37, scope: !5)
!28 = !DILocation(line: 31, column: 31, scope: !5)
!29 = !DILocation(line: 31, column: 47, scope: !5)
!30 = !DILocation(line: 32, column: 53, scope: !5)
!31 = !DILocation(line: 32, column: 31, scope: !5)
!32 = !DILocation(line: 32, column: 64, scope: !5)
!33 = !DILocation(line: 32, column: 112, scope: !5)
!34 = !DILocation(line: 35, column: 19, scope: !5)
!35 = !DILocation(line: 36, column: 56, scope: !5)
!36 = !DILocation(line: 0, scope: !5)
!37 = !DILocation(line: 36, column: 122, scope: !5)
!38 = !DILocation(line: 42, column: 19, scope: !5)
!39 = !DILocation(line: 45, column: 20, scope: !5)
!40 = !DILocation(line: 46, column: 55, scope: !5)
!41 = !DILocation(line: 46, column: 31, scope: !5)
!42 = !DILocation(line: 46, column: 74, scope: !5)
!43 = !DILocation(line: 46, column: 82, scope: !5)
!44 = !DILocation(line: 46, column: 66, scope: !5)
!45 = !DILocation(line: 46, column: 133, scope: !5)
!46 = !DILocation(line: 48, column: 40, scope: !5)
!47 = !DILocation(line: 48, column: 46, scope: !5)
!48 = !DILocation(line: 48, column: 31, scope: !5)
!49 = !DILocation(line: 48, column: 56, scope: !5)
!50 = !DILocation(line: 49, column: 20, scope: !5)
!51 = !DILocation(line: 51, column: 13, scope: !5)
!52 = !DILocation(line: 55, column: 20, scope: !5)
!53 = !DILocation(line: 56, column: 19, scope: !5)
!54 = !DILocation(line: 57, column: 52, scope: !5)
!55 = !DILocation(line: 57, column: 31, scope: !5)
!56 = !DILocation(line: 57, column: 79, scope: !5)
!57 = !DILocation(line: 57, column: 63, scope: !5)
!58 = !DILocation(line: 57, column: 130, scope: !5)
!59 = !DILocation(line: 59, column: 37, scope: !5)
!60 = !DILocation(line: 59, column: 43, scope: !5)
!61 = !DILocation(line: 59, column: 31, scope: !5)
!62 = !DILocation(line: 59, column: 53, scope: !5)
!63 = !DILocation(line: 60, column: 20, scope: !5)
!64 = !DILocation(line: 65, column: 20, scope: !5)
!65 = !DILocation(line: 66, column: 19, scope: !5)
!66 = !DILocation(line: 68, column: 64, scope: !5)
!67 = !DILocation(line: 68, column: 130, scope: !5)
!68 = !DILocation(line: 73, column: 20, scope: !5)
!69 = !DILocation(line: 75, column: 63, scope: !5)
!70 = !DILocation(line: 75, column: 130, scope: !5)
!71 = !DILocation(line: 77, column: 20, scope: !5)
!72 = !DILocation(line: 79, column: 13, scope: !5)
!73 = !DILocation(line: 83, column: 20, scope: !5)
!74 = !DILocation(line: 84, column: 53, scope: !5)
!75 = !DILocation(line: 84, column: 31, scope: !5)
!76 = !DILocation(line: 84, column: 64, scope: !5)
!77 = !DILocation(line: 84, column: 131, scope: !5)
!78 = !DILocation(line: 86, column: 20, scope: !5)
!79 = !DILocation(line: 91, column: 20, scope: !5)
!80 = !DILocation(line: 92, column: 20, scope: !5)
!81 = !DILocation(line: 94, column: 20, scope: !5)
!82 = !DILocation(line: 95, column: 45, scope: !5)
!83 = !DILocation(line: 95, column: 40, scope: !5)
!84 = !DILocation(line: 95, column: 25, scope: !5)
!85 = !DILocation(line: 95, column: 58, scope: !5)
!86 = !DILocation(line: 95, column: 4, scope: !5)
