module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x16xbf16>
    %cst_0 = arith.constant dense<1536> : tensor<1x16xi32>
    %cst_1 = arith.constant dense<128> : tensor<64x1xi32>
    %cst_2 = arith.constant dense<512> : tensor<1x16xi32>
    %cst_3 = arith.constant dense<-128> : tensor<64x1xi32>
    %cst_4 = arith.constant dense<-512> : tensor<1x16xi32>
    %cst_5 = arith.constant dense<128> : tensor<64x1xi64>
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<64x16xf32>
    %cst_7 = arith.constant dense<256> : tensor<64x1xi64>
    %cst_8 = arith.constant dense<1024> : tensor<1x16xi32>
    %cst_9 = arith.constant dense<256> : tensor<1x16xi32>
    %cst_10 = arith.constant dense<2048> : tensor<1x16xi32>
    %cst_11 = arith.constant dense<4> : tensor<64x1xi32>
    %cst_12 = arith.constant dense<4> : tensor<1x16xi32>
    %cst_13 = arith.constant dense<256> : tensor<64x1xi32>
    %c64_i32 = arith.constant 64 : i32
    %cst_14 = arith.constant dense<16> : tensor<1x16xi32>
    %c16_i32 = arith.constant 16 : i32
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c16_i32 : i32
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32>
    %3 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<16xi32>) -> tensor<1x16xi32>
    %4 = tt.splat %1 : (i32) -> tensor<1x16xi32>
    %5 = arith.addi %4, %3 : tensor<1x16xi32>
    %6 = arith.cmpi slt, %5, %cst_14 : tensor<1x16xi32>
    %7 = tt.get_program_id x : i32
    %8 = arith.muli %7, %c64_i32 : i32
    %9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %10 = tt.expand_dims %9 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32>
    %11 = tt.splat %8 : (i32) -> tensor<64x1xi32>
    %12 = arith.addi %11, %10 : tensor<64x1xi32>
    %13 = arith.cmpi slt, %12, %cst_13 : tensor<64x1xi32>
    %14 = arith.remsi %5, %cst_12 : tensor<1x16xi32>
    %15 = arith.divsi %5, %cst_12 : tensor<1x16xi32>
    %16 = arith.muli %12, %cst_11 : tensor<64x1xi32>
    %17 = tt.broadcast %14 : (tensor<1x16xi32>) -> tensor<64x16xi32>
    %18 = tt.broadcast %16 : (tensor<64x1xi32>) -> tensor<64x16xi32>
    %19 = arith.addi %17, %18 : tensor<64x16xi32>
    %20 = arith.muli %15, %cst_10 : tensor<1x16xi32>
    %21 = tt.broadcast %20 : (tensor<1x16xi32>) -> tensor<64x16xi32>
    %22 = arith.addi %19, %21 : tensor<64x16xi32>
    %23 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<64x16x!tt.ptr<bf16, 1>>
    %24 = tt.addptr %23, %22 : tensor<64x16x!tt.ptr<bf16, 1>>, tensor<64x16xi32>
    %25 = tt.broadcast %13 : (tensor<64x1xi1>) -> tensor<64x16xi1>
    %26 = tt.broadcast %6 : (tensor<1x16xi1>) -> tensor<64x16xi1>
    %27 = arith.andi %25, %26 : tensor<64x16xi1>
    %28 = tt.load %24, %27 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x16xbf16>
    %29 = arith.extf %28 : tensor<64x16xbf16> to tensor<64x16xf32>
    %30 = arith.muli %14, %cst_9 : tensor<1x16xi32>
    %31 = tt.broadcast %12 : (tensor<64x1xi32>) -> tensor<64x16xi32>
    %32 = tt.broadcast %30 : (tensor<1x16xi32>) -> tensor<64x16xi32>
    %33 = arith.addi %31, %32 : tensor<64x16xi32>
    %34 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<64x16x!tt.ptr<f32, 1>>
    %35 = tt.addptr %34, %33 : tensor<64x16x!tt.ptr<f32, 1>>, tensor<64x16xi32>
    %36 = tt.load %35, %27 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x16xf32>
    %37 = arith.addi %14, %cst_8 : tensor<1x16xi32>
    %38 = tt.broadcast %37 : (tensor<1x16xi32>) -> tensor<64x16xi32>
    %39 = arith.addi %38, %18 : tensor<64x16xi32>
    %40 = arith.addi %39, %21 : tensor<64x16xi32>
    %41 = tt.addptr %23, %40 : tensor<64x16x!tt.ptr<bf16, 1>>, tensor<64x16xi32>
    %42 = tt.load %41, %27 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x16xbf16>
    %43 = arith.extf %42 : tensor<64x16xbf16> to tensor<64x16xf32>
    %44 = arith.extsi %12 : tensor<64x1xi32> to tensor<64x1xi64>
    %45 = arith.cmpi sge, %44, %cst_7 : tensor<64x1xi64>
    %46 = arith.andi %45, %13 : tensor<64x1xi1>
    %47 = tt.broadcast %46 : (tensor<64x1xi1>) -> tensor<64x16xi1>
    %48 = arith.andi %47, %26 : tensor<64x16xi1>
    %49 = tt.load %24, %48, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x16xbf16>
    %50 = arith.extf %49 : tensor<64x16xbf16> to tensor<64x16xf32>
    %51 = tt.broadcast %45 : (tensor<64x1xi1>) -> tensor<64x16xi1>
    %52 = arith.select %51, %50, %cst_6 : tensor<64x16xi1>, tensor<64x16xf32>
    %53 = arith.mulf %29, %36 : tensor<64x16xf32>
    %54 = arith.cmpi sge, %44, %cst_5 : tensor<64x1xi64>
    %55 = arith.addi %14, %cst_4 : tensor<1x16xi32>
    %56 = tt.broadcast %55 : (tensor<1x16xi32>) -> tensor<64x16xi32>
    %57 = arith.addi %56, %18 : tensor<64x16xi32>
    %58 = arith.addi %57, %21 : tensor<64x16xi32>
    %59 = tt.addptr %23, %58 : tensor<64x16x!tt.ptr<bf16, 1>>, tensor<64x16xi32>
    %60 = arith.andi %54, %13 : tensor<64x1xi1>
    %61 = tt.broadcast %60 : (tensor<64x1xi1>) -> tensor<64x16xi1>
    %62 = arith.andi %61, %26 : tensor<64x16xi1>
    %63 = tt.load %59, %62, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x16xbf16>
    %64 = arith.extf %63 : tensor<64x16xbf16> to tensor<64x16xf32>
    %65 = arith.addi %12, %cst_3 : tensor<64x1xi32>
    %66 = tt.broadcast %65 : (tensor<64x1xi32>) -> tensor<64x16xi32>
    %67 = arith.addi %66, %32 : tensor<64x16xi32>
    %68 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x16x!tt.ptr<f32, 1>>
    %69 = tt.addptr %68, %67 : tensor<64x16x!tt.ptr<f32, 1>>, tensor<64x16xi32>
    %70 = tt.load %69, %62, %cst_6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x16xf32>
    %71 = arith.mulf %64, %70 : tensor<64x16xf32>
    %72 = arith.subf %cst_6, %71 : tensor<64x16xf32>
    %73 = tt.broadcast %54 : (tensor<64x1xi1>) -> tensor<64x16xi1>
    %74 = arith.select %73, %72, %cst_6 : tensor<64x16xi1>, tensor<64x16xf32>
    %75 = arith.addf %53, %74 : tensor<64x16xf32>
    %76 = arith.cmpi slt, %44, %cst_5 : tensor<64x1xi64>
    %77 = arith.addi %14, %cst_2 : tensor<1x16xi32>
    %78 = tt.broadcast %77 : (tensor<1x16xi32>) -> tensor<64x16xi32>
    %79 = arith.addi %78, %18 : tensor<64x16xi32>
    %80 = arith.addi %79, %21 : tensor<64x16xi32>
    %81 = tt.addptr %23, %80 : tensor<64x16x!tt.ptr<bf16, 1>>, tensor<64x16xi32>
    %82 = arith.andi %76, %13 : tensor<64x1xi1>
    %83 = tt.broadcast %82 : (tensor<64x1xi1>) -> tensor<64x16xi1>
    %84 = arith.andi %83, %26 : tensor<64x16xi1>
    %85 = tt.load %81, %84, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x16xbf16>
    %86 = arith.extf %85 : tensor<64x16xbf16> to tensor<64x16xf32>
    %87 = arith.addi %12, %cst_1 : tensor<64x1xi32>
    %88 = tt.broadcast %87 : (tensor<64x1xi32>) -> tensor<64x16xi32>
    %89 = arith.addi %88, %32 : tensor<64x16xi32>
    %90 = tt.addptr %68, %89 : tensor<64x16x!tt.ptr<f32, 1>>, tensor<64x16xi32>
    %91 = tt.load %90, %84, %cst_6 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x16xf32>
    %92 = arith.mulf %86, %91 : tensor<64x16xf32>
    %93 = tt.broadcast %76 : (tensor<64x1xi1>) -> tensor<64x16xi1>
    %94 = arith.select %93, %92, %cst_6 : tensor<64x16xi1>, tensor<64x16xf32>
    %95 = arith.addf %75, %94 : tensor<64x16xf32>
    %96 = arith.addf %52, %95 : tensor<64x16xf32>
    %97 = tt.load %41, %48, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x16xbf16>
    %98 = arith.extf %97 : tensor<64x16xbf16> to tensor<64x16xf32>
    %99 = arith.select %51, %98, %cst_6 : tensor<64x16xi1>, tensor<64x16xf32>
    %100 = arith.mulf %43, %36 : tensor<64x16xf32>
    %101 = tt.load %81, %62, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x16xbf16>
    %102 = arith.extf %101 : tensor<64x16xbf16> to tensor<64x16xf32>
    %103 = arith.mulf %102, %70 : tensor<64x16xf32>
    %104 = arith.subf %cst_6, %103 : tensor<64x16xf32>
    %105 = arith.select %73, %104, %cst_6 : tensor<64x16xi1>, tensor<64x16xf32>
    %106 = arith.addf %100, %105 : tensor<64x16xf32>
    %107 = arith.addi %14, %cst_0 : tensor<1x16xi32>
    %108 = tt.broadcast %107 : (tensor<1x16xi32>) -> tensor<64x16xi32>
    %109 = arith.addi %108, %18 : tensor<64x16xi32>
    %110 = arith.addi %109, %21 : tensor<64x16xi32>
    %111 = tt.addptr %23, %110 : tensor<64x16x!tt.ptr<bf16, 1>>, tensor<64x16xi32>
    %112 = tt.load %111, %84, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<64x16xbf16>
    %113 = arith.extf %112 : tensor<64x16xbf16> to tensor<64x16xf32>
    %114 = arith.mulf %113, %91 : tensor<64x16xf32>
    %115 = arith.select %93, %114, %cst_6 : tensor<64x16xi1>, tensor<64x16xf32>
    %116 = arith.addf %106, %115 : tensor<64x16xf32>
    %117 = arith.addf %99, %116 : tensor<64x16xf32>
    %118 = arith.addf %96, %117 : tensor<64x16xf32>
    %119 = arith.muli %15, %cst_8 : tensor<1x16xi32>
    %120 = tt.broadcast %119 : (tensor<1x16xi32>) -> tensor<64x16xi32>
    %121 = arith.addi %19, %120 : tensor<64x16xi32>
    %122 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<64x16x!tt.ptr<f32, 1>>
    %123 = tt.addptr %122, %121 : tensor<64x16x!tt.ptr<f32, 1>>, tensor<64x16xi32>
    tt.store %123, %118, %27 {cache = 1 : i32, evict = 1 : i32} : tensor<64x16xf32>
    tt.return
  }
}
