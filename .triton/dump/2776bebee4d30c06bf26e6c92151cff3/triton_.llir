; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_0 = internal constant [8 x i8] c"<module>"
@assertFile_0 = internal constant [95 x i8] c"/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/torch/_inductor/codecache.py"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp23 < 288256"
@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

declare void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton__0d1d2d3d4d5d6d7d8de9de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = lshr i32 %11, 5, !dbg !10
  %urem = shl i32 %11, 2, !dbg !10
  %13 = and i32 %urem, 1020, !dbg !10
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %15 = mul i32 %14, 2304, !dbg !12
  %16 = add i32 %13, %15, !dbg !13
  %17 = sext i32 %16 to i64, !dbg !14
  %18 = getelementptr i16, ptr addrspace(1) %0, i64 %17, !dbg !14
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !15
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !15
  %22 = trunc i32 %20 to i16, !dbg !15
  %extelt.offset4 = lshr i32 %20, 16, !dbg !15
  %23 = trunc i32 %extelt.offset4 to i16, !dbg !15
  %24 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset5 = lshr i32 %21, 16, !dbg !15
  %25 = trunc i32 %extelt.offset5 to i16, !dbg !15
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #6, !dbg !16
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #6, !dbg !16
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !16
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %30 = or i32 %13, 1024, !dbg !17
  %31 = add i32 %30, %15, !dbg !13
  %32 = sext i32 %31 to i64, !dbg !14
  %33 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !14
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !15
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !15
  %37 = trunc i32 %35 to i16, !dbg !15
  %extelt.offset4.1 = lshr i32 %35, 16, !dbg !15
  %38 = trunc i32 %extelt.offset4.1 to i16, !dbg !15
  %39 = trunc i32 %36 to i16, !dbg !15
  %extelt.offset5.1 = lshr i32 %36, 16, !dbg !15
  %40 = trunc i32 %extelt.offset5.1 to i16, !dbg !15
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #6, !dbg !16
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #6, !dbg !16
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #6, !dbg !16
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #6, !dbg !16
  %45 = or i32 %13, 2048, !dbg !17
  %46 = icmp ult i32 %45, 2304, !dbg !18
  %47 = add i32 %45, %15, !dbg !13
  %48 = sext i32 %47 to i64, !dbg !14
  %49 = getelementptr i16, ptr addrspace(1) %0, i64 %48, !dbg !14
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #6, !dbg !15
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !15
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !15
  %53 = trunc i32 %51 to i16, !dbg !15
  %extelt.offset4.2 = lshr i32 %51, 16, !dbg !15
  %54 = trunc i32 %extelt.offset4.2 to i16, !dbg !15
  %55 = trunc i32 %52 to i16, !dbg !15
  %extelt.offset5.2 = lshr i32 %52, 16, !dbg !15
  %56 = trunc i32 %extelt.offset5.2 to i16, !dbg !15
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #6, !dbg !16
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #6, !dbg !16
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #6, !dbg !16
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #6, !dbg !16
  %61 = insertelement <2 x float> poison, float %26, i64 0, !dbg !19
  %62 = insertelement <2 x float> %61, float %27, i64 1, !dbg !19
  %63 = fmul <2 x float> %62, %62, !dbg !19
  %64 = insertelement <2 x float> poison, float %41, i64 0, !dbg !19
  %65 = insertelement <2 x float> %64, float %42, i64 1, !dbg !19
  %66 = fmul <2 x float> %65, %65, !dbg !19
  %67 = fadd <2 x float> %63, %66, !dbg !20
  %68 = insertelement <2 x float> poison, float %57, i64 0, !dbg !19
  %69 = insertelement <2 x float> %68, float %58, i64 1, !dbg !19
  %70 = fmul <2 x float> %69, %69, !dbg !19
  %71 = insertelement <2 x i1> poison, i1 %46, i64 0, !dbg !20
  %72 = shufflevector <2 x i1> %71, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !20
  %73 = select <2 x i1> %72, <2 x float> %70, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !20
  %74 = fadd <2 x float> %67, %73, !dbg !20
  %75 = insertelement <2 x float> poison, float %29, i64 0, !dbg !19
  %76 = insertelement <2 x float> %75, float %28, i64 1, !dbg !19
  %77 = fmul <2 x float> %76, %76, !dbg !19
  %78 = insertelement <2 x float> poison, float %44, i64 0, !dbg !19
  %79 = insertelement <2 x float> %78, float %43, i64 1, !dbg !19
  %80 = fmul <2 x float> %79, %79, !dbg !19
  %81 = fadd <2 x float> %77, %80, !dbg !20
  %82 = insertelement <2 x float> poison, float %60, i64 0, !dbg !19
  %83 = insertelement <2 x float> %82, float %59, i64 1, !dbg !19
  %84 = fmul <2 x float> %83, %83, !dbg !19
  %85 = select <2 x i1> %72, <2 x float> %84, <2 x float> <float -0.000000e+00, float -0.000000e+00>, !dbg !20
  %86 = fadd <2 x float> %81, %85, !dbg !20
  %87 = and i32 %11, 31, !dbg !10
  %88 = and i32 %12, 7, !dbg !10
  %shift = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %89 = fadd <2 x float> %74, %shift, !dbg !21
  %shift41 = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %90 = fadd <2 x float> %shift41, %89, !dbg !21
  %91 = fadd <2 x float> %86, %90, !dbg !21
  %92 = extractelement <2 x float> %91, i64 0, !dbg !21
  %93 = bitcast float %92 to i32, !dbg !27
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 16, i32 31), !dbg !27
  %95 = bitcast i32 %94 to float, !dbg !27
  %96 = fadd float %92, %95, !dbg !21
  %97 = bitcast float %96 to i32, !dbg !27
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !27
  %99 = bitcast i32 %98 to float, !dbg !27
  %100 = fadd float %96, %99, !dbg !21
  %101 = bitcast float %100 to i32, !dbg !27
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !27
  %103 = bitcast i32 %102 to float, !dbg !27
  %104 = fadd float %100, %103, !dbg !21
  %105 = bitcast float %104 to i32, !dbg !27
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 2, i32 31), !dbg !27
  %107 = bitcast i32 %106 to float, !dbg !27
  %108 = fadd float %104, %107, !dbg !21
  %109 = bitcast float %108 to i32, !dbg !27
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = fadd float %108, %111, !dbg !21
  %113 = icmp eq i32 %87, 0, !dbg !27
  %114 = zext nneg i32 %88 to i64, !dbg !27
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i64 %114, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, float %112, i1 %113) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %116 = icmp slt i32 %11, 8, !dbg !27
  %117 = sext i32 %11 to i64, !dbg !27
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i64 %117, !dbg !27
  %119 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %118, i1 %116) #6, !dbg !27
  %120 = bitcast float %119 to i32, !dbg !27
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !27
  %122 = bitcast i32 %121 to float, !dbg !27
  %123 = fadd float %119, %122, !dbg !21
  %124 = bitcast float %123 to i32, !dbg !27
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !27
  %126 = bitcast i32 %125 to float, !dbg !27
  %127 = fadd float %123, %126, !dbg !21
  %128 = bitcast float %127 to i32, !dbg !27
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !27
  %130 = bitcast i32 %129 to float, !dbg !27
  %131 = fadd float %127, %130, !dbg !21
  %132 = and i32 %11, 7, !dbg !27
  %133 = icmp eq i32 %132, 0, !dbg !27
  %134 = and i1 %116, %133, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, float %131, i1 %134) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %135 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  %136 = sext i32 %14 to i64, !dbg !29
  %137 = getelementptr i64, ptr addrspace(1) %2, i64 %136, !dbg !29
  %138 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %137, i1 true) #6, !dbg !30
  %139 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %137, i1 true) #6, !dbg !30
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %137, i1 true) #6, !dbg !30
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %137, i1 true) #6, !dbg !30
  %142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %137, i1 true) #6, !dbg !30
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 2.304000e+03) #6, !dbg !31
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 2.304000e+03) #6, !dbg !31
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 2.304000e+03) #6, !dbg !31
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 2.304000e+03) #6, !dbg !31
  %147 = fadd float %143, 0x3EE4F8B580000000, !dbg !32
  %148 = add i64 %138, 288256, !dbg !33
  %149 = add i64 %142, 288256, !dbg !33
  %150 = icmp slt i64 %138, 0, !dbg !34
  %151 = icmp slt i64 %142, 0, !dbg !34
  %152 = select i1 %150, i64 %148, i64 %138, !dbg !35
  %153 = select i1 %151, i64 %149, i64 %142, !dbg !35
  %154 = icmp ugt i64 %153, 288255, !dbg !36
  %155 = mul i64 %152, 2304, !dbg !37
  %156 = getelementptr float, ptr addrspace(1) %3, i64 %155
  br label %157, !dbg !38

157:                                              ; preds = %10, %206
  %158 = phi i32 [ 0, %10 ], [ %230, %206 ]
  %159 = phi <4 x float> [ zeroinitializer, %10 ], [ %224, %206 ]
  %160 = or i32 %158, %13, !dbg !39
  %161 = icmp ult i32 %160, 2304, !dbg !40
  %162 = add i32 %160, %15, !dbg !41
  %163 = sext i32 %162 to i64, !dbg !42
  %164 = getelementptr i16, ptr addrspace(1) %0, i64 %163, !dbg !42
  %165 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %164, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #6, !dbg !43
  %166 = extractvalue { i32, i32 } %165, 0, !dbg !43
  %167 = extractvalue { i32, i32 } %165, 1, !dbg !43
  %168 = trunc i32 %166 to i16, !dbg !43
  %extelt.offset = lshr i32 %166, 16, !dbg !43
  %169 = trunc i32 %extelt.offset to i16, !dbg !43
  %170 = trunc i32 %167 to i16, !dbg !43
  %extelt.offset3 = lshr i32 %167, 16, !dbg !43
  %171 = trunc i32 %extelt.offset3 to i16, !dbg !43
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %168) #6, !dbg !44
  %173 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %169) #6, !dbg !44
  %174 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %170) #6, !dbg !44
  %175 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %171) #6, !dbg !44
  %176 = zext nneg i32 %160 to i64, !dbg !45
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !45
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #6, !dbg !46
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !46
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !46
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !46
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !46
  %183 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !46
  %184 = insertelement <4 x i32> %183, i32 %180, i64 1, !dbg !46
  %185 = insertelement <4 x i32> %184, i32 %181, i64 2, !dbg !46
  %186 = insertelement <4 x i32> %185, i32 %182, i64 3, !dbg !46
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !46
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %.not.i15 = icmp eq i32 %188, 0, !dbg !47
  br i1 %.not.i15, label %191, label %189, !dbg !47

189:                                              ; preds = %157
  %190 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !47
  br label %__nv_rsqrtf.exit17, !dbg !47

191:                                              ; preds = %157
  %192 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !47
  br label %__nv_rsqrtf.exit17, !dbg !47

__nv_rsqrtf.exit17:                               ; preds = %189, %191
  %.0.i16 = phi float [ %190, %189 ], [ %192, %191 ], !dbg !47
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %196 = insertelement <4 x float> poison, float %172, i64 0, !dbg !48
  %197 = insertelement <4 x float> %196, float %173, i64 1, !dbg !48
  %198 = insertelement <4 x float> %197, float %174, i64 2, !dbg !48
  %199 = insertelement <4 x float> %198, float %175, i64 3, !dbg !48
  %200 = insertelement <4 x float> poison, float %.0.i16, i64 0, !dbg !48
  %201 = shufflevector <4 x float> %200, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !48
  %202 = fmul <4 x float> %199, %201, !dbg !48
  %203 = fadd <4 x float> %187, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !49
  %204 = fmul <4 x float> %203, %202, !dbg !50
  br i1 %154, label %205, label %206, !dbg !51

205:                                              ; preds = %__nv_rsqrtf.exit17
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 1892, ptr nonnull @assertFunc_0, i64 1), !dbg !51
  br label %206, !dbg !51

206:                                              ; preds = %205, %__nv_rsqrtf.exit17
  %207 = getelementptr float, ptr addrspace(1) %156, i64 %176, !dbg !52
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %207, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #6, !dbg !53
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !53
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !53
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !53
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !53
  %213 = insertelement <4 x i32> poison, i32 %209, i64 0, !dbg !53
  %214 = insertelement <4 x i32> %213, i32 %210, i64 1, !dbg !53
  %215 = insertelement <4 x i32> %214, i32 %211, i64 2, !dbg !53
  %216 = insertelement <4 x i32> %215, i32 %212, i64 3, !dbg !53
  %217 = bitcast <4 x i32> %216 to <4 x float>, !dbg !53
  %218 = fmul <4 x float> %217, <float 4.800000e+01, float 4.800000e+01, float 4.800000e+01, float 4.800000e+01>, !dbg !54
  %219 = fadd <4 x float> %204, %218, !dbg !55
  %220 = fmul <4 x float> %219, %219, !dbg !56
  %221 = insertelement <4 x i1> poison, i1 %161, i64 0, !dbg !57
  %222 = shufflevector <4 x i1> %221, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !57
  %223 = select <4 x i1> %222, <4 x float> %220, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !57
  %224 = fadd <4 x float> %159, %223, !dbg !57
  %225 = getelementptr float, ptr addrspace(1) %5, i64 %163, !dbg !58
  %bc = bitcast <4 x float> %219 to <4 x i32>, !dbg !59
  %226 = extractelement <4 x i32> %bc, i64 0, !dbg !59
  %bc45 = bitcast <4 x float> %219 to <4 x i32>, !dbg !59
  %227 = extractelement <4 x i32> %bc45, i64 1, !dbg !59
  %bc46 = bitcast <4 x float> %219 to <4 x i32>, !dbg !59
  %228 = extractelement <4 x i32> %bc46, i64 2, !dbg !59
  %bc47 = bitcast <4 x float> %219 to <4 x i32>, !dbg !59
  %229 = extractelement <4 x i32> %bc47, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %227, i32 %228, i32 %229, ptr addrspace(1) %225, i1 %161) #6, !dbg !59
  %230 = add nuw nsw i32 %158, 1024, !dbg !38
  %231 = icmp ult i32 %158, 1280, !dbg !38
  br i1 %231, label %157, label %232, !dbg !38

232:                                              ; preds = %206
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %shift42 = shufflevector <4 x float> %224, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !62
  %233 = fadd <4 x float> %224, %shift42, !dbg !62
  %shift43 = shufflevector <4 x float> %224, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !62
  %234 = fadd <4 x float> %shift43, %233, !dbg !62
  %shift44 = shufflevector <4 x float> %224, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !62
  %235 = fadd <4 x float> %shift44, %234, !dbg !62
  %236 = extractelement <4 x float> %235, i64 0, !dbg !62
  %237 = bitcast float %236 to i32, !dbg !60
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 16, i32 31), !dbg !60
  %239 = bitcast i32 %238 to float, !dbg !60
  %240 = fadd float %236, %239, !dbg !62
  %241 = bitcast float %240 to i32, !dbg !60
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !60
  %243 = bitcast i32 %242 to float, !dbg !60
  %244 = fadd float %240, %243, !dbg !62
  %245 = bitcast float %244 to i32, !dbg !60
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !60
  %247 = bitcast i32 %246 to float, !dbg !60
  %248 = fadd float %244, %247, !dbg !62
  %249 = bitcast float %248 to i32, !dbg !60
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !60
  %251 = bitcast i32 %250 to float, !dbg !60
  %252 = fadd float %248, %251, !dbg !62
  %253 = bitcast float %252 to i32, !dbg !60
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 1, i32 31), !dbg !60
  %255 = bitcast i32 %254 to float, !dbg !60
  %256 = fadd float %252, %255, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, float %256, i1 %113) #6, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %257 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %118, i1 %116) #6, !dbg !60
  %258 = bitcast float %257 to i32, !dbg !60
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !60
  %260 = bitcast i32 %259 to float, !dbg !60
  %261 = fadd float %257, %260, !dbg !62
  %262 = bitcast float %261 to i32, !dbg !60
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 2, i32 31), !dbg !60
  %264 = bitcast i32 %263 to float, !dbg !60
  %265 = fadd float %261, %264, !dbg !62
  %266 = bitcast float %265 to i32, !dbg !60
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 1, i32 31), !dbg !60
  %268 = bitcast i32 %267 to float, !dbg !60
  %269 = fadd float %265, %268, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, float %269, i1 %134) #6, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %270 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !60
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float 2.304000e+03) #6, !dbg !65
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float 2.304000e+03) #6, !dbg !65
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float 2.304000e+03) #6, !dbg !65
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float 2.304000e+03) #6, !dbg !65
  %275 = fadd float %271, 0x3EE4F8B580000000, !dbg !66
  %276 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !67
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %276, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !68
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !68
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !68
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !68
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !68
  %282 = bitcast i32 %278 to float, !dbg !68
  %283 = bitcast i32 %279 to float, !dbg !68
  %284 = bitcast i32 %280 to float, !dbg !68
  %285 = bitcast i32 %281 to float, !dbg !68
  %286 = zext nneg i32 %13 to i64, !dbg !69
  %287 = getelementptr float, ptr addrspace(1) %4, i64 %286, !dbg !69
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %287, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !70
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !70
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !70
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !70
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !70
  %293 = bitcast i32 %289 to float, !dbg !70
  %294 = bitcast i32 %290 to float, !dbg !70
  %295 = bitcast i32 %291 to float, !dbg !70
  %296 = bitcast i32 %292 to float, !dbg !70
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %.not.i = icmp eq i32 %297, 0, !dbg !71
  br i1 %.not.i, label %300, label %298, !dbg !71

298:                                              ; preds = %232
  %299 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %275), !dbg !71
  br label %__nv_rsqrtf.exit, !dbg !71

300:                                              ; preds = %232
  %301 = tail call float @llvm.nvvm.rsqrt.approx.f(float %275), !dbg !71
  br label %__nv_rsqrtf.exit, !dbg !71

__nv_rsqrtf.exit:                                 ; preds = %298, %300
  %.0.i = phi float [ %299, %298 ], [ %301, %300 ], !dbg !71
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %305 = fmul float %.0.i, %282, !dbg !72
  %306 = fmul float %.0.i, %283, !dbg !72
  %307 = fmul float %.0.i, %284, !dbg !72
  %308 = fmul float %.0.i, %285, !dbg !72
  %309 = fadd float %293, 1.000000e+00, !dbg !73
  %310 = fadd float %294, 1.000000e+00, !dbg !73
  %311 = fadd float %295, 1.000000e+00, !dbg !73
  %312 = fadd float %296, 1.000000e+00, !dbg !73
  %313 = fmul float %309, %305, !dbg !74
  %314 = fmul float %310, %306, !dbg !74
  %315 = fmul float %311, %307, !dbg !74
  %316 = fmul float %312, %308, !dbg !74
  %317 = getelementptr i16, ptr addrspace(1) %6, i64 %17, !dbg !75
  %318 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %313) #6, !dbg !76
  %319 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %314) #6, !dbg !76
  %320 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %315) #6, !dbg !76
  %321 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %316) #6, !dbg !76
  %322 = insertelement <2 x i16> undef, i16 %318, i64 0, !dbg !76
  %323 = insertelement <2 x i16> %322, i16 %319, i64 1, !dbg !76
  %324 = bitcast <2 x i16> %323 to i32, !dbg !76
  %325 = insertelement <2 x i16> undef, i16 %320, i64 0, !dbg !76
  %326 = insertelement <2 x i16> %325, i16 %321, i64 1, !dbg !76
  %327 = bitcast <2 x i16> %326 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %324, i32 %327, ptr addrspace(1) %317, i1 true) #6, !dbg !76
  %328 = getelementptr i16, ptr addrspace(1) %7, i64 %17, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %324, i32 %327, ptr addrspace(1) %328, i1 true) #6, !dbg !78
  %329 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !67
  %330 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %329, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !68
  %331 = extractvalue { i32, i32, i32, i32 } %330, 0, !dbg !68
  %332 = extractvalue { i32, i32, i32, i32 } %330, 1, !dbg !68
  %333 = extractvalue { i32, i32, i32, i32 } %330, 2, !dbg !68
  %334 = extractvalue { i32, i32, i32, i32 } %330, 3, !dbg !68
  %335 = bitcast i32 %331 to float, !dbg !68
  %336 = bitcast i32 %332 to float, !dbg !68
  %337 = bitcast i32 %333 to float, !dbg !68
  %338 = bitcast i32 %334 to float, !dbg !68
  %339 = zext nneg i32 %30 to i64, !dbg !69
  %340 = getelementptr float, ptr addrspace(1) %4, i64 %339, !dbg !69
  %341 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %340, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !70
  %342 = extractvalue { i32, i32, i32, i32 } %341, 0, !dbg !70
  %343 = extractvalue { i32, i32, i32, i32 } %341, 1, !dbg !70
  %344 = extractvalue { i32, i32, i32, i32 } %341, 2, !dbg !70
  %345 = extractvalue { i32, i32, i32, i32 } %341, 3, !dbg !70
  %346 = bitcast i32 %342 to float, !dbg !70
  %347 = bitcast i32 %343 to float, !dbg !70
  %348 = bitcast i32 %344 to float, !dbg !70
  %349 = bitcast i32 %345 to float, !dbg !70
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %.not.i.1 = icmp eq i32 %350, 0, !dbg !71
  br i1 %.not.i.1, label %353, label %351, !dbg !71

351:                                              ; preds = %__nv_rsqrtf.exit
  %352 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %275), !dbg !71
  br label %__nv_rsqrtf.exit.1, !dbg !71

353:                                              ; preds = %__nv_rsqrtf.exit
  %354 = tail call float @llvm.nvvm.rsqrt.approx.f(float %275), !dbg !71
  br label %__nv_rsqrtf.exit.1, !dbg !71

__nv_rsqrtf.exit.1:                               ; preds = %353, %351
  %.0.i.1 = phi float [ %352, %351 ], [ %354, %353 ], !dbg !71
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %358 = fmul float %.0.i.1, %335, !dbg !72
  %359 = fmul float %.0.i.1, %336, !dbg !72
  %360 = fmul float %.0.i.1, %337, !dbg !72
  %361 = fmul float %.0.i.1, %338, !dbg !72
  %362 = fadd float %346, 1.000000e+00, !dbg !73
  %363 = fadd float %347, 1.000000e+00, !dbg !73
  %364 = fadd float %348, 1.000000e+00, !dbg !73
  %365 = fadd float %349, 1.000000e+00, !dbg !73
  %366 = fmul float %362, %358, !dbg !74
  %367 = fmul float %363, %359, !dbg !74
  %368 = fmul float %364, %360, !dbg !74
  %369 = fmul float %365, %361, !dbg !74
  %370 = getelementptr i16, ptr addrspace(1) %6, i64 %32, !dbg !75
  %371 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %366) #6, !dbg !76
  %372 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %367) #6, !dbg !76
  %373 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %368) #6, !dbg !76
  %374 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %369) #6, !dbg !76
  %375 = insertelement <2 x i16> undef, i16 %371, i64 0, !dbg !76
  %376 = insertelement <2 x i16> %375, i16 %372, i64 1, !dbg !76
  %377 = bitcast <2 x i16> %376 to i32, !dbg !76
  %378 = insertelement <2 x i16> undef, i16 %373, i64 0, !dbg !76
  %379 = insertelement <2 x i16> %378, i16 %374, i64 1, !dbg !76
  %380 = bitcast <2 x i16> %379 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %377, i32 %380, ptr addrspace(1) %370, i1 true) #6, !dbg !76
  %381 = getelementptr i16, ptr addrspace(1) %7, i64 %32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %377, i32 %380, ptr addrspace(1) %381, i1 true) #6, !dbg !78
  %382 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !67
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %382, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #6, !dbg !68
  %384 = zext nneg i32 %45 to i64, !dbg !69
  %385 = getelementptr float, ptr addrspace(1) %4, i64 %384, !dbg !69
  %386 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %385, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #6, !dbg !70
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %.not.i.2 = icmp eq i32 %387, 0, !dbg !71
  br i1 %.not.i.2, label %390, label %388, !dbg !71

388:                                              ; preds = %__nv_rsqrtf.exit.1
  %389 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %275), !dbg !71
  br label %__nv_rsqrtf.exit.2, !dbg !71

390:                                              ; preds = %__nv_rsqrtf.exit.1
  %391 = tail call float @llvm.nvvm.rsqrt.approx.f(float %275), !dbg !71
  br label %__nv_rsqrtf.exit.2, !dbg !71

__nv_rsqrtf.exit.2:                               ; preds = %390, %388
  %.0.i.2 = phi float [ %389, %388 ], [ %391, %390 ], !dbg !71
  %392 = extractvalue { i32, i32, i32, i32 } %386, 3, !dbg !70
  %393 = bitcast i32 %392 to float, !dbg !70
  %394 = extractvalue { i32, i32, i32, i32 } %386, 2, !dbg !70
  %395 = bitcast i32 %394 to float, !dbg !70
  %396 = extractvalue { i32, i32, i32, i32 } %386, 1, !dbg !70
  %397 = bitcast i32 %396 to float, !dbg !70
  %398 = extractvalue { i32, i32, i32, i32 } %386, 0, !dbg !70
  %399 = bitcast i32 %398 to float, !dbg !70
  %400 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !68
  %401 = bitcast i32 %400 to float, !dbg !68
  %402 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !68
  %403 = bitcast i32 %402 to float, !dbg !68
  %404 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !68
  %405 = bitcast i32 %404 to float, !dbg !68
  %406 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !68
  %407 = bitcast i32 %406 to float, !dbg !68
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !71
  %411 = fmul float %.0.i.2, %407, !dbg !72
  %412 = fmul float %.0.i.2, %405, !dbg !72
  %413 = fmul float %.0.i.2, %403, !dbg !72
  %414 = fmul float %.0.i.2, %401, !dbg !72
  %415 = fadd float %399, 1.000000e+00, !dbg !73
  %416 = fadd float %397, 1.000000e+00, !dbg !73
  %417 = fadd float %395, 1.000000e+00, !dbg !73
  %418 = fadd float %393, 1.000000e+00, !dbg !73
  %419 = fmul float %415, %411, !dbg !74
  %420 = fmul float %416, %412, !dbg !74
  %421 = fmul float %417, %413, !dbg !74
  %422 = fmul float %418, %414, !dbg !74
  %423 = getelementptr i16, ptr addrspace(1) %6, i64 %48, !dbg !75
  %424 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %419) #6, !dbg !76
  %425 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %420) #6, !dbg !76
  %426 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %421) #6, !dbg !76
  %427 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %422) #6, !dbg !76
  %428 = insertelement <2 x i16> undef, i16 %424, i64 0, !dbg !76
  %429 = insertelement <2 x i16> %428, i16 %425, i64 1, !dbg !76
  %430 = bitcast <2 x i16> %429 to i32, !dbg !76
  %431 = insertelement <2 x i16> undef, i16 %426, i64 0, !dbg !76
  %432 = insertelement <2 x i16> %431, i16 %427, i64 1, !dbg !76
  %433 = bitcast <2 x i16> %432 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %430, i32 %433, ptr addrspace(1) %423, i1 %46) #6, !dbg !76
  %434 = getelementptr i16, ptr addrspace(1) %7, i64 %48, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %430, i32 %433, ptr addrspace(1) %434, i1 %46) #6, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ccpojtmelk2oc5opsnf5j3fh2ajmyahc4k6fwm43yf6bspbdcsnb.py", directory: "/tmp/torchinductor_zeus/cp")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8de9de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8de9de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8de9de", linkageName: "triton__0d1d2d3d4d5d6d7d8de9de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 28, column: 27, scope: !7)
!18 = !DILocation(line: 29, column: 25, scope: !7)
!19 = !DILocation(line: 33, column: 22, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 36, scope: !7)
!31 = !DILocation(line: 48, column: 22, scope: !7)
!32 = !DILocation(line: 50, column: 23, scope: !7)
!33 = !DILocation(line: 58, column: 24, scope: !7)
!34 = !DILocation(line: 59, column: 24, scope: !7)
!35 = !DILocation(line: 60, column: 39, scope: !7)
!36 = !DILocation(line: 61, column: 41, scope: !7)
!37 = !DILocation(line: 62, column: 46, scope: !7)
!38 = !DILocation(line: 40, column: 36, scope: !7)
!39 = !DILocation(line: 41, column: 27, scope: !7)
!40 = !DILocation(line: 42, column: 25, scope: !7)
!41 = !DILocation(line: 44, column: 40, scope: !7)
!42 = !DILocation(line: 44, column: 34, scope: !7)
!43 = !DILocation(line: 44, column: 51, scope: !7)
!44 = !DILocation(line: 44, column: 103, scope: !7)
!45 = !DILocation(line: 45, column: 35, scope: !7)
!46 = !DILocation(line: 45, column: 40, scope: !7)
!47 = !DILocation(line: 51, column: 30, scope: !7)
!48 = !DILocation(line: 52, column: 23, scope: !7)
!49 = !DILocation(line: 54, column: 24, scope: !7)
!50 = !DILocation(line: 55, column: 24, scope: !7)
!51 = !DILocation(line: 61, column: 58, scope: !7)
!52 = !DILocation(line: 62, column: 35, scope: !7)
!53 = !DILocation(line: 62, column: 55, scope: !7)
!54 = !DILocation(line: 64, column: 24, scope: !7)
!55 = !DILocation(line: 65, column: 24, scope: !7)
!56 = !DILocation(line: 66, column: 24, scope: !7)
!57 = !DILocation(line: 69, column: 40, scope: !7)
!58 = !DILocation(line: 70, column: 29, scope: !7)
!59 = !DILocation(line: 70, column: 53, scope: !7)
!60 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !61)
!61 = !DILocation(line: 71, column: 27, scope: !24)
!62 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !63)
!63 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !64)
!64 = !DILocation(line: 71, column: 27, scope: !22)
!65 = !DILocation(line: 79, column: 24, scope: !7)
!66 = !DILocation(line: 81, column: 24, scope: !7)
!67 = !DILocation(line: 76, column: 36, scope: !7)
!68 = !DILocation(line: 76, column: 53, scope: !7)
!69 = !DILocation(line: 77, column: 35, scope: !7)
!70 = !DILocation(line: 77, column: 40, scope: !7)
!71 = !DILocation(line: 82, column: 30, scope: !7)
!72 = !DILocation(line: 83, column: 24, scope: !7)
!73 = !DILocation(line: 85, column: 24, scope: !7)
!74 = !DILocation(line: 86, column: 24, scope: !7)
!75 = !DILocation(line: 88, column: 29, scope: !7)
!76 = !DILocation(line: 88, column: 53, scope: !7)
!77 = !DILocation(line: 89, column: 29, scope: !7)
!78 = !DILocation(line: 89, column: 53, scope: !7)
!79 = !DILocation(line: 72, column: 4, scope: !7)
