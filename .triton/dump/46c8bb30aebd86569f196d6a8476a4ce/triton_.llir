; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6de7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = lshr i32 %9, 5, !dbg !10
  %urem = and i32 %9, 255, !dbg !10
  %11 = shl nuw nsw i32 %urem, 3, !dbg !10
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %13 = mul i32 %12, 2304, !dbg !12
  %14 = add i32 %11, %13, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr i16, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !15
  %22 = trunc i32 %18 to i16, !dbg !15
  %extelt.offset10 = lshr i32 %18, 16, !dbg !15
  %23 = trunc i32 %extelt.offset10 to i16, !dbg !15
  %24 = trunc i32 %19 to i16, !dbg !15
  %extelt.offset11 = lshr i32 %19, 16, !dbg !15
  %25 = trunc i32 %extelt.offset11 to i16, !dbg !15
  %26 = trunc i32 %20 to i16, !dbg !15
  %extelt.offset12 = lshr i32 %20, 16, !dbg !15
  %27 = trunc i32 %extelt.offset12 to i16, !dbg !15
  %28 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset13 = lshr i32 %21, 16, !dbg !15
  %29 = trunc i32 %extelt.offset13 to i16, !dbg !15
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #6, !dbg !16
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #6, !dbg !16
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #6, !dbg !16
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #6, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #6, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #6, !dbg !16
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #6, !dbg !16
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #6, !dbg !16
  %38 = fmul float %30, %30, !dbg !17
  %39 = fmul float %31, %31, !dbg !17
  %40 = fmul float %32, %32, !dbg !17
  %41 = fmul float %33, %33, !dbg !17
  %42 = fmul float %34, %34, !dbg !17
  %43 = fmul float %35, %35, !dbg !17
  %44 = fmul float %36, %36, !dbg !17
  %45 = fmul float %37, %37, !dbg !17
  %46 = or i32 %11, 2048, !dbg !18
  %47 = icmp ult i32 %46, 2304, !dbg !19
  %48 = add i32 %46, %13, !dbg !13
  %49 = sext i32 %48 to i64, !dbg !14
  %50 = getelementptr i16, ptr addrspace(1) %0, i64 %49, !dbg !14
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #6, !dbg !15
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !15
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !15
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !15
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !15
  %56 = trunc i32 %52 to i16, !dbg !15
  %extelt.offset10.1 = lshr i32 %52, 16, !dbg !15
  %57 = trunc i32 %extelt.offset10.1 to i16, !dbg !15
  %58 = trunc i32 %53 to i16, !dbg !15
  %extelt.offset11.1 = lshr i32 %53, 16, !dbg !15
  %59 = trunc i32 %extelt.offset11.1 to i16, !dbg !15
  %60 = trunc i32 %54 to i16, !dbg !15
  %extelt.offset12.1 = lshr i32 %54, 16, !dbg !15
  %61 = trunc i32 %extelt.offset12.1 to i16, !dbg !15
  %62 = trunc i32 %55 to i16, !dbg !15
  %extelt.offset13.1 = lshr i32 %55, 16, !dbg !15
  %63 = trunc i32 %extelt.offset13.1 to i16, !dbg !15
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #6, !dbg !16
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #6, !dbg !16
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #6, !dbg !16
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #6, !dbg !16
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #6, !dbg !16
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #6, !dbg !16
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #6, !dbg !16
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #6, !dbg !16
  %72 = fmul float %64, %64, !dbg !17
  %73 = fmul float %65, %65, !dbg !17
  %74 = fmul float %66, %66, !dbg !17
  %75 = fmul float %67, %67, !dbg !17
  %76 = fmul float %68, %68, !dbg !17
  %77 = fmul float %69, %69, !dbg !17
  %78 = fmul float %70, %70, !dbg !17
  %79 = fmul float %71, %71, !dbg !17
  %80 = select i1 %47, float %72, float -0.000000e+00, !dbg !20
  %81 = fadd float %38, %80, !dbg !20
  %82 = select i1 %47, float %73, float -0.000000e+00, !dbg !20
  %83 = fadd float %39, %82, !dbg !20
  %84 = select i1 %47, float %74, float -0.000000e+00, !dbg !20
  %85 = fadd float %40, %84, !dbg !20
  %86 = select i1 %47, float %75, float -0.000000e+00, !dbg !20
  %87 = fadd float %41, %86, !dbg !20
  %88 = select i1 %47, float %76, float -0.000000e+00, !dbg !20
  %89 = fadd float %42, %88, !dbg !20
  %90 = select i1 %47, float %77, float -0.000000e+00, !dbg !20
  %91 = fadd float %43, %90, !dbg !20
  %92 = select i1 %47, float %78, float -0.000000e+00, !dbg !20
  %93 = fadd float %44, %92, !dbg !20
  %94 = select i1 %47, float %79, float -0.000000e+00, !dbg !20
  %95 = fadd float %45, %94, !dbg !20
  %96 = and i32 %9, 31, !dbg !10
  %97 = and i32 %10, 7, !dbg !10
  %98 = or i32 %11, 4, !dbg !10
  %99 = fadd float %81, %83, !dbg !21
  %100 = fadd float %85, %99, !dbg !21
  %101 = fadd float %87, %100, !dbg !21
  %102 = fadd float %89, %101, !dbg !21
  %103 = fadd float %91, %102, !dbg !21
  %104 = fadd float %93, %103, !dbg !21
  %105 = fadd float %95, %104, !dbg !21
  %106 = bitcast float %105 to i32, !dbg !27
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !27
  %108 = bitcast i32 %107 to float, !dbg !27
  %109 = fadd float %105, %108, !dbg !21
  %110 = bitcast float %109 to i32, !dbg !27
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !27
  %112 = bitcast i32 %111 to float, !dbg !27
  %113 = fadd float %109, %112, !dbg !21
  %114 = bitcast float %113 to i32, !dbg !27
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !27
  %116 = bitcast i32 %115 to float, !dbg !27
  %117 = fadd float %113, %116, !dbg !21
  %118 = bitcast float %117 to i32, !dbg !27
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !27
  %120 = bitcast i32 %119 to float, !dbg !27
  %121 = fadd float %117, %120, !dbg !21
  %122 = bitcast float %121 to i32, !dbg !27
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !27
  %124 = bitcast i32 %123 to float, !dbg !27
  %125 = fadd float %121, %124, !dbg !21
  %126 = icmp eq i32 %96, 0, !dbg !27
  %127 = zext nneg i32 %97 to i64, !dbg !27
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i64 %127, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, float %125, i1 %126) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %129 = icmp slt i32 %9, 8, !dbg !27
  %130 = sext i32 %9 to i64, !dbg !27
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i64 %130, !dbg !27
  %132 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %131, i1 %129) #6, !dbg !27
  %133 = bitcast float %132 to i32, !dbg !27
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 4, i32 31), !dbg !27
  %135 = bitcast i32 %134 to float, !dbg !27
  %136 = fadd float %132, %135, !dbg !21
  %137 = bitcast float %136 to i32, !dbg !27
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 2, i32 31), !dbg !27
  %139 = bitcast i32 %138 to float, !dbg !27
  %140 = fadd float %136, %139, !dbg !21
  %141 = bitcast float %140 to i32, !dbg !27
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !27
  %143 = bitcast i32 %142 to float, !dbg !27
  %144 = fadd float %140, %143, !dbg !21
  %145 = and i32 %9, 7, !dbg !27
  %146 = icmp eq i32 %145, 0, !dbg !27
  %147 = and i1 %129, %146, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, float %144, i1 %147) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %148 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %149 = insertelement <1 x float> undef, float %148, i64 0, !dbg !29
  store <1 x float> %149, ptr addrspace(3) @global_smem, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %150 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %151 = sext i32 %12 to i64, !dbg !30
  %152 = getelementptr float, ptr addrspace(1) %4, i64 %151, !dbg !30
  %153 = icmp eq i32 %urem, 0, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %152, i1 %153) #6, !dbg !31
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !32
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !32
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !32
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !32
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !32
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !32
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !32
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.304000e+03) #6, !dbg !32
  %162 = fadd float %154, 0x3EE4F8B580000000, !dbg !33
  br label %163, !dbg !34

163:                                              ; preds = %8, %__nv_rsqrtf.exit61
  %164 = phi i1 [ true, %8 ], [ false, %__nv_rsqrtf.exit61 ]
  %165 = phi i32 [ 0, %8 ], [ 2048, %__nv_rsqrtf.exit61 ]
  %166 = phi <8 x float> [ zeroinitializer, %8 ], [ %270, %__nv_rsqrtf.exit61 ]
  %167 = or i32 %165, %11, !dbg !35
  %168 = or i32 %165, %98, !dbg !35
  %169 = icmp ult i32 %167, 2304, !dbg !36
  %170 = add i32 %167, %13, !dbg !37
  %171 = add i32 %168, %13, !dbg !37
  %172 = sext i32 %170 to i64, !dbg !38
  %173 = getelementptr i16, ptr addrspace(1) %0, i64 %172, !dbg !38
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %173, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169) #6, !dbg !39
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !39
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !39
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !39
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !39
  %179 = trunc i32 %175 to i16, !dbg !39
  %extelt.offset6 = lshr i32 %175, 16, !dbg !39
  %180 = trunc i32 %extelt.offset6 to i16, !dbg !39
  %181 = trunc i32 %176 to i16, !dbg !39
  %extelt.offset7 = lshr i32 %176, 16, !dbg !39
  %182 = trunc i32 %extelt.offset7 to i16, !dbg !39
  %183 = trunc i32 %177 to i16, !dbg !39
  %extelt.offset8 = lshr i32 %177, 16, !dbg !39
  %184 = trunc i32 %extelt.offset8 to i16, !dbg !39
  %185 = trunc i32 %178 to i16, !dbg !39
  %extelt.offset9 = lshr i32 %178, 16, !dbg !39
  %186 = trunc i32 %extelt.offset9 to i16, !dbg !39
  %187 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %179) #6, !dbg !40
  %188 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %180) #6, !dbg !40
  %189 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %181) #6, !dbg !40
  %190 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %182) #6, !dbg !40
  %191 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %183) #6, !dbg !40
  %192 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %184) #6, !dbg !40
  %193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %185) #6, !dbg !40
  %194 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %186) #6, !dbg !40
  %195 = zext nneg i32 %167 to i64, !dbg !41
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !41
  %197 = zext nneg i32 %168 to i64, !dbg !41
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %197, !dbg !41
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %196, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169) #6, !dbg !42
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !42
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !42
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !42
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !42
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169) #6, !dbg !42
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !42
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !42
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !42
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !42
  %209 = insertelement <8 x i32> poison, i32 %200, i64 0, !dbg !42
  %210 = insertelement <8 x i32> %209, i32 %201, i64 1, !dbg !42
  %211 = insertelement <8 x i32> %210, i32 %202, i64 2, !dbg !42
  %212 = insertelement <8 x i32> %211, i32 %203, i64 3, !dbg !42
  %213 = insertelement <8 x i32> %212, i32 %205, i64 4, !dbg !42
  %214 = insertelement <8 x i32> %213, i32 %206, i64 5, !dbg !42
  %215 = insertelement <8 x i32> %214, i32 %207, i64 6, !dbg !42
  %216 = insertelement <8 x i32> %215, i32 %208, i64 7, !dbg !42
  %217 = bitcast <8 x i32> %216 to <8 x float>, !dbg !42
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !43
  %219 = sext i32 %171 to i64, !dbg !43
  %220 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !43
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %218, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169) #6, !dbg !44
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !44
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !44
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !44
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !44
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %220, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169) #6, !dbg !44
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !44
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !44
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !44
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !44
  %231 = insertelement <8 x i32> poison, i32 %222, i64 0, !dbg !44
  %232 = insertelement <8 x i32> %231, i32 %223, i64 1, !dbg !44
  %233 = insertelement <8 x i32> %232, i32 %224, i64 2, !dbg !44
  %234 = insertelement <8 x i32> %233, i32 %225, i64 3, !dbg !44
  %235 = insertelement <8 x i32> %234, i32 %227, i64 4, !dbg !44
  %236 = insertelement <8 x i32> %235, i32 %228, i64 5, !dbg !44
  %237 = insertelement <8 x i32> %236, i32 %229, i64 6, !dbg !44
  %238 = insertelement <8 x i32> %237, i32 %230, i64 7, !dbg !44
  %239 = bitcast <8 x i32> %238 to <8 x float>, !dbg !44
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %.not.i59 = icmp eq i32 %240, 0, !dbg !45
  br i1 %.not.i59, label %243, label %241, !dbg !45

241:                                              ; preds = %163
  %242 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %162), !dbg !45
  br label %__nv_rsqrtf.exit61, !dbg !45

243:                                              ; preds = %163
  %244 = tail call float @llvm.nvvm.rsqrt.approx.f(float %162), !dbg !45
  br label %__nv_rsqrtf.exit61, !dbg !45

__nv_rsqrtf.exit61:                               ; preds = %241, %243
  %.0.i60 = phi float [ %242, %241 ], [ %244, %243 ], !dbg !45
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %252 = insertelement <8 x float> poison, float %187, i64 0, !dbg !46
  %253 = insertelement <8 x float> %252, float %188, i64 1, !dbg !46
  %254 = insertelement <8 x float> %253, float %189, i64 2, !dbg !46
  %255 = insertelement <8 x float> %254, float %190, i64 3, !dbg !46
  %256 = insertelement <8 x float> %255, float %191, i64 4, !dbg !46
  %257 = insertelement <8 x float> %256, float %192, i64 5, !dbg !46
  %258 = insertelement <8 x float> %257, float %193, i64 6, !dbg !46
  %259 = insertelement <8 x float> %258, float %194, i64 7, !dbg !46
  %260 = insertelement <8 x float> poison, float %.0.i60, i64 0, !dbg !46
  %261 = shufflevector <8 x float> %260, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !46
  %262 = fmul <8 x float> %259, %261, !dbg !46
  %263 = fadd <8 x float> %217, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !47
  %264 = fmul <8 x float> %263, %262, !dbg !48
  %265 = fadd <8 x float> %264, %239, !dbg !49
  %266 = fmul <8 x float> %265, %265, !dbg !50
  %267 = insertelement <8 x i1> poison, i1 %169, i64 0, !dbg !51
  %268 = shufflevector <8 x i1> %267, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !51
  %269 = select <8 x i1> %268, <8 x float> %266, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !51
  %270 = fadd <8 x float> %166, %269, !dbg !51
  br i1 %164, label %163, label %271, !dbg !34

271:                                              ; preds = %__nv_rsqrtf.exit61
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %shift = shufflevector <8 x float> %270, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %272 = fadd <8 x float> %270, %shift, !dbg !54
  %shift113 = shufflevector <8 x float> %270, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %273 = fadd <8 x float> %shift113, %272, !dbg !54
  %shift114 = shufflevector <8 x float> %270, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %274 = fadd <8 x float> %shift114, %273, !dbg !54
  %shift115 = shufflevector <8 x float> %270, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %275 = fadd <8 x float> %shift115, %274, !dbg !54
  %shift116 = shufflevector <8 x float> %270, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %276 = fadd <8 x float> %shift116, %275, !dbg !54
  %shift117 = shufflevector <8 x float> %270, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %277 = fadd <8 x float> %shift117, %276, !dbg !54
  %shift118 = shufflevector <8 x float> %270, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %278 = fadd <8 x float> %shift118, %277, !dbg !54
  %279 = extractelement <8 x float> %278, i64 0, !dbg !54
  %280 = bitcast float %279 to i32, !dbg !52
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 16, i32 31), !dbg !52
  %282 = bitcast i32 %281 to float, !dbg !52
  %283 = fadd float %279, %282, !dbg !54
  %284 = bitcast float %283 to i32, !dbg !52
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 8, i32 31), !dbg !52
  %286 = bitcast i32 %285 to float, !dbg !52
  %287 = fadd float %283, %286, !dbg !54
  %288 = bitcast float %287 to i32, !dbg !52
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 4, i32 31), !dbg !52
  %290 = bitcast i32 %289 to float, !dbg !52
  %291 = fadd float %287, %290, !dbg !54
  %292 = bitcast float %291 to i32, !dbg !52
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 2, i32 31), !dbg !52
  %294 = bitcast i32 %293 to float, !dbg !52
  %295 = fadd float %291, %294, !dbg !54
  %296 = bitcast float %295 to i32, !dbg !52
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 1, i32 31), !dbg !52
  %298 = bitcast i32 %297 to float, !dbg !52
  %299 = fadd float %295, %298, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, float %299, i1 %126) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %300 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %131, i1 %129) #6, !dbg !52
  %301 = bitcast float %300 to i32, !dbg !52
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 4, i32 31), !dbg !52
  %303 = bitcast i32 %302 to float, !dbg !52
  %304 = fadd float %300, %303, !dbg !54
  %305 = bitcast float %304 to i32, !dbg !52
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 2, i32 31), !dbg !52
  %307 = bitcast i32 %306 to float, !dbg !52
  %308 = fadd float %304, %307, !dbg !54
  %309 = bitcast float %308 to i32, !dbg !52
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 1, i32 31), !dbg !52
  %311 = bitcast i32 %310 to float, !dbg !52
  %312 = fadd float %308, %311, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, float %312, i1 %147) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %313 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !52
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float 2.304000e+03) #6, !dbg !57
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float 2.304000e+03) #6, !dbg !57
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float 2.304000e+03) #6, !dbg !57
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float 2.304000e+03) #6, !dbg !57
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float 2.304000e+03) #6, !dbg !57
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float 2.304000e+03) #6, !dbg !57
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float 2.304000e+03) #6, !dbg !57
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float 2.304000e+03) #6, !dbg !57
  %322 = fadd float %314, 0x3EE4F8B580000000, !dbg !58
  br label %323, !dbg !59

323:                                              ; preds = %271, %__nv_rsqrtf.exit37
  %324 = phi i1 [ true, %271 ], [ false, %__nv_rsqrtf.exit37 ]
  %325 = phi i32 [ 0, %271 ], [ 2048, %__nv_rsqrtf.exit37 ]
  %326 = or i32 %325, %11, !dbg !60
  %327 = or i32 %325, %98, !dbg !60
  %328 = icmp ult i32 %326, 2304, !dbg !61
  %329 = add i32 %326, %13, !dbg !62
  %330 = add i32 %327, %13, !dbg !62
  %331 = sext i32 %329 to i64, !dbg !63
  %332 = getelementptr i16, ptr addrspace(1) %0, i64 %331, !dbg !63
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %332, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328) #6, !dbg !64
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !64
  %335 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !64
  %336 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !64
  %337 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !64
  %338 = trunc i32 %334 to i16, !dbg !64
  %extelt.offset = lshr i32 %334, 16, !dbg !64
  %339 = trunc i32 %extelt.offset to i16, !dbg !64
  %340 = trunc i32 %335 to i16, !dbg !64
  %extelt.offset3 = lshr i32 %335, 16, !dbg !64
  %341 = trunc i32 %extelt.offset3 to i16, !dbg !64
  %342 = trunc i32 %336 to i16, !dbg !64
  %extelt.offset4 = lshr i32 %336, 16, !dbg !64
  %343 = trunc i32 %extelt.offset4 to i16, !dbg !64
  %344 = trunc i32 %337 to i16, !dbg !64
  %extelt.offset5 = lshr i32 %337, 16, !dbg !64
  %345 = trunc i32 %extelt.offset5 to i16, !dbg !64
  %346 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #6, !dbg !65
  %347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #6, !dbg !65
  %348 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %340) #6, !dbg !65
  %349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %341) #6, !dbg !65
  %350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %342) #6, !dbg !65
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %343) #6, !dbg !65
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %344) #6, !dbg !65
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #6, !dbg !65
  %354 = zext nneg i32 %326 to i64, !dbg !66
  %355 = getelementptr float, ptr addrspace(1) %1, i64 %354, !dbg !66
  %356 = zext nneg i32 %327 to i64, !dbg !66
  %357 = getelementptr float, ptr addrspace(1) %1, i64 %356, !dbg !66
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %355, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328) #6, !dbg !67
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !67
  %360 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !67
  %361 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !67
  %362 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !67
  %363 = bitcast i32 %359 to float, !dbg !67
  %364 = bitcast i32 %360 to float, !dbg !67
  %365 = bitcast i32 %361 to float, !dbg !67
  %366 = bitcast i32 %362 to float, !dbg !67
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %357, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328) #6, !dbg !67
  %368 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !67
  %369 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !67
  %370 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !67
  %371 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !67
  %372 = bitcast i32 %368 to float, !dbg !67
  %373 = bitcast i32 %369 to float, !dbg !67
  %374 = bitcast i32 %370 to float, !dbg !67
  %375 = bitcast i32 %371 to float, !dbg !67
  %376 = getelementptr float, ptr addrspace(1) %2, i64 %331, !dbg !68
  %377 = sext i32 %330 to i64, !dbg !68
  %378 = getelementptr float, ptr addrspace(1) %2, i64 %377, !dbg !68
  %379 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %376, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328) #6, !dbg !69
  %380 = extractvalue { i32, i32, i32, i32 } %379, 0, !dbg !69
  %381 = extractvalue { i32, i32, i32, i32 } %379, 1, !dbg !69
  %382 = extractvalue { i32, i32, i32, i32 } %379, 2, !dbg !69
  %383 = extractvalue { i32, i32, i32, i32 } %379, 3, !dbg !69
  %384 = bitcast i32 %380 to float, !dbg !69
  %385 = bitcast i32 %381 to float, !dbg !69
  %386 = bitcast i32 %382 to float, !dbg !69
  %387 = bitcast i32 %383 to float, !dbg !69
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %378, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328) #6, !dbg !69
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !69
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !69
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !69
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !69
  %393 = bitcast i32 %389 to float, !dbg !69
  %394 = bitcast i32 %390 to float, !dbg !69
  %395 = bitcast i32 %391 to float, !dbg !69
  %396 = bitcast i32 %392 to float, !dbg !69
  %397 = getelementptr float, ptr addrspace(1) %3, i64 %354, !dbg !70
  %398 = getelementptr float, ptr addrspace(1) %3, i64 %356, !dbg !70
  %399 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %397, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328) #6, !dbg !71
  %400 = extractvalue { i32, i32, i32, i32 } %399, 0, !dbg !71
  %401 = extractvalue { i32, i32, i32, i32 } %399, 1, !dbg !71
  %402 = extractvalue { i32, i32, i32, i32 } %399, 2, !dbg !71
  %403 = extractvalue { i32, i32, i32, i32 } %399, 3, !dbg !71
  %404 = bitcast i32 %400 to float, !dbg !71
  %405 = bitcast i32 %401 to float, !dbg !71
  %406 = bitcast i32 %402 to float, !dbg !71
  %407 = bitcast i32 %403 to float, !dbg !71
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %398, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328, i32 0, i1 %328) #6, !dbg !71
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !71
  %410 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !71
  %411 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !71
  %412 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !71
  %413 = bitcast i32 %409 to float, !dbg !71
  %414 = bitcast i32 %410 to float, !dbg !71
  %415 = bitcast i32 %411 to float, !dbg !71
  %416 = bitcast i32 %412 to float, !dbg !71
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %.not.i = icmp eq i32 %417, 0, !dbg !72
  br i1 %.not.i, label %420, label %418, !dbg !72

418:                                              ; preds = %323
  %419 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %162), !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !72

420:                                              ; preds = %323
  %421 = tail call float @llvm.nvvm.rsqrt.approx.f(float %162), !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !72

__nv_rsqrtf.exit:                                 ; preds = %418, %420
  %.0.i = phi float [ %419, %418 ], [ %421, %420 ], !dbg !72
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !72
  %429 = fmul float %346, %.0.i, !dbg !73
  %430 = fmul float %347, %.0.i, !dbg !73
  %431 = fmul float %348, %.0.i, !dbg !73
  %432 = fmul float %349, %.0.i, !dbg !73
  %433 = fmul float %350, %.0.i, !dbg !73
  %434 = fmul float %351, %.0.i, !dbg !73
  %435 = fmul float %352, %.0.i, !dbg !73
  %436 = fmul float %353, %.0.i, !dbg !73
  %437 = fadd float %363, 1.000000e+00, !dbg !74
  %438 = fadd float %364, 1.000000e+00, !dbg !74
  %439 = fadd float %365, 1.000000e+00, !dbg !74
  %440 = fadd float %366, 1.000000e+00, !dbg !74
  %441 = fadd float %372, 1.000000e+00, !dbg !74
  %442 = fadd float %373, 1.000000e+00, !dbg !74
  %443 = fadd float %374, 1.000000e+00, !dbg !74
  %444 = fadd float %375, 1.000000e+00, !dbg !74
  %445 = fmul float %437, %429, !dbg !75
  %446 = fmul float %438, %430, !dbg !75
  %447 = fmul float %439, %431, !dbg !75
  %448 = fmul float %440, %432, !dbg !75
  %449 = fmul float %441, %433, !dbg !75
  %450 = fmul float %442, %434, !dbg !75
  %451 = fmul float %443, %435, !dbg !75
  %452 = fmul float %444, %436, !dbg !75
  %453 = fadd float %445, %384, !dbg !76
  %454 = fadd float %446, %385, !dbg !76
  %455 = fadd float %447, %386, !dbg !76
  %456 = fadd float %448, %387, !dbg !76
  %457 = fadd float %449, %393, !dbg !76
  %458 = fadd float %450, %394, !dbg !76
  %459 = fadd float %451, %395, !dbg !76
  %460 = fadd float %452, %396, !dbg !76
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not.i35 = icmp eq i32 %461, 0, !dbg !77
  br i1 %.not.i35, label %464, label %462, !dbg !77

462:                                              ; preds = %__nv_rsqrtf.exit
  %463 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %322), !dbg !77
  br label %__nv_rsqrtf.exit37, !dbg !77

464:                                              ; preds = %__nv_rsqrtf.exit
  %465 = tail call float @llvm.nvvm.rsqrt.approx.f(float %322), !dbg !77
  br label %__nv_rsqrtf.exit37, !dbg !77

__nv_rsqrtf.exit37:                               ; preds = %462, %464
  %.0.i36 = phi float [ %463, %462 ], [ %465, %464 ], !dbg !77
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %473 = fmul float %453, %.0.i36, !dbg !78
  %474 = fmul float %454, %.0.i36, !dbg !78
  %475 = fmul float %455, %.0.i36, !dbg !78
  %476 = fmul float %456, %.0.i36, !dbg !78
  %477 = fmul float %457, %.0.i36, !dbg !78
  %478 = fmul float %458, %.0.i36, !dbg !78
  %479 = fmul float %459, %.0.i36, !dbg !78
  %480 = fmul float %460, %.0.i36, !dbg !78
  %481 = fadd float %404, 1.000000e+00, !dbg !79
  %482 = fadd float %405, 1.000000e+00, !dbg !79
  %483 = fadd float %406, 1.000000e+00, !dbg !79
  %484 = fadd float %407, 1.000000e+00, !dbg !79
  %485 = fadd float %413, 1.000000e+00, !dbg !79
  %486 = fadd float %414, 1.000000e+00, !dbg !79
  %487 = fadd float %415, 1.000000e+00, !dbg !79
  %488 = fadd float %416, 1.000000e+00, !dbg !79
  %489 = fmul float %481, %473, !dbg !80
  %490 = fmul float %482, %474, !dbg !80
  %491 = fmul float %483, %475, !dbg !80
  %492 = fmul float %484, %476, !dbg !80
  %493 = fmul float %485, %477, !dbg !80
  %494 = fmul float %486, %478, !dbg !80
  %495 = fmul float %487, %479, !dbg !80
  %496 = fmul float %488, %480, !dbg !80
  %497 = getelementptr i16, ptr addrspace(1) %5, i64 %331, !dbg !81
  %498 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %489) #6, !dbg !82
  %499 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %490) #6, !dbg !82
  %500 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %491) #6, !dbg !82
  %501 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %492) #6, !dbg !82
  %502 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %493) #6, !dbg !82
  %503 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %494) #6, !dbg !82
  %504 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %495) #6, !dbg !82
  %505 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %496) #6, !dbg !82
  %506 = insertelement <2 x i16> undef, i16 %498, i64 0, !dbg !82
  %507 = insertelement <2 x i16> %506, i16 %499, i64 1, !dbg !82
  %508 = bitcast <2 x i16> %507 to i32, !dbg !82
  %509 = insertelement <2 x i16> undef, i16 %500, i64 0, !dbg !82
  %510 = insertelement <2 x i16> %509, i16 %501, i64 1, !dbg !82
  %511 = bitcast <2 x i16> %510 to i32, !dbg !82
  %512 = insertelement <2 x i16> undef, i16 %502, i64 0, !dbg !82
  %513 = insertelement <2 x i16> %512, i16 %503, i64 1, !dbg !82
  %514 = bitcast <2 x i16> %513 to i32, !dbg !82
  %515 = insertelement <2 x i16> undef, i16 %504, i64 0, !dbg !82
  %516 = insertelement <2 x i16> %515, i16 %505, i64 1, !dbg !82
  %517 = bitcast <2 x i16> %516 to i32, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %508, i32 %511, i32 %514, i32 %517, ptr addrspace(1) %497, i1 %328) #6, !dbg !82
  br i1 %324, label %323, label %518, !dbg !59

518:                                              ; preds = %__nv_rsqrtf.exit37
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "clvpq6ey7btmmiv4ktvo4b5avifyxs2kekvhsjngugds3ur3627t.py", directory: "/tmp/torchinductor_zeus/lv")
!4 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7de", linkageName: "triton__0d1d2d3d4d5d6de7de", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 33, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !26)
!26 = !DILocation(line: 37, column: 25, scope: !22)
!27 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 25, scope: !24)
!29 = !DILocation(line: 37, column: 28, scope: !7)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 49, column: 22, scope: !7)
!33 = !DILocation(line: 51, column: 23, scope: !7)
!34 = !DILocation(line: 40, column: 36, scope: !7)
!35 = !DILocation(line: 41, column: 27, scope: !7)
!36 = !DILocation(line: 42, column: 25, scope: !7)
!37 = !DILocation(line: 44, column: 40, scope: !7)
!38 = !DILocation(line: 44, column: 34, scope: !7)
!39 = !DILocation(line: 44, column: 51, scope: !7)
!40 = !DILocation(line: 44, column: 102, scope: !7)
!41 = !DILocation(line: 45, column: 35, scope: !7)
!42 = !DILocation(line: 45, column: 40, scope: !7)
!43 = !DILocation(line: 46, column: 35, scope: !7)
!44 = !DILocation(line: 46, column: 52, scope: !7)
!45 = !DILocation(line: 52, column: 30, scope: !7)
!46 = !DILocation(line: 53, column: 23, scope: !7)
!47 = !DILocation(line: 55, column: 24, scope: !7)
!48 = !DILocation(line: 56, column: 24, scope: !7)
!49 = !DILocation(line: 59, column: 24, scope: !7)
!50 = !DILocation(line: 60, column: 24, scope: !7)
!51 = !DILocation(line: 63, column: 40, scope: !7)
!52 = !DILocation(line: 243, column: 36, scope: !24, inlinedAt: !53)
!53 = !DILocation(line: 64, column: 27, scope: !24)
!54 = !DILocation(line: 233, column: 15, scope: !22, inlinedAt: !55)
!55 = !DILocation(line: 243, column: 36, scope: !22, inlinedAt: !56)
!56 = !DILocation(line: 64, column: 27, scope: !22)
!57 = !DILocation(line: 86, column: 24, scope: !7)
!58 = !DILocation(line: 87, column: 24, scope: !7)
!59 = !DILocation(line: 65, column: 36, scope: !7)
!60 = !DILocation(line: 66, column: 27, scope: !7)
!61 = !DILocation(line: 67, column: 25, scope: !7)
!62 = !DILocation(line: 69, column: 41, scope: !7)
!63 = !DILocation(line: 69, column: 35, scope: !7)
!64 = !DILocation(line: 69, column: 52, scope: !7)
!65 = !DILocation(line: 69, column: 104, scope: !7)
!66 = !DILocation(line: 70, column: 35, scope: !7)
!67 = !DILocation(line: 70, column: 40, scope: !7)
!68 = !DILocation(line: 71, column: 35, scope: !7)
!69 = !DILocation(line: 71, column: 52, scope: !7)
!70 = !DILocation(line: 72, column: 35, scope: !7)
!71 = !DILocation(line: 72, column: 40, scope: !7)
!72 = !DILocation(line: 78, column: 30, scope: !7)
!73 = !DILocation(line: 79, column: 24, scope: !7)
!74 = !DILocation(line: 81, column: 24, scope: !7)
!75 = !DILocation(line: 82, column: 24, scope: !7)
!76 = !DILocation(line: 85, column: 24, scope: !7)
!77 = !DILocation(line: 88, column: 30, scope: !7)
!78 = !DILocation(line: 89, column: 24, scope: !7)
!79 = !DILocation(line: 90, column: 24, scope: !7)
!80 = !DILocation(line: 91, column: 24, scope: !7)
!81 = !DILocation(line: 93, column: 29, scope: !7)
!82 = !DILocation(line: 93, column: 53, scope: !7)
!83 = !DILocation(line: 65, column: 4, scope: !7)
