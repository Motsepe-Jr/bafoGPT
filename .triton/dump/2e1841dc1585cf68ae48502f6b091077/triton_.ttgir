#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [8], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 89 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4d5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<256> : tensor<512xi32, #blocked>
    %cst_0 = arith.constant dense<8192> : tensor<512xi32, #blocked>
    %cst_1 = arith.constant dense<2097152> : tensor<512xi32, #blocked>
    %cst_2 = arith.constant dense<8> : tensor<512xi32, #blocked>
    %cst_3 = arith.constant dense<16777216> : tensor<512xi32, #blocked>
    %cst_4 = arith.constant dense<256> : tensor<512xi64, #blocked>
    %cst_5 = arith.constant dense<2> : tensor<512xi32, #blocked>
    %cst_6 = arith.constant dense<1024> : tensor<512xi32, #blocked>
    %cst_7 = arith.constant dense<4096> : tensor<512xi32, #blocked>
    %cst_8 = arith.constant dense<33554432> : tensor<512xi32, #blocked>
    %cst_9 = arith.constant dense<384> : tensor<512xi32, #blocked>
    %cst_10 = arith.constant dense<640> : tensor<512xi32, #blocked>
    %cst_11 = arith.constant dense<512> : tensor<512xi32, #blocked>
    %cst_12 = arith.constant dense<-128> : tensor<512xi32, #blocked>
    %cst_13 = arith.constant dense<128> : tensor<512xi32, #blocked>
    %cst_14 = arith.constant dense<128> : tensor<512xi64, #blocked>
    %cst_15 = arith.constant dense<0.000000e+00> : tensor<512xf32, #blocked>
    %cst_16 = arith.constant dense<0.000000e+00> : tensor<512xbf16, #blocked>
    %c512_i32 = arith.constant 512 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c512_i32 : i32
    %2 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<512xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<512xi32, #blocked>
    %5 = arith.remsi %4, %cst : tensor<512xi32, #blocked>
    %6 = arith.divsi %4, %cst : tensor<512xi32, #blocked>
    %7 = arith.remsi %6, %cst_0 : tensor<512xi32, #blocked>
    %8 = arith.divsi %4, %cst_1 : tensor<512xi32, #blocked>
    %9 = arith.remsi %8, %cst_2 : tensor<512xi32, #blocked>
    %10 = arith.divsi %4, %cst_3 : tensor<512xi32, #blocked>
    %11 = arith.remsi %4, %cst_1 : tensor<512xi32, #blocked>
    %12 = arith.extsi %5 : tensor<512xi32, #blocked> to tensor<512xi64, #blocked>
    %13 = arith.cmpi slt, %12, %cst_4 : tensor<512xi64, #blocked>
    %14 = arith.remsi %9, %cst_5 : tensor<512xi32, #blocked>
    %15 = arith.muli %14, %cst : tensor<512xi32, #blocked>
    %16 = arith.addi %5, %15 : tensor<512xi32, #blocked>
    %17 = arith.divsi %9, %cst_5 : tensor<512xi32, #blocked>
    %18 = arith.muli %17, %cst_6 : tensor<512xi32, #blocked>
    %19 = arith.addi %16, %18 : tensor<512xi32, #blocked>
    %20 = arith.muli %7, %cst_7 : tensor<512xi32, #blocked>
    %21 = arith.addi %19, %20 : tensor<512xi32, #blocked>
    %22 = arith.muli %10, %cst_8 : tensor<512xi32, #blocked>
    %23 = arith.addi %21, %22 : tensor<512xi32, #blocked>
    %24 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %25 = tt.addptr %24, %23 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %26 = tt.load %25, %13, %cst_16 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %27 = arith.extf %26 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %28 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %29 = tt.addptr %28, %11 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %30 = tt.load %29, %13, %cst_16 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %31 = arith.extf %30 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %32 = arith.mulf %27, %31 : tensor<512xf32, #blocked>
    %33 = arith.cmpi slt, %12, %cst_14 : tensor<512xi64, #blocked>
    %34 = arith.andi %33, %13 : tensor<512xi1, #blocked>
    %35 = arith.addi %5, %cst_13 : tensor<512xi32, #blocked>
    %36 = arith.addi %35, %15 : tensor<512xi32, #blocked>
    %37 = arith.addi %36, %18 : tensor<512xi32, #blocked>
    %38 = arith.addi %37, %20 : tensor<512xi32, #blocked>
    %39 = arith.addi %38, %22 : tensor<512xi32, #blocked>
    %40 = tt.addptr %24, %39 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %41 = tt.load %40, %34, %cst_16 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %42 = arith.extf %41 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %43 = arith.subf %cst_15, %42 : tensor<512xf32, #blocked>
    %44 = arith.select %34, %43, %cst_15 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %45 = arith.cmpi sge, %12, %cst_14 : tensor<512xi64, #blocked>
    %46 = arith.andi %45, %13 : tensor<512xi1, #blocked>
    %47 = arith.addi %5, %cst_12 : tensor<512xi32, #blocked>
    %48 = arith.addi %47, %15 : tensor<512xi32, #blocked>
    %49 = arith.addi %48, %18 : tensor<512xi32, #blocked>
    %50 = arith.addi %49, %20 : tensor<512xi32, #blocked>
    %51 = arith.addi %50, %22 : tensor<512xi32, #blocked>
    %52 = tt.addptr %24, %51 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %53 = tt.load %52, %46, %cst_16 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %54 = arith.extf %53 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %55 = arith.select %46, %54, %cst_15 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %56 = arith.select %33, %44, %55 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %57 = tt.splat %arg2 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %58 = tt.addptr %57, %11 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %59 = tt.load %58, %13, %cst_16 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %60 = arith.extf %59 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %61 = arith.mulf %56, %60 : tensor<512xf32, #blocked>
    %62 = arith.addf %32, %61 : tensor<512xf32, #blocked>
    %63 = arith.cmpi sge, %12, %cst_4 : tensor<512xi64, #blocked>
    %64 = tt.load %25, %63, %cst_16 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %65 = arith.extf %64 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %66 = arith.select %63, %65, %cst_15 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %67 = arith.select %13, %62, %66 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %68 = arith.addi %5, %cst_11 : tensor<512xi32, #blocked>
    %69 = arith.addi %68, %18 : tensor<512xi32, #blocked>
    %70 = arith.addi %69, %20 : tensor<512xi32, #blocked>
    %71 = arith.addi %70, %22 : tensor<512xi32, #blocked>
    %72 = tt.addptr %24, %71 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %73 = tt.load %72, %13, %cst_16 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %74 = arith.extf %73 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %75 = arith.mulf %74, %31 : tensor<512xf32, #blocked>
    %76 = arith.addi %5, %cst_10 : tensor<512xi32, #blocked>
    %77 = arith.addi %76, %18 : tensor<512xi32, #blocked>
    %78 = arith.addi %77, %20 : tensor<512xi32, #blocked>
    %79 = arith.addi %78, %22 : tensor<512xi32, #blocked>
    %80 = tt.addptr %24, %79 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %81 = tt.load %80, %34, %cst_16 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %82 = arith.extf %81 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %83 = arith.subf %cst_15, %82 : tensor<512xf32, #blocked>
    %84 = arith.select %34, %83, %cst_15 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %85 = arith.addi %5, %cst_9 : tensor<512xi32, #blocked>
    %86 = arith.addi %85, %18 : tensor<512xi32, #blocked>
    %87 = arith.addi %86, %20 : tensor<512xi32, #blocked>
    %88 = arith.addi %87, %22 : tensor<512xi32, #blocked>
    %89 = tt.addptr %24, %88 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %90 = tt.load %89, %46, %cst_16 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %91 = arith.extf %90 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %92 = arith.select %46, %91, %cst_15 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %93 = arith.select %33, %84, %92 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %94 = arith.mulf %93, %60 : tensor<512xf32, #blocked>
    %95 = arith.addf %75, %94 : tensor<512xf32, #blocked>
    %96 = tt.load %72, %63, %cst_16 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<512xbf16, #blocked>
    %97 = arith.extf %96 : tensor<512xbf16, #blocked> to tensor<512xf32, #blocked>
    %98 = arith.select %63, %97, %cst_15 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %99 = arith.select %13, %95, %98 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked>
    %100 = tt.splat %arg3 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %101 = tt.addptr %100, %4 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %102 = arith.truncf %67 : tensor<512xf32, #blocked> to tensor<512xbf16, #blocked>
    tt.store %101, %102 {cache = 1 : i32, evict = 1 : i32} : tensor<512xbf16, #blocked>
    %103 = tt.splat %arg4 : (!tt.ptr<bf16, 1>) -> tensor<512x!tt.ptr<bf16, 1>, #blocked>
    %104 = tt.addptr %103, %4 : tensor<512x!tt.ptr<bf16, 1>, #blocked>, tensor<512xi32, #blocked>
    %105 = arith.truncf %99 : tensor<512xf32, #blocked> to tensor<512xbf16, #blocked>
    tt.store %104, %105 {cache = 1 : i32, evict = 1 : i32} : tensor<512xbf16, #blocked>
    tt.return
  }
}
