; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = lshr i32 %7, 6, !dbg !8
  %9 = and i32 %8, 1, !dbg !8
  %10 = or i32 %9, 2, !dbg !8
  %11 = and i32 %7, 127, !dbg !9
  %12 = or i32 %11, 128, !dbg !9
  %13 = shl i32 %7, 2, !dbg !9
  %14 = and i32 %13, 252, !dbg !9
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %16 = shl i32 %15, 2, !dbg !11
  %17 = or i32 %16, %9, !dbg !12
  %18 = or i32 %16, %10, !dbg !12
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %20 = shl i32 %19, 8, !dbg !14
  %21 = or i32 %20, %11, !dbg !15
  %22 = or i32 %20, %12, !dbg !15
  %23 = or i32 %20, %14, !dbg !15
  %24 = icmp slt i32 %21, 256, !dbg !16
  %25 = icmp slt i32 %22, 256, !dbg !16
  %26 = icmp slt i32 %23, 256, !dbg !16
  %.frozen = freeze i32 %16
  %27 = sdiv i32 %.frozen, 512, !dbg !17
  %28 = mul i32 %27, 512
  %.decomposed = sub i32 %.frozen, %28
  %29 = srem i32 %17, 512, !dbg !18
  %30 = srem i32 %18, 512, !dbg !18
  %31 = shl i32 %21, 9, !dbg !19
  %32 = shl i32 %22, 9, !dbg !19
  %33 = add i32 %31, %.decomposed, !dbg !20
  %34 = add nsw i32 %32, %.decomposed, !dbg !20
  %35 = shl i32 %27, 18, !dbg !21
  %36 = add i32 %33, %35, !dbg !22
  %37 = add i32 %34, %35, !dbg !22
  %38 = sext i32 %36 to i64, !dbg !23
  %39 = getelementptr i16, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = sext i32 %37 to i64, !dbg !23
  %41 = getelementptr i16, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %24) #2, !dbg !24
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !24
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !24
  %45 = trunc i32 %43 to i16, !dbg !24
  %extelt.offset = lshr i32 %43, 16, !dbg !24
  %46 = trunc i32 %extelt.offset to i16, !dbg !24
  %47 = trunc i32 %44 to i16, !dbg !24
  %extelt.offset1 = lshr i32 %44, 16, !dbg !24
  %48 = trunc i32 %extelt.offset1 to i16, !dbg !24
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %25) #2, !dbg !24
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !24
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !24
  %52 = trunc i32 %50 to i16, !dbg !24
  %extelt.offset2 = lshr i32 %50, 16, !dbg !24
  %53 = trunc i32 %extelt.offset2 to i16, !dbg !24
  %54 = trunc i32 %51 to i16, !dbg !24
  %extelt.offset3 = lshr i32 %51, 16, !dbg !24
  %55 = trunc i32 %extelt.offset3 to i16, !dbg !24
  %56 = zext nneg i32 %11 to i64, !dbg !25
  %57 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %56, !dbg !25
  %58 = insertelement <1 x i16> undef, i16 %45, i64 0, !dbg !25
  store <1 x i16> %58, ptr addrspace(3) %57, align 2, !dbg !25
  %59 = add nuw nsw i32 %11, 257, !dbg !25
  %60 = zext nneg i32 %59 to i64, !dbg !25
  %61 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %60, !dbg !25
  %62 = insertelement <1 x i16> undef, i16 %46, i64 0, !dbg !25
  store <1 x i16> %62, ptr addrspace(3) %61, align 2, !dbg !25
  %63 = add nuw nsw i32 %11, 514, !dbg !25
  %64 = zext nneg i32 %63 to i64, !dbg !25
  %65 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %64, !dbg !25
  %66 = insertelement <1 x i16> undef, i16 %47, i64 0, !dbg !25
  store <1 x i16> %66, ptr addrspace(3) %65, align 2, !dbg !25
  %67 = add nuw nsw i32 %11, 771, !dbg !25
  %68 = zext nneg i32 %67 to i64, !dbg !25
  %69 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %68, !dbg !25
  %70 = insertelement <1 x i16> undef, i16 %48, i64 0, !dbg !25
  store <1 x i16> %70, ptr addrspace(3) %69, align 2, !dbg !25
  %71 = zext nneg i32 %12 to i64, !dbg !25
  %72 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %71, !dbg !25
  %73 = insertelement <1 x i16> undef, i16 %52, i64 0, !dbg !25
  store <1 x i16> %73, ptr addrspace(3) %72, align 2, !dbg !25
  %74 = add nuw nsw i32 %11, 385, !dbg !25
  %75 = zext nneg i32 %74 to i64, !dbg !25
  %76 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %75, !dbg !25
  %77 = insertelement <1 x i16> undef, i16 %53, i64 0, !dbg !25
  store <1 x i16> %77, ptr addrspace(3) %76, align 2, !dbg !25
  %78 = add nuw nsw i32 %11, 642, !dbg !25
  %79 = zext nneg i32 %78 to i64, !dbg !25
  %80 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %79, !dbg !25
  %81 = insertelement <1 x i16> undef, i16 %54, i64 0, !dbg !25
  store <1 x i16> %81, ptr addrspace(3) %80, align 2, !dbg !25
  %82 = add nuw nsw i32 %11, 899, !dbg !25
  %83 = zext nneg i32 %82 to i64, !dbg !25
  %84 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %83, !dbg !25
  %85 = insertelement <1 x i16> undef, i16 %55, i64 0, !dbg !25
  store <1 x i16> %85, ptr addrspace(3) %84, align 2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %86 = mul nuw nsw i32 %9, 257, !dbg !25
  %87 = add nuw nsw i32 %86, %14, !dbg !25
  %88 = zext nneg i32 %87 to i64, !dbg !25
  %89 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %88, !dbg !25
  %90 = load i16, ptr addrspace(3) %89, align 2, !dbg !25
  %91 = or i32 %14, 1, !dbg !25
  %92 = add nuw nsw i32 %86, %91, !dbg !25
  %93 = zext nneg i32 %92 to i64, !dbg !25
  %94 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %93, !dbg !25
  %95 = load i16, ptr addrspace(3) %94, align 2, !dbg !25
  %96 = or i32 %14, 2, !dbg !25
  %97 = add nuw nsw i32 %86, %96, !dbg !25
  %98 = zext nneg i32 %97 to i64, !dbg !25
  %99 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %98, !dbg !25
  %100 = load i16, ptr addrspace(3) %99, align 2, !dbg !25
  %101 = or i32 %14, 3, !dbg !25
  %102 = add nuw nsw i32 %86, %101, !dbg !25
  %103 = zext nneg i32 %102 to i64, !dbg !25
  %104 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %103, !dbg !25
  %105 = load i16, ptr addrspace(3) %104, align 2, !dbg !25
  %106 = mul nuw nsw i32 %10, 257, !dbg !25
  %107 = add nuw nsw i32 %106, %14, !dbg !25
  %108 = zext nneg i32 %107 to i64, !dbg !25
  %109 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %108, !dbg !25
  %110 = load i16, ptr addrspace(3) %109, align 2, !dbg !25
  %111 = add nuw nsw i32 %106, %91, !dbg !25
  %112 = zext nneg i32 %111 to i64, !dbg !25
  %113 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %112, !dbg !25
  %114 = load i16, ptr addrspace(3) %113, align 2, !dbg !25
  %115 = add nuw nsw i32 %106, %96, !dbg !25
  %116 = zext nneg i32 %115 to i64, !dbg !25
  %117 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %116, !dbg !25
  %118 = load i16, ptr addrspace(3) %117, align 2, !dbg !25
  %119 = add nuw nsw i32 %106, %101, !dbg !25
  %120 = zext nneg i32 %119 to i64, !dbg !25
  %121 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %120, !dbg !25
  %122 = load i16, ptr addrspace(3) %121, align 2, !dbg !25
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #2, !dbg !25
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #2, !dbg !25
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #2, !dbg !25
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #2, !dbg !25
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #2, !dbg !25
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #2, !dbg !25
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #2, !dbg !25
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #2, !dbg !25
  %131 = shl nsw i32 %29, 8, !dbg !26
  %132 = shl nsw i32 %30, 8, !dbg !26
  %133 = add i32 %131, %23, !dbg !27
  %134 = add i32 %132, %23, !dbg !27
  %135 = sext i32 %133 to i64, !dbg !28
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !28
  %137 = sext i32 %134 to i64, !dbg !28
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !28
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %26) #2, !dbg !29
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !29
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !29
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !29
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !29
  %144 = bitcast i32 %140 to float, !dbg !29
  %145 = bitcast i32 %141 to float, !dbg !29
  %146 = bitcast i32 %142 to float, !dbg !29
  %147 = bitcast i32 %143 to float, !dbg !29
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 %26) #2, !dbg !29
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !29
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !29
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !29
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !29
  %153 = bitcast i32 %149 to float, !dbg !29
  %154 = bitcast i32 %150 to float, !dbg !29
  %155 = bitcast i32 %151 to float, !dbg !29
  %156 = bitcast i32 %152 to float, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %157 = shl nuw nsw i32 %14, 3, !dbg !29
  %158 = or i32 %157, %9, !dbg !29
  %159 = zext nneg i32 %158 to i64, !dbg !29
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i64 %159, !dbg !29
  %161 = insertelement <1 x float> undef, float %144, i64 0, !dbg !29
  store <1 x float> %161, ptr addrspace(3) %160, align 4, !dbg !29
  %162 = shl nuw nsw i32 %91, 3, !dbg !29
  %163 = or i32 %162, %9, !dbg !29
  %164 = zext nneg i32 %163 to i64, !dbg !29
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i64 %164, !dbg !29
  %166 = insertelement <1 x float> undef, float %145, i64 0, !dbg !29
  store <1 x float> %166, ptr addrspace(3) %165, align 4, !dbg !29
  %167 = shl nuw nsw i32 %96, 3, !dbg !29
  %168 = or i32 %167, %9, !dbg !29
  %169 = zext nneg i32 %168 to i64, !dbg !29
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i64 %169, !dbg !29
  %171 = insertelement <1 x float> undef, float %146, i64 0, !dbg !29
  store <1 x float> %171, ptr addrspace(3) %170, align 4, !dbg !29
  %172 = shl nuw nsw i32 %101, 3, !dbg !29
  %173 = or i32 %172, %9, !dbg !29
  %174 = zext nneg i32 %173 to i64, !dbg !29
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i64 %174, !dbg !29
  %176 = insertelement <1 x float> undef, float %147, i64 0, !dbg !29
  store <1 x float> %176, ptr addrspace(3) %175, align 4, !dbg !29
  %177 = or i32 %157, %10, !dbg !29
  %178 = zext nneg i32 %177 to i64, !dbg !29
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i64 %178, !dbg !29
  %180 = insertelement <1 x float> undef, float %153, i64 0, !dbg !29
  store <1 x float> %180, ptr addrspace(3) %179, align 4, !dbg !29
  %181 = or i32 %162, %10, !dbg !29
  %182 = zext nneg i32 %181 to i64, !dbg !29
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i64 %182, !dbg !29
  %184 = insertelement <1 x float> undef, float %154, i64 0, !dbg !29
  store <1 x float> %184, ptr addrspace(3) %183, align 4, !dbg !29
  %185 = or i32 %167, %10, !dbg !29
  %186 = zext nneg i32 %185 to i64, !dbg !29
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !29
  %188 = insertelement <1 x float> undef, float %155, i64 0, !dbg !29
  store <1 x float> %188, ptr addrspace(3) %187, align 4, !dbg !29
  %189 = or i32 %172, %10, !dbg !29
  %190 = zext nneg i32 %189 to i64, !dbg !29
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i64 %190, !dbg !29
  %192 = insertelement <1 x float> undef, float %156, i64 0, !dbg !29
  store <1 x float> %192, ptr addrspace(3) %191, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %193 = shl nuw nsw i32 %11, 3, !dbg !29
  %194 = zext nneg i32 %193 to i64, !dbg !29
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i64 %194, !dbg !29
  %196 = load float, ptr addrspace(3) %195, align 16, !dbg !29
  %197 = getelementptr inbounds <4 x float>, ptr addrspace(3) %195, i64 0, i64 1, !dbg !29
  %198 = load float, ptr addrspace(3) %197, align 4, !dbg !29
  %199 = getelementptr inbounds <4 x float>, ptr addrspace(3) %195, i64 0, i64 2, !dbg !29
  %200 = load float, ptr addrspace(3) %199, align 8, !dbg !29
  %201 = getelementptr inbounds <4 x float>, ptr addrspace(3) %195, i64 0, i64 3, !dbg !29
  %202 = load float, ptr addrspace(3) %201, align 4, !dbg !29
  %203 = shl nuw nsw i32 %12, 3, !dbg !29
  %204 = zext nneg i32 %203 to i64, !dbg !29
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i64 %204, !dbg !29
  %206 = load float, ptr addrspace(3) %205, align 16, !dbg !29
  %207 = getelementptr inbounds <4 x float>, ptr addrspace(3) %205, i64 0, i64 1, !dbg !29
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !29
  %209 = getelementptr inbounds <4 x float>, ptr addrspace(3) %205, i64 0, i64 2, !dbg !29
  %210 = load float, ptr addrspace(3) %209, align 8, !dbg !29
  %211 = getelementptr inbounds <4 x float>, ptr addrspace(3) %205, i64 0, i64 3, !dbg !29
  %212 = load float, ptr addrspace(3) %211, align 4, !dbg !29
  %213 = add nsw i32 %.decomposed, 131072, !dbg !30
  %214 = add i32 %31, %35, !dbg !31
  %215 = add i32 %214, %213, !dbg !32
  %216 = add i32 %32, %35, !dbg !31
  %217 = add i32 %216, %213, !dbg !32
  %218 = sext i32 %215 to i64, !dbg !33
  %219 = getelementptr i16, ptr addrspace(1) %0, i64 %218, !dbg !33
  %220 = sext i32 %217 to i64, !dbg !33
  %221 = getelementptr i16, ptr addrspace(1) %0, i64 %220, !dbg !33
  %222 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %219, i1 %24) #2, !dbg !34
  %223 = extractvalue { i32, i32 } %222, 0, !dbg !34
  %224 = extractvalue { i32, i32 } %222, 1, !dbg !34
  %225 = trunc i32 %223 to i16, !dbg !34
  %extelt.offset4 = lshr i32 %223, 16, !dbg !34
  %226 = trunc i32 %extelt.offset4 to i16, !dbg !34
  %227 = trunc i32 %224 to i16, !dbg !34
  %extelt.offset5 = lshr i32 %224, 16, !dbg !34
  %228 = trunc i32 %extelt.offset5 to i16, !dbg !34
  %229 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %221, i1 %25) #2, !dbg !34
  %230 = extractvalue { i32, i32 } %229, 0, !dbg !34
  %231 = extractvalue { i32, i32 } %229, 1, !dbg !34
  %232 = trunc i32 %230 to i16, !dbg !34
  %extelt.offset6 = lshr i32 %230, 16, !dbg !34
  %233 = trunc i32 %extelt.offset6 to i16, !dbg !34
  %234 = trunc i32 %231 to i16, !dbg !34
  %extelt.offset7 = lshr i32 %231, 16, !dbg !34
  %235 = trunc i32 %extelt.offset7 to i16, !dbg !34
  %236 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %225) #2, !dbg !35
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #2, !dbg !35
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %227) #2, !dbg !35
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #2, !dbg !35
  %240 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #2, !dbg !35
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #2, !dbg !35
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #2, !dbg !35
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #2, !dbg !35
  %244 = icmp sgt i32 %21, 255, !dbg !36
  %245 = icmp sgt i32 %22, 255, !dbg !36
  %246 = icmp sgt i32 %23, 255, !dbg !36
  %247 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !37
  %248 = extractvalue { i32, i32 } %247, 0, !dbg !37
  %249 = extractvalue { i32, i32 } %247, 1, !dbg !37
  %250 = trunc i32 %248 to i16, !dbg !37
  %extelt.offset8 = lshr i32 %248, 16, !dbg !37
  %251 = trunc i32 %extelt.offset8 to i16, !dbg !37
  %252 = trunc i32 %249 to i16, !dbg !37
  %extelt.offset9 = lshr i32 %249, 16, !dbg !37
  %253 = trunc i32 %extelt.offset9 to i16, !dbg !37
  %254 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !37
  %255 = extractvalue { i32, i32 } %254, 0, !dbg !37
  %256 = extractvalue { i32, i32 } %254, 1, !dbg !37
  %257 = trunc i32 %255 to i16, !dbg !37
  %extelt.offset10 = lshr i32 %255, 16, !dbg !37
  %258 = trunc i32 %extelt.offset10 to i16, !dbg !37
  %259 = trunc i32 %256 to i16, !dbg !37
  %extelt.offset11 = lshr i32 %256, 16, !dbg !37
  %260 = trunc i32 %extelt.offset11 to i16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %261 = insertelement <1 x i16> undef, i16 %250, i64 0, !dbg !38
  store <1 x i16> %261, ptr addrspace(3) %57, align 2, !dbg !38
  %262 = insertelement <1 x i16> undef, i16 %251, i64 0, !dbg !38
  store <1 x i16> %262, ptr addrspace(3) %61, align 2, !dbg !38
  %263 = insertelement <1 x i16> undef, i16 %252, i64 0, !dbg !38
  store <1 x i16> %263, ptr addrspace(3) %65, align 2, !dbg !38
  %264 = insertelement <1 x i16> undef, i16 %253, i64 0, !dbg !38
  store <1 x i16> %264, ptr addrspace(3) %69, align 2, !dbg !38
  %265 = insertelement <1 x i16> undef, i16 %257, i64 0, !dbg !38
  store <1 x i16> %265, ptr addrspace(3) %72, align 2, !dbg !38
  %266 = insertelement <1 x i16> undef, i16 %258, i64 0, !dbg !38
  store <1 x i16> %266, ptr addrspace(3) %76, align 2, !dbg !38
  %267 = insertelement <1 x i16> undef, i16 %259, i64 0, !dbg !38
  store <1 x i16> %267, ptr addrspace(3) %80, align 2, !dbg !38
  %268 = insertelement <1 x i16> undef, i16 %260, i64 0, !dbg !38
  store <1 x i16> %268, ptr addrspace(3) %84, align 2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %269 = load i16, ptr addrspace(3) %89, align 2, !dbg !38
  %270 = load i16, ptr addrspace(3) %94, align 2, !dbg !38
  %271 = load i16, ptr addrspace(3) %99, align 2, !dbg !38
  %272 = load i16, ptr addrspace(3) %104, align 2, !dbg !38
  %273 = load i16, ptr addrspace(3) %109, align 2, !dbg !38
  %274 = load i16, ptr addrspace(3) %113, align 2, !dbg !38
  %275 = load i16, ptr addrspace(3) %117, align 2, !dbg !38
  %276 = load i16, ptr addrspace(3) %121, align 2, !dbg !38
  %277 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %269) #2, !dbg !39
  %278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %270) #2, !dbg !39
  %279 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %271) #2, !dbg !39
  %280 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %272) #2, !dbg !39
  %281 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %273) #2, !dbg !39
  %282 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %274) #2, !dbg !39
  %283 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %275) #2, !dbg !39
  %284 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %276) #2, !dbg !39
  %285 = select i1 %246, float %277, float 0.000000e+00, !dbg !38
  %286 = select i1 %246, float %278, float 0.000000e+00, !dbg !38
  %287 = select i1 %246, float %279, float 0.000000e+00, !dbg !38
  %288 = select i1 %246, float %280, float 0.000000e+00, !dbg !38
  %289 = select i1 %246, float %281, float 0.000000e+00, !dbg !38
  %290 = select i1 %246, float %282, float 0.000000e+00, !dbg !38
  %291 = select i1 %246, float %283, float 0.000000e+00, !dbg !38
  %292 = select i1 %246, float %284, float 0.000000e+00, !dbg !38
  %293 = fmul float %123, %144, !dbg !40
  %294 = fmul float %124, %145, !dbg !40
  %295 = fmul float %125, %146, !dbg !40
  %296 = fmul float %126, %147, !dbg !40
  %297 = fmul float %127, %153, !dbg !40
  %298 = fmul float %128, %154, !dbg !40
  %299 = fmul float %129, %155, !dbg !40
  %300 = fmul float %130, %156, !dbg !40
  %301 = icmp sgt i32 %21, 127, !dbg !41
  %302 = icmp sgt i32 %22, 127, !dbg !41
  %303 = icmp sgt i32 %23, 127, !dbg !41
  %304 = add nsw i32 %.decomposed, -65536, !dbg !42
  %305 = add i32 %214, %304, !dbg !43
  %306 = add i32 %216, %304, !dbg !43
  %307 = sext i32 %305 to i64, !dbg !44
  %308 = getelementptr i16, ptr addrspace(1) %0, i64 %307, !dbg !44
  %309 = sext i32 %306 to i64, !dbg !44
  %310 = getelementptr i16, ptr addrspace(1) %0, i64 %309, !dbg !44
  %311 = icmp eq i32 %20, 0, !dbg !45
  %312 = and i32 %23, -128, !dbg !45
  %313 = icmp eq i32 %312, 128, !dbg !45
  %314 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %308, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !46
  %315 = extractvalue { i32, i32 } %314, 0, !dbg !46
  %316 = extractvalue { i32, i32 } %314, 1, !dbg !46
  %317 = trunc i32 %315 to i16, !dbg !46
  %extelt.offset12 = lshr i32 %315, 16, !dbg !46
  %318 = trunc i32 %extelt.offset12 to i16, !dbg !46
  %319 = trunc i32 %316 to i16, !dbg !46
  %extelt.offset13 = lshr i32 %316, 16, !dbg !46
  %320 = trunc i32 %extelt.offset13 to i16, !dbg !46
  %321 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %310, i1 %311, i32 0, i1 %311, i32 0, i1 %311) #2, !dbg !46
  %322 = extractvalue { i32, i32 } %321, 0, !dbg !46
  %323 = extractvalue { i32, i32 } %321, 1, !dbg !46
  %324 = trunc i32 %322 to i16, !dbg !46
  %extelt.offset14 = lshr i32 %322, 16, !dbg !46
  %325 = trunc i32 %extelt.offset14 to i16, !dbg !46
  %326 = trunc i32 %323 to i16, !dbg !46
  %extelt.offset15 = lshr i32 %323, 16, !dbg !46
  %327 = trunc i32 %extelt.offset15 to i16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %328 = insertelement <1 x i16> undef, i16 %317, i64 0, !dbg !47
  store <1 x i16> %328, ptr addrspace(3) %57, align 2, !dbg !47
  %329 = insertelement <1 x i16> undef, i16 %318, i64 0, !dbg !47
  store <1 x i16> %329, ptr addrspace(3) %61, align 2, !dbg !47
  %330 = insertelement <1 x i16> undef, i16 %319, i64 0, !dbg !47
  store <1 x i16> %330, ptr addrspace(3) %65, align 2, !dbg !47
  %331 = insertelement <1 x i16> undef, i16 %320, i64 0, !dbg !47
  store <1 x i16> %331, ptr addrspace(3) %69, align 2, !dbg !47
  %332 = insertelement <1 x i16> undef, i16 %324, i64 0, !dbg !47
  store <1 x i16> %332, ptr addrspace(3) %72, align 2, !dbg !47
  %333 = insertelement <1 x i16> undef, i16 %325, i64 0, !dbg !47
  store <1 x i16> %333, ptr addrspace(3) %76, align 2, !dbg !47
  %334 = insertelement <1 x i16> undef, i16 %326, i64 0, !dbg !47
  store <1 x i16> %334, ptr addrspace(3) %80, align 2, !dbg !47
  %335 = insertelement <1 x i16> undef, i16 %327, i64 0, !dbg !47
  store <1 x i16> %335, ptr addrspace(3) %84, align 2, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %336 = load i16, ptr addrspace(3) %89, align 2, !dbg !47
  %337 = load i16, ptr addrspace(3) %94, align 2, !dbg !47
  %338 = load i16, ptr addrspace(3) %99, align 2, !dbg !47
  %339 = load i16, ptr addrspace(3) %104, align 2, !dbg !47
  %340 = load i16, ptr addrspace(3) %109, align 2, !dbg !47
  %341 = load i16, ptr addrspace(3) %113, align 2, !dbg !47
  %342 = load i16, ptr addrspace(3) %117, align 2, !dbg !47
  %343 = load i16, ptr addrspace(3) %121, align 2, !dbg !47
  %344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %336) #2, !dbg !47
  %345 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #2, !dbg !47
  %346 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #2, !dbg !47
  %347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #2, !dbg !47
  %348 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %340) #2, !dbg !47
  %349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %341) #2, !dbg !47
  %350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %342) #2, !dbg !47
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %343) #2, !dbg !47
  %352 = add i32 %23, -128, !dbg !48
  %353 = add i32 %352, %131, !dbg !49
  %354 = add i32 %352, %132, !dbg !49
  %355 = sext i32 %353 to i64, !dbg !50
  %356 = getelementptr float, ptr addrspace(1) %2, i64 %355, !dbg !50
  %357 = sext i32 %354 to i64, !dbg !50
  %358 = getelementptr float, ptr addrspace(1) %2, i64 %357, !dbg !50
  %359 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %356, i1 %313, i32 0, i1 %313, i32 0, i1 %313, i32 0, i1 %313, i32 0, i1 %313) #2, !dbg !51
  %360 = extractvalue { i32, i32, i32, i32 } %359, 0, !dbg !51
  %361 = extractvalue { i32, i32, i32, i32 } %359, 1, !dbg !51
  %362 = extractvalue { i32, i32, i32, i32 } %359, 2, !dbg !51
  %363 = extractvalue { i32, i32, i32, i32 } %359, 3, !dbg !51
  %364 = bitcast i32 %360 to float, !dbg !51
  %365 = bitcast i32 %361 to float, !dbg !51
  %366 = bitcast i32 %362 to float, !dbg !51
  %367 = bitcast i32 %363 to float, !dbg !51
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %358, i1 %313, i32 0, i1 %313, i32 0, i1 %313, i32 0, i1 %313, i32 0, i1 %313) #2, !dbg !51
  %369 = extractvalue { i32, i32, i32, i32 } %368, 0, !dbg !51
  %370 = extractvalue { i32, i32, i32, i32 } %368, 1, !dbg !51
  %371 = extractvalue { i32, i32, i32, i32 } %368, 2, !dbg !51
  %372 = extractvalue { i32, i32, i32, i32 } %368, 3, !dbg !51
  %373 = bitcast i32 %369 to float, !dbg !51
  %374 = bitcast i32 %370 to float, !dbg !51
  %375 = bitcast i32 %371 to float, !dbg !51
  %376 = bitcast i32 %372 to float, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %377 = insertelement <1 x float> undef, float %364, i64 0, !dbg !51
  store <1 x float> %377, ptr addrspace(3) %160, align 4, !dbg !51
  %378 = insertelement <1 x float> undef, float %365, i64 0, !dbg !51
  store <1 x float> %378, ptr addrspace(3) %165, align 4, !dbg !51
  %379 = insertelement <1 x float> undef, float %366, i64 0, !dbg !51
  store <1 x float> %379, ptr addrspace(3) %170, align 4, !dbg !51
  %380 = insertelement <1 x float> undef, float %367, i64 0, !dbg !51
  store <1 x float> %380, ptr addrspace(3) %175, align 4, !dbg !51
  %381 = insertelement <1 x float> undef, float %373, i64 0, !dbg !51
  store <1 x float> %381, ptr addrspace(3) %179, align 4, !dbg !51
  %382 = insertelement <1 x float> undef, float %374, i64 0, !dbg !51
  store <1 x float> %382, ptr addrspace(3) %183, align 4, !dbg !51
  %383 = insertelement <1 x float> undef, float %375, i64 0, !dbg !51
  store <1 x float> %383, ptr addrspace(3) %187, align 4, !dbg !51
  %384 = insertelement <1 x float> undef, float %376, i64 0, !dbg !51
  store <1 x float> %384, ptr addrspace(3) %191, align 4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %385 = load float, ptr addrspace(3) %195, align 16, !dbg !51
  %386 = load float, ptr addrspace(3) %197, align 4, !dbg !51
  %387 = load float, ptr addrspace(3) %199, align 8, !dbg !51
  %388 = load float, ptr addrspace(3) %201, align 4, !dbg !51
  %389 = load float, ptr addrspace(3) %205, align 16, !dbg !51
  %390 = load float, ptr addrspace(3) %207, align 4, !dbg !51
  %391 = load float, ptr addrspace(3) %209, align 8, !dbg !51
  %392 = load float, ptr addrspace(3) %211, align 4, !dbg !51
  %393 = fmul float %344, %364, !dbg !52
  %394 = fmul float %345, %365, !dbg !52
  %395 = fmul float %346, %366, !dbg !52
  %396 = fmul float %347, %367, !dbg !52
  %397 = fmul float %348, %373, !dbg !52
  %398 = fmul float %349, %374, !dbg !52
  %399 = fmul float %350, %375, !dbg !52
  %400 = fmul float %351, %376, !dbg !52
  %401 = fsub float 0.000000e+00, %393, !dbg !53
  %402 = fsub float 0.000000e+00, %394, !dbg !53
  %403 = fsub float 0.000000e+00, %395, !dbg !53
  %404 = fsub float 0.000000e+00, %396, !dbg !53
  %405 = fsub float 0.000000e+00, %397, !dbg !53
  %406 = fsub float 0.000000e+00, %398, !dbg !53
  %407 = fsub float 0.000000e+00, %399, !dbg !53
  %408 = fsub float 0.000000e+00, %400, !dbg !53
  %409 = select i1 %303, float %401, float 0.000000e+00, !dbg !38
  %410 = select i1 %303, float %402, float 0.000000e+00, !dbg !38
  %411 = select i1 %303, float %403, float 0.000000e+00, !dbg !38
  %412 = select i1 %303, float %404, float 0.000000e+00, !dbg !38
  %413 = select i1 %303, float %405, float 0.000000e+00, !dbg !38
  %414 = select i1 %303, float %406, float 0.000000e+00, !dbg !38
  %415 = select i1 %303, float %407, float 0.000000e+00, !dbg !38
  %416 = select i1 %303, float %408, float 0.000000e+00, !dbg !38
  %417 = fadd float %293, %409, !dbg !54
  %418 = fadd float %294, %410, !dbg !54
  %419 = fadd float %295, %411, !dbg !54
  %420 = fadd float %296, %412, !dbg !54
  %421 = fadd float %297, %413, !dbg !54
  %422 = fadd float %298, %414, !dbg !54
  %423 = fadd float %299, %415, !dbg !54
  %424 = fadd float %300, %416, !dbg !54
  %425 = icmp slt i32 %21, 128, !dbg !55
  %426 = icmp slt i32 %22, 128, !dbg !55
  %427 = icmp slt i32 %23, 128, !dbg !55
  %428 = add nsw i32 %.decomposed, 65536, !dbg !56
  %429 = add i32 %214, %428, !dbg !57
  %430 = add i32 %216, %428, !dbg !57
  %431 = sext i32 %429 to i64, !dbg !58
  %432 = getelementptr i16, ptr addrspace(1) %0, i64 %431, !dbg !58
  %433 = sext i32 %430 to i64, !dbg !58
  %434 = getelementptr i16, ptr addrspace(1) %0, i64 %433, !dbg !58
  %435 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %432, i1 %425, i32 0, i1 %425, i32 0, i1 %425) #2, !dbg !59
  %436 = extractvalue { i32, i32 } %435, 0, !dbg !59
  %437 = extractvalue { i32, i32 } %435, 1, !dbg !59
  %438 = trunc i32 %436 to i16, !dbg !59
  %extelt.offset16 = lshr i32 %436, 16, !dbg !59
  %439 = trunc i32 %extelt.offset16 to i16, !dbg !59
  %440 = trunc i32 %437 to i16, !dbg !59
  %extelt.offset17 = lshr i32 %437, 16, !dbg !59
  %441 = trunc i32 %extelt.offset17 to i16, !dbg !59
  %442 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %434, i1 %426, i32 0, i1 %426, i32 0, i1 %426) #2, !dbg !59
  %443 = extractvalue { i32, i32 } %442, 0, !dbg !59
  %444 = extractvalue { i32, i32 } %442, 1, !dbg !59
  %445 = trunc i32 %443 to i16, !dbg !59
  %extelt.offset18 = lshr i32 %443, 16, !dbg !59
  %446 = trunc i32 %extelt.offset18 to i16, !dbg !59
  %447 = trunc i32 %444 to i16, !dbg !59
  %extelt.offset19 = lshr i32 %444, 16, !dbg !59
  %448 = trunc i32 %extelt.offset19 to i16, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %449 = insertelement <1 x i16> undef, i16 %438, i64 0, !dbg !60
  store <1 x i16> %449, ptr addrspace(3) %57, align 2, !dbg !60
  %450 = insertelement <1 x i16> undef, i16 %439, i64 0, !dbg !60
  store <1 x i16> %450, ptr addrspace(3) %61, align 2, !dbg !60
  %451 = insertelement <1 x i16> undef, i16 %440, i64 0, !dbg !60
  store <1 x i16> %451, ptr addrspace(3) %65, align 2, !dbg !60
  %452 = insertelement <1 x i16> undef, i16 %441, i64 0, !dbg !60
  store <1 x i16> %452, ptr addrspace(3) %69, align 2, !dbg !60
  %453 = insertelement <1 x i16> undef, i16 %445, i64 0, !dbg !60
  store <1 x i16> %453, ptr addrspace(3) %72, align 2, !dbg !60
  %454 = insertelement <1 x i16> undef, i16 %446, i64 0, !dbg !60
  store <1 x i16> %454, ptr addrspace(3) %76, align 2, !dbg !60
  %455 = insertelement <1 x i16> undef, i16 %447, i64 0, !dbg !60
  store <1 x i16> %455, ptr addrspace(3) %80, align 2, !dbg !60
  %456 = insertelement <1 x i16> undef, i16 %448, i64 0, !dbg !60
  store <1 x i16> %456, ptr addrspace(3) %84, align 2, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %457 = load i16, ptr addrspace(3) %89, align 2, !dbg !60
  %458 = load i16, ptr addrspace(3) %94, align 2, !dbg !60
  %459 = load i16, ptr addrspace(3) %99, align 2, !dbg !60
  %460 = load i16, ptr addrspace(3) %104, align 2, !dbg !60
  %461 = load i16, ptr addrspace(3) %109, align 2, !dbg !60
  %462 = load i16, ptr addrspace(3) %113, align 2, !dbg !60
  %463 = load i16, ptr addrspace(3) %117, align 2, !dbg !60
  %464 = load i16, ptr addrspace(3) %121, align 2, !dbg !60
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %457) #2, !dbg !60
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #2, !dbg !60
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #2, !dbg !60
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #2, !dbg !60
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %461) #2, !dbg !60
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #2, !dbg !60
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #2, !dbg !60
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #2, !dbg !60
  %473 = add i32 %23, 128, !dbg !61
  %474 = add i32 %473, %131, !dbg !62
  %475 = add i32 %473, %132, !dbg !62
  %476 = sext i32 %474 to i64, !dbg !63
  %477 = getelementptr float, ptr addrspace(1) %2, i64 %476, !dbg !63
  %478 = sext i32 %475 to i64, !dbg !63
  %479 = getelementptr float, ptr addrspace(1) %2, i64 %478, !dbg !63
  %480 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %477, i1 %427, i32 0, i1 %427, i32 0, i1 %427, i32 0, i1 %427, i32 0, i1 %427) #2, !dbg !64
  %481 = extractvalue { i32, i32, i32, i32 } %480, 0, !dbg !64
  %482 = extractvalue { i32, i32, i32, i32 } %480, 1, !dbg !64
  %483 = extractvalue { i32, i32, i32, i32 } %480, 2, !dbg !64
  %484 = extractvalue { i32, i32, i32, i32 } %480, 3, !dbg !64
  %485 = bitcast i32 %481 to float, !dbg !64
  %486 = bitcast i32 %482 to float, !dbg !64
  %487 = bitcast i32 %483 to float, !dbg !64
  %488 = bitcast i32 %484 to float, !dbg !64
  %489 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %479, i1 %427, i32 0, i1 %427, i32 0, i1 %427, i32 0, i1 %427, i32 0, i1 %427) #2, !dbg !64
  %490 = extractvalue { i32, i32, i32, i32 } %489, 0, !dbg !64
  %491 = extractvalue { i32, i32, i32, i32 } %489, 1, !dbg !64
  %492 = extractvalue { i32, i32, i32, i32 } %489, 2, !dbg !64
  %493 = extractvalue { i32, i32, i32, i32 } %489, 3, !dbg !64
  %494 = bitcast i32 %490 to float, !dbg !64
  %495 = bitcast i32 %491 to float, !dbg !64
  %496 = bitcast i32 %492 to float, !dbg !64
  %497 = bitcast i32 %493 to float, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %498 = insertelement <1 x float> undef, float %485, i64 0, !dbg !64
  store <1 x float> %498, ptr addrspace(3) %160, align 4, !dbg !64
  %499 = insertelement <1 x float> undef, float %486, i64 0, !dbg !64
  store <1 x float> %499, ptr addrspace(3) %165, align 4, !dbg !64
  %500 = insertelement <1 x float> undef, float %487, i64 0, !dbg !64
  store <1 x float> %500, ptr addrspace(3) %170, align 4, !dbg !64
  %501 = insertelement <1 x float> undef, float %488, i64 0, !dbg !64
  store <1 x float> %501, ptr addrspace(3) %175, align 4, !dbg !64
  %502 = insertelement <1 x float> undef, float %494, i64 0, !dbg !64
  store <1 x float> %502, ptr addrspace(3) %179, align 4, !dbg !64
  %503 = insertelement <1 x float> undef, float %495, i64 0, !dbg !64
  store <1 x float> %503, ptr addrspace(3) %183, align 4, !dbg !64
  %504 = insertelement <1 x float> undef, float %496, i64 0, !dbg !64
  store <1 x float> %504, ptr addrspace(3) %187, align 4, !dbg !64
  %505 = insertelement <1 x float> undef, float %497, i64 0, !dbg !64
  store <1 x float> %505, ptr addrspace(3) %191, align 4, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %506 = load float, ptr addrspace(3) %195, align 16, !dbg !64
  %507 = load float, ptr addrspace(3) %197, align 4, !dbg !64
  %508 = load float, ptr addrspace(3) %199, align 8, !dbg !64
  %509 = load float, ptr addrspace(3) %201, align 4, !dbg !64
  %510 = load float, ptr addrspace(3) %205, align 16, !dbg !64
  %511 = load float, ptr addrspace(3) %207, align 4, !dbg !64
  %512 = load float, ptr addrspace(3) %209, align 8, !dbg !64
  %513 = load float, ptr addrspace(3) %211, align 4, !dbg !64
  %514 = fmul float %465, %485, !dbg !65
  %515 = fmul float %466, %486, !dbg !65
  %516 = fmul float %467, %487, !dbg !65
  %517 = fmul float %468, %488, !dbg !65
  %518 = fmul float %469, %494, !dbg !65
  %519 = fmul float %470, %495, !dbg !65
  %520 = fmul float %471, %496, !dbg !65
  %521 = fmul float %472, %497, !dbg !65
  %522 = select i1 %427, float %514, float 0.000000e+00, !dbg !38
  %523 = select i1 %427, float %515, float 0.000000e+00, !dbg !38
  %524 = select i1 %427, float %516, float 0.000000e+00, !dbg !38
  %525 = select i1 %427, float %517, float 0.000000e+00, !dbg !38
  %526 = select i1 %427, float %518, float 0.000000e+00, !dbg !38
  %527 = select i1 %427, float %519, float 0.000000e+00, !dbg !38
  %528 = select i1 %427, float %520, float 0.000000e+00, !dbg !38
  %529 = select i1 %427, float %521, float 0.000000e+00, !dbg !38
  %530 = fadd float %417, %522, !dbg !66
  %531 = fadd float %418, %523, !dbg !66
  %532 = fadd float %419, %524, !dbg !66
  %533 = fadd float %420, %525, !dbg !66
  %534 = fadd float %421, %526, !dbg !66
  %535 = fadd float %422, %527, !dbg !66
  %536 = fadd float %423, %528, !dbg !66
  %537 = fadd float %424, %529, !dbg !66
  %538 = fadd float %285, %530, !dbg !67
  %539 = fadd float %286, %531, !dbg !67
  %540 = fadd float %287, %532, !dbg !67
  %541 = fadd float %288, %533, !dbg !67
  %542 = fadd float %289, %534, !dbg !67
  %543 = fadd float %290, %535, !dbg !67
  %544 = fadd float %291, %536, !dbg !67
  %545 = fadd float %292, %537, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %546 = insertelement <1 x float> undef, float %538, i64 0, !dbg !67
  store <1 x float> %546, ptr addrspace(3) %160, align 4, !dbg !67
  %547 = insertelement <1 x float> undef, float %539, i64 0, !dbg !67
  store <1 x float> %547, ptr addrspace(3) %165, align 4, !dbg !67
  %548 = insertelement <1 x float> undef, float %540, i64 0, !dbg !67
  store <1 x float> %548, ptr addrspace(3) %170, align 4, !dbg !67
  %549 = insertelement <1 x float> undef, float %541, i64 0, !dbg !67
  store <1 x float> %549, ptr addrspace(3) %175, align 4, !dbg !67
  %550 = insertelement <1 x float> undef, float %542, i64 0, !dbg !67
  store <1 x float> %550, ptr addrspace(3) %179, align 4, !dbg !67
  %551 = insertelement <1 x float> undef, float %543, i64 0, !dbg !67
  store <1 x float> %551, ptr addrspace(3) %183, align 4, !dbg !67
  %552 = insertelement <1 x float> undef, float %544, i64 0, !dbg !67
  store <1 x float> %552, ptr addrspace(3) %187, align 4, !dbg !67
  %553 = insertelement <1 x float> undef, float %545, i64 0, !dbg !67
  store <1 x float> %553, ptr addrspace(3) %191, align 4, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %554 = load float, ptr addrspace(3) %195, align 16, !dbg !67
  %555 = load float, ptr addrspace(3) %197, align 4, !dbg !67
  %556 = load float, ptr addrspace(3) %199, align 8, !dbg !67
  %557 = load float, ptr addrspace(3) %201, align 4, !dbg !67
  %558 = load float, ptr addrspace(3) %205, align 16, !dbg !67
  %559 = load float, ptr addrspace(3) %207, align 4, !dbg !67
  %560 = load float, ptr addrspace(3) %209, align 8, !dbg !67
  %561 = load float, ptr addrspace(3) %211, align 4, !dbg !67
  %562 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %219, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !68
  %563 = extractvalue { i32, i32 } %562, 0, !dbg !68
  %564 = extractvalue { i32, i32 } %562, 1, !dbg !68
  %565 = trunc i32 %563 to i16, !dbg !68
  %extelt.offset20 = lshr i32 %563, 16, !dbg !68
  %566 = trunc i32 %extelt.offset20 to i16, !dbg !68
  %567 = trunc i32 %564 to i16, !dbg !68
  %extelt.offset21 = lshr i32 %564, 16, !dbg !68
  %568 = trunc i32 %extelt.offset21 to i16, !dbg !68
  %569 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %221, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !68
  %570 = extractvalue { i32, i32 } %569, 0, !dbg !68
  %571 = extractvalue { i32, i32 } %569, 1, !dbg !68
  %572 = trunc i32 %570 to i16, !dbg !68
  %extelt.offset22 = lshr i32 %570, 16, !dbg !68
  %573 = trunc i32 %extelt.offset22 to i16, !dbg !68
  %574 = trunc i32 %571 to i16, !dbg !68
  %extelt.offset23 = lshr i32 %571, 16, !dbg !68
  %575 = trunc i32 %extelt.offset23 to i16, !dbg !68
  %576 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %565) #2, !dbg !69
  %577 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %566) #2, !dbg !69
  %578 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %567) #2, !dbg !69
  %579 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %568) #2, !dbg !69
  %580 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %572) #2, !dbg !69
  %581 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %573) #2, !dbg !69
  %582 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %574) #2, !dbg !69
  %583 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %575) #2, !dbg !69
  %584 = select i1 %244, float %576, float 0.000000e+00, !dbg !38
  %585 = select i1 %244, float %577, float 0.000000e+00, !dbg !38
  %586 = select i1 %244, float %578, float 0.000000e+00, !dbg !38
  %587 = select i1 %244, float %579, float 0.000000e+00, !dbg !38
  %588 = select i1 %245, float %580, float 0.000000e+00, !dbg !38
  %589 = select i1 %245, float %581, float 0.000000e+00, !dbg !38
  %590 = select i1 %245, float %582, float 0.000000e+00, !dbg !38
  %591 = select i1 %245, float %583, float 0.000000e+00, !dbg !38
  %592 = fmul float %196, %236, !dbg !70
  %593 = fmul float %198, %237, !dbg !70
  %594 = fmul float %200, %238, !dbg !70
  %595 = fmul float %202, %239, !dbg !70
  %596 = fmul float %206, %240, !dbg !70
  %597 = fmul float %208, %241, !dbg !70
  %598 = fmul float %210, %242, !dbg !70
  %599 = fmul float %212, %243, !dbg !70
  %600 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %432, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !71
  %601 = extractvalue { i32, i32 } %600, 0, !dbg !71
  %602 = extractvalue { i32, i32 } %600, 1, !dbg !71
  %603 = trunc i32 %601 to i16, !dbg !71
  %extelt.offset24 = lshr i32 %601, 16, !dbg !71
  %604 = trunc i32 %extelt.offset24 to i16, !dbg !71
  %605 = trunc i32 %602 to i16, !dbg !71
  %extelt.offset25 = lshr i32 %602, 16, !dbg !71
  %606 = trunc i32 %extelt.offset25 to i16, !dbg !71
  %607 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %434, i1 %311, i32 0, i1 %311, i32 0, i1 %311) #2, !dbg !71
  %608 = extractvalue { i32, i32 } %607, 0, !dbg !71
  %609 = extractvalue { i32, i32 } %607, 1, !dbg !71
  %610 = trunc i32 %608 to i16, !dbg !71
  %extelt.offset26 = lshr i32 %608, 16, !dbg !71
  %611 = trunc i32 %extelt.offset26 to i16, !dbg !71
  %612 = trunc i32 %609 to i16, !dbg !71
  %extelt.offset27 = lshr i32 %609, 16, !dbg !71
  %613 = trunc i32 %extelt.offset27 to i16, !dbg !71
  %614 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %603) #2, !dbg !72
  %615 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %604) #2, !dbg !72
  %616 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %605) #2, !dbg !72
  %617 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %606) #2, !dbg !72
  %618 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %610) #2, !dbg !72
  %619 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %611) #2, !dbg !72
  %620 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %612) #2, !dbg !72
  %621 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %613) #2, !dbg !72
  %622 = fmul float %385, %614, !dbg !73
  %623 = fmul float %386, %615, !dbg !73
  %624 = fmul float %387, %616, !dbg !73
  %625 = fmul float %388, %617, !dbg !73
  %626 = fmul float %389, %618, !dbg !73
  %627 = fmul float %390, %619, !dbg !73
  %628 = fmul float %391, %620, !dbg !73
  %629 = fmul float %392, %621, !dbg !73
  %630 = fsub float 0.000000e+00, %622, !dbg !74
  %631 = fsub float 0.000000e+00, %623, !dbg !74
  %632 = fsub float 0.000000e+00, %624, !dbg !74
  %633 = fsub float 0.000000e+00, %625, !dbg !74
  %634 = fsub float 0.000000e+00, %626, !dbg !74
  %635 = fsub float 0.000000e+00, %627, !dbg !74
  %636 = fsub float 0.000000e+00, %628, !dbg !74
  %637 = fsub float 0.000000e+00, %629, !dbg !74
  %638 = select i1 %301, float %630, float 0.000000e+00, !dbg !38
  %639 = select i1 %301, float %631, float 0.000000e+00, !dbg !38
  %640 = select i1 %301, float %632, float 0.000000e+00, !dbg !38
  %641 = select i1 %301, float %633, float 0.000000e+00, !dbg !38
  %642 = select i1 %302, float %634, float 0.000000e+00, !dbg !38
  %643 = select i1 %302, float %635, float 0.000000e+00, !dbg !38
  %644 = select i1 %302, float %636, float 0.000000e+00, !dbg !38
  %645 = select i1 %302, float %637, float 0.000000e+00, !dbg !38
  %646 = fadd float %592, %638, !dbg !75
  %647 = fadd float %593, %639, !dbg !75
  %648 = fadd float %594, %640, !dbg !75
  %649 = fadd float %595, %641, !dbg !75
  %650 = fadd float %596, %642, !dbg !75
  %651 = fadd float %597, %643, !dbg !75
  %652 = fadd float %598, %644, !dbg !75
  %653 = fadd float %599, %645, !dbg !75
  %654 = add nsw i32 %.decomposed, 196608, !dbg !76
  %655 = add i32 %214, %654, !dbg !77
  %656 = add i32 %216, %654, !dbg !77
  %657 = sext i32 %655 to i64, !dbg !78
  %658 = getelementptr i16, ptr addrspace(1) %0, i64 %657, !dbg !78
  %659 = sext i32 %656 to i64, !dbg !78
  %660 = getelementptr i16, ptr addrspace(1) %0, i64 %659, !dbg !78
  %661 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %658, i1 %425, i32 0, i1 %425, i32 0, i1 %425) #2, !dbg !79
  %662 = extractvalue { i32, i32 } %661, 0, !dbg !79
  %663 = extractvalue { i32, i32 } %661, 1, !dbg !79
  %664 = trunc i32 %662 to i16, !dbg !79
  %extelt.offset28 = lshr i32 %662, 16, !dbg !79
  %665 = trunc i32 %extelt.offset28 to i16, !dbg !79
  %666 = trunc i32 %663 to i16, !dbg !79
  %extelt.offset29 = lshr i32 %663, 16, !dbg !79
  %667 = trunc i32 %extelt.offset29 to i16, !dbg !79
  %668 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %660, i1 %426, i32 0, i1 %426, i32 0, i1 %426) #2, !dbg !79
  %669 = extractvalue { i32, i32 } %668, 0, !dbg !79
  %670 = extractvalue { i32, i32 } %668, 1, !dbg !79
  %671 = trunc i32 %669 to i16, !dbg !79
  %extelt.offset30 = lshr i32 %669, 16, !dbg !79
  %672 = trunc i32 %extelt.offset30 to i16, !dbg !79
  %673 = trunc i32 %670 to i16, !dbg !79
  %extelt.offset31 = lshr i32 %670, 16, !dbg !79
  %674 = trunc i32 %extelt.offset31 to i16, !dbg !79
  %675 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %664) #2, !dbg !80
  %676 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %665) #2, !dbg !80
  %677 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %666) #2, !dbg !80
  %678 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %667) #2, !dbg !80
  %679 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %671) #2, !dbg !80
  %680 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %672) #2, !dbg !80
  %681 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %673) #2, !dbg !80
  %682 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %674) #2, !dbg !80
  %683 = fmul float %506, %675, !dbg !81
  %684 = fmul float %507, %676, !dbg !81
  %685 = fmul float %508, %677, !dbg !81
  %686 = fmul float %509, %678, !dbg !81
  %687 = fmul float %510, %679, !dbg !81
  %688 = fmul float %511, %680, !dbg !81
  %689 = fmul float %512, %681, !dbg !81
  %690 = fmul float %513, %682, !dbg !81
  %691 = select i1 %425, float %683, float 0.000000e+00, !dbg !38
  %692 = select i1 %425, float %684, float 0.000000e+00, !dbg !38
  %693 = select i1 %425, float %685, float 0.000000e+00, !dbg !38
  %694 = select i1 %425, float %686, float 0.000000e+00, !dbg !38
  %695 = select i1 %426, float %687, float 0.000000e+00, !dbg !38
  %696 = select i1 %426, float %688, float 0.000000e+00, !dbg !38
  %697 = select i1 %426, float %689, float 0.000000e+00, !dbg !38
  %698 = select i1 %426, float %690, float 0.000000e+00, !dbg !38
  %699 = fadd float %646, %691, !dbg !82
  %700 = fadd float %647, %692, !dbg !82
  %701 = fadd float %648, %693, !dbg !82
  %702 = fadd float %649, %694, !dbg !82
  %703 = fadd float %650, %695, !dbg !82
  %704 = fadd float %651, %696, !dbg !82
  %705 = fadd float %652, %697, !dbg !82
  %706 = fadd float %653, %698, !dbg !82
  %707 = fadd float %584, %699, !dbg !83
  %708 = fadd float %585, %700, !dbg !83
  %709 = fadd float %586, %701, !dbg !83
  %710 = fadd float %587, %702, !dbg !83
  %711 = fadd float %588, %703, !dbg !83
  %712 = fadd float %589, %704, !dbg !83
  %713 = fadd float %590, %705, !dbg !83
  %714 = fadd float %591, %706, !dbg !83
  %715 = fadd float %554, %707, !dbg !84
  %716 = fadd float %555, %708, !dbg !84
  %717 = fadd float %556, %709, !dbg !84
  %718 = fadd float %557, %710, !dbg !84
  %719 = fadd float %558, %711, !dbg !84
  %720 = fadd float %559, %712, !dbg !84
  %721 = fadd float %560, %713, !dbg !84
  %722 = fadd float %561, %714, !dbg !84
  %723 = shl i32 %27, 17, !dbg !85
  %724 = add i32 %33, %723, !dbg !86
  %725 = add i32 %34, %723, !dbg !86
  %726 = sext i32 %724 to i64, !dbg !87
  %727 = getelementptr float, ptr addrspace(1) %3, i64 %726, !dbg !87
  %728 = sext i32 %725 to i64, !dbg !87
  %729 = getelementptr float, ptr addrspace(1) %3, i64 %728, !dbg !87
  %730 = bitcast float %715 to i32, !dbg !88
  %731 = bitcast float %716 to i32, !dbg !88
  %732 = bitcast float %717 to i32, !dbg !88
  %733 = bitcast float %718 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %730, i32 %731, i32 %732, i32 %733, ptr addrspace(1) %727, i1 %24) #2, !dbg !88
  %734 = bitcast float %719 to i32, !dbg !88
  %735 = bitcast float %720 to i32, !dbg !88
  %736 = bitcast float %721 to i32, !dbg !88
  %737 = bitcast float %722 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %734, i32 %735, i32 %736, i32 %737, ptr addrspace(1) %729, i1 %25) #2, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "crrdsfk77bdln63d7tpusb7zw3nj6ood2d466j625pinrh64lbkt.py", directory: "/tmp/torchinductor_zeus/rr")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 24, column: 28, scope: !5)
!14 = !DILocation(line: 24, column: 33, scope: !5)
!15 = !DILocation(line: 25, column: 23, scope: !5)
!16 = !DILocation(line: 26, column: 21, scope: !5)
!17 = !DILocation(line: 29, column: 20, scope: !5)
!18 = !DILocation(line: 28, column: 18, scope: !5)
!19 = !DILocation(line: 30, column: 40, scope: !5)
!20 = !DILocation(line: 30, column: 36, scope: !5)
!21 = !DILocation(line: 30, column: 54, scope: !5)
!22 = !DILocation(line: 30, column: 47, scope: !5)
!23 = !DILocation(line: 30, column: 30, scope: !5)
!24 = !DILocation(line: 30, column: 60, scope: !5)
!25 = !DILocation(line: 30, column: 100, scope: !5)
!26 = !DILocation(line: 31, column: 41, scope: !5)
!27 = !DILocation(line: 31, column: 37, scope: !5)
!28 = !DILocation(line: 31, column: 31, scope: !5)
!29 = !DILocation(line: 31, column: 47, scope: !5)
!30 = !DILocation(line: 32, column: 40, scope: !5)
!31 = !DILocation(line: 32, column: 46, scope: !5)
!32 = !DILocation(line: 32, column: 57, scope: !5)
!33 = !DILocation(line: 32, column: 31, scope: !5)
!34 = !DILocation(line: 32, column: 70, scope: !5)
!35 = !DILocation(line: 32, column: 110, scope: !5)
!36 = !DILocation(line: 35, column: 19, scope: !5)
!37 = !DILocation(line: 36, column: 60, scope: !5)
!38 = !DILocation(line: 0, scope: !5)
!39 = !DILocation(line: 36, column: 118, scope: !5)
!40 = !DILocation(line: 42, column: 19, scope: !5)
!41 = !DILocation(line: 45, column: 20, scope: !5)
!42 = !DILocation(line: 46, column: 42, scope: !5)
!43 = !DILocation(line: 46, column: 59, scope: !5)
!44 = !DILocation(line: 46, column: 31, scope: !5)
!45 = !DILocation(line: 46, column: 80, scope: !5)
!46 = !DILocation(line: 46, column: 72, scope: !5)
!47 = !DILocation(line: 46, column: 131, scope: !5)
!48 = !DILocation(line: 48, column: 40, scope: !5)
!49 = !DILocation(line: 48, column: 46, scope: !5)
!50 = !DILocation(line: 48, column: 31, scope: !5)
!51 = !DILocation(line: 48, column: 56, scope: !5)
!52 = !DILocation(line: 49, column: 20, scope: !5)
!53 = !DILocation(line: 51, column: 13, scope: !5)
!54 = !DILocation(line: 55, column: 20, scope: !5)
!55 = !DILocation(line: 56, column: 19, scope: !5)
!56 = !DILocation(line: 57, column: 39, scope: !5)
!57 = !DILocation(line: 57, column: 56, scope: !5)
!58 = !DILocation(line: 57, column: 31, scope: !5)
!59 = !DILocation(line: 57, column: 69, scope: !5)
!60 = !DILocation(line: 57, column: 128, scope: !5)
!61 = !DILocation(line: 59, column: 37, scope: !5)
!62 = !DILocation(line: 59, column: 43, scope: !5)
!63 = !DILocation(line: 59, column: 31, scope: !5)
!64 = !DILocation(line: 59, column: 53, scope: !5)
!65 = !DILocation(line: 60, column: 20, scope: !5)
!66 = !DILocation(line: 65, column: 20, scope: !5)
!67 = !DILocation(line: 66, column: 19, scope: !5)
!68 = !DILocation(line: 68, column: 70, scope: !5)
!69 = !DILocation(line: 68, column: 128, scope: !5)
!70 = !DILocation(line: 73, column: 20, scope: !5)
!71 = !DILocation(line: 75, column: 69, scope: !5)
!72 = !DILocation(line: 75, column: 128, scope: !5)
!73 = !DILocation(line: 77, column: 20, scope: !5)
!74 = !DILocation(line: 79, column: 13, scope: !5)
!75 = !DILocation(line: 83, column: 20, scope: !5)
!76 = !DILocation(line: 84, column: 40, scope: !5)
!77 = !DILocation(line: 84, column: 57, scope: !5)
!78 = !DILocation(line: 84, column: 31, scope: !5)
!79 = !DILocation(line: 84, column: 70, scope: !5)
!80 = !DILocation(line: 84, column: 129, scope: !5)
!81 = !DILocation(line: 86, column: 20, scope: !5)
!82 = !DILocation(line: 91, column: 20, scope: !5)
!83 = !DILocation(line: 92, column: 20, scope: !5)
!84 = !DILocation(line: 94, column: 20, scope: !5)
!85 = !DILocation(line: 95, column: 49, scope: !5)
!86 = !DILocation(line: 95, column: 42, scope: !5)
!87 = !DILocation(line: 95, column: 25, scope: !5)
!88 = !DILocation(line: 95, column: 62, scope: !5)
!89 = !DILocation(line: 95, column: 4, scope: !5)
