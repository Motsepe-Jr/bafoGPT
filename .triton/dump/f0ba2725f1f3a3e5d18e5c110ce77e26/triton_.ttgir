#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x4xf32, #blocked>
    %cst_0 = arith.constant dense<256> : tensor<256x1xi32, #blocked1>
    %cst_1 = arith.constant dense<256> : tensor<256x1xi32, #blocked>
    %cst_2 = arith.constant dense<512> : tensor<1x4xi32, #blocked1>
    %cst_3 = arith.constant dense<512> : tensor<1x4xi32, #blocked>
    %cst_4 = arith.constant dense<512> : tensor<256x1xi32, #blocked1>
    %cst_5 = arith.constant dense<262144> : tensor<1x4xi32, #blocked1>
    %cst_6 = arith.constant dense<256> : tensor<1x4xi32, #blocked>
    %cst_7 = arith.constant dense<131072> : tensor<1x4xi32, #blocked1>
    %cst_8 = arith.constant dense<256> : tensor<256x1xi64, #blocked1>
    %cst_9 = arith.constant dense<256> : tensor<256x1xi64, #blocked>
    %cst_10 = arith.constant dense<196608> : tensor<1x4xi32, #blocked1>
    %cst_11 = arith.constant dense<128> : tensor<256x1xi32, #blocked>
    %cst_12 = arith.constant dense<65536> : tensor<1x4xi32, #blocked1>
    %cst_13 = arith.constant dense<-128> : tensor<256x1xi32, #blocked>
    %cst_14 = arith.constant dense<-65536> : tensor<1x4xi32, #blocked1>
    %cst_15 = arith.constant dense<128> : tensor<256x1xi64, #blocked1>
    %cst_16 = arith.constant dense<128> : tensor<256x1xi64, #blocked>
    %c4_i32 = arith.constant 4 : i32
    %c256_i32 = arith.constant 256 : i32
    %cst_17 = arith.constant dense<0.000000e+00> : tensor<256x4xbf16, #blocked1>
    %cst_18 = arith.constant dense<0.000000e+00> : tensor<256x4xf32, #blocked1>
    %0 = tt.get_program_id y : i32
    %1 = arith.muli %0, %c4_i32 : i32
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %3 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %4 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x4xi32, #blocked1>
    %5 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x4xi32, #blocked>
    %6 = tt.splat %1 : (i32) -> tensor<1x4xi32, #blocked1>
    %7 = tt.splat %1 : (i32) -> tensor<1x4xi32, #blocked>
    %8 = arith.addi %6, %4 : tensor<1x4xi32, #blocked1>
    %9 = arith.addi %7, %5 : tensor<1x4xi32, #blocked>
    %10 = tt.get_program_id x : i32
    %11 = arith.muli %10, %c256_i32 : i32
    %12 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %13 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %14 = tt.expand_dims %12 {axis = 1 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<256x1xi32, #blocked1>
    %15 = tt.expand_dims %13 {axis = 1 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<256x1xi32, #blocked>
    %16 = tt.splat %11 : (i32) -> tensor<256x1xi32, #blocked1>
    %17 = tt.splat %11 : (i32) -> tensor<256x1xi32, #blocked>
    %18 = arith.addi %16, %14 : tensor<256x1xi32, #blocked1>
    %19 = arith.addi %17, %15 : tensor<256x1xi32, #blocked>
    %20 = arith.cmpi slt, %18, %cst_0 : tensor<256x1xi32, #blocked1>
    %21 = arith.cmpi slt, %19, %cst_1 : tensor<256x1xi32, #blocked>
    %22 = arith.remsi %8, %cst_2 : tensor<1x4xi32, #blocked1>
    %23 = arith.remsi %9, %cst_3 : tensor<1x4xi32, #blocked>
    %24 = arith.divsi %8, %cst_2 : tensor<1x4xi32, #blocked1>
    %25 = arith.muli %18, %cst_4 : tensor<256x1xi32, #blocked1>
    %26 = tt.broadcast %22 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %27 = tt.broadcast %25 : (tensor<256x1xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %28 = arith.addi %26, %27 : tensor<256x4xi32, #blocked1>
    %29 = arith.muli %24, %cst_5 : tensor<1x4xi32, #blocked1>
    %30 = tt.broadcast %29 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %31 = arith.addi %28, %30 : tensor<256x4xi32, #blocked1>
    %32 = tt.splat %arg0 : (!tt.ptr<bf16, 1>) -> tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>
    %33 = tt.addptr %32, %31 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    %34 = tt.broadcast %20 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %35 = tt.broadcast %21 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %36 = tt.load %33, %34 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %37 = triton_gpu.convert_layout %36 : (tensor<256x4xbf16, #blocked1>) -> tensor<256x4xbf16, #blocked>
    %38 = arith.extf %37 : tensor<256x4xbf16, #blocked> to tensor<256x4xf32, #blocked>
    %39 = arith.muli %23, %cst_6 : tensor<1x4xi32, #blocked>
    %40 = tt.broadcast %19 : (tensor<256x1xi32, #blocked>) -> tensor<256x4xi32, #blocked>
    %41 = tt.broadcast %39 : (tensor<1x4xi32, #blocked>) -> tensor<256x4xi32, #blocked>
    %42 = arith.addi %40, %41 : tensor<256x4xi32, #blocked>
    %43 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<256x4x!tt.ptr<f32, 1>, #blocked>
    %44 = tt.addptr %43, %42 : tensor<256x4x!tt.ptr<f32, 1>, #blocked>, tensor<256x4xi32, #blocked>
    %45 = tt.load %44, %35 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xf32, #blocked>
    %46 = triton_gpu.convert_layout %45 : (tensor<256x4xf32, #blocked>) -> tensor<256x4xf32, #blocked1>
    %47 = arith.addi %22, %cst_7 : tensor<1x4xi32, #blocked1>
    %48 = tt.broadcast %47 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %49 = arith.addi %48, %27 : tensor<256x4xi32, #blocked1>
    %50 = arith.addi %49, %30 : tensor<256x4xi32, #blocked1>
    %51 = tt.addptr %32, %50 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    %52 = tt.load %51, %34 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %53 = arith.extf %52 : tensor<256x4xbf16, #blocked1> to tensor<256x4xf32, #blocked1>
    %54 = arith.extsi %18 : tensor<256x1xi32, #blocked1> to tensor<256x1xi64, #blocked1>
    %55 = arith.extsi %19 : tensor<256x1xi32, #blocked> to tensor<256x1xi64, #blocked>
    %56 = arith.cmpi sge, %54, %cst_8 : tensor<256x1xi64, #blocked1>
    %57 = arith.cmpi sge, %55, %cst_9 : tensor<256x1xi64, #blocked>
    %58 = arith.andi %56, %20 : tensor<256x1xi1, #blocked1>
    %59 = tt.broadcast %58 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %60 = tt.load %33, %59, %cst_17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %61 = triton_gpu.convert_layout %60 : (tensor<256x4xbf16, #blocked1>) -> tensor<256x4xbf16, #blocked>
    %62 = arith.extf %61 : tensor<256x4xbf16, #blocked> to tensor<256x4xf32, #blocked>
    %63 = tt.broadcast %56 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %64 = tt.broadcast %57 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %65 = arith.select %64, %62, %cst : tensor<256x4xi1, #blocked>, tensor<256x4xf32, #blocked>
    %66 = arith.mulf %38, %45 : tensor<256x4xf32, #blocked>
    %67 = arith.cmpi sge, %54, %cst_15 : tensor<256x1xi64, #blocked1>
    %68 = arith.cmpi sge, %55, %cst_16 : tensor<256x1xi64, #blocked>
    %69 = arith.addi %22, %cst_14 : tensor<1x4xi32, #blocked1>
    %70 = tt.broadcast %69 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %71 = arith.addi %70, %27 : tensor<256x4xi32, #blocked1>
    %72 = arith.addi %71, %30 : tensor<256x4xi32, #blocked1>
    %73 = tt.addptr %32, %72 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    %74 = arith.andi %67, %20 : tensor<256x1xi1, #blocked1>
    %75 = arith.andi %68, %21 : tensor<256x1xi1, #blocked>
    %76 = tt.broadcast %74 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %77 = tt.broadcast %75 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %78 = tt.load %73, %76, %cst_17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %79 = triton_gpu.convert_layout %78 : (tensor<256x4xbf16, #blocked1>) -> tensor<256x4xbf16, #blocked>
    %80 = arith.extf %79 : tensor<256x4xbf16, #blocked> to tensor<256x4xf32, #blocked>
    %81 = arith.addi %19, %cst_13 : tensor<256x1xi32, #blocked>
    %82 = tt.broadcast %81 : (tensor<256x1xi32, #blocked>) -> tensor<256x4xi32, #blocked>
    %83 = arith.addi %82, %41 : tensor<256x4xi32, #blocked>
    %84 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<256x4x!tt.ptr<f32, 1>, #blocked>
    %85 = tt.addptr %84, %83 : tensor<256x4x!tt.ptr<f32, 1>, #blocked>, tensor<256x4xi32, #blocked>
    %86 = tt.load %85, %77, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xf32, #blocked>
    %87 = triton_gpu.convert_layout %86 : (tensor<256x4xf32, #blocked>) -> tensor<256x4xf32, #blocked1>
    %88 = arith.mulf %80, %86 : tensor<256x4xf32, #blocked>
    %89 = arith.subf %cst, %88 : tensor<256x4xf32, #blocked>
    %90 = tt.broadcast %67 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %91 = tt.broadcast %68 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %92 = arith.select %91, %89, %cst : tensor<256x4xi1, #blocked>, tensor<256x4xf32, #blocked>
    %93 = arith.addf %66, %92 : tensor<256x4xf32, #blocked>
    %94 = arith.cmpi slt, %54, %cst_15 : tensor<256x1xi64, #blocked1>
    %95 = arith.cmpi slt, %55, %cst_16 : tensor<256x1xi64, #blocked>
    %96 = arith.addi %22, %cst_12 : tensor<1x4xi32, #blocked1>
    %97 = tt.broadcast %96 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %98 = arith.addi %97, %27 : tensor<256x4xi32, #blocked1>
    %99 = arith.addi %98, %30 : tensor<256x4xi32, #blocked1>
    %100 = tt.addptr %32, %99 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    %101 = arith.andi %94, %20 : tensor<256x1xi1, #blocked1>
    %102 = arith.andi %95, %21 : tensor<256x1xi1, #blocked>
    %103 = tt.broadcast %101 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %104 = tt.broadcast %102 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %105 = tt.load %100, %103, %cst_17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %106 = triton_gpu.convert_layout %105 : (tensor<256x4xbf16, #blocked1>) -> tensor<256x4xbf16, #blocked>
    %107 = arith.extf %106 : tensor<256x4xbf16, #blocked> to tensor<256x4xf32, #blocked>
    %108 = arith.addi %19, %cst_11 : tensor<256x1xi32, #blocked>
    %109 = tt.broadcast %108 : (tensor<256x1xi32, #blocked>) -> tensor<256x4xi32, #blocked>
    %110 = arith.addi %109, %41 : tensor<256x4xi32, #blocked>
    %111 = tt.addptr %84, %110 : tensor<256x4x!tt.ptr<f32, 1>, #blocked>, tensor<256x4xi32, #blocked>
    %112 = tt.load %111, %104, %cst {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xf32, #blocked>
    %113 = triton_gpu.convert_layout %112 : (tensor<256x4xf32, #blocked>) -> tensor<256x4xf32, #blocked1>
    %114 = arith.mulf %107, %112 : tensor<256x4xf32, #blocked>
    %115 = tt.broadcast %94 : (tensor<256x1xi1, #blocked1>) -> tensor<256x4xi1, #blocked1>
    %116 = tt.broadcast %95 : (tensor<256x1xi1, #blocked>) -> tensor<256x4xi1, #blocked>
    %117 = arith.select %116, %114, %cst : tensor<256x4xi1, #blocked>, tensor<256x4xf32, #blocked>
    %118 = arith.addf %93, %117 : tensor<256x4xf32, #blocked>
    %119 = arith.addf %65, %118 : tensor<256x4xf32, #blocked>
    %120 = triton_gpu.convert_layout %119 : (tensor<256x4xf32, #blocked>) -> tensor<256x4xf32, #blocked1>
    %121 = tt.load %51, %59, %cst_17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %122 = arith.extf %121 : tensor<256x4xbf16, #blocked1> to tensor<256x4xf32, #blocked1>
    %123 = arith.select %63, %122, %cst_18 : tensor<256x4xi1, #blocked1>, tensor<256x4xf32, #blocked1>
    %124 = arith.mulf %53, %46 : tensor<256x4xf32, #blocked1>
    %125 = tt.load %100, %76, %cst_17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %126 = arith.extf %125 : tensor<256x4xbf16, #blocked1> to tensor<256x4xf32, #blocked1>
    %127 = arith.mulf %126, %87 : tensor<256x4xf32, #blocked1>
    %128 = arith.subf %cst_18, %127 : tensor<256x4xf32, #blocked1>
    %129 = arith.select %90, %128, %cst_18 : tensor<256x4xi1, #blocked1>, tensor<256x4xf32, #blocked1>
    %130 = arith.addf %124, %129 : tensor<256x4xf32, #blocked1>
    %131 = arith.addi %22, %cst_10 : tensor<1x4xi32, #blocked1>
    %132 = tt.broadcast %131 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %133 = arith.addi %132, %27 : tensor<256x4xi32, #blocked1>
    %134 = arith.addi %133, %30 : tensor<256x4xi32, #blocked1>
    %135 = tt.addptr %32, %134 : tensor<256x4x!tt.ptr<bf16, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    %136 = tt.load %135, %103, %cst_17 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<256x4xbf16, #blocked1>
    %137 = arith.extf %136 : tensor<256x4xbf16, #blocked1> to tensor<256x4xf32, #blocked1>
    %138 = arith.mulf %137, %113 : tensor<256x4xf32, #blocked1>
    %139 = arith.select %115, %138, %cst_18 : tensor<256x4xi1, #blocked1>, tensor<256x4xf32, #blocked1>
    %140 = arith.addf %130, %139 : tensor<256x4xf32, #blocked1>
    %141 = arith.addf %123, %140 : tensor<256x4xf32, #blocked1>
    %142 = arith.addf %120, %141 : tensor<256x4xf32, #blocked1>
    %143 = arith.muli %24, %cst_7 : tensor<1x4xi32, #blocked1>
    %144 = tt.broadcast %143 : (tensor<1x4xi32, #blocked1>) -> tensor<256x4xi32, #blocked1>
    %145 = arith.addi %28, %144 : tensor<256x4xi32, #blocked1>
    %146 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<256x4x!tt.ptr<f32, 1>, #blocked1>
    %147 = tt.addptr %146, %145 : tensor<256x4x!tt.ptr<f32, 1>, #blocked1>, tensor<256x4xi32, #blocked1>
    tt.store %147, %142, %34 {cache = 1 : i32, evict = 1 : i32} : tensor<256x4xf32, #blocked1>
    tt.return
  }
}
