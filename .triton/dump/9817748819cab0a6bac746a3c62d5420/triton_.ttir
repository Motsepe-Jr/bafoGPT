module {
  tt.func public @triton__0d1d2d3d4de5de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c2304_i32 = arith.constant 2304 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<1024xbf16>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1024xf32>
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<1024xf32>
    %cst_3 = arith.constant dense<2.304000e+03> : tensor<1024xf32>
    %cst_4 = arith.constant dense<2304> : tensor<1024xi32>
    %cst_5 = arith.constant dense<1024> : tensor<1024xi32>
    %0 = tt.get_program_id x : i32
    %1 = arith.cmpi slt, %0, %c2304_i32 : i32
    %2 = tt.splat %1 : (i1) -> tensor<1xi1>
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %4 = arith.cmpi slt, %3, %cst_5 : tensor<1024xi32>
    %5 = arith.muli %3, %cst_4 : tensor<1024xi32>
    %6 = tt.splat %0 : (i32) -> tensor<1024xi32>
    %7 = arith.addi %6, %5 : tensor<1024xi32>
    %8 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1024x!tt.ptr<f32, 1>>
    %9 = tt.addptr %8, %7 : tensor<1024x!tt.ptr<f32, 1>>, tensor<1024xi32>
    %10 = tt.splat %1 : (i1) -> tensor<1024xi1>
    %11 = arith.andi %4, %10 : tensor<1024xi1>
    %12 = tt.load %9, %11, %cst_1 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32>
    %13 = tt.splat %arg1 : (!tt.ptr<bf16, 1>) -> tensor<1024x!tt.ptr<bf16, 1>>
    %14 = tt.addptr %13, %7 : tensor<1024x!tt.ptr<bf16, 1>>, tensor<1024xi32>
    %15 = tt.load %14, %11, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16>
    %16 = arith.extf %15 : tensor<1024xbf16> to tensor<1024xf32>
    %17 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<1024x!tt.ptr<f32, 1>>
    %18 = tt.addptr %17, %3 : tensor<1024x!tt.ptr<f32, 1>>, tensor<1024xi32>
    %19 = tt.load %18, %4, %cst_1 {cache = 1 : i32, evict = 3 : i32, isVolatile = false} : tensor<1024xf32>
    %20 = arith.divf %19, %cst_3 : tensor<1024xf32>
    %21 = arith.addf %20, %cst_2 : tensor<1024xf32>
    %22 = tt.extern_elementwise %21 {libname = "libdevice", libpath = "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1024xf32>) -> tensor<1024xf32>
    %23 = arith.mulf %16, %22 : tensor<1024xf32>
    %24 = arith.mulf %12, %23 : tensor<1024xf32>
    %25 = arith.select %11, %24, %cst_1 : tensor<1024xi1>, tensor<1024xf32>
    %26 = "tt.reduce"(%25) <{axis = 0 : i32}> ({
    ^bb0(%arg6: f32, %arg7: f32):
      %31 = arith.addf %arg6, %arg7 : f32
      tt.reduce.return %31 : f32
    }) : (tensor<1024xf32>) -> f32
    %27 = arith.addf %26, %cst_0 : f32
    %28 = tt.splat %27 : (f32) -> tensor<1xf32>
    %29 = tt.addptr %arg3, %0 : !tt.ptr<f32, 1>, i32
    %30 = tt.splat %29 : (!tt.ptr<f32, 1>) -> tensor<1x!tt.ptr<f32, 1>>
    tt.store %30, %28, %2 {cache = 1 : i32, evict = 1 : i32} : tensor<1xf32>
    tt.return
  }
}
