; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6de7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = and i32 %9, 31, !dbg !8
  %11 = lshr i32 %9, 5, !dbg !8
  %12 = and i32 %11, 3, !dbg !8
  %13 = lshr i32 %10, 2, !dbg !8
  %14 = shl nuw nsw i32 %12, 3, !dbg !8
  %15 = or i32 %14, %13, !dbg !8
  %16 = shl i32 %9, 2, !dbg !8
  %17 = and i32 %16, 28, !dbg !8
  %18 = shl i32 %9, 3, !dbg !9
  %19 = and i32 %18, 24, !dbg !9
  %20 = lshr i32 %10, 3, !dbg !9
  %21 = shl nuw nsw i32 %12, 2, !dbg !9
  %22 = or i32 %21, %20, !dbg !9
  %23 = or i32 %22, 16, !dbg !9
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %25 = shl i32 %24, 5, !dbg !11
  %26 = or i32 %25, %15, !dbg !12
  %27 = or i32 %25, %17, !dbg !12
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %29 = shl i32 %28, 5, !dbg !14
  %30 = or i32 %29, %19, !dbg !15
  %31 = or i32 %29, %22, !dbg !15
  %32 = or i32 %29, %23, !dbg !15
  %33 = icmp slt i32 %30, 256, !dbg !16
  %34 = icmp slt i32 %31, 256, !dbg !16
  %35 = icmp slt i32 %32, 256, !dbg !16
  %.frozen36 = freeze i32 %26
  %36 = sdiv i32 %.frozen36, 512, !dbg !17
  %.frozen38 = freeze i32 %27
  %37 = sdiv i32 %.frozen38, 512, !dbg !17
  %38 = srem i32 %36, 4, !dbg !18
  %.frozen = freeze i32 %26
  %39 = sdiv i32 %.frozen, 2048, !dbg !19
  %40 = sdiv i32 %27, 2048, !dbg !19
  %41 = mul i32 %39, 2048
  %.decomposed = sub i32 %.frozen, %41
  %42 = mul i32 %36, 512
  %.decomposed37 = sub i32 %.frozen36, %42
  %43 = mul i32 %37, 512
  %.decomposed39 = sub i32 %.frozen38, %43
  %44 = icmp slt i32 %38, 2, !dbg !20
  %45 = icmp sgt i32 %30, 255, !dbg !21
  %46 = and i1 %45, %44, !dbg !22
  %47 = shl nsw i32 %.decomposed, 8, !dbg !23
  %48 = shl i32 %39, 18, !dbg !24
  %49 = add i32 %48, %47, !dbg !25
  %50 = add i32 %49, %30, !dbg !26
  %51 = sext i32 %50 to i64, !dbg !27
  %52 = getelementptr i16, ptr addrspace(1) %0, i64 %51, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %58 = trunc i32 %54 to i16, !dbg !28
  %extelt.offset = lshr i32 %54, 16, !dbg !28
  %59 = trunc i32 %extelt.offset to i16, !dbg !28
  %60 = trunc i32 %55 to i16, !dbg !28
  %extelt.offset1 = lshr i32 %55, 16, !dbg !28
  %61 = trunc i32 %extelt.offset1 to i16, !dbg !28
  %62 = trunc i32 %56 to i16, !dbg !28
  %extelt.offset2 = lshr i32 %56, 16, !dbg !28
  %63 = trunc i32 %extelt.offset2 to i16, !dbg !28
  %64 = trunc i32 %57 to i16, !dbg !28
  %extelt.offset3 = lshr i32 %57, 16, !dbg !28
  %65 = trunc i32 %extelt.offset3 to i16, !dbg !28
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #2, !dbg !29
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #2, !dbg !29
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #2, !dbg !29
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #2, !dbg !29
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #2, !dbg !29
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #2, !dbg !29
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #2, !dbg !29
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #2, !dbg !29
  %74 = select i1 %46, float %66, float 0.000000e+00, !dbg !30
  %75 = select i1 %46, float %67, float 0.000000e+00, !dbg !30
  %76 = select i1 %46, float %68, float 0.000000e+00, !dbg !30
  %77 = select i1 %46, float %69, float 0.000000e+00, !dbg !30
  %78 = select i1 %46, float %70, float 0.000000e+00, !dbg !30
  %79 = select i1 %46, float %71, float 0.000000e+00, !dbg !30
  %80 = select i1 %46, float %72, float 0.000000e+00, !dbg !30
  %81 = select i1 %46, float %73, float 0.000000e+00, !dbg !30
  %82 = and i1 %33, %44, !dbg !31
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #2, !dbg !32
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !32
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !32
  %88 = trunc i32 %84 to i16, !dbg !32
  %extelt.offset4 = lshr i32 %84, 16, !dbg !32
  %89 = trunc i32 %extelt.offset4 to i16, !dbg !32
  %90 = trunc i32 %85 to i16, !dbg !32
  %extelt.offset5 = lshr i32 %85, 16, !dbg !32
  %91 = trunc i32 %extelt.offset5 to i16, !dbg !32
  %92 = trunc i32 %86 to i16, !dbg !32
  %extelt.offset6 = lshr i32 %86, 16, !dbg !32
  %93 = trunc i32 %extelt.offset6 to i16, !dbg !32
  %94 = trunc i32 %87 to i16, !dbg !32
  %extelt.offset7 = lshr i32 %87, 16, !dbg !32
  %95 = trunc i32 %extelt.offset7 to i16, !dbg !32
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #2, !dbg !33
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #2, !dbg !33
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #2, !dbg !33
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #2, !dbg !33
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #2, !dbg !33
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #2, !dbg !33
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #2, !dbg !33
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #2, !dbg !33
  %104 = shl nsw i32 %.decomposed37, 8, !dbg !34
  %105 = add i32 %104, %30, !dbg !35
  %106 = sext i32 %105 to i64, !dbg !36
  %107 = getelementptr i16, ptr addrspace(1) %1, i64 %106, !dbg !36
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #2, !dbg !37
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !37
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !37
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !37
  %113 = trunc i32 %109 to i16, !dbg !37
  %extelt.offset8 = lshr i32 %109, 16, !dbg !37
  %114 = trunc i32 %extelt.offset8 to i16, !dbg !37
  %115 = trunc i32 %110 to i16, !dbg !37
  %extelt.offset9 = lshr i32 %110, 16, !dbg !37
  %116 = trunc i32 %extelt.offset9 to i16, !dbg !37
  %117 = trunc i32 %111 to i16, !dbg !37
  %extelt.offset10 = lshr i32 %111, 16, !dbg !37
  %118 = trunc i32 %extelt.offset10 to i16, !dbg !37
  %119 = trunc i32 %112 to i16, !dbg !37
  %extelt.offset11 = lshr i32 %112, 16, !dbg !37
  %120 = trunc i32 %extelt.offset11 to i16, !dbg !37
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #2, !dbg !38
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #2, !dbg !38
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #2, !dbg !38
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #2, !dbg !38
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %117) #2, !dbg !38
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #2, !dbg !38
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #2, !dbg !38
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #2, !dbg !38
  %129 = fmul float %96, %121, !dbg !39
  %130 = fmul float %97, %122, !dbg !39
  %131 = fmul float %98, %123, !dbg !39
  %132 = fmul float %99, %124, !dbg !39
  %133 = fmul float %100, %125, !dbg !39
  %134 = fmul float %101, %126, !dbg !39
  %135 = fmul float %102, %127, !dbg !39
  %136 = fmul float %103, %128, !dbg !39
  %137 = icmp sgt i32 %30, 127, !dbg !40
  %138 = and i1 %137, %44, !dbg !41
  %139 = add i32 %30, -128, !dbg !42
  %140 = add i32 %49, %139, !dbg !43
  %141 = sext i32 %140 to i64, !dbg !44
  %142 = getelementptr i16, ptr addrspace(1) %0, i64 %141, !dbg !44
  %143 = and i1 %33, %138, !dbg !45
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %142, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #2, !dbg !46
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !46
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !46
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !46
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !46
  %149 = trunc i32 %145 to i16, !dbg !46
  %extelt.offset12 = lshr i32 %145, 16, !dbg !46
  %150 = trunc i32 %extelt.offset12 to i16, !dbg !46
  %151 = trunc i32 %146 to i16, !dbg !46
  %extelt.offset13 = lshr i32 %146, 16, !dbg !46
  %152 = trunc i32 %extelt.offset13 to i16, !dbg !46
  %153 = trunc i32 %147 to i16, !dbg !46
  %extelt.offset14 = lshr i32 %147, 16, !dbg !46
  %154 = trunc i32 %extelt.offset14 to i16, !dbg !46
  %155 = trunc i32 %148 to i16, !dbg !46
  %extelt.offset15 = lshr i32 %148, 16, !dbg !46
  %156 = trunc i32 %extelt.offset15 to i16, !dbg !46
  %157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %149) #2, !dbg !47
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %150) #2, !dbg !47
  %159 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %151) #2, !dbg !47
  %160 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %152) #2, !dbg !47
  %161 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %153) #2, !dbg !47
  %162 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %154) #2, !dbg !47
  %163 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #2, !dbg !47
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %156) #2, !dbg !47
  %165 = add i32 %139, %104, !dbg !48
  %166 = sext i32 %165 to i64, !dbg !49
  %167 = getelementptr i16, ptr addrspace(1) %2, i64 %166, !dbg !49
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %167, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #2, !dbg !50
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !50
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !50
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !50
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !50
  %173 = trunc i32 %169 to i16, !dbg !50
  %extelt.offset16 = lshr i32 %169, 16, !dbg !50
  %174 = trunc i32 %extelt.offset16 to i16, !dbg !50
  %175 = trunc i32 %170 to i16, !dbg !50
  %extelt.offset17 = lshr i32 %170, 16, !dbg !50
  %176 = trunc i32 %extelt.offset17 to i16, !dbg !50
  %177 = trunc i32 %171 to i16, !dbg !50
  %extelt.offset18 = lshr i32 %171, 16, !dbg !50
  %178 = trunc i32 %extelt.offset18 to i16, !dbg !50
  %179 = trunc i32 %172 to i16, !dbg !50
  %extelt.offset19 = lshr i32 %172, 16, !dbg !50
  %180 = trunc i32 %extelt.offset19 to i16, !dbg !50
  %181 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %173) #2, !dbg !51
  %182 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %174) #2, !dbg !51
  %183 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %175) #2, !dbg !51
  %184 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %176) #2, !dbg !51
  %185 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %177) #2, !dbg !51
  %186 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %178) #2, !dbg !51
  %187 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %179) #2, !dbg !51
  %188 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %180) #2, !dbg !51
  %189 = fmul float %157, %181, !dbg !52
  %190 = fmul float %158, %182, !dbg !52
  %191 = fmul float %159, %183, !dbg !52
  %192 = fmul float %160, %184, !dbg !52
  %193 = fmul float %161, %185, !dbg !52
  %194 = fmul float %162, %186, !dbg !52
  %195 = fmul float %163, %187, !dbg !52
  %196 = fmul float %164, %188, !dbg !52
  %197 = fsub float 0.000000e+00, %189, !dbg !53
  %198 = fsub float 0.000000e+00, %190, !dbg !53
  %199 = fsub float 0.000000e+00, %191, !dbg !53
  %200 = fsub float 0.000000e+00, %192, !dbg !53
  %201 = fsub float 0.000000e+00, %193, !dbg !53
  %202 = fsub float 0.000000e+00, %194, !dbg !53
  %203 = fsub float 0.000000e+00, %195, !dbg !53
  %204 = fsub float 0.000000e+00, %196, !dbg !53
  %205 = select i1 %138, float %197, float 0.000000e+00, !dbg !30
  %206 = select i1 %138, float %198, float 0.000000e+00, !dbg !30
  %207 = select i1 %138, float %199, float 0.000000e+00, !dbg !30
  %208 = select i1 %138, float %200, float 0.000000e+00, !dbg !30
  %209 = select i1 %138, float %201, float 0.000000e+00, !dbg !30
  %210 = select i1 %138, float %202, float 0.000000e+00, !dbg !30
  %211 = select i1 %138, float %203, float 0.000000e+00, !dbg !30
  %212 = select i1 %138, float %204, float 0.000000e+00, !dbg !30
  %213 = fadd float %129, %205, !dbg !54
  %214 = fadd float %130, %206, !dbg !54
  %215 = fadd float %131, %207, !dbg !54
  %216 = fadd float %132, %208, !dbg !54
  %217 = fadd float %133, %209, !dbg !54
  %218 = fadd float %134, %210, !dbg !54
  %219 = fadd float %135, %211, !dbg !54
  %220 = fadd float %136, %212, !dbg !54
  %221 = icmp slt i32 %30, 128, !dbg !55
  %222 = and i1 %221, %44, !dbg !56
  %223 = add i32 %30, 128, !dbg !57
  %224 = add i32 %49, %223, !dbg !58
  %225 = sext i32 %224 to i64, !dbg !59
  %226 = getelementptr i16, ptr addrspace(1) %0, i64 %225, !dbg !59
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %226, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #2, !dbg !60
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !60
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !60
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !60
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !60
  %232 = trunc i32 %228 to i16, !dbg !60
  %extelt.offset20 = lshr i32 %228, 16, !dbg !60
  %233 = trunc i32 %extelt.offset20 to i16, !dbg !60
  %234 = trunc i32 %229 to i16, !dbg !60
  %extelt.offset21 = lshr i32 %229, 16, !dbg !60
  %235 = trunc i32 %extelt.offset21 to i16, !dbg !60
  %236 = trunc i32 %230 to i16, !dbg !60
  %extelt.offset22 = lshr i32 %230, 16, !dbg !60
  %237 = trunc i32 %extelt.offset22 to i16, !dbg !60
  %238 = trunc i32 %231 to i16, !dbg !60
  %extelt.offset23 = lshr i32 %231, 16, !dbg !60
  %239 = trunc i32 %extelt.offset23 to i16, !dbg !60
  %240 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #2, !dbg !61
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #2, !dbg !61
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #2, !dbg !61
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #2, !dbg !61
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #2, !dbg !61
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %237) #2, !dbg !61
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %238) #2, !dbg !61
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %239) #2, !dbg !61
  %248 = add i32 %223, %104, !dbg !62
  %249 = sext i32 %248 to i64, !dbg !63
  %250 = getelementptr i16, ptr addrspace(1) %2, i64 %249, !dbg !63
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %250, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222, i32 0, i1 %222) #2, !dbg !64
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !64
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !64
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !64
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !64
  %256 = trunc i32 %252 to i16, !dbg !64
  %extelt.offset24 = lshr i32 %252, 16, !dbg !64
  %257 = trunc i32 %extelt.offset24 to i16, !dbg !64
  %258 = trunc i32 %253 to i16, !dbg !64
  %extelt.offset25 = lshr i32 %253, 16, !dbg !64
  %259 = trunc i32 %extelt.offset25 to i16, !dbg !64
  %260 = trunc i32 %254 to i16, !dbg !64
  %extelt.offset26 = lshr i32 %254, 16, !dbg !64
  %261 = trunc i32 %extelt.offset26 to i16, !dbg !64
  %262 = trunc i32 %255 to i16, !dbg !64
  %extelt.offset27 = lshr i32 %255, 16, !dbg !64
  %263 = trunc i32 %extelt.offset27 to i16, !dbg !64
  %264 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %256) #2, !dbg !65
  %265 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %257) #2, !dbg !65
  %266 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %258) #2, !dbg !65
  %267 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %259) #2, !dbg !65
  %268 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %260) #2, !dbg !65
  %269 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %261) #2, !dbg !65
  %270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %262) #2, !dbg !65
  %271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %263) #2, !dbg !65
  %272 = fmul float %240, %264, !dbg !66
  %273 = fmul float %241, %265, !dbg !66
  %274 = fmul float %242, %266, !dbg !66
  %275 = fmul float %243, %267, !dbg !66
  %276 = fmul float %244, %268, !dbg !66
  %277 = fmul float %245, %269, !dbg !66
  %278 = fmul float %246, %270, !dbg !66
  %279 = fmul float %247, %271, !dbg !66
  %280 = select i1 %222, float %272, float 0.000000e+00, !dbg !30
  %281 = select i1 %222, float %273, float 0.000000e+00, !dbg !30
  %282 = select i1 %222, float %274, float 0.000000e+00, !dbg !30
  %283 = select i1 %222, float %275, float 0.000000e+00, !dbg !30
  %284 = select i1 %222, float %276, float 0.000000e+00, !dbg !30
  %285 = select i1 %222, float %277, float 0.000000e+00, !dbg !30
  %286 = select i1 %222, float %278, float 0.000000e+00, !dbg !30
  %287 = select i1 %222, float %279, float 0.000000e+00, !dbg !30
  %288 = fadd float %213, %280, !dbg !67
  %289 = fadd float %214, %281, !dbg !67
  %290 = fadd float %215, %282, !dbg !67
  %291 = fadd float %216, %283, !dbg !67
  %292 = fadd float %217, %284, !dbg !67
  %293 = fadd float %218, %285, !dbg !67
  %294 = fadd float %219, %286, !dbg !67
  %295 = fadd float %220, %287, !dbg !67
  %296 = fadd float %74, %288, !dbg !68
  %297 = fadd float %75, %289, !dbg !68
  %298 = fadd float %76, %290, !dbg !68
  %299 = fadd float %77, %291, !dbg !68
  %300 = fadd float %78, %292, !dbg !68
  %301 = fadd float %79, %293, !dbg !68
  %302 = fadd float %80, %294, !dbg !68
  %303 = fadd float %81, %295, !dbg !68
  %304 = icmp eq i32 %38, 2, !dbg !69
  %305 = and i32 %37, -2147483645, !dbg !69
  %306 = icmp eq i32 %305, 2, !dbg !69
  %307 = shl i32 %31, 9, !dbg !70
  %308 = shl i32 %32, 9, !dbg !70
  %309 = shl i32 %40, 17, !dbg !71
  %310 = add i32 %309, %.decomposed39, !dbg !72
  %311 = add i32 %310, %307, !dbg !73
  %312 = add i32 %310, %308, !dbg !73
  %313 = sext i32 %311 to i64, !dbg !74
  %314 = getelementptr float, ptr addrspace(1) %3, i64 %313, !dbg !74
  %315 = sext i32 %312 to i64, !dbg !74
  %316 = getelementptr float, ptr addrspace(1) %3, i64 %315, !dbg !74
  %317 = and i1 %34, %306, !dbg !75
  %318 = and i1 %35, %306, !dbg !75
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %314, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317) #2, !dbg !76
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !76
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !76
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !76
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !76
  %324 = bitcast i32 %320 to float, !dbg !76
  %325 = bitcast i32 %321 to float, !dbg !76
  %326 = bitcast i32 %322 to float, !dbg !76
  %327 = bitcast i32 %323 to float, !dbg !76
  %328 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %316, i1 %318, i32 0, i1 %318, i32 0, i1 %318, i32 0, i1 %318, i32 0, i1 %318) #2, !dbg !76
  %329 = extractvalue { i32, i32, i32, i32 } %328, 0, !dbg !76
  %330 = extractvalue { i32, i32, i32, i32 } %328, 1, !dbg !76
  %331 = extractvalue { i32, i32, i32, i32 } %328, 2, !dbg !76
  %332 = extractvalue { i32, i32, i32, i32 } %328, 3, !dbg !76
  %333 = bitcast i32 %329 to float, !dbg !76
  %334 = bitcast i32 %330 to float, !dbg !76
  %335 = bitcast i32 %331 to float, !dbg !76
  %336 = bitcast i32 %332 to float, !dbg !76
  %337 = select i1 %306, float %324, float 0.000000e+00, !dbg !77
  %338 = select i1 %306, float %325, float 0.000000e+00, !dbg !77
  %339 = select i1 %306, float %326, float 0.000000e+00, !dbg !77
  %340 = select i1 %306, float %327, float 0.000000e+00, !dbg !77
  %341 = select i1 %306, float %333, float 0.000000e+00, !dbg !77
  %342 = select i1 %306, float %334, float 0.000000e+00, !dbg !77
  %343 = select i1 %306, float %335, float 0.000000e+00, !dbg !77
  %344 = select i1 %306, float %336, float 0.000000e+00, !dbg !77
  %345 = mul nuw nsw i32 %17, 33, !dbg !77
  %346 = add nuw nsw i32 %22, %345, !dbg !77
  %347 = zext nneg i32 %346 to i64, !dbg !77
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i64 %347, !dbg !77
  %349 = insertelement <1 x float> undef, float %337, i64 0, !dbg !77
  store <1 x float> %349, ptr addrspace(3) %348, align 4, !dbg !77
  %350 = add nuw nsw i32 %345, 33, !dbg !77
  %351 = add nuw nsw i32 %350, %22, !dbg !77
  %352 = zext nneg i32 %351 to i64, !dbg !77
  %353 = getelementptr float, ptr addrspace(3) @global_smem, i64 %352, !dbg !77
  %354 = insertelement <1 x float> undef, float %338, i64 0, !dbg !77
  store <1 x float> %354, ptr addrspace(3) %353, align 4, !dbg !77
  %355 = add nuw nsw i32 %345, 66, !dbg !77
  %356 = add nuw nsw i32 %355, %22, !dbg !77
  %357 = zext nneg i32 %356 to i64, !dbg !77
  %358 = getelementptr float, ptr addrspace(3) @global_smem, i64 %357, !dbg !77
  %359 = insertelement <1 x float> undef, float %339, i64 0, !dbg !77
  store <1 x float> %359, ptr addrspace(3) %358, align 4, !dbg !77
  %360 = add nuw nsw i32 %345, 99, !dbg !77
  %361 = add nuw nsw i32 %360, %22, !dbg !77
  %362 = zext nneg i32 %361 to i64, !dbg !77
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i64 %362, !dbg !77
  %364 = insertelement <1 x float> undef, float %340, i64 0, !dbg !77
  store <1 x float> %364, ptr addrspace(3) %363, align 4, !dbg !77
  %365 = add nuw nsw i32 %23, %345, !dbg !77
  %366 = zext nneg i32 %365 to i64, !dbg !77
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i64 %366, !dbg !77
  %368 = insertelement <1 x float> undef, float %341, i64 0, !dbg !77
  store <1 x float> %368, ptr addrspace(3) %367, align 4, !dbg !77
  %369 = add nuw nsw i32 %23, %350, !dbg !77
  %370 = zext nneg i32 %369 to i64, !dbg !77
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i64 %370, !dbg !77
  %372 = insertelement <1 x float> undef, float %342, i64 0, !dbg !77
  store <1 x float> %372, ptr addrspace(3) %371, align 4, !dbg !77
  %373 = add nuw nsw i32 %23, %355, !dbg !77
  %374 = zext nneg i32 %373 to i64, !dbg !77
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i64 %374, !dbg !77
  %376 = insertelement <1 x float> undef, float %343, i64 0, !dbg !77
  store <1 x float> %376, ptr addrspace(3) %375, align 4, !dbg !77
  %377 = add nuw nsw i32 %23, %360, !dbg !77
  %378 = zext nneg i32 %377 to i64, !dbg !77
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i64 %378, !dbg !77
  %380 = insertelement <1 x float> undef, float %344, i64 0, !dbg !77
  store <1 x float> %380, ptr addrspace(3) %379, align 4, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %381 = mul nuw nsw i32 %15, 33, !dbg !77
  %382 = add nuw nsw i32 %381, %19, !dbg !77
  %383 = zext nneg i32 %382 to i64, !dbg !77
  %384 = getelementptr float, ptr addrspace(3) @global_smem, i64 %383, !dbg !77
  %385 = load float, ptr addrspace(3) %384, align 4, !dbg !77
  %386 = or i32 %19, 1, !dbg !77
  %387 = add nuw nsw i32 %386, %381, !dbg !77
  %388 = zext nneg i32 %387 to i64, !dbg !77
  %389 = getelementptr float, ptr addrspace(3) @global_smem, i64 %388, !dbg !77
  %390 = load float, ptr addrspace(3) %389, align 4, !dbg !77
  %391 = or i32 %19, 2, !dbg !77
  %392 = add nuw nsw i32 %391, %381, !dbg !77
  %393 = zext nneg i32 %392 to i64, !dbg !77
  %394 = getelementptr float, ptr addrspace(3) @global_smem, i64 %393, !dbg !77
  %395 = load float, ptr addrspace(3) %394, align 4, !dbg !77
  %396 = or i32 %19, 3, !dbg !77
  %397 = add nuw nsw i32 %396, %381, !dbg !77
  %398 = zext nneg i32 %397 to i64, !dbg !77
  %399 = getelementptr float, ptr addrspace(3) @global_smem, i64 %398, !dbg !77
  %400 = load float, ptr addrspace(3) %399, align 4, !dbg !77
  %401 = or i32 %19, 4, !dbg !77
  %402 = add nuw nsw i32 %401, %381, !dbg !77
  %403 = zext nneg i32 %402 to i64, !dbg !77
  %404 = getelementptr float, ptr addrspace(3) @global_smem, i64 %403, !dbg !77
  %405 = load float, ptr addrspace(3) %404, align 4, !dbg !77
  %406 = or i32 %19, 5, !dbg !77
  %407 = add nuw nsw i32 %406, %381, !dbg !77
  %408 = zext nneg i32 %407 to i64, !dbg !77
  %409 = getelementptr float, ptr addrspace(3) @global_smem, i64 %408, !dbg !77
  %410 = load float, ptr addrspace(3) %409, align 4, !dbg !77
  %411 = or i32 %19, 6, !dbg !77
  %412 = add nuw nsw i32 %411, %381, !dbg !77
  %413 = zext nneg i32 %412 to i64, !dbg !77
  %414 = getelementptr float, ptr addrspace(3) @global_smem, i64 %413, !dbg !77
  %415 = load float, ptr addrspace(3) %414, align 4, !dbg !77
  %416 = or i32 %19, 7, !dbg !77
  %417 = add nuw nsw i32 %416, %381, !dbg !77
  %418 = zext nneg i32 %417 to i64, !dbg !77
  %419 = getelementptr float, ptr addrspace(3) @global_smem, i64 %418, !dbg !77
  %420 = load float, ptr addrspace(3) %419, align 4, !dbg !77
  %421 = icmp sgt i32 %38, 2, !dbg !78
  %422 = add i32 %105, %48, !dbg !79
  %423 = sext i32 %422 to i64, !dbg !80
  %424 = getelementptr i16, ptr addrspace(1) %4, i64 %423, !dbg !80
  %425 = and i1 %33, %421, !dbg !81
  %426 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %424, i1 %425, i32 0, i1 %425, i32 0, i1 %425, i32 0, i1 %425, i32 0, i1 %425) #2, !dbg !82
  %427 = extractvalue { i32, i32, i32, i32 } %426, 0, !dbg !82
  %428 = extractvalue { i32, i32, i32, i32 } %426, 1, !dbg !82
  %429 = extractvalue { i32, i32, i32, i32 } %426, 2, !dbg !82
  %430 = extractvalue { i32, i32, i32, i32 } %426, 3, !dbg !82
  %431 = trunc i32 %427 to i16, !dbg !82
  %extelt.offset28 = lshr i32 %427, 16, !dbg !82
  %432 = trunc i32 %extelt.offset28 to i16, !dbg !82
  %433 = trunc i32 %428 to i16, !dbg !82
  %extelt.offset29 = lshr i32 %428, 16, !dbg !82
  %434 = trunc i32 %extelt.offset29 to i16, !dbg !82
  %435 = trunc i32 %429 to i16, !dbg !82
  %extelt.offset30 = lshr i32 %429, 16, !dbg !82
  %436 = trunc i32 %extelt.offset30 to i16, !dbg !82
  %437 = trunc i32 %430 to i16, !dbg !82
  %extelt.offset31 = lshr i32 %430, 16, !dbg !82
  %438 = trunc i32 %extelt.offset31 to i16, !dbg !82
  %439 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #2, !dbg !83
  %440 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #2, !dbg !83
  %441 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #2, !dbg !83
  %442 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %434) #2, !dbg !83
  %443 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %435) #2, !dbg !83
  %444 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #2, !dbg !83
  %445 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #2, !dbg !83
  %446 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #2, !dbg !83
  %447 = add i32 %105, 131072, !dbg !84
  %448 = add i32 %447, %48, !dbg !85
  %449 = sext i32 %448 to i64, !dbg !86
  %450 = getelementptr i16, ptr addrspace(1) %4, i64 %449, !dbg !86
  %451 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %450, i1 %425, i32 0, i1 %425, i32 0, i1 %425, i32 0, i1 %425, i32 0, i1 %425) #2, !dbg !87
  %452 = extractvalue { i32, i32, i32, i32 } %451, 0, !dbg !87
  %453 = extractvalue { i32, i32, i32, i32 } %451, 1, !dbg !87
  %454 = extractvalue { i32, i32, i32, i32 } %451, 2, !dbg !87
  %455 = extractvalue { i32, i32, i32, i32 } %451, 3, !dbg !87
  %456 = trunc i32 %452 to i16, !dbg !87
  %extelt.offset32 = lshr i32 %452, 16, !dbg !87
  %457 = trunc i32 %extelt.offset32 to i16, !dbg !87
  %458 = trunc i32 %453 to i16, !dbg !87
  %extelt.offset33 = lshr i32 %453, 16, !dbg !87
  %459 = trunc i32 %extelt.offset33 to i16, !dbg !87
  %460 = trunc i32 %454 to i16, !dbg !87
  %extelt.offset34 = lshr i32 %454, 16, !dbg !87
  %461 = trunc i32 %extelt.offset34 to i16, !dbg !87
  %462 = trunc i32 %455 to i16, !dbg !87
  %extelt.offset35 = lshr i32 %455, 16, !dbg !87
  %463 = trunc i32 %extelt.offset35 to i16, !dbg !87
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %456) #2, !dbg !88
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %457) #2, !dbg !88
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #2, !dbg !88
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #2, !dbg !88
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #2, !dbg !88
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %461) #2, !dbg !88
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #2, !dbg !88
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #2, !dbg !88
  %472 = fadd float %439, %464, !dbg !89
  %473 = fadd float %440, %465, !dbg !89
  %474 = fadd float %441, %466, !dbg !89
  %475 = fadd float %442, %467, !dbg !89
  %476 = fadd float %443, %468, !dbg !89
  %477 = fadd float %444, %469, !dbg !89
  %478 = fadd float %445, %470, !dbg !89
  %479 = fadd float %446, %471, !dbg !89
  %480 = select i1 %421, float %472, float 0.000000e+00, !dbg !90
  %481 = select i1 %421, float %473, float 0.000000e+00, !dbg !90
  %482 = select i1 %421, float %474, float 0.000000e+00, !dbg !90
  %483 = select i1 %421, float %475, float 0.000000e+00, !dbg !90
  %484 = select i1 %421, float %476, float 0.000000e+00, !dbg !90
  %485 = select i1 %421, float %477, float 0.000000e+00, !dbg !90
  %486 = select i1 %421, float %478, float 0.000000e+00, !dbg !90
  %487 = select i1 %421, float %479, float 0.000000e+00, !dbg !90
  %488 = select i1 %304, float %385, float %480, !dbg !91
  %489 = select i1 %304, float %390, float %481, !dbg !91
  %490 = select i1 %304, float %395, float %482, !dbg !91
  %491 = select i1 %304, float %400, float %483, !dbg !91
  %492 = select i1 %304, float %405, float %484, !dbg !91
  %493 = select i1 %304, float %410, float %485, !dbg !91
  %494 = select i1 %304, float %415, float %486, !dbg !91
  %495 = select i1 %304, float %420, float %487, !dbg !91
  %496 = select i1 %44, float %296, float %488, !dbg !30
  %497 = select i1 %44, float %297, float %489, !dbg !30
  %498 = select i1 %44, float %298, float %490, !dbg !30
  %499 = select i1 %44, float %299, float %491, !dbg !30
  %500 = select i1 %44, float %300, float %492, !dbg !30
  %501 = select i1 %44, float %301, float %493, !dbg !30
  %502 = select i1 %44, float %302, float %494, !dbg !30
  %503 = select i1 %44, float %303, float %495, !dbg !30
  %504 = shl i32 %26, 8, !dbg !92
  %505 = add i32 %30, %504, !dbg !93
  %506 = sext i32 %505 to i64, !dbg !94
  %507 = getelementptr i16, ptr addrspace(1) %5, i64 %506, !dbg !94
  %508 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %496) #2, !dbg !95
  %509 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %497) #2, !dbg !95
  %510 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %498) #2, !dbg !95
  %511 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %499) #2, !dbg !95
  %512 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %500) #2, !dbg !95
  %513 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %501) #2, !dbg !95
  %514 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %502) #2, !dbg !95
  %515 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #2, !dbg !95
  %516 = insertelement <2 x i16> undef, i16 %508, i64 0, !dbg !95
  %517 = insertelement <2 x i16> %516, i16 %509, i64 1, !dbg !95
  %518 = bitcast <2 x i16> %517 to i32, !dbg !95
  %519 = insertelement <2 x i16> undef, i16 %510, i64 0, !dbg !95
  %520 = insertelement <2 x i16> %519, i16 %511, i64 1, !dbg !95
  %521 = bitcast <2 x i16> %520 to i32, !dbg !95
  %522 = insertelement <2 x i16> undef, i16 %512, i64 0, !dbg !95
  %523 = insertelement <2 x i16> %522, i16 %513, i64 1, !dbg !95
  %524 = bitcast <2 x i16> %523 to i32, !dbg !95
  %525 = insertelement <2 x i16> undef, i16 %514, i64 0, !dbg !95
  %526 = insertelement <2 x i16> %525, i16 %515, i64 1, !dbg !95
  %527 = bitcast <2 x i16> %526 to i32, !dbg !95
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %518, i32 %521, i32 %524, i32 %527, ptr addrspace(1) %507, i1 %33) #2, !dbg !95
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cpfxyb2ynnh7hfthytrpoqivkunicfdurlx5kuksxkvzgbymthnl.py", directory: "/tmp/torchinductor_zeus/pf")
!3 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6de7de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7de", linkageName: "triton__0d1d2d3d4d5d6de7de", scope: !2, file: !2, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 44, scope: !5)
!10 = !DILocation(line: 21, column: 28, scope: !5)
!11 = !DILocation(line: 21, column: 33, scope: !5)
!12 = !DILocation(line: 22, column: 23, scope: !5)
!13 = !DILocation(line: 24, column: 28, scope: !5)
!14 = !DILocation(line: 24, column: 33, scope: !5)
!15 = !DILocation(line: 25, column: 23, scope: !5)
!16 = !DILocation(line: 26, column: 21, scope: !5)
!17 = !DILocation(line: 27, column: 20, scope: !5)
!18 = !DILocation(line: 27, column: 27, scope: !5)
!19 = !DILocation(line: 29, column: 20, scope: !5)
!20 = !DILocation(line: 37, column: 18, scope: !5)
!21 = !DILocation(line: 40, column: 19, scope: !5)
!22 = !DILocation(line: 41, column: 18, scope: !5)
!23 = !DILocation(line: 42, column: 40, scope: !5)
!24 = !DILocation(line: 42, column: 54, scope: !5)
!25 = !DILocation(line: 42, column: 36, scope: !5)
!26 = !DILocation(line: 42, column: 47, scope: !5)
!27 = !DILocation(line: 42, column: 30, scope: !5)
!28 = !DILocation(line: 42, column: 60, scope: !5)
!29 = !DILocation(line: 42, column: 118, scope: !5)
!30 = !DILocation(line: 0, scope: !5)
!31 = !DILocation(line: 47, column: 68, scope: !5)
!32 = !DILocation(line: 47, column: 61, scope: !5)
!33 = !DILocation(line: 47, column: 119, scope: !5)
!34 = !DILocation(line: 48, column: 41, scope: !5)
!35 = !DILocation(line: 48, column: 37, scope: !5)
!36 = !DILocation(line: 48, column: 31, scope: !5)
!37 = !DILocation(line: 48, column: 47, scope: !5)
!38 = !DILocation(line: 48, column: 105, scope: !5)
!39 = !DILocation(line: 49, column: 20, scope: !5)
!40 = !DILocation(line: 51, column: 20, scope: !5)
!41 = !DILocation(line: 52, column: 20, scope: !5)
!42 = !DILocation(line: 53, column: 40, scope: !5)
!43 = !DILocation(line: 53, column: 57, scope: !5)
!44 = !DILocation(line: 53, column: 31, scope: !5)
!45 = !DILocation(line: 53, column: 78, scope: !5)
!46 = !DILocation(line: 53, column: 70, scope: !5)
!47 = !DILocation(line: 53, column: 129, scope: !5)
!48 = !DILocation(line: 54, column: 46, scope: !5)
!49 = !DILocation(line: 54, column: 31, scope: !5)
!50 = !DILocation(line: 54, column: 56, scope: !5)
!51 = !DILocation(line: 54, column: 115, scope: !5)
!52 = !DILocation(line: 55, column: 20, scope: !5)
!53 = !DILocation(line: 56, column: 13, scope: !5)
!54 = !DILocation(line: 60, column: 20, scope: !5)
!55 = !DILocation(line: 61, column: 19, scope: !5)
!56 = !DILocation(line: 62, column: 20, scope: !5)
!57 = !DILocation(line: 63, column: 37, scope: !5)
!58 = !DILocation(line: 63, column: 54, scope: !5)
!59 = !DILocation(line: 63, column: 31, scope: !5)
!60 = !DILocation(line: 63, column: 67, scope: !5)
!61 = !DILocation(line: 63, column: 126, scope: !5)
!62 = !DILocation(line: 64, column: 43, scope: !5)
!63 = !DILocation(line: 64, column: 31, scope: !5)
!64 = !DILocation(line: 64, column: 53, scope: !5)
!65 = !DILocation(line: 64, column: 112, scope: !5)
!66 = !DILocation(line: 65, column: 20, scope: !5)
!67 = !DILocation(line: 69, column: 20, scope: !5)
!68 = !DILocation(line: 70, column: 20, scope: !5)
!69 = !DILocation(line: 76, column: 20, scope: !5)
!70 = !DILocation(line: 77, column: 41, scope: !5)
!71 = !DILocation(line: 77, column: 55, scope: !5)
!72 = !DILocation(line: 77, column: 37, scope: !5)
!73 = !DILocation(line: 77, column: 48, scope: !5)
!74 = !DILocation(line: 77, column: 31, scope: !5)
!75 = !DILocation(line: 77, column: 69, scope: !5)
!76 = !DILocation(line: 77, column: 61, scope: !5)
!77 = !DILocation(line: 80, column: 35, scope: !5)
!78 = !DILocation(line: 81, column: 20, scope: !5)
!79 = !DILocation(line: 84, column: 48, scope: !5)
!80 = !DILocation(line: 84, column: 31, scope: !5)
!81 = !DILocation(line: 84, column: 69, scope: !5)
!82 = !DILocation(line: 84, column: 61, scope: !5)
!83 = !DILocation(line: 84, column: 120, scope: !5)
!84 = !DILocation(line: 86, column: 46, scope: !5)
!85 = !DILocation(line: 86, column: 57, scope: !5)
!86 = !DILocation(line: 86, column: 31, scope: !5)
!87 = !DILocation(line: 86, column: 70, scope: !5)
!88 = !DILocation(line: 86, column: 129, scope: !5)
!89 = !DILocation(line: 88, column: 20, scope: !5)
!90 = !DILocation(line: 91, column: 35, scope: !5)
!91 = !DILocation(line: 92, column: 35, scope: !5)
!92 = !DILocation(line: 94, column: 35, scope: !5)
!93 = !DILocation(line: 94, column: 31, scope: !5)
!94 = !DILocation(line: 94, column: 25, scope: !5)
!95 = !DILocation(line: 94, column: 48, scope: !5)
!96 = !DILocation(line: 94, column: 4, scope: !5)
